{"id":"075e0eb1d2026bc8dc173e609c50455f","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _forwarderRegistry;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _forwarderRegistry = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _forwarderRegistry;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\n        return forwarder == address(_forwarderRegistry);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\n/**\n * @title Anichess The Missing Orbs Claim Contract\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n * @dev entitled to the rewards without revealing the entire list of recipients.\n * @notice This contract uses a Merkle Tree to allow users to claim tokens if they possess a valid proof.\n */\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext {\n    using MerkleProof for bytes32[];\n\n    /// @notice Mapping to store claim status to prevent double claiming.\n    mapping(bytes32 => bool) public claimStatus;\n\n    /// @notice The Merkle root of the claim.\n    bytes32 public immutable MERKLE_ROOT;\n    /// @notice The ERC1155Mintable reward contract interface.\n    IERC1155Mintable public immutable REWARD_CONTRACT;\n\n    /// @notice Event emitted when a payout is claimed.\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256[] ids, uint256[] values);\n\n    /// @notice Error thrown when the payout has already been claimed.\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, bytes32 epochId);\n\n    /// @notice Error thrown when the proof provided for the claim is invalid.\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, bytes32 epochId);\n\n    /**\n     * @dev Initializes the contract by setting the reward token contract and the forwarder registry.\n     * @param merkleRoot The Merkle root to use for the claims.\n     * @param rewardContract The ERC1155Mintable token contract address.\n     * @param forwarderRegistry The address of the forwarder registry contract.\n     */\n    constructor(\n        bytes32 merkleRoot,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) {\n        MERKLE_ROOT = merkleRoot;\n        REWARD_CONTRACT = rewardContract;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Allows eligible users to claim their rewards using a Merkle proof.\n     * @dev Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.\n     * @param epochId The epoch ID for the claim.\n     * @param proof The Merkle proof for the claim.\n     * @param recipient The address of the recipient.\n     * @param ids The array of token IDs to claim.\n     * @param values The array of token values to claim.\n     * @dev Throws if the claim has already been claimed.\n     * @dev Throws if the proof is invalid.\n     * @dev Throws if the claim is invalid.\n     */\n    function claim(bytes32 epochId, bytes32[] memory proof, address recipient, uint256[] memory ids, uint256[] memory values) external {\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, ids, values, epochId));\n\n        if (claimStatus[leaf]) revert AlreadyClaimed(recipient, ids, values, epochId);\n        if (!proof.verify(MERKLE_ROOT, leaf)) revert InvalidProof(recipient, ids, values, epochId);\n\n        claimStatus[leaf] = true;\n        REWARD_CONTRACT.safeBatchMint(recipient, ids, values, \"\");\n\n        emit PayoutClaimed(epochId, recipient, ids, values);\n    }\n}\n"},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {AnichessERC1155MerkleClaim} from \"../../merkleClaim/AnichessERC1155MerkleClaim.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\ncontract AnichessERC1155MerkleClaimMock is AnichessERC1155MerkleClaim {\n    constructor(\n        bytes32 merkleRoot,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) AnichessERC1155MerkleClaim(merkleRoot, rewardContract, forwarderRegistry) {}\n\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[49],"ForwarderRegistryContextBase":[169],"IERC2771":[181],"IForwarderRegistry":[195]},"id":50,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":50,"sourceUnit":196,"src":"57:71:0","symbolAliases":[{"foreign":{"id":2,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"65:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":50,"sourceUnit":182,"src":"129:51:0","symbolAliases":[{"foreign":{"id":4,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"137:8:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":50,"sourceUnit":170,"src":"181:85:0","symbolAliases":[{"foreign":{"id":6,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"189:28:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ForwarderRegistryContextBase","nameLocations":["574:28:0"],"nodeType":"IdentifierPath","referencedDeclaration":169,"src":"574:28:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"574:28:0"},{"baseName":{"id":11,"name":"IERC2771","nameLocations":["604:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":181,"src":"604:8:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"604:8:0"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"268:260:0","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":49,"linearizedBaseContracts":[49,181,169],"name":"ForwarderRegistryContext","nameLocation":"546:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":21,"nodeType":"Block","src":"719:2:0","statements":[]},"id":22,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":18,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"699:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}}],"id":19,"kind":"baseConstructorSpecifier","modifierName":{"id":17,"name":"ForwarderRegistryContextBase","nameLocations":["670:28:0"],"nodeType":"IdentifierPath","referencedDeclaration":169,"src":"670:28:0"},"nodeType":"ModifierInvocation","src":"670:48:0"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"650:18:0","nodeType":"VariableDeclaration","scope":22,"src":"631:37:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"},"typeName":{"id":14,"nodeType":"UserDefinedTypeName","pathNode":{"id":13,"name":"IForwarderRegistry","nameLocations":["631:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"631:18:0"},"referencedDeclaration":195,"src":"631:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"630:39:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"719:0:0"},"scope":49,"src":"619:102:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"799:42:0","statements":[{"expression":{"id":28,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"816:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":27,"id":29,"nodeType":"Return","src":"809:25:0"}]},"functionSelector":"2b4c9f16","id":31,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"736:17:0","nodeType":"FunctionDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[],"src":"753:2:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":31,"src":"779:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"},"typeName":{"id":25,"nodeType":"UserDefinedTypeName","pathNode":{"id":24,"name":"IForwarderRegistry","nameLocations":["779:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"779:18:0"},"referencedDeclaration":195,"src":"779:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"778:20:0"},"scope":49,"src":"727:114:0","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[180],"body":{"id":47,"nodeType":"Block","src":"969:64:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":40,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"986:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":43,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1007:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}],"id":42,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"999:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:0","typeDescriptions":{}}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"999:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"986:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":39,"id":46,"nodeType":"Return","src":"979:47:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"847:24:0","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":48,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"885:18:0","nodeType":"FunctionDefinition","overrides":{"id":36,"nodeType":"OverrideSpecifier","overrides":[],"src":"945:8:0"},"parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"forwarder","nameLocation":"912:9:0","nodeType":"VariableDeclaration","scope":48,"src":"904:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33,"name":"address","nodeType":"ElementaryTypeName","src":"904:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"903:19:0"},"returnParameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":38,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":48,"src":"963:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":37,"name":"bool","nodeType":"ElementaryTypeName","src":"963:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"962:6:0"},"scope":49,"src":"876:157:0","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":50,"src":"528:507:0","usedErrors":[]}],"src":"32:1004:0"},"id":0},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[224],"ForwarderRegistryContextBase":[169],"IForwarderRegistry":[195]},"id":170,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":51,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":53,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":170,"sourceUnit":196,"src":"57:74:1","symbolAliases":[{"foreign":{"id":52,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"65:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":55,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":170,"sourceUnit":225,"src":"132:67:1","symbolAliases":[{"foreign":{"id":54,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"140:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":56,"nodeType":"StructuredDocumentation","src":"201:243:1","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":169,"linearizedBaseContracts":[169],"name":"ForwarderRegistryContextBase","nameLocation":"462:28:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":59,"mutability":"immutable","name":"_forwarderRegistry","nameLocation":"535:18:1","nodeType":"VariableDeclaration","scope":169,"src":"497:56:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"},"typeName":{"id":58,"nodeType":"UserDefinedTypeName","pathNode":{"id":57,"name":"IForwarderRegistry","nameLocations":["497:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"497:18:1"},"referencedDeclaration":195,"src":"497:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":69,"nodeType":"Block","src":"610:55:1","statements":[{"expression":{"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":65,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"620:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":66,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"641:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"src":"620:38:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"id":68,"nodeType":"ExpressionStatement","src":"620:38:1"}]},"id":70,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"591:17:1","nodeType":"VariableDeclaration","scope":70,"src":"572:36:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"},"typeName":{"id":61,"nodeType":"UserDefinedTypeName","pathNode":{"id":60,"name":"IForwarderRegistry","nameLocations":["572:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"572:18:1"},"referencedDeclaration":195,"src":"572:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"571:38:1"},"returnParameters":{"id":64,"nodeType":"ParameterList","parameters":[],"src":"610:0:1"},"scope":169,"src":"560:105:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":119,"nodeType":"Block","src":"843:681:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":76,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1044:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1044:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":78,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967270,"src":"1058:2:1","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1061:6:1","memberName":"origin","nodeType":"MemberAccess","src":"1058:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1044:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":81,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1071:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1075:4:1","memberName":"data","nodeType":"MemberAccess","src":"1071:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1080:6:1","memberName":"length","nodeType":"MemberAccess","src":"1071:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1089:2:1","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1071:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1044:47:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":91,"nodeType":"IfStatement","src":"1040:95:1","trueBody":{"id":90,"nodeType":"Block","src":"1093:42:1","statements":[{"expression":{"expression":{"id":87,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1114:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1118:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1114:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":75,"id":89,"nodeType":"Return","src":"1107:17:1"}]}},{"assignments":[93],"declarations":[{"constant":false,"id":93,"mutability":"mutable","name":"sender","nameLocation":"1153:6:1","nodeType":"VariableDeclaration","scope":119,"src":"1145:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":97,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":94,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"1162:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$224_$","typeString":"type(library ERC2771Calldata)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1178:9:1","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":206,"src":"1162:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1145:44:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":98,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1347:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1351:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1347:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":102,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1369:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}],"id":101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1361:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"1361:7:1","typeDescriptions":{}}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1361:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1347:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":107,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"1431:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":108,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1439:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1443:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1439:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":105,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1392:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1411:19:1","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":194,"src":"1392:38:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1392:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1347:103:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":115,"nodeType":"IfStatement","src":"1343:147:1","trueBody":{"id":114,"nodeType":"Block","src":"1452:38:1","statements":[{"expression":{"id":112,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"1473:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":75,"id":113,"nodeType":"Return","src":"1466:13:1"}]}},{"expression":{"expression":{"id":116,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1507:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1507:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":75,"id":118,"nodeType":"Return","src":"1500:17:1"}]},"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"671:105:1","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":120,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"790:10:1","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[],"src":"800:2:1"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":120,"src":"834:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"834:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"833:9:1"},"scope":169,"src":"781:743:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":167,"nodeType":"Block","src":"1705:666:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":126,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1906:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1910:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1906:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":128,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967270,"src":"1920:2:1","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1923:6:1","memberName":"origin","nodeType":"MemberAccess","src":"1920:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1906:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":131,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1933:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1937:4:1","memberName":"data","nodeType":"MemberAccess","src":"1933:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:6:1","memberName":"length","nodeType":"MemberAccess","src":"1933:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1951:2:1","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1933:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1906:47:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":141,"nodeType":"IfStatement","src":"1902:93:1","trueBody":{"id":140,"nodeType":"Block","src":"1955:40:1","statements":[{"expression":{"expression":{"id":137,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1976:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1980:4:1","memberName":"data","nodeType":"MemberAccess","src":"1976:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":125,"id":139,"nodeType":"Return","src":"1969:15:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":142,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2156:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2160:6:1","memberName":"sender","nodeType":"MemberAccess","src":"2156:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":146,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"2178:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}],"id":145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2170:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":144,"name":"address","nodeType":"ElementaryTypeName","src":"2170:7:1","typeDescriptions":{}}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2170:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2156:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":151,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"2240:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$224_$","typeString":"type(library ERC2771Calldata)"}},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2256:9:1","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":206,"src":"2240:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2240:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":154,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2269:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:1","memberName":"sender","nodeType":"MemberAccess","src":"2269:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":149,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"2201:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2220:19:1","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":194,"src":"2201:38:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2201:79:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2156:124:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":163,"nodeType":"IfStatement","src":"2152:187:1","trueBody":{"id":162,"nodeType":"Block","src":"2282:57:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":158,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"2303:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$224_$","typeString":"type(library ERC2771Calldata)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2319:7:1","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":223,"src":"2303:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":125,"id":161,"nodeType":"Return","src":"2296:32:1"}]}},{"expression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2356:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2360:4:1","memberName":"data","nodeType":"MemberAccess","src":"2356:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":125,"id":166,"nodeType":"Return","src":"2349:15:1"}]},"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"1530:103:1","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":168,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1647:8:1","nodeType":"FunctionDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[],"src":"1655:2:1"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":168,"src":"1689:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":123,"name":"bytes","nodeType":"ElementaryTypeName","src":"1689:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1688:16:1"},"scope":169,"src":"1638:733:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":170,"src":"444:1929:1","usedErrors":[]}],"src":"32:2342:1"},"id":1},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[181]},"id":182,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":171,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":172,"nodeType":"StructuredDocumentation","src":"57:110:2","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":181,"linearizedBaseContracts":[181],"name":"IERC2771","nameLocation":"177:8:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"192:171:2","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":180,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"377:18:2","nodeType":"FunctionDefinition","parameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"forwarder","nameLocation":"404:9:2","nodeType":"VariableDeclaration","scope":180,"src":"396:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"396:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"395:19:2"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"isTrusted","nameLocation":"443:9:2","nodeType":"VariableDeclaration","scope":180,"src":"438:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":177,"name":"bool","nodeType":"ElementaryTypeName","src":"438:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"437:16:2"},"scope":181,"src":"368:86:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":182,"src":"167:289:2","usedErrors":[]}],"src":"32:425:2"},"id":2},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[195]},"id":196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":183,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"57:143:3","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":195,"linearizedBaseContracts":[195],"name":"IForwarderRegistry","nameLocation":"210:18:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"235:314:3","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":194,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"563:19:3","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"sender","nameLocation":"591:6:3","nodeType":"VariableDeclaration","scope":194,"src":"583:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"583:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"forwarder","nameLocation":"607:9:3","nodeType":"VariableDeclaration","scope":194,"src":"599:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"599:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"582:35:3"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"isApproved","nameLocation":"646:10:3","nodeType":"VariableDeclaration","scope":194,"src":"641:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":191,"name":"bool","nodeType":"ElementaryTypeName","src":"641:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"640:17:3"},"scope":195,"src":"554:104:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":196,"src":"200:460:3","usedErrors":[]}],"src":"32:629:3"},"id":3},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[224]},"id":225,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":197,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":198,"nodeType":"StructuredDocumentation","src":"57:144:4","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":224,"linearizedBaseContracts":[224],"name":"ERC2771Calldata","nameLocation":"209:15:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":205,"nodeType":"Block","src":"397:105:4","statements":[{"AST":{"nodeType":"YulBlock","src":"416:80:4","statements":[{"nodeType":"YulAssignment","src":"430:56:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:4","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"465:12:4"},"nodeType":"YulFunctionCall","src":"465:14:4"},{"kind":"number","nodeType":"YulLiteral","src":"481:2:4","type":"","value":"20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"461:3:4"},"nodeType":"YulFunctionCall","src":"461:23:4"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"448:12:4"},"nodeType":"YulFunctionCall","src":"448:37:4"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"440:3:4"},"nodeType":"YulFunctionCall","src":"440:46:4"},"variableNames":[{"name":"sender","nodeType":"YulIdentifier","src":"430:6:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":202,"isOffset":false,"isSlot":false,"src":"430:6:4","valueSize":1}],"id":204,"nodeType":"InlineAssembly","src":"407:89:4"}]},"documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"231:101:4","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":206,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"346:9:4","nodeType":"FunctionDefinition","parameters":{"id":200,"nodeType":"ParameterList","parameters":[],"src":"355:2:4"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"sender","nameLocation":"389:6:4","nodeType":"VariableDeclaration","scope":206,"src":"381:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":201,"name":"address","nodeType":"ElementaryTypeName","src":"381:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"380:16:4"},"scope":224,"src":"337:165:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":222,"nodeType":"Block","src":"678:89:4","statements":[{"id":221,"nodeType":"UncheckedBlock","src":"688:73:4","statements":[{"expression":{"baseExpression":{"expression":{"id":212,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"719:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:4:4","memberName":"data","nodeType":"MemberAccess","src":"719:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":214,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"729:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"733:4:4","memberName":"data","nodeType":"MemberAccess","src":"729:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:4","memberName":"length","nodeType":"MemberAccess","src":"729:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"747:2:4","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"729:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"719:31:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":211,"id":220,"nodeType":"Return","src":"712:38:4"}]}]},"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"508:102:4","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"624:7:4","nodeType":"FunctionDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"631:2:4"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"data","nameLocation":"672:4:4","nodeType":"VariableDeclaration","scope":223,"src":"657:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":209,"name":"bytes","nodeType":"ElementaryTypeName","src":"657:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"656:21:4"},"scope":224,"src":"615:152:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":225,"src":"201:568:4","usedErrors":[]}],"src":"32:738:4"},"id":4},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[254]},"id":255,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":226,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"33:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":227,"nodeType":"StructuredDocumentation","src":"58:196:5","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x5190c92c."},"fullyImplemented":false,"id":254,"linearizedBaseContracts":[254],"name":"IERC1155Mintable","nameLocation":"264:16:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"287:550:5","text":"@notice Safely mints some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"5cfa9297","id":239,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"851:8:5","nodeType":"FunctionDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"to","nameLocation":"868:2:5","nodeType":"VariableDeclaration","scope":239,"src":"860:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"860:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"id","nameLocation":"880:2:5","nodeType":"VariableDeclaration","scope":239,"src":"872:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":231,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"value","nameLocation":"892:5:5","nodeType":"VariableDeclaration","scope":239,"src":"884:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":236,"mutability":"mutable","name":"data","nameLocation":"914:4:5","nodeType":"VariableDeclaration","scope":239,"src":"899:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":235,"name":"bytes","nodeType":"ElementaryTypeName","src":"899:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"859:60:5"},"returnParameters":{"id":238,"nodeType":"ParameterList","parameters":[],"src":"928:0:5"},"scope":254,"src":"842:87:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"935:644:5","text":"@notice Safely mints a batch of tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"0d6a5bbb","id":253,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1593:13:5","nodeType":"FunctionDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"to","nameLocation":"1615:2:5","nodeType":"VariableDeclaration","scope":253,"src":"1607:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":241,"name":"address","nodeType":"ElementaryTypeName","src":"1607:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":245,"mutability":"mutable","name":"ids","nameLocation":"1638:3:5","nodeType":"VariableDeclaration","scope":253,"src":"1619:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1619:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":244,"nodeType":"ArrayTypeName","src":"1619:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"values","nameLocation":"1662:6:5","nodeType":"VariableDeclaration","scope":253,"src":"1643:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":247,"nodeType":"ArrayTypeName","src":"1643:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":250,"mutability":"mutable","name":"data","nameLocation":"1685:4:5","nodeType":"VariableDeclaration","scope":253,"src":"1670:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":249,"name":"bytes","nodeType":"ElementaryTypeName","src":"1670:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1606:84:5"},"returnParameters":{"id":252,"nodeType":"ParameterList","parameters":[],"src":"1699:0:5"},"scope":254,"src":"1584:116:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":255,"src":"254:1448:5","usedErrors":[]}],"src":"33:1670:5"},"id":5},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[756]},"id":757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":256,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"143:658:6","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":756,"linearizedBaseContracts":[756],"name":"MerkleProof","nameLocation":"810:11:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":277,"nodeType":"Block","src":"1283:57:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":271,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"1313:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":272,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"1320:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":270,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"1300:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":274,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"1329:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":269,"id":276,"nodeType":"Return","src":"1293:40:6"}]},"documentation":{"id":258,"nodeType":"StructuredDocumentation","src":"828:323:6","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":278,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:6","nodeType":"FunctionDefinition","parameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"mutability":"mutable","name":"proof","nameLocation":"1198:5:6","nodeType":"VariableDeclaration","scope":278,"src":"1181:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":259,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":260,"nodeType":"ArrayTypeName","src":"1181:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":263,"mutability":"mutable","name":"root","nameLocation":"1221:4:6","nodeType":"VariableDeclaration","scope":278,"src":"1213:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":265,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:6","nodeType":"VariableDeclaration","scope":278,"src":"1235:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:6"},"returnParameters":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":278,"src":"1277:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":267,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:6"},"scope":756,"src":"1156:184:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"1578:65:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":292,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"1616:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":293,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"1623:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":291,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"1595:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":295,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"1632:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":290,"id":297,"nodeType":"Return","src":"1588:48:6"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"1346:90:6","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":299,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:6","nodeType":"FunctionDefinition","parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"proof","nameLocation":"1493:5:6","nodeType":"VariableDeclaration","scope":299,"src":"1474:24:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":281,"nodeType":"ArrayTypeName","src":"1474:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":284,"mutability":"mutable","name":"root","nameLocation":"1516:4:6","nodeType":"VariableDeclaration","scope":299,"src":"1508:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":283,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":286,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:6","nodeType":"VariableDeclaration","scope":299,"src":"1530:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:6"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"1572:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":288,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:6"},"scope":756,"src":"1441:202:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":338,"nodeType":"Block","src":"2086:198:6","statements":[{"assignments":[311],"declarations":[{"constant":false,"id":311,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:6","nodeType":"VariableDeclaration","scope":338,"src":"2096:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":313,"initialValue":{"id":312,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"2119:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:6"},{"body":{"id":334,"nodeType":"Block","src":"2176:73:6","statements":[{"expression":{"id":332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":325,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"2190:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":327,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"2215:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":328,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2229:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":330,"indexExpression":{"id":329,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2235:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":326,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"2205:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":333,"nodeType":"ExpressionStatement","src":"2190:48:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2153:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":319,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2157:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:6","memberName":"length","nodeType":"MemberAccess","src":"2157:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":335,"initializationExpression":{"assignments":[315],"declarations":[{"constant":false,"id":315,"mutability":"mutable","name":"i","nameLocation":"2146:1:6","nodeType":"VariableDeclaration","scope":335,"src":"2138:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":314,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":317,"initialValue":{"hexValue":"30","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:6"},"loopExpression":{"expression":{"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:6","subExpression":{"id":322,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2171:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":324,"nodeType":"ExpressionStatement","src":"2171:3:6"},"nodeType":"ForStatement","src":"2133:116:6"},{"expression":{"id":336,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"2265:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":309,"id":337,"nodeType":"Return","src":"2258:19:6"}]},"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"1649:340:6","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":339,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:6","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"mutability":"mutable","name":"proof","nameLocation":"2033:5:6","nodeType":"VariableDeclaration","scope":339,"src":"2016:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":302,"nodeType":"ArrayTypeName","src":"2016:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":305,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:6","nodeType":"VariableDeclaration","scope":339,"src":"2040:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:6"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":339,"src":"2077:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:6"},"scope":756,"src":"1994:290:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":378,"nodeType":"Block","src":"2493:198:6","statements":[{"assignments":[351],"declarations":[{"constant":false,"id":351,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:6","nodeType":"VariableDeclaration","scope":378,"src":"2503:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":353,"initialValue":{"id":352,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"2526:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:6"},{"body":{"id":374,"nodeType":"Block","src":"2583:73:6","statements":[{"expression":{"id":372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":365,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"2597:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":367,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"2622:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":368,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2636:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":370,"indexExpression":{"id":369,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2642:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":366,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"2612:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":373,"nodeType":"ExpressionStatement","src":"2597:48:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":358,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2560:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":359,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2564:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:6","memberName":"length","nodeType":"MemberAccess","src":"2564:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":375,"initializationExpression":{"assignments":[355],"declarations":[{"constant":false,"id":355,"mutability":"mutable","name":"i","nameLocation":"2553:1:6","nodeType":"VariableDeclaration","scope":375,"src":"2545:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":357,"initialValue":{"hexValue":"30","id":356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:6"},"loopExpression":{"expression":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:6","subExpression":{"id":362,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2578:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":364,"nodeType":"ExpressionStatement","src":"2578:3:6"},"nodeType":"ForStatement","src":"2540:116:6"},{"expression":{"id":376,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"2672:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":349,"id":377,"nodeType":"Return","src":"2665:19:6"}]},"documentation":{"id":340,"nodeType":"StructuredDocumentation","src":"2290:96:6","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":379,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:6","nodeType":"FunctionDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"proof","nameLocation":"2440:5:6","nodeType":"VariableDeclaration","scope":379,"src":"2421:24:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":342,"nodeType":"ArrayTypeName","src":"2421:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:6","nodeType":"VariableDeclaration","scope":379,"src":"2447:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:6"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":379,"src":"2484:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:6"},"scope":756,"src":"2391:300:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":404,"nodeType":"Block","src":"3234:76:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":397,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3269:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":398,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"3276:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":399,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"3288:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":396,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"3251:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":401,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"3299:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":395,"id":403,"nodeType":"Return","src":"3244:59:6"}]},"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"2697:350:6","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":405,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:6","nodeType":"FunctionDefinition","parameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"proof","nameLocation":"3104:5:6","nodeType":"VariableDeclaration","scope":405,"src":"3087:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":382,"nodeType":"ArrayTypeName","src":"3087:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":386,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:6","nodeType":"VariableDeclaration","scope":405,"src":"3119:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":384,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":385,"nodeType":"ArrayTypeName","src":"3119:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"root","nameLocation":"3161:4:6","nodeType":"VariableDeclaration","scope":405,"src":"3153:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":391,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:6","nodeType":"VariableDeclaration","scope":405,"src":"3175:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":389,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":390,"nodeType":"ArrayTypeName","src":"3175:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:6"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":405,"src":"3228:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":393,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:6"},"scope":756,"src":"3052:258:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":430,"nodeType":"Block","src":"3715:84:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":423,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"3758:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":424,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"3765:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":425,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"3777:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":422,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3732:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":427,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"3788:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":421,"id":429,"nodeType":"Return","src":"3725:67:6"}]},"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"3316:200:6","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":431,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:6","nodeType":"FunctionDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"proof","nameLocation":"3583:5:6","nodeType":"VariableDeclaration","scope":431,"src":"3564:24:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":408,"nodeType":"ArrayTypeName","src":"3564:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:6","nodeType":"VariableDeclaration","scope":431,"src":"3598:26:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":410,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":411,"nodeType":"ArrayTypeName","src":"3598:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"root","nameLocation":"3642:4:6","nodeType":"VariableDeclaration","scope":431,"src":"3634:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:6","nodeType":"VariableDeclaration","scope":431,"src":"3656:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":416,"nodeType":"ArrayTypeName","src":"3656:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:6"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":431,"src":"3709:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":419,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:6"},"scope":756,"src":"3521:278:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":575,"nodeType":"Block","src":"4753:1860:6","statements":[{"assignments":[447],"declarations":[{"constant":false,"id":447,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:6","nodeType":"VariableDeclaration","scope":575,"src":"5136:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":450,"initialValue":{"expression":{"id":448,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"5156:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:6","memberName":"length","nodeType":"MemberAccess","src":"5156:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:6"},{"assignments":[452],"declarations":[{"constant":false,"id":452,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:6","nodeType":"VariableDeclaration","scope":575,"src":"5179:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":451,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":455,"initialValue":{"expression":{"id":453,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"5201:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:6","memberName":"length","nodeType":"MemberAccess","src":"5201:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":457,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"5270:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":458,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"5282:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:6","memberName":"length","nodeType":"MemberAccess","src":"5282:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":463,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"5302:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":456,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5262:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":467,"nodeType":"ExpressionStatement","src":"5262:87:6"},{"assignments":[472],"declarations":[{"constant":false,"id":472,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:6","nodeType":"VariableDeclaration","scope":575,"src":"5594:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":471,"nodeType":"ArrayTypeName","src":"5594:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":478,"initialValue":{"arguments":[{"id":476,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"5634:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":474,"nodeType":"ArrayTypeName","src":"5624:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:6"},{"assignments":[480],"declarations":[{"constant":false,"id":480,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:6","nodeType":"VariableDeclaration","scope":575,"src":"5656:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":482,"initialValue":{"hexValue":"30","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:6"},{"assignments":[484],"declarations":[{"constant":false,"id":484,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:6","nodeType":"VariableDeclaration","scope":575,"src":"5685:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":483,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":486,"initialValue":{"hexValue":"30","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:6"},{"assignments":[488],"declarations":[{"constant":false,"id":488,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:6","nodeType":"VariableDeclaration","scope":575,"src":"5714:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":487,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":490,"initialValue":{"hexValue":"30","id":489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:6"},{"body":{"id":548,"nodeType":"Block","src":"6151:258:6","statements":[{"assignments":[502],"declarations":[{"constant":false,"id":502,"mutability":"mutable","name":"a","nameLocation":"6173:1:6","nodeType":"VariableDeclaration","scope":548,"src":"6165:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":515,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6177:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":504,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6187:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":510,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6219:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":513,"indexExpression":{"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:6","subExpression":{"id":511,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6226:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:6","trueExpression":{"baseExpression":{"id":506,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"6199:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":509,"indexExpression":{"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:6","subExpression":{"id":507,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6206:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:6"},{"assignments":[517],"declarations":[{"constant":false,"id":517,"mutability":"mutable","name":"b","nameLocation":"6258:1:6","nodeType":"VariableDeclaration","scope":548,"src":"6250:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":538,"initialValue":{"condition":{"baseExpression":{"id":518,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"6262:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":520,"indexExpression":{"id":519,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"6273:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":533,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"6340:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":536,"indexExpression":{"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:6","subExpression":{"id":534,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"6346:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:6","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":521,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6278:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":522,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6288:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":528,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6320:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":531,"indexExpression":{"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:6","subExpression":{"id":529,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6327:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:6","trueExpression":{"baseExpression":{"id":524,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"6300:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":527,"indexExpression":{"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:6","subExpression":{"id":525,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6307:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:6"},{"expression":{"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":539,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6371:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":541,"indexExpression":{"id":540,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"6378:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":543,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"6393:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":544,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"6396:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":542,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"6383:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":547,"nodeType":"ExpressionStatement","src":"6371:27:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":495,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"6129:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":496,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"6133:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":549,"initializationExpression":{"assignments":[492],"declarations":[{"constant":false,"id":492,"mutability":"mutable","name":"i","nameLocation":"6122:1:6","nodeType":"VariableDeclaration","scope":549,"src":"6114:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":491,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":494,"initialValue":{"hexValue":"30","id":493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:6"},"loopExpression":{"expression":{"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:6","subExpression":{"id":498,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"6146:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":500,"nodeType":"ExpressionStatement","src":"6146:3:6"},"nodeType":"ForStatement","src":"6109:300:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":550,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"6423:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":560,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6505:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":572,"nodeType":"Block","src":"6567:40:6","statements":[{"expression":{"baseExpression":{"id":568,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"6588:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":570,"indexExpression":{"hexValue":"30","id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":445,"id":571,"nodeType":"Return","src":"6581:15:6"}]},"id":573,"nodeType":"IfStatement","src":"6501:106:6","trueBody":{"id":567,"nodeType":"Block","src":"6520:41:6","statements":[{"expression":{"baseExpression":{"id":563,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"6541:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":565,"indexExpression":{"hexValue":"30","id":564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":445,"id":566,"nodeType":"Return","src":"6534:16:6"}]}},"id":574,"nodeType":"IfStatement","src":"6419:188:6","trueBody":{"id":559,"nodeType":"Block","src":"6440:55:6","statements":[{"expression":{"baseExpression":{"id":553,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6461:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":557,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":554,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"6468:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":445,"id":558,"nodeType":"Return","src":"6454:30:6"}]}}]},"documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"3805:768:6","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":576,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:6","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"proof","nameLocation":"4631:5:6","nodeType":"VariableDeclaration","scope":576,"src":"4614:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":433,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":434,"nodeType":"ArrayTypeName","src":"4614:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:6","nodeType":"VariableDeclaration","scope":576,"src":"4646:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":436,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":437,"nodeType":"ArrayTypeName","src":"4646:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:6","nodeType":"VariableDeclaration","scope":576,"src":"4680:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":440,"nodeType":"ArrayTypeName","src":"4680:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:6"},"returnParameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:6","nodeType":"VariableDeclaration","scope":576,"src":"4733:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:6"},"scope":756,"src":"4578:2035:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":720,"nodeType":"Block","src":"7013:1860:6","statements":[{"assignments":[592],"declarations":[{"constant":false,"id":592,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:6","nodeType":"VariableDeclaration","scope":720,"src":"7396:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":591,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":595,"initialValue":{"expression":{"id":593,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"7416:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:6","memberName":"length","nodeType":"MemberAccess","src":"7416:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:6"},{"assignments":[597],"declarations":[{"constant":false,"id":597,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:6","nodeType":"VariableDeclaration","scope":720,"src":"7439:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":600,"initialValue":{"expression":{"id":598,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"7461:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:6","memberName":"length","nodeType":"MemberAccess","src":"7461:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":602,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"7530:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":603,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7542:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:6","memberName":"length","nodeType":"MemberAccess","src":"7542:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":608,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7562:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":601,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7522:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":612,"nodeType":"ExpressionStatement","src":"7522:87:6"},{"assignments":[617],"declarations":[{"constant":false,"id":617,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:6","nodeType":"VariableDeclaration","scope":720,"src":"7854:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":616,"nodeType":"ArrayTypeName","src":"7854:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":623,"initialValue":{"arguments":[{"id":621,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7894:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":619,"nodeType":"ArrayTypeName","src":"7884:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:6"},{"assignments":[625],"declarations":[{"constant":false,"id":625,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:6","nodeType":"VariableDeclaration","scope":720,"src":"7916:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":624,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":627,"initialValue":{"hexValue":"30","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:6"},{"assignments":[629],"declarations":[{"constant":false,"id":629,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:6","nodeType":"VariableDeclaration","scope":720,"src":"7945:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":631,"initialValue":{"hexValue":"30","id":630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:6"},{"assignments":[633],"declarations":[{"constant":false,"id":633,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:6","nodeType":"VariableDeclaration","scope":720,"src":"7974:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":635,"initialValue":{"hexValue":"30","id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:6"},{"body":{"id":693,"nodeType":"Block","src":"8411:258:6","statements":[{"assignments":[647],"declarations":[{"constant":false,"id":647,"mutability":"mutable","name":"a","nameLocation":"8433:1:6","nodeType":"VariableDeclaration","scope":693,"src":"8425:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":660,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":648,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8437:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":649,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"8447:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":655,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8479:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":658,"indexExpression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:6","subExpression":{"id":656,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8486:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:6","trueExpression":{"baseExpression":{"id":651,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"8459:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":654,"indexExpression":{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:6","subExpression":{"id":652,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8466:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:6"},{"assignments":[662],"declarations":[{"constant":false,"id":662,"mutability":"mutable","name":"b","nameLocation":"8518:1:6","nodeType":"VariableDeclaration","scope":693,"src":"8510:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":661,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":683,"initialValue":{"condition":{"baseExpression":{"id":663,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"8522:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":665,"indexExpression":{"id":664,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"8533:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":678,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8600:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":681,"indexExpression":{"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:6","subExpression":{"id":679,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"8606:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:6","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":666,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8538:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":667,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"8548:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":673,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8580:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":676,"indexExpression":{"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:6","subExpression":{"id":674,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8587:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:6","trueExpression":{"baseExpression":{"id":669,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"8560:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":672,"indexExpression":{"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:6","subExpression":{"id":670,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8567:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:6"},{"expression":{"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":684,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8631:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":686,"indexExpression":{"id":685,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"8638:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":688,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"8653:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":689,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"8656:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":687,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"8643:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":692,"nodeType":"ExpressionStatement","src":"8631:27:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":640,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"8389:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":641,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8393:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":694,"initializationExpression":{"assignments":[637],"declarations":[{"constant":false,"id":637,"mutability":"mutable","name":"i","nameLocation":"8382:1:6","nodeType":"VariableDeclaration","scope":694,"src":"8374:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":636,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":639,"initialValue":{"hexValue":"30","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:6"},"loopExpression":{"expression":{"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:6","subExpression":{"id":643,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"8406:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":645,"nodeType":"ExpressionStatement","src":"8406:3:6"},"nodeType":"ForStatement","src":"8369:300:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":695,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8683:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":705,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"8765:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":717,"nodeType":"Block","src":"8827:40:6","statements":[{"expression":{"baseExpression":{"id":713,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8848:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":715,"indexExpression":{"hexValue":"30","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":590,"id":716,"nodeType":"Return","src":"8841:15:6"}]},"id":718,"nodeType":"IfStatement","src":"8761:106:6","trueBody":{"id":712,"nodeType":"Block","src":"8780:41:6","statements":[{"expression":{"baseExpression":{"id":708,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"8801:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":710,"indexExpression":{"hexValue":"30","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":590,"id":711,"nodeType":"Return","src":"8794:16:6"}]}},"id":719,"nodeType":"IfStatement","src":"8679:188:6","trueBody":{"id":704,"nodeType":"Block","src":"8700:55:6","statements":[{"expression":{"baseExpression":{"id":698,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8721:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":702,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":699,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8728:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":590,"id":703,"nodeType":"Return","src":"8714:30:6"}]}}]},"documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"6619:202:6","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":721,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:6","nodeType":"FunctionDefinition","parameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"proof","nameLocation":"6889:5:6","nodeType":"VariableDeclaration","scope":721,"src":"6870:24:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":579,"nodeType":"ArrayTypeName","src":"6870:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:6","nodeType":"VariableDeclaration","scope":721,"src":"6904:26:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":581,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":582,"nodeType":"ArrayTypeName","src":"6904:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:6","nodeType":"VariableDeclaration","scope":721,"src":"6940:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":584,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":585,"nodeType":"ArrayTypeName","src":"6940:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:6"},"returnParameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:6","nodeType":"VariableDeclaration","scope":721,"src":"6993:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:6"},"scope":756,"src":"6826:2047:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":743,"nodeType":"Block","src":"8951:75:6","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":730,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"8968:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":731,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"8972:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"9014:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":739,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"9017:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":737,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"8999:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:6","trueExpression":{"arguments":[{"id":734,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"8991:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":735,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"8994:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":733,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"8976:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":729,"id":742,"nodeType":"Return","src":"8961:58:6"}]},"id":744,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:6","nodeType":"FunctionDefinition","parameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"a","nameLocation":"8906:1:6","nodeType":"VariableDeclaration","scope":744,"src":"8898:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"b","nameLocation":"8917:1:6","nodeType":"VariableDeclaration","scope":744,"src":"8909:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:6"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":744,"src":"8942:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":727,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:6"},"scope":756,"src":"8879:147:6","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":754,"nodeType":"Block","src":"9115:178:6","statements":[{"AST":{"nodeType":"YulBlock","src":"9177:110:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9198:4:6","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"9204:1:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9191:6:6"},"nodeType":"YulFunctionCall","src":"9191:15:6"},"nodeType":"YulExpressionStatement","src":"9191:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9226:4:6","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"9232:1:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:6"},"nodeType":"YulFunctionCall","src":"9219:15:6"},"nodeType":"YulExpressionStatement","src":"9219:15:6"},{"nodeType":"YulAssignment","src":"9247:30:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9266:4:6","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9272:4:6","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9256:9:6"},"nodeType":"YulFunctionCall","src":"9256:21:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9247:5:6"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":746,"isOffset":false,"isSlot":false,"src":"9204:1:6","valueSize":1},{"declaration":748,"isOffset":false,"isSlot":false,"src":"9232:1:6","valueSize":1},{"declaration":751,"isOffset":false,"isSlot":false,"src":"9247:5:6","valueSize":1}],"id":753,"nodeType":"InlineAssembly","src":"9168:119:6"}]},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:6","nodeType":"FunctionDefinition","parameters":{"id":749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"a","nameLocation":"9064:1:6","nodeType":"VariableDeclaration","scope":755,"src":"9056:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":748,"mutability":"mutable","name":"b","nameLocation":"9075:1:6","nodeType":"VariableDeclaration","scope":755,"src":"9067:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:6"},"returnParameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"value","nameLocation":"9108:5:6","nodeType":"VariableDeclaration","scope":755,"src":"9100:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":750,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:6"},"scope":756,"src":"9032:261:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":757,"src":"802:8493:6","usedErrors":[]}],"src":"118:9178:6"},"id":6},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"ast":{"absolutePath":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol","exportedSymbols":{"AnichessERC1155MerkleClaim":[954],"ForwarderRegistryContext":[49],"ForwarderRegistryContextBase":[169],"IERC1155Mintable":[254],"IForwarderRegistry":[195],"MerkleProof":[756]},"id":955,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":758,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":760,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":955,"sourceUnit":757,"src":"57:87:7","symbolAliases":[{"foreign":{"id":759,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"65:11:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":762,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":955,"sourceUnit":255,"src":"145:117:7","symbolAliases":[{"foreign":{"id":761,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"153:16:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":764,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":955,"sourceUnit":50,"src":"263:115:7","symbolAliases":[{"foreign":{"id":763,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49,"src":"271:24:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":766,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":955,"sourceUnit":170,"src":"379:128:7","symbolAliases":[{"foreign":{"id":765,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"387:28:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":768,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":955,"sourceUnit":196,"src":"508:114:7","symbolAliases":[{"foreign":{"id":767,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"516:18:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":770,"name":"ForwarderRegistryContext","nameLocations":["1015:24:7"],"nodeType":"IdentifierPath","referencedDeclaration":49,"src":"1015:24:7"},"id":771,"nodeType":"InheritanceSpecifier","src":"1015:24:7"}],"canonicalName":"AnichessERC1155MerkleClaim","contractDependencies":[],"contractKind":"contract","documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"624:351:7","text":" @title Anichess The Missing Orbs Claim Contract\n @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n @dev entitled to the rewards without revealing the entire list of recipients.\n @notice This contract uses a Merkle Tree to allow users to claim tokens if they possess a valid proof."},"fullyImplemented":true,"id":954,"linearizedBaseContracts":[954,49,181,169],"name":"AnichessERC1155MerkleClaim","nameLocation":"985:26:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":775,"libraryName":{"id":772,"name":"MerkleProof","nameLocations":["1052:11:7"],"nodeType":"IdentifierPath","referencedDeclaration":756,"src":"1052:11:7"},"nodeType":"UsingForDirective","src":"1046:32:7","typeName":{"baseType":{"id":773,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1068:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":774,"nodeType":"ArrayTypeName","src":"1068:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":false,"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"1084:69:7","text":"@notice Mapping to store claim status to prevent double claiming."},"functionSelector":"e3a0ce09","id":780,"mutability":"mutable","name":"claimStatus","nameLocation":"1190:11:7","nodeType":"VariableDeclaration","scope":954,"src":"1158:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":779,"keyType":{"id":777,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1166:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1158:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueType":{"id":778,"name":"bool","nodeType":"ElementaryTypeName","src":"1177:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"1208:41:7","text":"@notice The Merkle root of the claim."},"functionSelector":"51e75e8b","id":783,"mutability":"immutable","name":"MERKLE_ROOT","nameLocation":"1279:11:7","nodeType":"VariableDeclaration","scope":954,"src":"1254:36:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":782,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"1296:58:7","text":"@notice The ERC1155Mintable reward contract interface."},"functionSelector":"3a5af339","id":787,"mutability":"immutable","name":"REWARD_CONTRACT","nameLocation":"1393:15:7","nodeType":"VariableDeclaration","scope":954,"src":"1359:49:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"},"typeName":{"id":786,"nodeType":"UserDefinedTypeName","pathNode":{"id":785,"name":"IERC1155Mintable","nameLocations":["1359:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":254,"src":"1359:16:7"},"referencedDeclaration":254,"src":"1359:16:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},"visibility":"public"},{"anonymous":false,"documentation":{"id":788,"nodeType":"StructuredDocumentation","src":"1415:51:7","text":"@notice Event emitted when a payout is claimed."},"eventSelector":"8f9c73ccaa2efe63e7eac59937a2aa225b9d0748cbfe666eff28a75e964801a4","id":800,"name":"PayoutClaimed","nameLocation":"1477:13:7","nodeType":"EventDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"1507:7:7","nodeType":"VariableDeclaration","scope":800,"src":"1491:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1491:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":792,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"1532:9:7","nodeType":"VariableDeclaration","scope":800,"src":"1516:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":791,"name":"address","nodeType":"ElementaryTypeName","src":"1516:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":795,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1553:3:7","nodeType":"VariableDeclaration","scope":800,"src":"1543:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":793,"name":"uint256","nodeType":"ElementaryTypeName","src":"1543:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":794,"nodeType":"ArrayTypeName","src":"1543:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":798,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1568:6:7","nodeType":"VariableDeclaration","scope":800,"src":"1558:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"1558:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":797,"nodeType":"ArrayTypeName","src":"1558:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1490:85:7"},"src":"1471:105:7"},{"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"1582:66:7","text":"@notice Error thrown when the payout has already been claimed."},"errorSelector":"b21ae00b","id":813,"name":"AlreadyClaimed","nameLocation":"1659:14:7","nodeType":"ErrorDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"recipient","nameLocation":"1682:9:7","nodeType":"VariableDeclaration","scope":813,"src":"1674:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"1674:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"ids","nameLocation":"1703:3:7","nodeType":"VariableDeclaration","scope":813,"src":"1693:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1693:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":805,"nodeType":"ArrayTypeName","src":"1693:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":809,"mutability":"mutable","name":"values","nameLocation":"1718:6:7","nodeType":"VariableDeclaration","scope":813,"src":"1708:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"1708:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":808,"nodeType":"ArrayTypeName","src":"1708:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":811,"mutability":"mutable","name":"epochId","nameLocation":"1734:7:7","nodeType":"VariableDeclaration","scope":813,"src":"1726:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1673:69:7"},"src":"1653:90:7"},{"documentation":{"id":814,"nodeType":"StructuredDocumentation","src":"1749:74:7","text":"@notice Error thrown when the proof provided for the claim is invalid."},"errorSelector":"84301932","id":826,"name":"InvalidProof","nameLocation":"1834:12:7","nodeType":"ErrorDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":816,"mutability":"mutable","name":"recipient","nameLocation":"1855:9:7","nodeType":"VariableDeclaration","scope":826,"src":"1847:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":815,"name":"address","nodeType":"ElementaryTypeName","src":"1847:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"ids","nameLocation":"1876:3:7","nodeType":"VariableDeclaration","scope":826,"src":"1866:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1866:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":818,"nodeType":"ArrayTypeName","src":"1866:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":822,"mutability":"mutable","name":"values","nameLocation":"1891:6:7","nodeType":"VariableDeclaration","scope":826,"src":"1881:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"1881:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":821,"nodeType":"ArrayTypeName","src":"1881:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"epochId","nameLocation":"1907:7:7","nodeType":"VariableDeclaration","scope":826,"src":"1899:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":823,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1899:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1846:69:7"},"src":"1828:88:7"},{"body":{"id":849,"nodeType":"Block","src":"2434:83:7","statements":[{"expression":{"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":841,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"2444:11:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":842,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"2458:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2444:24:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":844,"nodeType":"ExpressionStatement","src":"2444:24:7"},{"expression":{"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":845,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"2478:15:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":846,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"2496:14:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},"src":"2478:32:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},"id":848,"nodeType":"ExpressionStatement","src":"2478:32:7"}]},"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"1922:330:7","text":" @dev Initializes the contract by setting the reward token contract and the forwarder registry.\n @param merkleRoot The Merkle root to use for the claims.\n @param rewardContract The ERC1155Mintable token contract address.\n @param forwarderRegistry The address of the forwarder registry contract."},"id":850,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":838,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"2415:17:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}}],"id":839,"kind":"baseConstructorSpecifier","modifierName":{"id":837,"name":"ForwarderRegistryContext","nameLocations":["2390:24:7"],"nodeType":"IdentifierPath","referencedDeclaration":49,"src":"2390:24:7"},"nodeType":"ModifierInvocation","src":"2390:43:7"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"merkleRoot","nameLocation":"2286:10:7","nodeType":"VariableDeclaration","scope":850,"src":"2278:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":828,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2278:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":832,"mutability":"mutable","name":"rewardContract","nameLocation":"2323:14:7","nodeType":"VariableDeclaration","scope":850,"src":"2306:31:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"},"typeName":{"id":831,"nodeType":"UserDefinedTypeName","pathNode":{"id":830,"name":"IERC1155Mintable","nameLocations":["2306:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":254,"src":"2306:16:7"},"referencedDeclaration":254,"src":"2306:16:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":835,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2366:17:7","nodeType":"VariableDeclaration","scope":850,"src":"2347:36:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"},"typeName":{"id":834,"nodeType":"UserDefinedTypeName","pathNode":{"id":833,"name":"IForwarderRegistry","nameLocations":["2347:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"2347:18:7"},"referencedDeclaration":195,"src":"2347:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"2268:121:7"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[],"src":"2434:0:7"},"scope":954,"src":"2257:260:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[120],"body":{"id":862,"nodeType":"Block","src":"2673:65:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":858,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"2690:28:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$169_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2719:10:7","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":120,"src":"2690:39:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2690:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":857,"id":861,"nodeType":"Return","src":"2683:48:7"}]},"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"2523:44:7","text":"@inheritdoc ForwarderRegistryContextBase"},"id":863,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"2581:10:7","nodeType":"FunctionDefinition","overrides":{"id":854,"nodeType":"OverrideSpecifier","overrides":[{"id":853,"name":"ForwarderRegistryContextBase","nameLocations":["2625:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":169,"src":"2625:28:7"}],"src":"2616:38:7"},"parameters":{"id":852,"nodeType":"ParameterList","parameters":[],"src":"2591:2:7"},"returnParameters":{"id":857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":863,"src":"2664:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":855,"name":"address","nodeType":"ElementaryTypeName","src":"2664:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2663:9:7"},"scope":954,"src":"2572:166:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[168],"body":{"id":875,"nodeType":"Block","src":"2899:63:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":871,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"2916:28:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$169_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2945:8:7","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":168,"src":"2916:37:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2916:39:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":870,"id":874,"nodeType":"Return","src":"2909:46:7"}]},"documentation":{"id":864,"nodeType":"StructuredDocumentation","src":"2744:44:7","text":"@inheritdoc ForwarderRegistryContextBase"},"id":876,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"2802:8:7","nodeType":"FunctionDefinition","overrides":{"id":867,"nodeType":"OverrideSpecifier","overrides":[{"id":866,"name":"ForwarderRegistryContextBase","nameLocations":["2844:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":169,"src":"2844:28:7"}],"src":"2835:38:7"},"parameters":{"id":865,"nodeType":"ParameterList","parameters":[],"src":"2810:2:7"},"returnParameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":876,"src":"2883:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":868,"name":"bytes","nodeType":"ElementaryTypeName","src":"2883:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2882:16:7"},"scope":954,"src":"2793:169:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":952,"nodeType":"Block","src":"3709:444:7","statements":[{"assignments":[894],"declarations":[{"constant":false,"id":894,"mutability":"mutable","name":"leaf","nameLocation":"3727:4:7","nodeType":"VariableDeclaration","scope":952,"src":"3719:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":893,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3719:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":904,"initialValue":{"arguments":[{"arguments":[{"id":898,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"3761:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":899,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"3772:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":900,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"3777:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":901,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"3785:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":896,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3744:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3748:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"3744:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3744:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":895,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3734:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3734:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3719:75:7"},{"condition":{"baseExpression":{"id":905,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"3809:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":907,"indexExpression":{"id":906,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"3821:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3809:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":915,"nodeType":"IfStatement","src":"3805:77:7","trueBody":{"errorCall":{"arguments":[{"id":909,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"3850:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":910,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"3861:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":911,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"3866:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":912,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"3874:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":908,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"3835:14:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes32_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes32) pure"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3835:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":914,"nodeType":"RevertStatement","src":"3828:54:7"}},{"condition":{"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3896:32:7","subExpression":{"arguments":[{"id":918,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"3910:11:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":919,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"3923:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":916,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"3897:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3903:6:7","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":278,"src":"3897:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3897:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":929,"nodeType":"IfStatement","src":"3892:90:7","trueBody":{"errorCall":{"arguments":[{"id":923,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"3950:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":924,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"3961:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":925,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"3966:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":926,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"3974:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":922,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"3937:12:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes32_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes32) pure"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3937:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":928,"nodeType":"RevertStatement","src":"3930:52:7"}},{"expression":{"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":930,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"3993:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":932,"indexExpression":{"id":931,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"4005:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3993:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4013:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3993:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":935,"nodeType":"ExpressionStatement","src":"3993:24:7"},{"expression":{"arguments":[{"id":939,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"4057:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":940,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"4068:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":941,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"4073:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4081:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":936,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"4027:15:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4043:13:7","memberName":"safeBatchMint","nodeType":"MemberAccess","referencedDeclaration":253,"src":"4027:29:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4027:57:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":944,"nodeType":"ExpressionStatement","src":"4027:57:7"},{"eventCall":{"arguments":[{"id":946,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"4114:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":947,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"4123:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":948,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"4134:3:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":949,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"4139:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":945,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"4100:13:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32,address,uint256[] memory,uint256[] memory)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4100:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":951,"nodeType":"EmitStatement","src":"4095:51:7"}]},"documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"2968:605:7","text":" @notice Allows eligible users to claim their rewards using a Merkle proof.\n @dev Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.\n @param epochId The epoch ID for the claim.\n @param proof The Merkle proof for the claim.\n @param recipient The address of the recipient.\n @param ids The array of token IDs to claim.\n @param values The array of token values to claim.\n @dev Throws if the claim has already been claimed.\n @dev Throws if the proof is invalid.\n @dev Throws if the claim is invalid."},"functionSelector":"f15e20e7","id":953,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"3587:5:7","nodeType":"FunctionDefinition","parameters":{"id":891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":879,"mutability":"mutable","name":"epochId","nameLocation":"3601:7:7","nodeType":"VariableDeclaration","scope":953,"src":"3593:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":878,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3593:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":882,"mutability":"mutable","name":"proof","nameLocation":"3627:5:7","nodeType":"VariableDeclaration","scope":953,"src":"3610:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":880,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3610:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":881,"nodeType":"ArrayTypeName","src":"3610:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"recipient","nameLocation":"3642:9:7","nodeType":"VariableDeclaration","scope":953,"src":"3634:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":883,"name":"address","nodeType":"ElementaryTypeName","src":"3634:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"ids","nameLocation":"3670:3:7","nodeType":"VariableDeclaration","scope":953,"src":"3653:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"3653:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":886,"nodeType":"ArrayTypeName","src":"3653:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"values","nameLocation":"3692:6:7","nodeType":"VariableDeclaration","scope":953,"src":"3675:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"3675:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":889,"nodeType":"ArrayTypeName","src":"3675:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3592:107:7"},"returnParameters":{"id":892,"nodeType":"ParameterList","parameters":[],"src":"3709:0:7"},"scope":954,"src":"3578:575:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":955,"src":"976:3179:7","usedErrors":[813,826]}],"src":"32:4124:7"},"id":7},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"ast":{"absolutePath":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol","exportedSymbols":{"AnichessERC1155MerkleClaim":[954],"AnichessERC1155MerkleClaimMock":[1001],"IERC1155Mintable":[254],"IForwarderRegistry":[195]},"id":1002,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":956,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"32:23:8"},{"absolutePath":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol","file":"../../merkleClaim/AnichessERC1155MerkleClaim.sol","id":958,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1002,"sourceUnit":955,"src":"57:92:8","symbolAliases":[{"foreign":{"id":957,"name":"AnichessERC1155MerkleClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"65:26:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":960,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1002,"sourceUnit":255,"src":"150:117:8","symbolAliases":[{"foreign":{"id":959,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"158:16:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":962,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1002,"sourceUnit":196,"src":"268:114:8","symbolAliases":[{"foreign":{"id":961,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"276:18:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":963,"name":"AnichessERC1155MerkleClaim","nameLocations":["427:26:8"],"nodeType":"IdentifierPath","referencedDeclaration":954,"src":"427:26:8"},"id":964,"nodeType":"InheritanceSpecifier","src":"427:26:8"}],"canonicalName":"AnichessERC1155MerkleClaimMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1001,"linearizedBaseContracts":[1001,954,49,181,169],"name":"AnichessERC1155MerkleClaimMock","nameLocation":"393:30:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":980,"nodeType":"Block","src":"667:2:8","statements":[]},"id":981,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":975,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"620:10:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":976,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"632:14:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},{"id":977,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"648:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}}],"id":978,"kind":"baseConstructorSpecifier","modifierName":{"id":974,"name":"AnichessERC1155MerkleClaim","nameLocations":["593:26:8"],"nodeType":"IdentifierPath","referencedDeclaration":954,"src":"593:26:8"},"nodeType":"ModifierInvocation","src":"593:73:8"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":966,"mutability":"mutable","name":"merkleRoot","nameLocation":"489:10:8","nodeType":"VariableDeclaration","scope":981,"src":"481:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"481:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"rewardContract","nameLocation":"526:14:8","nodeType":"VariableDeclaration","scope":981,"src":"509:31:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"},"typeName":{"id":968,"nodeType":"UserDefinedTypeName","pathNode":{"id":967,"name":"IERC1155Mintable","nameLocations":["509:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":254,"src":"509:16:8"},"referencedDeclaration":254,"src":"509:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$254","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"569:17:8","nodeType":"VariableDeclaration","scope":981,"src":"550:36:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"},"typeName":{"id":971,"nodeType":"UserDefinedTypeName","pathNode":{"id":970,"name":"IForwarderRegistry","nameLocations":["550:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"550:18:8"},"referencedDeclaration":195,"src":"550:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"471:121:8"},"returnParameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"667:0:8"},"scope":1001,"src":"460:209:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":989,"nodeType":"Block","src":"730:36:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":986,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[863],"referencedDeclaration":863,"src":"747:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"747:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":985,"id":988,"nodeType":"Return","src":"740:19:8"}]},"functionSelector":"d1a91ff2","id":990,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"684:11:8","nodeType":"FunctionDefinition","parameters":{"id":982,"nodeType":"ParameterList","parameters":[],"src":"695:2:8"},"returnParameters":{"id":985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":990,"src":"721:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":983,"name":"address","nodeType":"ElementaryTypeName","src":"721:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"720:9:8"},"scope":1001,"src":"675:91:8","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":999,"nodeType":"Block","src":"942:34:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":996,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[876],"referencedDeclaration":876,"src":"959:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"959:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":995,"id":998,"nodeType":"Return","src":"952:17:8"}]},"documentation":{"id":991,"nodeType":"StructuredDocumentation","src":"772:105:8","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":1000,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"891:9:8","nodeType":"FunctionDefinition","parameters":{"id":992,"nodeType":"ParameterList","parameters":[],"src":"900:2:8"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1000,"src":"926:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":993,"name":"bytes","nodeType":"ElementaryTypeName","src":"926:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"925:16:8"},"scope":1001,"src":"882:94:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1002,"src":"384:594:8","usedErrors":[813,826]}],"src":"32:947:8"},"id":8}},"contracts":{"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbd7b2882eff82d3e06d4c27857e3b2256fa2e542a2347aedabb422a54d6481564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xD7 0xB2 DUP9 0x2E SELFDESTRUCT DUP3 0xD3 0xE0 PUSH14 0x4C27857E3B2256FA2E542A2347AE 0xDA 0xBB TIMESTAMP 0x2A SLOAD 0xD6 BASEFEE ISZERO PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"201:568:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;201:568:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbd7b2882eff82d3e06d4c27857e3b2256fa2e542a2347aedabb422a54d6481564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xD7 0xB2 DUP9 0x2E SELFDESTRUCT DUP3 0xD3 0xE0 PUSH14 0x4C27857E3B2256FA2E542A2347AE 0xDA 0xBB TIMESTAMP 0x2A SLOAD 0xD6 BASEFEE ISZERO PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"201:568:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ec6649971ce3718d4f59d6147829ed57ee8f2a3ae6f1da99928cad2ee2a0def64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xC6 PUSH5 0x9971CE3718 0xD4 CREATE2 SWAP14 PUSH2 0x4782 SWAP15 0xD5 PUSH31 0xE8F2A3AE6F1DA99928CAD2EE2A0DEF64736F6C634300081100330000000000 ","sourceMap":"802:8493:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ec6649971ce3718d4f59d6147829ed57ee8f2a3ae6f1da99928cad2ee2a0def64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xC6 PUSH5 0x9971CE3718 0xD4 CREATE2 SWAP14 PUSH2 0x4782 SWAP15 0xD5 PUSH31 0xE8F2A3AE6F1DA99928CAD2EE2A0DEF64736F6C634300081100330000000000 ","sourceMap":"802:8493:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"AnichessERC1155MerkleClaim":{"abi":[{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"InvalidProof","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"PayoutClaimed","type":"event"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.","kind":"dev","methods":{"claim(bytes32,bytes32[],address,uint256[],uint256[])":{"details":"Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.Throws if the claim has already been claimed.Throws if the proof is invalid.Throws if the claim is invalid.","params":{"epochId":"The epoch ID for the claim.","ids":"The array of token IDs to claim.","proof":"The Merkle proof for the claim.","recipient":"The address of the recipient.","values":"The array of token values to claim."}},"constructor":{"details":"Initializes the contract by setting the reward token contract and the forwarder registry.","params":{"forwarderRegistry":"The address of the forwarder registry contract.","merkleRoot":"The Merkle root to use for the claims.","rewardContract":"The ERC1155Mintable token contract address."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Anichess The Missing Orbs Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_22":{"entryPoint":null,"id":22,"parameterSlots":1,"returnSlots":0},"@_70":{"entryPoint":null,"id":70,"parameterSlots":1,"returnSlots":0},"@_850":{"entryPoint":null,"id":850,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_bytes32t_contract$_IERC1155Mintable_$254t_contract$_IForwarderRegistry_$195_fromMemory":{"entryPoint":100,"id":null,"parameterSlots":2,"returnSlots":3},"validator_revert_contract_IERC1155Mintable":{"entryPoint":76,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:702:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"77:86:9","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:9"},"nodeType":"YulFunctionCall","src":"143:12:9"},"nodeType":"YulExpressionStatement","src":"143:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"100:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"111:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"126:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"131:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"122:3:9"},"nodeType":"YulFunctionCall","src":"122:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:9"},"nodeType":"YulFunctionCall","src":"118:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"107:3:9"},"nodeType":"YulFunctionCall","src":"107:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"97:2:9"},"nodeType":"YulFunctionCall","src":"97:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"90:6:9"},"nodeType":"YulFunctionCall","src":"90:50:9"},"nodeType":"YulIf","src":"87:70:9"}]},"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"66:5:9","type":""}],"src":"14:149:9"},{"body":{"nodeType":"YulBlock","src":"333:367:9","statements":[{"body":{"nodeType":"YulBlock","src":"379:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"388:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"391:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"381:6:9"},"nodeType":"YulFunctionCall","src":"381:12:9"},"nodeType":"YulExpressionStatement","src":"381:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"354:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"363:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"350:3:9"},"nodeType":"YulFunctionCall","src":"350:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"375:2:9","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"346:3:9"},"nodeType":"YulFunctionCall","src":"346:32:9"},"nodeType":"YulIf","src":"343:52:9"},{"nodeType":"YulAssignment","src":"404:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"420:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"414:5:9"},"nodeType":"YulFunctionCall","src":"414:16:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"404:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"439:38:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"473:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:9"},"nodeType":"YulFunctionCall","src":"458:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"452:5:9"},"nodeType":"YulFunctionCall","src":"452:25:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"443:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"529:5:9"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"486:42:9"},"nodeType":"YulFunctionCall","src":"486:49:9"},"nodeType":"YulExpressionStatement","src":"486:49:9"},{"nodeType":"YulAssignment","src":"544:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"554:5:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"544:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"568:40:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:9"},"nodeType":"YulFunctionCall","src":"589:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"583:5:9"},"nodeType":"YulFunctionCall","src":"583:25:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"572:7:9","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"660:7:9"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"617:42:9"},"nodeType":"YulFunctionCall","src":"617:51:9"},"nodeType":"YulExpressionStatement","src":"617:51:9"},{"nodeType":"YulAssignment","src":"677:17:9","value":{"name":"value_1","nodeType":"YulIdentifier","src":"687:7:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"677:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32t_contract$_IERC1155Mintable_$254t_contract$_IForwarderRegistry_$195_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"283:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"294:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"306:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"314:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"322:6:9","type":""}],"src":"168:532:9"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_contract$_IERC1155Mintable_$254t_contract$_IForwarderRegistry_$195_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        validator_revert_contract_IERC1155Mintable(value)\n        value1 := value\n        let value_1 := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value2 := value_1\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e060405234801561001057600080fd5b50604051610a31380380610a3183398101604081905261002f91610064565b6001600160a01b0390811660805260a0929092521660c0526100a7565b6001600160a01b038116811461006157600080fd5b50565b60008060006060848603121561007957600080fd5b83519250602084015161008b8161004c565b604085015190925061009c8161004c565b809150509250925092565b60805160a05160c0516109496100e86000396000818160c8015261033a01526000818160ef01526102630152600081816079015261012f01526109496000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063572b6c0511610050578063572b6c051461011f578063e3a0ce091461017c578063f15e20e71461019f57600080fd5b80632b4c9f16146100775780633a5af339146100c357806351e75e8b146100ea575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100997f000000000000000000000000000000000000000000000000000000000000000081565b6101117f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ba565b61016c61012d3660046104bc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b60405190151581526020016100ba565b61016c61018a3660046104d7565b60006020819052908152604090205460ff1681565b6101b26101ad3660046105fd565b6101b4565b005b6000838383886040516020016101cd949392919061072b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012060008181529283905291205490915060ff161561025d57838383886040517fb21ae00b00000000000000000000000000000000000000000000000000000000815260040161025494939291906107a7565b60405180910390fd5b610288857f0000000000000000000000000000000000000000000000000000000000000000836103fe565b6102c657838383886040517f8430193200000000000000000000000000000000000000000000000000000000815260040161025494939291906107a7565b6000818152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb90610373908790879087906004016107fa565b600060405180830381600087803b15801561038d57600080fd5b505af11580156103a1573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16867f8f9c73ccaa2efe63e7eac59937a2aa225b9d0748cbfe666eff28a75e964801a485856040516103ee929190610857565b60405180910390a3505050505050565b60008261040b8584610414565b14949350505050565b600081815b8451811015610459576104458286838151811061043857610438610885565b6020026020010151610461565b915080610451816108b4565b915050610419565b509392505050565b600081831061047d57600082815260208490526040902061048c565b60008381526020839052604090205b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146104b757600080fd5b919050565b6000602082840312156104ce57600080fd5b61048c82610493565b6000602082840312156104e957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610566576105666104f0565b604052919050565b600067ffffffffffffffff821115610588576105886104f0565b5060051b60200190565b600082601f8301126105a357600080fd5b813560206105b86105b38361056e565b61051f565b82815260059290921b840181019181810190868411156105d757600080fd5b8286015b848110156105f257803583529183019183016105db565b509695505050505050565b600080600080600060a0868803121561061557600080fd5b8535945060208087013567ffffffffffffffff8082111561063557600080fd5b818901915089601f83011261064957600080fd5b81356106576105b38261056e565b81815260059190911b8301840190848101908c83111561067657600080fd5b938501935b828510156106945784358252938501939085019061067b565b98506106a591505060408a01610493565b955060608901359250808311156106bb57600080fd5b6106c78a848b01610592565b945060808901359250808311156106dd57600080fd5b50506106eb88828901610592565b9150509295509295909350565b60008151602080840160005b8381101561072057815187529582019590820190600101610704565b509495945050505050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b168152600061076b61076560148401876106f8565b856106f8565b92835250506020019392505050565b80518083526020928301926000919080840183831561072057815187529582019590820190600101610704565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006107d6608083018661077a565b82810360408401526107e8818661077a565b91505082606083015295945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152608060208201526000610829608083018561077a565b828103604084015261083b818561077a565b8381036060909401939093525050600081526020019392505050565b60408152600061086a604083018561077a565b828103602084015261087c818561077a565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361090c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220f19b329f172445c8bac3c3d39612e4205733b950c477bd0cfb30775c209c114864736f6c63430008110033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA31 CODESIZE SUB DUP1 PUSH2 0xA31 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0xA0 SWAP3 SWAP1 SWAP3 MSTORE AND PUSH1 0xC0 MSTORE PUSH2 0xA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x8B DUP2 PUSH2 0x4C JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9C DUP2 PUSH2 0x4C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x949 PUSH2 0xE8 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xC8 ADD MSTORE PUSH2 0x33A ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0xEF ADD MSTORE PUSH2 0x263 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0x79 ADD MSTORE PUSH2 0x12F ADD MSTORE PUSH2 0x949 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xF15E20E7 EQ PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x51E75E8B EQ PUSH2 0xEA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBA JUMP JUMPDEST PUSH2 0x16C PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBA JUMP JUMPDEST PUSH2 0x16C PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x1B4 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x72B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x25D JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0xB21AE00B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x254 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x288 DUP6 PUSH32 0x0 DUP4 PUSH2 0x3FE JUMP JUMPDEST PUSH2 0x2C6 JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0x8430193200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x254 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x373 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x7FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x8F9C73CCAA2EFE63E7EAC59937A2AA225B9D0748CBFE666EFF28A75E964801A4 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP3 SWAP2 SWAP1 PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x40B DUP6 DUP5 PUSH2 0x414 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x459 JUMPI PUSH2 0x445 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x438 JUMPI PUSH2 0x438 PUSH2 0x885 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x461 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x451 DUP2 PUSH2 0x8B4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x419 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x47D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x48C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48C DUP3 PUSH2 0x493 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x566 JUMPI PUSH2 0x566 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x588 JUMPI PUSH2 0x588 PUSH2 0x4F0 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x5B8 PUSH2 0x5B3 DUP4 PUSH2 0x56E JUMP JUMPDEST PUSH2 0x51F JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x5F2 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x5DB JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x657 PUSH2 0x5B3 DUP3 PUSH2 0x56E JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x694 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x67B JUMP JUMPDEST SWAP9 POP PUSH2 0x6A5 SWAP2 POP POP PUSH1 0x40 DUP11 ADD PUSH2 0x493 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x6BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6C7 DUP11 DUP5 DUP12 ADD PUSH2 0x592 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x6EB DUP9 DUP3 DUP10 ADD PUSH2 0x592 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x720 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x704 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP6 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x76B PUSH2 0x765 PUSH1 0x14 DUP5 ADD DUP8 PUSH2 0x6F8 JUMP JUMPDEST DUP6 PUSH2 0x6F8 JUMP JUMPDEST SWAP3 DUP4 MSTORE POP POP PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 PUSH1 0x0 SWAP2 SWAP1 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x720 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x704 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x7D6 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x77A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x7E8 DUP2 DUP7 PUSH2 0x77A JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x829 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x77A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x83B DUP2 DUP6 PUSH2 0x77A JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x86A PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x77A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x87C DUP2 DUP6 PUSH2 0x77A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x90C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL SWAP12 ORIGIN SWAP16 OR 0x24 GASLIMIT 0xC8 0xBA 0xC3 0xC3 0xD3 SWAP7 SLT 0xE4 KECCAK256 JUMPI CALLER 0xB9 POP 0xC4 PUSH24 0xBD0CFB30775C209C114864736F6C63430008110033000000 ","sourceMap":"976:3179:7:-:0;;;2257:260;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;620:38:1;;;;;2444:24:7::1;::::0;;;;2478:32:::1;;::::0;976:3179;;14:149:9;-1:-1:-1;;;;;107:31:9;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:532::-;306:6;314;322;375:2;363:9;354:7;350:23;346:32;343:52;;;391:1;388;381:12;343:52;420:9;414:16;404:26;;473:2;462:9;458:18;452:25;486:49;529:5;486:49;:::i;:::-;604:2;589:18;;583:25;554:5;;-1:-1:-1;617:51:9;583:25;617:51;:::i;:::-;687:7;677:17;;;168:532;;;;;:::o;:::-;976:3179:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MERKLE_ROOT_783":{"entryPoint":null,"id":783,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_787":{"entryPoint":null,"id":787,"parameterSlots":0,"returnSlots":0},"@_efficientHash_755":{"entryPoint":null,"id":755,"parameterSlots":2,"returnSlots":1},"@_hashPair_744":{"entryPoint":1121,"id":744,"parameterSlots":2,"returnSlots":1},"@claimStatus_780":{"entryPoint":null,"id":780,"parameterSlots":0,"returnSlots":0},"@claim_953":{"entryPoint":436,"id":953,"parameterSlots":5,"returnSlots":0},"@forwarderRegistry_31":{"entryPoint":null,"id":31,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_48":{"entryPoint":null,"id":48,"parameterSlots":1,"returnSlots":1},"@processProof_339":{"entryPoint":1044,"id":339,"parameterSlots":2,"returnSlots":1},"@verify_278":{"entryPoint":1022,"id":278,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":1171,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":1426,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1212,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":1239,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1533,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_array_uint256_dyn":{"entryPoint":1784,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_memory_ptr":{"entryPoint":1914,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":1835,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__fromStack_reversed":{"entryPoint":1959,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":2042,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2135,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$254__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$195__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1311,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":1390,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":2228,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":2181,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1264,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8376:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"141:125:9","statements":[{"nodeType":"YulAssignment","src":"151:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"163:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"174:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"159:3:9"},"nodeType":"YulFunctionCall","src":"159:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"151:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"193:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"208:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"216:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"204:3:9"},"nodeType":"YulFunctionCall","src":"204:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"186:6:9"},"nodeType":"YulFunctionCall","src":"186:74:9"},"nodeType":"YulExpressionStatement","src":"186:74:9"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$195__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"110:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"121:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"132:4:9","type":""}],"src":"14:252:9"},{"body":{"nodeType":"YulBlock","src":"396:125:9","statements":[{"nodeType":"YulAssignment","src":"406:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"418:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"429:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"414:3:9"},"nodeType":"YulFunctionCall","src":"414:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"406:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"448:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"463:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"471:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"459:3:9"},"nodeType":"YulFunctionCall","src":"459:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"441:6:9"},"nodeType":"YulFunctionCall","src":"441:74:9"},"nodeType":"YulExpressionStatement","src":"441:74:9"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$254__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"365:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"376:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"387:4:9","type":""}],"src":"271:250:9"},{"body":{"nodeType":"YulBlock","src":"627:76:9","statements":[{"nodeType":"YulAssignment","src":"637:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"649:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"660:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"645:3:9"},"nodeType":"YulFunctionCall","src":"645:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"637:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"679:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"690:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"672:6:9"},"nodeType":"YulFunctionCall","src":"672:25:9"},"nodeType":"YulExpressionStatement","src":"672:25:9"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"596:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"607:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"618:4:9","type":""}],"src":"526:177:9"},{"body":{"nodeType":"YulBlock","src":"757:147:9","statements":[{"nodeType":"YulAssignment","src":"767:29:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"789:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"776:12:9"},"nodeType":"YulFunctionCall","src":"776:20:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"767:5:9"}]},{"body":{"nodeType":"YulBlock","src":"882:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"891:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"894:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"884:6:9"},"nodeType":"YulFunctionCall","src":"884:12:9"},"nodeType":"YulExpressionStatement","src":"884:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"818:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"829:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"836:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"825:3:9"},"nodeType":"YulFunctionCall","src":"825:54:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"815:2:9"},"nodeType":"YulFunctionCall","src":"815:65:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"808:6:9"},"nodeType":"YulFunctionCall","src":"808:73:9"},"nodeType":"YulIf","src":"805:93:9"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"736:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"747:5:9","type":""}],"src":"708:196:9"},{"body":{"nodeType":"YulBlock","src":"979:116:9","statements":[{"body":{"nodeType":"YulBlock","src":"1025:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1034:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1037:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1027:6:9"},"nodeType":"YulFunctionCall","src":"1027:12:9"},"nodeType":"YulExpressionStatement","src":"1027:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1000:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1009:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"996:3:9"},"nodeType":"YulFunctionCall","src":"996:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1021:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"992:3:9"},"nodeType":"YulFunctionCall","src":"992:32:9"},"nodeType":"YulIf","src":"989:52:9"},{"nodeType":"YulAssignment","src":"1050:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1079:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1060:18:9"},"nodeType":"YulFunctionCall","src":"1060:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1050:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"945:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"956:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"968:6:9","type":""}],"src":"909:186:9"},{"body":{"nodeType":"YulBlock","src":"1195:92:9","statements":[{"nodeType":"YulAssignment","src":"1205:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1217:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1228:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1213:3:9"},"nodeType":"YulFunctionCall","src":"1213:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1205:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1247:9:9"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1272:6:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1265:6:9"},"nodeType":"YulFunctionCall","src":"1265:14:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1258:6:9"},"nodeType":"YulFunctionCall","src":"1258:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1240:6:9"},"nodeType":"YulFunctionCall","src":"1240:41:9"},"nodeType":"YulExpressionStatement","src":"1240:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1164:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1175:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1186:4:9","type":""}],"src":"1100:187:9"},{"body":{"nodeType":"YulBlock","src":"1362:110:9","statements":[{"body":{"nodeType":"YulBlock","src":"1408:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1417:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1420:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1410:6:9"},"nodeType":"YulFunctionCall","src":"1410:12:9"},"nodeType":"YulExpressionStatement","src":"1410:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1383:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1392:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1379:3:9"},"nodeType":"YulFunctionCall","src":"1379:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1404:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1375:3:9"},"nodeType":"YulFunctionCall","src":"1375:32:9"},"nodeType":"YulIf","src":"1372:52:9"},{"nodeType":"YulAssignment","src":"1433:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1456:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1443:12:9"},"nodeType":"YulFunctionCall","src":"1443:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1433:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1328:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1339:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1351:6:9","type":""}],"src":"1292:180:9"},{"body":{"nodeType":"YulBlock","src":"1509:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1526:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1529:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1519:6:9"},"nodeType":"YulFunctionCall","src":"1519:88:9"},"nodeType":"YulExpressionStatement","src":"1519:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1623:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1626:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1616:6:9"},"nodeType":"YulFunctionCall","src":"1616:15:9"},"nodeType":"YulExpressionStatement","src":"1616:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1647:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1650:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1640:6:9"},"nodeType":"YulFunctionCall","src":"1640:15:9"},"nodeType":"YulExpressionStatement","src":"1640:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1477:184:9"},{"body":{"nodeType":"YulBlock","src":"1711:289:9","statements":[{"nodeType":"YulAssignment","src":"1721:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1737:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1731:5:9"},"nodeType":"YulFunctionCall","src":"1731:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1721:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"1749:117:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1771:6:9"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1787:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"1793:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1783:3:9"},"nodeType":"YulFunctionCall","src":"1783:13:9"},{"kind":"number","nodeType":"YulLiteral","src":"1798:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1779:3:9"},"nodeType":"YulFunctionCall","src":"1779:86:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1767:3:9"},"nodeType":"YulFunctionCall","src":"1767:99:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1753:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1941:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1943:16:9"},"nodeType":"YulFunctionCall","src":"1943:18:9"},"nodeType":"YulExpressionStatement","src":"1943:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1884:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"1896:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1881:2:9"},"nodeType":"YulFunctionCall","src":"1881:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1920:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1932:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1917:2:9"},"nodeType":"YulFunctionCall","src":"1917:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1878:2:9"},"nodeType":"YulFunctionCall","src":"1878:62:9"},"nodeType":"YulIf","src":"1875:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1979:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1983:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1972:6:9"},"nodeType":"YulFunctionCall","src":"1972:22:9"},"nodeType":"YulExpressionStatement","src":"1972:22:9"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1691:4:9","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1700:6:9","type":""}],"src":"1666:334:9"},{"body":{"nodeType":"YulBlock","src":"2074:114:9","statements":[{"body":{"nodeType":"YulBlock","src":"2118:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2120:16:9"},"nodeType":"YulFunctionCall","src":"2120:18:9"},"nodeType":"YulExpressionStatement","src":"2120:18:9"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2090:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"2098:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2087:2:9"},"nodeType":"YulFunctionCall","src":"2087:30:9"},"nodeType":"YulIf","src":"2084:56:9"},{"nodeType":"YulAssignment","src":"2149:33:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2165:1:9","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2168:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2161:3:9"},"nodeType":"YulFunctionCall","src":"2161:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"2177:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2157:3:9"},"nodeType":"YulFunctionCall","src":"2157:25:9"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2149:4:9"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2054:6:9","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2065:4:9","type":""}],"src":"2005:183:9"},{"body":{"nodeType":"YulBlock","src":"2257:598:9","statements":[{"body":{"nodeType":"YulBlock","src":"2306:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2315:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2318:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2308:6:9"},"nodeType":"YulFunctionCall","src":"2308:12:9"},"nodeType":"YulExpressionStatement","src":"2308:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2285:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"2293:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2281:3:9"},"nodeType":"YulFunctionCall","src":"2281:17:9"},{"name":"end","nodeType":"YulIdentifier","src":"2300:3:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2277:3:9"},"nodeType":"YulFunctionCall","src":"2277:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2270:6:9"},"nodeType":"YulFunctionCall","src":"2270:35:9"},"nodeType":"YulIf","src":"2267:55:9"},{"nodeType":"YulVariableDeclaration","src":"2331:30:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2354:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2341:12:9"},"nodeType":"YulFunctionCall","src":"2341:20:9"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2335:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2370:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2380:4:9","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2374:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2393:71:9","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2460:2:9"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"2420:39:9"},"nodeType":"YulFunctionCall","src":"2420:43:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2404:15:9"},"nodeType":"YulFunctionCall","src":"2404:60:9"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2397:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2473:16:9","value":{"name":"dst","nodeType":"YulIdentifier","src":"2486:3:9"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2477:5:9","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2505:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2510:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2498:6:9"},"nodeType":"YulFunctionCall","src":"2498:15:9"},"nodeType":"YulExpressionStatement","src":"2498:15:9"},{"nodeType":"YulAssignment","src":"2522:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2533:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2538:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2529:3:9"},"nodeType":"YulFunctionCall","src":"2529:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2522:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"2550:46:9","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2572:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2584:1:9","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"2587:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2580:3:9"},"nodeType":"YulFunctionCall","src":"2580:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2568:3:9"},"nodeType":"YulFunctionCall","src":"2568:23:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2593:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2564:3:9"},"nodeType":"YulFunctionCall","src":"2564:32:9"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2554:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2624:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2633:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2636:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2626:6:9"},"nodeType":"YulFunctionCall","src":"2626:12:9"},"nodeType":"YulExpressionStatement","src":"2626:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2611:6:9"},{"name":"end","nodeType":"YulIdentifier","src":"2619:3:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2608:2:9"},"nodeType":"YulFunctionCall","src":"2608:15:9"},"nodeType":"YulIf","src":"2605:35:9"},{"nodeType":"YulVariableDeclaration","src":"2649:26:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2664:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2672:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2660:3:9"},"nodeType":"YulFunctionCall","src":"2660:15:9"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2653:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2740:86:9","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2761:3:9"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2779:3:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2766:12:9"},"nodeType":"YulFunctionCall","src":"2766:17:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2754:6:9"},"nodeType":"YulFunctionCall","src":"2754:30:9"},"nodeType":"YulExpressionStatement","src":"2754:30:9"},{"nodeType":"YulAssignment","src":"2797:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2808:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2813:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2804:3:9"},"nodeType":"YulFunctionCall","src":"2804:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2797:3:9"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2695:3:9"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2700:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2692:2:9"},"nodeType":"YulFunctionCall","src":"2692:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2708:23:9","statements":[{"nodeType":"YulAssignment","src":"2710:19:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2721:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2726:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2717:3:9"},"nodeType":"YulFunctionCall","src":"2717:12:9"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2710:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"2688:3:9","statements":[]},"src":"2684:142:9"},{"nodeType":"YulAssignment","src":"2835:14:9","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2844:5:9"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2835:5:9"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2231:6:9","type":""},{"name":"end","nodeType":"YulTypedName","src":"2239:3:9","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2247:5:9","type":""}],"src":"2193:662:9"},{"body":{"nodeType":"YulBlock","src":"3073:1295:9","statements":[{"body":{"nodeType":"YulBlock","src":"3120:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3129:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3132:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3122:6:9"},"nodeType":"YulFunctionCall","src":"3122:12:9"},"nodeType":"YulExpressionStatement","src":"3122:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3094:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"3103:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3090:3:9"},"nodeType":"YulFunctionCall","src":"3090:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"3115:3:9","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3086:3:9"},"nodeType":"YulFunctionCall","src":"3086:33:9"},"nodeType":"YulIf","src":"3083:53:9"},{"nodeType":"YulAssignment","src":"3145:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3168:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3155:12:9"},"nodeType":"YulFunctionCall","src":"3155:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3145:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"3187:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3197:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3191:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3208:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3239:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3250:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3235:3:9"},"nodeType":"YulFunctionCall","src":"3235:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3222:12:9"},"nodeType":"YulFunctionCall","src":"3222:32:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3212:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3263:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3273:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3267:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3318:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3327:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3330:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3320:6:9"},"nodeType":"YulFunctionCall","src":"3320:12:9"},"nodeType":"YulExpressionStatement","src":"3320:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3306:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3314:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3303:2:9"},"nodeType":"YulFunctionCall","src":"3303:14:9"},"nodeType":"YulIf","src":"3300:34:9"},{"nodeType":"YulVariableDeclaration","src":"3343:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3357:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"3368:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3353:3:9"},"nodeType":"YulFunctionCall","src":"3353:22:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3347:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3423:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3432:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3435:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3425:6:9"},"nodeType":"YulFunctionCall","src":"3425:12:9"},"nodeType":"YulExpressionStatement","src":"3425:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3402:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"3406:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3398:3:9"},"nodeType":"YulFunctionCall","src":"3398:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3413:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3394:3:9"},"nodeType":"YulFunctionCall","src":"3394:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3387:6:9"},"nodeType":"YulFunctionCall","src":"3387:35:9"},"nodeType":"YulIf","src":"3384:55:9"},{"nodeType":"YulVariableDeclaration","src":"3448:26:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3471:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3458:12:9"},"nodeType":"YulFunctionCall","src":"3458:16:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3452:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3483:71:9","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"3550:2:9"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"3510:39:9"},"nodeType":"YulFunctionCall","src":"3510:43:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3494:15:9"},"nodeType":"YulFunctionCall","src":"3494:60:9"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3487:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3563:16:9","value":{"name":"dst","nodeType":"YulIdentifier","src":"3576:3:9"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3567:5:9","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3595:3:9"},{"name":"_4","nodeType":"YulIdentifier","src":"3600:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3588:6:9"},"nodeType":"YulFunctionCall","src":"3588:15:9"},"nodeType":"YulExpressionStatement","src":"3588:15:9"},{"nodeType":"YulAssignment","src":"3612:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3623:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3628:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3619:3:9"},"nodeType":"YulFunctionCall","src":"3619:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3612:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"3640:42:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3662:2:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3670:1:9","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"3673:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3666:3:9"},"nodeType":"YulFunctionCall","src":"3666:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3658:3:9"},"nodeType":"YulFunctionCall","src":"3658:19:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3679:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3654:3:9"},"nodeType":"YulFunctionCall","src":"3654:28:9"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3644:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3714:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3723:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3726:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3716:6:9"},"nodeType":"YulFunctionCall","src":"3716:12:9"},"nodeType":"YulExpressionStatement","src":"3716:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3697:6:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3705:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3694:2:9"},"nodeType":"YulFunctionCall","src":"3694:19:9"},"nodeType":"YulIf","src":"3691:39:9"},{"nodeType":"YulVariableDeclaration","src":"3739:22:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3754:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3758:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3750:3:9"},"nodeType":"YulFunctionCall","src":"3750:11:9"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3743:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3826:86:9","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3847:3:9"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3865:3:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3852:12:9"},"nodeType":"YulFunctionCall","src":"3852:17:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3840:6:9"},"nodeType":"YulFunctionCall","src":"3840:30:9"},"nodeType":"YulExpressionStatement","src":"3840:30:9"},{"nodeType":"YulAssignment","src":"3883:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3894:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3899:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3890:3:9"},"nodeType":"YulFunctionCall","src":"3890:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3883:3:9"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3781:3:9"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3786:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3778:2:9"},"nodeType":"YulFunctionCall","src":"3778:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3794:23:9","statements":[{"nodeType":"YulAssignment","src":"3796:19:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3807:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3812:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3803:3:9"},"nodeType":"YulFunctionCall","src":"3803:12:9"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3796:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"3774:3:9","statements":[]},"src":"3770:142:9"},{"nodeType":"YulAssignment","src":"3921:15:9","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3931:5:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3921:6:9"}]},{"nodeType":"YulAssignment","src":"3945:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3978:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3989:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3974:3:9"},"nodeType":"YulFunctionCall","src":"3974:18:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3955:18:9"},"nodeType":"YulFunctionCall","src":"3955:38:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3945:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4002:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4035:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4046:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4031:3:9"},"nodeType":"YulFunctionCall","src":"4031:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4018:12:9"},"nodeType":"YulFunctionCall","src":"4018:32:9"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4006:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4079:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4088:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4091:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4081:6:9"},"nodeType":"YulFunctionCall","src":"4081:12:9"},"nodeType":"YulExpressionStatement","src":"4081:12:9"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4065:8:9"},{"name":"_2","nodeType":"YulIdentifier","src":"4075:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4062:2:9"},"nodeType":"YulFunctionCall","src":"4062:16:9"},"nodeType":"YulIf","src":"4059:36:9"},{"nodeType":"YulAssignment","src":"4104:73:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4147:9:9"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4158:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4143:3:9"},"nodeType":"YulFunctionCall","src":"4143:24:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4169:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4114:28:9"},"nodeType":"YulFunctionCall","src":"4114:63:9"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4104:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4186:49:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4219:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4230:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4215:3:9"},"nodeType":"YulFunctionCall","src":"4215:19:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4202:12:9"},"nodeType":"YulFunctionCall","src":"4202:33:9"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4190:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4264:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4273:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4276:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4266:6:9"},"nodeType":"YulFunctionCall","src":"4266:12:9"},"nodeType":"YulExpressionStatement","src":"4266:12:9"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4250:8:9"},{"name":"_2","nodeType":"YulIdentifier","src":"4260:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4247:2:9"},"nodeType":"YulFunctionCall","src":"4247:16:9"},"nodeType":"YulIf","src":"4244:36:9"},{"nodeType":"YulAssignment","src":"4289:73:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4332:9:9"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4343:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4328:3:9"},"nodeType":"YulFunctionCall","src":"4328:24:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4354:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4299:28:9"},"nodeType":"YulFunctionCall","src":"4299:63:9"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4289:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3007:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3018:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3030:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3038:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3046:6:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3054:6:9","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3062:6:9","type":""}],"src":"2860:1508:9"},{"body":{"nodeType":"YulBlock","src":"4434:337:9","statements":[{"nodeType":"YulVariableDeclaration","src":"4444:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4464:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4458:5:9"},"nodeType":"YulFunctionCall","src":"4458:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4448:6:9","type":""}]},{"nodeType":"YulAssignment","src":"4479:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"4486:3:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4479:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"4498:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4508:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4502:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4521:28:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4539:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4546:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4535:3:9"},"nodeType":"YulFunctionCall","src":"4535:14:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4525:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4558:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4567:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4562:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4626:120:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4647:3:9"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4658:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4652:5:9"},"nodeType":"YulFunctionCall","src":"4652:13:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4640:6:9"},"nodeType":"YulFunctionCall","src":"4640:26:9"},"nodeType":"YulExpressionStatement","src":"4640:26:9"},{"nodeType":"YulAssignment","src":"4679:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4690:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4695:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4686:3:9"},"nodeType":"YulFunctionCall","src":"4686:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4679:3:9"}]},{"nodeType":"YulAssignment","src":"4711:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4725:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4733:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4721:3:9"},"nodeType":"YulFunctionCall","src":"4721:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4711:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4588:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"4591:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4585:2:9"},"nodeType":"YulFunctionCall","src":"4585:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4599:18:9","statements":[{"nodeType":"YulAssignment","src":"4601:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4610:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"4613:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4606:3:9"},"nodeType":"YulFunctionCall","src":"4606:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4601:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"4581:3:9","statements":[]},"src":"4577:169:9"},{"nodeType":"YulAssignment","src":"4755:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"4762:3:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4755:3:9"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4411:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4418:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4426:3:9","type":""}],"src":"4373:398:9"},{"body":{"nodeType":"YulBlock","src":"5079:287:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5096:3:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5109:2:9","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"5113:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5105:3:9"},"nodeType":"YulFunctionCall","src":"5105:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"5122:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5101:3:9"},"nodeType":"YulFunctionCall","src":"5101:88:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5089:6:9"},"nodeType":"YulFunctionCall","src":"5089:101:9"},"nodeType":"YulExpressionStatement","src":"5089:101:9"},{"nodeType":"YulVariableDeclaration","src":"5199:101:9","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5241:6:9"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5278:6:9"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5290:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"5295:2:9","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5286:3:9"},"nodeType":"YulFunctionCall","src":"5286:12:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5249:28:9"},"nodeType":"YulFunctionCall","src":"5249:50:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5212:28:9"},"nodeType":"YulFunctionCall","src":"5212:88:9"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"5203:5:9","type":""}]},{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"5316:5:9"},{"name":"value3","nodeType":"YulIdentifier","src":"5323:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5309:6:9"},"nodeType":"YulFunctionCall","src":"5309:21:9"},"nodeType":"YulExpressionStatement","src":"5309:21:9"},{"nodeType":"YulAssignment","src":"5339:21:9","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"5350:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"5357:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5346:3:9"},"nodeType":"YulFunctionCall","src":"5346:14:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5339:3:9"}]}]},"name":"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5031:3:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5036:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5044:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5052:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5060:6:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5071:3:9","type":""}],"src":"4776:590:9"},{"body":{"nodeType":"YulBlock","src":"5443:374:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5453:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5473:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5467:5:9"},"nodeType":"YulFunctionCall","src":"5467:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5457:6:9","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5495:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"5500:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5488:6:9"},"nodeType":"YulFunctionCall","src":"5488:19:9"},"nodeType":"YulExpressionStatement","src":"5488:19:9"},{"nodeType":"YulVariableDeclaration","src":"5516:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5526:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5520:2:9","type":""}]},{"nodeType":"YulAssignment","src":"5539:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5550:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5555:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5546:3:9"},"nodeType":"YulFunctionCall","src":"5546:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5539:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"5567:28:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5585:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5592:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5581:3:9"},"nodeType":"YulFunctionCall","src":"5581:14:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5571:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5604:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5613:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5608:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5672:120:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5693:3:9"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5704:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5698:5:9"},"nodeType":"YulFunctionCall","src":"5698:13:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5686:6:9"},"nodeType":"YulFunctionCall","src":"5686:26:9"},"nodeType":"YulExpressionStatement","src":"5686:26:9"},{"nodeType":"YulAssignment","src":"5725:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5736:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5741:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5732:3:9"},"nodeType":"YulFunctionCall","src":"5732:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5725:3:9"}]},{"nodeType":"YulAssignment","src":"5757:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5771:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5779:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5767:3:9"},"nodeType":"YulFunctionCall","src":"5767:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5757:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5634:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"5637:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5631:2:9"},"nodeType":"YulFunctionCall","src":"5631:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5645:18:9","statements":[{"nodeType":"YulAssignment","src":"5647:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5656:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"5659:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5652:3:9"},"nodeType":"YulFunctionCall","src":"5652:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5647:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"5627:3:9","statements":[]},"src":"5623:169:9"},{"nodeType":"YulAssignment","src":"5801:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"5808:3:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5801:3:9"}]}]},"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5420:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5427:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5435:3:9","type":""}],"src":"5371:446:9"},{"body":{"nodeType":"YulBlock","src":"6107:395:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6124:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6139:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"6147:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6135:3:9"},"nodeType":"YulFunctionCall","src":"6135:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6117:6:9"},"nodeType":"YulFunctionCall","src":"6117:74:9"},"nodeType":"YulExpressionStatement","src":"6117:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6211:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6222:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6207:3:9"},"nodeType":"YulFunctionCall","src":"6207:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"6227:3:9","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6200:6:9"},"nodeType":"YulFunctionCall","src":"6200:31:9"},"nodeType":"YulExpressionStatement","src":"6200:31:9"},{"nodeType":"YulVariableDeclaration","src":"6240:82:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6294:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6306:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6317:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6302:3:9"},"nodeType":"YulFunctionCall","src":"6302:19:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"6254:39:9"},"nodeType":"YulFunctionCall","src":"6254:68:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6244:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6342:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6353:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6338:3:9"},"nodeType":"YulFunctionCall","src":"6338:18:9"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"6362:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"6370:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6358:3:9"},"nodeType":"YulFunctionCall","src":"6358:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6331:6:9"},"nodeType":"YulFunctionCall","src":"6331:50:9"},"nodeType":"YulExpressionStatement","src":"6331:50:9"},{"nodeType":"YulAssignment","src":"6390:63:9","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6438:6:9"},{"name":"tail_1","nodeType":"YulIdentifier","src":"6446:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"6398:39:9"},"nodeType":"YulFunctionCall","src":"6398:55:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6390:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6473:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6484:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6469:3:9"},"nodeType":"YulFunctionCall","src":"6469:18:9"},{"name":"value3","nodeType":"YulIdentifier","src":"6489:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6462:6:9"},"nodeType":"YulFunctionCall","src":"6462:34:9"},"nodeType":"YulExpressionStatement","src":"6462:34:9"}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6052:9:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6063:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6071:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6079:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6087:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6098:4:9","type":""}],"src":"5822:680:9"},{"body":{"nodeType":"YulBlock","src":"6864:475:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6881:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6896:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"6904:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6892:3:9"},"nodeType":"YulFunctionCall","src":"6892:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6874:6:9"},"nodeType":"YulFunctionCall","src":"6874:74:9"},"nodeType":"YulExpressionStatement","src":"6874:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6968:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6979:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6964:3:9"},"nodeType":"YulFunctionCall","src":"6964:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"6984:3:9","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6957:6:9"},"nodeType":"YulFunctionCall","src":"6957:31:9"},"nodeType":"YulExpressionStatement","src":"6957:31:9"},{"nodeType":"YulVariableDeclaration","src":"6997:82:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7051:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7063:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7074:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7059:3:9"},"nodeType":"YulFunctionCall","src":"7059:19:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"7011:39:9"},"nodeType":"YulFunctionCall","src":"7011:68:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"7001:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7099:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7110:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7095:3:9"},"nodeType":"YulFunctionCall","src":"7095:18:9"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7119:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7127:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7115:3:9"},"nodeType":"YulFunctionCall","src":"7115:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7088:6:9"},"nodeType":"YulFunctionCall","src":"7088:50:9"},"nodeType":"YulExpressionStatement","src":"7088:50:9"},{"nodeType":"YulVariableDeclaration","src":"7147:69:9","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7201:6:9"},{"name":"tail_1","nodeType":"YulIdentifier","src":"7209:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"7161:39:9"},"nodeType":"YulFunctionCall","src":"7161:55:9"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"7151:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7236:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7247:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7232:3:9"},"nodeType":"YulFunctionCall","src":"7232:18:9"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7256:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7264:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7252:3:9"},"nodeType":"YulFunctionCall","src":"7252:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7225:6:9"},"nodeType":"YulFunctionCall","src":"7225:50:9"},"nodeType":"YulExpressionStatement","src":"7225:50:9"},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7291:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"7299:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7284:6:9"},"nodeType":"YulFunctionCall","src":"7284:17:9"},"nodeType":"YulExpressionStatement","src":"7284:17:9"},{"nodeType":"YulAssignment","src":"7310:23:9","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7322:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"7330:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7318:3:9"},"nodeType":"YulFunctionCall","src":"7318:15:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7310:4:9"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6817:9:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6828:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6836:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6844:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6855:4:9","type":""}],"src":"6507:832:9"},{"body":{"nodeType":"YulBlock","src":"7573:258:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7590:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7601:2:9","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7583:6:9"},"nodeType":"YulFunctionCall","src":"7583:21:9"},"nodeType":"YulExpressionStatement","src":"7583:21:9"},{"nodeType":"YulVariableDeclaration","src":"7613:81:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7667:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7679:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7690:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7675:3:9"},"nodeType":"YulFunctionCall","src":"7675:18:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"7627:39:9"},"nodeType":"YulFunctionCall","src":"7627:67:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"7617:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7714:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7725:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7710:3:9"},"nodeType":"YulFunctionCall","src":"7710:18:9"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7734:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7742:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7730:3:9"},"nodeType":"YulFunctionCall","src":"7730:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7703:6:9"},"nodeType":"YulFunctionCall","src":"7703:50:9"},"nodeType":"YulExpressionStatement","src":"7703:50:9"},{"nodeType":"YulAssignment","src":"7762:63:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7810:6:9"},{"name":"tail_1","nodeType":"YulIdentifier","src":"7818:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"7770:39:9"},"nodeType":"YulFunctionCall","src":"7770:55:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7762:4:9"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7534:9:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7545:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7553:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7564:4:9","type":""}],"src":"7344:487:9"},{"body":{"nodeType":"YulBlock","src":"7868:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7885:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7888:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7878:6:9"},"nodeType":"YulFunctionCall","src":"7878:88:9"},"nodeType":"YulExpressionStatement","src":"7878:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7982:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7985:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7975:6:9"},"nodeType":"YulFunctionCall","src":"7975:15:9"},"nodeType":"YulExpressionStatement","src":"7975:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8006:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8009:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7999:6:9"},"nodeType":"YulFunctionCall","src":"7999:15:9"},"nodeType":"YulExpressionStatement","src":"7999:15:9"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"7836:184:9"},{"body":{"nodeType":"YulBlock","src":"8072:302:9","statements":[{"body":{"nodeType":"YulBlock","src":"8171:168:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8192:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8195:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8185:6:9"},"nodeType":"YulFunctionCall","src":"8185:88:9"},"nodeType":"YulExpressionStatement","src":"8185:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8293:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8296:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8286:6:9"},"nodeType":"YulFunctionCall","src":"8286:15:9"},"nodeType":"YulExpressionStatement","src":"8286:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8321:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8324:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8314:6:9"},"nodeType":"YulFunctionCall","src":"8314:15:9"},"nodeType":"YulExpressionStatement","src":"8314:15:9"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8088:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"8095:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8085:2:9"},"nodeType":"YulFunctionCall","src":"8085:77:9"},"nodeType":"YulIf","src":"8082:257:9"},{"nodeType":"YulAssignment","src":"8348:20:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8359:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"8366:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8355:3:9"},"nodeType":"YulFunctionCall","src":"8355:13:9"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8348:3:9"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8054:5:9","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"8064:3:9","type":""}],"src":"8025:349:9"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$195__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$254__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value1 := dst_1\n        value2 := abi_decode_address(add(headStart, 64))\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _2) { revert(0, 0) }\n        value4 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        pos := pos\n        let _1 := 0x20\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        let pos_1 := abi_encode_array_uint256_dyn(value2, abi_encode_array_uint256_dyn(value1, add(pos, 20)))\n        mstore(pos_1, value3)\n        end := add(pos_1, 32)\n    }\n    function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        mstore(tail_2, 0)\n        tail := add(tail_2, 32)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value1, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"59":[{"length":32,"start":121},{"length":32,"start":303}],"783":[{"length":32,"start":239},{"length":32,"start":611}],"787":[{"length":32,"start":200},{"length":32,"start":826}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100725760003560e01c8063572b6c0511610050578063572b6c051461011f578063e3a0ce091461017c578063f15e20e71461019f57600080fd5b80632b4c9f16146100775780633a5af339146100c357806351e75e8b146100ea575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100997f000000000000000000000000000000000000000000000000000000000000000081565b6101117f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ba565b61016c61012d3660046104bc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b60405190151581526020016100ba565b61016c61018a3660046104d7565b60006020819052908152604090205460ff1681565b6101b26101ad3660046105fd565b6101b4565b005b6000838383886040516020016101cd949392919061072b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012060008181529283905291205490915060ff161561025d57838383886040517fb21ae00b00000000000000000000000000000000000000000000000000000000815260040161025494939291906107a7565b60405180910390fd5b610288857f0000000000000000000000000000000000000000000000000000000000000000836103fe565b6102c657838383886040517f8430193200000000000000000000000000000000000000000000000000000000815260040161025494939291906107a7565b6000818152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb90610373908790879087906004016107fa565b600060405180830381600087803b15801561038d57600080fd5b505af11580156103a1573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16867f8f9c73ccaa2efe63e7eac59937a2aa225b9d0748cbfe666eff28a75e964801a485856040516103ee929190610857565b60405180910390a3505050505050565b60008261040b8584610414565b14949350505050565b600081815b8451811015610459576104458286838151811061043857610438610885565b6020026020010151610461565b915080610451816108b4565b915050610419565b509392505050565b600081831061047d57600082815260208490526040902061048c565b60008381526020839052604090205b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146104b757600080fd5b919050565b6000602082840312156104ce57600080fd5b61048c82610493565b6000602082840312156104e957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610566576105666104f0565b604052919050565b600067ffffffffffffffff821115610588576105886104f0565b5060051b60200190565b600082601f8301126105a357600080fd5b813560206105b86105b38361056e565b61051f565b82815260059290921b840181019181810190868411156105d757600080fd5b8286015b848110156105f257803583529183019183016105db565b509695505050505050565b600080600080600060a0868803121561061557600080fd5b8535945060208087013567ffffffffffffffff8082111561063557600080fd5b818901915089601f83011261064957600080fd5b81356106576105b38261056e565b81815260059190911b8301840190848101908c83111561067657600080fd5b938501935b828510156106945784358252938501939085019061067b565b98506106a591505060408a01610493565b955060608901359250808311156106bb57600080fd5b6106c78a848b01610592565b945060808901359250808311156106dd57600080fd5b50506106eb88828901610592565b9150509295509295909350565b60008151602080840160005b8381101561072057815187529582019590820190600101610704565b509495945050505050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b168152600061076b61076560148401876106f8565b856106f8565b92835250506020019392505050565b80518083526020928301926000919080840183831561072057815187529582019590820190600101610704565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006107d6608083018661077a565b82810360408401526107e8818661077a565b91505082606083015295945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152608060208201526000610829608083018561077a565b828103604084015261083b818561077a565b8381036060909401939093525050600081526020019392505050565b60408152600061086a604083018561077a565b828103602084015261087c818561077a565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361090c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220f19b329f172445c8bac3c3d39612e4205733b950c477bd0cfb30775c209c114864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xF15E20E7 EQ PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x51E75E8B EQ PUSH2 0xEA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBA JUMP JUMPDEST PUSH2 0x16C PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBA JUMP JUMPDEST PUSH2 0x16C PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x1B4 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x72B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x25D JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0xB21AE00B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x254 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x288 DUP6 PUSH32 0x0 DUP4 PUSH2 0x3FE JUMP JUMPDEST PUSH2 0x2C6 JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0x8430193200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x254 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x373 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x7FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x8F9C73CCAA2EFE63E7EAC59937A2AA225B9D0748CBFE666EFF28A75E964801A4 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP3 SWAP2 SWAP1 PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x40B DUP6 DUP5 PUSH2 0x414 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x459 JUMPI PUSH2 0x445 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x438 JUMPI PUSH2 0x438 PUSH2 0x885 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x461 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x451 DUP2 PUSH2 0x8B4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x419 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x47D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x48C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48C DUP3 PUSH2 0x493 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x566 JUMPI PUSH2 0x566 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x588 JUMPI PUSH2 0x588 PUSH2 0x4F0 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x5B8 PUSH2 0x5B3 DUP4 PUSH2 0x56E JUMP JUMPDEST PUSH2 0x51F JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x5F2 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x5DB JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x657 PUSH2 0x5B3 DUP3 PUSH2 0x56E JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x694 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x67B JUMP JUMPDEST SWAP9 POP PUSH2 0x6A5 SWAP2 POP POP PUSH1 0x40 DUP11 ADD PUSH2 0x493 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x6BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6C7 DUP11 DUP5 DUP12 ADD PUSH2 0x592 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x6EB DUP9 DUP3 DUP10 ADD PUSH2 0x592 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x720 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x704 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP6 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x76B PUSH2 0x765 PUSH1 0x14 DUP5 ADD DUP8 PUSH2 0x6F8 JUMP JUMPDEST DUP6 PUSH2 0x6F8 JUMP JUMPDEST SWAP3 DUP4 MSTORE POP POP PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 PUSH1 0x0 SWAP2 SWAP1 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x720 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x704 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x7D6 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x77A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x7E8 DUP2 DUP7 PUSH2 0x77A JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x829 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x77A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x83B DUP2 DUP6 PUSH2 0x77A JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x86A PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x77A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x87C DUP2 DUP6 PUSH2 0x77A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x90C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL SWAP12 ORIGIN SWAP16 OR 0x24 GASLIMIT 0xC8 0xBA 0xC3 0xC3 0xD3 SWAP7 SLT 0xE4 KECCAK256 JUMPI CALLER 0xB9 POP 0xC4 PUSH24 0xBD0CFB30775C209C114864736F6C63430008110033000000 ","sourceMap":"976:3179:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;727:114:0;816:18;727:114;;;216:42:9;204:55;;;186:74;;174:2;159:18;727:114:0;;;;;;;;1359:49:7;;;;;1254:36;;;;;;;;672:25:9;;;660:2;645:18;1254:36:7;526:177:9;876:157:0;;;;;;:::i;:::-;1007:18;986:40;;;;;;;;876:157;;;;1265:14:9;;1258:22;1240:41;;1228:2;1213:18;876:157:0;1100:187:9;1158:43:7;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3578:575;;;;;;:::i;:::-;;:::i;:::-;;;3719:12;3761:9;3772:3;3777:6;3785:7;3744:49;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;3734:60;;3744:49;3734:60;;;;3809:11;:17;;;;;;;;;;3734:60;;-1:-1:-1;3809:17:7;;3805:77;;;3850:9;3861:3;3866:6;3874:7;3835:47;;;;;;;;;;;;;;:::i;:::-;;;;;;;;3805:77;3897:31;:5;3910:11;3923:4;3897:12;:31::i;:::-;3892:90;;3950:9;3961:3;3966:6;3974:7;3937:45;;;;;;;;;;;;;;:::i;3892:90::-;3993:11;:17;;;;;;;;;;;;:24;;;;4013:4;3993:24;;;4027:57;;;;:29;:15;:29;;;;:57;;4057:9;;4068:3;;4073:6;;4027:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4123:9;4100:46;;4114:7;4100:46;4134:3;4139:6;4100:46;;;;;;;:::i;:::-;;;;;;;;3709:444;3578:575;;;;;:::o;1156:184:6:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:6:o;1994:290::-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:6;;;;:::i;:::-;;;;2133:116;;;-1:-1:-1;2265:12:6;1994:290;-1:-1:-1;;;1994:290:6:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:6:o;708:196:9:-;776:20;;836:42;825:54;;815:65;;805:93;;894:1;891;884:12;805:93;708:196;;;:::o;909:186::-;968:6;1021:2;1009:9;1000:7;996:23;992:32;989:52;;;1037:1;1034;1027:12;989:52;1060:29;1079:9;1060:29;:::i;1292:180::-;1351:6;1404:2;1392:9;1383:7;1379:23;1375:32;1372:52;;;1420:1;1417;1410:12;1372:52;-1:-1:-1;1443:23:9;;1292:180;-1:-1:-1;1292:180:9:o;1477:184::-;1529:77;1526:1;1519:88;1626:4;1623:1;1616:15;1650:4;1647:1;1640:15;1666:334;1737:2;1731:9;1793:2;1783:13;;1798:66;1779:86;1767:99;;1896:18;1881:34;;1917:22;;;1878:62;1875:88;;;1943:18;;:::i;:::-;1979:2;1972:22;1666:334;;-1:-1:-1;1666:334:9:o;2005:183::-;2065:4;2098:18;2090:6;2087:30;2084:56;;;2120:18;;:::i;:::-;-1:-1:-1;2165:1:9;2161:14;2177:4;2157:25;;2005:183::o;2193:662::-;2247:5;2300:3;2293:4;2285:6;2281:17;2277:27;2267:55;;2318:1;2315;2308:12;2267:55;2354:6;2341:20;2380:4;2404:60;2420:43;2460:2;2420:43;:::i;:::-;2404:60;:::i;:::-;2498:15;;;2584:1;2580:10;;;;2568:23;;2564:32;;;2529:12;;;;2608:15;;;2605:35;;;2636:1;2633;2626:12;2605:35;2672:2;2664:6;2660:15;2684:142;2700:6;2695:3;2692:15;2684:142;;;2766:17;;2754:30;;2804:12;;;;2717;;2684:142;;;-1:-1:-1;2844:5:9;2193:662;-1:-1:-1;;;;;;2193:662:9:o;2860:1508::-;3030:6;3038;3046;3054;3062;3115:3;3103:9;3094:7;3090:23;3086:33;3083:53;;;3132:1;3129;3122:12;3083:53;3168:9;3155:23;3145:33;;3197:2;3250;3239:9;3235:18;3222:32;3273:18;3314:2;3306:6;3303:14;3300:34;;;3330:1;3327;3320:12;3300:34;3368:6;3357:9;3353:22;3343:32;;3413:7;3406:4;3402:2;3398:13;3394:27;3384:55;;3435:1;3432;3425:12;3384:55;3471:2;3458:16;3494:60;3510:43;3550:2;3510:43;:::i;3494:60::-;3588:15;;;3670:1;3666:10;;;;3658:19;;3654:28;;;3619:12;;;;3694:19;;;3691:39;;;3726:1;3723;3716:12;3691:39;3750:11;;;;3770:142;3786:6;3781:3;3778:15;3770:142;;;3852:17;;3840:30;;3803:12;;;;3890;;;;3770:142;;;3931:5;-1:-1:-1;3955:38:9;;-1:-1:-1;;3989:2:9;3974:18;;3955:38;:::i;:::-;3945:48;;4046:2;4035:9;4031:18;4018:32;4002:48;;4075:2;4065:8;4062:16;4059:36;;;4091:1;4088;4081:12;4059:36;4114:63;4169:7;4158:8;4147:9;4143:24;4114:63;:::i;:::-;4104:73;;4230:3;4219:9;4215:19;4202:33;4186:49;;4260:2;4250:8;4247:16;4244:36;;;4276:1;4273;4266:12;4244:36;;;4299:63;4354:7;4343:8;4332:9;4328:24;4299:63;:::i;:::-;4289:73;;;2860:1508;;;;;;;;:::o;4373:398::-;4426:3;4464:5;4458:12;4508:4;4546:2;4539:5;4535:14;4567:1;4577:169;4591:6;4588:1;4585:13;4577:169;;;4652:13;;4640:26;;4686:12;;;;4721:15;;;;4613:1;4606:9;4577:169;;;-1:-1:-1;4762:3:9;;4373:398;-1:-1:-1;;;;;4373:398:9:o;4776:590::-;5122:66;5113:6;5109:2;5105:15;5101:88;5096:3;5089:101;5071:3;5212:88;5249:50;5295:2;5290:3;5286:12;5278:6;5249:50;:::i;:::-;5241:6;5212:88;:::i;:::-;5309:21;;;-1:-1:-1;;5357:2:9;5346:14;;4776:590;-1:-1:-1;;;4776:590:9:o;5371:446::-;5467:12;;5488:19;;;5526:4;5546:12;;;;5435:3;;5467:12;5581:14;;;5435:3;5631:13;;5623:169;;5698:13;;5686:26;;5732:12;;;;5767:15;;;;5659:1;5652:9;5623:169;;5822:680;6147:42;6139:6;6135:55;6124:9;6117:74;6227:3;6222:2;6211:9;6207:18;6200:31;6098:4;6254:68;6317:3;6306:9;6302:19;6294:6;6254:68;:::i;:::-;6370:9;6362:6;6358:22;6353:2;6342:9;6338:18;6331:50;6398:55;6446:6;6438;6398:55;:::i;:::-;6390:63;;;6489:6;6484:2;6473:9;6469:18;6462:34;5822:680;;;;;;;:::o;6507:832::-;6904:42;6896:6;6892:55;6881:9;6874:74;6984:3;6979:2;6968:9;6964:18;6957:31;6855:4;7011:68;7074:3;7063:9;7059:19;7051:6;7011:68;:::i;:::-;7127:9;7119:6;7115:22;7110:2;7099:9;7095:18;7088:50;7161:55;7209:6;7201;7161:55;:::i;:::-;7252:22;;;7247:2;7232:18;;;7225:50;;;;-1:-1:-1;;7299:1:9;7284:17;;7330:2;7318:15;;6507:832;-1:-1:-1;;;6507:832:9:o;7344:487::-;7601:2;7590:9;7583:21;7564:4;7627:67;7690:2;7679:9;7675:18;7667:6;7627:67;:::i;:::-;7742:9;7734:6;7730:22;7725:2;7714:9;7710:18;7703:50;7770:55;7818:6;7810;7770:55;:::i;:::-;7762:63;7344:487;-1:-1:-1;;;;;7344:487:9:o;7836:184::-;7888:77;7885:1;7878:88;7985:4;7982:1;7975:15;8009:4;8006:1;7999:15;8025:349;8064:3;8095:66;8088:5;8085:77;8082:257;;8195:77;8192:1;8185:88;8296:4;8293:1;8286:15;8324:4;8321:1;8314:15;8082:257;-1:-1:-1;8366:1:9;8355:13;;8025:349::o"},"gasEstimates":{"creation":{"codeDepositCost":"475400","executionCost":"infinite","totalCost":"infinite"},"external":{"MERKLE_ROOT()":"infinite","REWARD_CONTRACT()":"infinite","claim(bytes32,bytes32[],address,uint256[],uint256[])":"infinite","claimStatus(bytes32)":"2475","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"MERKLE_ROOT()":"51e75e8b","REWARD_CONTRACT()":"3a5af339","claim(bytes32,bytes32[],address,uint256[],uint256[])":"f15e20e7","claimStatus(bytes32)":"e3a0ce09","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.\",\"kind\":\"dev\",\"methods\":{\"claim(bytes32,bytes32[],address,uint256[],uint256[])\":{\"details\":\"Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.Throws if the claim has already been claimed.Throws if the proof is invalid.Throws if the claim is invalid.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"ids\":\"The array of token IDs to claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The address of the recipient.\",\"values\":\"The array of token values to claim.\"}},\"constructor\":{\"details\":\"Initializes the contract by setting the reward token contract and the forwarder registry.\",\"params\":{\"forwarderRegistry\":\"The address of the forwarder registry contract.\",\"merkleRoot\":\"The Merkle root to use for the claims.\",\"rewardContract\":\"The ERC1155Mintable token contract address.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Anichess The Missing Orbs Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256[],uint256[],bytes32)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"InvalidProof(address,uint256[],uint256[],bytes32)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}]},\"events\":{\"PayoutClaimed(bytes32,address,uint256[],uint256[])\":{\"notice\":\"Event emitted when a payout is claimed.\"}},\"kind\":\"user\",\"methods\":{\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root of the claim.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract interface.\"},\"claim(bytes32,bytes32[],address,uint256[],uint256[])\":{\"notice\":\"Allows eligible users to claim their rewards using a Merkle proof.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping to store claim status to prevent double claiming.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"notice\":\"This contract uses a Merkle Tree to allow users to claim tokens if they possess a valid proof.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":\"AnichessERC1155MerkleClaim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n/**\\n * @title Anichess The Missing Orbs Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n * @notice This contract uses a Merkle Tree to allow users to claim tokens if they possess a valid proof.\\n */\\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice Mapping to store claim status to prevent double claiming.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice The Merkle root of the claim.\\n    bytes32 public immutable MERKLE_ROOT;\\n    /// @notice The ERC1155Mintable reward contract interface.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice Event emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256[] ids, uint256[] values);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, bytes32 epochId);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, bytes32 epochId);\\n\\n    /**\\n     * @dev Initializes the contract by setting the reward token contract and the forwarder registry.\\n     * @param merkleRoot The Merkle root to use for the claims.\\n     * @param rewardContract The ERC1155Mintable token contract address.\\n     * @param forwarderRegistry The address of the forwarder registry contract.\\n     */\\n    constructor(\\n        bytes32 merkleRoot,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) {\\n        MERKLE_ROOT = merkleRoot;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Allows eligible users to claim their rewards using a Merkle proof.\\n     * @dev Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The address of the recipient.\\n     * @param ids The array of token IDs to claim.\\n     * @param values The array of token values to claim.\\n     * @dev Throws if the claim has already been claimed.\\n     * @dev Throws if the proof is invalid.\\n     * @dev Throws if the claim is invalid.\\n     */\\n    function claim(bytes32 epochId, bytes32[] memory proof, address recipient, uint256[] memory ids, uint256[] memory values) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, ids, values, epochId));\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(recipient, ids, values, epochId);\\n        if (!proof.verify(MERKLE_ROOT, leaf)) revert InvalidProof(recipient, ids, values, epochId);\\n\\n        claimStatus[leaf] = true;\\n        REWARD_CONTRACT.safeBatchMint(recipient, ids, values, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xc8a33e0f1e42801b2669d826cecacd809a29652ed6f1eb1d2ab6ccc26ca0ba71\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"claimStatus","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"errors":{"AlreadyClaimed(address,uint256[],uint256[],bytes32)":[{"notice":"Error thrown when the payout has already been claimed."}],"InvalidProof(address,uint256[],uint256[],bytes32)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}]},"events":{"PayoutClaimed(bytes32,address,uint256[],uint256[])":{"notice":"Event emitted when a payout is claimed."}},"kind":"user","methods":{"MERKLE_ROOT()":{"notice":"The Merkle root of the claim."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract interface."},"claim(bytes32,bytes32[],address,uint256[],uint256[])":{"notice":"Allows eligible users to claim their rewards using a Merkle proof."},"claimStatus(bytes32)":{"notice":"Mapping to store claim status to prevent double claiming."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"notice":"This contract uses a Merkle Tree to allow users to claim tokens if they possess a valid proof.","version":1}}},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"AnichessERC1155MerkleClaimMock":{"abi":[{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"InvalidProof","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"PayoutClaimed","type":"event"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"claim(bytes32,bytes32[],address,uint256[],uint256[])":{"details":"Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.Throws if the claim has already been claimed.Throws if the proof is invalid.Throws if the claim is invalid.","params":{"epochId":"The epoch ID for the claim.","ids":"The array of token IDs to claim.","proof":"The Merkle proof for the claim.","recipient":"The address of the recipient.","values":"The array of token values to claim."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_22":{"entryPoint":null,"id":22,"parameterSlots":1,"returnSlots":0},"@_70":{"entryPoint":null,"id":70,"parameterSlots":1,"returnSlots":0},"@_850":{"entryPoint":null,"id":850,"parameterSlots":3,"returnSlots":0},"@_981":{"entryPoint":null,"id":981,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_bytes32t_contract$_IERC1155Mintable_$254t_contract$_IForwarderRegistry_$195_fromMemory":{"entryPoint":100,"id":null,"parameterSlots":2,"returnSlots":3},"validator_revert_contract_IERC1155Mintable":{"entryPoint":76,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:702:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"77:86:9","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:9"},"nodeType":"YulFunctionCall","src":"143:12:9"},"nodeType":"YulExpressionStatement","src":"143:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"100:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"111:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"126:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"131:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"122:3:9"},"nodeType":"YulFunctionCall","src":"122:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:9"},"nodeType":"YulFunctionCall","src":"118:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"107:3:9"},"nodeType":"YulFunctionCall","src":"107:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"97:2:9"},"nodeType":"YulFunctionCall","src":"97:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"90:6:9"},"nodeType":"YulFunctionCall","src":"90:50:9"},"nodeType":"YulIf","src":"87:70:9"}]},"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"66:5:9","type":""}],"src":"14:149:9"},{"body":{"nodeType":"YulBlock","src":"333:367:9","statements":[{"body":{"nodeType":"YulBlock","src":"379:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"388:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"391:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"381:6:9"},"nodeType":"YulFunctionCall","src":"381:12:9"},"nodeType":"YulExpressionStatement","src":"381:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"354:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"363:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"350:3:9"},"nodeType":"YulFunctionCall","src":"350:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"375:2:9","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"346:3:9"},"nodeType":"YulFunctionCall","src":"346:32:9"},"nodeType":"YulIf","src":"343:52:9"},{"nodeType":"YulAssignment","src":"404:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"420:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"414:5:9"},"nodeType":"YulFunctionCall","src":"414:16:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"404:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"439:38:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"473:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:9"},"nodeType":"YulFunctionCall","src":"458:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"452:5:9"},"nodeType":"YulFunctionCall","src":"452:25:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"443:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"529:5:9"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"486:42:9"},"nodeType":"YulFunctionCall","src":"486:49:9"},"nodeType":"YulExpressionStatement","src":"486:49:9"},{"nodeType":"YulAssignment","src":"544:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"554:5:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"544:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"568:40:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:9"},"nodeType":"YulFunctionCall","src":"589:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"583:5:9"},"nodeType":"YulFunctionCall","src":"583:25:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"572:7:9","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"660:7:9"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"617:42:9"},"nodeType":"YulFunctionCall","src":"617:51:9"},"nodeType":"YulExpressionStatement","src":"617:51:9"},{"nodeType":"YulAssignment","src":"677:17:9","value":{"name":"value_1","nodeType":"YulIdentifier","src":"687:7:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"677:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32t_contract$_IERC1155Mintable_$254t_contract$_IForwarderRegistry_$195_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"283:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"294:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"306:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"314:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"322:6:9","type":""}],"src":"168:532:9"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_contract$_IERC1155Mintable_$254t_contract$_IForwarderRegistry_$195_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        validator_revert_contract_IERC1155Mintable(value)\n        value1 := value\n        let value_1 := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value2 := value_1\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e060405234801561001057600080fd5b50604051610e34380380610e3483398101604081905261002f91610064565b6001600160a01b0390811660805260a0929092521660c0526100a7565b6001600160a01b038116811461006157600080fd5b50565b60008060006060848603121561007957600080fd5b83519250602084015161008b8161004c565b604085015190925061009c8161004c565b809150509250925092565b60805160a05160c051610d2f6101056000396000818160f4015261039001526000818161011b01526102b9015260008181608f0152818161015b015281816104b6015281816104f40152818161062c01526106b40152610d2f6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063572b6c051161005b578063572b6c051461014b578063d1a91ff2146101a8578063e3a0ce09146101b0578063f15e20e7146101d357600080fd5b80632b4c9f161461008d57806331e66e1e146100d95780633a5af339146100ef57806351e75e8b14610116575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100e16101e8565b6040516100d09291906107e0565b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b61013d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100d0565b610198610159366004610856565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b60405190151581526020016100d0565b6100af6101fb565b6101986101be366004610871565b60006020819052908152604090205460ff1681565b6101e66101e1366004610997565b61020a565b005b3660006101f3610454565b915091509091565b600061020561045f565b905090565b6000838383886040516020016102239493929190610ac5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012060008181529283905291205490915060ff16156102b357838383886040517fb21ae00b0000000000000000000000000000000000000000000000000000000081526004016102aa9493929190610b41565b60405180910390fd5b6102de857f000000000000000000000000000000000000000000000000000000000000000083610469565b61031c57838383886040517f843019320000000000000000000000000000000000000000000000000000000081526004016102aa9493929190610b41565b6000818152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb906103c990879087908790600401610b94565b600060405180830381600087803b1580156103e357600080fd5b505af11580156103f7573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16867f8f9c73ccaa2efe63e7eac59937a2aa225b9d0748cbfe666eff28a75e964801a48585604051610444929190610bf1565b60405180910390a3505050505050565b3660006101f361047f565b60006102056105e9565b6000826104768584610730565b14949350505050565b366000333214806104905750601836105b1561049e5750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806105d3575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190610c1f565b156105e0576101f361077d565b50600091369150565b6000333214806105f95750601836105b1561060357503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061071f57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190610c1f565b1561072957919050565b3391505090565b600081815b8451811015610775576107618286838151811061075457610754610c41565b60200260200101516107ae565b91508061076d81610c70565b915050610735565b509392505050565b3660006101f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481610ccf565b60008183106107ca5760008281526020849052604090206107d9565b60008381526020839052604090205b9392505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461085157600080fd5b919050565b60006020828403121561086857600080fd5b6107d98261082d565b60006020828403121561088357600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109005761090061088a565b604052919050565b600067ffffffffffffffff8211156109225761092261088a565b5060051b60200190565b600082601f83011261093d57600080fd5b8135602061095261094d83610908565b6108b9565b82815260059290921b8401810191818101908684111561097157600080fd5b8286015b8481101561098c5780358352918301918301610975565b509695505050505050565b600080600080600060a086880312156109af57600080fd5b8535945060208087013567ffffffffffffffff808211156109cf57600080fd5b818901915089601f8301126109e357600080fd5b81356109f161094d82610908565b81815260059190911b8301840190848101908c831115610a1057600080fd5b938501935b82851015610a2e57843582529385019390850190610a15565b9850610a3f91505060408a0161082d565b95506060890135925080831115610a5557600080fd5b610a618a848b0161092c565b94506080890135925080831115610a7757600080fd5b5050610a858882890161092c565b9150509295509295909350565b60008151602080840160005b83811015610aba57815187529582019590820190600101610a9e565b509495945050505050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1681526000610b05610aff6014840187610a92565b85610a92565b92835250506020019392505050565b805180835260209283019260009190808401838315610aba57815187529582019590820190600101610a9e565b73ffffffffffffffffffffffffffffffffffffffff85168152608060208201526000610b706080830186610b14565b8281036040840152610b828186610b14565b91505082606083015295945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152608060208201526000610bc36080830185610b14565b8281036040840152610bd58185610b14565b8381036060909401939093525050600081526020019392505050565b604081526000610c046040830185610b14565b8281036020840152610c168185610b14565b95945050505050565b600060208284031215610c3157600080fd5b815180151581146107d957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cc8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60008085851115610cdf57600080fd5b83861115610cec57600080fd5b505082019391909203915056fea2646970667358221220e51ee95e59b480e58fedc0ded872ea2add361b07da462d089cd436f71e64104964736f6c63430008110033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xE34 CODESIZE SUB DUP1 PUSH2 0xE34 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0xA0 SWAP3 SWAP1 SWAP3 MSTORE AND PUSH1 0xC0 MSTORE PUSH2 0xA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x8B DUP2 PUSH2 0x4C JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9C DUP2 PUSH2 0x4C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0xD2F PUSH2 0x105 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xF4 ADD MSTORE PUSH2 0x390 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x11B ADD MSTORE PUSH2 0x2B9 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0x8F ADD MSTORE DUP2 DUP2 PUSH2 0x15B ADD MSTORE DUP2 DUP2 PUSH2 0x4B6 ADD MSTORE DUP2 DUP2 PUSH2 0x4F4 ADD MSTORE DUP2 DUP2 PUSH2 0x62C ADD MSTORE PUSH2 0x6B4 ADD MSTORE PUSH2 0xD2F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xF15E20E7 EQ PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE1 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD0 SWAP3 SWAP2 SWAP1 PUSH2 0x7E0 JUMP JUMPDEST PUSH2 0xAF PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x13D PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD0 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD0 JUMP JUMPDEST PUSH2 0xAF PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x198 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x871 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1E6 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x20A JUMP JUMPDEST STOP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x1F3 PUSH2 0x454 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205 PUSH2 0x45F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x223 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x2B3 JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0xB21AE00B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DE DUP6 PUSH32 0x0 DUP4 PUSH2 0x469 JUMP JUMPDEST PUSH2 0x31C JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0x8430193200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x3C9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x8F9C73CCAA2EFE63E7EAC59937A2AA225B9D0748CBFE666EFF28A75E964801A4 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x444 SWAP3 SWAP2 SWAP1 PUSH2 0xBF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x1F3 PUSH2 0x47F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x476 DUP6 DUP5 PUSH2 0x730 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x490 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x49E JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x5D3 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D3 SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST ISZERO PUSH2 0x5E0 JUMPI PUSH2 0x1F3 PUSH2 0x77D JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x5F9 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x603 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x71F JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71F SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST ISZERO PUSH2 0x729 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x775 JUMPI PUSH2 0x761 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7AE JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x76D DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x735 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x1F3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0xCCF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x7CA JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x7D9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D9 DUP3 PUSH2 0x82D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x900 JUMPI PUSH2 0x900 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x922 JUMPI PUSH2 0x922 PUSH2 0x88A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x93D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x952 PUSH2 0x94D DUP4 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x8B9 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x98C JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x975 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x9CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9F1 PUSH2 0x94D DUP3 PUSH2 0x908 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0xA10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xA2E JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0xA15 JUMP JUMPDEST SWAP9 POP PUSH2 0xA3F SWAP2 POP POP PUSH1 0x40 DUP11 ADD PUSH2 0x82D JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA61 DUP11 DUP5 DUP12 ADD PUSH2 0x92C JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0xA77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0xA85 DUP9 DUP3 DUP10 ADD PUSH2 0x92C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP6 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xB05 PUSH2 0xAFF PUSH1 0x14 DUP5 ADD DUP8 PUSH2 0xA92 JUMP JUMPDEST DUP6 PUSH2 0xA92 JUMP JUMPDEST SWAP3 DUP4 MSTORE POP POP PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 PUSH1 0x0 SWAP2 SWAP1 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0xABA JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xB70 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0xB14 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xB82 DUP2 DUP7 PUSH2 0xB14 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xBC3 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xB14 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xBD5 DUP2 DUP6 PUSH2 0xB14 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC04 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xB14 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC16 DUP2 DUP6 PUSH2 0xB14 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xCC8 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0xCDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0xCEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0x1E 0xE9 0x5E MSIZE 0xB4 DUP1 0xE5 DUP16 0xED 0xC0 0xDE 0xD8 PUSH19 0xEA2ADD361B07DA462D089CD436F71E64104964 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"384:594:8:-:0;;;460:209;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;620:38:1;;;;;2444:24:7::1;::::0;;;;2478:32:::1;;::::0;384:594:8;;14:149:9;-1:-1:-1;;;;;107:31:9;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:532::-;306:6;314;322;375:2;363:9;354:7;350:23;346:32;343:52;;;391:1;388;381:12;343:52;420:9;414:16;404:26;;473:2;462:9;458:18;452:25;486:49;529:5;486:49;:::i;:::-;604:2;589:18;;583:25;554:5;;-1:-1:-1;617:51:9;583:25;617:51;:::i;:::-;687:7;677:17;;;168:532;;;;;:::o;:::-;384:594:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MERKLE_ROOT_783":{"entryPoint":null,"id":783,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_787":{"entryPoint":null,"id":787,"parameterSlots":0,"returnSlots":0},"@__msgData_1000":{"entryPoint":488,"id":1000,"parameterSlots":0,"returnSlots":2},"@__msgSender_990":{"entryPoint":507,"id":990,"parameterSlots":0,"returnSlots":1},"@_efficientHash_755":{"entryPoint":null,"id":755,"parameterSlots":2,"returnSlots":1},"@_hashPair_744":{"entryPoint":1966,"id":744,"parameterSlots":2,"returnSlots":1},"@_msgData_168":{"entryPoint":1151,"id":168,"parameterSlots":0,"returnSlots":2},"@_msgData_876":{"entryPoint":1108,"id":876,"parameterSlots":0,"returnSlots":2},"@_msgSender_120":{"entryPoint":1513,"id":120,"parameterSlots":0,"returnSlots":1},"@_msgSender_863":{"entryPoint":1119,"id":863,"parameterSlots":0,"returnSlots":1},"@claimStatus_780":{"entryPoint":null,"id":780,"parameterSlots":0,"returnSlots":0},"@claim_953":{"entryPoint":522,"id":953,"parameterSlots":5,"returnSlots":0},"@forwarderRegistry_31":{"entryPoint":null,"id":31,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_48":{"entryPoint":null,"id":48,"parameterSlots":1,"returnSlots":1},"@msgData_223":{"entryPoint":1917,"id":223,"parameterSlots":0,"returnSlots":2},"@msgSender_206":{"entryPoint":null,"id":206,"parameterSlots":0,"returnSlots":1},"@processProof_339":{"entryPoint":1840,"id":339,"parameterSlots":2,"returnSlots":1},"@verify_278":{"entryPoint":1129,"id":278,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":2093,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":2348,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2134,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3103,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":2161,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2455,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_array_uint256_dyn":{"entryPoint":2706,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_memory_ptr":{"entryPoint":2836,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":2757,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__fromStack_reversed":{"entryPoint":2881,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":2964,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3057,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":2016,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$254__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$195__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2233,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":2312,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":3279,"id":null,"parameterSlots":4,"returnSlots":2},"increment_t_uint256":{"entryPoint":3184,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":3137,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2186,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10009:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"141:125:9","statements":[{"nodeType":"YulAssignment","src":"151:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"163:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"174:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"159:3:9"},"nodeType":"YulFunctionCall","src":"159:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"151:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"193:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"208:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"216:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"204:3:9"},"nodeType":"YulFunctionCall","src":"204:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"186:6:9"},"nodeType":"YulFunctionCall","src":"186:74:9"},"nodeType":"YulExpressionStatement","src":"186:74:9"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$195__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"110:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"121:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"132:4:9","type":""}],"src":"14:252:9"},{"body":{"nodeType":"YulBlock","src":"400:318:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"417:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"428:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"410:6:9"},"nodeType":"YulFunctionCall","src":"410:21:9"},"nodeType":"YulExpressionStatement","src":"410:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"451:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"462:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"447:3:9"},"nodeType":"YulFunctionCall","src":"447:18:9"},{"name":"value1","nodeType":"YulIdentifier","src":"467:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"440:6:9"},"nodeType":"YulFunctionCall","src":"440:34:9"},"nodeType":"YulExpressionStatement","src":"440:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"500:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"511:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"496:3:9"},"nodeType":"YulFunctionCall","src":"496:18:9"},{"name":"value0","nodeType":"YulIdentifier","src":"516:6:9"},{"name":"value1","nodeType":"YulIdentifier","src":"524:6:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"483:12:9"},"nodeType":"YulFunctionCall","src":"483:48:9"},"nodeType":"YulExpressionStatement","src":"483:48:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"555:9:9"},{"name":"value1","nodeType":"YulIdentifier","src":"566:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"551:3:9"},"nodeType":"YulFunctionCall","src":"551:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"575:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"547:3:9"},"nodeType":"YulFunctionCall","src":"547:31:9"},{"kind":"number","nodeType":"YulLiteral","src":"580:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:9"},"nodeType":"YulFunctionCall","src":"540:42:9"},"nodeType":"YulExpressionStatement","src":"540:42:9"},{"nodeType":"YulAssignment","src":"591:121:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"607:9:9"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"626:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"634:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"622:3:9"},"nodeType":"YulFunctionCall","src":"622:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"639:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"618:3:9"},"nodeType":"YulFunctionCall","src":"618:88:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"603:3:9"},"nodeType":"YulFunctionCall","src":"603:104:9"},{"kind":"number","nodeType":"YulLiteral","src":"709:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"599:3:9"},"nodeType":"YulFunctionCall","src":"599:113:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"591:4:9"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"361:9:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"372:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:9","type":""}],"src":"271:447:9"},{"body":{"nodeType":"YulBlock","src":"848:125:9","statements":[{"nodeType":"YulAssignment","src":"858:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"870:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"881:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"866:3:9"},"nodeType":"YulFunctionCall","src":"866:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"858:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"900:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"915:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"923:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"911:3:9"},"nodeType":"YulFunctionCall","src":"911:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"893:6:9"},"nodeType":"YulFunctionCall","src":"893:74:9"},"nodeType":"YulExpressionStatement","src":"893:74:9"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$254__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"817:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"828:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"839:4:9","type":""}],"src":"723:250:9"},{"body":{"nodeType":"YulBlock","src":"1079:76:9","statements":[{"nodeType":"YulAssignment","src":"1089:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1112:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1097:3:9"},"nodeType":"YulFunctionCall","src":"1097:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1089:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1131:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"1142:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1124:6:9"},"nodeType":"YulFunctionCall","src":"1124:25:9"},"nodeType":"YulExpressionStatement","src":"1124:25:9"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1048:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1059:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1070:4:9","type":""}],"src":"978:177:9"},{"body":{"nodeType":"YulBlock","src":"1209:147:9","statements":[{"nodeType":"YulAssignment","src":"1219:29:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1241:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1228:12:9"},"nodeType":"YulFunctionCall","src":"1228:20:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1219:5:9"}]},{"body":{"nodeType":"YulBlock","src":"1334:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1343:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1346:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1336:6:9"},"nodeType":"YulFunctionCall","src":"1336:12:9"},"nodeType":"YulExpressionStatement","src":"1336:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1270:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1281:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"1288:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1277:3:9"},"nodeType":"YulFunctionCall","src":"1277:54:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1267:2:9"},"nodeType":"YulFunctionCall","src":"1267:65:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1260:6:9"},"nodeType":"YulFunctionCall","src":"1260:73:9"},"nodeType":"YulIf","src":"1257:93:9"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1188:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1199:5:9","type":""}],"src":"1160:196:9"},{"body":{"nodeType":"YulBlock","src":"1431:116:9","statements":[{"body":{"nodeType":"YulBlock","src":"1477:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1486:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1489:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1479:6:9"},"nodeType":"YulFunctionCall","src":"1479:12:9"},"nodeType":"YulExpressionStatement","src":"1479:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1452:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1461:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1448:3:9"},"nodeType":"YulFunctionCall","src":"1448:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1473:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1444:3:9"},"nodeType":"YulFunctionCall","src":"1444:32:9"},"nodeType":"YulIf","src":"1441:52:9"},{"nodeType":"YulAssignment","src":"1502:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1531:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1512:18:9"},"nodeType":"YulFunctionCall","src":"1512:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1502:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1397:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1408:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1420:6:9","type":""}],"src":"1361:186:9"},{"body":{"nodeType":"YulBlock","src":"1647:92:9","statements":[{"nodeType":"YulAssignment","src":"1657:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1669:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1680:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1665:3:9"},"nodeType":"YulFunctionCall","src":"1665:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1657:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1699:9:9"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1724:6:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1717:6:9"},"nodeType":"YulFunctionCall","src":"1717:14:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1710:6:9"},"nodeType":"YulFunctionCall","src":"1710:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1692:6:9"},"nodeType":"YulFunctionCall","src":"1692:41:9"},"nodeType":"YulExpressionStatement","src":"1692:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1616:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1627:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1638:4:9","type":""}],"src":"1552:187:9"},{"body":{"nodeType":"YulBlock","src":"1845:125:9","statements":[{"nodeType":"YulAssignment","src":"1855:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1867:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1878:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1863:3:9"},"nodeType":"YulFunctionCall","src":"1863:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1855:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1897:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1912:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1920:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1908:3:9"},"nodeType":"YulFunctionCall","src":"1908:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1890:6:9"},"nodeType":"YulFunctionCall","src":"1890:74:9"},"nodeType":"YulExpressionStatement","src":"1890:74:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1814:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1825:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1836:4:9","type":""}],"src":"1744:226:9"},{"body":{"nodeType":"YulBlock","src":"2045:110:9","statements":[{"body":{"nodeType":"YulBlock","src":"2091:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2100:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2103:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2093:6:9"},"nodeType":"YulFunctionCall","src":"2093:12:9"},"nodeType":"YulExpressionStatement","src":"2093:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2066:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2075:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2062:3:9"},"nodeType":"YulFunctionCall","src":"2062:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2087:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2058:3:9"},"nodeType":"YulFunctionCall","src":"2058:32:9"},"nodeType":"YulIf","src":"2055:52:9"},{"nodeType":"YulAssignment","src":"2116:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2139:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2126:12:9"},"nodeType":"YulFunctionCall","src":"2126:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2116:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2011:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2022:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2034:6:9","type":""}],"src":"1975:180:9"},{"body":{"nodeType":"YulBlock","src":"2192:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2209:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2212:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2202:6:9"},"nodeType":"YulFunctionCall","src":"2202:88:9"},"nodeType":"YulExpressionStatement","src":"2202:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2306:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2309:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2299:6:9"},"nodeType":"YulFunctionCall","src":"2299:15:9"},"nodeType":"YulExpressionStatement","src":"2299:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2330:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2333:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2323:6:9"},"nodeType":"YulFunctionCall","src":"2323:15:9"},"nodeType":"YulExpressionStatement","src":"2323:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2160:184:9"},{"body":{"nodeType":"YulBlock","src":"2394:289:9","statements":[{"nodeType":"YulAssignment","src":"2404:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2420:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2414:5:9"},"nodeType":"YulFunctionCall","src":"2414:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2404:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"2432:117:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2454:6:9"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2470:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"2476:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2466:3:9"},"nodeType":"YulFunctionCall","src":"2466:13:9"},{"kind":"number","nodeType":"YulLiteral","src":"2481:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2462:3:9"},"nodeType":"YulFunctionCall","src":"2462:86:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2450:3:9"},"nodeType":"YulFunctionCall","src":"2450:99:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2436:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2624:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2626:16:9"},"nodeType":"YulFunctionCall","src":"2626:18:9"},"nodeType":"YulExpressionStatement","src":"2626:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2567:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2579:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2564:2:9"},"nodeType":"YulFunctionCall","src":"2564:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2603:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2615:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2600:2:9"},"nodeType":"YulFunctionCall","src":"2600:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2561:2:9"},"nodeType":"YulFunctionCall","src":"2561:62:9"},"nodeType":"YulIf","src":"2558:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2662:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2666:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2655:6:9"},"nodeType":"YulFunctionCall","src":"2655:22:9"},"nodeType":"YulExpressionStatement","src":"2655:22:9"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2374:4:9","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2383:6:9","type":""}],"src":"2349:334:9"},{"body":{"nodeType":"YulBlock","src":"2757:114:9","statements":[{"body":{"nodeType":"YulBlock","src":"2801:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2803:16:9"},"nodeType":"YulFunctionCall","src":"2803:18:9"},"nodeType":"YulExpressionStatement","src":"2803:18:9"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2773:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"2781:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2770:2:9"},"nodeType":"YulFunctionCall","src":"2770:30:9"},"nodeType":"YulIf","src":"2767:56:9"},{"nodeType":"YulAssignment","src":"2832:33:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2848:1:9","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2851:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2844:3:9"},"nodeType":"YulFunctionCall","src":"2844:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"2860:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2840:3:9"},"nodeType":"YulFunctionCall","src":"2840:25:9"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2832:4:9"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2737:6:9","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2748:4:9","type":""}],"src":"2688:183:9"},{"body":{"nodeType":"YulBlock","src":"2940:598:9","statements":[{"body":{"nodeType":"YulBlock","src":"2989:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2998:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3001:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2991:6:9"},"nodeType":"YulFunctionCall","src":"2991:12:9"},"nodeType":"YulExpressionStatement","src":"2991:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2968:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"2976:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:9"},"nodeType":"YulFunctionCall","src":"2964:17:9"},{"name":"end","nodeType":"YulIdentifier","src":"2983:3:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2960:3:9"},"nodeType":"YulFunctionCall","src":"2960:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2953:6:9"},"nodeType":"YulFunctionCall","src":"2953:35:9"},"nodeType":"YulIf","src":"2950:55:9"},{"nodeType":"YulVariableDeclaration","src":"3014:30:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3037:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3024:12:9"},"nodeType":"YulFunctionCall","src":"3024:20:9"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3018:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3053:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3063:4:9","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3057:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3076:71:9","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3143:2:9"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"3103:39:9"},"nodeType":"YulFunctionCall","src":"3103:43:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3087:15:9"},"nodeType":"YulFunctionCall","src":"3087:60:9"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3080:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3156:16:9","value":{"name":"dst","nodeType":"YulIdentifier","src":"3169:3:9"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3160:5:9","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3188:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3193:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3181:6:9"},"nodeType":"YulFunctionCall","src":"3181:15:9"},"nodeType":"YulExpressionStatement","src":"3181:15:9"},{"nodeType":"YulAssignment","src":"3205:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3216:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3221:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3212:3:9"},"nodeType":"YulFunctionCall","src":"3212:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3205:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"3233:46:9","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3255:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3267:1:9","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3270:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3263:3:9"},"nodeType":"YulFunctionCall","src":"3263:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3251:3:9"},"nodeType":"YulFunctionCall","src":"3251:23:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3276:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3247:3:9"},"nodeType":"YulFunctionCall","src":"3247:32:9"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3237:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3307:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3316:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3319:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3309:6:9"},"nodeType":"YulFunctionCall","src":"3309:12:9"},"nodeType":"YulExpressionStatement","src":"3309:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3294:6:9"},{"name":"end","nodeType":"YulIdentifier","src":"3302:3:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3291:2:9"},"nodeType":"YulFunctionCall","src":"3291:15:9"},"nodeType":"YulIf","src":"3288:35:9"},{"nodeType":"YulVariableDeclaration","src":"3332:26:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3347:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3355:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3343:3:9"},"nodeType":"YulFunctionCall","src":"3343:15:9"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3336:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3423:86:9","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3444:3:9"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3462:3:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3449:12:9"},"nodeType":"YulFunctionCall","src":"3449:17:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3437:6:9"},"nodeType":"YulFunctionCall","src":"3437:30:9"},"nodeType":"YulExpressionStatement","src":"3437:30:9"},{"nodeType":"YulAssignment","src":"3480:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3491:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3496:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3487:3:9"},"nodeType":"YulFunctionCall","src":"3487:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3480:3:9"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3378:3:9"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3383:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3375:2:9"},"nodeType":"YulFunctionCall","src":"3375:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3391:23:9","statements":[{"nodeType":"YulAssignment","src":"3393:19:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3404:3:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3409:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3400:3:9"},"nodeType":"YulFunctionCall","src":"3400:12:9"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3393:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"3371:3:9","statements":[]},"src":"3367:142:9"},{"nodeType":"YulAssignment","src":"3518:14:9","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3527:5:9"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3518:5:9"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2914:6:9","type":""},{"name":"end","nodeType":"YulTypedName","src":"2922:3:9","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2930:5:9","type":""}],"src":"2876:662:9"},{"body":{"nodeType":"YulBlock","src":"3756:1295:9","statements":[{"body":{"nodeType":"YulBlock","src":"3803:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3812:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3815:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3805:6:9"},"nodeType":"YulFunctionCall","src":"3805:12:9"},"nodeType":"YulExpressionStatement","src":"3805:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3777:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"3786:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3773:3:9"},"nodeType":"YulFunctionCall","src":"3773:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"3798:3:9","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3769:3:9"},"nodeType":"YulFunctionCall","src":"3769:33:9"},"nodeType":"YulIf","src":"3766:53:9"},{"nodeType":"YulAssignment","src":"3828:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3851:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3838:12:9"},"nodeType":"YulFunctionCall","src":"3838:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3828:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"3870:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3880:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3874:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3891:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3922:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3933:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3918:3:9"},"nodeType":"YulFunctionCall","src":"3918:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3905:12:9"},"nodeType":"YulFunctionCall","src":"3905:32:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3895:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3946:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3956:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3950:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4001:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4013:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4003:6:9"},"nodeType":"YulFunctionCall","src":"4003:12:9"},"nodeType":"YulExpressionStatement","src":"4003:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3989:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"3997:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3986:2:9"},"nodeType":"YulFunctionCall","src":"3986:14:9"},"nodeType":"YulIf","src":"3983:34:9"},{"nodeType":"YulVariableDeclaration","src":"4026:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4040:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"4051:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4036:3:9"},"nodeType":"YulFunctionCall","src":"4036:22:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4030:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4106:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4115:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4118:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4108:6:9"},"nodeType":"YulFunctionCall","src":"4108:12:9"},"nodeType":"YulExpressionStatement","src":"4108:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4085:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"4089:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4081:3:9"},"nodeType":"YulFunctionCall","src":"4081:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4096:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4077:3:9"},"nodeType":"YulFunctionCall","src":"4077:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4070:6:9"},"nodeType":"YulFunctionCall","src":"4070:35:9"},"nodeType":"YulIf","src":"4067:55:9"},{"nodeType":"YulVariableDeclaration","src":"4131:26:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4154:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4141:12:9"},"nodeType":"YulFunctionCall","src":"4141:16:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4135:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4166:71:9","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4233:2:9"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nodeType":"YulIdentifier","src":"4193:39:9"},"nodeType":"YulFunctionCall","src":"4193:43:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4177:15:9"},"nodeType":"YulFunctionCall","src":"4177:60:9"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4170:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4246:16:9","value":{"name":"dst","nodeType":"YulIdentifier","src":"4259:3:9"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"4250:5:9","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4278:3:9"},{"name":"_4","nodeType":"YulIdentifier","src":"4283:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4271:6:9"},"nodeType":"YulFunctionCall","src":"4271:15:9"},"nodeType":"YulExpressionStatement","src":"4271:15:9"},{"nodeType":"YulAssignment","src":"4295:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4306:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4311:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4302:3:9"},"nodeType":"YulFunctionCall","src":"4302:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4295:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"4323:42:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4345:2:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4353:1:9","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"4356:2:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4349:3:9"},"nodeType":"YulFunctionCall","src":"4349:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4341:3:9"},"nodeType":"YulFunctionCall","src":"4341:19:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4362:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4337:3:9"},"nodeType":"YulFunctionCall","src":"4337:28:9"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4327:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4397:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4406:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4409:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4399:6:9"},"nodeType":"YulFunctionCall","src":"4399:12:9"},"nodeType":"YulExpressionStatement","src":"4399:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4380:6:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4388:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4377:2:9"},"nodeType":"YulFunctionCall","src":"4377:19:9"},"nodeType":"YulIf","src":"4374:39:9"},{"nodeType":"YulVariableDeclaration","src":"4422:22:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4437:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4441:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4433:3:9"},"nodeType":"YulFunctionCall","src":"4433:11:9"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4426:3:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4509:86:9","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4530:3:9"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4548:3:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4535:12:9"},"nodeType":"YulFunctionCall","src":"4535:17:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4523:6:9"},"nodeType":"YulFunctionCall","src":"4523:30:9"},"nodeType":"YulExpressionStatement","src":"4523:30:9"},{"nodeType":"YulAssignment","src":"4566:19:9","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4577:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4582:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4573:3:9"},"nodeType":"YulFunctionCall","src":"4573:12:9"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4566:3:9"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4464:3:9"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4469:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4461:2:9"},"nodeType":"YulFunctionCall","src":"4461:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4477:23:9","statements":[{"nodeType":"YulAssignment","src":"4479:19:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4490:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4495:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4486:3:9"},"nodeType":"YulFunctionCall","src":"4486:12:9"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4479:3:9"}]}]},"pre":{"nodeType":"YulBlock","src":"4457:3:9","statements":[]},"src":"4453:142:9"},{"nodeType":"YulAssignment","src":"4604:15:9","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"4614:5:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4604:6:9"}]},{"nodeType":"YulAssignment","src":"4628:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4661:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4672:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4657:3:9"},"nodeType":"YulFunctionCall","src":"4657:18:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4638:18:9"},"nodeType":"YulFunctionCall","src":"4638:38:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4628:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4685:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4718:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4729:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:9"},"nodeType":"YulFunctionCall","src":"4714:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4701:12:9"},"nodeType":"YulFunctionCall","src":"4701:32:9"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4689:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4762:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4771:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4774:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4764:6:9"},"nodeType":"YulFunctionCall","src":"4764:12:9"},"nodeType":"YulExpressionStatement","src":"4764:12:9"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4748:8:9"},{"name":"_2","nodeType":"YulIdentifier","src":"4758:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4745:2:9"},"nodeType":"YulFunctionCall","src":"4745:16:9"},"nodeType":"YulIf","src":"4742:36:9"},{"nodeType":"YulAssignment","src":"4787:73:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4830:9:9"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4841:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4826:3:9"},"nodeType":"YulFunctionCall","src":"4826:24:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4852:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4797:28:9"},"nodeType":"YulFunctionCall","src":"4797:63:9"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4787:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4869:49:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4902:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4913:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4898:3:9"},"nodeType":"YulFunctionCall","src":"4898:19:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4885:12:9"},"nodeType":"YulFunctionCall","src":"4885:33:9"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4873:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4947:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4956:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4959:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4949:6:9"},"nodeType":"YulFunctionCall","src":"4949:12:9"},"nodeType":"YulExpressionStatement","src":"4949:12:9"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4933:8:9"},{"name":"_2","nodeType":"YulIdentifier","src":"4943:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4930:2:9"},"nodeType":"YulFunctionCall","src":"4930:16:9"},"nodeType":"YulIf","src":"4927:36:9"},{"nodeType":"YulAssignment","src":"4972:73:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5015:9:9"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5026:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5011:3:9"},"nodeType":"YulFunctionCall","src":"5011:24:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5037:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4982:28:9"},"nodeType":"YulFunctionCall","src":"4982:63:9"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4972:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3690:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3701:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3713:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3721:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3729:6:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3737:6:9","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3745:6:9","type":""}],"src":"3543:1508:9"},{"body":{"nodeType":"YulBlock","src":"5117:337:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5127:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5147:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5141:5:9"},"nodeType":"YulFunctionCall","src":"5141:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5131:6:9","type":""}]},{"nodeType":"YulAssignment","src":"5162:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"5169:3:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5162:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"5181:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5191:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5185:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5204:28:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5222:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5229:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5218:3:9"},"nodeType":"YulFunctionCall","src":"5218:14:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5208:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5241:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5250:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5245:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5309:120:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5330:3:9"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5341:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5335:5:9"},"nodeType":"YulFunctionCall","src":"5335:13:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5323:6:9"},"nodeType":"YulFunctionCall","src":"5323:26:9"},"nodeType":"YulExpressionStatement","src":"5323:26:9"},{"nodeType":"YulAssignment","src":"5362:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5373:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5378:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5369:3:9"},"nodeType":"YulFunctionCall","src":"5369:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5362:3:9"}]},{"nodeType":"YulAssignment","src":"5394:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5408:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5416:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5404:3:9"},"nodeType":"YulFunctionCall","src":"5404:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5394:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5271:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"5274:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5268:2:9"},"nodeType":"YulFunctionCall","src":"5268:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5282:18:9","statements":[{"nodeType":"YulAssignment","src":"5284:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5293:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"5296:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5289:3:9"},"nodeType":"YulFunctionCall","src":"5289:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5284:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"5264:3:9","statements":[]},"src":"5260:169:9"},{"nodeType":"YulAssignment","src":"5438:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"5445:3:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5438:3:9"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5094:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5101:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5109:3:9","type":""}],"src":"5056:398:9"},{"body":{"nodeType":"YulBlock","src":"5762:287:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5779:3:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5792:2:9","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"5796:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5788:3:9"},"nodeType":"YulFunctionCall","src":"5788:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"5805:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5784:3:9"},"nodeType":"YulFunctionCall","src":"5784:88:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5772:6:9"},"nodeType":"YulFunctionCall","src":"5772:101:9"},"nodeType":"YulExpressionStatement","src":"5772:101:9"},{"nodeType":"YulVariableDeclaration","src":"5882:101:9","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5924:6:9"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5961:6:9"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5973:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"5978:2:9","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5969:3:9"},"nodeType":"YulFunctionCall","src":"5969:12:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5932:28:9"},"nodeType":"YulFunctionCall","src":"5932:50:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5895:28:9"},"nodeType":"YulFunctionCall","src":"5895:88:9"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"5886:5:9","type":""}]},{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"5999:5:9"},{"name":"value3","nodeType":"YulIdentifier","src":"6006:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5992:6:9"},"nodeType":"YulFunctionCall","src":"5992:21:9"},"nodeType":"YulExpressionStatement","src":"5992:21:9"},{"nodeType":"YulAssignment","src":"6022:21:9","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"6033:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"6040:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6029:3:9"},"nodeType":"YulFunctionCall","src":"6029:14:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6022:3:9"}]}]},"name":"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5714:3:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5719:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5727:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5735:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5743:6:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5754:3:9","type":""}],"src":"5459:590:9"},{"body":{"nodeType":"YulBlock","src":"6126:374:9","statements":[{"nodeType":"YulVariableDeclaration","src":"6136:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6156:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6150:5:9"},"nodeType":"YulFunctionCall","src":"6150:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6140:6:9","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6178:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"6183:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6171:6:9"},"nodeType":"YulFunctionCall","src":"6171:19:9"},"nodeType":"YulExpressionStatement","src":"6171:19:9"},{"nodeType":"YulVariableDeclaration","src":"6199:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"6209:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6203:2:9","type":""}]},{"nodeType":"YulAssignment","src":"6222:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6233:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"6238:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6229:3:9"},"nodeType":"YulFunctionCall","src":"6229:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6222:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"6250:28:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6268:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"6275:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6264:3:9"},"nodeType":"YulFunctionCall","src":"6264:14:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6254:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6287:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"6296:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6291:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"6355:120:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6376:3:9"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6387:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6381:5:9"},"nodeType":"YulFunctionCall","src":"6381:13:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6369:6:9"},"nodeType":"YulFunctionCall","src":"6369:26:9"},"nodeType":"YulExpressionStatement","src":"6369:26:9"},{"nodeType":"YulAssignment","src":"6408:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6419:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"6424:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6415:3:9"},"nodeType":"YulFunctionCall","src":"6415:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6408:3:9"}]},{"nodeType":"YulAssignment","src":"6440:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6454:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"6462:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6450:3:9"},"nodeType":"YulFunctionCall","src":"6450:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6440:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6317:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"6320:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6314:2:9"},"nodeType":"YulFunctionCall","src":"6314:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6328:18:9","statements":[{"nodeType":"YulAssignment","src":"6330:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6339:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"6342:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6335:3:9"},"nodeType":"YulFunctionCall","src":"6335:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6330:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"6310:3:9","statements":[]},"src":"6306:169:9"},{"nodeType":"YulAssignment","src":"6484:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"6491:3:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6484:3:9"}]}]},"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6103:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6110:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6118:3:9","type":""}],"src":"6054:446:9"},{"body":{"nodeType":"YulBlock","src":"6790:395:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6807:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6822:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"6830:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6818:3:9"},"nodeType":"YulFunctionCall","src":"6818:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6800:6:9"},"nodeType":"YulFunctionCall","src":"6800:74:9"},"nodeType":"YulExpressionStatement","src":"6800:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6894:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6905:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6890:3:9"},"nodeType":"YulFunctionCall","src":"6890:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"6910:3:9","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6883:6:9"},"nodeType":"YulFunctionCall","src":"6883:31:9"},"nodeType":"YulExpressionStatement","src":"6883:31:9"},{"nodeType":"YulVariableDeclaration","src":"6923:82:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6977:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6989:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7000:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6985:3:9"},"nodeType":"YulFunctionCall","src":"6985:19:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"6937:39:9"},"nodeType":"YulFunctionCall","src":"6937:68:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6927:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7025:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7036:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7021:3:9"},"nodeType":"YulFunctionCall","src":"7021:18:9"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7045:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7053:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7041:3:9"},"nodeType":"YulFunctionCall","src":"7041:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7014:6:9"},"nodeType":"YulFunctionCall","src":"7014:50:9"},"nodeType":"YulExpressionStatement","src":"7014:50:9"},{"nodeType":"YulAssignment","src":"7073:63:9","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7121:6:9"},{"name":"tail_1","nodeType":"YulIdentifier","src":"7129:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"7081:39:9"},"nodeType":"YulFunctionCall","src":"7081:55:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7073:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7156:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7167:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7152:3:9"},"nodeType":"YulFunctionCall","src":"7152:18:9"},{"name":"value3","nodeType":"YulIdentifier","src":"7172:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7145:6:9"},"nodeType":"YulFunctionCall","src":"7145:34:9"},"nodeType":"YulExpressionStatement","src":"7145:34:9"}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6735:9:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6746:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6754:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6762:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6770:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6781:4:9","type":""}],"src":"6505:680:9"},{"body":{"nodeType":"YulBlock","src":"7547:475:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7564:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7579:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"7587:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7575:3:9"},"nodeType":"YulFunctionCall","src":"7575:55:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7557:6:9"},"nodeType":"YulFunctionCall","src":"7557:74:9"},"nodeType":"YulExpressionStatement","src":"7557:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7651:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7662:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7647:3:9"},"nodeType":"YulFunctionCall","src":"7647:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"7667:3:9","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7640:6:9"},"nodeType":"YulFunctionCall","src":"7640:31:9"},"nodeType":"YulExpressionStatement","src":"7640:31:9"},{"nodeType":"YulVariableDeclaration","src":"7680:82:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7734:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7746:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7757:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7742:3:9"},"nodeType":"YulFunctionCall","src":"7742:19:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"7694:39:9"},"nodeType":"YulFunctionCall","src":"7694:68:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"7684:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7782:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7793:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7778:3:9"},"nodeType":"YulFunctionCall","src":"7778:18:9"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7802:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7810:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7798:3:9"},"nodeType":"YulFunctionCall","src":"7798:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7771:6:9"},"nodeType":"YulFunctionCall","src":"7771:50:9"},"nodeType":"YulExpressionStatement","src":"7771:50:9"},{"nodeType":"YulVariableDeclaration","src":"7830:69:9","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7884:6:9"},{"name":"tail_1","nodeType":"YulIdentifier","src":"7892:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"7844:39:9"},"nodeType":"YulFunctionCall","src":"7844:55:9"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"7834:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7919:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7930:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7915:3:9"},"nodeType":"YulFunctionCall","src":"7915:18:9"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7939:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7947:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7935:3:9"},"nodeType":"YulFunctionCall","src":"7935:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7908:6:9"},"nodeType":"YulFunctionCall","src":"7908:50:9"},"nodeType":"YulExpressionStatement","src":"7908:50:9"},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"7974:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"7982:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7967:6:9"},"nodeType":"YulFunctionCall","src":"7967:17:9"},"nodeType":"YulExpressionStatement","src":"7967:17:9"},{"nodeType":"YulAssignment","src":"7993:23:9","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"8005:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"8013:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8001:3:9"},"nodeType":"YulFunctionCall","src":"8001:15:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7993:4:9"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7500:9:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7511:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7519:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7527:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7538:4:9","type":""}],"src":"7190:832:9"},{"body":{"nodeType":"YulBlock","src":"8256:258:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8273:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8284:2:9","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8266:6:9"},"nodeType":"YulFunctionCall","src":"8266:21:9"},"nodeType":"YulExpressionStatement","src":"8266:21:9"},{"nodeType":"YulVariableDeclaration","src":"8296:81:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8350:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8362:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8373:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8358:3:9"},"nodeType":"YulFunctionCall","src":"8358:18:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"8310:39:9"},"nodeType":"YulFunctionCall","src":"8310:67:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8300:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8397:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8408:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8393:3:9"},"nodeType":"YulFunctionCall","src":"8393:18:9"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8417:6:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"8425:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8413:3:9"},"nodeType":"YulFunctionCall","src":"8413:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8386:6:9"},"nodeType":"YulFunctionCall","src":"8386:50:9"},"nodeType":"YulExpressionStatement","src":"8386:50:9"},{"nodeType":"YulAssignment","src":"8445:63:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8493:6:9"},{"name":"tail_1","nodeType":"YulIdentifier","src":"8501:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nodeType":"YulIdentifier","src":"8453:39:9"},"nodeType":"YulFunctionCall","src":"8453:55:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8445:4:9"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8217:9:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8228:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8236:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8247:4:9","type":""}],"src":"8027:487:9"},{"body":{"nodeType":"YulBlock","src":"8648:198:9","statements":[{"nodeType":"YulAssignment","src":"8658:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8670:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8681:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8666:3:9"},"nodeType":"YulFunctionCall","src":"8666:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8658:4:9"}]},{"nodeType":"YulVariableDeclaration","src":"8693:52:9","value":{"kind":"number","nodeType":"YulLiteral","src":"8703:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8697:2:9","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8761:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8776:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"8784:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8772:3:9"},"nodeType":"YulFunctionCall","src":"8772:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8754:6:9"},"nodeType":"YulFunctionCall","src":"8754:34:9"},"nodeType":"YulExpressionStatement","src":"8754:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8808:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8819:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8804:3:9"},"nodeType":"YulFunctionCall","src":"8804:18:9"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8828:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"8836:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8824:3:9"},"nodeType":"YulFunctionCall","src":"8824:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8797:6:9"},"nodeType":"YulFunctionCall","src":"8797:43:9"},"nodeType":"YulExpressionStatement","src":"8797:43:9"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8609:9:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8620:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8628:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8639:4:9","type":""}],"src":"8519:327:9"},{"body":{"nodeType":"YulBlock","src":"8929:199:9","statements":[{"body":{"nodeType":"YulBlock","src":"8975:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8984:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8987:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8977:6:9"},"nodeType":"YulFunctionCall","src":"8977:12:9"},"nodeType":"YulExpressionStatement","src":"8977:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8950:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"8959:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8946:3:9"},"nodeType":"YulFunctionCall","src":"8946:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"8971:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8942:3:9"},"nodeType":"YulFunctionCall","src":"8942:32:9"},"nodeType":"YulIf","src":"8939:52:9"},{"nodeType":"YulVariableDeclaration","src":"9000:29:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9019:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9013:5:9"},"nodeType":"YulFunctionCall","src":"9013:16:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9004:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"9082:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9091:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9094:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9084:6:9"},"nodeType":"YulFunctionCall","src":"9084:12:9"},"nodeType":"YulExpressionStatement","src":"9084:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9051:5:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9072:5:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9065:6:9"},"nodeType":"YulFunctionCall","src":"9065:13:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9058:6:9"},"nodeType":"YulFunctionCall","src":"9058:21:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9048:2:9"},"nodeType":"YulFunctionCall","src":"9048:32:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9041:6:9"},"nodeType":"YulFunctionCall","src":"9041:40:9"},"nodeType":"YulIf","src":"9038:60:9"},{"nodeType":"YulAssignment","src":"9107:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"9117:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9107:6:9"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8895:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8906:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8918:6:9","type":""}],"src":"8851:277:9"},{"body":{"nodeType":"YulBlock","src":"9165:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9182:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9185:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9175:6:9"},"nodeType":"YulFunctionCall","src":"9175:88:9"},"nodeType":"YulExpressionStatement","src":"9175:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9279:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9282:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9272:6:9"},"nodeType":"YulFunctionCall","src":"9272:15:9"},"nodeType":"YulExpressionStatement","src":"9272:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9303:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9306:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9296:6:9"},"nodeType":"YulFunctionCall","src":"9296:15:9"},"nodeType":"YulExpressionStatement","src":"9296:15:9"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9133:184:9"},{"body":{"nodeType":"YulBlock","src":"9369:302:9","statements":[{"body":{"nodeType":"YulBlock","src":"9468:168:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9489:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9492:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9482:6:9"},"nodeType":"YulFunctionCall","src":"9482:88:9"},"nodeType":"YulExpressionStatement","src":"9482:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9590:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9593:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9583:6:9"},"nodeType":"YulFunctionCall","src":"9583:15:9"},"nodeType":"YulExpressionStatement","src":"9583:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9618:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9621:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9611:6:9"},"nodeType":"YulFunctionCall","src":"9611:15:9"},"nodeType":"YulExpressionStatement","src":"9611:15:9"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9385:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"9392:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9382:2:9"},"nodeType":"YulFunctionCall","src":"9382:77:9"},"nodeType":"YulIf","src":"9379:257:9"},{"nodeType":"YulAssignment","src":"9645:20:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9656:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"9663:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9652:3:9"},"nodeType":"YulFunctionCall","src":"9652:13:9"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9645:3:9"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9351:5:9","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9361:3:9","type":""}],"src":"9322:349:9"},{"body":{"nodeType":"YulBlock","src":"9806:201:9","statements":[{"body":{"nodeType":"YulBlock","src":"9844:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9853:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9856:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9846:6:9"},"nodeType":"YulFunctionCall","src":"9846:12:9"},"nodeType":"YulExpressionStatement","src":"9846:12:9"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"9822:10:9"},{"name":"endIndex","nodeType":"YulIdentifier","src":"9834:8:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9819:2:9"},"nodeType":"YulFunctionCall","src":"9819:24:9"},"nodeType":"YulIf","src":"9816:44:9"},{"body":{"nodeType":"YulBlock","src":"9893:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9902:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9905:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9895:6:9"},"nodeType":"YulFunctionCall","src":"9895:12:9"},"nodeType":"YulExpressionStatement","src":"9895:12:9"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"9875:8:9"},{"name":"length","nodeType":"YulIdentifier","src":"9885:6:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9872:2:9"},"nodeType":"YulFunctionCall","src":"9872:20:9"},"nodeType":"YulIf","src":"9869:40:9"},{"nodeType":"YulAssignment","src":"9918:36:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9935:6:9"},{"name":"startIndex","nodeType":"YulIdentifier","src":"9943:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9931:3:9"},"nodeType":"YulFunctionCall","src":"9931:23:9"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"9918:9:9"}]},{"nodeType":"YulAssignment","src":"9963:38:9","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"9980:8:9"},{"name":"startIndex","nodeType":"YulIdentifier","src":"9990:10:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9976:3:9"},"nodeType":"YulFunctionCall","src":"9976:25:9"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"9963:9:9"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9740:6:9","type":""},{"name":"length","nodeType":"YulTypedName","src":"9748:6:9","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"9756:10:9","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"9768:8:9","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"9781:9:9","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"9792:9:9","type":""}],"src":"9676:331:9"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$195__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$254__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value1 := dst_1\n        value2 := abi_decode_address(add(headStart, 64))\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _2) { revert(0, 0) }\n        value4 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        pos := pos\n        let _1 := 0x20\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        let pos_1 := abi_encode_array_uint256_dyn(value2, abi_encode_array_uint256_dyn(value1, add(pos, 20)))\n        mstore(pos_1, value3)\n        end := add(pos_1, 32)\n    }\n    function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        mstore(tail_2, 0)\n        tail := add(tail_2, 32)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value1, tail_1)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"59":[{"length":32,"start":143},{"length":32,"start":347},{"length":32,"start":1206},{"length":32,"start":1268},{"length":32,"start":1580},{"length":32,"start":1716}],"783":[{"length":32,"start":283},{"length":32,"start":697}],"787":[{"length":32,"start":244},{"length":32,"start":912}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c8063572b6c051161005b578063572b6c051461014b578063d1a91ff2146101a8578063e3a0ce09146101b0578063f15e20e7146101d357600080fd5b80632b4c9f161461008d57806331e66e1e146100d95780633a5af339146100ef57806351e75e8b14610116575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100e16101e8565b6040516100d09291906107e0565b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b61013d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100d0565b610198610159366004610856565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b60405190151581526020016100d0565b6100af6101fb565b6101986101be366004610871565b60006020819052908152604090205460ff1681565b6101e66101e1366004610997565b61020a565b005b3660006101f3610454565b915091509091565b600061020561045f565b905090565b6000838383886040516020016102239493929190610ac5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012060008181529283905291205490915060ff16156102b357838383886040517fb21ae00b0000000000000000000000000000000000000000000000000000000081526004016102aa9493929190610b41565b60405180910390fd5b6102de857f000000000000000000000000000000000000000000000000000000000000000083610469565b61031c57838383886040517f843019320000000000000000000000000000000000000000000000000000000081526004016102aa9493929190610b41565b6000818152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb906103c990879087908790600401610b94565b600060405180830381600087803b1580156103e357600080fd5b505af11580156103f7573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16867f8f9c73ccaa2efe63e7eac59937a2aa225b9d0748cbfe666eff28a75e964801a48585604051610444929190610bf1565b60405180910390a3505050505050565b3660006101f361047f565b60006102056105e9565b6000826104768584610730565b14949350505050565b366000333214806104905750601836105b1561049e5750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806105d3575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190610c1f565b156105e0576101f361077d565b50600091369150565b6000333214806105f95750601836105b1561060357503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061071f57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190610c1f565b1561072957919050565b3391505090565b600081815b8451811015610775576107618286838151811061075457610754610c41565b60200260200101516107ae565b91508061076d81610c70565b915050610735565b509392505050565b3660006101f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481610ccf565b60008183106107ca5760008281526020849052604090206107d9565b60008381526020839052604090205b9392505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461085157600080fd5b919050565b60006020828403121561086857600080fd5b6107d98261082d565b60006020828403121561088357600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109005761090061088a565b604052919050565b600067ffffffffffffffff8211156109225761092261088a565b5060051b60200190565b600082601f83011261093d57600080fd5b8135602061095261094d83610908565b6108b9565b82815260059290921b8401810191818101908684111561097157600080fd5b8286015b8481101561098c5780358352918301918301610975565b509695505050505050565b600080600080600060a086880312156109af57600080fd5b8535945060208087013567ffffffffffffffff808211156109cf57600080fd5b818901915089601f8301126109e357600080fd5b81356109f161094d82610908565b81815260059190911b8301840190848101908c831115610a1057600080fd5b938501935b82851015610a2e57843582529385019390850190610a15565b9850610a3f91505060408a0161082d565b95506060890135925080831115610a5557600080fd5b610a618a848b0161092c565b94506080890135925080831115610a7757600080fd5b5050610a858882890161092c565b9150509295509295909350565b60008151602080840160005b83811015610aba57815187529582019590820190600101610a9e565b509495945050505050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1681526000610b05610aff6014840187610a92565b85610a92565b92835250506020019392505050565b805180835260209283019260009190808401838315610aba57815187529582019590820190600101610a9e565b73ffffffffffffffffffffffffffffffffffffffff85168152608060208201526000610b706080830186610b14565b8281036040840152610b828186610b14565b91505082606083015295945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152608060208201526000610bc36080830185610b14565b8281036040840152610bd58185610b14565b8381036060909401939093525050600081526020019392505050565b604081526000610c046040830185610b14565b8281036020840152610c168185610b14565b95945050505050565b600060208284031215610c3157600080fd5b815180151581146107d957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cc8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60008085851115610cdf57600080fd5b83861115610cec57600080fd5b505082019391909203915056fea2646970667358221220e51ee95e59b480e58fedc0ded872ea2add361b07da462d089cd436f71e64104964736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xF15E20E7 EQ PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE1 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD0 SWAP3 SWAP2 SWAP1 PUSH2 0x7E0 JUMP JUMPDEST PUSH2 0xAF PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x13D PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD0 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD0 JUMP JUMPDEST PUSH2 0xAF PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x198 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x871 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1E6 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x20A JUMP JUMPDEST STOP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x1F3 PUSH2 0x454 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205 PUSH2 0x45F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x223 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x2B3 JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0xB21AE00B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DE DUP6 PUSH32 0x0 DUP4 PUSH2 0x469 JUMP JUMPDEST PUSH2 0x31C JUMPI DUP4 DUP4 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH32 0x8430193200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x3C9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x8F9C73CCAA2EFE63E7EAC59937A2AA225B9D0748CBFE666EFF28A75E964801A4 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x444 SWAP3 SWAP2 SWAP1 PUSH2 0xBF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x1F3 PUSH2 0x47F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x476 DUP6 DUP5 PUSH2 0x730 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x490 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x49E JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x5D3 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D3 SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST ISZERO PUSH2 0x5E0 JUMPI PUSH2 0x1F3 PUSH2 0x77D JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x5F9 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x603 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x71F JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71F SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST ISZERO PUSH2 0x729 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x775 JUMPI PUSH2 0x761 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7AE JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x76D DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x735 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x1F3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0xCCF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x7CA JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x7D9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D9 DUP3 PUSH2 0x82D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x900 JUMPI PUSH2 0x900 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x922 JUMPI PUSH2 0x922 PUSH2 0x88A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x93D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x952 PUSH2 0x94D DUP4 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x8B9 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x98C JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x975 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x9CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9F1 PUSH2 0x94D DUP3 PUSH2 0x908 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0xA10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xA2E JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0xA15 JUMP JUMPDEST SWAP9 POP PUSH2 0xA3F SWAP2 POP POP PUSH1 0x40 DUP11 ADD PUSH2 0x82D JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA61 DUP11 DUP5 DUP12 ADD PUSH2 0x92C JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0xA77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0xA85 DUP9 DUP3 DUP10 ADD PUSH2 0x92C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP6 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xB05 PUSH2 0xAFF PUSH1 0x14 DUP5 ADD DUP8 PUSH2 0xA92 JUMP JUMPDEST DUP6 PUSH2 0xA92 JUMP JUMPDEST SWAP3 DUP4 MSTORE POP POP PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 PUSH1 0x0 SWAP2 SWAP1 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0xABA JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xB70 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0xB14 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xB82 DUP2 DUP7 PUSH2 0xB14 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xBC3 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xB14 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xBD5 DUP2 DUP6 PUSH2 0xB14 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC04 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xB14 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC16 DUP2 DUP6 PUSH2 0xB14 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xCC8 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0xCDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0xCEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0x1E 0xE9 0x5E MSIZE 0xB4 DUP1 0xE5 DUP16 0xED 0xC0 0xDE 0xD8 PUSH19 0xEA2ADD361B07DA462D089CD436F71E64104964 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"384:594:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;727:114:0;816:18;727:114;;;216:42:9;204:55;;;186:74;;174:2;159:18;727:114:0;;;;;;;;882:94:8;;;:::i;:::-;;;;;;;;:::i;1359:49:7:-;;;;;1254:36;;;;;;;;1124:25:9;;;1112:2;1097:18;1254:36:7;978:177:9;876:157:0;;;;;;:::i;:::-;1007:18;986:40;;;;;;;;876:157;;;;1717:14:9;;1710:22;1692:41;;1680:2;1665:18;876:157:0;1552:187:9;675:91:8;;;:::i;1158:43:7:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3578:575;;;;;;:::i;:::-;;:::i;:::-;;882:94:8;926:14;;959:10;:8;:10::i;:::-;952:17;;;;882:94;;:::o;675:91::-;721:7;747:12;:10;:12::i;:::-;740:19;;675:91;:::o;3578:575:7:-;3719:12;3761:9;3772:3;3777:6;3785:7;3744:49;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;3734:60;;3744:49;3734:60;;;;3809:11;:17;;;;;;;;;;3734:60;;-1:-1:-1;3809:17:7;;3805:77;;;3850:9;3861:3;3866:6;3874:7;3835:47;;;;;;;;;;;;;;:::i;:::-;;;;;;;;3805:77;3897:31;:5;3910:11;3923:4;3897:12;:31::i;:::-;3892:90;;3950:9;3961:3;3966:6;3974:7;3937:45;;;;;;;;;;;;;;:::i;3892:90::-;3993:11;:17;;;;;;;;;;;;:24;;;;4013:4;3993:24;;;4027:57;;;;:29;:15;:29;;;;:57;;4057:9;;4068:3;;4073:6;;4027:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4123:9;4100:46;;4114:7;4100:46;4134:3;4139:6;4100:46;;;;;;;:::i;:::-;;;;;;;;3709:444;3578:575;;;;;:::o;2793:169::-;2883:14;;2916:39;:37;:39::i;2572:166::-;2664:7;2690:41;:39;:41::i;1156:184:6:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:6:o;1638:733:1:-;1689:14;;1906:10;1920:9;1906:23;;:47;;-1:-1:-1;1951:2:1;1933:8;:20;1906:47;1902:93;;;-1:-1:-1;1976:8:1;;;;-1:-1:-1;1638:733:1:o;1902:93::-;2156:10;:41;2178:18;2156:41;;;:124;;-1:-1:-1;2201:38:1;:18;:38;;465:14:4;461:23;;448:37;444:2;440:46;2201:79:1;;;;;;;;;;8703:42:9;8772:15;;;2201:79:1;;;8754:34:9;2269:10:1;8804:18:9;;;8797:43;8666:18;;2201:79:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2152:187;;;2303:25;:23;:25::i;2152:187::-;-1:-1:-1;2356:8:1;;;;-1:-1:-1;1638:733:1:o;781:743::-;834:7;1044:10;1058:9;1044:23;;:47;;-1:-1:-1;1089:2:1;1071:8;:20;1044:47;1040:95;;;-1:-1:-1;1114:10:1;;781:743::o;1040:95::-;461:23:4;465:14;461:23;448:37;444:2;440:46;1369:18:1;1347:41;;:10;:41;;:103;;-1:-1:-1;1392:58:1;;;;;:38;8772:15:9;;;1392:58:1;;;8754:34:9;1439:10:1;8804:18:9;;;8797:43;1392:18:1;:38;;;;8666:18:9;;1392:58:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1343:147;;;1473:6;781:743;-1:-1:-1;781:743:1:o;1343:147::-;1507:10;1500:17;;;781:743;:::o;1994:290:6:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:6;;;;:::i;:::-;;;;2133:116;;;-1:-1:-1;2265:12:6;1994:290;-1:-1:-1;;;1994:290:6:o;615:152:4:-;657:19;;719:31;729:20;;;657:19;;;719:31;:::i;8879:147:6:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:6:o;271:447:9:-;428:2;417:9;410:21;467:6;462:2;451:9;447:18;440:34;524:6;516;511:2;500:9;496:18;483:48;580:1;551:22;;;575:2;547:31;;;540:42;;;;634:2;622:15;;;639:66;618:88;603:104;599:113;;271:447;-1:-1:-1;271:447:9:o;1160:196::-;1228:20;;1288:42;1277:54;;1267:65;;1257:93;;1346:1;1343;1336:12;1257:93;1160:196;;;:::o;1361:186::-;1420:6;1473:2;1461:9;1452:7;1448:23;1444:32;1441:52;;;1489:1;1486;1479:12;1441:52;1512:29;1531:9;1512:29;:::i;1975:180::-;2034:6;2087:2;2075:9;2066:7;2062:23;2058:32;2055:52;;;2103:1;2100;2093:12;2055:52;-1:-1:-1;2126:23:9;;1975:180;-1:-1:-1;1975:180:9:o;2160:184::-;2212:77;2209:1;2202:88;2309:4;2306:1;2299:15;2333:4;2330:1;2323:15;2349:334;2420:2;2414:9;2476:2;2466:13;;2481:66;2462:86;2450:99;;2579:18;2564:34;;2600:22;;;2561:62;2558:88;;;2626:18;;:::i;:::-;2662:2;2655:22;2349:334;;-1:-1:-1;2349:334:9:o;2688:183::-;2748:4;2781:18;2773:6;2770:30;2767:56;;;2803:18;;:::i;:::-;-1:-1:-1;2848:1:9;2844:14;2860:4;2840:25;;2688:183::o;2876:662::-;2930:5;2983:3;2976:4;2968:6;2964:17;2960:27;2950:55;;3001:1;2998;2991:12;2950:55;3037:6;3024:20;3063:4;3087:60;3103:43;3143:2;3103:43;:::i;:::-;3087:60;:::i;:::-;3181:15;;;3267:1;3263:10;;;;3251:23;;3247:32;;;3212:12;;;;3291:15;;;3288:35;;;3319:1;3316;3309:12;3288:35;3355:2;3347:6;3343:15;3367:142;3383:6;3378:3;3375:15;3367:142;;;3449:17;;3437:30;;3487:12;;;;3400;;3367:142;;;-1:-1:-1;3527:5:9;2876:662;-1:-1:-1;;;;;;2876:662:9:o;3543:1508::-;3713:6;3721;3729;3737;3745;3798:3;3786:9;3777:7;3773:23;3769:33;3766:53;;;3815:1;3812;3805:12;3766:53;3851:9;3838:23;3828:33;;3880:2;3933;3922:9;3918:18;3905:32;3956:18;3997:2;3989:6;3986:14;3983:34;;;4013:1;4010;4003:12;3983:34;4051:6;4040:9;4036:22;4026:32;;4096:7;4089:4;4085:2;4081:13;4077:27;4067:55;;4118:1;4115;4108:12;4067:55;4154:2;4141:16;4177:60;4193:43;4233:2;4193:43;:::i;4177:60::-;4271:15;;;4353:1;4349:10;;;;4341:19;;4337:28;;;4302:12;;;;4377:19;;;4374:39;;;4409:1;4406;4399:12;4374:39;4433:11;;;;4453:142;4469:6;4464:3;4461:15;4453:142;;;4535:17;;4523:30;;4486:12;;;;4573;;;;4453:142;;;4614:5;-1:-1:-1;4638:38:9;;-1:-1:-1;;4672:2:9;4657:18;;4638:38;:::i;:::-;4628:48;;4729:2;4718:9;4714:18;4701:32;4685:48;;4758:2;4748:8;4745:16;4742:36;;;4774:1;4771;4764:12;4742:36;4797:63;4852:7;4841:8;4830:9;4826:24;4797:63;:::i;:::-;4787:73;;4913:3;4902:9;4898:19;4885:33;4869:49;;4943:2;4933:8;4930:16;4927:36;;;4959:1;4956;4949:12;4927:36;;;4982:63;5037:7;5026:8;5015:9;5011:24;4982:63;:::i;:::-;4972:73;;;3543:1508;;;;;;;;:::o;5056:398::-;5109:3;5147:5;5141:12;5191:4;5229:2;5222:5;5218:14;5250:1;5260:169;5274:6;5271:1;5268:13;5260:169;;;5335:13;;5323:26;;5369:12;;;;5404:15;;;;5296:1;5289:9;5260:169;;;-1:-1:-1;5445:3:9;;5056:398;-1:-1:-1;;;;;5056:398:9:o;5459:590::-;5805:66;5796:6;5792:2;5788:15;5784:88;5779:3;5772:101;5754:3;5895:88;5932:50;5978:2;5973:3;5969:12;5961:6;5932:50;:::i;:::-;5924:6;5895:88;:::i;:::-;5992:21;;;-1:-1:-1;;6040:2:9;6029:14;;5459:590;-1:-1:-1;;;5459:590:9:o;6054:446::-;6150:12;;6171:19;;;6209:4;6229:12;;;;6118:3;;6150:12;6264:14;;;6118:3;6314:13;;6306:169;;6381:13;;6369:26;;6415:12;;;;6450:15;;;;6342:1;6335:9;6306:169;;6505:680;6830:42;6822:6;6818:55;6807:9;6800:74;6910:3;6905:2;6894:9;6890:18;6883:31;6781:4;6937:68;7000:3;6989:9;6985:19;6977:6;6937:68;:::i;:::-;7053:9;7045:6;7041:22;7036:2;7025:9;7021:18;7014:50;7081:55;7129:6;7121;7081:55;:::i;:::-;7073:63;;;7172:6;7167:2;7156:9;7152:18;7145:34;6505:680;;;;;;;:::o;7190:832::-;7587:42;7579:6;7575:55;7564:9;7557:74;7667:3;7662:2;7651:9;7647:18;7640:31;7538:4;7694:68;7757:3;7746:9;7742:19;7734:6;7694:68;:::i;:::-;7810:9;7802:6;7798:22;7793:2;7782:9;7778:18;7771:50;7844:55;7892:6;7884;7844:55;:::i;:::-;7935:22;;;7930:2;7915:18;;;7908:50;;;;-1:-1:-1;;7982:1:9;7967:17;;8013:2;8001:15;;7190:832;-1:-1:-1;;;7190:832:9:o;8027:487::-;8284:2;8273:9;8266:21;8247:4;8310:67;8373:2;8362:9;8358:18;8350:6;8310:67;:::i;:::-;8425:9;8417:6;8413:22;8408:2;8397:9;8393:18;8386:50;8453:55;8501:6;8493;8453:55;:::i;:::-;8445:63;8027:487;-1:-1:-1;;;;;8027:487:9:o;8851:277::-;8918:6;8971:2;8959:9;8950:7;8946:23;8942:32;8939:52;;;8987:1;8984;8977:12;8939:52;9019:9;9013:16;9072:5;9065:13;9058:21;9051:5;9048:32;9038:60;;9094:1;9091;9084:12;9133:184;9185:77;9182:1;9175:88;9282:4;9279:1;9272:15;9306:4;9303:1;9296:15;9322:349;9361:3;9392:66;9385:5;9382:77;9379:257;;9492:77;9489:1;9482:88;9593:4;9590:1;9583:15;9621:4;9618:1;9611:15;9379:257;-1:-1:-1;9663:1:9;9652:13;;9322:349::o;9676:331::-;9781:9;9792;9834:8;9822:10;9819:24;9816:44;;;9856:1;9853;9846:12;9816:44;9885:6;9875:8;9872:20;9869:40;;;9905:1;9902;9895:12;9869:40;-1:-1:-1;;9931:23:9;;;9976:25;;;;;-1:-1:-1;9676:331:9:o"},"gasEstimates":{"creation":{"codeDepositCost":"675000","executionCost":"infinite","totalCost":"infinite"},"external":{"MERKLE_ROOT()":"infinite","REWARD_CONTRACT()":"infinite","__msgData()":"infinite","__msgSender()":"infinite","claim(bytes32,bytes32[],address,uint256[],uint256[])":"infinite","claimStatus(bytes32)":"2497","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite"}},"methodIdentifiers":{"MERKLE_ROOT()":"51e75e8b","REWARD_CONTRACT()":"3a5af339","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","claim(bytes32,bytes32[],address,uint256[],uint256[])":"f15e20e7","claimStatus(bytes32)":"e3a0ce09","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"claim(bytes32,bytes32[],address,uint256[],uint256[])\":{\"details\":\"Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.Throws if the claim has already been claimed.Throws if the proof is invalid.Throws if the claim is invalid.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"ids\":\"The array of token IDs to claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The address of the recipient.\",\"values\":\"The array of token values to claim.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256[],uint256[],bytes32)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"InvalidProof(address,uint256[],uint256[],bytes32)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}]},\"events\":{\"PayoutClaimed(bytes32,address,uint256[],uint256[])\":{\"notice\":\"Event emitted when a payout is claimed.\"}},\"kind\":\"user\",\"methods\":{\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root of the claim.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract interface.\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"claim(bytes32,bytes32[],address,uint256[],uint256[])\":{\"notice\":\"Allows eligible users to claim their rewards using a Merkle proof.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping to store claim status to prevent double claiming.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol\":\"AnichessERC1155MerkleClaimMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n/**\\n * @title Anichess The Missing Orbs Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n * @notice This contract uses a Merkle Tree to allow users to claim tokens if they possess a valid proof.\\n */\\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice Mapping to store claim status to prevent double claiming.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice The Merkle root of the claim.\\n    bytes32 public immutable MERKLE_ROOT;\\n    /// @notice The ERC1155Mintable reward contract interface.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice Event emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256[] ids, uint256[] values);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, bytes32 epochId);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, bytes32 epochId);\\n\\n    /**\\n     * @dev Initializes the contract by setting the reward token contract and the forwarder registry.\\n     * @param merkleRoot The Merkle root to use for the claims.\\n     * @param rewardContract The ERC1155Mintable token contract address.\\n     * @param forwarderRegistry The address of the forwarder registry contract.\\n     */\\n    constructor(\\n        bytes32 merkleRoot,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) {\\n        MERKLE_ROOT = merkleRoot;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Allows eligible users to claim their rewards using a Merkle proof.\\n     * @dev Claims the payout based on the proof provided, marks it as claimed, and mints the tokens.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The address of the recipient.\\n     * @param ids The array of token IDs to claim.\\n     * @param values The array of token values to claim.\\n     * @dev Throws if the claim has already been claimed.\\n     * @dev Throws if the proof is invalid.\\n     * @dev Throws if the claim is invalid.\\n     */\\n    function claim(bytes32 epochId, bytes32[] memory proof, address recipient, uint256[] memory ids, uint256[] memory values) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, ids, values, epochId));\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(recipient, ids, values, epochId);\\n        if (!proof.verify(MERKLE_ROOT, leaf)) revert InvalidProof(recipient, ids, values, epochId);\\n\\n        claimStatus[leaf] = true;\\n        REWARD_CONTRACT.safeBatchMint(recipient, ids, values, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xc8a33e0f1e42801b2669d826cecacd809a29652ed6f1eb1d2ab6ccc26ca0ba71\",\"license\":\"MIT\"},\"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {AnichessERC1155MerkleClaim} from \\\"../../merkleClaim/AnichessERC1155MerkleClaim.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract AnichessERC1155MerkleClaimMock is AnichessERC1155MerkleClaim {\\n    constructor(\\n        bytes32 merkleRoot,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) AnichessERC1155MerkleClaim(merkleRoot, rewardContract, forwarderRegistry) {}\\n\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x0f715a13a0cc956d68d4b979f64a2477cd9671e45efc50e4a1cfc2380cae84a0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"claimStatus","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"errors":{"AlreadyClaimed(address,uint256[],uint256[],bytes32)":[{"notice":"Error thrown when the payout has already been claimed."}],"InvalidProof(address,uint256[],uint256[],bytes32)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}]},"events":{"PayoutClaimed(bytes32,address,uint256[],uint256[])":{"notice":"Event emitted when a payout is claimed."}},"kind":"user","methods":{"MERKLE_ROOT()":{"notice":"The Merkle root of the claim."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract interface."},"__msgData()":{"notice":"Internal function to access the current msg.data."},"claim(bytes32,bytes32[],address,uint256[],uint256[])":{"notice":"Allows eligible users to claim their rewards using a Merkle proof."},"claimStatus(bytes32)":{"notice":"Mapping to store claim status to prevent double claiming."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}}}}}