{"id":"177a77b13e306c854c86c945aeb0daed","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/burn/OrbsBurnPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {ERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title OrbsBurnPool Contract\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\n */\ncontract OrbsBurnPool is ERC1155TokenReceiver {\n    using MerkleProof for bytes32[];\n\n    /// @notice The denominator for the multiplier.\n    uint256 internal constant _DENOMINATOR = 10_000;\n\n    /// @notice The token ID of RoC for setting the token multiplier.\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\n\n    /// @notice The token weights for calculating Ash.\n    uint256 public immutable BURN_WEIGHT_TOKEN_1; \n    uint256 public immutable BURN_WEIGHT_TOKEN_2;\n    uint256 public immutable BURN_WEIGHT_TOKEN_3;\n    uint256 public immutable BURN_WEIGHT_TOKEN_4;\n    uint256 public immutable BURN_WEIGHT_TOKEN_5;\n    uint256 public immutable BURN_WEIGHT_TOKEN_6;\n    uint256 public immutable BURN_WEIGHT_TOKEN_7;\n\n    /// @notice The Riddle Of Chaos multiplier.\n    uint256 public constant ROC_MULTIPLIER = 2;\n\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\n    IERC1155Burnable public immutable ORB_OF_POWER;\n\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\n    IERC1155Burnable public immutable MISSING_ORB;\n\n    /// @notice The initial time of the contract.\n    uint256 public immutable INITIAL_TIME;\n\n    /// @notice The duration of each cycle.\n    uint256 public immutable CYCLE_DURATION;\n\n    /// @notice The maximum cycle.\n    uint256 public immutable MAX_CYCLE;\n\n    /// @notice The Merkle root for setting the puzzleMultiplier.\n    bytes32 public immutable MERKLE_ROOT;\n\n    /// @notice The total amount of ASH generated in each cycle.\n    mapping(uint256 => uint256) public totalAshPerCycle;\n\n    /// @notice The total amount of ASH generated by each user in each cycle.\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\n\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\n    mapping(address => uint256) public orbMultipliers;\n\n    /// @notice Event emitted when ASH are generated.\n    event GenerateAsh(\n        address indexed burner,\n        uint256 indexed cycle,\n        uint256[] ids,\n        uint256[] values,\n        uint256 ash,\n        uint256 totalAsh,\n        uint256 orbMultiplier\n    );\n\n    /// @notice Event emitted when the multiplier info is updated.\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\n\n    /// @notice Error thrown when the token ID is invalid.\n    error InvalidTokenId(address token, uint256 tokenId);\n\n    /// @notice Error thrown when the token weight is invalid.\n    error InvalidTokenBurnWeight(uint256 weight);\n    \n    /// @notice Error thrown when the token is not approved.\n    error InvalidTokenAddress(address token);\n\n    /// @notice Error thrown when the token amount is invalid.\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\n\n    /// @notice Error thrown when the cycle is invalid.\n    error InvalidCycle(uint256 cycle);\n\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\n    error AlreadySetROCMultiplier(address wallet);\n\n    /// @notice Error thrown when the proof is invalid.\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\n\n    /// @notice Error thrown when the cycle duration is invalid.\n    error ZeroCycleDuration();\n\n    /// @notice Error thrown when the cycle is invalid.\n    error ZeroMaxCycle();\n\n    /**\n     * @notice Constructor for the OrbsBurnPool contract.\n     * @param initialTime The initial time of the contract.\n     * @param cycleDuration The duration of each cycle.\n     * @param maxCycle The maximum cycle.\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n     * @dev Throws if the cycle duration is zero.\n     * @dev Throws if the max cycle is zero.\n     */\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        bytes32 merkleRoot,\n        uint256[7] memory tokenBurnWeights,\n        IERC1155Burnable orbOfPower,\n        IERC1155Burnable missingOrb\n    ) {\n        INITIAL_TIME = initialTime;\n\n        if (cycleDuration == 0) {\n            revert ZeroCycleDuration();\n        }\n        CYCLE_DURATION = cycleDuration;\n\n        if (maxCycle == 0) {\n            revert ZeroMaxCycle();\n        }\n\n        for (uint256 i = 0; i < tokenBurnWeights.length; i++) {\n            if (tokenBurnWeights[i] == 0) {\n                revert InvalidTokenBurnWeight(tokenBurnWeights[i]);\n            }\n\n            if (i == 0) {\n                BURN_WEIGHT_TOKEN_1 = tokenBurnWeights[i];\n            } else if (i == 1) {\n                BURN_WEIGHT_TOKEN_2 = tokenBurnWeights[i];\n            } else if (i == 2) {\n                BURN_WEIGHT_TOKEN_3 = tokenBurnWeights[i];\n            } else if (i == 3) {\n                BURN_WEIGHT_TOKEN_4 = tokenBurnWeights[i];\n            } else if (i == 4) {\n                BURN_WEIGHT_TOKEN_5 = tokenBurnWeights[i];\n            } else if (i == 5) {\n                BURN_WEIGHT_TOKEN_6 = tokenBurnWeights[i];\n            } else {\n                BURN_WEIGHT_TOKEN_7 = tokenBurnWeights[i];\n            }\n        }\n\n        MAX_CYCLE = maxCycle;\n        MERKLE_ROOT = merkleRoot;\n        ORB_OF_POWER = orbOfPower;\n        MISSING_ORB = missingOrb;\n    }\n\n    /**\n     * @notice Get the current cycle.\n     * @return cycle The current cycle.\n     */\n    function currentCycle() public view returns (uint256) {\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\n    }\n\n    /**\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n     * @param from The wallet address.\n     * @param id The token ID.\n     * @param value The token value.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     * @dev Throws if the token multiplier has already been set.\n     */\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\n        if (msg.sender != address(MISSING_ORB)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n        if (id != MISSING_ORB_TOKEN_ID) {\n            revert InvalidTokenId(msg.sender, id);\n        }\n\n        if (value != 1) {\n            revert InvalidTokenValue(msg.sender, id, value);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        uint256 curOrbMultiplier = orbMultipliers[from];\n        if (uint128(curOrbMultiplier) > 0) {\n            revert AlreadySetROCMultiplier(from);\n        }\n\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\n\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\n        if (data.length > 0) {\n            if ((curOrbMultiplier >> 128) == 0) {\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\n                }\n\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\n            }\n        }\n        orbMultipliers[from] = newOrbMultiplier;\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\n\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @notice Burn the tokens and calculate the ash.\n     * @param from The wallet address.\n     * @param ids The token IDs to burn.\n     * @param values The amount of tokens to burn.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        if (msg.sender != address(ORB_OF_POWER)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\n\n        uint256 ashGenerated = 0;\n        for (uint256 i = 0; i < ids.length; i++) {\n            if (values[i] == 0) {\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\n            }\n\n            if (ids[i] == 1) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\n            } else if (ids[i] == 2) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\n            } else if (ids[i] == 3) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\n            } else if (ids[i] == 4) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\n            } else if (ids[i] == 5) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\n            } else if (ids[i] == 6) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\n            } else if (ids[i] == 7) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\n            } else {\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\n            }\n        }\n\n        address userAddr = from;\n\n        // boost the total ash based on the orbMultipliers\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\n\n        if (data.length > 0) {\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n            if ((curOrbMultiplier >> 128) == 0) {\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\n                }\n\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\n                orbMultipliers[userAddr] = newOrbMultiplier;\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\n                curOrbMultiplier = newOrbMultiplier;\n            }\n\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n        } else {\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\n            if (puzzleGameMultiplierNumerator > 0) {\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n            }\n        }\n\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\n        if (rocMultiplier > 0) {\n            ashGenerated *= rocMultiplier;\n        }\n\n        // update the user status\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\n        // update the pool status\n        totalAshPerCycle[cycle] += ashGenerated;\n\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\n\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[46],"InterfaceDetection":[29],"InterfaceDetectionStorage":[147]},"id":30,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":30,"sourceUnit":47,"src":"58:49:0","symbolAliases":[{"foreign":{"id":2,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"66:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":30,"sourceUnit":148,"src":"108:84:0","symbolAliases":[{"foreign":{"id":4,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"116:25:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"IERC165","nameLocations":["425:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"425:7:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"425:7:0"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"194:191:0","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":29,"linearizedBaseContracts":[29,46],"name":"InterfaceDetection","nameLocation":"403:18:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":12,"libraryName":{"id":9,"name":"InterfaceDetectionStorage","nameLocations":["445:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"445:25:0"},"nodeType":"UsingForDirective","src":"439:69:0","typeName":{"id":11,"nodeType":"UserDefinedTypeName","pathNode":{"id":10,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:0","501:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"475:32:0"},"referencedDeclaration":57,"src":"475:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[45],"body":{"id":27,"nodeType":"Block","src":"618:89:0","statements":[{"expression":{"arguments":[{"id":24,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"688:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":20,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"635:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$147_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":146,"src":"635:32:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":22,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":23,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":134,"src":"635:52:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$57_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":19,"id":26,"nodeType":"Return","src":"628:72:0"}]},"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"514:23:0","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":28,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:0","nodeType":"VariableDeclaration","scope":28,"src":"569:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":14,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":28,"src":"612:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":17,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:0"},"scope":29,"src":"542:165:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":30,"src":"385:324:0","usedErrors":[],"usedEvents":[]}],"src":"32:678:0"},"id":0},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[34]},"id":35,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":31,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"58:68:1","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":34,"name":"IllegalInterfaceId","nameLocation":"132:18:1","nodeType":"ErrorDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"150:2:1"},"src":"126:27:1"}],"src":"32:122:1"},"id":1},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[46]},"id":47,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":36,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"58:173:2","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":46,"linearizedBaseContracts":[46],"name":"IERC165","nameLocation":"241:7:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"255:340:2","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":45,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:2","nodeType":"FunctionDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:2","nodeType":"VariableDeclaration","scope":45,"src":"627:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":39,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"supported","nameLocation":"675:9:2","nodeType":"VariableDeclaration","scope":45,"src":"670:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:2"},"scope":46,"src":"600:86:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":47,"src":"231:457:2","usedErrors":[],"usedEvents":[]}],"src":"32:657:2"},"id":2},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[46],"IllegalInterfaceId":[34],"InterfaceDetectionStorage":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":48,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":50,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":35,"src":"58:76:3","symbolAliases":[{"foreign":{"id":49,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"66:18:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":52,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":47,"src":"135:52:3","symbolAliases":[{"foreign":{"id":51,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"143:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":147,"linearizedBaseContracts":[147],"name":"InterfaceDetectionStorage","nameLocation":"197:25:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":57,"members":[{"constant":false,"id":56,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:3","nodeType":"VariableDeclaration","scope":57,"src":"253:43:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":55,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":53,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":54,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:3","nodeType":"StructDefinition","scope":147,"src":"229:74:3","visibility":"public"},{"constant":true,"id":70,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:3","nodeType":"VariableDeclaration","scope":147,"src":"309:136:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":58,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":68,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":63,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:3","typeDescriptions":{}}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":67,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":60,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":59,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:3","typeDescriptions":{}}},"id":69,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":73,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:3","nodeType":"VariableDeclaration","scope":147,"src":"452:58:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":71,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":72,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:3","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":99,"nodeType":"Block","src":"867:141:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":84,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"881:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":85,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"896:20:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":90,"nodeType":"IfStatement","src":"877:68:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"925:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"RevertStatement","src":"918:27:3"}},{"expression":{"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":91,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"955:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":94,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:3","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":56,"src":"955:21:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":95,"indexExpression":{"id":93,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"977:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":96,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"992:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":98,"nodeType":"ExpressionStatement","src":"955:46:3"}]},"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"517:251:3","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":100,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:3","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"s","nameLocation":"819:1:3","nodeType":"VariableDeclaration","scope":100,"src":"804:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"Layout","nameLocations":["804:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"804:6:3"},"referencedDeclaration":57,"src":"804:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:3","nodeType":"VariableDeclaration","scope":100,"src":"822:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":78,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"supported","nameLocation":"847:9:3","nodeType":"VariableDeclaration","scope":100,"src":"842:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:3"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"867:0:3"},"scope":147,"src":"773:235:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":133,"nodeType":"Block","src":"1463:236:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":111,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1477:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":112,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"1492:20:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":117,"nodeType":"IfStatement","src":"1473:78:3","trueBody":{"id":116,"nodeType":"Block","src":"1514:37:3","statements":[{"expression":{"hexValue":"66616c7365","id":114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":110,"id":115,"nodeType":"Return","src":"1528:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":118,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1564:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":120,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"1584:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$46_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$46_$","typeString":"type(contract IERC165)"}],"id":119,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$46","typeString":"type(contract IERC165)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":127,"nodeType":"IfStatement","src":"1560:82:3","trueBody":{"id":126,"nodeType":"Block","src":"1606:36:3","statements":[{"expression":{"hexValue":"74727565","id":124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":110,"id":125,"nodeType":"Return","src":"1620:11:3"}]}},{"expression":{"baseExpression":{"expression":{"id":128,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"1658:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:3","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":56,"src":"1658:21:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":131,"indexExpression":{"id":130,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1680:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":110,"id":132,"nodeType":"Return","src":"1651:41:3"}]},"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"1014:340:3","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":134,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:3","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"s","nameLocation":"1401:1:3","nodeType":"VariableDeclaration","scope":134,"src":"1386:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":103,"nodeType":"UserDefinedTypeName","pathNode":{"id":102,"name":"Layout","nameLocations":["1386:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1386:6:3"},"referencedDeclaration":57,"src":"1386:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:3","nodeType":"VariableDeclaration","scope":134,"src":"1404:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":105,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:3"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"supported","nameLocation":"1452:9:3","nodeType":"VariableDeclaration","scope":134,"src":"1447:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":108,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:3"},"scope":147,"src":"1359:340:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"1764:115:3","statements":[{"assignments":[141],"declarations":[{"constant":false,"id":141,"mutability":"mutable","name":"position","nameLocation":"1782:8:3","nodeType":"VariableDeclaration","scope":145,"src":"1774:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":140,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":143,"initialValue":{"id":142,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1793:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:3"},{"AST":{"nativeSrc":"1831:42:3","nodeType":"YulBlock","src":"1831:42:3","statements":[{"nativeSrc":"1845:18:3","nodeType":"YulAssignment","src":"1845:18:3","value":{"name":"position","nativeSrc":"1855:8:3","nodeType":"YulIdentifier","src":"1855:8:3"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:3","nodeType":"YulIdentifier","src":"1845:6:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":141,"isOffset":false,"isSlot":false,"src":"1855:8:3","valueSize":1},{"declaration":138,"isOffset":false,"isSlot":true,"src":"1845:6:3","suffix":"slot","valueSize":1}],"id":144,"nodeType":"InlineAssembly","src":"1822:51:3"}]},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:3","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[],"src":"1720:2:3"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"s","nameLocation":"1761:1:3","nodeType":"VariableDeclaration","scope":146,"src":"1746:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":137,"nodeType":"UserDefinedTypeName","pathNode":{"id":136,"name":"Layout","nameLocations":["1746:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1746:6:3"},"referencedDeclaration":57,"src":"1746:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:3"},"scope":147,"src":"1705:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":148,"src":"189:1692:3","usedErrors":[],"usedEvents":[]}],"src":"32:1850:3"},"id":3},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[182],"IERC1155TokenReceiver":[246],"InterfaceDetection":[29],"InterfaceDetectionStorage":[147]},"id":183,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./interfaces/IERC1155TokenReceiver.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":247,"src":"58:77:4","symbolAliases":[{"foreign":{"id":150,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"66:21:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":148,"src":"136:104:4","symbolAliases":[{"foreign":{"id":152,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"144:25:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":30,"src":"241:80:4","symbolAliases":[{"foreign":{"id":154,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"249:18:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":157,"name":"IERC1155TokenReceiver","nameLocations":["541:21:4"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"541:21:4"},"id":158,"nodeType":"InheritanceSpecifier","src":"541:21:4"},{"baseName":{"id":159,"name":"InterfaceDetection","nameLocations":["564:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":29,"src":"564:18:4"},"id":160,"nodeType":"InheritanceSpecifier","src":"564:18:4"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"323:176:4","text":"@title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":182,"linearizedBaseContracts":[182,29,46,246],"name":"ERC1155TokenReceiver","nameLocation":"517:20:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":164,"libraryName":{"id":161,"name":"InterfaceDetectionStorage","nameLocations":["595:25:4"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"595:25:4"},"nodeType":"UsingForDirective","src":"589:69:4","typeName":{"id":163,"nodeType":"UserDefinedTypeName","pathNode":{"id":162,"name":"InterfaceDetectionStorage.Layout","nameLocations":["625:25:4","651:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"625:32:4"},"referencedDeclaration":57,"src":"625:32:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":180,"nodeType":"Block","src":"770:120:4","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":174,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"842:21:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$246_$","typeString":"type(contract IERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$246_$","typeString":"type(contract IERC1155TokenReceiver)"}],"id":173,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"837:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155TokenReceiver_$246","typeString":"type(contract IERC1155TokenReceiver)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:11:4","memberName":"interfaceId","nodeType":"MemberAccess","src":"837:39:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"878:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":168,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"780:25:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$147_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":146,"src":"780:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"815:21:4","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":100,"src":"780:56:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$57_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:103:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"780:103:4"}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"664:87:4","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"id":181,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[],"src":"767:2:4"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"770:0:4"},"scope":182,"src":"756:134:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":183,"src":"499:393:4","usedErrors":[34],"usedEvents":[]}],"src":"32:861:4"},"id":4},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[208]},"id":209,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":184,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"59:196:5","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1."},"fullyImplemented":false,"id":208,"linearizedBaseContracts":[208],"name":"IERC1155Burnable","nameLocation":"265:16:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"288:391:5","text":"@notice Burns some token.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"functionSelector":"124d91e5","id":195,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"693:8:5","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"from","nameLocation":"710:4:5","nodeType":"VariableDeclaration","scope":195,"src":"702:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"id","nameLocation":"724:2:5","nodeType":"VariableDeclaration","scope":195,"src":"716:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"value","nameLocation":"736:5:5","nodeType":"VariableDeclaration","scope":195,"src":"728:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:41:5"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"751:0:5"},"scope":208,"src":"684:68:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"758:478:5","text":"@notice Burns multiple tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"functionSelector":"80534934","id":207,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1250:13:5","nodeType":"FunctionDefinition","parameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"from","nameLocation":"1272:4:5","nodeType":"VariableDeclaration","scope":207,"src":"1264:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"ids","nameLocation":"1297:3:5","nodeType":"VariableDeclaration","scope":207,"src":"1278:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":200,"nodeType":"ArrayTypeName","src":"1278:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"values","nameLocation":"1321:6:5","nodeType":"VariableDeclaration","scope":207,"src":"1302:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1302:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":203,"nodeType":"ArrayTypeName","src":"1302:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1263:65:5"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[],"src":"1337:0:5"},"scope":208,"src":"1241:97:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":209,"src":"255:1085:5","usedErrors":[],"usedEvents":[]}],"src":"33:1308:5"},"id":5},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[246]},"id":247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":210,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":211,"nodeType":"StructuredDocumentation","src":"58:284:6","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":246,"linearizedBaseContracts":[246],"name":"IERC1155TokenReceiver","nameLocation":"352:21:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"380:914:6","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":227,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1308:17:6","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"operator","nameLocation":"1334:8:6","nodeType":"VariableDeclaration","scope":227,"src":"1326:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"from","nameLocation":"1352:4:6","nodeType":"VariableDeclaration","scope":227,"src":"1344:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"1344:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"id","nameLocation":"1366:2:6","nodeType":"VariableDeclaration","scope":227,"src":"1358:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":220,"mutability":"mutable","name":"value","nameLocation":"1378:5:6","nodeType":"VariableDeclaration","scope":227,"src":"1370:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":219,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"data","nameLocation":"1400:4:6","nodeType":"VariableDeclaration","scope":227,"src":"1385:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":221,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1325:80:6"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"magicValue","nameLocation":"1431:10:6","nodeType":"VariableDeclaration","scope":227,"src":"1424:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":224,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1423:19:6"},"scope":246,"src":"1299:144:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1449:1062:6","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":245,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2525:22:6","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"operator","nameLocation":"2565:8:6","nodeType":"VariableDeclaration","scope":245,"src":"2557:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"from","nameLocation":"2591:4:6","nodeType":"VariableDeclaration","scope":245,"src":"2583:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":231,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"ids","nameLocation":"2624:3:6","nodeType":"VariableDeclaration","scope":245,"src":"2605:22:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"2605:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":234,"nodeType":"ArrayTypeName","src":"2605:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"values","nameLocation":"2656:6:6","nodeType":"VariableDeclaration","scope":245,"src":"2637:25:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":237,"nodeType":"ArrayTypeName","src":"2637:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"data","nameLocation":"2687:4:6","nodeType":"VariableDeclaration","scope":245,"src":"2672:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":239,"name":"bytes","nodeType":"ElementaryTypeName","src":"2672:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2547:150:6"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"magicValue","nameLocation":"2723:10:6","nodeType":"VariableDeclaration","scope":245,"src":"2716:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":242,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2716:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2715:19:6"},"scope":246,"src":"2516:219:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":247,"src":"342:2395:6","usedErrors":[],"usedEvents":[]}],"src":"32:2706:6"},"id":6},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[748]},"id":749,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":248,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"143:658:7","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":748,"linearizedBaseContracts":[748],"name":"MerkleProof","nameLocation":"810:11:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":269,"nodeType":"Block","src":"1283:57:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":263,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"1313:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":264,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"1320:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":262,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"1300:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":266,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1329:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":261,"id":268,"nodeType":"Return","src":"1293:40:7"}]},"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"828:323:7","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":270,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:7","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":253,"mutability":"mutable","name":"proof","nameLocation":"1198:5:7","nodeType":"VariableDeclaration","scope":270,"src":"1181:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":252,"nodeType":"ArrayTypeName","src":"1181:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"root","nameLocation":"1221:4:7","nodeType":"VariableDeclaration","scope":270,"src":"1213:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:7","nodeType":"VariableDeclaration","scope":270,"src":"1235:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:7"},"returnParameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":270,"src":"1277:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":259,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:7"},"scope":748,"src":"1156:184:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"1578:65:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":284,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"1616:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":285,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"1623:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":283,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"1595:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":287,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1632:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":282,"id":289,"nodeType":"Return","src":"1588:48:7"}]},"documentation":{"id":271,"nodeType":"StructuredDocumentation","src":"1346:90:7","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:7","nodeType":"FunctionDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"proof","nameLocation":"1493:5:7","nodeType":"VariableDeclaration","scope":291,"src":"1474:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":273,"nodeType":"ArrayTypeName","src":"1474:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"root","nameLocation":"1516:4:7","nodeType":"VariableDeclaration","scope":291,"src":"1508:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:7","nodeType":"VariableDeclaration","scope":291,"src":"1530:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:7"},"returnParameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":291,"src":"1572:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":280,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:7"},"scope":748,"src":"1441:202:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":330,"nodeType":"Block","src":"2086:198:7","statements":[{"assignments":[303],"declarations":[{"constant":false,"id":303,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:7","nodeType":"VariableDeclaration","scope":330,"src":"2096:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":305,"initialValue":{"id":304,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"2119:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:7"},{"body":{"id":326,"nodeType":"Block","src":"2176:73:7","statements":[{"expression":{"id":324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":317,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2190:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":319,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2215:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":320,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"2229:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":322,"indexExpression":{"id":321,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2235:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":318,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2205:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":325,"nodeType":"ExpressionStatement","src":"2190:48:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2153:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":311,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"2157:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:7","memberName":"length","nodeType":"MemberAccess","src":"2157:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"initializationExpression":{"assignments":[307],"declarations":[{"constant":false,"id":307,"mutability":"mutable","name":"i","nameLocation":"2146:1:7","nodeType":"VariableDeclaration","scope":327,"src":"2138:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":306,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":309,"initialValue":{"hexValue":"30","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:7","subExpression":{"id":314,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2171:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":316,"nodeType":"ExpressionStatement","src":"2171:3:7"},"nodeType":"ForStatement","src":"2133:116:7"},{"expression":{"id":328,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2265:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":301,"id":329,"nodeType":"Return","src":"2258:19:7"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"1649:340:7","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":331,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:7","nodeType":"FunctionDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"proof","nameLocation":"2033:5:7","nodeType":"VariableDeclaration","scope":331,"src":"2016:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":294,"nodeType":"ArrayTypeName","src":"2016:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":297,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:7","nodeType":"VariableDeclaration","scope":331,"src":"2040:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:7"},"returnParameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":331,"src":"2077:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:7"},"scope":748,"src":"1994:290:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"2493:198:7","statements":[{"assignments":[343],"declarations":[{"constant":false,"id":343,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:7","nodeType":"VariableDeclaration","scope":370,"src":"2503:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":345,"initialValue":{"id":344,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"2526:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:7"},{"body":{"id":366,"nodeType":"Block","src":"2583:73:7","statements":[{"expression":{"id":364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":357,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2597:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":359,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2622:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":360,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2636:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":362,"indexExpression":{"id":361,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2642:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":358,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2612:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":365,"nodeType":"ExpressionStatement","src":"2597:48:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":350,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2560:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":351,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2564:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:7","memberName":"length","nodeType":"MemberAccess","src":"2564:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":367,"initializationExpression":{"assignments":[347],"declarations":[{"constant":false,"id":347,"mutability":"mutable","name":"i","nameLocation":"2553:1:7","nodeType":"VariableDeclaration","scope":367,"src":"2545:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":349,"initialValue":{"hexValue":"30","id":348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:7","subExpression":{"id":354,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2578:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":356,"nodeType":"ExpressionStatement","src":"2578:3:7"},"nodeType":"ForStatement","src":"2540:116:7"},{"expression":{"id":368,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2672:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":341,"id":369,"nodeType":"Return","src":"2665:19:7"}]},"documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"2290:96:7","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:7","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"proof","nameLocation":"2440:5:7","nodeType":"VariableDeclaration","scope":371,"src":"2421:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":333,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":334,"nodeType":"ArrayTypeName","src":"2421:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:7","nodeType":"VariableDeclaration","scope":371,"src":"2447:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:7"},"returnParameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":371,"src":"2484:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:7"},"scope":748,"src":"2391:300:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":396,"nodeType":"Block","src":"3234:76:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":389,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"3269:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":390,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"3276:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":391,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3288:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":388,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"3251:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":393,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"3299:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":387,"id":395,"nodeType":"Return","src":"3244:59:7"}]},"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"2697:350:7","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":397,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:7","nodeType":"FunctionDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"proof","nameLocation":"3104:5:7","nodeType":"VariableDeclaration","scope":397,"src":"3087:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":374,"nodeType":"ArrayTypeName","src":"3087:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:7","nodeType":"VariableDeclaration","scope":397,"src":"3119:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":376,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":377,"nodeType":"ArrayTypeName","src":"3119:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"root","nameLocation":"3161:4:7","nodeType":"VariableDeclaration","scope":397,"src":"3153:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:7","nodeType":"VariableDeclaration","scope":397,"src":"3175:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":382,"nodeType":"ArrayTypeName","src":"3175:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:7"},"returnParameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":397,"src":"3228:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":385,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:7"},"scope":748,"src":"3052:258:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":422,"nodeType":"Block","src":"3715:84:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":415,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"3758:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":416,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"3765:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":417,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"3777:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":414,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3732:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":419,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"3788:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":413,"id":421,"nodeType":"Return","src":"3725:67:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"3316:200:7","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":423,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:7","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"proof","nameLocation":"3583:5:7","nodeType":"VariableDeclaration","scope":423,"src":"3564:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":400,"nodeType":"ArrayTypeName","src":"3564:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:7","nodeType":"VariableDeclaration","scope":423,"src":"3598:26:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":403,"nodeType":"ArrayTypeName","src":"3598:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":406,"mutability":"mutable","name":"root","nameLocation":"3642:4:7","nodeType":"VariableDeclaration","scope":423,"src":"3634:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":405,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:7","nodeType":"VariableDeclaration","scope":423,"src":"3656:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":408,"nodeType":"ArrayTypeName","src":"3656:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:7"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":423,"src":"3709:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":411,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:7"},"scope":748,"src":"3521:278:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":567,"nodeType":"Block","src":"4753:1860:7","statements":[{"assignments":[439],"declarations":[{"constant":false,"id":439,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:7","nodeType":"VariableDeclaration","scope":567,"src":"5136:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":442,"initialValue":{"expression":{"id":440,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"5156:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:7","memberName":"length","nodeType":"MemberAccess","src":"5156:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:7"},{"assignments":[444],"declarations":[{"constant":false,"id":444,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:7","nodeType":"VariableDeclaration","scope":567,"src":"5179:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":447,"initialValue":{"expression":{"id":445,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"5201:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:7","memberName":"length","nodeType":"MemberAccess","src":"5201:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"5270:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":450,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"5282:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:7","memberName":"length","nodeType":"MemberAccess","src":"5282:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":455,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"5302:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":448,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":459,"nodeType":"ExpressionStatement","src":"5262:87:7"},{"assignments":[464],"declarations":[{"constant":false,"id":464,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:7","nodeType":"VariableDeclaration","scope":567,"src":"5594:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":463,"nodeType":"ArrayTypeName","src":"5594:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":470,"initialValue":{"arguments":[{"id":468,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"5634:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":466,"nodeType":"ArrayTypeName","src":"5624:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:7"},{"assignments":[472],"declarations":[{"constant":false,"id":472,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:7","nodeType":"VariableDeclaration","scope":567,"src":"5656:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":471,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":474,"initialValue":{"hexValue":"30","id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:7"},{"assignments":[476],"declarations":[{"constant":false,"id":476,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:7","nodeType":"VariableDeclaration","scope":567,"src":"5685:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":475,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":478,"initialValue":{"hexValue":"30","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:7"},{"assignments":[480],"declarations":[{"constant":false,"id":480,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:7","nodeType":"VariableDeclaration","scope":567,"src":"5714:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":482,"initialValue":{"hexValue":"30","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:7"},{"body":{"id":540,"nodeType":"Block","src":"6151:258:7","statements":[{"assignments":[494],"declarations":[{"constant":false,"id":494,"mutability":"mutable","name":"a","nameLocation":"6173:1:7","nodeType":"VariableDeclaration","scope":540,"src":"6165:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":507,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":495,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6177:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":496,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6187:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":502,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6219:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":505,"indexExpression":{"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:7","subExpression":{"id":503,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"6226:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:7","trueExpression":{"baseExpression":{"id":498,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6199:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":501,"indexExpression":{"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:7","subExpression":{"id":499,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6206:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:7"},{"assignments":[509],"declarations":[{"constant":false,"id":509,"mutability":"mutable","name":"b","nameLocation":"6258:1:7","nodeType":"VariableDeclaration","scope":540,"src":"6250:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":530,"initialValue":{"condition":{"baseExpression":{"id":510,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"6262:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":512,"indexExpression":{"id":511,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6273:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":525,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"6340:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":528,"indexExpression":{"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:7","subExpression":{"id":526,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6346:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:7","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":513,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6278:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":514,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6288:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":520,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6320:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":523,"indexExpression":{"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:7","subExpression":{"id":521,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"6327:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:7","trueExpression":{"baseExpression":{"id":516,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6300:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":519,"indexExpression":{"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:7","subExpression":{"id":517,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6307:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:7"},{"expression":{"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":531,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6371:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":533,"indexExpression":{"id":532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6378:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":535,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"6393:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":536,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"6396:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":534,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"6383:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":539,"nodeType":"ExpressionStatement","src":"6371:27:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":487,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6129:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":488,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"6133:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":541,"initializationExpression":{"assignments":[484],"declarations":[{"constant":false,"id":484,"mutability":"mutable","name":"i","nameLocation":"6122:1:7","nodeType":"VariableDeclaration","scope":541,"src":"6114:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":483,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":486,"initialValue":{"hexValue":"30","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:7","subExpression":{"id":490,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6146:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":492,"nodeType":"ExpressionStatement","src":"6146:3:7"},"nodeType":"ForStatement","src":"6109:300:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":542,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"6423:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":552,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6505:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":564,"nodeType":"Block","src":"6567:40:7","statements":[{"expression":{"baseExpression":{"id":560,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"6588:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":562,"indexExpression":{"hexValue":"30","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":437,"id":563,"nodeType":"Return","src":"6581:15:7"}]},"id":565,"nodeType":"IfStatement","src":"6501:106:7","trueBody":{"id":559,"nodeType":"Block","src":"6520:41:7","statements":[{"expression":{"baseExpression":{"id":555,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6541:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":557,"indexExpression":{"hexValue":"30","id":556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":437,"id":558,"nodeType":"Return","src":"6534:16:7"}]}},"id":566,"nodeType":"IfStatement","src":"6419:188:7","trueBody":{"id":551,"nodeType":"Block","src":"6440:55:7","statements":[{"expression":{"baseExpression":{"id":545,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6461:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":549,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":546,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"6468:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":437,"id":550,"nodeType":"Return","src":"6454:30:7"}]}}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"3805:768:7","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":568,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:7","nodeType":"FunctionDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"proof","nameLocation":"4631:5:7","nodeType":"VariableDeclaration","scope":568,"src":"4614:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":426,"nodeType":"ArrayTypeName","src":"4614:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:7","nodeType":"VariableDeclaration","scope":568,"src":"4646:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":428,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":429,"nodeType":"ArrayTypeName","src":"4646:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:7","nodeType":"VariableDeclaration","scope":568,"src":"4680:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":432,"nodeType":"ArrayTypeName","src":"4680:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:7"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:7","nodeType":"VariableDeclaration","scope":568,"src":"4733:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:7"},"scope":748,"src":"4578:2035:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":712,"nodeType":"Block","src":"7013:1860:7","statements":[{"assignments":[584],"declarations":[{"constant":false,"id":584,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:7","nodeType":"VariableDeclaration","scope":712,"src":"7396:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":587,"initialValue":{"expression":{"id":585,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"7416:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:7","memberName":"length","nodeType":"MemberAccess","src":"7416:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:7"},{"assignments":[589],"declarations":[{"constant":false,"id":589,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:7","nodeType":"VariableDeclaration","scope":712,"src":"7439:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":592,"initialValue":{"expression":{"id":590,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"7461:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:7","memberName":"length","nodeType":"MemberAccess","src":"7461:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":594,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"7530:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":595,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"7542:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:7","memberName":"length","nodeType":"MemberAccess","src":"7542:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":600,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"7562:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":593,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":604,"nodeType":"ExpressionStatement","src":"7522:87:7"},{"assignments":[609],"declarations":[{"constant":false,"id":609,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:7","nodeType":"VariableDeclaration","scope":712,"src":"7854:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":608,"nodeType":"ArrayTypeName","src":"7854:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":615,"initialValue":{"arguments":[{"id":613,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"7894:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":611,"nodeType":"ArrayTypeName","src":"7884:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:7"},{"assignments":[617],"declarations":[{"constant":false,"id":617,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:7","nodeType":"VariableDeclaration","scope":712,"src":"7916:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":619,"initialValue":{"hexValue":"30","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:7"},{"assignments":[621],"declarations":[{"constant":false,"id":621,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:7","nodeType":"VariableDeclaration","scope":712,"src":"7945:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":620,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":623,"initialValue":{"hexValue":"30","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:7"},{"assignments":[625],"declarations":[{"constant":false,"id":625,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:7","nodeType":"VariableDeclaration","scope":712,"src":"7974:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":624,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":627,"initialValue":{"hexValue":"30","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:7"},{"body":{"id":685,"nodeType":"Block","src":"8411:258:7","statements":[{"assignments":[639],"declarations":[{"constant":false,"id":639,"mutability":"mutable","name":"a","nameLocation":"8433:1:7","nodeType":"VariableDeclaration","scope":685,"src":"8425:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":638,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":652,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":640,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8437:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":641,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"8447:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":647,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8479:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":650,"indexExpression":{"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:7","subExpression":{"id":648,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"8486:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:7","trueExpression":{"baseExpression":{"id":643,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"8459:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":646,"indexExpression":{"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:7","subExpression":{"id":644,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8466:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:7"},{"assignments":[654],"declarations":[{"constant":false,"id":654,"mutability":"mutable","name":"b","nameLocation":"8518:1:7","nodeType":"VariableDeclaration","scope":685,"src":"8510:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":675,"initialValue":{"condition":{"baseExpression":{"id":655,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"8522:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":657,"indexExpression":{"id":656,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8533:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":670,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8600:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":673,"indexExpression":{"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:7","subExpression":{"id":671,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8606:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:7","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":658,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8538:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":659,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"8548:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":665,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8580:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":668,"indexExpression":{"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:7","subExpression":{"id":666,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"8587:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:7","trueExpression":{"baseExpression":{"id":661,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"8560:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":664,"indexExpression":{"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:7","subExpression":{"id":662,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8567:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:7"},{"expression":{"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":676,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8631:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":678,"indexExpression":{"id":677,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8638:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":680,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"8653:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":681,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"8656:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":679,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8643:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":684,"nodeType":"ExpressionStatement","src":"8631:27:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":632,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8389:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":633,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8393:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":686,"initializationExpression":{"assignments":[629],"declarations":[{"constant":false,"id":629,"mutability":"mutable","name":"i","nameLocation":"8382:1:7","nodeType":"VariableDeclaration","scope":686,"src":"8374:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":631,"initialValue":{"hexValue":"30","id":630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:7","subExpression":{"id":635,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8406:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":637,"nodeType":"ExpressionStatement","src":"8406:3:7"},"nodeType":"ForStatement","src":"8369:300:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":687,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8683:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":697,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"8765:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":709,"nodeType":"Block","src":"8827:40:7","statements":[{"expression":{"baseExpression":{"id":705,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8848:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":707,"indexExpression":{"hexValue":"30","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":582,"id":708,"nodeType":"Return","src":"8841:15:7"}]},"id":710,"nodeType":"IfStatement","src":"8761:106:7","trueBody":{"id":704,"nodeType":"Block","src":"8780:41:7","statements":[{"expression":{"baseExpression":{"id":700,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"8801:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":702,"indexExpression":{"hexValue":"30","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":582,"id":703,"nodeType":"Return","src":"8794:16:7"}]}},"id":711,"nodeType":"IfStatement","src":"8679:188:7","trueBody":{"id":696,"nodeType":"Block","src":"8700:55:7","statements":[{"expression":{"baseExpression":{"id":690,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8721:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":694,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":691,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8728:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":582,"id":695,"nodeType":"Return","src":"8714:30:7"}]}}]},"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"6619:202:7","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":713,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:7","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"proof","nameLocation":"6889:5:7","nodeType":"VariableDeclaration","scope":713,"src":"6870:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":570,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":571,"nodeType":"ArrayTypeName","src":"6870:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:7","nodeType":"VariableDeclaration","scope":713,"src":"6904:26:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":574,"nodeType":"ArrayTypeName","src":"6904:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:7","nodeType":"VariableDeclaration","scope":713,"src":"6940:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":577,"nodeType":"ArrayTypeName","src":"6940:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:7"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:7","nodeType":"VariableDeclaration","scope":713,"src":"6993:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:7"},"scope":748,"src":"6826:2047:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":735,"nodeType":"Block","src":"8951:75:7","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":722,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8968:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":723,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"8972:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":730,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"9014:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":731,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9017:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":729,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"8999:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:7","trueExpression":{"arguments":[{"id":726,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8991:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":727,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"8994:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":725,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"8976:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":721,"id":734,"nodeType":"Return","src":"8961:58:7"}]},"id":736,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:7","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"a","nameLocation":"8906:1:7","nodeType":"VariableDeclaration","scope":736,"src":"8898:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":714,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":717,"mutability":"mutable","name":"b","nameLocation":"8917:1:7","nodeType":"VariableDeclaration","scope":736,"src":"8909:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":716,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:7"},"returnParameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":736,"src":"8942:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:7"},"scope":748,"src":"8879:147:7","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":746,"nodeType":"Block","src":"9115:178:7","statements":[{"AST":{"nativeSrc":"9177:110:7","nodeType":"YulBlock","src":"9177:110:7","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:7","nodeType":"YulLiteral","src":"9198:4:7","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:7","nodeType":"YulIdentifier","src":"9204:1:7"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:7","nodeType":"YulIdentifier","src":"9191:6:7"},"nativeSrc":"9191:15:7","nodeType":"YulFunctionCall","src":"9191:15:7"},"nativeSrc":"9191:15:7","nodeType":"YulExpressionStatement","src":"9191:15:7"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:7","nodeType":"YulLiteral","src":"9226:4:7","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:7","nodeType":"YulIdentifier","src":"9232:1:7"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:7","nodeType":"YulIdentifier","src":"9219:6:7"},"nativeSrc":"9219:15:7","nodeType":"YulFunctionCall","src":"9219:15:7"},"nativeSrc":"9219:15:7","nodeType":"YulExpressionStatement","src":"9219:15:7"},{"nativeSrc":"9247:30:7","nodeType":"YulAssignment","src":"9247:30:7","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:7","nodeType":"YulLiteral","src":"9266:4:7","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:7","nodeType":"YulLiteral","src":"9272:4:7","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:7","nodeType":"YulIdentifier","src":"9256:9:7"},"nativeSrc":"9256:21:7","nodeType":"YulFunctionCall","src":"9256:21:7"},"variableNames":[{"name":"value","nativeSrc":"9247:5:7","nodeType":"YulIdentifier","src":"9247:5:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":738,"isOffset":false,"isSlot":false,"src":"9204:1:7","valueSize":1},{"declaration":740,"isOffset":false,"isSlot":false,"src":"9232:1:7","valueSize":1},{"declaration":743,"isOffset":false,"isSlot":false,"src":"9247:5:7","valueSize":1}],"id":745,"nodeType":"InlineAssembly","src":"9168:119:7"}]},"id":747,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:7","nodeType":"FunctionDefinition","parameters":{"id":741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"a","nameLocation":"9064:1:7","nodeType":"VariableDeclaration","scope":747,"src":"9056:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":737,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":740,"mutability":"mutable","name":"b","nameLocation":"9075:1:7","nodeType":"VariableDeclaration","scope":747,"src":"9067:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":739,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:7"},"returnParameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"value","nameLocation":"9108:5:7","nodeType":"VariableDeclaration","scope":747,"src":"9100:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:7"},"scope":748,"src":"9032:261:7","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":749,"src":"802:8493:7","usedErrors":[],"usedEvents":[]}],"src":"118:9178:7"},"id":7},"contracts/burn/OrbsBurnPool.sol":{"ast":{"absolutePath":"contracts/burn/OrbsBurnPool.sol","exportedSymbols":{"ERC1155TokenReceiver":[182],"IERC1155Burnable":[208],"MerkleProof":[748],"OrbsBurnPool":[1661]},"id":1662,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":750,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","id":752,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1662,"sourceUnit":183,"src":"57:114:8","symbolAliases":[{"foreign":{"id":751,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"65:20:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":754,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1662,"sourceUnit":209,"src":"172:117:8","symbolAliases":[{"foreign":{"id":753,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"180:16:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1662,"sourceUnit":749,"src":"290:87:8","symbolAliases":[{"foreign":{"id":755,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"298:11:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":758,"name":"ERC1155TokenReceiver","nameLocations":["554:20:8"],"nodeType":"IdentifierPath","referencedDeclaration":182,"src":"554:20:8"},"id":759,"nodeType":"InheritanceSpecifier","src":"554:20:8"}],"canonicalName":"OrbsBurnPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"379:149:8","text":" @title OrbsBurnPool Contract\n @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned."},"fullyImplemented":true,"id":1661,"linearizedBaseContracts":[1661,182,29,46,246],"name":"OrbsBurnPool","nameLocation":"538:12:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":763,"libraryName":{"id":760,"name":"MerkleProof","nameLocations":["587:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"587:11:8"},"nodeType":"UsingForDirective","src":"581:32:8","typeName":{"baseType":{"id":761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"603:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":762,"nodeType":"ArrayTypeName","src":"603:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":true,"documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"619:47:8","text":"@notice The denominator for the multiplier."},"id":767,"mutability":"constant","name":"_DENOMINATOR","nameLocation":"697:12:8","nodeType":"VariableDeclaration","scope":1661,"src":"671:47:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"671:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31305f303030","id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"712:6:8","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"visibility":"internal"},{"constant":true,"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"725:65:8","text":"@notice The token ID of RoC for setting the token multiplier."},"functionSelector":"1de0e40b","id":771,"mutability":"constant","name":"MISSING_ORB_TOKEN_ID","nameLocation":"819:20:8","nodeType":"VariableDeclaration","scope":1661,"src":"795:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"795:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"842:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":false,"documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"850:50:8","text":"@notice The token weights for calculating Ash."},"functionSelector":"0277640e","id":774,"mutability":"immutable","name":"BURN_WEIGHT_TOKEN_1","nameLocation":"930:19:8","nodeType":"VariableDeclaration","scope":1661,"src":"905:44:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"905:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"424ab4f7","id":776,"mutability":"immutable","name":"BURN_WEIGHT_TOKEN_2","nameLocation":"981:19:8","nodeType":"VariableDeclaration","scope":1661,"src":"956:44:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"956:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"aa918fd5","id":778,"mutability":"immutable","name":"BURN_WEIGHT_TOKEN_3","nameLocation":"1031:19:8","nodeType":"VariableDeclaration","scope":1661,"src":"1006:44:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":777,"name":"uint256","nodeType":"ElementaryTypeName","src":"1006:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"0455645a","id":780,"mutability":"immutable","name":"BURN_WEIGHT_TOKEN_4","nameLocation":"1081:19:8","nodeType":"VariableDeclaration","scope":1661,"src":"1056:44:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"f95d1016","id":782,"mutability":"immutable","name":"BURN_WEIGHT_TOKEN_5","nameLocation":"1131:19:8","nodeType":"VariableDeclaration","scope":1661,"src":"1106:44:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"1106:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"3838a201","id":784,"mutability":"immutable","name":"BURN_WEIGHT_TOKEN_6","nameLocation":"1181:19:8","nodeType":"VariableDeclaration","scope":1661,"src":"1156:44:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":783,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"c131754e","id":786,"mutability":"immutable","name":"BURN_WEIGHT_TOKEN_7","nameLocation":"1231:19:8","nodeType":"VariableDeclaration","scope":1661,"src":"1206:44:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"1206:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":true,"documentation":{"id":787,"nodeType":"StructuredDocumentation","src":"1257:43:8","text":"@notice The Riddle Of Chaos multiplier."},"functionSelector":"55f5b0a8","id":790,"mutability":"constant","name":"ROC_MULTIPLIER","nameLocation":"1329:14:8","nodeType":"VariableDeclaration","scope":1661,"src":"1305:42:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":788,"name":"uint256","nodeType":"ElementaryTypeName","src":"1305:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1346:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"public"},{"constant":false,"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"1354:72:8","text":"@notice The IERC1155Burnable erc1155 contracts burn to generate ASH."},"functionSelector":"28a979cf","id":794,"mutability":"immutable","name":"ORB_OF_POWER","nameLocation":"1465:12:8","nodeType":"VariableDeclaration","scope":1661,"src":"1431:46:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":793,"nodeType":"UserDefinedTypeName","pathNode":{"id":792,"name":"IERC1155Burnable","nameLocations":["1431:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"1431:16:8"},"referencedDeclaration":208,"src":"1431:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":795,"nodeType":"StructuredDocumentation","src":"1484:75:8","text":"@notice The IERC1155 erc1155 contract for setting the token multiplier."},"functionSelector":"cd18a34f","id":798,"mutability":"immutable","name":"MISSING_ORB","nameLocation":"1598:11:8","nodeType":"VariableDeclaration","scope":1661,"src":"1564:45:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":797,"nodeType":"UserDefinedTypeName","pathNode":{"id":796,"name":"IERC1155Burnable","nameLocations":["1564:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"1564:16:8"},"referencedDeclaration":208,"src":"1564:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"1616:45:8","text":"@notice The initial time of the contract."},"functionSelector":"491bde66","id":801,"mutability":"immutable","name":"INITIAL_TIME","nameLocation":"1691:12:8","nodeType":"VariableDeclaration","scope":1661,"src":"1666:37:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1666:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"1710:39:8","text":"@notice The duration of each cycle."},"functionSelector":"cd421fbf","id":804,"mutability":"immutable","name":"CYCLE_DURATION","nameLocation":"1779:14:8","nodeType":"VariableDeclaration","scope":1661,"src":"1754:39:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1754:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":805,"nodeType":"StructuredDocumentation","src":"1800:30:8","text":"@notice The maximum cycle."},"functionSelector":"043063bc","id":807,"mutability":"immutable","name":"MAX_CYCLE","nameLocation":"1860:9:8","nodeType":"VariableDeclaration","scope":1661,"src":"1835:34:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":806,"name":"uint256","nodeType":"ElementaryTypeName","src":"1835:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"1876:61:8","text":"@notice The Merkle root for setting the puzzleMultiplier."},"functionSelector":"51e75e8b","id":810,"mutability":"immutable","name":"MERKLE_ROOT","nameLocation":"1967:11:8","nodeType":"VariableDeclaration","scope":1661,"src":"1942:36:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":811,"nodeType":"StructuredDocumentation","src":"1985:60:8","text":"@notice The total amount of ASH generated in each cycle."},"functionSelector":"ab504e73","id":815,"mutability":"mutable","name":"totalAshPerCycle","nameLocation":"2085:16:8","nodeType":"VariableDeclaration","scope":1661,"src":"2050:51:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":814,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"2058:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2050:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"2069:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"2108:73:8","text":"@notice The total amount of ASH generated by each user in each cycle."},"functionSelector":"4dac1c2b","id":822,"mutability":"mutable","name":"userAshPerCycle","nameLocation":"2241:15:8","nodeType":"VariableDeclaration","scope":1661,"src":"2186:70:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":821,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"2194:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2186:47:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":820,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":818,"name":"address","nodeType":"ElementaryTypeName","src":"2213:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2205:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"2224:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"2263:135:8","text":"@notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"functionSelector":"12828b7f","id":827,"mutability":"mutable","name":"orbMultipliers","nameLocation":"2438:14:8","nodeType":"VariableDeclaration","scope":1661,"src":"2403:49:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":826,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"2411:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2403:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":825,"name":"uint256","nodeType":"ElementaryTypeName","src":"2422:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":828,"nodeType":"StructuredDocumentation","src":"2459:49:8","text":"@notice Event emitted when ASH are generated."},"eventSelector":"6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b","id":846,"name":"GenerateAsh","nameLocation":"2519:11:8","nodeType":"EventDefinition","parameters":{"id":845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":830,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"2556:6:8","nodeType":"VariableDeclaration","scope":846,"src":"2540:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"2540:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":832,"indexed":true,"mutability":"mutable","name":"cycle","nameLocation":"2588:5:8","nodeType":"VariableDeclaration","scope":846,"src":"2572:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"2572:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":835,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"2613:3:8","nodeType":"VariableDeclaration","scope":846,"src":"2603:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"2603:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":834,"nodeType":"ArrayTypeName","src":"2603:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":838,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"2636:6:8","nodeType":"VariableDeclaration","scope":846,"src":"2626:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"2626:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ArrayTypeName","src":"2626:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":840,"indexed":false,"mutability":"mutable","name":"ash","nameLocation":"2660:3:8","nodeType":"VariableDeclaration","scope":846,"src":"2652:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":842,"indexed":false,"mutability":"mutable","name":"totalAsh","nameLocation":"2681:8:8","nodeType":"VariableDeclaration","scope":846,"src":"2673:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":841,"name":"uint256","nodeType":"ElementaryTypeName","src":"2673:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":844,"indexed":false,"mutability":"mutable","name":"orbMultiplier","nameLocation":"2707:13:8","nodeType":"VariableDeclaration","scope":846,"src":"2699:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2530:196:8"},"src":"2513:214:8"},{"anonymous":false,"documentation":{"id":847,"nodeType":"StructuredDocumentation","src":"2733:62:8","text":"@notice Event emitted when the multiplier info is updated."},"eventSelector":"528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433","id":855,"name":"UpdateOrbMultiplier","nameLocation":"2806:19:8","nodeType":"EventDefinition","parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2842:9:8","nodeType":"VariableDeclaration","scope":855,"src":"2826:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":848,"name":"address","nodeType":"ElementaryTypeName","src":"2826:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":851,"indexed":false,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"2861:16:8","nodeType":"VariableDeclaration","scope":855,"src":"2853:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"2853:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":853,"indexed":false,"mutability":"mutable","name":"updatedOrbMultiplier","nameLocation":"2887:20:8","nodeType":"VariableDeclaration","scope":855,"src":"2879:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"2879:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2825:83:8"},"src":"2800:109:8"},{"documentation":{"id":856,"nodeType":"StructuredDocumentation","src":"2915:54:8","text":"@notice Error thrown when the token ID is invalid."},"errorSelector":"1912ea51","id":862,"name":"InvalidTokenId","nameLocation":"2980:14:8","nodeType":"ErrorDefinition","parameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":858,"mutability":"mutable","name":"token","nameLocation":"3003:5:8","nodeType":"VariableDeclaration","scope":862,"src":"2995:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":857,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":860,"mutability":"mutable","name":"tokenId","nameLocation":"3018:7:8","nodeType":"VariableDeclaration","scope":862,"src":"3010:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":859,"name":"uint256","nodeType":"ElementaryTypeName","src":"3010:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:32:8"},"src":"2974:53:8"},{"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"3033:58:8","text":"@notice Error thrown when the token weight is invalid."},"errorSelector":"276b6ff5","id":867,"name":"InvalidTokenBurnWeight","nameLocation":"3102:22:8","nodeType":"ErrorDefinition","parameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"weight","nameLocation":"3133:6:8","nodeType":"VariableDeclaration","scope":867,"src":"3125:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"3125:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3124:16:8"},"src":"3096:45:8"},{"documentation":{"id":868,"nodeType":"StructuredDocumentation","src":"3151:56:8","text":"@notice Error thrown when the token is not approved."},"errorSelector":"73306803","id":872,"name":"InvalidTokenAddress","nameLocation":"3218:19:8","nodeType":"ErrorDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"token","nameLocation":"3246:5:8","nodeType":"VariableDeclaration","scope":872,"src":"3238:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":869,"name":"address","nodeType":"ElementaryTypeName","src":"3238:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3237:15:8"},"src":"3212:41:8"},{"documentation":{"id":873,"nodeType":"StructuredDocumentation","src":"3259:58:8","text":"@notice Error thrown when the token amount is invalid."},"errorSelector":"e1f366e9","id":881,"name":"InvalidTokenValue","nameLocation":"3328:17:8","nodeType":"ErrorDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":875,"mutability":"mutable","name":"token","nameLocation":"3354:5:8","nodeType":"VariableDeclaration","scope":881,"src":"3346:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"3346:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"tokenId","nameLocation":"3369:7:8","nodeType":"VariableDeclaration","scope":881,"src":"3361:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint256","nodeType":"ElementaryTypeName","src":"3361:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"value","nameLocation":"3386:5:8","nodeType":"VariableDeclaration","scope":881,"src":"3378:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":878,"name":"uint256","nodeType":"ElementaryTypeName","src":"3378:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3345:47:8"},"src":"3322:71:8"},{"documentation":{"id":882,"nodeType":"StructuredDocumentation","src":"3399:51:8","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"764e560f","id":886,"name":"InvalidCycle","nameLocation":"3461:12:8","nodeType":"ErrorDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"cycle","nameLocation":"3482:5:8","nodeType":"VariableDeclaration","scope":886,"src":"3474:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"3474:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3473:15:8"},"src":"3455:34:8"},{"documentation":{"id":887,"nodeType":"StructuredDocumentation","src":"3495:81:8","text":"@notice Error thrown when the wallet already has the ROC multiplier been set."},"errorSelector":"383b5493","id":891,"name":"AlreadySetROCMultiplier","nameLocation":"3587:23:8","nodeType":"ErrorDefinition","parameters":{"id":890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":889,"mutability":"mutable","name":"wallet","nameLocation":"3619:6:8","nodeType":"VariableDeclaration","scope":891,"src":"3611:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":888,"name":"address","nodeType":"ElementaryTypeName","src":"3611:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3610:16:8"},"src":"3581:46:8"},{"documentation":{"id":892,"nodeType":"StructuredDocumentation","src":"3633:51:8","text":"@notice Error thrown when the proof is invalid."},"errorSelector":"adbd6512","id":898,"name":"InvalidProof","nameLocation":"3695:12:8","nodeType":"ErrorDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":894,"mutability":"mutable","name":"recipient","nameLocation":"3716:9:8","nodeType":"VariableDeclaration","scope":898,"src":"3708:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"3708:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"3735:29:8","nodeType":"VariableDeclaration","scope":898,"src":"3727:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"3727:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3707:58:8"},"src":"3689:77:8"},{"documentation":{"id":899,"nodeType":"StructuredDocumentation","src":"3772:60:8","text":"@notice Error thrown when the cycle duration is invalid."},"errorSelector":"b870efbd","id":901,"name":"ZeroCycleDuration","nameLocation":"3843:17:8","nodeType":"ErrorDefinition","parameters":{"id":900,"nodeType":"ParameterList","parameters":[],"src":"3860:2:8"},"src":"3837:26:8"},{"documentation":{"id":902,"nodeType":"StructuredDocumentation","src":"3869:51:8","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"fcbcab36","id":904,"name":"ZeroMaxCycle","nameLocation":"3931:12:8","nodeType":"ErrorDefinition","parameters":{"id":903,"nodeType":"ParameterList","parameters":[],"src":"3943:2:8"},"src":"3925:21:8"},{"body":{"id":1065,"nodeType":"Block","src":"4801:1218:8","statements":[{"expression":{"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":926,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"4811:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":927,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"4826:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4811:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":929,"nodeType":"ExpressionStatement","src":"4811:26:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":930,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"4852:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4869:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4852:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":937,"nodeType":"IfStatement","src":"4848:75:8","trueBody":{"id":936,"nodeType":"Block","src":"4872:51:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":933,"name":"ZeroCycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"4893:17:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4893:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":935,"nodeType":"RevertStatement","src":"4886:26:8"}]}},{"expression":{"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":938,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"4932:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":939,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"4949:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4932:30:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":941,"nodeType":"ExpressionStatement","src":"4932:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":942,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"4977:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4989:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4977:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":949,"nodeType":"IfStatement","src":"4973:65:8","trueBody":{"id":948,"nodeType":"Block","src":"4992:46:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":945,"name":"ZeroMaxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"5013:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5013:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":947,"nodeType":"RevertStatement","src":"5006:21:8"}]}},{"body":{"id":1047,"nodeType":"Block","src":"5102:777:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":961,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5120:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":963,"indexExpression":{"id":962,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5137:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5120:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5143:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5120:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":973,"nodeType":"IfStatement","src":"5116:113:8","trueBody":{"id":972,"nodeType":"Block","src":"5146:83:8","statements":[{"errorCall":{"arguments":[{"baseExpression":{"id":967,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5194:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":969,"indexExpression":{"id":968,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5211:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5194:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":966,"name":"InvalidTokenBurnWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"5171:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5171:43:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":971,"nodeType":"RevertStatement","src":"5164:50:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5247:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5252:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5247:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":984,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5339:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5344:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5339:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":994,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5431:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5436:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5431:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5523:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"33","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5528:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"5523:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1014,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5615:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5620:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5615:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1024,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5707:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5712:1:8","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"5707:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1040,"nodeType":"Block","src":"5795:74:8","statements":[{"expression":{"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1034,"name":"BURN_WEIGHT_TOKEN_7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"5813:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1035,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5835:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":1037,"indexExpression":{"id":1036,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5852:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5835:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5813:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1039,"nodeType":"ExpressionStatement","src":"5813:41:8"}]},"id":1041,"nodeType":"IfStatement","src":"5703:166:8","trueBody":{"id":1033,"nodeType":"Block","src":"5715:74:8","statements":[{"expression":{"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1027,"name":"BURN_WEIGHT_TOKEN_6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"5733:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1028,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5755:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":1030,"indexExpression":{"id":1029,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5772:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5755:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5733:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1032,"nodeType":"ExpressionStatement","src":"5733:41:8"}]}},"id":1042,"nodeType":"IfStatement","src":"5611:258:8","trueBody":{"id":1023,"nodeType":"Block","src":"5623:74:8","statements":[{"expression":{"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1017,"name":"BURN_WEIGHT_TOKEN_5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"5641:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1018,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5663:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":1020,"indexExpression":{"id":1019,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5680:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5663:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5641:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1022,"nodeType":"ExpressionStatement","src":"5641:41:8"}]}},"id":1043,"nodeType":"IfStatement","src":"5519:350:8","trueBody":{"id":1013,"nodeType":"Block","src":"5531:74:8","statements":[{"expression":{"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1007,"name":"BURN_WEIGHT_TOKEN_4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"5549:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1008,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5571:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":1010,"indexExpression":{"id":1009,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5588:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5571:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5549:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1012,"nodeType":"ExpressionStatement","src":"5549:41:8"}]}},"id":1044,"nodeType":"IfStatement","src":"5427:442:8","trueBody":{"id":1003,"nodeType":"Block","src":"5439:74:8","statements":[{"expression":{"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":997,"name":"BURN_WEIGHT_TOKEN_3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"5457:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":998,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5479:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":1000,"indexExpression":{"id":999,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5496:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5479:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5457:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1002,"nodeType":"ExpressionStatement","src":"5457:41:8"}]}},"id":1045,"nodeType":"IfStatement","src":"5335:534:8","trueBody":{"id":993,"nodeType":"Block","src":"5347:74:8","statements":[{"expression":{"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":987,"name":"BURN_WEIGHT_TOKEN_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"5365:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":988,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5387:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":990,"indexExpression":{"id":989,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5404:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5387:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5365:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":992,"nodeType":"ExpressionStatement","src":"5365:41:8"}]}},"id":1046,"nodeType":"IfStatement","src":"5243:626:8","trueBody":{"id":983,"nodeType":"Block","src":"5255:74:8","statements":[{"expression":{"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":977,"name":"BURN_WEIGHT_TOKEN_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"5273:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":978,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5295:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":980,"indexExpression":{"id":979,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5312:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5295:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5273:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":982,"nodeType":"ExpressionStatement","src":"5273:41:8"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":954,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5068:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":955,"name":"tokenBurnWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5072:16:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7] memory"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5089:6:8","memberName":"length","nodeType":"MemberAccess","src":"5072:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5068:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1048,"initializationExpression":{"assignments":[951],"declarations":[{"constant":false,"id":951,"mutability":"mutable","name":"i","nameLocation":"5061:1:8","nodeType":"VariableDeclaration","scope":1048,"src":"5053:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"5053:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":953,"initialValue":{"hexValue":"30","id":952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5053:13:8"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5097:3:8","subExpression":{"id":958,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"5097:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":960,"nodeType":"ExpressionStatement","src":"5097:3:8"},"nodeType":"ForStatement","src":"5048:831:8"},{"expression":{"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1049,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"5889:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1050,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"5901:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5889:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1052,"nodeType":"ExpressionStatement","src":"5889:20:8"},{"expression":{"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1053,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"5919:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1054,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"5933:10:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5919:24:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1056,"nodeType":"ExpressionStatement","src":"5919:24:8"},{"expression":{"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1057,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"5953:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1058,"name":"orbOfPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"5968:10:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"src":"5953:25:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":1060,"nodeType":"ExpressionStatement","src":"5953:25:8"},{"expression":{"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1061,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"5988:11:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1062,"name":"missingOrb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"6002:10:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"src":"5988:24:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":1064,"nodeType":"ExpressionStatement","src":"5988:24:8"}]},"documentation":{"id":905,"nodeType":"StructuredDocumentation","src":"3952:594:8","text":" @notice Constructor for the OrbsBurnPool contract.\n @param initialTime The initial time of the contract.\n @param cycleDuration The duration of each cycle.\n @param maxCycle The maximum cycle.\n @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n @dev Throws if the cycle duration is zero.\n @dev Throws if the max cycle is zero."},"id":1066,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":907,"mutability":"mutable","name":"initialTime","nameLocation":"4580:11:8","nodeType":"VariableDeclaration","scope":1066,"src":"4572:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"4572:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"cycleDuration","nameLocation":"4609:13:8","nodeType":"VariableDeclaration","scope":1066,"src":"4601:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":908,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"maxCycle","nameLocation":"4640:8:8","nodeType":"VariableDeclaration","scope":1066,"src":"4632:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"4632:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"merkleRoot","nameLocation":"4666:10:8","nodeType":"VariableDeclaration","scope":1066,"src":"4658:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4658:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":917,"mutability":"mutable","name":"tokenBurnWeights","nameLocation":"4704:16:8","nodeType":"VariableDeclaration","scope":1066,"src":"4686:34:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_memory_ptr","typeString":"uint256[7]"},"typeName":{"baseType":{"id":914,"name":"uint256","nodeType":"ElementaryTypeName","src":"4686:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":916,"length":{"hexValue":"37","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4694:1:8","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"nodeType":"ArrayTypeName","src":"4686:10:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$7_storage_ptr","typeString":"uint256[7]"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"orbOfPower","nameLocation":"4747:10:8","nodeType":"VariableDeclaration","scope":1066,"src":"4730:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":919,"nodeType":"UserDefinedTypeName","pathNode":{"id":918,"name":"IERC1155Burnable","nameLocations":["4730:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"4730:16:8"},"referencedDeclaration":208,"src":"4730:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":923,"mutability":"mutable","name":"missingOrb","nameLocation":"4784:10:8","nodeType":"VariableDeclaration","scope":1066,"src":"4767:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":922,"nodeType":"UserDefinedTypeName","pathNode":{"id":921,"name":"IERC1155Burnable","nameLocations":["4767:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"4767:16:8"},"referencedDeclaration":208,"src":"4767:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"internal"}],"src":"4562:238:8"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[],"src":"4801:0:8"},"scope":1661,"src":"4551:1468:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1080,"nodeType":"Block","src":"6173:73:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1072,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6191:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6197:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"6191:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1074,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"6209:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6191:30:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1076,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6190:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1077,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"6225:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6190:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1071,"id":1079,"nodeType":"Return","src":"6183:56:8"}]},"documentation":{"id":1067,"nodeType":"StructuredDocumentation","src":"6025:89:8","text":" @notice Get the current cycle.\n @return cycle The current cycle."},"functionSelector":"bab2f552","id":1081,"implemented":true,"kind":"function","modifiers":[],"name":"currentCycle","nameLocation":"6128:12:8","nodeType":"FunctionDefinition","parameters":{"id":1068,"nodeType":"ParameterList","parameters":[],"src":"6140:2:8"},"returnParameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1081,"src":"6164:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"6164:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6163:9:8"},"scope":1661,"src":"6119:127:8","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[227],"body":{"id":1266,"nodeType":"Block","src":"7065:1497:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1098,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7079:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7083:6:8","memberName":"sender","nodeType":"MemberAccess","src":"7079:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1102,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"7101:11:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}],"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7093:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1100,"name":"address","nodeType":"ElementaryTypeName","src":"7093:7:8","typeDescriptions":{}}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7093:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7079:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1111,"nodeType":"IfStatement","src":"7075:103:8","trueBody":{"id":1110,"nodeType":"Block","src":"7115:63:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1106,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7156:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7160:6:8","memberName":"sender","nodeType":"MemberAccess","src":"7156:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1105,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"7136:19:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7136:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"RevertStatement","src":"7129:38:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1112,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"7191:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1113,"name":"MISSING_ORB_TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"7197:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7191:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1122,"nodeType":"IfStatement","src":"7187:94:8","trueBody":{"id":1121,"nodeType":"Block","src":"7219:62:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1116,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7255:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7259:6:8","memberName":"sender","nodeType":"MemberAccess","src":"7255:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1118,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"7267:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1115,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7240:14:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7240:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1120,"nodeType":"RevertStatement","src":"7233:37:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1123,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7295:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7304:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7295:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1134,"nodeType":"IfStatement","src":"7291:88:8","trueBody":{"id":1133,"nodeType":"Block","src":"7307:72:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1127,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7346:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7350:6:8","memberName":"sender","nodeType":"MemberAccess","src":"7346:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1129,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"7358:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7362:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1126,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"7328:17:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7328:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1132,"nodeType":"RevertStatement","src":"7321:47:8"}]}},{"assignments":[1136],"declarations":[{"constant":false,"id":1136,"mutability":"mutable","name":"cycle","nameLocation":"7397:5:8","nodeType":"VariableDeclaration","scope":1266,"src":"7389:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"7389:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1139,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1137,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"7405:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7405:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7389:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1140,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"7433:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1141,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"7441:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7433:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1148,"nodeType":"IfStatement","src":"7429:74:8","trueBody":{"id":1147,"nodeType":"Block","src":"7452:51:8","statements":[{"errorCall":{"arguments":[{"id":1144,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"7486:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1143,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"7473:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7473:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1146,"nodeType":"RevertStatement","src":"7466:26:8"}]}},{"assignments":[1150],"declarations":[{"constant":false,"id":1150,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"7521:16:8","nodeType":"VariableDeclaration","scope":1266,"src":"7513:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1149,"name":"uint256","nodeType":"ElementaryTypeName","src":"7513:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1154,"initialValue":{"baseExpression":{"id":1151,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"7540:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1153,"indexExpression":{"id":1152,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"7555:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7540:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7513:47:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1157,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"7582:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7574:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1155,"name":"uint128","nodeType":"ElementaryTypeName","src":"7574:7:8","typeDescriptions":{}}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7574:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7602:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7574:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1166,"nodeType":"IfStatement","src":"7570:96:8","trueBody":{"id":1165,"nodeType":"Block","src":"7605:61:8","statements":[{"errorCall":{"arguments":[{"id":1162,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"7650:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1161,"name":"AlreadySetROCMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"7626:23:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7626:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1164,"nodeType":"RevertStatement","src":"7619:36:8"}]}},{"expression":{"arguments":[{"arguments":[{"id":1174,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7722:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1661","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$1661","typeString":"contract OrbsBurnPool"}],"id":1173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7714:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"7714:7:8","typeDescriptions":{}}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7714:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1176,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"7729:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7733:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":1168,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7693:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7697:6:8","memberName":"sender","nodeType":"MemberAccess","src":"7693:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1167,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"7676:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$208_$","typeString":"type(contract IERC1155Burnable)"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7676:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7705:8:8","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":195,"src":"7676:37:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) external"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7676:63:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1179,"nodeType":"ExpressionStatement","src":"7676:63:8"},{"assignments":[1181],"declarations":[{"constant":false,"id":1181,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"7758:16:8","nodeType":"VariableDeclaration","scope":1266,"src":"7750:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint256","nodeType":"ElementaryTypeName","src":"7750:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1185,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1182,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"7777:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1183,"name":"ROC_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"7796:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7750:60:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1186,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"7824:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7829:6:8","memberName":"length","nodeType":"MemberAccess","src":"7824:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7838:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7824:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1249,"nodeType":"IfStatement","src":"7820:562:8","trueBody":{"id":1248,"nodeType":"Block","src":"7841:541:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1190,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"7860:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7880:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7860:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1193,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7859:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7888:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7859:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1247,"nodeType":"IfStatement","src":"7855:517:8","trueBody":{"id":1246,"nodeType":"Block","src":"7891:481:8","statements":[{"assignments":[1200,1202],"declarations":[{"constant":false,"id":1200,"mutability":"mutable","name":"proof","nameLocation":"7927:5:8","nodeType":"VariableDeclaration","scope":1246,"src":"7910:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1198,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7910:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1199,"nodeType":"ArrayTypeName","src":"7910:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"7942:29:8","nodeType":"VariableDeclaration","scope":1246,"src":"7934:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1201,"name":"uint256","nodeType":"ElementaryTypeName","src":"7934:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1213,"initialValue":{"arguments":[{"id":1205,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"7986:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":1207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7993:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7993:7:8","typeDescriptions":{}}},"id":1208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"7993:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":1210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8004:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1209,"name":"uint256","nodeType":"ElementaryTypeName","src":"8004:7:8","typeDescriptions":{}}}],"id":1211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7992:20:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":1203,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7975:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7979:6:8","memberName":"decode","nodeType":"MemberAccess","src":"7975:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7975:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7909:104:8"},{"assignments":[1215],"declarations":[{"constant":false,"id":1215,"mutability":"mutable","name":"leaf","nameLocation":"8039:4:8","nodeType":"VariableDeclaration","scope":1246,"src":"8031:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8031:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1223,"initialValue":{"arguments":[{"arguments":[{"id":1219,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"8073:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1220,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"8079:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1217,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8056:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8060:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"8056:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8056:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1216,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8046:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8046:64:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8031:79:8"},{"condition":{"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8132:32:8","subExpression":{"arguments":[{"id":1226,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"8146:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1227,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"8159:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1224,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"8133:5:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8139:6:8","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":270,"src":"8133:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8133:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1236,"nodeType":"IfStatement","src":"8128:135:8","trueBody":{"id":1235,"nodeType":"Block","src":"8166:97:8","statements":[{"errorCall":{"arguments":[{"id":1231,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"8208:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1232,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"8214:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1230,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"8195:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8195:49:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1234,"nodeType":"RevertStatement","src":"8188:56:8"}]}},{"expression":{"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1237,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"8281:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1238,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"8301:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8334:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8301:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1241,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8300:38:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1242,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"8341:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8300:57:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8281:76:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1245,"nodeType":"ExpressionStatement","src":"8281:76:8"}]}}]}},{"expression":{"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1250,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8391:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1252,"indexExpression":{"id":1251,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"8406:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8391:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1253,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"8414:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8391:39:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1255,"nodeType":"ExpressionStatement","src":"8391:39:8"},{"eventCall":{"arguments":[{"id":1257,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"8465:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1258,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"8471:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1259,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"8489:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1256,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"8445:19:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8445:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1261,"nodeType":"EmitStatement","src":"8440:66:8"},{"expression":{"expression":{"expression":{"id":1262,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8524:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1661","typeString":"contract OrbsBurnPool"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8529:17:8","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1267,"src":"8524:22:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8547:8:8","memberName":"selector","nodeType":"MemberAccess","src":"8524:31:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1097,"id":1265,"nodeType":"Return","src":"8517:38:8"}]},"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"6252:675:8","text":" @notice Set the Orb multiplier by burning the Missing Orb token 1\n @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n @param from The wallet address.\n @param id The token ID.\n @param value The token value.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid.\n @dev Throws if the token multiplier has already been set."},"functionSelector":"f23a6e61","id":1267,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"6941:17:8","nodeType":"FunctionDefinition","overrides":{"id":1094,"nodeType":"OverrideSpecifier","overrides":[],"src":"7039:8:8"},"parameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1267,"src":"6959:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"6959:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1086,"mutability":"mutable","name":"from","nameLocation":"6976:4:8","nodeType":"VariableDeclaration","scope":1267,"src":"6968:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"6968:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1088,"mutability":"mutable","name":"id","nameLocation":"6990:2:8","nodeType":"VariableDeclaration","scope":1267,"src":"6982:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1087,"name":"uint256","nodeType":"ElementaryTypeName","src":"6982:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1090,"mutability":"mutable","name":"value","nameLocation":"7002:5:8","nodeType":"VariableDeclaration","scope":1267,"src":"6994:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"6994:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1092,"mutability":"mutable","name":"data","nameLocation":"7024:4:8","nodeType":"VariableDeclaration","scope":1267,"src":"7009:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1091,"name":"bytes","nodeType":"ElementaryTypeName","src":"7009:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6958:71:8"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1267,"src":"7057:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1095,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7057:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7056:8:8"},"scope":1661,"src":"6932:1630:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[245],"body":{"id":1659,"nodeType":"Block","src":"9304:3245:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1286,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9318:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9322:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9318:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1290,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"9340:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}],"id":1289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9332:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1288,"name":"address","nodeType":"ElementaryTypeName","src":"9332:7:8","typeDescriptions":{}}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9332:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9318:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1299,"nodeType":"IfStatement","src":"9314:104:8","trueBody":{"id":1298,"nodeType":"Block","src":"9355:63:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1294,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9396:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9400:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9396:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1293,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"9376:19:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9376:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1297,"nodeType":"RevertStatement","src":"9369:38:8"}]}},{"assignments":[1301],"declarations":[{"constant":false,"id":1301,"mutability":"mutable","name":"cycle","nameLocation":"9436:5:8","nodeType":"VariableDeclaration","scope":1659,"src":"9428:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1300,"name":"uint256","nodeType":"ElementaryTypeName","src":"9428:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1304,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1302,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9444:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9444:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9428:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1305,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"9472:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1306,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"9480:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9472:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1313,"nodeType":"IfStatement","src":"9468:74:8","trueBody":{"id":1312,"nodeType":"Block","src":"9491:51:8","statements":[{"errorCall":{"arguments":[{"id":1309,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"9525:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1308,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"9512:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9512:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1311,"nodeType":"RevertStatement","src":"9505:26:8"}]}},{"expression":{"arguments":[{"arguments":[{"id":1321,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9603:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1661","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$1661","typeString":"contract OrbsBurnPool"}],"id":1320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9595:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1319,"name":"address","nodeType":"ElementaryTypeName","src":"9595:7:8","typeDescriptions":{}}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9595:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1323,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"9610:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1324,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"9615:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"expression":{"id":1315,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9569:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9573:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9569:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1314,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"9552:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$208_$","typeString":"type(contract IERC1155Burnable)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9552:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9581:13:8","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":207,"src":"9552:42:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9552:70:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1326,"nodeType":"ExpressionStatement","src":"9552:70:8"},{"assignments":[1328],"declarations":[{"constant":false,"id":1328,"mutability":"mutable","name":"ashGenerated","nameLocation":"9641:12:8","nodeType":"VariableDeclaration","scope":1659,"src":"9633:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1327,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1330,"initialValue":{"hexValue":"30","id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9656:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9633:24:8"},{"body":{"id":1483,"nodeType":"Block","src":"9708:966:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1342,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"9726:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1344,"indexExpression":{"id":1343,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9733:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9726:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9739:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9726:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1359,"nodeType":"IfStatement","src":"9722:108:8","trueBody":{"id":1358,"nodeType":"Block","src":"9742:88:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1348,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9785:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9789:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9785:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1350,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"9797:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1352,"indexExpression":{"id":1351,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9801:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9797:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1353,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"9805:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1355,"indexExpression":{"id":1354,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9812:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9805:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1347,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"9767:17:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9767:48:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1357,"nodeType":"RevertStatement","src":"9760:55:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1360,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"9848:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1362,"indexExpression":{"id":1361,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9852:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9848:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9858:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1375,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"9953:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1377,"indexExpression":{"id":1376,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9957:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9953:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9963:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9953:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1390,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"10058:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1392,"indexExpression":{"id":1391,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10062:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10058:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"33","id":1393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10068:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"10058:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1405,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"10163:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1407,"indexExpression":{"id":1406,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10167:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10163:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10163:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1420,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"10268:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1422,"indexExpression":{"id":1421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10272:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10268:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":1423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10278:1:8","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"10268:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1435,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"10373:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1437,"indexExpression":{"id":1436,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10377:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10373:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"36","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10383:1:8","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"10373:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1450,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"10478:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1452,"indexExpression":{"id":1451,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10482:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10478:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"37","id":1453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10488:1:8","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"10478:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1475,"nodeType":"Block","src":"10579:85:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1468,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"10627:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}],"id":1467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10619:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1466,"name":"address","nodeType":"ElementaryTypeName","src":"10619:7:8","typeDescriptions":{}}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10619:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1470,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"10642:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1472,"indexExpression":{"id":1471,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10646:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10642:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1465,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"10604:14:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10604:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1474,"nodeType":"RevertStatement","src":"10597:52:8"}]},"id":1476,"nodeType":"IfStatement","src":"10474:190:8","trueBody":{"id":1464,"nodeType":"Block","src":"10491:82:8","statements":[{"expression":{"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1455,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"10509:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1456,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"10526:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1458,"indexExpression":{"id":1457,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10533:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10526:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1459,"name":"BURN_WEIGHT_TOKEN_7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"10538:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10526:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10525:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10509:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1463,"nodeType":"ExpressionStatement","src":"10509:49:8"}]}},"id":1477,"nodeType":"IfStatement","src":"10369:295:8","trueBody":{"id":1449,"nodeType":"Block","src":"10386:82:8","statements":[{"expression":{"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1440,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"10404:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1441,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"10421:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1443,"indexExpression":{"id":1442,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10428:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10421:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1444,"name":"BURN_WEIGHT_TOKEN_6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"10433:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10421:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10420:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10404:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1448,"nodeType":"ExpressionStatement","src":"10404:49:8"}]}},"id":1478,"nodeType":"IfStatement","src":"10264:400:8","trueBody":{"id":1434,"nodeType":"Block","src":"10281:82:8","statements":[{"expression":{"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1425,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"10299:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1426,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"10316:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1428,"indexExpression":{"id":1427,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10323:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10316:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1429,"name":"BURN_WEIGHT_TOKEN_5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"10328:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10316:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1431,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10315:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10299:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1433,"nodeType":"ExpressionStatement","src":"10299:49:8"}]}},"id":1479,"nodeType":"IfStatement","src":"10159:505:8","trueBody":{"id":1419,"nodeType":"Block","src":"10176:82:8","statements":[{"expression":{"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1410,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"10194:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1411,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"10211:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1413,"indexExpression":{"id":1412,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10218:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10211:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1414,"name":"BURN_WEIGHT_TOKEN_4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"10223:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10211:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1416,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10210:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10194:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1418,"nodeType":"ExpressionStatement","src":"10194:49:8"}]}},"id":1480,"nodeType":"IfStatement","src":"10054:610:8","trueBody":{"id":1404,"nodeType":"Block","src":"10071:82:8","statements":[{"expression":{"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1395,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"10089:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1396,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"10106:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1398,"indexExpression":{"id":1397,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10113:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10106:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1399,"name":"BURN_WEIGHT_TOKEN_3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"10118:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10106:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1401,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10105:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10089:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1403,"nodeType":"ExpressionStatement","src":"10089:49:8"}]}},"id":1481,"nodeType":"IfStatement","src":"9949:715:8","trueBody":{"id":1389,"nodeType":"Block","src":"9966:82:8","statements":[{"expression":{"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1380,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"9984:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1381,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"10001:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1383,"indexExpression":{"id":1382,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"10008:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10001:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1384,"name":"BURN_WEIGHT_TOKEN_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"10013:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10001:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10000:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9984:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1388,"nodeType":"ExpressionStatement","src":"9984:49:8"}]}},"id":1482,"nodeType":"IfStatement","src":"9844:820:8","trueBody":{"id":1374,"nodeType":"Block","src":"9861:82:8","statements":[{"expression":{"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1365,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"9879:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1366,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"9896:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1368,"indexExpression":{"id":1367,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9903:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9896:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1369,"name":"BURN_WEIGHT_TOKEN_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"9908:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9896:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1371,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9895:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9879:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1373,"nodeType":"ExpressionStatement","src":"9879:49:8"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1335,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9687:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1336,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"9691:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9695:6:8","memberName":"length","nodeType":"MemberAccess","src":"9691:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9687:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1484,"initializationExpression":{"assignments":[1332],"declarations":[{"constant":false,"id":1332,"mutability":"mutable","name":"i","nameLocation":"9680:1:8","nodeType":"VariableDeclaration","scope":1484,"src":"9672:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1331,"name":"uint256","nodeType":"ElementaryTypeName","src":"9672:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1334,"initialValue":{"hexValue":"30","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9684:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9672:13:8"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9703:3:8","subExpression":{"id":1339,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"9703:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1341,"nodeType":"ExpressionStatement","src":"9703:3:8"},"nodeType":"ForStatement","src":"9667:1007:8"},{"assignments":[1486],"declarations":[{"constant":false,"id":1486,"mutability":"mutable","name":"userAddr","nameLocation":"10692:8:8","nodeType":"VariableDeclaration","scope":1659,"src":"10684:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1485,"name":"address","nodeType":"ElementaryTypeName","src":"10684:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1488,"initialValue":{"id":1487,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"10703:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10684:23:8"},{"assignments":[1490],"declarations":[{"constant":false,"id":1490,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"10785:16:8","nodeType":"VariableDeclaration","scope":1659,"src":"10777:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1489,"name":"uint256","nodeType":"ElementaryTypeName","src":"10777:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1494,"initialValue":{"baseExpression":{"id":1491,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"10804:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1493,"indexExpression":{"id":1492,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"10819:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10804:24:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10777:51:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1495,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"10843:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10848:6:8","memberName":"length","nodeType":"MemberAccess","src":"10843:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10857:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10843:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1603,"nodeType":"Block","src":"11712:249:8","statements":[{"assignments":[1584],"declarations":[{"constant":false,"id":1584,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"11734:29:8","nodeType":"VariableDeclaration","scope":1603,"src":"11726:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1583,"name":"uint256","nodeType":"ElementaryTypeName","src":"11726:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1588,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1585,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"11766:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11786:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11766:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11726:63:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1589,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"11807:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11839:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11807:33:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1602,"nodeType":"IfStatement","src":"11803:148:8","trueBody":{"id":1601,"nodeType":"Block","src":"11842:109:8","statements":[{"expression":{"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1592,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"11860:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1593,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"11876:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1594,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"11891:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11876:44:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1596,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11875:46:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1597,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"11924:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11875:61:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11860:76:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1600,"nodeType":"ExpressionStatement","src":"11860:76:8"}]}}]},"id":1604,"nodeType":"IfStatement","src":"10839:1122:8","trueBody":{"id":1582,"nodeType":"Block","src":"10860:846:8","statements":[{"assignments":[1503,1505],"declarations":[{"constant":false,"id":1503,"mutability":"mutable","name":"proof","nameLocation":"10892:5:8","nodeType":"VariableDeclaration","scope":1582,"src":"10875:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10875:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1502,"nodeType":"ArrayTypeName","src":"10875:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1505,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"10907:29:8","nodeType":"VariableDeclaration","scope":1582,"src":"10899:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1504,"name":"uint256","nodeType":"ElementaryTypeName","src":"10899:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1516,"initialValue":{"arguments":[{"id":1508,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"10951:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":1510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10958:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10958:7:8","typeDescriptions":{}}},"id":1511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"10958:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":1513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10969:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"10969:7:8","typeDescriptions":{}}}],"id":1514,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10957:20:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":1506,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10940:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10944:6:8","memberName":"decode","nodeType":"MemberAccess","src":"10940:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10940:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"10874:104:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1517,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"10997:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11017:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10997:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1520,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10996:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11025:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10996:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1572,"nodeType":"IfStatement","src":"10992:613:8","trueBody":{"id":1571,"nodeType":"Block","src":"11028:577:8","statements":[{"assignments":[1524],"declarations":[{"constant":false,"id":1524,"mutability":"mutable","name":"leaf","nameLocation":"11054:4:8","nodeType":"VariableDeclaration","scope":1571,"src":"11046:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11046:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1532,"initialValue":{"arguments":[{"arguments":[{"id":1528,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11088:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1529,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"11098:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1526,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11071:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11075:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"11071:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11071:57:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1525,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"11061:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11061:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"11046:83:8"},{"condition":{"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11151:32:8","subExpression":{"arguments":[{"id":1535,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"11165:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1536,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"11178:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1533,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"11152:5:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11158:6:8","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":270,"src":"11152:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11152:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1545,"nodeType":"IfStatement","src":"11147:139:8","trueBody":{"id":1544,"nodeType":"Block","src":"11185:101:8","statements":[{"errorCall":{"arguments":[{"id":1540,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11227:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1541,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"11237:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1539,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"11214:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11214:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1543,"nodeType":"RevertStatement","src":"11207:60:8"}]}},{"assignments":[1547],"declarations":[{"constant":false,"id":1547,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"11312:16:8","nodeType":"VariableDeclaration","scope":1571,"src":"11304:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1546,"name":"uint256","nodeType":"ElementaryTypeName","src":"11304:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1554,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1548,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"11332:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11365:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11332:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1551,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11331:38:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1552,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"11372:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11331:57:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11304:84:8"},{"expression":{"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1555,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"11406:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1557,"indexExpression":{"id":1556,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11421:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11406:24:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1558,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"11433:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11406:43:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1560,"nodeType":"ExpressionStatement","src":"11406:43:8"},{"eventCall":{"arguments":[{"id":1562,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"11492:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1563,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"11502:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1564,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"11520:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1561,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"11472:19:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11472:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1566,"nodeType":"EmitStatement","src":"11467:70:8"},{"expression":{"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1567,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"11555:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1568,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"11574:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11555:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1570,"nodeType":"ExpressionStatement","src":"11555:35:8"}]}},{"expression":{"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1573,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"11619:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1574,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"11635:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1575,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"11650:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11635:44:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1577,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11634:46:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1578,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"11683:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11634:61:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11619:76:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1581,"nodeType":"ExpressionStatement","src":"11619:76:8"}]}},{"assignments":[1606],"declarations":[{"constant":false,"id":1606,"mutability":"mutable","name":"rocMultiplier","nameLocation":"11979:13:8","nodeType":"VariableDeclaration","scope":1659,"src":"11971:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"11971:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1611,"initialValue":{"arguments":[{"id":1609,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"12003:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11995:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1607,"name":"uint128","nodeType":"ElementaryTypeName","src":"11995:7:8","typeDescriptions":{}}},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11995:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"11971:49:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1612,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"12034:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12050:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12034:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1620,"nodeType":"IfStatement","src":"12030:77:8","trueBody":{"id":1619,"nodeType":"Block","src":"12053:54:8","statements":[{"expression":{"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1615,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"12067:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":1616,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"12083:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12067:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1618,"nodeType":"ExpressionStatement","src":"12067:29:8"}]}},{"assignments":[1622],"declarations":[{"constant":false,"id":1622,"mutability":"mutable","name":"userTotalAshPerCycle","nameLocation":"12159:20:8","nodeType":"VariableDeclaration","scope":1659,"src":"12151:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"12151:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1630,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":1623,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"12182:15:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1625,"indexExpression":{"id":1624,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"12198:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12182:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1627,"indexExpression":{"id":1626,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"12205:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12182:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1628,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"12217:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12182:47:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12151:78:8"},{"expression":{"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1631,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"12239:15:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1634,"indexExpression":{"id":1632,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"12255:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12239:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1635,"indexExpression":{"id":1633,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"12262:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12239:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1636,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"12274:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12239:55:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1638,"nodeType":"ExpressionStatement","src":"12239:55:8"},{"expression":{"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1639,"name":"totalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"12338:16:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1641,"indexExpression":{"id":1640,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"12355:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12338:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1642,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"12365:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12338:39:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1644,"nodeType":"ExpressionStatement","src":"12338:39:8"},{"eventCall":{"arguments":[{"id":1646,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"12405:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1647,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"12415:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1648,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"12422:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1649,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"12427:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1650,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"12435:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1651,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"12449:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1652,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"12471:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1645,"name":"GenerateAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"12393:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256[] memory,uint256[] memory,uint256,uint256,uint256)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12393:95:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1654,"nodeType":"EmitStatement","src":"12388:100:8"},{"expression":{"expression":{"expression":{"id":1655,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12506:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1661","typeString":"contract OrbsBurnPool"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12511:22:8","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1660,"src":"12506:27:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12534:8:8","memberName":"selector","nodeType":"MemberAccess","src":"12506:36:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1285,"id":1658,"nodeType":"Return","src":"12499:43:8"}]},"documentation":{"id":1268,"nodeType":"StructuredDocumentation","src":"8568:523:8","text":" @notice Burn the tokens and calculate the ash.\n @param from The wallet address.\n @param ids The token IDs to burn.\n @param values The amount of tokens to burn.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid."},"functionSelector":"bc197c81","id":1660,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"9105:22:8","nodeType":"FunctionDefinition","overrides":{"id":1282,"nodeType":"OverrideSpecifier","overrides":[],"src":"9278:8:8"},"parameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1660,"src":"9137:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1269,"name":"address","nodeType":"ElementaryTypeName","src":"9137:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1272,"mutability":"mutable","name":"from","nameLocation":"9162:4:8","nodeType":"VariableDeclaration","scope":1660,"src":"9154:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1271,"name":"address","nodeType":"ElementaryTypeName","src":"9154:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"ids","nameLocation":"9195:3:8","nodeType":"VariableDeclaration","scope":1660,"src":"9176:22:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1273,"name":"uint256","nodeType":"ElementaryTypeName","src":"9176:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1274,"nodeType":"ArrayTypeName","src":"9176:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"values","nameLocation":"9227:6:8","nodeType":"VariableDeclaration","scope":1660,"src":"9208:25:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1276,"name":"uint256","nodeType":"ElementaryTypeName","src":"9208:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1277,"nodeType":"ArrayTypeName","src":"9208:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1280,"mutability":"mutable","name":"data","nameLocation":"9258:4:8","nodeType":"VariableDeclaration","scope":1660,"src":"9243:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1279,"name":"bytes","nodeType":"ElementaryTypeName","src":"9243:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9127:141:8"},"returnParameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1660,"src":"9296:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1283,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9296:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"9295:8:8"},"scope":1661,"src":"9096:3453:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1662,"src":"529:12022:8","usedErrors":[34,862,867,872,881,886,891,898,901,904],"usedEvents":[846,855]}],"src":"32:12520:8"},"id":8}},"contracts":{"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard, Token Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard, Token Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/burn/OrbsBurnPool.sol":{"OrbsBurnPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256[7]","name":"tokenBurnWeights","type":"uint256[7]"},{"internalType":"contract IERC1155Burnable","name":"orbOfPower","type":"address"},{"internalType":"contract IERC1155Burnable","name":"missingOrb","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"AlreadySetROCMultiplier","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"puzzleGameMultiplierNumerator","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"InvalidTokenAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"weight","type":"uint256"}],"name":"InvalidTokenBurnWeight","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidTokenValue","type":"error"},{"inputs":[],"name":"ZeroCycleDuration","type":"error"},{"inputs":[],"name":"ZeroMaxCycle","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"ash","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orbMultiplier","type":"uint256"}],"name":"GenerateAsh","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"curOrbMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedOrbMultiplier","type":"uint256"}],"name":"UpdateOrbMultiplier","type":"event"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_3","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_4","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_5","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_6","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_7","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB_TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ORB_OF_POWER","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROC_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orbMultipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.","kind":"dev","methods":{"constructor":{"details":"Throws if the cycle duration is zero.Throws if the max cycle is zero.","params":{"cycleDuration":"The duration of each cycle.","initialTime":"The initial time of the contract.","maxCycle":"The maximum cycle.","merkleRoot":"The Merkle root of the Puzzle Game multiplier claim.","missingOrb":"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.","orbOfPower":"The IERC1155Burnable erc1155 contract burn to generate ASH."}},"currentCycle()":{"returns":{"_0":"cycle The current cycle."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","ids":"The token IDs to burn.","values":"The amount of tokens to burn."},"returns":{"_0":"The ERC1155Received selector."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","id":"The token ID.","value":"The token value."},"returns":{"_0":"The ERC1155Received selector."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"OrbsBurnPool Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1066":{"entryPoint":null,"id":1066,"parameterSlots":7,"returnSlots":0},"@_181":{"entryPoint":null,"id":181,"parameterSlots":0,"returnSlots":0},"@layout_146":{"entryPoint":629,"id":146,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_100":{"entryPoint":683,"id":100,"parameterSlots":3,"returnSlots":0},"abi_decode_contract_IERC1155Burnable_fromMemory":{"entryPoint":798,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_array$_t_uint256_$7_memory_ptrt_contract$_IERC1155Burnable_$208t_contract$_IERC1155Burnable_$208_fromMemory":{"entryPoint":827,"id":null,"parameterSlots":2,"returnSlots":7},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":1060,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":1038,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":776,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:2161:9","nodeType":"YulBlock","src":"0:2161:9","statements":[{"nativeSrc":"6:3:9","nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nativeSrc":"46:95:9","nodeType":"YulBlock","src":"46:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:9","nodeType":"YulLiteral","src":"63:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:9","nodeType":"YulLiteral","src":"70:3:9","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:9","nodeType":"YulLiteral","src":"75:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:9","nodeType":"YulIdentifier","src":"66:3:9"},"nativeSrc":"66:20:9","nodeType":"YulFunctionCall","src":"66:20:9"}],"functionName":{"name":"mstore","nativeSrc":"56:6:9","nodeType":"YulIdentifier","src":"56:6:9"},"nativeSrc":"56:31:9","nodeType":"YulFunctionCall","src":"56:31:9"},"nativeSrc":"56:31:9","nodeType":"YulExpressionStatement","src":"56:31:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:9","nodeType":"YulLiteral","src":"103:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:9","nodeType":"YulLiteral","src":"106:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:9","nodeType":"YulIdentifier","src":"96:6:9"},"nativeSrc":"96:15:9","nodeType":"YulFunctionCall","src":"96:15:9"},"nativeSrc":"96:15:9","nodeType":"YulExpressionStatement","src":"96:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:9","nodeType":"YulLiteral","src":"127:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:9","nodeType":"YulLiteral","src":"130:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:9","nodeType":"YulIdentifier","src":"120:6:9"},"nativeSrc":"120:15:9","nodeType":"YulFunctionCall","src":"120:15:9"},"nativeSrc":"120:15:9","nodeType":"YulExpressionStatement","src":"120:15:9"}]},"name":"panic_error_0x41","nativeSrc":"14:127:9","nodeType":"YulFunctionDefinition","src":"14:127:9"},{"body":{"nativeSrc":"224:117:9","nodeType":"YulBlock","src":"224:117:9","statements":[{"nativeSrc":"234:22:9","nodeType":"YulAssignment","src":"234:22:9","value":{"arguments":[{"name":"offset","nativeSrc":"249:6:9","nodeType":"YulIdentifier","src":"249:6:9"}],"functionName":{"name":"mload","nativeSrc":"243:5:9","nodeType":"YulIdentifier","src":"243:5:9"},"nativeSrc":"243:13:9","nodeType":"YulFunctionCall","src":"243:13:9"},"variableNames":[{"name":"value","nativeSrc":"234:5:9","nodeType":"YulIdentifier","src":"234:5:9"}]},{"body":{"nativeSrc":"319:16:9","nodeType":"YulBlock","src":"319:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"328:1:9","nodeType":"YulLiteral","src":"328:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"331:1:9","nodeType":"YulLiteral","src":"331:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"321:6:9","nodeType":"YulIdentifier","src":"321:6:9"},"nativeSrc":"321:12:9","nodeType":"YulFunctionCall","src":"321:12:9"},"nativeSrc":"321:12:9","nodeType":"YulExpressionStatement","src":"321:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"278:5:9","nodeType":"YulIdentifier","src":"278:5:9"},{"arguments":[{"name":"value","nativeSrc":"289:5:9","nodeType":"YulIdentifier","src":"289:5:9"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"304:3:9","nodeType":"YulLiteral","src":"304:3:9","type":"","value":"160"},{"kind":"number","nativeSrc":"309:1:9","nodeType":"YulLiteral","src":"309:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"300:3:9","nodeType":"YulIdentifier","src":"300:3:9"},"nativeSrc":"300:11:9","nodeType":"YulFunctionCall","src":"300:11:9"},{"kind":"number","nativeSrc":"313:1:9","nodeType":"YulLiteral","src":"313:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"296:3:9","nodeType":"YulIdentifier","src":"296:3:9"},"nativeSrc":"296:19:9","nodeType":"YulFunctionCall","src":"296:19:9"}],"functionName":{"name":"and","nativeSrc":"285:3:9","nodeType":"YulIdentifier","src":"285:3:9"},"nativeSrc":"285:31:9","nodeType":"YulFunctionCall","src":"285:31:9"}],"functionName":{"name":"eq","nativeSrc":"275:2:9","nodeType":"YulIdentifier","src":"275:2:9"},"nativeSrc":"275:42:9","nodeType":"YulFunctionCall","src":"275:42:9"}],"functionName":{"name":"iszero","nativeSrc":"268:6:9","nodeType":"YulIdentifier","src":"268:6:9"},"nativeSrc":"268:50:9","nodeType":"YulFunctionCall","src":"268:50:9"},"nativeSrc":"265:70:9","nodeType":"YulIf","src":"265:70:9"}]},"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"146:195:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"203:6:9","nodeType":"YulTypedName","src":"203:6:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"214:5:9","nodeType":"YulTypedName","src":"214:5:9","type":""}],"src":"146:195:9"},{"body":{"nativeSrc":"600:1015:9","nodeType":"YulBlock","src":"600:1015:9","statements":[{"body":{"nativeSrc":"647:16:9","nodeType":"YulBlock","src":"647:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"656:1:9","nodeType":"YulLiteral","src":"656:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"659:1:9","nodeType":"YulLiteral","src":"659:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"649:6:9","nodeType":"YulIdentifier","src":"649:6:9"},"nativeSrc":"649:12:9","nodeType":"YulFunctionCall","src":"649:12:9"},"nativeSrc":"649:12:9","nodeType":"YulExpressionStatement","src":"649:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"621:7:9","nodeType":"YulIdentifier","src":"621:7:9"},{"name":"headStart","nativeSrc":"630:9:9","nodeType":"YulIdentifier","src":"630:9:9"}],"functionName":{"name":"sub","nativeSrc":"617:3:9","nodeType":"YulIdentifier","src":"617:3:9"},"nativeSrc":"617:23:9","nodeType":"YulFunctionCall","src":"617:23:9"},{"kind":"number","nativeSrc":"642:3:9","nodeType":"YulLiteral","src":"642:3:9","type":"","value":"416"}],"functionName":{"name":"slt","nativeSrc":"613:3:9","nodeType":"YulIdentifier","src":"613:3:9"},"nativeSrc":"613:33:9","nodeType":"YulFunctionCall","src":"613:33:9"},"nativeSrc":"610:53:9","nodeType":"YulIf","src":"610:53:9"},{"nativeSrc":"672:26:9","nodeType":"YulAssignment","src":"672:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"688:9:9","nodeType":"YulIdentifier","src":"688:9:9"}],"functionName":{"name":"mload","nativeSrc":"682:5:9","nodeType":"YulIdentifier","src":"682:5:9"},"nativeSrc":"682:16:9","nodeType":"YulFunctionCall","src":"682:16:9"},"variableNames":[{"name":"value0","nativeSrc":"672:6:9","nodeType":"YulIdentifier","src":"672:6:9"}]},{"nativeSrc":"707:12:9","nodeType":"YulVariableDeclaration","src":"707:12:9","value":{"kind":"number","nativeSrc":"717:2:9","nodeType":"YulLiteral","src":"717:2:9","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"711:2:9","nodeType":"YulTypedName","src":"711:2:9","type":""}]},{"nativeSrc":"728:35:9","nodeType":"YulAssignment","src":"728:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"748:9:9","nodeType":"YulIdentifier","src":"748:9:9"},{"kind":"number","nativeSrc":"759:2:9","nodeType":"YulLiteral","src":"759:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"744:3:9","nodeType":"YulIdentifier","src":"744:3:9"},"nativeSrc":"744:18:9","nodeType":"YulFunctionCall","src":"744:18:9"}],"functionName":{"name":"mload","nativeSrc":"738:5:9","nodeType":"YulIdentifier","src":"738:5:9"},"nativeSrc":"738:25:9","nodeType":"YulFunctionCall","src":"738:25:9"},"variableNames":[{"name":"value1","nativeSrc":"728:6:9","nodeType":"YulIdentifier","src":"728:6:9"}]},{"nativeSrc":"772:35:9","nodeType":"YulAssignment","src":"772:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"792:9:9","nodeType":"YulIdentifier","src":"792:9:9"},{"kind":"number","nativeSrc":"803:2:9","nodeType":"YulLiteral","src":"803:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"788:3:9","nodeType":"YulIdentifier","src":"788:3:9"},"nativeSrc":"788:18:9","nodeType":"YulFunctionCall","src":"788:18:9"}],"functionName":{"name":"mload","nativeSrc":"782:5:9","nodeType":"YulIdentifier","src":"782:5:9"},"nativeSrc":"782:25:9","nodeType":"YulFunctionCall","src":"782:25:9"},"variableNames":[{"name":"value2","nativeSrc":"772:6:9","nodeType":"YulIdentifier","src":"772:6:9"}]},{"nativeSrc":"816:35:9","nodeType":"YulAssignment","src":"816:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"836:9:9","nodeType":"YulIdentifier","src":"836:9:9"},{"kind":"number","nativeSrc":"847:2:9","nodeType":"YulLiteral","src":"847:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"832:3:9","nodeType":"YulIdentifier","src":"832:3:9"},"nativeSrc":"832:18:9","nodeType":"YulFunctionCall","src":"832:18:9"}],"functionName":{"name":"mload","nativeSrc":"826:5:9","nodeType":"YulIdentifier","src":"826:5:9"},"nativeSrc":"826:25:9","nodeType":"YulFunctionCall","src":"826:25:9"},"variableNames":[{"name":"value3","nativeSrc":"816:6:9","nodeType":"YulIdentifier","src":"816:6:9"}]},{"body":{"nativeSrc":"905:16:9","nodeType":"YulBlock","src":"905:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"914:1:9","nodeType":"YulLiteral","src":"914:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"917:1:9","nodeType":"YulLiteral","src":"917:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"907:6:9","nodeType":"YulIdentifier","src":"907:6:9"},"nativeSrc":"907:12:9","nodeType":"YulFunctionCall","src":"907:12:9"},"nativeSrc":"907:12:9","nodeType":"YulExpressionStatement","src":"907:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"878:9:9","nodeType":"YulIdentifier","src":"878:9:9"},{"kind":"number","nativeSrc":"889:3:9","nodeType":"YulLiteral","src":"889:3:9","type":"","value":"159"}],"functionName":{"name":"add","nativeSrc":"874:3:9","nodeType":"YulIdentifier","src":"874:3:9"},"nativeSrc":"874:19:9","nodeType":"YulFunctionCall","src":"874:19:9"},{"name":"dataEnd","nativeSrc":"895:7:9","nodeType":"YulIdentifier","src":"895:7:9"}],"functionName":{"name":"slt","nativeSrc":"870:3:9","nodeType":"YulIdentifier","src":"870:3:9"},"nativeSrc":"870:33:9","nodeType":"YulFunctionCall","src":"870:33:9"}],"functionName":{"name":"iszero","nativeSrc":"863:6:9","nodeType":"YulIdentifier","src":"863:6:9"},"nativeSrc":"863:41:9","nodeType":"YulFunctionCall","src":"863:41:9"},"nativeSrc":"860:61:9","nodeType":"YulIf","src":"860:61:9"},{"nativeSrc":"930:23:9","nodeType":"YulVariableDeclaration","src":"930:23:9","value":{"arguments":[{"kind":"number","nativeSrc":"950:2:9","nodeType":"YulLiteral","src":"950:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"944:5:9","nodeType":"YulIdentifier","src":"944:5:9"},"nativeSrc":"944:9:9","nodeType":"YulFunctionCall","src":"944:9:9"},"variables":[{"name":"memPtr","nativeSrc":"934:6:9","nodeType":"YulTypedName","src":"934:6:9","type":""}]},{"nativeSrc":"962:34:9","nodeType":"YulVariableDeclaration","src":"962:34:9","value":{"arguments":[{"name":"memPtr","nativeSrc":"984:6:9","nodeType":"YulIdentifier","src":"984:6:9"},{"kind":"number","nativeSrc":"992:3:9","nodeType":"YulLiteral","src":"992:3:9","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"980:3:9","nodeType":"YulIdentifier","src":"980:3:9"},"nativeSrc":"980:16:9","nodeType":"YulFunctionCall","src":"980:16:9"},"variables":[{"name":"newFreePtr","nativeSrc":"966:10:9","nodeType":"YulTypedName","src":"966:10:9","type":""}]},{"body":{"nativeSrc":"1071:22:9","nodeType":"YulBlock","src":"1071:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1073:16:9","nodeType":"YulIdentifier","src":"1073:16:9"},"nativeSrc":"1073:18:9","nodeType":"YulFunctionCall","src":"1073:18:9"},"nativeSrc":"1073:18:9","nodeType":"YulExpressionStatement","src":"1073:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1014:10:9","nodeType":"YulIdentifier","src":"1014:10:9"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1034:2:9","nodeType":"YulLiteral","src":"1034:2:9","type":"","value":"64"},{"kind":"number","nativeSrc":"1038:1:9","nodeType":"YulLiteral","src":"1038:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1030:3:9","nodeType":"YulIdentifier","src":"1030:3:9"},"nativeSrc":"1030:10:9","nodeType":"YulFunctionCall","src":"1030:10:9"},{"kind":"number","nativeSrc":"1042:1:9","nodeType":"YulLiteral","src":"1042:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1026:3:9","nodeType":"YulIdentifier","src":"1026:3:9"},"nativeSrc":"1026:18:9","nodeType":"YulFunctionCall","src":"1026:18:9"}],"functionName":{"name":"gt","nativeSrc":"1011:2:9","nodeType":"YulIdentifier","src":"1011:2:9"},"nativeSrc":"1011:34:9","nodeType":"YulFunctionCall","src":"1011:34:9"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1050:10:9","nodeType":"YulIdentifier","src":"1050:10:9"},{"name":"memPtr","nativeSrc":"1062:6:9","nodeType":"YulIdentifier","src":"1062:6:9"}],"functionName":{"name":"lt","nativeSrc":"1047:2:9","nodeType":"YulIdentifier","src":"1047:2:9"},"nativeSrc":"1047:22:9","nodeType":"YulFunctionCall","src":"1047:22:9"}],"functionName":{"name":"or","nativeSrc":"1008:2:9","nodeType":"YulIdentifier","src":"1008:2:9"},"nativeSrc":"1008:62:9","nodeType":"YulFunctionCall","src":"1008:62:9"},"nativeSrc":"1005:88:9","nodeType":"YulIf","src":"1005:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1109:2:9","nodeType":"YulLiteral","src":"1109:2:9","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1113:10:9","nodeType":"YulIdentifier","src":"1113:10:9"}],"functionName":{"name":"mstore","nativeSrc":"1102:6:9","nodeType":"YulIdentifier","src":"1102:6:9"},"nativeSrc":"1102:22:9","nodeType":"YulFunctionCall","src":"1102:22:9"},"nativeSrc":"1102:22:9","nodeType":"YulExpressionStatement","src":"1102:22:9"},{"nativeSrc":"1133:17:9","nodeType":"YulVariableDeclaration","src":"1133:17:9","value":{"name":"memPtr","nativeSrc":"1144:6:9","nodeType":"YulIdentifier","src":"1144:6:9"},"variables":[{"name":"dst","nativeSrc":"1137:3:9","nodeType":"YulTypedName","src":"1137:3:9","type":""}]},{"nativeSrc":"1159:33:9","nodeType":"YulVariableDeclaration","src":"1159:33:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1177:9:9","nodeType":"YulIdentifier","src":"1177:9:9"},{"kind":"number","nativeSrc":"1188:3:9","nodeType":"YulLiteral","src":"1188:3:9","type":"","value":"352"}],"functionName":{"name":"add","nativeSrc":"1173:3:9","nodeType":"YulIdentifier","src":"1173:3:9"},"nativeSrc":"1173:19:9","nodeType":"YulFunctionCall","src":"1173:19:9"},"variables":[{"name":"srcEnd","nativeSrc":"1163:6:9","nodeType":"YulTypedName","src":"1163:6:9","type":""}]},{"body":{"nativeSrc":"1224:16:9","nodeType":"YulBlock","src":"1224:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1233:1:9","nodeType":"YulLiteral","src":"1233:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1236:1:9","nodeType":"YulLiteral","src":"1236:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1226:6:9","nodeType":"YulIdentifier","src":"1226:6:9"},"nativeSrc":"1226:12:9","nodeType":"YulFunctionCall","src":"1226:12:9"},"nativeSrc":"1226:12:9","nodeType":"YulExpressionStatement","src":"1226:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"1207:6:9","nodeType":"YulIdentifier","src":"1207:6:9"},{"name":"dataEnd","nativeSrc":"1215:7:9","nodeType":"YulIdentifier","src":"1215:7:9"}],"functionName":{"name":"gt","nativeSrc":"1204:2:9","nodeType":"YulIdentifier","src":"1204:2:9"},"nativeSrc":"1204:19:9","nodeType":"YulFunctionCall","src":"1204:19:9"},"nativeSrc":"1201:39:9","nodeType":"YulIf","src":"1201:39:9"},{"nativeSrc":"1249:30:9","nodeType":"YulVariableDeclaration","src":"1249:30:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1264:9:9","nodeType":"YulIdentifier","src":"1264:9:9"},{"kind":"number","nativeSrc":"1275:3:9","nodeType":"YulLiteral","src":"1275:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1260:3:9","nodeType":"YulIdentifier","src":"1260:3:9"},"nativeSrc":"1260:19:9","nodeType":"YulFunctionCall","src":"1260:19:9"},"variables":[{"name":"src","nativeSrc":"1253:3:9","nodeType":"YulTypedName","src":"1253:3:9","type":""}]},{"body":{"nativeSrc":"1344:79:9","nodeType":"YulBlock","src":"1344:79:9","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"1365:3:9","nodeType":"YulIdentifier","src":"1365:3:9"},{"arguments":[{"name":"src","nativeSrc":"1376:3:9","nodeType":"YulIdentifier","src":"1376:3:9"}],"functionName":{"name":"mload","nativeSrc":"1370:5:9","nodeType":"YulIdentifier","src":"1370:5:9"},"nativeSrc":"1370:10:9","nodeType":"YulFunctionCall","src":"1370:10:9"}],"functionName":{"name":"mstore","nativeSrc":"1358:6:9","nodeType":"YulIdentifier","src":"1358:6:9"},"nativeSrc":"1358:23:9","nodeType":"YulFunctionCall","src":"1358:23:9"},"nativeSrc":"1358:23:9","nodeType":"YulExpressionStatement","src":"1358:23:9"},{"nativeSrc":"1394:19:9","nodeType":"YulAssignment","src":"1394:19:9","value":{"arguments":[{"name":"dst","nativeSrc":"1405:3:9","nodeType":"YulIdentifier","src":"1405:3:9"},{"name":"_1","nativeSrc":"1410:2:9","nodeType":"YulIdentifier","src":"1410:2:9"}],"functionName":{"name":"add","nativeSrc":"1401:3:9","nodeType":"YulIdentifier","src":"1401:3:9"},"nativeSrc":"1401:12:9","nodeType":"YulFunctionCall","src":"1401:12:9"},"variableNames":[{"name":"dst","nativeSrc":"1394:3:9","nodeType":"YulIdentifier","src":"1394:3:9"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"1299:3:9","nodeType":"YulIdentifier","src":"1299:3:9"},{"name":"srcEnd","nativeSrc":"1304:6:9","nodeType":"YulIdentifier","src":"1304:6:9"}],"functionName":{"name":"lt","nativeSrc":"1296:2:9","nodeType":"YulIdentifier","src":"1296:2:9"},"nativeSrc":"1296:15:9","nodeType":"YulFunctionCall","src":"1296:15:9"},"nativeSrc":"1288:135:9","nodeType":"YulForLoop","post":{"nativeSrc":"1312:23:9","nodeType":"YulBlock","src":"1312:23:9","statements":[{"nativeSrc":"1314:19:9","nodeType":"YulAssignment","src":"1314:19:9","value":{"arguments":[{"name":"src","nativeSrc":"1325:3:9","nodeType":"YulIdentifier","src":"1325:3:9"},{"name":"_1","nativeSrc":"1330:2:9","nodeType":"YulIdentifier","src":"1330:2:9"}],"functionName":{"name":"add","nativeSrc":"1321:3:9","nodeType":"YulIdentifier","src":"1321:3:9"},"nativeSrc":"1321:12:9","nodeType":"YulFunctionCall","src":"1321:12:9"},"variableNames":[{"name":"src","nativeSrc":"1314:3:9","nodeType":"YulIdentifier","src":"1314:3:9"}]}]},"pre":{"nativeSrc":"1292:3:9","nodeType":"YulBlock","src":"1292:3:9","statements":[]},"src":"1288:135:9"},{"nativeSrc":"1432:16:9","nodeType":"YulAssignment","src":"1432:16:9","value":{"name":"memPtr","nativeSrc":"1442:6:9","nodeType":"YulIdentifier","src":"1442:6:9"},"variableNames":[{"name":"value4","nativeSrc":"1432:6:9","nodeType":"YulIdentifier","src":"1432:6:9"}]},{"nativeSrc":"1457:65:9","nodeType":"YulAssignment","src":"1457:65:9","value":{"arguments":[{"name":"srcEnd","nativeSrc":"1515:6:9","nodeType":"YulIdentifier","src":"1515:6:9"}],"functionName":{"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"1467:47:9","nodeType":"YulIdentifier","src":"1467:47:9"},"nativeSrc":"1467:55:9","nodeType":"YulFunctionCall","src":"1467:55:9"},"variableNames":[{"name":"value5","nativeSrc":"1457:6:9","nodeType":"YulIdentifier","src":"1457:6:9"}]},{"nativeSrc":"1531:78:9","nodeType":"YulAssignment","src":"1531:78:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1593:9:9","nodeType":"YulIdentifier","src":"1593:9:9"},{"kind":"number","nativeSrc":"1604:3:9","nodeType":"YulLiteral","src":"1604:3:9","type":"","value":"384"}],"functionName":{"name":"add","nativeSrc":"1589:3:9","nodeType":"YulIdentifier","src":"1589:3:9"},"nativeSrc":"1589:19:9","nodeType":"YulFunctionCall","src":"1589:19:9"}],"functionName":{"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"1541:47:9","nodeType":"YulIdentifier","src":"1541:47:9"},"nativeSrc":"1541:68:9","nodeType":"YulFunctionCall","src":"1541:68:9"},"variableNames":[{"name":"value6","nativeSrc":"1531:6:9","nodeType":"YulIdentifier","src":"1531:6:9"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_array$_t_uint256_$7_memory_ptrt_contract$_IERC1155Burnable_$208t_contract$_IERC1155Burnable_$208_fromMemory","nativeSrc":"346:1269:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"518:9:9","nodeType":"YulTypedName","src":"518:9:9","type":""},{"name":"dataEnd","nativeSrc":"529:7:9","nodeType":"YulTypedName","src":"529:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"541:6:9","nodeType":"YulTypedName","src":"541:6:9","type":""},{"name":"value1","nativeSrc":"549:6:9","nodeType":"YulTypedName","src":"549:6:9","type":""},{"name":"value2","nativeSrc":"557:6:9","nodeType":"YulTypedName","src":"557:6:9","type":""},{"name":"value3","nativeSrc":"565:6:9","nodeType":"YulTypedName","src":"565:6:9","type":""},{"name":"value4","nativeSrc":"573:6:9","nodeType":"YulTypedName","src":"573:6:9","type":""},{"name":"value5","nativeSrc":"581:6:9","nodeType":"YulTypedName","src":"581:6:9","type":""},{"name":"value6","nativeSrc":"589:6:9","nodeType":"YulTypedName","src":"589:6:9","type":""}],"src":"346:1269:9"},{"body":{"nativeSrc":"1652:95:9","nodeType":"YulBlock","src":"1652:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1669:1:9","nodeType":"YulLiteral","src":"1669:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1676:3:9","nodeType":"YulLiteral","src":"1676:3:9","type":"","value":"224"},{"kind":"number","nativeSrc":"1681:10:9","nodeType":"YulLiteral","src":"1681:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1672:3:9","nodeType":"YulIdentifier","src":"1672:3:9"},"nativeSrc":"1672:20:9","nodeType":"YulFunctionCall","src":"1672:20:9"}],"functionName":{"name":"mstore","nativeSrc":"1662:6:9","nodeType":"YulIdentifier","src":"1662:6:9"},"nativeSrc":"1662:31:9","nodeType":"YulFunctionCall","src":"1662:31:9"},"nativeSrc":"1662:31:9","nodeType":"YulExpressionStatement","src":"1662:31:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1709:1:9","nodeType":"YulLiteral","src":"1709:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"1712:4:9","nodeType":"YulLiteral","src":"1712:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"1702:6:9","nodeType":"YulIdentifier","src":"1702:6:9"},"nativeSrc":"1702:15:9","nodeType":"YulFunctionCall","src":"1702:15:9"},"nativeSrc":"1702:15:9","nodeType":"YulExpressionStatement","src":"1702:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1733:1:9","nodeType":"YulLiteral","src":"1733:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1736:4:9","nodeType":"YulLiteral","src":"1736:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1726:6:9","nodeType":"YulIdentifier","src":"1726:6:9"},"nativeSrc":"1726:15:9","nodeType":"YulFunctionCall","src":"1726:15:9"},"nativeSrc":"1726:15:9","nodeType":"YulExpressionStatement","src":"1726:15:9"}]},"name":"panic_error_0x32","nativeSrc":"1620:127:9","nodeType":"YulFunctionDefinition","src":"1620:127:9"},{"body":{"nativeSrc":"1853:76:9","nodeType":"YulBlock","src":"1853:76:9","statements":[{"nativeSrc":"1863:26:9","nodeType":"YulAssignment","src":"1863:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1875:9:9","nodeType":"YulIdentifier","src":"1875:9:9"},{"kind":"number","nativeSrc":"1886:2:9","nodeType":"YulLiteral","src":"1886:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1871:3:9","nodeType":"YulIdentifier","src":"1871:3:9"},"nativeSrc":"1871:18:9","nodeType":"YulFunctionCall","src":"1871:18:9"},"variableNames":[{"name":"tail","nativeSrc":"1863:4:9","nodeType":"YulIdentifier","src":"1863:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1905:9:9","nodeType":"YulIdentifier","src":"1905:9:9"},{"name":"value0","nativeSrc":"1916:6:9","nodeType":"YulIdentifier","src":"1916:6:9"}],"functionName":{"name":"mstore","nativeSrc":"1898:6:9","nodeType":"YulIdentifier","src":"1898:6:9"},"nativeSrc":"1898:25:9","nodeType":"YulFunctionCall","src":"1898:25:9"},"nativeSrc":"1898:25:9","nodeType":"YulExpressionStatement","src":"1898:25:9"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"1752:177:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1822:9:9","nodeType":"YulTypedName","src":"1822:9:9","type":""},{"name":"value0","nativeSrc":"1833:6:9","nodeType":"YulTypedName","src":"1833:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1844:4:9","nodeType":"YulTypedName","src":"1844:4:9","type":""}],"src":"1752:177:9"},{"body":{"nativeSrc":"1983:176:9","nodeType":"YulBlock","src":"1983:176:9","statements":[{"nativeSrc":"1993:17:9","nodeType":"YulAssignment","src":"1993:17:9","value":{"arguments":[{"name":"x","nativeSrc":"2005:1:9","nodeType":"YulIdentifier","src":"2005:1:9"},{"name":"y","nativeSrc":"2008:1:9","nodeType":"YulIdentifier","src":"2008:1:9"}],"functionName":{"name":"sub","nativeSrc":"2001:3:9","nodeType":"YulIdentifier","src":"2001:3:9"},"nativeSrc":"2001:9:9","nodeType":"YulFunctionCall","src":"2001:9:9"},"variableNames":[{"name":"diff","nativeSrc":"1993:4:9","nodeType":"YulIdentifier","src":"1993:4:9"}]},{"body":{"nativeSrc":"2042:111:9","nodeType":"YulBlock","src":"2042:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2063:1:9","nodeType":"YulLiteral","src":"2063:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2070:3:9","nodeType":"YulLiteral","src":"2070:3:9","type":"","value":"224"},{"kind":"number","nativeSrc":"2075:10:9","nodeType":"YulLiteral","src":"2075:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2066:3:9","nodeType":"YulIdentifier","src":"2066:3:9"},"nativeSrc":"2066:20:9","nodeType":"YulFunctionCall","src":"2066:20:9"}],"functionName":{"name":"mstore","nativeSrc":"2056:6:9","nodeType":"YulIdentifier","src":"2056:6:9"},"nativeSrc":"2056:31:9","nodeType":"YulFunctionCall","src":"2056:31:9"},"nativeSrc":"2056:31:9","nodeType":"YulExpressionStatement","src":"2056:31:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2107:1:9","nodeType":"YulLiteral","src":"2107:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"2110:4:9","nodeType":"YulLiteral","src":"2110:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"2100:6:9","nodeType":"YulIdentifier","src":"2100:6:9"},"nativeSrc":"2100:15:9","nodeType":"YulFunctionCall","src":"2100:15:9"},"nativeSrc":"2100:15:9","nodeType":"YulExpressionStatement","src":"2100:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2135:1:9","nodeType":"YulLiteral","src":"2135:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2138:4:9","nodeType":"YulLiteral","src":"2138:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2128:6:9","nodeType":"YulIdentifier","src":"2128:6:9"},"nativeSrc":"2128:15:9","nodeType":"YulFunctionCall","src":"2128:15:9"},"nativeSrc":"2128:15:9","nodeType":"YulExpressionStatement","src":"2128:15:9"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"2025:4:9","nodeType":"YulIdentifier","src":"2025:4:9"},{"name":"x","nativeSrc":"2031:1:9","nodeType":"YulIdentifier","src":"2031:1:9"}],"functionName":{"name":"gt","nativeSrc":"2022:2:9","nodeType":"YulIdentifier","src":"2022:2:9"},"nativeSrc":"2022:11:9","nodeType":"YulFunctionCall","src":"2022:11:9"},"nativeSrc":"2019:134:9","nodeType":"YulIf","src":"2019:134:9"}]},"name":"checked_sub_t_uint256","nativeSrc":"1934:225:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1965:1:9","nodeType":"YulTypedName","src":"1965:1:9","type":""},{"name":"y","nativeSrc":"1968:1:9","nodeType":"YulTypedName","src":"1968:1:9","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1974:4:9","nodeType":"YulTypedName","src":"1974:4:9","type":""}],"src":"1934:225:9"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_contract_IERC1155Burnable_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_array$_t_uint256_$7_memory_ptrt_contract$_IERC1155Burnable_$208t_contract$_IERC1155Burnable_$208_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 416) { revert(0, 0) }\n        value0 := mload(headStart)\n        let _1 := 32\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        if iszero(slt(add(headStart, 159), dataEnd)) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 224)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let srcEnd := add(headStart, 352)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(headStart, 128)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value4 := memPtr\n        value5 := abi_decode_contract_IERC1155Burnable_fromMemory(srcEnd)\n        value6 := abi_decode_contract_IERC1155Burnable_fromMemory(add(headStart, 384))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6102206040523480156200001257600080fd5b5060405162001e0938038062001e0983398101604081905262000035916200033b565b62000055630271189760e51b60016200004d62000275565b9190620002ab565b6101a087905260008690036200007e5760405163b870efbd60e01b815260040160405180910390fd5b6101c08690526000859003620000a757604051637e5e559b60e11b815260040160405180910390fd5b60005b60078110156200024857838160078110620000c957620000c96200040e565b60200201516000036200011657838160078110620000eb57620000eb6200040e565b602002015160405163276b6ff560e01b81526004016200010d91815260200190565b60405180910390fd5b8060000362000142578381600781106200013457620001346200040e565b60200201516080526200023f565b806001036200016e578381600781106200016057620001606200040e565b602002015160a0526200023f565b806002036200019a578381600781106200018c576200018c6200040e565b602002015160c0526200023f565b80600303620001c657838160078110620001b857620001b86200040e565b602002015160e0526200023f565b80600403620001f357838160078110620001e457620001e46200040e565b6020020151610100526200023f565b8060050362000220578381600781106200021157620002116200040e565b6020020151610120526200023f565b8381600781106200023557620002356200040e565b6020020151610140525b600101620000aa565b506101e09490945261020092909252506001600160a01b0390811661016052166101805250620004469050565b600080620002a560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000424565b92915050565b600160e01b6001600160e01b0319831601620002da576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200033657600080fd5b919050565b60008060008060008060006101a0888a0312156200035857600080fd5b875196506020808901519650604089015195506060890151945089609f8a01126200038257600080fd5b60405160e081016001600160401b0381118282101715620003a757620003a762000308565b604052806101608b018c811115620003be57600080fd5b60808c015b81811015620003dc5780518352918401918401620003c3565b50829650620003eb816200031e565b9550505050506200040061018089016200031e565b905092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b81810381811115620002a557634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516118b6620005536000396000818161034b01528181610aff01526110840152600081816101e9015281816105b30152610e8501526000818161045b01526104d50152600081816102f901526104f90152600081816104340152610d9101526000818161025f0152818161054701526109a501526000818161040d01526109720152600081816102ab015261091f01526000818161049501526108cc015260008181610210015261087901526000818161037a01526108260152600081816102d201526107d30152600081816101b4015261075e01526118b66000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806351e75e8b116100d8578063bc197c811161008c578063cd421fbf11610066578063cd421fbf14610456578063f23a6e611461047d578063f95d10161461049057600080fd5b8063bc197c81146103c4578063c131754e14610408578063cd18a34f1461042f57600080fd5b8063aa918fd5116100bd578063aa918fd514610375578063ab504e731461039c578063bab2f552146103bc57600080fd5b806351e75e8b1461034657806355f5b0a81461036d57600080fd5b80631de0e40b1161013a578063424ab4f711610114578063424ab4f7146102cd578063491bde66146102f45780634dac1c2b1461031b57600080fd5b80631de0e40b1461025257806328a979cf1461025a5780633838a201146102a657600080fd5b8063043063bc1161016b578063043063bc146101e45780630455645a1461020b57806312828b7f1461023257600080fd5b806301ffc9a7146101875780630277640e146101af575b600080fd5b61019a61019536600461132c565b6104b7565b60405190151581526020015b60405180910390f35b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101a6565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d6610240366004611397565b60026020526000908152604090205481565b6101d6600181565b6102817f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a6565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d66103293660046113b2565b600160209081526000928352604080842090915290825290205481565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d6600281565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d66103aa3660046113de565b60006020819052908152604090205481565b6101d66104d1565b6103d76103d2366004611485565b61052d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101a6565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6102817f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6103d761048b366004611540565b610d77565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b60006104cb826104c5611199565b906111c7565b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000061051e7f0000000000000000000000000000000000000000000000000000000000000000426115e7565b61052891906115fa565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105a5576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006105af6104d1565b90507f000000000000000000000000000000000000000000000000000000000000000081111561060e576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161059c565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906106529030908c908c908c908c90600401611680565b600060405180830381600087803b15801561066c57600080fd5b505af1158015610680573d6000803e3d6000fd5b505050506000805b88811015610a37578787828181106106a2576106a26116cf565b9050602002013560000361073c57338a8a838181106106c3576106c36116cf565b905060200201358989848181106106dc576106dc6116cf565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909516600486015260248501939093525060209091020135604482015260640161059c565b89898281811061074e5761074e6116cf565b905060200201356001036107b1577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b905060200201356107a091906116fe565b6107aa9083611715565b9150610a2f565b8989828181106107c3576107c36116cf565b90506020020135600203610804577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b898982818110610816576108166116cf565b90506020020135600303610857577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b898982818110610869576108696116cf565b905060200201356004036108aa577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b8989828181106108bc576108bc6116cf565b905060200201356005036108fd577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b89898281811061090f5761090f6116cf565b90506020020135600603610950577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b898982818110610962576109626116cf565b905060200201356007036109a3577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106109d6576109d66116cf565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440161059c565b600101610688565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610c0957600080610a75888a018a611757565b91509150608083901c600003610be9576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610b24837f0000000000000000000000000000000000000000000000000000000000000000836112a1565b610b79576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260440161059c565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610bf682876116fe565b610c0091906115fa565b94505050610c30565b608081901c8015610c2e57612710610c2182866116fe565b610c2b91906115fa565b93505b505b6fffffffffffffffffffffffffffffffff81168015610c5657610c5381856116fe565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610c91908690611715565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610ce1908490611715565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610d3b9796959493929190611839565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610dea576040517f7330680300000000000000000000000000000000000000000000000000000000815233600482015260240161059c565b60018514610e2d576040517f1912ea510000000000000000000000000000000000000000000000000000000081523360048201526024810186905260440161059c565b83600114610e77576040517fe1f366e9000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044810185905260640161059c565b6000610e816104d1565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610ee0576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161059c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610f68576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260240161059c565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610fc757600080fd5b505af1158015610fdb573d6000803e3d6000fd5b505050600282179050841561110857608082901c6000036111085760008061100587890189611757565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506110a9837f0000000000000000000000000000000000000000000000000000000000000000836112a1565b6110fe576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201526024810183905260440161059c565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b6000806104cb60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6115e7565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611217575060006104cb565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611268575060016104cb565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000826112ae85846112b7565b14949350505050565b600081815b84518110156112f2576112e8828683815181106112db576112db6116cf565b60200260200101516112fa565b91506001016112bc565b509392505050565b6000818310611316576000828152602084905260409020611325565b60008381526020839052604090205b9392505050565b60006020828403121561133e57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461132557600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461139257600080fd5b919050565b6000602082840312156113a957600080fd5b6113258261136e565b600080604083850312156113c557600080fd5b823591506113d56020840161136e565b90509250929050565b6000602082840312156113f057600080fd5b5035919050565b60008083601f84011261140957600080fd5b50813567ffffffffffffffff81111561142157600080fd5b6020830191508360208260051b850101111561143c57600080fd5b9250929050565b60008083601f84011261145557600080fd5b50813567ffffffffffffffff81111561146d57600080fd5b60208301915083602082850101111561143c57600080fd5b60008060008060008060008060a0898b0312156114a157600080fd5b6114aa8961136e565b97506114b860208a0161136e565b9650604089013567ffffffffffffffff808211156114d557600080fd5b6114e18c838d016113f7565b909850965060608b01359150808211156114fa57600080fd5b6115068c838d016113f7565b909650945060808b013591508082111561151f57600080fd5b5061152c8b828c01611443565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561155957600080fd5b6115628761136e565b95506115706020880161136e565b94506040870135935060608701359250608087013567ffffffffffffffff81111561159a57600080fd5b6115a689828a01611443565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156104cb576104cb6115b8565b600082611630577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561166757600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006116b0606083018688611635565b82810360408401526116c3818587611635565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820281158282048414176104cb576104cb6115b8565b808201808211156104cb576104cb6115b8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561176a57600080fd5b823567ffffffffffffffff8082111561178257600080fd5b818501915085601f83011261179657600080fd5b81356020828211156117aa576117aa611728565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811086821117156117ed576117ed611728565b60405292835281830193508481018201928984111561180b57600080fd5b948201945b8386101561182957853585529482019493820193611810565b9997909101359750505050505050565b60a08152600061184d60a08301898b611635565b828103602084015261186081888a611635565b60408401969096525050606081019290925260809091015294935050505056fea26469706673582212201ad7517f220469814abd0dab20c4025cfb17ce7ed5fc9ae0cd9c3526888154df64736f6c63430008160033","opcodes":"PUSH2 0x220 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1E09 CODESIZE SUB DUP1 PUSH3 0x1E09 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x33B JUMP JUMPDEST PUSH3 0x55 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x4D PUSH3 0x275 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x2AB JUMP JUMPDEST PUSH2 0x1A0 DUP8 SWAP1 MSTORE PUSH1 0x0 DUP7 SWAP1 SUB PUSH3 0x7E JUMPI PUSH1 0x40 MLOAD PUSH4 0xB870EFBD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C0 DUP7 SWAP1 MSTORE PUSH1 0x0 DUP6 SWAP1 SUB PUSH3 0xA7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E5E559B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP2 LT ISZERO PUSH3 0x248 JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0xC9 JUMPI PUSH3 0xC9 PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x0 SUB PUSH3 0x116 JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0xEB JUMPI PUSH3 0xEB PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x276B6FF5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x10D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 SUB PUSH3 0x142 JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0x134 JUMPI PUSH3 0x134 PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 MSTORE PUSH3 0x23F JUMP JUMPDEST DUP1 PUSH1 0x1 SUB PUSH3 0x16E JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0x160 JUMPI PUSH3 0x160 PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 MSTORE PUSH3 0x23F JUMP JUMPDEST DUP1 PUSH1 0x2 SUB PUSH3 0x19A JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0x18C JUMPI PUSH3 0x18C PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0xC0 MSTORE PUSH3 0x23F JUMP JUMPDEST DUP1 PUSH1 0x3 SUB PUSH3 0x1C6 JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0x1B8 JUMPI PUSH3 0x1B8 PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 MSTORE PUSH3 0x23F JUMP JUMPDEST DUP1 PUSH1 0x4 SUB PUSH3 0x1F3 JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0x1E4 JUMPI PUSH3 0x1E4 PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x100 MSTORE PUSH3 0x23F JUMP JUMPDEST DUP1 PUSH1 0x5 SUB PUSH3 0x220 JUMPI DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0x211 JUMPI PUSH3 0x211 PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x120 MSTORE PUSH3 0x23F JUMP JUMPDEST DUP4 DUP2 PUSH1 0x7 DUP2 LT PUSH3 0x235 JUMPI PUSH3 0x235 PUSH3 0x40E JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH3 0xAA JUMP JUMPDEST POP PUSH2 0x1E0 SWAP5 SWAP1 SWAP5 MSTORE PUSH2 0x200 SWAP3 SWAP1 SWAP3 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH2 0x160 MSTORE AND PUSH2 0x180 MSTORE POP PUSH3 0x446 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x2A5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x424 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x2DA JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD SWAP7 POP PUSH1 0x20 DUP1 DUP10 ADD MLOAD SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP6 POP PUSH1 0x60 DUP10 ADD MLOAD SWAP5 POP DUP10 PUSH1 0x9F DUP11 ADD SLT PUSH3 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x3A7 JUMPI PUSH3 0x3A7 PUSH3 0x308 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH2 0x160 DUP12 ADD DUP13 DUP2 GT ISZERO PUSH3 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 DUP13 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x3DC JUMPI DUP1 MLOAD DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 DUP5 ADD PUSH3 0x3C3 JUMP JUMPDEST POP DUP3 SWAP7 POP PUSH3 0x3EB DUP2 PUSH3 0x31E JUMP JUMPDEST SWAP6 POP POP POP POP POP PUSH3 0x400 PUSH2 0x180 DUP10 ADD PUSH3 0x31E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x2A5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x160 MLOAD PUSH2 0x180 MLOAD PUSH2 0x1A0 MLOAD PUSH2 0x1C0 MLOAD PUSH2 0x1E0 MLOAD PUSH2 0x200 MLOAD PUSH2 0x18B6 PUSH3 0x553 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x34B ADD MSTORE DUP2 DUP2 PUSH2 0xAFF ADD MSTORE PUSH2 0x1084 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1E9 ADD MSTORE DUP2 DUP2 PUSH2 0x5B3 ADD MSTORE PUSH2 0xE85 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x45B ADD MSTORE PUSH2 0x4D5 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2F9 ADD MSTORE PUSH2 0x4F9 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x434 ADD MSTORE PUSH2 0xD91 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x25F ADD MSTORE DUP2 DUP2 PUSH2 0x547 ADD MSTORE PUSH2 0x9A5 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x40D ADD MSTORE PUSH2 0x972 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2AB ADD MSTORE PUSH2 0x91F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x495 ADD MSTORE PUSH2 0x8CC ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x210 ADD MSTORE PUSH2 0x879 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x37A ADD MSTORE PUSH2 0x826 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2D2 ADD MSTORE PUSH2 0x7D3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1B4 ADD MSTORE PUSH2 0x75E ADD MSTORE PUSH2 0x18B6 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x47D JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x490 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x28A979CF EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x43063BC GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x132C JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x1397 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x281 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x4D1 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1485 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x281 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x48B CALLDATASIZE PUSH1 0x4 PUSH2 0x1540 JUMP JUMPDEST PUSH2 0xD77 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CB DUP3 PUSH2 0x4C5 PUSH2 0x1199 JUMP JUMPDEST SWAP1 PUSH2 0x11C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x51E PUSH32 0x0 TIMESTAMP PUSH2 0x15E7 JUMP JUMPDEST PUSH2 0x528 SWAP2 SWAP1 PUSH2 0x15FA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x5A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5AF PUSH2 0x4D1 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x60E JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x652 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x680 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0xA37 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x6A2 JUMPI PUSH2 0x6A2 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x73C JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x6C3 JUMPI PUSH2 0x6C3 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x6DC JUMPI PUSH2 0x6DC PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x59C JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x74E JUMPI PUSH2 0x74E PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x7B1 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x7A0 SWAP2 SWAP1 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x7AA SWAP1 DUP4 PUSH2 0x1715 JUMP JUMPDEST SWAP2 POP PUSH2 0xA2F JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7C3 JUMPI PUSH2 0x7C3 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x804 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x816 JUMPI PUSH2 0x816 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x857 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x869 JUMPI PUSH2 0x869 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x8AA JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x8BC JUMPI PUSH2 0x8BC PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x8FD JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x90F JUMPI PUSH2 0x90F PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x950 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x962 JUMPI PUSH2 0x962 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x9A3 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x9D6 JUMPI PUSH2 0x9D6 PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x688 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xC09 JUMPI PUSH1 0x0 DUP1 PUSH2 0xA75 DUP9 DUP11 ADD DUP11 PUSH2 0x1757 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xBE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xB24 DUP4 PUSH32 0x0 DUP4 PUSH2 0x12A1 JUMP JUMPDEST PUSH2 0xB79 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xBF6 DUP3 DUP8 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0xC00 SWAP2 SWAP1 PUSH2 0x15FA JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xC30 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xC2E JUMPI PUSH2 0x2710 PUSH2 0xC21 DUP3 DUP7 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0xC2B SWAP2 SWAP1 PUSH2 0x15FA JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xC56 JUMPI PUSH2 0xC53 DUP2 DUP6 PUSH2 0x16FE JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xC91 SWAP1 DUP7 SWAP1 PUSH2 0x1715 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xCE1 SWAP1 DUP5 SWAP1 PUSH2 0x1715 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xD3B SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xDEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xE2D JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xE77 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 PUSH2 0x4D1 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xEE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xF68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0x1108 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0x1108 JUMPI PUSH1 0x0 DUP1 PUSH2 0x1005 DUP8 DUP10 ADD DUP10 PUSH2 0x1757 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x10A9 DUP4 PUSH32 0x0 DUP4 PUSH2 0x12A1 JUMP JUMPDEST PUSH2 0x10FE JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4CB PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1217 JUMPI POP PUSH1 0x0 PUSH2 0x4CB JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1268 JUMPI POP PUSH1 0x1 PUSH2 0x4CB JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12AE DUP6 DUP5 PUSH2 0x12B7 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x12F2 JUMPI PUSH2 0x12E8 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x12DB JUMPI PUSH2 0x12DB PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12FA JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x12BC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1316 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1325 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1325 DUP3 PUSH2 0x136E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x13D5 PUSH1 0x20 DUP5 ADD PUSH2 0x136E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x146D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x14A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14AA DUP10 PUSH2 0x136E JUMP JUMPDEST SWAP8 POP PUSH2 0x14B8 PUSH1 0x20 DUP11 ADD PUSH2 0x136E JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E1 DUP13 DUP4 DUP14 ADD PUSH2 0x13F7 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1506 DUP13 DUP4 DUP14 ADD PUSH2 0x13F7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x151F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152C DUP12 DUP3 DUP13 ADD PUSH2 0x1443 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1562 DUP8 PUSH2 0x136E JUMP JUMPDEST SWAP6 POP PUSH2 0x1570 PUSH1 0x20 DUP9 ADD PUSH2 0x136E JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x159A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A6 DUP10 DUP3 DUP11 ADD PUSH2 0x1443 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4CB JUMPI PUSH2 0x4CB PUSH2 0x15B8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1630 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x16B0 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1635 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x16C3 DUP2 DUP6 DUP8 PUSH2 0x1635 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4CB JUMPI PUSH2 0x4CB PUSH2 0x15B8 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4CB JUMPI PUSH2 0x4CB PUSH2 0x15B8 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x17AA JUMPI PUSH2 0x17AA PUSH2 0x1728 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x17ED JUMPI PUSH2 0x17ED PUSH2 0x1728 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x180B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1829 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x1810 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x184D PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1635 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1860 DUP2 DUP9 DUP11 PUSH2 0x1635 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xD7 MLOAD PUSH32 0x220469814ABD0DAB20C4025CFB17CE7ED5FC9AE0CD9C3526888154DF64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"529:12022:8:-:0;;;4551:1468;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;780:103:4;-1:-1:-1;;;878:4:4;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;4811:26:8;;;;4869:1;4852:18;;;4848:75;;4893:19;;-1:-1:-1;;;4893:19:8;;;;;;;;;;;4848:75;4932:30;;;;4989:1;4977:13;;;4973:65;;5013:14;;-1:-1:-1;;;5013:14:8;;;;;;;;;;;4973:65;5053:9;5048:831;5072:23;5068:1;:27;5048:831;;;5120:16;5137:1;5120:19;;;;;;;:::i;:::-;;;;;5143:1;5120:24;5116:113;;5194:16;5211:1;5194:19;;;;;;;:::i;:::-;;;;;5171:43;;-1:-1:-1;;;5171:43:8;;;;;;1898:25:9;;1886:2;1871:18;;1752:177;5171:43:8;;;;;;;;5116:113;5247:1;5252;5247:6;5243:626;;5295:16;5312:1;5295:19;;;;;;;:::i;:::-;;;;;5273:41;;5243:626;;;5339:1;5344;5339:6;5335:534;;5387:16;5404:1;5387:19;;;;;;;:::i;:::-;;;;;5365:41;;5335:534;;;5431:1;5436;5431:6;5427:442;;5479:16;5496:1;5479:19;;;;;;;:::i;:::-;;;;;5457:41;;5427:442;;;5523:1;5528;5523:6;5519:350;;5571:16;5588:1;5571:19;;;;;;;:::i;:::-;;;;;5549:41;;5519:350;;;5615:1;5620;5615:6;5611:258;;5663:16;5680:1;5663:19;;;;;;;:::i;:::-;;;;;5641:41;;5611:258;;;5707:1;5712;5707:6;5703:166;;5755:16;5772:1;5755:19;;;;;;;:::i;:::-;;;;;5733:41;;5703:166;;;5835:16;5852:1;5835:19;;;;;;;:::i;:::-;;;;;5813:41;;5703:166;5097:3;;5048:831;;;-1:-1:-1;5889:20:8;;;;;5919:24;;;;;-1:-1:-1;;;;;;5953:25:8;;;;;5988:24;;;-1:-1:-1;529:12022:8;;-1:-1:-1;529:12022:8;1705:174:3;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:3:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:3;;;877:68;;925:20;;-1:-1:-1;;;925:20:3;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:3;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:3;;;;;;;;;;773:235::o;14:127:9:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:195;243:13;;-1:-1:-1;;;;;285:31:9;;275:42;;265:70;;331:1;328;321:12;265:70;146:195;;;:::o;346:1269::-;541:6;549;557;565;573;581;589;642:3;630:9;621:7;617:23;613:33;610:53;;;659:1;656;649:12;610:53;688:9;682:16;672:26;;717:2;759;748:9;744:18;738:25;728:35;;803:2;792:9;788:18;782:25;772:35;;847:2;836:9;832:18;826:25;816:35;;895:7;889:3;878:9;874:19;870:33;860:61;;917:1;914;907:12;860:61;950:2;944:9;992:3;980:16;;-1:-1:-1;;;;;1011:34:9;;1047:22;;;1008:62;1005:88;;;1073:18;;:::i;:::-;1109:2;1102:22;1144:6;1188:3;1173:19;;1204;;;1201:39;;;1236:1;1233;1226:12;1201:39;1275:3;1264:9;1260:19;1288:135;1304:6;1299:3;1296:15;1288:135;;;1370:10;;1358:23;;1401:12;;;;1321;;1288:135;;;1292:3;1442:6;1432:16;;1467:55;1515:6;1467:55;:::i;:::-;1457:65;;;;;;1541:68;1604:3;1593:9;1589:19;1541:68;:::i;:::-;1531:78;;346:1269;;;;;;;;;;:::o;1620:127::-;1681:10;1676:3;1672:20;1669:1;1662:31;1712:4;1709:1;1702:15;1736:4;1733:1;1726:15;1934:225;2001:9;;;2022:11;;;2019:134;;;2075:10;2070:3;2066:20;2063:1;2056:31;2110:4;2107:1;2100:15;2138:4;2135:1;2128:15;1934:225;529:12022:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURN_WEIGHT_TOKEN_1_774":{"entryPoint":null,"id":774,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_2_776":{"entryPoint":null,"id":776,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_3_778":{"entryPoint":null,"id":778,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_4_780":{"entryPoint":null,"id":780,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_5_782":{"entryPoint":null,"id":782,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_6_784":{"entryPoint":null,"id":784,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_7_786":{"entryPoint":null,"id":786,"parameterSlots":0,"returnSlots":0},"@CYCLE_DURATION_804":{"entryPoint":null,"id":804,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_801":{"entryPoint":null,"id":801,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_807":{"entryPoint":null,"id":807,"parameterSlots":0,"returnSlots":0},"@MERKLE_ROOT_810":{"entryPoint":null,"id":810,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_798":{"entryPoint":null,"id":798,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_TOKEN_ID_771":{"entryPoint":null,"id":771,"parameterSlots":0,"returnSlots":0},"@ORB_OF_POWER_794":{"entryPoint":null,"id":794,"parameterSlots":0,"returnSlots":0},"@ROC_MULTIPLIER_790":{"entryPoint":null,"id":790,"parameterSlots":0,"returnSlots":0},"@_efficientHash_747":{"entryPoint":null,"id":747,"parameterSlots":2,"returnSlots":1},"@_hashPair_736":{"entryPoint":4858,"id":736,"parameterSlots":2,"returnSlots":1},"@currentCycle_1081":{"entryPoint":1233,"id":1081,"parameterSlots":0,"returnSlots":1},"@layout_146":{"entryPoint":4505,"id":146,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_1660":{"entryPoint":1325,"id":1660,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_1267":{"entryPoint":3447,"id":1267,"parameterSlots":6,"returnSlots":1},"@orbMultipliers_827":{"entryPoint":null,"id":827,"parameterSlots":0,"returnSlots":0},"@processProof_331":{"entryPoint":4791,"id":331,"parameterSlots":2,"returnSlots":1},"@supportsInterface_134":{"entryPoint":4551,"id":134,"parameterSlots":2,"returnSlots":1},"@supportsInterface_28":{"entryPoint":1207,"id":28,"parameterSlots":1,"returnSlots":1},"@totalAshPerCycle_815":{"entryPoint":null,"id":815,"parameterSlots":0,"returnSlots":0},"@userAshPerCycle_822":{"entryPoint":null,"id":822,"parameterSlots":0,"returnSlots":0},"@verify_270":{"entryPoint":4769,"id":270,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4974,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":5111,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":5187,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":5015,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":5253,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":5440,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256":{"entryPoint":5975,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4908,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5086,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":5042,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5685,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5760,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":6201,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$208__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5909,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":5626,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":5886,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5607,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":5560,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5839,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5928,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:10658:9","nodeType":"YulBlock","src":"0:10658:9","statements":[{"nativeSrc":"6:3:9","nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nativeSrc":"83:263:9","nodeType":"YulBlock","src":"83:263:9","statements":[{"body":{"nativeSrc":"129:16:9","nodeType":"YulBlock","src":"129:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:9","nodeType":"YulLiteral","src":"138:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:9","nodeType":"YulLiteral","src":"141:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:9","nodeType":"YulIdentifier","src":"131:6:9"},"nativeSrc":"131:12:9","nodeType":"YulFunctionCall","src":"131:12:9"},"nativeSrc":"131:12:9","nodeType":"YulExpressionStatement","src":"131:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:9","nodeType":"YulIdentifier","src":"104:7:9"},{"name":"headStart","nativeSrc":"113:9:9","nodeType":"YulIdentifier","src":"113:9:9"}],"functionName":{"name":"sub","nativeSrc":"100:3:9","nodeType":"YulIdentifier","src":"100:3:9"},"nativeSrc":"100:23:9","nodeType":"YulFunctionCall","src":"100:23:9"},{"kind":"number","nativeSrc":"125:2:9","nodeType":"YulLiteral","src":"125:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:9","nodeType":"YulIdentifier","src":"96:3:9"},"nativeSrc":"96:32:9","nodeType":"YulFunctionCall","src":"96:32:9"},"nativeSrc":"93:52:9","nodeType":"YulIf","src":"93:52:9"},{"nativeSrc":"154:36:9","nodeType":"YulVariableDeclaration","src":"154:36:9","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:9","nodeType":"YulIdentifier","src":"180:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:9","nodeType":"YulIdentifier","src":"167:12:9"},"nativeSrc":"167:23:9","nodeType":"YulFunctionCall","src":"167:23:9"},"variables":[{"name":"value","nativeSrc":"158:5:9","nodeType":"YulTypedName","src":"158:5:9","type":""}]},{"body":{"nativeSrc":"300:16:9","nodeType":"YulBlock","src":"300:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:9","nodeType":"YulLiteral","src":"309:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:9","nodeType":"YulLiteral","src":"312:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:9","nodeType":"YulIdentifier","src":"302:6:9"},"nativeSrc":"302:12:9","nodeType":"YulFunctionCall","src":"302:12:9"},"nativeSrc":"302:12:9","nodeType":"YulExpressionStatement","src":"302:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:9","nodeType":"YulIdentifier","src":"212:5:9"},{"arguments":[{"name":"value","nativeSrc":"223:5:9","nodeType":"YulIdentifier","src":"223:5:9"},{"kind":"number","nativeSrc":"230:66:9","nodeType":"YulLiteral","src":"230:66:9","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:9","nodeType":"YulIdentifier","src":"219:3:9"},"nativeSrc":"219:78:9","nodeType":"YulFunctionCall","src":"219:78:9"}],"functionName":{"name":"eq","nativeSrc":"209:2:9","nodeType":"YulIdentifier","src":"209:2:9"},"nativeSrc":"209:89:9","nodeType":"YulFunctionCall","src":"209:89:9"}],"functionName":{"name":"iszero","nativeSrc":"202:6:9","nodeType":"YulIdentifier","src":"202:6:9"},"nativeSrc":"202:97:9","nodeType":"YulFunctionCall","src":"202:97:9"},"nativeSrc":"199:117:9","nodeType":"YulIf","src":"199:117:9"},{"nativeSrc":"325:15:9","nodeType":"YulAssignment","src":"325:15:9","value":{"name":"value","nativeSrc":"335:5:9","nodeType":"YulIdentifier","src":"335:5:9"},"variableNames":[{"name":"value0","nativeSrc":"325:6:9","nodeType":"YulIdentifier","src":"325:6:9"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:9","nodeType":"YulTypedName","src":"49:9:9","type":""},{"name":"dataEnd","nativeSrc":"60:7:9","nodeType":"YulTypedName","src":"60:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:9","nodeType":"YulTypedName","src":"72:6:9","type":""}],"src":"14:332:9"},{"body":{"nativeSrc":"446:92:9","nodeType":"YulBlock","src":"446:92:9","statements":[{"nativeSrc":"456:26:9","nodeType":"YulAssignment","src":"456:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:9","nodeType":"YulIdentifier","src":"468:9:9"},{"kind":"number","nativeSrc":"479:2:9","nodeType":"YulLiteral","src":"479:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:9","nodeType":"YulIdentifier","src":"464:3:9"},"nativeSrc":"464:18:9","nodeType":"YulFunctionCall","src":"464:18:9"},"variableNames":[{"name":"tail","nativeSrc":"456:4:9","nodeType":"YulIdentifier","src":"456:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:9","nodeType":"YulIdentifier","src":"498:9:9"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:9","nodeType":"YulIdentifier","src":"523:6:9"}],"functionName":{"name":"iszero","nativeSrc":"516:6:9","nodeType":"YulIdentifier","src":"516:6:9"},"nativeSrc":"516:14:9","nodeType":"YulFunctionCall","src":"516:14:9"}],"functionName":{"name":"iszero","nativeSrc":"509:6:9","nodeType":"YulIdentifier","src":"509:6:9"},"nativeSrc":"509:22:9","nodeType":"YulFunctionCall","src":"509:22:9"}],"functionName":{"name":"mstore","nativeSrc":"491:6:9","nodeType":"YulIdentifier","src":"491:6:9"},"nativeSrc":"491:41:9","nodeType":"YulFunctionCall","src":"491:41:9"},"nativeSrc":"491:41:9","nodeType":"YulExpressionStatement","src":"491:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:9","nodeType":"YulTypedName","src":"415:9:9","type":""},{"name":"value0","nativeSrc":"426:6:9","nodeType":"YulTypedName","src":"426:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:9","nodeType":"YulTypedName","src":"437:4:9","type":""}],"src":"351:187:9"},{"body":{"nativeSrc":"644:76:9","nodeType":"YulBlock","src":"644:76:9","statements":[{"nativeSrc":"654:26:9","nodeType":"YulAssignment","src":"654:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:9","nodeType":"YulIdentifier","src":"666:9:9"},{"kind":"number","nativeSrc":"677:2:9","nodeType":"YulLiteral","src":"677:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:9","nodeType":"YulIdentifier","src":"662:3:9"},"nativeSrc":"662:18:9","nodeType":"YulFunctionCall","src":"662:18:9"},"variableNames":[{"name":"tail","nativeSrc":"654:4:9","nodeType":"YulIdentifier","src":"654:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:9","nodeType":"YulIdentifier","src":"696:9:9"},{"name":"value0","nativeSrc":"707:6:9","nodeType":"YulIdentifier","src":"707:6:9"}],"functionName":{"name":"mstore","nativeSrc":"689:6:9","nodeType":"YulIdentifier","src":"689:6:9"},"nativeSrc":"689:25:9","nodeType":"YulFunctionCall","src":"689:25:9"},"nativeSrc":"689:25:9","nodeType":"YulExpressionStatement","src":"689:25:9"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:9","nodeType":"YulTypedName","src":"613:9:9","type":""},{"name":"value0","nativeSrc":"624:6:9","nodeType":"YulTypedName","src":"624:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:9","nodeType":"YulTypedName","src":"635:4:9","type":""}],"src":"543:177:9"},{"body":{"nativeSrc":"774:147:9","nodeType":"YulBlock","src":"774:147:9","statements":[{"nativeSrc":"784:29:9","nodeType":"YulAssignment","src":"784:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"806:6:9","nodeType":"YulIdentifier","src":"806:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"793:12:9","nodeType":"YulIdentifier","src":"793:12:9"},"nativeSrc":"793:20:9","nodeType":"YulFunctionCall","src":"793:20:9"},"variableNames":[{"name":"value","nativeSrc":"784:5:9","nodeType":"YulIdentifier","src":"784:5:9"}]},{"body":{"nativeSrc":"899:16:9","nodeType":"YulBlock","src":"899:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"908:1:9","nodeType":"YulLiteral","src":"908:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"911:1:9","nodeType":"YulLiteral","src":"911:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"901:6:9","nodeType":"YulIdentifier","src":"901:6:9"},"nativeSrc":"901:12:9","nodeType":"YulFunctionCall","src":"901:12:9"},"nativeSrc":"901:12:9","nodeType":"YulExpressionStatement","src":"901:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:9","nodeType":"YulIdentifier","src":"835:5:9"},{"arguments":[{"name":"value","nativeSrc":"846:5:9","nodeType":"YulIdentifier","src":"846:5:9"},{"kind":"number","nativeSrc":"853:42:9","nodeType":"YulLiteral","src":"853:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"842:3:9","nodeType":"YulIdentifier","src":"842:3:9"},"nativeSrc":"842:54:9","nodeType":"YulFunctionCall","src":"842:54:9"}],"functionName":{"name":"eq","nativeSrc":"832:2:9","nodeType":"YulIdentifier","src":"832:2:9"},"nativeSrc":"832:65:9","nodeType":"YulFunctionCall","src":"832:65:9"}],"functionName":{"name":"iszero","nativeSrc":"825:6:9","nodeType":"YulIdentifier","src":"825:6:9"},"nativeSrc":"825:73:9","nodeType":"YulFunctionCall","src":"825:73:9"},"nativeSrc":"822:93:9","nodeType":"YulIf","src":"822:93:9"}]},"name":"abi_decode_address","nativeSrc":"725:196:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"753:6:9","nodeType":"YulTypedName","src":"753:6:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"764:5:9","nodeType":"YulTypedName","src":"764:5:9","type":""}],"src":"725:196:9"},{"body":{"nativeSrc":"996:116:9","nodeType":"YulBlock","src":"996:116:9","statements":[{"body":{"nativeSrc":"1042:16:9","nodeType":"YulBlock","src":"1042:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1051:1:9","nodeType":"YulLiteral","src":"1051:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1054:1:9","nodeType":"YulLiteral","src":"1054:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1044:6:9","nodeType":"YulIdentifier","src":"1044:6:9"},"nativeSrc":"1044:12:9","nodeType":"YulFunctionCall","src":"1044:12:9"},"nativeSrc":"1044:12:9","nodeType":"YulExpressionStatement","src":"1044:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1017:7:9","nodeType":"YulIdentifier","src":"1017:7:9"},{"name":"headStart","nativeSrc":"1026:9:9","nodeType":"YulIdentifier","src":"1026:9:9"}],"functionName":{"name":"sub","nativeSrc":"1013:3:9","nodeType":"YulIdentifier","src":"1013:3:9"},"nativeSrc":"1013:23:9","nodeType":"YulFunctionCall","src":"1013:23:9"},{"kind":"number","nativeSrc":"1038:2:9","nodeType":"YulLiteral","src":"1038:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1009:3:9","nodeType":"YulIdentifier","src":"1009:3:9"},"nativeSrc":"1009:32:9","nodeType":"YulFunctionCall","src":"1009:32:9"},"nativeSrc":"1006:52:9","nodeType":"YulIf","src":"1006:52:9"},{"nativeSrc":"1067:39:9","nodeType":"YulAssignment","src":"1067:39:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1096:9:9","nodeType":"YulIdentifier","src":"1096:9:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1077:18:9","nodeType":"YulIdentifier","src":"1077:18:9"},"nativeSrc":"1077:29:9","nodeType":"YulFunctionCall","src":"1077:29:9"},"variableNames":[{"name":"value0","nativeSrc":"1067:6:9","nodeType":"YulIdentifier","src":"1067:6:9"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"926:186:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"962:9:9","nodeType":"YulTypedName","src":"962:9:9","type":""},{"name":"dataEnd","nativeSrc":"973:7:9","nodeType":"YulTypedName","src":"973:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"985:6:9","nodeType":"YulTypedName","src":"985:6:9","type":""}],"src":"926:186:9"},{"body":{"nativeSrc":"1242:125:9","nodeType":"YulBlock","src":"1242:125:9","statements":[{"nativeSrc":"1252:26:9","nodeType":"YulAssignment","src":"1252:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1264:9:9","nodeType":"YulIdentifier","src":"1264:9:9"},{"kind":"number","nativeSrc":"1275:2:9","nodeType":"YulLiteral","src":"1275:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1260:3:9","nodeType":"YulIdentifier","src":"1260:3:9"},"nativeSrc":"1260:18:9","nodeType":"YulFunctionCall","src":"1260:18:9"},"variableNames":[{"name":"tail","nativeSrc":"1252:4:9","nodeType":"YulIdentifier","src":"1252:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1294:9:9","nodeType":"YulIdentifier","src":"1294:9:9"},{"arguments":[{"name":"value0","nativeSrc":"1309:6:9","nodeType":"YulIdentifier","src":"1309:6:9"},{"kind":"number","nativeSrc":"1317:42:9","nodeType":"YulLiteral","src":"1317:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1305:3:9","nodeType":"YulIdentifier","src":"1305:3:9"},"nativeSrc":"1305:55:9","nodeType":"YulFunctionCall","src":"1305:55:9"}],"functionName":{"name":"mstore","nativeSrc":"1287:6:9","nodeType":"YulIdentifier","src":"1287:6:9"},"nativeSrc":"1287:74:9","nodeType":"YulFunctionCall","src":"1287:74:9"},"nativeSrc":"1287:74:9","nodeType":"YulExpressionStatement","src":"1287:74:9"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$208__to_t_address__fromStack_reversed","nativeSrc":"1117:250:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1211:9:9","nodeType":"YulTypedName","src":"1211:9:9","type":""},{"name":"value0","nativeSrc":"1222:6:9","nodeType":"YulTypedName","src":"1222:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1233:4:9","nodeType":"YulTypedName","src":"1233:4:9","type":""}],"src":"1117:250:9"},{"body":{"nativeSrc":"1459:167:9","nodeType":"YulBlock","src":"1459:167:9","statements":[{"body":{"nativeSrc":"1505:16:9","nodeType":"YulBlock","src":"1505:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1514:1:9","nodeType":"YulLiteral","src":"1514:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1517:1:9","nodeType":"YulLiteral","src":"1517:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1507:6:9","nodeType":"YulIdentifier","src":"1507:6:9"},"nativeSrc":"1507:12:9","nodeType":"YulFunctionCall","src":"1507:12:9"},"nativeSrc":"1507:12:9","nodeType":"YulExpressionStatement","src":"1507:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1480:7:9","nodeType":"YulIdentifier","src":"1480:7:9"},{"name":"headStart","nativeSrc":"1489:9:9","nodeType":"YulIdentifier","src":"1489:9:9"}],"functionName":{"name":"sub","nativeSrc":"1476:3:9","nodeType":"YulIdentifier","src":"1476:3:9"},"nativeSrc":"1476:23:9","nodeType":"YulFunctionCall","src":"1476:23:9"},{"kind":"number","nativeSrc":"1501:2:9","nodeType":"YulLiteral","src":"1501:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1472:3:9","nodeType":"YulIdentifier","src":"1472:3:9"},"nativeSrc":"1472:32:9","nodeType":"YulFunctionCall","src":"1472:32:9"},"nativeSrc":"1469:52:9","nodeType":"YulIf","src":"1469:52:9"},{"nativeSrc":"1530:33:9","nodeType":"YulAssignment","src":"1530:33:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1553:9:9","nodeType":"YulIdentifier","src":"1553:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"1540:12:9","nodeType":"YulIdentifier","src":"1540:12:9"},"nativeSrc":"1540:23:9","nodeType":"YulFunctionCall","src":"1540:23:9"},"variableNames":[{"name":"value0","nativeSrc":"1530:6:9","nodeType":"YulIdentifier","src":"1530:6:9"}]},{"nativeSrc":"1572:48:9","nodeType":"YulAssignment","src":"1572:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1605:9:9","nodeType":"YulIdentifier","src":"1605:9:9"},{"kind":"number","nativeSrc":"1616:2:9","nodeType":"YulLiteral","src":"1616:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1601:3:9","nodeType":"YulIdentifier","src":"1601:3:9"},"nativeSrc":"1601:18:9","nodeType":"YulFunctionCall","src":"1601:18:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1582:18:9","nodeType":"YulIdentifier","src":"1582:18:9"},"nativeSrc":"1582:38:9","nodeType":"YulFunctionCall","src":"1582:38:9"},"variableNames":[{"name":"value1","nativeSrc":"1572:6:9","nodeType":"YulIdentifier","src":"1572:6:9"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"1372:254:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1417:9:9","nodeType":"YulTypedName","src":"1417:9:9","type":""},{"name":"dataEnd","nativeSrc":"1428:7:9","nodeType":"YulTypedName","src":"1428:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1440:6:9","nodeType":"YulTypedName","src":"1440:6:9","type":""},{"name":"value1","nativeSrc":"1448:6:9","nodeType":"YulTypedName","src":"1448:6:9","type":""}],"src":"1372:254:9"},{"body":{"nativeSrc":"1732:76:9","nodeType":"YulBlock","src":"1732:76:9","statements":[{"nativeSrc":"1742:26:9","nodeType":"YulAssignment","src":"1742:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1754:9:9","nodeType":"YulIdentifier","src":"1754:9:9"},{"kind":"number","nativeSrc":"1765:2:9","nodeType":"YulLiteral","src":"1765:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1750:3:9","nodeType":"YulIdentifier","src":"1750:3:9"},"nativeSrc":"1750:18:9","nodeType":"YulFunctionCall","src":"1750:18:9"},"variableNames":[{"name":"tail","nativeSrc":"1742:4:9","nodeType":"YulIdentifier","src":"1742:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1784:9:9","nodeType":"YulIdentifier","src":"1784:9:9"},{"name":"value0","nativeSrc":"1795:6:9","nodeType":"YulIdentifier","src":"1795:6:9"}],"functionName":{"name":"mstore","nativeSrc":"1777:6:9","nodeType":"YulIdentifier","src":"1777:6:9"},"nativeSrc":"1777:25:9","nodeType":"YulFunctionCall","src":"1777:25:9"},"nativeSrc":"1777:25:9","nodeType":"YulExpressionStatement","src":"1777:25:9"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"1631:177:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1701:9:9","nodeType":"YulTypedName","src":"1701:9:9","type":""},{"name":"value0","nativeSrc":"1712:6:9","nodeType":"YulTypedName","src":"1712:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1723:4:9","nodeType":"YulTypedName","src":"1723:4:9","type":""}],"src":"1631:177:9"},{"body":{"nativeSrc":"1883:110:9","nodeType":"YulBlock","src":"1883:110:9","statements":[{"body":{"nativeSrc":"1929:16:9","nodeType":"YulBlock","src":"1929:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1938:1:9","nodeType":"YulLiteral","src":"1938:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1941:1:9","nodeType":"YulLiteral","src":"1941:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1931:6:9","nodeType":"YulIdentifier","src":"1931:6:9"},"nativeSrc":"1931:12:9","nodeType":"YulFunctionCall","src":"1931:12:9"},"nativeSrc":"1931:12:9","nodeType":"YulExpressionStatement","src":"1931:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1904:7:9","nodeType":"YulIdentifier","src":"1904:7:9"},{"name":"headStart","nativeSrc":"1913:9:9","nodeType":"YulIdentifier","src":"1913:9:9"}],"functionName":{"name":"sub","nativeSrc":"1900:3:9","nodeType":"YulIdentifier","src":"1900:3:9"},"nativeSrc":"1900:23:9","nodeType":"YulFunctionCall","src":"1900:23:9"},{"kind":"number","nativeSrc":"1925:2:9","nodeType":"YulLiteral","src":"1925:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1896:3:9","nodeType":"YulIdentifier","src":"1896:3:9"},"nativeSrc":"1896:32:9","nodeType":"YulFunctionCall","src":"1896:32:9"},"nativeSrc":"1893:52:9","nodeType":"YulIf","src":"1893:52:9"},{"nativeSrc":"1954:33:9","nodeType":"YulAssignment","src":"1954:33:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1977:9:9","nodeType":"YulIdentifier","src":"1977:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"1964:12:9","nodeType":"YulIdentifier","src":"1964:12:9"},"nativeSrc":"1964:23:9","nodeType":"YulFunctionCall","src":"1964:23:9"},"variableNames":[{"name":"value0","nativeSrc":"1954:6:9","nodeType":"YulIdentifier","src":"1954:6:9"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1813:180:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1849:9:9","nodeType":"YulTypedName","src":"1849:9:9","type":""},{"name":"dataEnd","nativeSrc":"1860:7:9","nodeType":"YulTypedName","src":"1860:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1872:6:9","nodeType":"YulTypedName","src":"1872:6:9","type":""}],"src":"1813:180:9"},{"body":{"nativeSrc":"2082:283:9","nodeType":"YulBlock","src":"2082:283:9","statements":[{"body":{"nativeSrc":"2131:16:9","nodeType":"YulBlock","src":"2131:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2140:1:9","nodeType":"YulLiteral","src":"2140:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2143:1:9","nodeType":"YulLiteral","src":"2143:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2133:6:9","nodeType":"YulIdentifier","src":"2133:6:9"},"nativeSrc":"2133:12:9","nodeType":"YulFunctionCall","src":"2133:12:9"},"nativeSrc":"2133:12:9","nodeType":"YulExpressionStatement","src":"2133:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2110:6:9","nodeType":"YulIdentifier","src":"2110:6:9"},{"kind":"number","nativeSrc":"2118:4:9","nodeType":"YulLiteral","src":"2118:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2106:3:9","nodeType":"YulIdentifier","src":"2106:3:9"},"nativeSrc":"2106:17:9","nodeType":"YulFunctionCall","src":"2106:17:9"},{"name":"end","nativeSrc":"2125:3:9","nodeType":"YulIdentifier","src":"2125:3:9"}],"functionName":{"name":"slt","nativeSrc":"2102:3:9","nodeType":"YulIdentifier","src":"2102:3:9"},"nativeSrc":"2102:27:9","nodeType":"YulFunctionCall","src":"2102:27:9"}],"functionName":{"name":"iszero","nativeSrc":"2095:6:9","nodeType":"YulIdentifier","src":"2095:6:9"},"nativeSrc":"2095:35:9","nodeType":"YulFunctionCall","src":"2095:35:9"},"nativeSrc":"2092:55:9","nodeType":"YulIf","src":"2092:55:9"},{"nativeSrc":"2156:30:9","nodeType":"YulAssignment","src":"2156:30:9","value":{"arguments":[{"name":"offset","nativeSrc":"2179:6:9","nodeType":"YulIdentifier","src":"2179:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"2166:12:9","nodeType":"YulIdentifier","src":"2166:12:9"},"nativeSrc":"2166:20:9","nodeType":"YulFunctionCall","src":"2166:20:9"},"variableNames":[{"name":"length","nativeSrc":"2156:6:9","nodeType":"YulIdentifier","src":"2156:6:9"}]},{"body":{"nativeSrc":"2229:16:9","nodeType":"YulBlock","src":"2229:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2238:1:9","nodeType":"YulLiteral","src":"2238:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2241:1:9","nodeType":"YulLiteral","src":"2241:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2231:6:9","nodeType":"YulIdentifier","src":"2231:6:9"},"nativeSrc":"2231:12:9","nodeType":"YulFunctionCall","src":"2231:12:9"},"nativeSrc":"2231:12:9","nodeType":"YulExpressionStatement","src":"2231:12:9"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2201:6:9","nodeType":"YulIdentifier","src":"2201:6:9"},{"kind":"number","nativeSrc":"2209:18:9","nodeType":"YulLiteral","src":"2209:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2198:2:9","nodeType":"YulIdentifier","src":"2198:2:9"},"nativeSrc":"2198:30:9","nodeType":"YulFunctionCall","src":"2198:30:9"},"nativeSrc":"2195:50:9","nodeType":"YulIf","src":"2195:50:9"},{"nativeSrc":"2254:29:9","nodeType":"YulAssignment","src":"2254:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"2270:6:9","nodeType":"YulIdentifier","src":"2270:6:9"},{"kind":"number","nativeSrc":"2278:4:9","nodeType":"YulLiteral","src":"2278:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2266:3:9","nodeType":"YulIdentifier","src":"2266:3:9"},"nativeSrc":"2266:17:9","nodeType":"YulFunctionCall","src":"2266:17:9"},"variableNames":[{"name":"arrayPos","nativeSrc":"2254:8:9","nodeType":"YulIdentifier","src":"2254:8:9"}]},{"body":{"nativeSrc":"2343:16:9","nodeType":"YulBlock","src":"2343:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2352:1:9","nodeType":"YulLiteral","src":"2352:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2355:1:9","nodeType":"YulLiteral","src":"2355:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2345:6:9","nodeType":"YulIdentifier","src":"2345:6:9"},"nativeSrc":"2345:12:9","nodeType":"YulFunctionCall","src":"2345:12:9"},"nativeSrc":"2345:12:9","nodeType":"YulExpressionStatement","src":"2345:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2306:6:9","nodeType":"YulIdentifier","src":"2306:6:9"},{"arguments":[{"kind":"number","nativeSrc":"2318:1:9","nodeType":"YulLiteral","src":"2318:1:9","type":"","value":"5"},{"name":"length","nativeSrc":"2321:6:9","nodeType":"YulIdentifier","src":"2321:6:9"}],"functionName":{"name":"shl","nativeSrc":"2314:3:9","nodeType":"YulIdentifier","src":"2314:3:9"},"nativeSrc":"2314:14:9","nodeType":"YulFunctionCall","src":"2314:14:9"}],"functionName":{"name":"add","nativeSrc":"2302:3:9","nodeType":"YulIdentifier","src":"2302:3:9"},"nativeSrc":"2302:27:9","nodeType":"YulFunctionCall","src":"2302:27:9"},{"kind":"number","nativeSrc":"2331:4:9","nodeType":"YulLiteral","src":"2331:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2298:3:9","nodeType":"YulIdentifier","src":"2298:3:9"},"nativeSrc":"2298:38:9","nodeType":"YulFunctionCall","src":"2298:38:9"},{"name":"end","nativeSrc":"2338:3:9","nodeType":"YulIdentifier","src":"2338:3:9"}],"functionName":{"name":"gt","nativeSrc":"2295:2:9","nodeType":"YulIdentifier","src":"2295:2:9"},"nativeSrc":"2295:47:9","nodeType":"YulFunctionCall","src":"2295:47:9"},"nativeSrc":"2292:67:9","nodeType":"YulIf","src":"2292:67:9"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"1998:367:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2045:6:9","nodeType":"YulTypedName","src":"2045:6:9","type":""},{"name":"end","nativeSrc":"2053:3:9","nodeType":"YulTypedName","src":"2053:3:9","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2061:8:9","nodeType":"YulTypedName","src":"2061:8:9","type":""},{"name":"length","nativeSrc":"2071:6:9","nodeType":"YulTypedName","src":"2071:6:9","type":""}],"src":"1998:367:9"},{"body":{"nativeSrc":"2442:275:9","nodeType":"YulBlock","src":"2442:275:9","statements":[{"body":{"nativeSrc":"2491:16:9","nodeType":"YulBlock","src":"2491:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2500:1:9","nodeType":"YulLiteral","src":"2500:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2503:1:9","nodeType":"YulLiteral","src":"2503:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2493:6:9","nodeType":"YulIdentifier","src":"2493:6:9"},"nativeSrc":"2493:12:9","nodeType":"YulFunctionCall","src":"2493:12:9"},"nativeSrc":"2493:12:9","nodeType":"YulExpressionStatement","src":"2493:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2470:6:9","nodeType":"YulIdentifier","src":"2470:6:9"},{"kind":"number","nativeSrc":"2478:4:9","nodeType":"YulLiteral","src":"2478:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2466:3:9","nodeType":"YulIdentifier","src":"2466:3:9"},"nativeSrc":"2466:17:9","nodeType":"YulFunctionCall","src":"2466:17:9"},{"name":"end","nativeSrc":"2485:3:9","nodeType":"YulIdentifier","src":"2485:3:9"}],"functionName":{"name":"slt","nativeSrc":"2462:3:9","nodeType":"YulIdentifier","src":"2462:3:9"},"nativeSrc":"2462:27:9","nodeType":"YulFunctionCall","src":"2462:27:9"}],"functionName":{"name":"iszero","nativeSrc":"2455:6:9","nodeType":"YulIdentifier","src":"2455:6:9"},"nativeSrc":"2455:35:9","nodeType":"YulFunctionCall","src":"2455:35:9"},"nativeSrc":"2452:55:9","nodeType":"YulIf","src":"2452:55:9"},{"nativeSrc":"2516:30:9","nodeType":"YulAssignment","src":"2516:30:9","value":{"arguments":[{"name":"offset","nativeSrc":"2539:6:9","nodeType":"YulIdentifier","src":"2539:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"2526:12:9","nodeType":"YulIdentifier","src":"2526:12:9"},"nativeSrc":"2526:20:9","nodeType":"YulFunctionCall","src":"2526:20:9"},"variableNames":[{"name":"length","nativeSrc":"2516:6:9","nodeType":"YulIdentifier","src":"2516:6:9"}]},{"body":{"nativeSrc":"2589:16:9","nodeType":"YulBlock","src":"2589:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2598:1:9","nodeType":"YulLiteral","src":"2598:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2601:1:9","nodeType":"YulLiteral","src":"2601:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2591:6:9","nodeType":"YulIdentifier","src":"2591:6:9"},"nativeSrc":"2591:12:9","nodeType":"YulFunctionCall","src":"2591:12:9"},"nativeSrc":"2591:12:9","nodeType":"YulExpressionStatement","src":"2591:12:9"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2561:6:9","nodeType":"YulIdentifier","src":"2561:6:9"},{"kind":"number","nativeSrc":"2569:18:9","nodeType":"YulLiteral","src":"2569:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2558:2:9","nodeType":"YulIdentifier","src":"2558:2:9"},"nativeSrc":"2558:30:9","nodeType":"YulFunctionCall","src":"2558:30:9"},"nativeSrc":"2555:50:9","nodeType":"YulIf","src":"2555:50:9"},{"nativeSrc":"2614:29:9","nodeType":"YulAssignment","src":"2614:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"2630:6:9","nodeType":"YulIdentifier","src":"2630:6:9"},{"kind":"number","nativeSrc":"2638:4:9","nodeType":"YulLiteral","src":"2638:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2626:3:9","nodeType":"YulIdentifier","src":"2626:3:9"},"nativeSrc":"2626:17:9","nodeType":"YulFunctionCall","src":"2626:17:9"},"variableNames":[{"name":"arrayPos","nativeSrc":"2614:8:9","nodeType":"YulIdentifier","src":"2614:8:9"}]},{"body":{"nativeSrc":"2695:16:9","nodeType":"YulBlock","src":"2695:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2704:1:9","nodeType":"YulLiteral","src":"2704:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2707:1:9","nodeType":"YulLiteral","src":"2707:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2697:6:9","nodeType":"YulIdentifier","src":"2697:6:9"},"nativeSrc":"2697:12:9","nodeType":"YulFunctionCall","src":"2697:12:9"},"nativeSrc":"2697:12:9","nodeType":"YulExpressionStatement","src":"2697:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2666:6:9","nodeType":"YulIdentifier","src":"2666:6:9"},{"name":"length","nativeSrc":"2674:6:9","nodeType":"YulIdentifier","src":"2674:6:9"}],"functionName":{"name":"add","nativeSrc":"2662:3:9","nodeType":"YulIdentifier","src":"2662:3:9"},"nativeSrc":"2662:19:9","nodeType":"YulFunctionCall","src":"2662:19:9"},{"kind":"number","nativeSrc":"2683:4:9","nodeType":"YulLiteral","src":"2683:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2658:3:9","nodeType":"YulIdentifier","src":"2658:3:9"},"nativeSrc":"2658:30:9","nodeType":"YulFunctionCall","src":"2658:30:9"},{"name":"end","nativeSrc":"2690:3:9","nodeType":"YulIdentifier","src":"2690:3:9"}],"functionName":{"name":"gt","nativeSrc":"2655:2:9","nodeType":"YulIdentifier","src":"2655:2:9"},"nativeSrc":"2655:39:9","nodeType":"YulFunctionCall","src":"2655:39:9"},"nativeSrc":"2652:59:9","nodeType":"YulIf","src":"2652:59:9"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"2370:347:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2405:6:9","nodeType":"YulTypedName","src":"2405:6:9","type":""},{"name":"end","nativeSrc":"2413:3:9","nodeType":"YulTypedName","src":"2413:3:9","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2421:8:9","nodeType":"YulTypedName","src":"2421:8:9","type":""},{"name":"length","nativeSrc":"2431:6:9","nodeType":"YulTypedName","src":"2431:6:9","type":""}],"src":"2370:347:9"},{"body":{"nativeSrc":"2949:983:9","nodeType":"YulBlock","src":"2949:983:9","statements":[{"body":{"nativeSrc":"2996:16:9","nodeType":"YulBlock","src":"2996:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3005:1:9","nodeType":"YulLiteral","src":"3005:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3008:1:9","nodeType":"YulLiteral","src":"3008:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2998:6:9","nodeType":"YulIdentifier","src":"2998:6:9"},"nativeSrc":"2998:12:9","nodeType":"YulFunctionCall","src":"2998:12:9"},"nativeSrc":"2998:12:9","nodeType":"YulExpressionStatement","src":"2998:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2970:7:9","nodeType":"YulIdentifier","src":"2970:7:9"},{"name":"headStart","nativeSrc":"2979:9:9","nodeType":"YulIdentifier","src":"2979:9:9"}],"functionName":{"name":"sub","nativeSrc":"2966:3:9","nodeType":"YulIdentifier","src":"2966:3:9"},"nativeSrc":"2966:23:9","nodeType":"YulFunctionCall","src":"2966:23:9"},{"kind":"number","nativeSrc":"2991:3:9","nodeType":"YulLiteral","src":"2991:3:9","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"2962:3:9","nodeType":"YulIdentifier","src":"2962:3:9"},"nativeSrc":"2962:33:9","nodeType":"YulFunctionCall","src":"2962:33:9"},"nativeSrc":"2959:53:9","nodeType":"YulIf","src":"2959:53:9"},{"nativeSrc":"3021:39:9","nodeType":"YulAssignment","src":"3021:39:9","value":{"arguments":[{"name":"headStart","nativeSrc":"3050:9:9","nodeType":"YulIdentifier","src":"3050:9:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3031:18:9","nodeType":"YulIdentifier","src":"3031:18:9"},"nativeSrc":"3031:29:9","nodeType":"YulFunctionCall","src":"3031:29:9"},"variableNames":[{"name":"value0","nativeSrc":"3021:6:9","nodeType":"YulIdentifier","src":"3021:6:9"}]},{"nativeSrc":"3069:48:9","nodeType":"YulAssignment","src":"3069:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3102:9:9","nodeType":"YulIdentifier","src":"3102:9:9"},{"kind":"number","nativeSrc":"3113:2:9","nodeType":"YulLiteral","src":"3113:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3098:3:9","nodeType":"YulIdentifier","src":"3098:3:9"},"nativeSrc":"3098:18:9","nodeType":"YulFunctionCall","src":"3098:18:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3079:18:9","nodeType":"YulIdentifier","src":"3079:18:9"},"nativeSrc":"3079:38:9","nodeType":"YulFunctionCall","src":"3079:38:9"},"variableNames":[{"name":"value1","nativeSrc":"3069:6:9","nodeType":"YulIdentifier","src":"3069:6:9"}]},{"nativeSrc":"3126:46:9","nodeType":"YulVariableDeclaration","src":"3126:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3157:9:9","nodeType":"YulIdentifier","src":"3157:9:9"},{"kind":"number","nativeSrc":"3168:2:9","nodeType":"YulLiteral","src":"3168:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3153:3:9","nodeType":"YulIdentifier","src":"3153:3:9"},"nativeSrc":"3153:18:9","nodeType":"YulFunctionCall","src":"3153:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"3140:12:9","nodeType":"YulIdentifier","src":"3140:12:9"},"nativeSrc":"3140:32:9","nodeType":"YulFunctionCall","src":"3140:32:9"},"variables":[{"name":"offset","nativeSrc":"3130:6:9","nodeType":"YulTypedName","src":"3130:6:9","type":""}]},{"nativeSrc":"3181:28:9","nodeType":"YulVariableDeclaration","src":"3181:28:9","value":{"kind":"number","nativeSrc":"3191:18:9","nodeType":"YulLiteral","src":"3191:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3185:2:9","nodeType":"YulTypedName","src":"3185:2:9","type":""}]},{"body":{"nativeSrc":"3236:16:9","nodeType":"YulBlock","src":"3236:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3245:1:9","nodeType":"YulLiteral","src":"3245:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3248:1:9","nodeType":"YulLiteral","src":"3248:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3238:6:9","nodeType":"YulIdentifier","src":"3238:6:9"},"nativeSrc":"3238:12:9","nodeType":"YulFunctionCall","src":"3238:12:9"},"nativeSrc":"3238:12:9","nodeType":"YulExpressionStatement","src":"3238:12:9"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3224:6:9","nodeType":"YulIdentifier","src":"3224:6:9"},{"name":"_1","nativeSrc":"3232:2:9","nodeType":"YulIdentifier","src":"3232:2:9"}],"functionName":{"name":"gt","nativeSrc":"3221:2:9","nodeType":"YulIdentifier","src":"3221:2:9"},"nativeSrc":"3221:14:9","nodeType":"YulFunctionCall","src":"3221:14:9"},"nativeSrc":"3218:34:9","nodeType":"YulIf","src":"3218:34:9"},{"nativeSrc":"3261:96:9","nodeType":"YulVariableDeclaration","src":"3261:96:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3329:9:9","nodeType":"YulIdentifier","src":"3329:9:9"},{"name":"offset","nativeSrc":"3340:6:9","nodeType":"YulIdentifier","src":"3340:6:9"}],"functionName":{"name":"add","nativeSrc":"3325:3:9","nodeType":"YulIdentifier","src":"3325:3:9"},"nativeSrc":"3325:22:9","nodeType":"YulFunctionCall","src":"3325:22:9"},{"name":"dataEnd","nativeSrc":"3349:7:9","nodeType":"YulIdentifier","src":"3349:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3287:37:9","nodeType":"YulIdentifier","src":"3287:37:9"},"nativeSrc":"3287:70:9","nodeType":"YulFunctionCall","src":"3287:70:9"},"variables":[{"name":"value2_1","nativeSrc":"3265:8:9","nodeType":"YulTypedName","src":"3265:8:9","type":""},{"name":"value3_1","nativeSrc":"3275:8:9","nodeType":"YulTypedName","src":"3275:8:9","type":""}]},{"nativeSrc":"3366:18:9","nodeType":"YulAssignment","src":"3366:18:9","value":{"name":"value2_1","nativeSrc":"3376:8:9","nodeType":"YulIdentifier","src":"3376:8:9"},"variableNames":[{"name":"value2","nativeSrc":"3366:6:9","nodeType":"YulIdentifier","src":"3366:6:9"}]},{"nativeSrc":"3393:18:9","nodeType":"YulAssignment","src":"3393:18:9","value":{"name":"value3_1","nativeSrc":"3403:8:9","nodeType":"YulIdentifier","src":"3403:8:9"},"variableNames":[{"name":"value3","nativeSrc":"3393:6:9","nodeType":"YulIdentifier","src":"3393:6:9"}]},{"nativeSrc":"3420:48:9","nodeType":"YulVariableDeclaration","src":"3420:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3453:9:9","nodeType":"YulIdentifier","src":"3453:9:9"},{"kind":"number","nativeSrc":"3464:2:9","nodeType":"YulLiteral","src":"3464:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3449:3:9","nodeType":"YulIdentifier","src":"3449:3:9"},"nativeSrc":"3449:18:9","nodeType":"YulFunctionCall","src":"3449:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"3436:12:9","nodeType":"YulIdentifier","src":"3436:12:9"},"nativeSrc":"3436:32:9","nodeType":"YulFunctionCall","src":"3436:32:9"},"variables":[{"name":"offset_1","nativeSrc":"3424:8:9","nodeType":"YulTypedName","src":"3424:8:9","type":""}]},{"body":{"nativeSrc":"3497:16:9","nodeType":"YulBlock","src":"3497:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3506:1:9","nodeType":"YulLiteral","src":"3506:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3509:1:9","nodeType":"YulLiteral","src":"3509:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3499:6:9","nodeType":"YulIdentifier","src":"3499:6:9"},"nativeSrc":"3499:12:9","nodeType":"YulFunctionCall","src":"3499:12:9"},"nativeSrc":"3499:12:9","nodeType":"YulExpressionStatement","src":"3499:12:9"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3483:8:9","nodeType":"YulIdentifier","src":"3483:8:9"},{"name":"_1","nativeSrc":"3493:2:9","nodeType":"YulIdentifier","src":"3493:2:9"}],"functionName":{"name":"gt","nativeSrc":"3480:2:9","nodeType":"YulIdentifier","src":"3480:2:9"},"nativeSrc":"3480:16:9","nodeType":"YulFunctionCall","src":"3480:16:9"},"nativeSrc":"3477:36:9","nodeType":"YulIf","src":"3477:36:9"},{"nativeSrc":"3522:98:9","nodeType":"YulVariableDeclaration","src":"3522:98:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3590:9:9","nodeType":"YulIdentifier","src":"3590:9:9"},{"name":"offset_1","nativeSrc":"3601:8:9","nodeType":"YulIdentifier","src":"3601:8:9"}],"functionName":{"name":"add","nativeSrc":"3586:3:9","nodeType":"YulIdentifier","src":"3586:3:9"},"nativeSrc":"3586:24:9","nodeType":"YulFunctionCall","src":"3586:24:9"},{"name":"dataEnd","nativeSrc":"3612:7:9","nodeType":"YulIdentifier","src":"3612:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3548:37:9","nodeType":"YulIdentifier","src":"3548:37:9"},"nativeSrc":"3548:72:9","nodeType":"YulFunctionCall","src":"3548:72:9"},"variables":[{"name":"value4_1","nativeSrc":"3526:8:9","nodeType":"YulTypedName","src":"3526:8:9","type":""},{"name":"value5_1","nativeSrc":"3536:8:9","nodeType":"YulTypedName","src":"3536:8:9","type":""}]},{"nativeSrc":"3629:18:9","nodeType":"YulAssignment","src":"3629:18:9","value":{"name":"value4_1","nativeSrc":"3639:8:9","nodeType":"YulIdentifier","src":"3639:8:9"},"variableNames":[{"name":"value4","nativeSrc":"3629:6:9","nodeType":"YulIdentifier","src":"3629:6:9"}]},{"nativeSrc":"3656:18:9","nodeType":"YulAssignment","src":"3656:18:9","value":{"name":"value5_1","nativeSrc":"3666:8:9","nodeType":"YulIdentifier","src":"3666:8:9"},"variableNames":[{"name":"value5","nativeSrc":"3656:6:9","nodeType":"YulIdentifier","src":"3656:6:9"}]},{"nativeSrc":"3683:49:9","nodeType":"YulVariableDeclaration","src":"3683:49:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3716:9:9","nodeType":"YulIdentifier","src":"3716:9:9"},{"kind":"number","nativeSrc":"3727:3:9","nodeType":"YulLiteral","src":"3727:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3712:3:9","nodeType":"YulIdentifier","src":"3712:3:9"},"nativeSrc":"3712:19:9","nodeType":"YulFunctionCall","src":"3712:19:9"}],"functionName":{"name":"calldataload","nativeSrc":"3699:12:9","nodeType":"YulIdentifier","src":"3699:12:9"},"nativeSrc":"3699:33:9","nodeType":"YulFunctionCall","src":"3699:33:9"},"variables":[{"name":"offset_2","nativeSrc":"3687:8:9","nodeType":"YulTypedName","src":"3687:8:9","type":""}]},{"body":{"nativeSrc":"3761:16:9","nodeType":"YulBlock","src":"3761:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3770:1:9","nodeType":"YulLiteral","src":"3770:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3773:1:9","nodeType":"YulLiteral","src":"3773:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3763:6:9","nodeType":"YulIdentifier","src":"3763:6:9"},"nativeSrc":"3763:12:9","nodeType":"YulFunctionCall","src":"3763:12:9"},"nativeSrc":"3763:12:9","nodeType":"YulExpressionStatement","src":"3763:12:9"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"3747:8:9","nodeType":"YulIdentifier","src":"3747:8:9"},{"name":"_1","nativeSrc":"3757:2:9","nodeType":"YulIdentifier","src":"3757:2:9"}],"functionName":{"name":"gt","nativeSrc":"3744:2:9","nodeType":"YulIdentifier","src":"3744:2:9"},"nativeSrc":"3744:16:9","nodeType":"YulFunctionCall","src":"3744:16:9"},"nativeSrc":"3741:36:9","nodeType":"YulIf","src":"3741:36:9"},{"nativeSrc":"3786:86:9","nodeType":"YulVariableDeclaration","src":"3786:86:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3842:9:9","nodeType":"YulIdentifier","src":"3842:9:9"},{"name":"offset_2","nativeSrc":"3853:8:9","nodeType":"YulIdentifier","src":"3853:8:9"}],"functionName":{"name":"add","nativeSrc":"3838:3:9","nodeType":"YulIdentifier","src":"3838:3:9"},"nativeSrc":"3838:24:9","nodeType":"YulFunctionCall","src":"3838:24:9"},{"name":"dataEnd","nativeSrc":"3864:7:9","nodeType":"YulIdentifier","src":"3864:7:9"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3812:25:9","nodeType":"YulIdentifier","src":"3812:25:9"},"nativeSrc":"3812:60:9","nodeType":"YulFunctionCall","src":"3812:60:9"},"variables":[{"name":"value6_1","nativeSrc":"3790:8:9","nodeType":"YulTypedName","src":"3790:8:9","type":""},{"name":"value7_1","nativeSrc":"3800:8:9","nodeType":"YulTypedName","src":"3800:8:9","type":""}]},{"nativeSrc":"3881:18:9","nodeType":"YulAssignment","src":"3881:18:9","value":{"name":"value6_1","nativeSrc":"3891:8:9","nodeType":"YulIdentifier","src":"3891:8:9"},"variableNames":[{"name":"value6","nativeSrc":"3881:6:9","nodeType":"YulIdentifier","src":"3881:6:9"}]},{"nativeSrc":"3908:18:9","nodeType":"YulAssignment","src":"3908:18:9","value":{"name":"value7_1","nativeSrc":"3918:8:9","nodeType":"YulIdentifier","src":"3918:8:9"},"variableNames":[{"name":"value7","nativeSrc":"3908:6:9","nodeType":"YulIdentifier","src":"3908:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"2722:1210:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2859:9:9","nodeType":"YulTypedName","src":"2859:9:9","type":""},{"name":"dataEnd","nativeSrc":"2870:7:9","nodeType":"YulTypedName","src":"2870:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2882:6:9","nodeType":"YulTypedName","src":"2882:6:9","type":""},{"name":"value1","nativeSrc":"2890:6:9","nodeType":"YulTypedName","src":"2890:6:9","type":""},{"name":"value2","nativeSrc":"2898:6:9","nodeType":"YulTypedName","src":"2898:6:9","type":""},{"name":"value3","nativeSrc":"2906:6:9","nodeType":"YulTypedName","src":"2906:6:9","type":""},{"name":"value4","nativeSrc":"2914:6:9","nodeType":"YulTypedName","src":"2914:6:9","type":""},{"name":"value5","nativeSrc":"2922:6:9","nodeType":"YulTypedName","src":"2922:6:9","type":""},{"name":"value6","nativeSrc":"2930:6:9","nodeType":"YulTypedName","src":"2930:6:9","type":""},{"name":"value7","nativeSrc":"2938:6:9","nodeType":"YulTypedName","src":"2938:6:9","type":""}],"src":"2722:1210:9"},{"body":{"nativeSrc":"4036:149:9","nodeType":"YulBlock","src":"4036:149:9","statements":[{"nativeSrc":"4046:26:9","nodeType":"YulAssignment","src":"4046:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"4058:9:9","nodeType":"YulIdentifier","src":"4058:9:9"},{"kind":"number","nativeSrc":"4069:2:9","nodeType":"YulLiteral","src":"4069:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4054:3:9","nodeType":"YulIdentifier","src":"4054:3:9"},"nativeSrc":"4054:18:9","nodeType":"YulFunctionCall","src":"4054:18:9"},"variableNames":[{"name":"tail","nativeSrc":"4046:4:9","nodeType":"YulIdentifier","src":"4046:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4088:9:9","nodeType":"YulIdentifier","src":"4088:9:9"},{"arguments":[{"name":"value0","nativeSrc":"4103:6:9","nodeType":"YulIdentifier","src":"4103:6:9"},{"kind":"number","nativeSrc":"4111:66:9","nodeType":"YulLiteral","src":"4111:66:9","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4099:3:9","nodeType":"YulIdentifier","src":"4099:3:9"},"nativeSrc":"4099:79:9","nodeType":"YulFunctionCall","src":"4099:79:9"}],"functionName":{"name":"mstore","nativeSrc":"4081:6:9","nodeType":"YulIdentifier","src":"4081:6:9"},"nativeSrc":"4081:98:9","nodeType":"YulFunctionCall","src":"4081:98:9"},"nativeSrc":"4081:98:9","nodeType":"YulExpressionStatement","src":"4081:98:9"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"3937:248:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4005:9:9","nodeType":"YulTypedName","src":"4005:9:9","type":""},{"name":"value0","nativeSrc":"4016:6:9","nodeType":"YulTypedName","src":"4016:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4027:4:9","nodeType":"YulTypedName","src":"4027:4:9","type":""}],"src":"3937:248:9"},{"body":{"nativeSrc":"4347:538:9","nodeType":"YulBlock","src":"4347:538:9","statements":[{"body":{"nativeSrc":"4394:16:9","nodeType":"YulBlock","src":"4394:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4403:1:9","nodeType":"YulLiteral","src":"4403:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"4406:1:9","nodeType":"YulLiteral","src":"4406:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4396:6:9","nodeType":"YulIdentifier","src":"4396:6:9"},"nativeSrc":"4396:12:9","nodeType":"YulFunctionCall","src":"4396:12:9"},"nativeSrc":"4396:12:9","nodeType":"YulExpressionStatement","src":"4396:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4368:7:9","nodeType":"YulIdentifier","src":"4368:7:9"},{"name":"headStart","nativeSrc":"4377:9:9","nodeType":"YulIdentifier","src":"4377:9:9"}],"functionName":{"name":"sub","nativeSrc":"4364:3:9","nodeType":"YulIdentifier","src":"4364:3:9"},"nativeSrc":"4364:23:9","nodeType":"YulFunctionCall","src":"4364:23:9"},{"kind":"number","nativeSrc":"4389:3:9","nodeType":"YulLiteral","src":"4389:3:9","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"4360:3:9","nodeType":"YulIdentifier","src":"4360:3:9"},"nativeSrc":"4360:33:9","nodeType":"YulFunctionCall","src":"4360:33:9"},"nativeSrc":"4357:53:9","nodeType":"YulIf","src":"4357:53:9"},{"nativeSrc":"4419:39:9","nodeType":"YulAssignment","src":"4419:39:9","value":{"arguments":[{"name":"headStart","nativeSrc":"4448:9:9","nodeType":"YulIdentifier","src":"4448:9:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4429:18:9","nodeType":"YulIdentifier","src":"4429:18:9"},"nativeSrc":"4429:29:9","nodeType":"YulFunctionCall","src":"4429:29:9"},"variableNames":[{"name":"value0","nativeSrc":"4419:6:9","nodeType":"YulIdentifier","src":"4419:6:9"}]},{"nativeSrc":"4467:48:9","nodeType":"YulAssignment","src":"4467:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4500:9:9","nodeType":"YulIdentifier","src":"4500:9:9"},{"kind":"number","nativeSrc":"4511:2:9","nodeType":"YulLiteral","src":"4511:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4496:3:9","nodeType":"YulIdentifier","src":"4496:3:9"},"nativeSrc":"4496:18:9","nodeType":"YulFunctionCall","src":"4496:18:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4477:18:9","nodeType":"YulIdentifier","src":"4477:18:9"},"nativeSrc":"4477:38:9","nodeType":"YulFunctionCall","src":"4477:38:9"},"variableNames":[{"name":"value1","nativeSrc":"4467:6:9","nodeType":"YulIdentifier","src":"4467:6:9"}]},{"nativeSrc":"4524:42:9","nodeType":"YulAssignment","src":"4524:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4551:9:9","nodeType":"YulIdentifier","src":"4551:9:9"},{"kind":"number","nativeSrc":"4562:2:9","nodeType":"YulLiteral","src":"4562:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4547:3:9","nodeType":"YulIdentifier","src":"4547:3:9"},"nativeSrc":"4547:18:9","nodeType":"YulFunctionCall","src":"4547:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"4534:12:9","nodeType":"YulIdentifier","src":"4534:12:9"},"nativeSrc":"4534:32:9","nodeType":"YulFunctionCall","src":"4534:32:9"},"variableNames":[{"name":"value2","nativeSrc":"4524:6:9","nodeType":"YulIdentifier","src":"4524:6:9"}]},{"nativeSrc":"4575:42:9","nodeType":"YulAssignment","src":"4575:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4602:9:9","nodeType":"YulIdentifier","src":"4602:9:9"},{"kind":"number","nativeSrc":"4613:2:9","nodeType":"YulLiteral","src":"4613:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4598:3:9","nodeType":"YulIdentifier","src":"4598:3:9"},"nativeSrc":"4598:18:9","nodeType":"YulFunctionCall","src":"4598:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"4585:12:9","nodeType":"YulIdentifier","src":"4585:12:9"},"nativeSrc":"4585:32:9","nodeType":"YulFunctionCall","src":"4585:32:9"},"variableNames":[{"name":"value3","nativeSrc":"4575:6:9","nodeType":"YulIdentifier","src":"4575:6:9"}]},{"nativeSrc":"4626:47:9","nodeType":"YulVariableDeclaration","src":"4626:47:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4657:9:9","nodeType":"YulIdentifier","src":"4657:9:9"},{"kind":"number","nativeSrc":"4668:3:9","nodeType":"YulLiteral","src":"4668:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4653:3:9","nodeType":"YulIdentifier","src":"4653:3:9"},"nativeSrc":"4653:19:9","nodeType":"YulFunctionCall","src":"4653:19:9"}],"functionName":{"name":"calldataload","nativeSrc":"4640:12:9","nodeType":"YulIdentifier","src":"4640:12:9"},"nativeSrc":"4640:33:9","nodeType":"YulFunctionCall","src":"4640:33:9"},"variables":[{"name":"offset","nativeSrc":"4630:6:9","nodeType":"YulTypedName","src":"4630:6:9","type":""}]},{"body":{"nativeSrc":"4716:16:9","nodeType":"YulBlock","src":"4716:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4725:1:9","nodeType":"YulLiteral","src":"4725:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"4728:1:9","nodeType":"YulLiteral","src":"4728:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4718:6:9","nodeType":"YulIdentifier","src":"4718:6:9"},"nativeSrc":"4718:12:9","nodeType":"YulFunctionCall","src":"4718:12:9"},"nativeSrc":"4718:12:9","nodeType":"YulExpressionStatement","src":"4718:12:9"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4688:6:9","nodeType":"YulIdentifier","src":"4688:6:9"},{"kind":"number","nativeSrc":"4696:18:9","nodeType":"YulLiteral","src":"4696:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4685:2:9","nodeType":"YulIdentifier","src":"4685:2:9"},"nativeSrc":"4685:30:9","nodeType":"YulFunctionCall","src":"4685:30:9"},"nativeSrc":"4682:50:9","nodeType":"YulIf","src":"4682:50:9"},{"nativeSrc":"4741:84:9","nodeType":"YulVariableDeclaration","src":"4741:84:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4797:9:9","nodeType":"YulIdentifier","src":"4797:9:9"},{"name":"offset","nativeSrc":"4808:6:9","nodeType":"YulIdentifier","src":"4808:6:9"}],"functionName":{"name":"add","nativeSrc":"4793:3:9","nodeType":"YulIdentifier","src":"4793:3:9"},"nativeSrc":"4793:22:9","nodeType":"YulFunctionCall","src":"4793:22:9"},{"name":"dataEnd","nativeSrc":"4817:7:9","nodeType":"YulIdentifier","src":"4817:7:9"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4767:25:9","nodeType":"YulIdentifier","src":"4767:25:9"},"nativeSrc":"4767:58:9","nodeType":"YulFunctionCall","src":"4767:58:9"},"variables":[{"name":"value4_1","nativeSrc":"4745:8:9","nodeType":"YulTypedName","src":"4745:8:9","type":""},{"name":"value5_1","nativeSrc":"4755:8:9","nodeType":"YulTypedName","src":"4755:8:9","type":""}]},{"nativeSrc":"4834:18:9","nodeType":"YulAssignment","src":"4834:18:9","value":{"name":"value4_1","nativeSrc":"4844:8:9","nodeType":"YulIdentifier","src":"4844:8:9"},"variableNames":[{"name":"value4","nativeSrc":"4834:6:9","nodeType":"YulIdentifier","src":"4834:6:9"}]},{"nativeSrc":"4861:18:9","nodeType":"YulAssignment","src":"4861:18:9","value":{"name":"value5_1","nativeSrc":"4871:8:9","nodeType":"YulIdentifier","src":"4871:8:9"},"variableNames":[{"name":"value5","nativeSrc":"4861:6:9","nodeType":"YulIdentifier","src":"4861:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"4190:695:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4273:9:9","nodeType":"YulTypedName","src":"4273:9:9","type":""},{"name":"dataEnd","nativeSrc":"4284:7:9","nodeType":"YulTypedName","src":"4284:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4296:6:9","nodeType":"YulTypedName","src":"4296:6:9","type":""},{"name":"value1","nativeSrc":"4304:6:9","nodeType":"YulTypedName","src":"4304:6:9","type":""},{"name":"value2","nativeSrc":"4312:6:9","nodeType":"YulTypedName","src":"4312:6:9","type":""},{"name":"value3","nativeSrc":"4320:6:9","nodeType":"YulTypedName","src":"4320:6:9","type":""},{"name":"value4","nativeSrc":"4328:6:9","nodeType":"YulTypedName","src":"4328:6:9","type":""},{"name":"value5","nativeSrc":"4336:6:9","nodeType":"YulTypedName","src":"4336:6:9","type":""}],"src":"4190:695:9"},{"body":{"nativeSrc":"4922:152:9","nodeType":"YulBlock","src":"4922:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4939:1:9","nodeType":"YulLiteral","src":"4939:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"4942:77:9","nodeType":"YulLiteral","src":"4942:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4932:6:9","nodeType":"YulIdentifier","src":"4932:6:9"},"nativeSrc":"4932:88:9","nodeType":"YulFunctionCall","src":"4932:88:9"},"nativeSrc":"4932:88:9","nodeType":"YulExpressionStatement","src":"4932:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5036:1:9","nodeType":"YulLiteral","src":"5036:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"5039:4:9","nodeType":"YulLiteral","src":"5039:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5029:6:9","nodeType":"YulIdentifier","src":"5029:6:9"},"nativeSrc":"5029:15:9","nodeType":"YulFunctionCall","src":"5029:15:9"},"nativeSrc":"5029:15:9","nodeType":"YulExpressionStatement","src":"5029:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5060:1:9","nodeType":"YulLiteral","src":"5060:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5063:4:9","nodeType":"YulLiteral","src":"5063:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5053:6:9","nodeType":"YulIdentifier","src":"5053:6:9"},"nativeSrc":"5053:15:9","nodeType":"YulFunctionCall","src":"5053:15:9"},"nativeSrc":"5053:15:9","nodeType":"YulExpressionStatement","src":"5053:15:9"}]},"name":"panic_error_0x11","nativeSrc":"4890:184:9","nodeType":"YulFunctionDefinition","src":"4890:184:9"},{"body":{"nativeSrc":"5128:79:9","nodeType":"YulBlock","src":"5128:79:9","statements":[{"nativeSrc":"5138:17:9","nodeType":"YulAssignment","src":"5138:17:9","value":{"arguments":[{"name":"x","nativeSrc":"5150:1:9","nodeType":"YulIdentifier","src":"5150:1:9"},{"name":"y","nativeSrc":"5153:1:9","nodeType":"YulIdentifier","src":"5153:1:9"}],"functionName":{"name":"sub","nativeSrc":"5146:3:9","nodeType":"YulIdentifier","src":"5146:3:9"},"nativeSrc":"5146:9:9","nodeType":"YulFunctionCall","src":"5146:9:9"},"variableNames":[{"name":"diff","nativeSrc":"5138:4:9","nodeType":"YulIdentifier","src":"5138:4:9"}]},{"body":{"nativeSrc":"5179:22:9","nodeType":"YulBlock","src":"5179:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5181:16:9","nodeType":"YulIdentifier","src":"5181:16:9"},"nativeSrc":"5181:18:9","nodeType":"YulFunctionCall","src":"5181:18:9"},"nativeSrc":"5181:18:9","nodeType":"YulExpressionStatement","src":"5181:18:9"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5170:4:9","nodeType":"YulIdentifier","src":"5170:4:9"},{"name":"x","nativeSrc":"5176:1:9","nodeType":"YulIdentifier","src":"5176:1:9"}],"functionName":{"name":"gt","nativeSrc":"5167:2:9","nodeType":"YulIdentifier","src":"5167:2:9"},"nativeSrc":"5167:11:9","nodeType":"YulFunctionCall","src":"5167:11:9"},"nativeSrc":"5164:37:9","nodeType":"YulIf","src":"5164:37:9"}]},"name":"checked_sub_t_uint256","nativeSrc":"5079:128:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5110:1:9","nodeType":"YulTypedName","src":"5110:1:9","type":""},{"name":"y","nativeSrc":"5113:1:9","nodeType":"YulTypedName","src":"5113:1:9","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5119:4:9","nodeType":"YulTypedName","src":"5119:4:9","type":""}],"src":"5079:128:9"},{"body":{"nativeSrc":"5258:228:9","nodeType":"YulBlock","src":"5258:228:9","statements":[{"body":{"nativeSrc":"5289:168:9","nodeType":"YulBlock","src":"5289:168:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5310:1:9","nodeType":"YulLiteral","src":"5310:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5313:77:9","nodeType":"YulLiteral","src":"5313:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5303:6:9","nodeType":"YulIdentifier","src":"5303:6:9"},"nativeSrc":"5303:88:9","nodeType":"YulFunctionCall","src":"5303:88:9"},"nativeSrc":"5303:88:9","nodeType":"YulExpressionStatement","src":"5303:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5411:1:9","nodeType":"YulLiteral","src":"5411:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"5414:4:9","nodeType":"YulLiteral","src":"5414:4:9","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"5404:6:9","nodeType":"YulIdentifier","src":"5404:6:9"},"nativeSrc":"5404:15:9","nodeType":"YulFunctionCall","src":"5404:15:9"},"nativeSrc":"5404:15:9","nodeType":"YulExpressionStatement","src":"5404:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5439:1:9","nodeType":"YulLiteral","src":"5439:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5442:4:9","nodeType":"YulLiteral","src":"5442:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5432:6:9","nodeType":"YulIdentifier","src":"5432:6:9"},"nativeSrc":"5432:15:9","nodeType":"YulFunctionCall","src":"5432:15:9"},"nativeSrc":"5432:15:9","nodeType":"YulExpressionStatement","src":"5432:15:9"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5278:1:9","nodeType":"YulIdentifier","src":"5278:1:9"}],"functionName":{"name":"iszero","nativeSrc":"5271:6:9","nodeType":"YulIdentifier","src":"5271:6:9"},"nativeSrc":"5271:9:9","nodeType":"YulFunctionCall","src":"5271:9:9"},"nativeSrc":"5268:189:9","nodeType":"YulIf","src":"5268:189:9"},{"nativeSrc":"5466:14:9","nodeType":"YulAssignment","src":"5466:14:9","value":{"arguments":[{"name":"x","nativeSrc":"5475:1:9","nodeType":"YulIdentifier","src":"5475:1:9"},{"name":"y","nativeSrc":"5478:1:9","nodeType":"YulIdentifier","src":"5478:1:9"}],"functionName":{"name":"div","nativeSrc":"5471:3:9","nodeType":"YulIdentifier","src":"5471:3:9"},"nativeSrc":"5471:9:9","nodeType":"YulFunctionCall","src":"5471:9:9"},"variableNames":[{"name":"r","nativeSrc":"5466:1:9","nodeType":"YulIdentifier","src":"5466:1:9"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5212:274:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5243:1:9","nodeType":"YulTypedName","src":"5243:1:9","type":""},{"name":"y","nativeSrc":"5246:1:9","nodeType":"YulTypedName","src":"5246:1:9","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5252:1:9","nodeType":"YulTypedName","src":"5252:1:9","type":""}],"src":"5212:274:9"},{"body":{"nativeSrc":"5592:125:9","nodeType":"YulBlock","src":"5592:125:9","statements":[{"nativeSrc":"5602:26:9","nodeType":"YulAssignment","src":"5602:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"5614:9:9","nodeType":"YulIdentifier","src":"5614:9:9"},{"kind":"number","nativeSrc":"5625:2:9","nodeType":"YulLiteral","src":"5625:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5610:3:9","nodeType":"YulIdentifier","src":"5610:3:9"},"nativeSrc":"5610:18:9","nodeType":"YulFunctionCall","src":"5610:18:9"},"variableNames":[{"name":"tail","nativeSrc":"5602:4:9","nodeType":"YulIdentifier","src":"5602:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5644:9:9","nodeType":"YulIdentifier","src":"5644:9:9"},{"arguments":[{"name":"value0","nativeSrc":"5659:6:9","nodeType":"YulIdentifier","src":"5659:6:9"},{"kind":"number","nativeSrc":"5667:42:9","nodeType":"YulLiteral","src":"5667:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5655:3:9","nodeType":"YulIdentifier","src":"5655:3:9"},"nativeSrc":"5655:55:9","nodeType":"YulFunctionCall","src":"5655:55:9"}],"functionName":{"name":"mstore","nativeSrc":"5637:6:9","nodeType":"YulIdentifier","src":"5637:6:9"},"nativeSrc":"5637:74:9","nodeType":"YulFunctionCall","src":"5637:74:9"},"nativeSrc":"5637:74:9","nodeType":"YulExpressionStatement","src":"5637:74:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"5491:226:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5561:9:9","nodeType":"YulTypedName","src":"5561:9:9","type":""},{"name":"value0","nativeSrc":"5572:6:9","nodeType":"YulTypedName","src":"5572:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5583:4:9","nodeType":"YulTypedName","src":"5583:4:9","type":""}],"src":"5491:226:9"},{"body":{"nativeSrc":"5800:280:9","nodeType":"YulBlock","src":"5800:280:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5817:3:9","nodeType":"YulIdentifier","src":"5817:3:9"},{"name":"length","nativeSrc":"5822:6:9","nodeType":"YulIdentifier","src":"5822:6:9"}],"functionName":{"name":"mstore","nativeSrc":"5810:6:9","nodeType":"YulIdentifier","src":"5810:6:9"},"nativeSrc":"5810:19:9","nodeType":"YulFunctionCall","src":"5810:19:9"},"nativeSrc":"5810:19:9","nodeType":"YulExpressionStatement","src":"5810:19:9"},{"body":{"nativeSrc":"5920:16:9","nodeType":"YulBlock","src":"5920:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5929:1:9","nodeType":"YulLiteral","src":"5929:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5932:1:9","nodeType":"YulLiteral","src":"5932:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5922:6:9","nodeType":"YulIdentifier","src":"5922:6:9"},"nativeSrc":"5922:12:9","nodeType":"YulFunctionCall","src":"5922:12:9"},"nativeSrc":"5922:12:9","nodeType":"YulExpressionStatement","src":"5922:12:9"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"5844:6:9","nodeType":"YulIdentifier","src":"5844:6:9"},{"kind":"number","nativeSrc":"5852:66:9","nodeType":"YulLiteral","src":"5852:66:9","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5841:2:9","nodeType":"YulIdentifier","src":"5841:2:9"},"nativeSrc":"5841:78:9","nodeType":"YulFunctionCall","src":"5841:78:9"},"nativeSrc":"5838:98:9","nodeType":"YulIf","src":"5838:98:9"},{"nativeSrc":"5945:30:9","nodeType":"YulVariableDeclaration","src":"5945:30:9","value":{"arguments":[{"kind":"number","nativeSrc":"5965:1:9","nodeType":"YulLiteral","src":"5965:1:9","type":"","value":"5"},{"name":"length","nativeSrc":"5968:6:9","nodeType":"YulIdentifier","src":"5968:6:9"}],"functionName":{"name":"shl","nativeSrc":"5961:3:9","nodeType":"YulIdentifier","src":"5961:3:9"},"nativeSrc":"5961:14:9","nodeType":"YulFunctionCall","src":"5961:14:9"},"variables":[{"name":"length_1","nativeSrc":"5949:8:9","nodeType":"YulTypedName","src":"5949:8:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6001:3:9","nodeType":"YulIdentifier","src":"6001:3:9"},{"kind":"number","nativeSrc":"6006:4:9","nodeType":"YulLiteral","src":"6006:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5997:3:9","nodeType":"YulIdentifier","src":"5997:3:9"},"nativeSrc":"5997:14:9","nodeType":"YulFunctionCall","src":"5997:14:9"},{"name":"start","nativeSrc":"6013:5:9","nodeType":"YulIdentifier","src":"6013:5:9"},{"name":"length_1","nativeSrc":"6020:8:9","nodeType":"YulIdentifier","src":"6020:8:9"}],"functionName":{"name":"calldatacopy","nativeSrc":"5984:12:9","nodeType":"YulIdentifier","src":"5984:12:9"},"nativeSrc":"5984:45:9","nodeType":"YulFunctionCall","src":"5984:45:9"},"nativeSrc":"5984:45:9","nodeType":"YulExpressionStatement","src":"5984:45:9"},{"nativeSrc":"6038:36:9","nodeType":"YulAssignment","src":"6038:36:9","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6053:3:9","nodeType":"YulIdentifier","src":"6053:3:9"},{"name":"length_1","nativeSrc":"6058:8:9","nodeType":"YulIdentifier","src":"6058:8:9"}],"functionName":{"name":"add","nativeSrc":"6049:3:9","nodeType":"YulIdentifier","src":"6049:3:9"},"nativeSrc":"6049:18:9","nodeType":"YulFunctionCall","src":"6049:18:9"},{"kind":"number","nativeSrc":"6069:4:9","nodeType":"YulLiteral","src":"6069:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6045:3:9","nodeType":"YulIdentifier","src":"6045:3:9"},"nativeSrc":"6045:29:9","nodeType":"YulFunctionCall","src":"6045:29:9"},"variableNames":[{"name":"end","nativeSrc":"6038:3:9","nodeType":"YulIdentifier","src":"6038:3:9"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"5722:358:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"5769:5:9","nodeType":"YulTypedName","src":"5769:5:9","type":""},{"name":"length","nativeSrc":"5776:6:9","nodeType":"YulTypedName","src":"5776:6:9","type":""},{"name":"pos","nativeSrc":"5784:3:9","nodeType":"YulTypedName","src":"5784:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5792:3:9","nodeType":"YulTypedName","src":"5792:3:9","type":""}],"src":"5722:358:9"},{"body":{"nativeSrc":"6362:362:9","nodeType":"YulBlock","src":"6362:362:9","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6379:9:9","nodeType":"YulIdentifier","src":"6379:9:9"},{"arguments":[{"name":"value0","nativeSrc":"6394:6:9","nodeType":"YulIdentifier","src":"6394:6:9"},{"kind":"number","nativeSrc":"6402:42:9","nodeType":"YulLiteral","src":"6402:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6390:3:9","nodeType":"YulIdentifier","src":"6390:3:9"},"nativeSrc":"6390:55:9","nodeType":"YulFunctionCall","src":"6390:55:9"}],"functionName":{"name":"mstore","nativeSrc":"6372:6:9","nodeType":"YulIdentifier","src":"6372:6:9"},"nativeSrc":"6372:74:9","nodeType":"YulFunctionCall","src":"6372:74:9"},"nativeSrc":"6372:74:9","nodeType":"YulExpressionStatement","src":"6372:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6466:9:9","nodeType":"YulIdentifier","src":"6466:9:9"},{"kind":"number","nativeSrc":"6477:2:9","nodeType":"YulLiteral","src":"6477:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6462:3:9","nodeType":"YulIdentifier","src":"6462:3:9"},"nativeSrc":"6462:18:9","nodeType":"YulFunctionCall","src":"6462:18:9"},{"kind":"number","nativeSrc":"6482:2:9","nodeType":"YulLiteral","src":"6482:2:9","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"6455:6:9","nodeType":"YulIdentifier","src":"6455:6:9"},"nativeSrc":"6455:30:9","nodeType":"YulFunctionCall","src":"6455:30:9"},"nativeSrc":"6455:30:9","nodeType":"YulExpressionStatement","src":"6455:30:9"},{"nativeSrc":"6494:87:9","nodeType":"YulVariableDeclaration","src":"6494:87:9","value":{"arguments":[{"name":"value1","nativeSrc":"6546:6:9","nodeType":"YulIdentifier","src":"6546:6:9"},{"name":"value2","nativeSrc":"6554:6:9","nodeType":"YulIdentifier","src":"6554:6:9"},{"arguments":[{"name":"headStart","nativeSrc":"6566:9:9","nodeType":"YulIdentifier","src":"6566:9:9"},{"kind":"number","nativeSrc":"6577:2:9","nodeType":"YulLiteral","src":"6577:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6562:3:9","nodeType":"YulIdentifier","src":"6562:3:9"},"nativeSrc":"6562:18:9","nodeType":"YulFunctionCall","src":"6562:18:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6508:37:9","nodeType":"YulIdentifier","src":"6508:37:9"},"nativeSrc":"6508:73:9","nodeType":"YulFunctionCall","src":"6508:73:9"},"variables":[{"name":"tail_1","nativeSrc":"6498:6:9","nodeType":"YulTypedName","src":"6498:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6601:9:9","nodeType":"YulIdentifier","src":"6601:9:9"},{"kind":"number","nativeSrc":"6612:2:9","nodeType":"YulLiteral","src":"6612:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6597:3:9","nodeType":"YulIdentifier","src":"6597:3:9"},"nativeSrc":"6597:18:9","nodeType":"YulFunctionCall","src":"6597:18:9"},{"arguments":[{"name":"tail_1","nativeSrc":"6621:6:9","nodeType":"YulIdentifier","src":"6621:6:9"},{"name":"headStart","nativeSrc":"6629:9:9","nodeType":"YulIdentifier","src":"6629:9:9"}],"functionName":{"name":"sub","nativeSrc":"6617:3:9","nodeType":"YulIdentifier","src":"6617:3:9"},"nativeSrc":"6617:22:9","nodeType":"YulFunctionCall","src":"6617:22:9"}],"functionName":{"name":"mstore","nativeSrc":"6590:6:9","nodeType":"YulIdentifier","src":"6590:6:9"},"nativeSrc":"6590:50:9","nodeType":"YulFunctionCall","src":"6590:50:9"},"nativeSrc":"6590:50:9","nodeType":"YulExpressionStatement","src":"6590:50:9"},{"nativeSrc":"6649:69:9","nodeType":"YulAssignment","src":"6649:69:9","value":{"arguments":[{"name":"value3","nativeSrc":"6695:6:9","nodeType":"YulIdentifier","src":"6695:6:9"},{"name":"value4","nativeSrc":"6703:6:9","nodeType":"YulIdentifier","src":"6703:6:9"},{"name":"tail_1","nativeSrc":"6711:6:9","nodeType":"YulIdentifier","src":"6711:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6657:37:9","nodeType":"YulIdentifier","src":"6657:37:9"},"nativeSrc":"6657:61:9","nodeType":"YulFunctionCall","src":"6657:61:9"},"variableNames":[{"name":"tail","nativeSrc":"6649:4:9","nodeType":"YulIdentifier","src":"6649:4:9"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6085:639:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6299:9:9","nodeType":"YulTypedName","src":"6299:9:9","type":""},{"name":"value4","nativeSrc":"6310:6:9","nodeType":"YulTypedName","src":"6310:6:9","type":""},{"name":"value3","nativeSrc":"6318:6:9","nodeType":"YulTypedName","src":"6318:6:9","type":""},{"name":"value2","nativeSrc":"6326:6:9","nodeType":"YulTypedName","src":"6326:6:9","type":""},{"name":"value1","nativeSrc":"6334:6:9","nodeType":"YulTypedName","src":"6334:6:9","type":""},{"name":"value0","nativeSrc":"6342:6:9","nodeType":"YulTypedName","src":"6342:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6353:4:9","nodeType":"YulTypedName","src":"6353:4:9","type":""}],"src":"6085:639:9"},{"body":{"nativeSrc":"6761:152:9","nodeType":"YulBlock","src":"6761:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6778:1:9","nodeType":"YulLiteral","src":"6778:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"6781:77:9","nodeType":"YulLiteral","src":"6781:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6771:6:9","nodeType":"YulIdentifier","src":"6771:6:9"},"nativeSrc":"6771:88:9","nodeType":"YulFunctionCall","src":"6771:88:9"},"nativeSrc":"6771:88:9","nodeType":"YulExpressionStatement","src":"6771:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6875:1:9","nodeType":"YulLiteral","src":"6875:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"6878:4:9","nodeType":"YulLiteral","src":"6878:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6868:6:9","nodeType":"YulIdentifier","src":"6868:6:9"},"nativeSrc":"6868:15:9","nodeType":"YulFunctionCall","src":"6868:15:9"},"nativeSrc":"6868:15:9","nodeType":"YulExpressionStatement","src":"6868:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6899:1:9","nodeType":"YulLiteral","src":"6899:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"6902:4:9","nodeType":"YulLiteral","src":"6902:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6892:6:9","nodeType":"YulIdentifier","src":"6892:6:9"},"nativeSrc":"6892:15:9","nodeType":"YulFunctionCall","src":"6892:15:9"},"nativeSrc":"6892:15:9","nodeType":"YulExpressionStatement","src":"6892:15:9"}]},"name":"panic_error_0x32","nativeSrc":"6729:184:9","nodeType":"YulFunctionDefinition","src":"6729:184:9"},{"body":{"nativeSrc":"7075:211:9","nodeType":"YulBlock","src":"7075:211:9","statements":[{"nativeSrc":"7085:26:9","nodeType":"YulAssignment","src":"7085:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"7097:9:9","nodeType":"YulIdentifier","src":"7097:9:9"},{"kind":"number","nativeSrc":"7108:2:9","nodeType":"YulLiteral","src":"7108:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7093:3:9","nodeType":"YulIdentifier","src":"7093:3:9"},"nativeSrc":"7093:18:9","nodeType":"YulFunctionCall","src":"7093:18:9"},"variableNames":[{"name":"tail","nativeSrc":"7085:4:9","nodeType":"YulIdentifier","src":"7085:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7127:9:9","nodeType":"YulIdentifier","src":"7127:9:9"},{"arguments":[{"name":"value0","nativeSrc":"7142:6:9","nodeType":"YulIdentifier","src":"7142:6:9"},{"kind":"number","nativeSrc":"7150:42:9","nodeType":"YulLiteral","src":"7150:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7138:3:9","nodeType":"YulIdentifier","src":"7138:3:9"},"nativeSrc":"7138:55:9","nodeType":"YulFunctionCall","src":"7138:55:9"}],"functionName":{"name":"mstore","nativeSrc":"7120:6:9","nodeType":"YulIdentifier","src":"7120:6:9"},"nativeSrc":"7120:74:9","nodeType":"YulFunctionCall","src":"7120:74:9"},"nativeSrc":"7120:74:9","nodeType":"YulExpressionStatement","src":"7120:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7214:9:9","nodeType":"YulIdentifier","src":"7214:9:9"},{"kind":"number","nativeSrc":"7225:2:9","nodeType":"YulLiteral","src":"7225:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7210:3:9","nodeType":"YulIdentifier","src":"7210:3:9"},"nativeSrc":"7210:18:9","nodeType":"YulFunctionCall","src":"7210:18:9"},{"name":"value1","nativeSrc":"7230:6:9","nodeType":"YulIdentifier","src":"7230:6:9"}],"functionName":{"name":"mstore","nativeSrc":"7203:6:9","nodeType":"YulIdentifier","src":"7203:6:9"},"nativeSrc":"7203:34:9","nodeType":"YulFunctionCall","src":"7203:34:9"},"nativeSrc":"7203:34:9","nodeType":"YulExpressionStatement","src":"7203:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7257:9:9","nodeType":"YulIdentifier","src":"7257:9:9"},{"kind":"number","nativeSrc":"7268:2:9","nodeType":"YulLiteral","src":"7268:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7253:3:9","nodeType":"YulIdentifier","src":"7253:3:9"},"nativeSrc":"7253:18:9","nodeType":"YulFunctionCall","src":"7253:18:9"},{"name":"value2","nativeSrc":"7273:6:9","nodeType":"YulIdentifier","src":"7273:6:9"}],"functionName":{"name":"mstore","nativeSrc":"7246:6:9","nodeType":"YulIdentifier","src":"7246:6:9"},"nativeSrc":"7246:34:9","nodeType":"YulFunctionCall","src":"7246:34:9"},"nativeSrc":"7246:34:9","nodeType":"YulExpressionStatement","src":"7246:34:9"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"6918:368:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7028:9:9","nodeType":"YulTypedName","src":"7028:9:9","type":""},{"name":"value2","nativeSrc":"7039:6:9","nodeType":"YulTypedName","src":"7039:6:9","type":""},{"name":"value1","nativeSrc":"7047:6:9","nodeType":"YulTypedName","src":"7047:6:9","type":""},{"name":"value0","nativeSrc":"7055:6:9","nodeType":"YulTypedName","src":"7055:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7066:4:9","nodeType":"YulTypedName","src":"7066:4:9","type":""}],"src":"6918:368:9"},{"body":{"nativeSrc":"7343:116:9","nodeType":"YulBlock","src":"7343:116:9","statements":[{"nativeSrc":"7353:20:9","nodeType":"YulAssignment","src":"7353:20:9","value":{"arguments":[{"name":"x","nativeSrc":"7368:1:9","nodeType":"YulIdentifier","src":"7368:1:9"},{"name":"y","nativeSrc":"7371:1:9","nodeType":"YulIdentifier","src":"7371:1:9"}],"functionName":{"name":"mul","nativeSrc":"7364:3:9","nodeType":"YulIdentifier","src":"7364:3:9"},"nativeSrc":"7364:9:9","nodeType":"YulFunctionCall","src":"7364:9:9"},"variableNames":[{"name":"product","nativeSrc":"7353:7:9","nodeType":"YulIdentifier","src":"7353:7:9"}]},{"body":{"nativeSrc":"7431:22:9","nodeType":"YulBlock","src":"7431:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7433:16:9","nodeType":"YulIdentifier","src":"7433:16:9"},"nativeSrc":"7433:18:9","nodeType":"YulFunctionCall","src":"7433:18:9"},"nativeSrc":"7433:18:9","nodeType":"YulExpressionStatement","src":"7433:18:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"7402:1:9","nodeType":"YulIdentifier","src":"7402:1:9"}],"functionName":{"name":"iszero","nativeSrc":"7395:6:9","nodeType":"YulIdentifier","src":"7395:6:9"},"nativeSrc":"7395:9:9","nodeType":"YulFunctionCall","src":"7395:9:9"},{"arguments":[{"name":"y","nativeSrc":"7409:1:9","nodeType":"YulIdentifier","src":"7409:1:9"},{"arguments":[{"name":"product","nativeSrc":"7416:7:9","nodeType":"YulIdentifier","src":"7416:7:9"},{"name":"x","nativeSrc":"7425:1:9","nodeType":"YulIdentifier","src":"7425:1:9"}],"functionName":{"name":"div","nativeSrc":"7412:3:9","nodeType":"YulIdentifier","src":"7412:3:9"},"nativeSrc":"7412:15:9","nodeType":"YulFunctionCall","src":"7412:15:9"}],"functionName":{"name":"eq","nativeSrc":"7406:2:9","nodeType":"YulIdentifier","src":"7406:2:9"},"nativeSrc":"7406:22:9","nodeType":"YulFunctionCall","src":"7406:22:9"}],"functionName":{"name":"or","nativeSrc":"7392:2:9","nodeType":"YulIdentifier","src":"7392:2:9"},"nativeSrc":"7392:37:9","nodeType":"YulFunctionCall","src":"7392:37:9"}],"functionName":{"name":"iszero","nativeSrc":"7385:6:9","nodeType":"YulIdentifier","src":"7385:6:9"},"nativeSrc":"7385:45:9","nodeType":"YulFunctionCall","src":"7385:45:9"},"nativeSrc":"7382:71:9","nodeType":"YulIf","src":"7382:71:9"}]},"name":"checked_mul_t_uint256","nativeSrc":"7291:168:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7322:1:9","nodeType":"YulTypedName","src":"7322:1:9","type":""},{"name":"y","nativeSrc":"7325:1:9","nodeType":"YulTypedName","src":"7325:1:9","type":""}],"returnVariables":[{"name":"product","nativeSrc":"7331:7:9","nodeType":"YulTypedName","src":"7331:7:9","type":""}],"src":"7291:168:9"},{"body":{"nativeSrc":"7512:77:9","nodeType":"YulBlock","src":"7512:77:9","statements":[{"nativeSrc":"7522:16:9","nodeType":"YulAssignment","src":"7522:16:9","value":{"arguments":[{"name":"x","nativeSrc":"7533:1:9","nodeType":"YulIdentifier","src":"7533:1:9"},{"name":"y","nativeSrc":"7536:1:9","nodeType":"YulIdentifier","src":"7536:1:9"}],"functionName":{"name":"add","nativeSrc":"7529:3:9","nodeType":"YulIdentifier","src":"7529:3:9"},"nativeSrc":"7529:9:9","nodeType":"YulFunctionCall","src":"7529:9:9"},"variableNames":[{"name":"sum","nativeSrc":"7522:3:9","nodeType":"YulIdentifier","src":"7522:3:9"}]},{"body":{"nativeSrc":"7561:22:9","nodeType":"YulBlock","src":"7561:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7563:16:9","nodeType":"YulIdentifier","src":"7563:16:9"},"nativeSrc":"7563:18:9","nodeType":"YulFunctionCall","src":"7563:18:9"},"nativeSrc":"7563:18:9","nodeType":"YulExpressionStatement","src":"7563:18:9"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"7553:1:9","nodeType":"YulIdentifier","src":"7553:1:9"},{"name":"sum","nativeSrc":"7556:3:9","nodeType":"YulIdentifier","src":"7556:3:9"}],"functionName":{"name":"gt","nativeSrc":"7550:2:9","nodeType":"YulIdentifier","src":"7550:2:9"},"nativeSrc":"7550:10:9","nodeType":"YulFunctionCall","src":"7550:10:9"},"nativeSrc":"7547:36:9","nodeType":"YulIf","src":"7547:36:9"}]},"name":"checked_add_t_uint256","nativeSrc":"7464:125:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7495:1:9","nodeType":"YulTypedName","src":"7495:1:9","type":""},{"name":"y","nativeSrc":"7498:1:9","nodeType":"YulTypedName","src":"7498:1:9","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"7504:3:9","nodeType":"YulTypedName","src":"7504:3:9","type":""}],"src":"7464:125:9"},{"body":{"nativeSrc":"7723:168:9","nodeType":"YulBlock","src":"7723:168:9","statements":[{"nativeSrc":"7733:26:9","nodeType":"YulAssignment","src":"7733:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"7745:9:9","nodeType":"YulIdentifier","src":"7745:9:9"},{"kind":"number","nativeSrc":"7756:2:9","nodeType":"YulLiteral","src":"7756:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7741:3:9","nodeType":"YulIdentifier","src":"7741:3:9"},"nativeSrc":"7741:18:9","nodeType":"YulFunctionCall","src":"7741:18:9"},"variableNames":[{"name":"tail","nativeSrc":"7733:4:9","nodeType":"YulIdentifier","src":"7733:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7775:9:9","nodeType":"YulIdentifier","src":"7775:9:9"},{"arguments":[{"name":"value0","nativeSrc":"7790:6:9","nodeType":"YulIdentifier","src":"7790:6:9"},{"kind":"number","nativeSrc":"7798:42:9","nodeType":"YulLiteral","src":"7798:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7786:3:9","nodeType":"YulIdentifier","src":"7786:3:9"},"nativeSrc":"7786:55:9","nodeType":"YulFunctionCall","src":"7786:55:9"}],"functionName":{"name":"mstore","nativeSrc":"7768:6:9","nodeType":"YulIdentifier","src":"7768:6:9"},"nativeSrc":"7768:74:9","nodeType":"YulFunctionCall","src":"7768:74:9"},"nativeSrc":"7768:74:9","nodeType":"YulExpressionStatement","src":"7768:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7862:9:9","nodeType":"YulIdentifier","src":"7862:9:9"},{"kind":"number","nativeSrc":"7873:2:9","nodeType":"YulLiteral","src":"7873:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7858:3:9","nodeType":"YulIdentifier","src":"7858:3:9"},"nativeSrc":"7858:18:9","nodeType":"YulFunctionCall","src":"7858:18:9"},{"name":"value1","nativeSrc":"7878:6:9","nodeType":"YulIdentifier","src":"7878:6:9"}],"functionName":{"name":"mstore","nativeSrc":"7851:6:9","nodeType":"YulIdentifier","src":"7851:6:9"},"nativeSrc":"7851:34:9","nodeType":"YulFunctionCall","src":"7851:34:9"},"nativeSrc":"7851:34:9","nodeType":"YulExpressionStatement","src":"7851:34:9"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7594:297:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7684:9:9","nodeType":"YulTypedName","src":"7684:9:9","type":""},{"name":"value1","nativeSrc":"7695:6:9","nodeType":"YulTypedName","src":"7695:6:9","type":""},{"name":"value0","nativeSrc":"7703:6:9","nodeType":"YulTypedName","src":"7703:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7714:4:9","nodeType":"YulTypedName","src":"7714:4:9","type":""}],"src":"7594:297:9"},{"body":{"nativeSrc":"7928:152:9","nodeType":"YulBlock","src":"7928:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7945:1:9","nodeType":"YulLiteral","src":"7945:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"7948:77:9","nodeType":"YulLiteral","src":"7948:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7938:6:9","nodeType":"YulIdentifier","src":"7938:6:9"},"nativeSrc":"7938:88:9","nodeType":"YulFunctionCall","src":"7938:88:9"},"nativeSrc":"7938:88:9","nodeType":"YulExpressionStatement","src":"7938:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8042:1:9","nodeType":"YulLiteral","src":"8042:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"8045:4:9","nodeType":"YulLiteral","src":"8045:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8035:6:9","nodeType":"YulIdentifier","src":"8035:6:9"},"nativeSrc":"8035:15:9","nodeType":"YulFunctionCall","src":"8035:15:9"},"nativeSrc":"8035:15:9","nodeType":"YulExpressionStatement","src":"8035:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8066:1:9","nodeType":"YulLiteral","src":"8066:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8069:4:9","nodeType":"YulLiteral","src":"8069:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8059:6:9","nodeType":"YulIdentifier","src":"8059:6:9"},"nativeSrc":"8059:15:9","nodeType":"YulFunctionCall","src":"8059:15:9"},"nativeSrc":"8059:15:9","nodeType":"YulExpressionStatement","src":"8059:15:9"}]},"name":"panic_error_0x41","nativeSrc":"7896:184:9","nodeType":"YulFunctionDefinition","src":"7896:184:9"},{"body":{"nativeSrc":"8197:1132:9","nodeType":"YulBlock","src":"8197:1132:9","statements":[{"body":{"nativeSrc":"8243:16:9","nodeType":"YulBlock","src":"8243:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8252:1:9","nodeType":"YulLiteral","src":"8252:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8255:1:9","nodeType":"YulLiteral","src":"8255:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8245:6:9","nodeType":"YulIdentifier","src":"8245:6:9"},"nativeSrc":"8245:12:9","nodeType":"YulFunctionCall","src":"8245:12:9"},"nativeSrc":"8245:12:9","nodeType":"YulExpressionStatement","src":"8245:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8218:7:9","nodeType":"YulIdentifier","src":"8218:7:9"},{"name":"headStart","nativeSrc":"8227:9:9","nodeType":"YulIdentifier","src":"8227:9:9"}],"functionName":{"name":"sub","nativeSrc":"8214:3:9","nodeType":"YulIdentifier","src":"8214:3:9"},"nativeSrc":"8214:23:9","nodeType":"YulFunctionCall","src":"8214:23:9"},{"kind":"number","nativeSrc":"8239:2:9","nodeType":"YulLiteral","src":"8239:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8210:3:9","nodeType":"YulIdentifier","src":"8210:3:9"},"nativeSrc":"8210:32:9","nodeType":"YulFunctionCall","src":"8210:32:9"},"nativeSrc":"8207:52:9","nodeType":"YulIf","src":"8207:52:9"},{"nativeSrc":"8268:37:9","nodeType":"YulVariableDeclaration","src":"8268:37:9","value":{"arguments":[{"name":"headStart","nativeSrc":"8295:9:9","nodeType":"YulIdentifier","src":"8295:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"8282:12:9","nodeType":"YulIdentifier","src":"8282:12:9"},"nativeSrc":"8282:23:9","nodeType":"YulFunctionCall","src":"8282:23:9"},"variables":[{"name":"offset","nativeSrc":"8272:6:9","nodeType":"YulTypedName","src":"8272:6:9","type":""}]},{"nativeSrc":"8314:28:9","nodeType":"YulVariableDeclaration","src":"8314:28:9","value":{"kind":"number","nativeSrc":"8324:18:9","nodeType":"YulLiteral","src":"8324:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8318:2:9","nodeType":"YulTypedName","src":"8318:2:9","type":""}]},{"body":{"nativeSrc":"8369:16:9","nodeType":"YulBlock","src":"8369:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8378:1:9","nodeType":"YulLiteral","src":"8378:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8381:1:9","nodeType":"YulLiteral","src":"8381:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8371:6:9","nodeType":"YulIdentifier","src":"8371:6:9"},"nativeSrc":"8371:12:9","nodeType":"YulFunctionCall","src":"8371:12:9"},"nativeSrc":"8371:12:9","nodeType":"YulExpressionStatement","src":"8371:12:9"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8357:6:9","nodeType":"YulIdentifier","src":"8357:6:9"},{"name":"_1","nativeSrc":"8365:2:9","nodeType":"YulIdentifier","src":"8365:2:9"}],"functionName":{"name":"gt","nativeSrc":"8354:2:9","nodeType":"YulIdentifier","src":"8354:2:9"},"nativeSrc":"8354:14:9","nodeType":"YulFunctionCall","src":"8354:14:9"},"nativeSrc":"8351:34:9","nodeType":"YulIf","src":"8351:34:9"},{"nativeSrc":"8394:32:9","nodeType":"YulVariableDeclaration","src":"8394:32:9","value":{"arguments":[{"name":"headStart","nativeSrc":"8408:9:9","nodeType":"YulIdentifier","src":"8408:9:9"},{"name":"offset","nativeSrc":"8419:6:9","nodeType":"YulIdentifier","src":"8419:6:9"}],"functionName":{"name":"add","nativeSrc":"8404:3:9","nodeType":"YulIdentifier","src":"8404:3:9"},"nativeSrc":"8404:22:9","nodeType":"YulFunctionCall","src":"8404:22:9"},"variables":[{"name":"_2","nativeSrc":"8398:2:9","nodeType":"YulTypedName","src":"8398:2:9","type":""}]},{"body":{"nativeSrc":"8474:16:9","nodeType":"YulBlock","src":"8474:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8483:1:9","nodeType":"YulLiteral","src":"8483:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8486:1:9","nodeType":"YulLiteral","src":"8486:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8476:6:9","nodeType":"YulIdentifier","src":"8476:6:9"},"nativeSrc":"8476:12:9","nodeType":"YulFunctionCall","src":"8476:12:9"},"nativeSrc":"8476:12:9","nodeType":"YulExpressionStatement","src":"8476:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"8453:2:9","nodeType":"YulIdentifier","src":"8453:2:9"},{"kind":"number","nativeSrc":"8457:4:9","nodeType":"YulLiteral","src":"8457:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8449:3:9","nodeType":"YulIdentifier","src":"8449:3:9"},"nativeSrc":"8449:13:9","nodeType":"YulFunctionCall","src":"8449:13:9"},{"name":"dataEnd","nativeSrc":"8464:7:9","nodeType":"YulIdentifier","src":"8464:7:9"}],"functionName":{"name":"slt","nativeSrc":"8445:3:9","nodeType":"YulIdentifier","src":"8445:3:9"},"nativeSrc":"8445:27:9","nodeType":"YulFunctionCall","src":"8445:27:9"}],"functionName":{"name":"iszero","nativeSrc":"8438:6:9","nodeType":"YulIdentifier","src":"8438:6:9"},"nativeSrc":"8438:35:9","nodeType":"YulFunctionCall","src":"8438:35:9"},"nativeSrc":"8435:55:9","nodeType":"YulIf","src":"8435:55:9"},{"nativeSrc":"8499:26:9","nodeType":"YulVariableDeclaration","src":"8499:26:9","value":{"arguments":[{"name":"_2","nativeSrc":"8522:2:9","nodeType":"YulIdentifier","src":"8522:2:9"}],"functionName":{"name":"calldataload","nativeSrc":"8509:12:9","nodeType":"YulIdentifier","src":"8509:12:9"},"nativeSrc":"8509:16:9","nodeType":"YulFunctionCall","src":"8509:16:9"},"variables":[{"name":"_3","nativeSrc":"8503:2:9","nodeType":"YulTypedName","src":"8503:2:9","type":""}]},{"nativeSrc":"8534:14:9","nodeType":"YulVariableDeclaration","src":"8534:14:9","value":{"kind":"number","nativeSrc":"8544:4:9","nodeType":"YulLiteral","src":"8544:4:9","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"8538:2:9","nodeType":"YulTypedName","src":"8538:2:9","type":""}]},{"body":{"nativeSrc":"8571:22:9","nodeType":"YulBlock","src":"8571:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8573:16:9","nodeType":"YulIdentifier","src":"8573:16:9"},"nativeSrc":"8573:18:9","nodeType":"YulFunctionCall","src":"8573:18:9"},"nativeSrc":"8573:18:9","nodeType":"YulExpressionStatement","src":"8573:18:9"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"8563:2:9","nodeType":"YulIdentifier","src":"8563:2:9"},{"name":"_1","nativeSrc":"8567:2:9","nodeType":"YulIdentifier","src":"8567:2:9"}],"functionName":{"name":"gt","nativeSrc":"8560:2:9","nodeType":"YulIdentifier","src":"8560:2:9"},"nativeSrc":"8560:10:9","nodeType":"YulFunctionCall","src":"8560:10:9"},"nativeSrc":"8557:36:9","nodeType":"YulIf","src":"8557:36:9"},{"nativeSrc":"8602:20:9","nodeType":"YulVariableDeclaration","src":"8602:20:9","value":{"arguments":[{"kind":"number","nativeSrc":"8616:1:9","nodeType":"YulLiteral","src":"8616:1:9","type":"","value":"5"},{"name":"_3","nativeSrc":"8619:2:9","nodeType":"YulIdentifier","src":"8619:2:9"}],"functionName":{"name":"shl","nativeSrc":"8612:3:9","nodeType":"YulIdentifier","src":"8612:3:9"},"nativeSrc":"8612:10:9","nodeType":"YulFunctionCall","src":"8612:10:9"},"variables":[{"name":"_5","nativeSrc":"8606:2:9","nodeType":"YulTypedName","src":"8606:2:9","type":""}]},{"nativeSrc":"8631:23:9","nodeType":"YulVariableDeclaration","src":"8631:23:9","value":{"arguments":[{"kind":"number","nativeSrc":"8651:2:9","nodeType":"YulLiteral","src":"8651:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"8645:5:9","nodeType":"YulIdentifier","src":"8645:5:9"},"nativeSrc":"8645:9:9","nodeType":"YulFunctionCall","src":"8645:9:9"},"variables":[{"name":"memPtr","nativeSrc":"8635:6:9","nodeType":"YulTypedName","src":"8635:6:9","type":""}]},{"nativeSrc":"8663:115:9","nodeType":"YulVariableDeclaration","src":"8663:115:9","value":{"arguments":[{"name":"memPtr","nativeSrc":"8685:6:9","nodeType":"YulIdentifier","src":"8685:6:9"},{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"8701:2:9","nodeType":"YulIdentifier","src":"8701:2:9"},{"kind":"number","nativeSrc":"8705:2:9","nodeType":"YulLiteral","src":"8705:2:9","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"8697:3:9","nodeType":"YulIdentifier","src":"8697:3:9"},"nativeSrc":"8697:11:9","nodeType":"YulFunctionCall","src":"8697:11:9"},{"kind":"number","nativeSrc":"8710:66:9","nodeType":"YulLiteral","src":"8710:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"8693:3:9","nodeType":"YulIdentifier","src":"8693:3:9"},"nativeSrc":"8693:84:9","nodeType":"YulFunctionCall","src":"8693:84:9"}],"functionName":{"name":"add","nativeSrc":"8681:3:9","nodeType":"YulIdentifier","src":"8681:3:9"},"nativeSrc":"8681:97:9","nodeType":"YulFunctionCall","src":"8681:97:9"},"variables":[{"name":"newFreePtr","nativeSrc":"8667:10:9","nodeType":"YulTypedName","src":"8667:10:9","type":""}]},{"body":{"nativeSrc":"8837:22:9","nodeType":"YulBlock","src":"8837:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8839:16:9","nodeType":"YulIdentifier","src":"8839:16:9"},"nativeSrc":"8839:18:9","nodeType":"YulFunctionCall","src":"8839:18:9"},"nativeSrc":"8839:18:9","nodeType":"YulExpressionStatement","src":"8839:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"8796:10:9","nodeType":"YulIdentifier","src":"8796:10:9"},{"name":"_1","nativeSrc":"8808:2:9","nodeType":"YulIdentifier","src":"8808:2:9"}],"functionName":{"name":"gt","nativeSrc":"8793:2:9","nodeType":"YulIdentifier","src":"8793:2:9"},"nativeSrc":"8793:18:9","nodeType":"YulFunctionCall","src":"8793:18:9"},{"arguments":[{"name":"newFreePtr","nativeSrc":"8816:10:9","nodeType":"YulIdentifier","src":"8816:10:9"},{"name":"memPtr","nativeSrc":"8828:6:9","nodeType":"YulIdentifier","src":"8828:6:9"}],"functionName":{"name":"lt","nativeSrc":"8813:2:9","nodeType":"YulIdentifier","src":"8813:2:9"},"nativeSrc":"8813:22:9","nodeType":"YulFunctionCall","src":"8813:22:9"}],"functionName":{"name":"or","nativeSrc":"8790:2:9","nodeType":"YulIdentifier","src":"8790:2:9"},"nativeSrc":"8790:46:9","nodeType":"YulFunctionCall","src":"8790:46:9"},"nativeSrc":"8787:72:9","nodeType":"YulIf","src":"8787:72:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8875:2:9","nodeType":"YulLiteral","src":"8875:2:9","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"8879:10:9","nodeType":"YulIdentifier","src":"8879:10:9"}],"functionName":{"name":"mstore","nativeSrc":"8868:6:9","nodeType":"YulIdentifier","src":"8868:6:9"},"nativeSrc":"8868:22:9","nodeType":"YulFunctionCall","src":"8868:22:9"},"nativeSrc":"8868:22:9","nodeType":"YulExpressionStatement","src":"8868:22:9"},{"nativeSrc":"8899:17:9","nodeType":"YulVariableDeclaration","src":"8899:17:9","value":{"name":"memPtr","nativeSrc":"8910:6:9","nodeType":"YulIdentifier","src":"8910:6:9"},"variables":[{"name":"dst","nativeSrc":"8903:3:9","nodeType":"YulTypedName","src":"8903:3:9","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"8932:6:9","nodeType":"YulIdentifier","src":"8932:6:9"},{"name":"_3","nativeSrc":"8940:2:9","nodeType":"YulIdentifier","src":"8940:2:9"}],"functionName":{"name":"mstore","nativeSrc":"8925:6:9","nodeType":"YulIdentifier","src":"8925:6:9"},"nativeSrc":"8925:18:9","nodeType":"YulFunctionCall","src":"8925:18:9"},"nativeSrc":"8925:18:9","nodeType":"YulExpressionStatement","src":"8925:18:9"},{"nativeSrc":"8952:22:9","nodeType":"YulAssignment","src":"8952:22:9","value":{"arguments":[{"name":"memPtr","nativeSrc":"8963:6:9","nodeType":"YulIdentifier","src":"8963:6:9"},{"name":"_4","nativeSrc":"8971:2:9","nodeType":"YulIdentifier","src":"8971:2:9"}],"functionName":{"name":"add","nativeSrc":"8959:3:9","nodeType":"YulIdentifier","src":"8959:3:9"},"nativeSrc":"8959:15:9","nodeType":"YulFunctionCall","src":"8959:15:9"},"variableNames":[{"name":"dst","nativeSrc":"8952:3:9","nodeType":"YulIdentifier","src":"8952:3:9"}]},{"nativeSrc":"8983:34:9","nodeType":"YulVariableDeclaration","src":"8983:34:9","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9005:2:9","nodeType":"YulIdentifier","src":"9005:2:9"},{"name":"_5","nativeSrc":"9009:2:9","nodeType":"YulIdentifier","src":"9009:2:9"}],"functionName":{"name":"add","nativeSrc":"9001:3:9","nodeType":"YulIdentifier","src":"9001:3:9"},"nativeSrc":"9001:11:9","nodeType":"YulFunctionCall","src":"9001:11:9"},{"name":"_4","nativeSrc":"9014:2:9","nodeType":"YulIdentifier","src":"9014:2:9"}],"functionName":{"name":"add","nativeSrc":"8997:3:9","nodeType":"YulIdentifier","src":"8997:3:9"},"nativeSrc":"8997:20:9","nodeType":"YulFunctionCall","src":"8997:20:9"},"variables":[{"name":"srcEnd","nativeSrc":"8987:6:9","nodeType":"YulTypedName","src":"8987:6:9","type":""}]},{"body":{"nativeSrc":"9049:16:9","nodeType":"YulBlock","src":"9049:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9058:1:9","nodeType":"YulLiteral","src":"9058:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"9061:1:9","nodeType":"YulLiteral","src":"9061:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9051:6:9","nodeType":"YulIdentifier","src":"9051:6:9"},"nativeSrc":"9051:12:9","nodeType":"YulFunctionCall","src":"9051:12:9"},"nativeSrc":"9051:12:9","nodeType":"YulExpressionStatement","src":"9051:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9032:6:9","nodeType":"YulIdentifier","src":"9032:6:9"},{"name":"dataEnd","nativeSrc":"9040:7:9","nodeType":"YulIdentifier","src":"9040:7:9"}],"functionName":{"name":"gt","nativeSrc":"9029:2:9","nodeType":"YulIdentifier","src":"9029:2:9"},"nativeSrc":"9029:19:9","nodeType":"YulFunctionCall","src":"9029:19:9"},"nativeSrc":"9026:39:9","nodeType":"YulIf","src":"9026:39:9"},{"nativeSrc":"9074:22:9","nodeType":"YulVariableDeclaration","src":"9074:22:9","value":{"arguments":[{"name":"_2","nativeSrc":"9089:2:9","nodeType":"YulIdentifier","src":"9089:2:9"},{"name":"_4","nativeSrc":"9093:2:9","nodeType":"YulIdentifier","src":"9093:2:9"}],"functionName":{"name":"add","nativeSrc":"9085:3:9","nodeType":"YulIdentifier","src":"9085:3:9"},"nativeSrc":"9085:11:9","nodeType":"YulFunctionCall","src":"9085:11:9"},"variables":[{"name":"src","nativeSrc":"9078:3:9","nodeType":"YulTypedName","src":"9078:3:9","type":""}]},{"body":{"nativeSrc":"9161:86:9","nodeType":"YulBlock","src":"9161:86:9","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9182:3:9","nodeType":"YulIdentifier","src":"9182:3:9"},{"arguments":[{"name":"src","nativeSrc":"9200:3:9","nodeType":"YulIdentifier","src":"9200:3:9"}],"functionName":{"name":"calldataload","nativeSrc":"9187:12:9","nodeType":"YulIdentifier","src":"9187:12:9"},"nativeSrc":"9187:17:9","nodeType":"YulFunctionCall","src":"9187:17:9"}],"functionName":{"name":"mstore","nativeSrc":"9175:6:9","nodeType":"YulIdentifier","src":"9175:6:9"},"nativeSrc":"9175:30:9","nodeType":"YulFunctionCall","src":"9175:30:9"},"nativeSrc":"9175:30:9","nodeType":"YulExpressionStatement","src":"9175:30:9"},{"nativeSrc":"9218:19:9","nodeType":"YulAssignment","src":"9218:19:9","value":{"arguments":[{"name":"dst","nativeSrc":"9229:3:9","nodeType":"YulIdentifier","src":"9229:3:9"},{"name":"_4","nativeSrc":"9234:2:9","nodeType":"YulIdentifier","src":"9234:2:9"}],"functionName":{"name":"add","nativeSrc":"9225:3:9","nodeType":"YulIdentifier","src":"9225:3:9"},"nativeSrc":"9225:12:9","nodeType":"YulFunctionCall","src":"9225:12:9"},"variableNames":[{"name":"dst","nativeSrc":"9218:3:9","nodeType":"YulIdentifier","src":"9218:3:9"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9116:3:9","nodeType":"YulIdentifier","src":"9116:3:9"},{"name":"srcEnd","nativeSrc":"9121:6:9","nodeType":"YulIdentifier","src":"9121:6:9"}],"functionName":{"name":"lt","nativeSrc":"9113:2:9","nodeType":"YulIdentifier","src":"9113:2:9"},"nativeSrc":"9113:15:9","nodeType":"YulFunctionCall","src":"9113:15:9"},"nativeSrc":"9105:142:9","nodeType":"YulForLoop","post":{"nativeSrc":"9129:23:9","nodeType":"YulBlock","src":"9129:23:9","statements":[{"nativeSrc":"9131:19:9","nodeType":"YulAssignment","src":"9131:19:9","value":{"arguments":[{"name":"src","nativeSrc":"9142:3:9","nodeType":"YulIdentifier","src":"9142:3:9"},{"name":"_4","nativeSrc":"9147:2:9","nodeType":"YulIdentifier","src":"9147:2:9"}],"functionName":{"name":"add","nativeSrc":"9138:3:9","nodeType":"YulIdentifier","src":"9138:3:9"},"nativeSrc":"9138:12:9","nodeType":"YulFunctionCall","src":"9138:12:9"},"variableNames":[{"name":"src","nativeSrc":"9131:3:9","nodeType":"YulIdentifier","src":"9131:3:9"}]}]},"pre":{"nativeSrc":"9109:3:9","nodeType":"YulBlock","src":"9109:3:9","statements":[]},"src":"9105:142:9"},{"nativeSrc":"9256:16:9","nodeType":"YulAssignment","src":"9256:16:9","value":{"name":"memPtr","nativeSrc":"9266:6:9","nodeType":"YulIdentifier","src":"9266:6:9"},"variableNames":[{"name":"value0","nativeSrc":"9256:6:9","nodeType":"YulIdentifier","src":"9256:6:9"}]},{"nativeSrc":"9281:42:9","nodeType":"YulAssignment","src":"9281:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9308:9:9","nodeType":"YulIdentifier","src":"9308:9:9"},{"name":"_4","nativeSrc":"9319:2:9","nodeType":"YulIdentifier","src":"9319:2:9"}],"functionName":{"name":"add","nativeSrc":"9304:3:9","nodeType":"YulIdentifier","src":"9304:3:9"},"nativeSrc":"9304:18:9","nodeType":"YulFunctionCall","src":"9304:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"9291:12:9","nodeType":"YulIdentifier","src":"9291:12:9"},"nativeSrc":"9291:32:9","nodeType":"YulFunctionCall","src":"9291:32:9"},"variableNames":[{"name":"value1","nativeSrc":"9281:6:9","nodeType":"YulIdentifier","src":"9281:6:9"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256","nativeSrc":"8085:1244:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8155:9:9","nodeType":"YulTypedName","src":"8155:9:9","type":""},{"name":"dataEnd","nativeSrc":"8166:7:9","nodeType":"YulTypedName","src":"8166:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8178:6:9","nodeType":"YulTypedName","src":"8178:6:9","type":""},{"name":"value1","nativeSrc":"8186:6:9","nodeType":"YulTypedName","src":"8186:6:9","type":""}],"src":"8085:1244:9"},{"body":{"nativeSrc":"9481:182:9","nodeType":"YulBlock","src":"9481:182:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9498:3:9","nodeType":"YulIdentifier","src":"9498:3:9"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9511:2:9","nodeType":"YulLiteral","src":"9511:2:9","type":"","value":"96"},{"name":"value0","nativeSrc":"9515:6:9","nodeType":"YulIdentifier","src":"9515:6:9"}],"functionName":{"name":"shl","nativeSrc":"9507:3:9","nodeType":"YulIdentifier","src":"9507:3:9"},"nativeSrc":"9507:15:9","nodeType":"YulFunctionCall","src":"9507:15:9"},{"kind":"number","nativeSrc":"9524:66:9","nodeType":"YulLiteral","src":"9524:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"9503:3:9","nodeType":"YulIdentifier","src":"9503:3:9"},"nativeSrc":"9503:88:9","nodeType":"YulFunctionCall","src":"9503:88:9"}],"functionName":{"name":"mstore","nativeSrc":"9491:6:9","nodeType":"YulIdentifier","src":"9491:6:9"},"nativeSrc":"9491:101:9","nodeType":"YulFunctionCall","src":"9491:101:9"},"nativeSrc":"9491:101:9","nodeType":"YulExpressionStatement","src":"9491:101:9"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9612:3:9","nodeType":"YulIdentifier","src":"9612:3:9"},{"kind":"number","nativeSrc":"9617:2:9","nodeType":"YulLiteral","src":"9617:2:9","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"9608:3:9","nodeType":"YulIdentifier","src":"9608:3:9"},"nativeSrc":"9608:12:9","nodeType":"YulFunctionCall","src":"9608:12:9"},{"name":"value1","nativeSrc":"9622:6:9","nodeType":"YulIdentifier","src":"9622:6:9"}],"functionName":{"name":"mstore","nativeSrc":"9601:6:9","nodeType":"YulIdentifier","src":"9601:6:9"},"nativeSrc":"9601:28:9","nodeType":"YulFunctionCall","src":"9601:28:9"},"nativeSrc":"9601:28:9","nodeType":"YulExpressionStatement","src":"9601:28:9"},{"nativeSrc":"9638:19:9","nodeType":"YulAssignment","src":"9638:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"9649:3:9","nodeType":"YulIdentifier","src":"9649:3:9"},{"kind":"number","nativeSrc":"9654:2:9","nodeType":"YulLiteral","src":"9654:2:9","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"9645:3:9","nodeType":"YulIdentifier","src":"9645:3:9"},"nativeSrc":"9645:12:9","nodeType":"YulFunctionCall","src":"9645:12:9"},"variableNames":[{"name":"end","nativeSrc":"9638:3:9","nodeType":"YulIdentifier","src":"9638:3:9"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"9334:329:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9449:3:9","nodeType":"YulTypedName","src":"9449:3:9","type":""},{"name":"value1","nativeSrc":"9454:6:9","nodeType":"YulTypedName","src":"9454:6:9","type":""},{"name":"value0","nativeSrc":"9462:6:9","nodeType":"YulTypedName","src":"9462:6:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9473:3:9","nodeType":"YulTypedName","src":"9473:3:9","type":""}],"src":"9334:329:9"},{"body":{"nativeSrc":"9797:119:9","nodeType":"YulBlock","src":"9797:119:9","statements":[{"nativeSrc":"9807:26:9","nodeType":"YulAssignment","src":"9807:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"9819:9:9","nodeType":"YulIdentifier","src":"9819:9:9"},{"kind":"number","nativeSrc":"9830:2:9","nodeType":"YulLiteral","src":"9830:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9815:3:9","nodeType":"YulIdentifier","src":"9815:3:9"},"nativeSrc":"9815:18:9","nodeType":"YulFunctionCall","src":"9815:18:9"},"variableNames":[{"name":"tail","nativeSrc":"9807:4:9","nodeType":"YulIdentifier","src":"9807:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9849:9:9","nodeType":"YulIdentifier","src":"9849:9:9"},{"name":"value0","nativeSrc":"9860:6:9","nodeType":"YulIdentifier","src":"9860:6:9"}],"functionName":{"name":"mstore","nativeSrc":"9842:6:9","nodeType":"YulIdentifier","src":"9842:6:9"},"nativeSrc":"9842:25:9","nodeType":"YulFunctionCall","src":"9842:25:9"},"nativeSrc":"9842:25:9","nodeType":"YulExpressionStatement","src":"9842:25:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9887:9:9","nodeType":"YulIdentifier","src":"9887:9:9"},{"kind":"number","nativeSrc":"9898:2:9","nodeType":"YulLiteral","src":"9898:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9883:3:9","nodeType":"YulIdentifier","src":"9883:3:9"},"nativeSrc":"9883:18:9","nodeType":"YulFunctionCall","src":"9883:18:9"},{"name":"value1","nativeSrc":"9903:6:9","nodeType":"YulIdentifier","src":"9903:6:9"}],"functionName":{"name":"mstore","nativeSrc":"9876:6:9","nodeType":"YulIdentifier","src":"9876:6:9"},"nativeSrc":"9876:34:9","nodeType":"YulFunctionCall","src":"9876:34:9"},"nativeSrc":"9876:34:9","nodeType":"YulExpressionStatement","src":"9876:34:9"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9668:248:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9758:9:9","nodeType":"YulTypedName","src":"9758:9:9","type":""},{"name":"value1","nativeSrc":"9769:6:9","nodeType":"YulTypedName","src":"9769:6:9","type":""},{"name":"value0","nativeSrc":"9777:6:9","nodeType":"YulTypedName","src":"9777:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9788:4:9","nodeType":"YulTypedName","src":"9788:4:9","type":""}],"src":"9668:248:9"},{"body":{"nativeSrc":"10254:402:9","nodeType":"YulBlock","src":"10254:402:9","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10271:9:9","nodeType":"YulIdentifier","src":"10271:9:9"},{"kind":"number","nativeSrc":"10282:3:9","nodeType":"YulLiteral","src":"10282:3:9","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"10264:6:9","nodeType":"YulIdentifier","src":"10264:6:9"},"nativeSrc":"10264:22:9","nodeType":"YulFunctionCall","src":"10264:22:9"},"nativeSrc":"10264:22:9","nodeType":"YulExpressionStatement","src":"10264:22:9"},{"nativeSrc":"10295:88:9","nodeType":"YulVariableDeclaration","src":"10295:88:9","value":{"arguments":[{"name":"value0","nativeSrc":"10347:6:9","nodeType":"YulIdentifier","src":"10347:6:9"},{"name":"value1","nativeSrc":"10355:6:9","nodeType":"YulIdentifier","src":"10355:6:9"},{"arguments":[{"name":"headStart","nativeSrc":"10367:9:9","nodeType":"YulIdentifier","src":"10367:9:9"},{"kind":"number","nativeSrc":"10378:3:9","nodeType":"YulLiteral","src":"10378:3:9","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"10363:3:9","nodeType":"YulIdentifier","src":"10363:3:9"},"nativeSrc":"10363:19:9","nodeType":"YulFunctionCall","src":"10363:19:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10309:37:9","nodeType":"YulIdentifier","src":"10309:37:9"},"nativeSrc":"10309:74:9","nodeType":"YulFunctionCall","src":"10309:74:9"},"variables":[{"name":"tail_1","nativeSrc":"10299:6:9","nodeType":"YulTypedName","src":"10299:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10403:9:9","nodeType":"YulIdentifier","src":"10403:9:9"},{"kind":"number","nativeSrc":"10414:2:9","nodeType":"YulLiteral","src":"10414:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10399:3:9","nodeType":"YulIdentifier","src":"10399:3:9"},"nativeSrc":"10399:18:9","nodeType":"YulFunctionCall","src":"10399:18:9"},{"arguments":[{"name":"tail_1","nativeSrc":"10423:6:9","nodeType":"YulIdentifier","src":"10423:6:9"},{"name":"headStart","nativeSrc":"10431:9:9","nodeType":"YulIdentifier","src":"10431:9:9"}],"functionName":{"name":"sub","nativeSrc":"10419:3:9","nodeType":"YulIdentifier","src":"10419:3:9"},"nativeSrc":"10419:22:9","nodeType":"YulFunctionCall","src":"10419:22:9"}],"functionName":{"name":"mstore","nativeSrc":"10392:6:9","nodeType":"YulIdentifier","src":"10392:6:9"},"nativeSrc":"10392:50:9","nodeType":"YulFunctionCall","src":"10392:50:9"},"nativeSrc":"10392:50:9","nodeType":"YulExpressionStatement","src":"10392:50:9"},{"nativeSrc":"10451:69:9","nodeType":"YulAssignment","src":"10451:69:9","value":{"arguments":[{"name":"value2","nativeSrc":"10497:6:9","nodeType":"YulIdentifier","src":"10497:6:9"},{"name":"value3","nativeSrc":"10505:6:9","nodeType":"YulIdentifier","src":"10505:6:9"},{"name":"tail_1","nativeSrc":"10513:6:9","nodeType":"YulIdentifier","src":"10513:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10459:37:9","nodeType":"YulIdentifier","src":"10459:37:9"},"nativeSrc":"10459:61:9","nodeType":"YulFunctionCall","src":"10459:61:9"},"variableNames":[{"name":"tail","nativeSrc":"10451:4:9","nodeType":"YulIdentifier","src":"10451:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10540:9:9","nodeType":"YulIdentifier","src":"10540:9:9"},{"kind":"number","nativeSrc":"10551:2:9","nodeType":"YulLiteral","src":"10551:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10536:3:9","nodeType":"YulIdentifier","src":"10536:3:9"},"nativeSrc":"10536:18:9","nodeType":"YulFunctionCall","src":"10536:18:9"},{"name":"value4","nativeSrc":"10556:6:9","nodeType":"YulIdentifier","src":"10556:6:9"}],"functionName":{"name":"mstore","nativeSrc":"10529:6:9","nodeType":"YulIdentifier","src":"10529:6:9"},"nativeSrc":"10529:34:9","nodeType":"YulFunctionCall","src":"10529:34:9"},"nativeSrc":"10529:34:9","nodeType":"YulExpressionStatement","src":"10529:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10583:9:9","nodeType":"YulIdentifier","src":"10583:9:9"},{"kind":"number","nativeSrc":"10594:2:9","nodeType":"YulLiteral","src":"10594:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10579:3:9","nodeType":"YulIdentifier","src":"10579:3:9"},"nativeSrc":"10579:18:9","nodeType":"YulFunctionCall","src":"10579:18:9"},{"name":"value5","nativeSrc":"10599:6:9","nodeType":"YulIdentifier","src":"10599:6:9"}],"functionName":{"name":"mstore","nativeSrc":"10572:6:9","nodeType":"YulIdentifier","src":"10572:6:9"},"nativeSrc":"10572:34:9","nodeType":"YulFunctionCall","src":"10572:34:9"},"nativeSrc":"10572:34:9","nodeType":"YulExpressionStatement","src":"10572:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10626:9:9","nodeType":"YulIdentifier","src":"10626:9:9"},{"kind":"number","nativeSrc":"10637:3:9","nodeType":"YulLiteral","src":"10637:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10622:3:9","nodeType":"YulIdentifier","src":"10622:3:9"},"nativeSrc":"10622:19:9","nodeType":"YulFunctionCall","src":"10622:19:9"},{"name":"value6","nativeSrc":"10643:6:9","nodeType":"YulIdentifier","src":"10643:6:9"}],"functionName":{"name":"mstore","nativeSrc":"10615:6:9","nodeType":"YulIdentifier","src":"10615:6:9"},"nativeSrc":"10615:35:9","nodeType":"YulFunctionCall","src":"10615:35:9"},"nativeSrc":"10615:35:9","nodeType":"YulExpressionStatement","src":"10615:35:9"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9921:735:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10175:9:9","nodeType":"YulTypedName","src":"10175:9:9","type":""},{"name":"value6","nativeSrc":"10186:6:9","nodeType":"YulTypedName","src":"10186:6:9","type":""},{"name":"value5","nativeSrc":"10194:6:9","nodeType":"YulTypedName","src":"10194:6:9","type":""},{"name":"value4","nativeSrc":"10202:6:9","nodeType":"YulTypedName","src":"10202:6:9","type":""},{"name":"value3","nativeSrc":"10210:6:9","nodeType":"YulTypedName","src":"10210:6:9","type":""},{"name":"value2","nativeSrc":"10218:6:9","nodeType":"YulTypedName","src":"10218:6:9","type":""},{"name":"value1","nativeSrc":"10226:6:9","nodeType":"YulTypedName","src":"10226:6:9","type":""},{"name":"value0","nativeSrc":"10234:6:9","nodeType":"YulTypedName","src":"10234:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10245:4:9","nodeType":"YulTypedName","src":"10245:4:9","type":""}],"src":"9921:735:9"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$208__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n        mstore(add(headStart, 64), value4)\n        mstore(add(headStart, 96), value5)\n        mstore(add(headStart, 128), value6)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"774":[{"length":32,"start":436},{"length":32,"start":1886}],"776":[{"length":32,"start":722},{"length":32,"start":2003}],"778":[{"length":32,"start":890},{"length":32,"start":2086}],"780":[{"length":32,"start":528},{"length":32,"start":2169}],"782":[{"length":32,"start":1173},{"length":32,"start":2252}],"784":[{"length":32,"start":683},{"length":32,"start":2335}],"786":[{"length":32,"start":1037},{"length":32,"start":2418}],"794":[{"length":32,"start":607},{"length":32,"start":1351},{"length":32,"start":2469}],"798":[{"length":32,"start":1076},{"length":32,"start":3473}],"801":[{"length":32,"start":761},{"length":32,"start":1273}],"804":[{"length":32,"start":1115},{"length":32,"start":1237}],"807":[{"length":32,"start":489},{"length":32,"start":1459},{"length":32,"start":3717}],"810":[{"length":32,"start":843},{"length":32,"start":2815},{"length":32,"start":4228}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101825760003560e01c806351e75e8b116100d8578063bc197c811161008c578063cd421fbf11610066578063cd421fbf14610456578063f23a6e611461047d578063f95d10161461049057600080fd5b8063bc197c81146103c4578063c131754e14610408578063cd18a34f1461042f57600080fd5b8063aa918fd5116100bd578063aa918fd514610375578063ab504e731461039c578063bab2f552146103bc57600080fd5b806351e75e8b1461034657806355f5b0a81461036d57600080fd5b80631de0e40b1161013a578063424ab4f711610114578063424ab4f7146102cd578063491bde66146102f45780634dac1c2b1461031b57600080fd5b80631de0e40b1461025257806328a979cf1461025a5780633838a201146102a657600080fd5b8063043063bc1161016b578063043063bc146101e45780630455645a1461020b57806312828b7f1461023257600080fd5b806301ffc9a7146101875780630277640e146101af575b600080fd5b61019a61019536600461132c565b6104b7565b60405190151581526020015b60405180910390f35b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101a6565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d6610240366004611397565b60026020526000908152604090205481565b6101d6600181565b6102817f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a6565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d66103293660046113b2565b600160209081526000928352604080842090915290825290205481565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d6600281565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6101d66103aa3660046113de565b60006020819052908152604090205481565b6101d66104d1565b6103d76103d2366004611485565b61052d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101a6565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6102817f000000000000000000000000000000000000000000000000000000000000000081565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b6103d761048b366004611540565b610d77565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b60006104cb826104c5611199565b906111c7565b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000061051e7f0000000000000000000000000000000000000000000000000000000000000000426115e7565b61052891906115fa565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105a5576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006105af6104d1565b90507f000000000000000000000000000000000000000000000000000000000000000081111561060e576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161059c565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906106529030908c908c908c908c90600401611680565b600060405180830381600087803b15801561066c57600080fd5b505af1158015610680573d6000803e3d6000fd5b505050506000805b88811015610a37578787828181106106a2576106a26116cf565b9050602002013560000361073c57338a8a838181106106c3576106c36116cf565b905060200201358989848181106106dc576106dc6116cf565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909516600486015260248501939093525060209091020135604482015260640161059c565b89898281811061074e5761074e6116cf565b905060200201356001036107b1577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b905060200201356107a091906116fe565b6107aa9083611715565b9150610a2f565b8989828181106107c3576107c36116cf565b90506020020135600203610804577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b898982818110610816576108166116cf565b90506020020135600303610857577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b898982818110610869576108696116cf565b905060200201356004036108aa577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b8989828181106108bc576108bc6116cf565b905060200201356005036108fd577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b89898281811061090f5761090f6116cf565b90506020020135600603610950577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b898982818110610962576109626116cf565b905060200201356007036109a3577f000000000000000000000000000000000000000000000000000000000000000088888381811061078f5761078f6116cf565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106109d6576109d66116cf565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440161059c565b600101610688565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610c0957600080610a75888a018a611757565b91509150608083901c600003610be9576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610b24837f0000000000000000000000000000000000000000000000000000000000000000836112a1565b610b79576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260440161059c565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610bf682876116fe565b610c0091906115fa565b94505050610c30565b608081901c8015610c2e57612710610c2182866116fe565b610c2b91906115fa565b93505b505b6fffffffffffffffffffffffffffffffff81168015610c5657610c5381856116fe565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610c91908690611715565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610ce1908490611715565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610d3b9796959493929190611839565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610dea576040517f7330680300000000000000000000000000000000000000000000000000000000815233600482015260240161059c565b60018514610e2d576040517f1912ea510000000000000000000000000000000000000000000000000000000081523360048201526024810186905260440161059c565b83600114610e77576040517fe1f366e9000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044810185905260640161059c565b6000610e816104d1565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610ee0576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161059c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610f68576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260240161059c565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610fc757600080fd5b505af1158015610fdb573d6000803e3d6000fd5b505050600282179050841561110857608082901c6000036111085760008061100587890189611757565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506110a9837f0000000000000000000000000000000000000000000000000000000000000000836112a1565b6110fe576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201526024810183905260440161059c565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b6000806104cb60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6115e7565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611217575060006104cb565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611268575060016104cb565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000826112ae85846112b7565b14949350505050565b600081815b84518110156112f2576112e8828683815181106112db576112db6116cf565b60200260200101516112fa565b91506001016112bc565b509392505050565b6000818310611316576000828152602084905260409020611325565b60008381526020839052604090205b9392505050565b60006020828403121561133e57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461132557600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461139257600080fd5b919050565b6000602082840312156113a957600080fd5b6113258261136e565b600080604083850312156113c557600080fd5b823591506113d56020840161136e565b90509250929050565b6000602082840312156113f057600080fd5b5035919050565b60008083601f84011261140957600080fd5b50813567ffffffffffffffff81111561142157600080fd5b6020830191508360208260051b850101111561143c57600080fd5b9250929050565b60008083601f84011261145557600080fd5b50813567ffffffffffffffff81111561146d57600080fd5b60208301915083602082850101111561143c57600080fd5b60008060008060008060008060a0898b0312156114a157600080fd5b6114aa8961136e565b97506114b860208a0161136e565b9650604089013567ffffffffffffffff808211156114d557600080fd5b6114e18c838d016113f7565b909850965060608b01359150808211156114fa57600080fd5b6115068c838d016113f7565b909650945060808b013591508082111561151f57600080fd5b5061152c8b828c01611443565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561155957600080fd5b6115628761136e565b95506115706020880161136e565b94506040870135935060608701359250608087013567ffffffffffffffff81111561159a57600080fd5b6115a689828a01611443565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156104cb576104cb6115b8565b600082611630577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561166757600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006116b0606083018688611635565b82810360408401526116c3818587611635565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820281158282048414176104cb576104cb6115b8565b808201808211156104cb576104cb6115b8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561176a57600080fd5b823567ffffffffffffffff8082111561178257600080fd5b818501915085601f83011261179657600080fd5b81356020828211156117aa576117aa611728565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811086821117156117ed576117ed611728565b60405292835281830193508481018201928984111561180b57600080fd5b948201945b8386101561182957853585529482019493820193611810565b9997909101359750505050505050565b60a08152600061184d60a08301898b611635565b828103602084015261186081888a611635565b60408401969096525050606081019290925260809091015294935050505056fea26469706673582212201ad7517f220469814abd0dab20c4025cfb17ce7ed5fc9ae0cd9c3526888154df64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x47D JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x490 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x28A979CF EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x43063BC GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x132C JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x1397 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x281 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH2 0x4D1 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1485 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x281 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x48B CALLDATASIZE PUSH1 0x4 PUSH2 0x1540 JUMP JUMPDEST PUSH2 0xD77 JUMP JUMPDEST PUSH2 0x1D6 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CB DUP3 PUSH2 0x4C5 PUSH2 0x1199 JUMP JUMPDEST SWAP1 PUSH2 0x11C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x51E PUSH32 0x0 TIMESTAMP PUSH2 0x15E7 JUMP JUMPDEST PUSH2 0x528 SWAP2 SWAP1 PUSH2 0x15FA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x5A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5AF PUSH2 0x4D1 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x60E JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x652 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x680 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0xA37 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x6A2 JUMPI PUSH2 0x6A2 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x73C JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x6C3 JUMPI PUSH2 0x6C3 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x6DC JUMPI PUSH2 0x6DC PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x59C JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x74E JUMPI PUSH2 0x74E PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x7B1 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x7A0 SWAP2 SWAP1 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x7AA SWAP1 DUP4 PUSH2 0x1715 JUMP JUMPDEST SWAP2 POP PUSH2 0xA2F JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7C3 JUMPI PUSH2 0x7C3 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x804 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x816 JUMPI PUSH2 0x816 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x857 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x869 JUMPI PUSH2 0x869 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x8AA JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x8BC JUMPI PUSH2 0x8BC PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x8FD JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x90F JUMPI PUSH2 0x90F PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x950 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x962 JUMPI PUSH2 0x962 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x9A3 JUMPI PUSH32 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x16CF JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x9D6 JUMPI PUSH2 0x9D6 PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x688 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xC09 JUMPI PUSH1 0x0 DUP1 PUSH2 0xA75 DUP9 DUP11 ADD DUP11 PUSH2 0x1757 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xBE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xB24 DUP4 PUSH32 0x0 DUP4 PUSH2 0x12A1 JUMP JUMPDEST PUSH2 0xB79 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xBF6 DUP3 DUP8 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0xC00 SWAP2 SWAP1 PUSH2 0x15FA JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xC30 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xC2E JUMPI PUSH2 0x2710 PUSH2 0xC21 DUP3 DUP7 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0xC2B SWAP2 SWAP1 PUSH2 0x15FA JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xC56 JUMPI PUSH2 0xC53 DUP2 DUP6 PUSH2 0x16FE JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xC91 SWAP1 DUP7 SWAP1 PUSH2 0x1715 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xCE1 SWAP1 DUP5 SWAP1 PUSH2 0x1715 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xD3B SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xDEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xE2D JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xE77 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 PUSH2 0x4D1 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xEE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xF68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0x1108 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0x1108 JUMPI PUSH1 0x0 DUP1 PUSH2 0x1005 DUP8 DUP10 ADD DUP10 PUSH2 0x1757 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x10A9 DUP4 PUSH32 0x0 DUP4 PUSH2 0x12A1 JUMP JUMPDEST PUSH2 0x10FE JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x59C JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4CB PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1217 JUMPI POP PUSH1 0x0 PUSH2 0x4CB JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1268 JUMPI POP PUSH1 0x1 PUSH2 0x4CB JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12AE DUP6 DUP5 PUSH2 0x12B7 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x12F2 JUMPI PUSH2 0x12E8 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x12DB JUMPI PUSH2 0x12DB PUSH2 0x16CF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12FA JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x12BC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1316 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1325 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1325 DUP3 PUSH2 0x136E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x13D5 PUSH1 0x20 DUP5 ADD PUSH2 0x136E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x146D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x14A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14AA DUP10 PUSH2 0x136E JUMP JUMPDEST SWAP8 POP PUSH2 0x14B8 PUSH1 0x20 DUP11 ADD PUSH2 0x136E JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E1 DUP13 DUP4 DUP14 ADD PUSH2 0x13F7 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1506 DUP13 DUP4 DUP14 ADD PUSH2 0x13F7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x151F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x152C DUP12 DUP3 DUP13 ADD PUSH2 0x1443 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1562 DUP8 PUSH2 0x136E JUMP JUMPDEST SWAP6 POP PUSH2 0x1570 PUSH1 0x20 DUP9 ADD PUSH2 0x136E JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x159A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A6 DUP10 DUP3 DUP11 ADD PUSH2 0x1443 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4CB JUMPI PUSH2 0x4CB PUSH2 0x15B8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1630 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x16B0 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1635 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x16C3 DUP2 DUP6 DUP8 PUSH2 0x1635 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4CB JUMPI PUSH2 0x4CB PUSH2 0x15B8 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4CB JUMPI PUSH2 0x4CB PUSH2 0x15B8 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x17AA JUMPI PUSH2 0x17AA PUSH2 0x1728 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x17ED JUMPI PUSH2 0x17ED PUSH2 0x1728 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x180B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1829 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x1810 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x184D PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1635 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1860 DUP2 DUP9 DUP11 PUSH2 0x1635 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE 0xD7 MLOAD PUSH32 0x220469814ABD0DAB20C4025CFB17CE7ED5FC9AE0CD9C3526888154DF64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"529:12022:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:0;;;;;;:::i;:::-;;:::i;:::-;;;516:14:9;;509:22;491:41;;479:2;464:18;542:165:0;;;;;;;;905:44:8;;;;;;;;689:25:9;;;677:2;662:18;905:44:8;543:177:9;1835:34:8;;;;;1056:44;;;;;2403:49;;;;;;:::i;:::-;;;;;;;;;;;;;;795:48;;842:1;795:48;;1431:46;;;;;;;;1317:42:9;1305:55;;;1287:74;;1275:2;1260:18;1431:46:8;1117:250:9;1156:44:8;;;;;956;;;;;1666:37;;;;;2186:70;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1942:36;;;;;1305:42;;1346:1;1305:42;;1006:44;;;;;2050:51;;;;;;:::i;:::-;;;;;;;;;;;;;;;6119:127;;;:::i;9096:3453::-;;;;;;:::i;:::-;;:::i;:::-;;;4111:66:9;4099:79;;;4081:98;;4069:2;4054:18;9096:3453:8;3937:248:9;1206:44:8;;;;;1564:45;;;;;1754:39;;;;;6932:1630;;;;;;:::i;:::-;;:::i;1106:44::-;;;;;542:165:0;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:0:o;6119:127:8:-;6164:7;6225:14;6191:30;6209:12;6191:15;:30;:::i;:::-;6190:49;;;;:::i;:::-;6183:56;;6119:127;:::o;9096:3453::-;9296:6;9318:10;:35;9340:12;9318:35;;9314:104;;9376:31;;;;;9396:10;9376:31;;;1287:74:9;1260:18;;9376:31:8;;;;;;;;9314:104;9428:13;9444:14;:12;:14::i;:::-;9428:30;;9480:9;9472:5;:17;9468:74;;;9512:19;;;;;;;;689:25:9;;;662:18;;9512:19:8;543:177:9;9468:74:8;9552:70;;;;;9569:10;;9552:42;;:70;;9603:4;;9610:3;;;;9615:6;;;;9552:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9633:20;9672:9;9667:1007;9687:14;;;9667:1007;;;9726:6;;9733:1;9726:9;;;;;;;:::i;:::-;;;;;;;9739:1;9726:14;9722:108;;9785:10;9797:3;;9801:1;9797:6;;;;;;;:::i;:::-;;;;;;;9805;;9812:1;9805:9;;;;;;;:::i;:::-;9767:48;;;;;7150:42:9;7138:55;;;9767:48:8;;;7120:74:9;7210:18;;;7203:34;;;;-1:-1:-1;9805:9:8;;;;;;7253:18:9;;;7246:34;7093:18;;9767:48:8;6918:368:9;9722:108:8;9848:3;;9852:1;9848:6;;;;;;;:::i;:::-;;;;;;;9858:1;9848:11;9844:820;;9908:19;9896:6;;9903:1;9896:9;;;;;;;:::i;:::-;;;;;;;:31;;;;:::i;:::-;9879:49;;;;:::i;:::-;;;9844:820;;;9953:3;;9957:1;9953:6;;;;;;;:::i;:::-;;;;;;;9963:1;9953:11;9949:715;;10013:19;10001:6;;10008:1;10001:9;;;;;;;:::i;9949:715::-;10058:3;;10062:1;10058:6;;;;;;;:::i;:::-;;;;;;;10068:1;10058:11;10054:610;;10118:19;10106:6;;10113:1;10106:9;;;;;;;:::i;10054:610::-;10163:3;;10167:1;10163:6;;;;;;;:::i;:::-;;;;;;;10173:1;10163:11;10159:505;;10223:19;10211:6;;10218:1;10211:9;;;;;;;:::i;10159:505::-;10268:3;;10272:1;10268:6;;;;;;;:::i;:::-;;;;;;;10278:1;10268:11;10264:400;;10328:19;10316:6;;10323:1;10316:9;;;;;;;:::i;10264:400::-;10373:3;;10377:1;10373:6;;;;;;;:::i;:::-;;;;;;;10383:1;10373:11;10369:295;;10433:19;10421:6;;10428:1;10421:9;;;;;;;:::i;10369:295::-;10478:3;;10482:1;10478:6;;;;;;;:::i;:::-;;;;;;;10488:1;10478:11;10474:190;;10538:19;10526:6;;10533:1;10526:9;;;;;;;:::i;10474:190::-;10627:12;10642:3;;10646:1;10642:6;;;;;;;:::i;:::-;10604:45;;;;;7798:42:9;7786:55;;;10604:45:8;;;7768:74:9;10642:6:8;;;;;;;7858:18:9;;;7851:34;-1:-1:-1;7741:18:9;;10604:45:8;7594:297:9;10474:190:8;9703:3;;9667:1007;;;-1:-1:-1;10804:24:8;;;10684:16;10804:24;;;:14;:24;;;;;;10703:4;;10843:15;;10839:1122;;10875:22;;10940:38;;;;10951:4;10940:38;:::i;:::-;10874:104;;;;11017:3;10997:16;:23;;11025:1;10996:30;10992:613;;11071:57;;9524:66:9;9511:2;9507:15;;;9503:88;11071:57:8;;;9491:101:9;9608:12;;;9601:28;;;11046:12:8;;9645::9;;11071:57:8;;;;;;;;;;;;;11061:68;;11071:57;11061:68;;;;;-1:-1:-1;11152:31:8;:5;11165:11;11061:68;11152:12;:31::i;:::-;11147:139;;11214:53;;;;;7798:42:9;7786:55;;11214:53:8;;;7768:74:9;7858:18;;;7851:34;;;7741:18;;11214:53:8;7594:297:9;11147:139:8;11406:24;;;11304;11406;;;:14;:24;;;;;;;;;11365:3;11332:36;;;11331:57;;11406:43;;;;11472:65;;9842:25:9;;;9883:18;;;9876:34;;;11331:57:8;11406:24;11472:65;;9815:18:9;11472:65:8;;;;;;;11574:16;-1:-1:-1;;10992:613:8;712:6;11635:44;11650:29;11635:12;:44;:::i;:::-;11634:61;;;;:::i;:::-;11619:76;;10860:846;;10839:1122;;;11786:3;11766:23;;;11807:33;;11803:148;;712:6;11876:44;11891:29;11876:12;:44;:::i;:::-;11875:61;;;;:::i;:::-;11860:76;;11803:148;11712:249;10839:1122;11971:49;;;12034:17;;12030:77;;12067:29;12083:13;12067:29;;:::i;:::-;;;12030:77;12151:28;12182:22;;;:15;:22;;;;;;;;:32;;;;;;;;;;;:47;;12217:12;;12182:47;:::i;:::-;12239:22;;;;:15;:22;;;;;;;;:32;;;;;;;;;;:55;;;12338:23;;;;;;;;;:39;;12151:78;;-1:-1:-1;12365:12:8;;12338:23;;12239:22;12338:39;;12365:12;;12338:39;:::i;:::-;;;;;;;;12415:5;12405:8;12393:95;;;12422:3;;12427:6;;12435:12;12449:20;12471:16;12393:95;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;12506:36:8;;9096:3453;-1:-1:-1;;;;;;;;;;;;;;9096:3453:8:o;6932:1630::-;7057:6;7079:10;:34;7101:11;7079:34;;7075:103;;7136:31;;;;;7156:10;7136:31;;;1287:74:9;1260:18;;7136:31:8;1117:250:9;7075:103:8;842:1;7191:2;:26;7187:94;;7240:30;;;;;7255:10;7240:30;;;7768:74:9;7858:18;;;7851:34;;;7741:18;;7240:30:8;7594:297:9;7187:94:8;7295:5;7304:1;7295:10;7291:88;;7328:40;;;;;7346:10;7328:40;;;7120:74:9;7210:18;;;7203:34;;;7253:18;;;7246:34;;;7093:18;;7328:40:8;6918:368:9;7291:88:8;7389:13;7405:14;:12;:14::i;:::-;7389:30;;7441:9;7433:5;:17;7429:74;;;7473:19;;;;;;;;689:25:9;;;662:18;;7473:19:8;543:177:9;7429:74:8;7540:20;;;7513:24;7540:20;;;:14;:20;;;;;;7574:29;;;;7570:96;;7626:29;;;;;1317:42:9;1305:55;;7626:29:8;;;1287:74:9;1260:18;;7626:29:8;1117:250:9;7570:96:8;7676:63;;;;;7722:4;7676:63;;;7120:74:9;7210:18;;;7203:34;;;7253:18;;;7246:34;;;7693:10:8;;7676:37;;7093:18:9;;7676:63:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1346:1:8;7777:33;;;-1:-1:-1;7824:15:8;;7820:562;;7880:3;7860:16;:23;;7888:1;7859:30;7855:517;;7910:22;;7975:38;;;;7986:4;7975:38;:::i;:::-;8056:53;;9524:66:9;9511:2;9507:15;;;9503:88;8056:53:8;;;9491:101:9;9608:12;;;9601:28;;;7909:104:8;;-1:-1:-1;7909:104:8;-1:-1:-1;8031:12:8;;9645::9;;8056:53:8;;;;;;;;;;;;;8046:64;;8056:53;8046:64;;;;;-1:-1:-1;8133:31:8;:5;8146:11;8046:64;8133:12;:31::i;:::-;8128:135;;8195:49;;;;;7798:42:9;7786:55;;8195:49:8;;;7768:74:9;7858:18;;;7851:34;;;7741:18;;8195:49:8;7594:297:9;8128:135:8;-1:-1:-1;8334:3:8;8301:36;8300:57;;;;-1:-1:-1;7855:517:8;8391:20;;;;;;;:14;:20;;;;;;;;;:39;;;8445:61;;9842:25:9;;;9883:18;;;9876:34;;;8445:61:8;;9815:18:9;8445:61:8;;;;;;;-1:-1:-1;8524:31:8;;6932:1630;-1:-1:-1;;;;;;;;;6932:1630:8:o;1705:174:3:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:3;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:3;1620:11;;1560:82;-1:-1:-1;1658:34:3;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1156:184:7:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:7:o;1994:290::-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:7;;2133:116;;;-1:-1:-1;2265:12:7;1994:290;-1:-1:-1;;;1994:290:7:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:7:o;14:332:9:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:196;793:20;;853:42;842:54;;832:65;;822:93;;911:1;908;901:12;822:93;725:196;;;:::o;926:186::-;985:6;1038:2;1026:9;1017:7;1013:23;1009:32;1006:52;;;1054:1;1051;1044:12;1006:52;1077:29;1096:9;1077:29;:::i;1372:254::-;1440:6;1448;1501:2;1489:9;1480:7;1476:23;1472:32;1469:52;;;1517:1;1514;1507:12;1469:52;1553:9;1540:23;1530:33;;1582:38;1616:2;1605:9;1601:18;1582:38;:::i;:::-;1572:48;;1372:254;;;;;:::o;1813:180::-;1872:6;1925:2;1913:9;1904:7;1900:23;1896:32;1893:52;;;1941:1;1938;1931:12;1893:52;-1:-1:-1;1964:23:9;;1813:180;-1:-1:-1;1813:180:9:o;1998:367::-;2061:8;2071:6;2125:3;2118:4;2110:6;2106:17;2102:27;2092:55;;2143:1;2140;2133:12;2092:55;-1:-1:-1;2166:20:9;;2209:18;2198:30;;2195:50;;;2241:1;2238;2231:12;2195:50;2278:4;2270:6;2266:17;2254:29;;2338:3;2331:4;2321:6;2318:1;2314:14;2306:6;2302:27;2298:38;2295:47;2292:67;;;2355:1;2352;2345:12;2292:67;1998:367;;;;;:::o;2370:347::-;2421:8;2431:6;2485:3;2478:4;2470:6;2466:17;2462:27;2452:55;;2503:1;2500;2493:12;2452:55;-1:-1:-1;2526:20:9;;2569:18;2558:30;;2555:50;;;2601:1;2598;2591:12;2555:50;2638:4;2630:6;2626:17;2614:29;;2690:3;2683:4;2674:6;2666;2662:19;2658:30;2655:39;2652:59;;;2707:1;2704;2697:12;2722:1210;2882:6;2890;2898;2906;2914;2922;2930;2938;2991:3;2979:9;2970:7;2966:23;2962:33;2959:53;;;3008:1;3005;2998:12;2959:53;3031:29;3050:9;3031:29;:::i;:::-;3021:39;;3079:38;3113:2;3102:9;3098:18;3079:38;:::i;:::-;3069:48;;3168:2;3157:9;3153:18;3140:32;3191:18;3232:2;3224:6;3221:14;3218:34;;;3248:1;3245;3238:12;3218:34;3287:70;3349:7;3340:6;3329:9;3325:22;3287:70;:::i;:::-;3376:8;;-1:-1:-1;3261:96:9;-1:-1:-1;3464:2:9;3449:18;;3436:32;;-1:-1:-1;3480:16:9;;;3477:36;;;3509:1;3506;3499:12;3477:36;3548:72;3612:7;3601:8;3590:9;3586:24;3548:72;:::i;:::-;3639:8;;-1:-1:-1;3522:98:9;-1:-1:-1;3727:3:9;3712:19;;3699:33;;-1:-1:-1;3744:16:9;;;3741:36;;;3773:1;3770;3763:12;3741:36;;3812:60;3864:7;3853:8;3842:9;3838:24;3812:60;:::i;:::-;2722:1210;;;;-1:-1:-1;2722:1210:9;;-1:-1:-1;2722:1210:9;;;;;;3891:8;-1:-1:-1;;;2722:1210:9:o;4190:695::-;4296:6;4304;4312;4320;4328;4336;4389:3;4377:9;4368:7;4364:23;4360:33;4357:53;;;4406:1;4403;4396:12;4357:53;4429:29;4448:9;4429:29;:::i;:::-;4419:39;;4477:38;4511:2;4500:9;4496:18;4477:38;:::i;:::-;4467:48;;4562:2;4551:9;4547:18;4534:32;4524:42;;4613:2;4602:9;4598:18;4585:32;4575:42;;4668:3;4657:9;4653:19;4640:33;4696:18;4688:6;4685:30;4682:50;;;4728:1;4725;4718:12;4682:50;4767:58;4817:7;4808:6;4797:9;4793:22;4767:58;:::i;:::-;4190:695;;;;-1:-1:-1;4190:695:9;;-1:-1:-1;4190:695:9;;4844:8;;4190:695;-1:-1:-1;;;4190:695:9:o;4890:184::-;4942:77;4939:1;4932:88;5039:4;5036:1;5029:15;5063:4;5060:1;5053:15;5079:128;5146:9;;;5167:11;;;5164:37;;;5181:18;;:::i;5212:274::-;5252:1;5278;5268:189;;5313:77;5310:1;5303:88;5414:4;5411:1;5404:15;5442:4;5439:1;5432:15;5268:189;-1:-1:-1;5471:9:9;;5212:274::o;5722:358::-;5822:6;5817:3;5810:19;5792:3;5852:66;5844:6;5841:78;5838:98;;;5932:1;5929;5922:12;5838:98;5968:6;5965:1;5961:14;6020:8;6013:5;6006:4;6001:3;5997:14;5984:45;6049:18;;;;6069:4;6045:29;;5722:358;-1:-1:-1;;;5722:358:9:o;6085:639::-;6402:42;6394:6;6390:55;6379:9;6372:74;6482:2;6477;6466:9;6462:18;6455:30;6353:4;6508:73;6577:2;6566:9;6562:18;6554:6;6546;6508:73;:::i;:::-;6629:9;6621:6;6617:22;6612:2;6601:9;6597:18;6590:50;6657:61;6711:6;6703;6695;6657:61;:::i;:::-;6649:69;6085:639;-1:-1:-1;;;;;;;;6085:639:9:o;6729:184::-;6781:77;6778:1;6771:88;6878:4;6875:1;6868:15;6902:4;6899:1;6892:15;7291:168;7364:9;;;7395;;7412:15;;;7406:22;;7392:37;7382:71;;7433:18;;:::i;7464:125::-;7529:9;;;7550:10;;;7547:36;;;7563:18;;:::i;7896:184::-;7948:77;7945:1;7938:88;8045:4;8042:1;8035:15;8069:4;8066:1;8059:15;8085:1244;8178:6;8186;8239:2;8227:9;8218:7;8214:23;8210:32;8207:52;;;8255:1;8252;8245:12;8207:52;8295:9;8282:23;8324:18;8365:2;8357:6;8354:14;8351:34;;;8381:1;8378;8371:12;8351:34;8419:6;8408:9;8404:22;8394:32;;8464:7;8457:4;8453:2;8449:13;8445:27;8435:55;;8486:1;8483;8476:12;8435:55;8522:2;8509:16;8544:4;8567:2;8563;8560:10;8557:36;;;8573:18;;:::i;:::-;8619:2;8616:1;8612:10;8651:2;8645:9;8710:66;8705:2;8701;8697:11;8693:84;8685:6;8681:97;8828:6;8816:10;8813:22;8808:2;8796:10;8793:18;8790:46;8787:72;;;8839:18;;:::i;:::-;8875:2;8868:22;8925:18;;;8959:15;;;;-1:-1:-1;9001:11:9;;;8997:20;;;9029:19;;;9026:39;;;9061:1;9058;9051:12;9026:39;9085:11;;;;9105:142;9121:6;9116:3;9113:15;9105:142;;;9187:17;;9175:30;;9138:12;;;;9225;;;;9105:142;;;9266:6;9304:18;;;;9291:32;;-1:-1:-1;;;;;;;8085:1244:9:o;9921:735::-;10282:3;10271:9;10264:22;10245:4;10309:74;10378:3;10367:9;10363:19;10355:6;10347;10309:74;:::i;:::-;10431:9;10423:6;10419:22;10414:2;10403:9;10399:18;10392:50;10459:61;10513:6;10505;10497;10459:61;:::i;:::-;10551:2;10536:18;;10529:34;;;;-1:-1:-1;;10594:2:9;10579:18;;10572:34;;;;10637:3;10622:19;;;10615:35;10451:69;9921:735;-1:-1:-1;;;;9921:735:9:o"},"gasEstimates":{"creation":{"codeDepositCost":"1265200","executionCost":"infinite","totalCost":"infinite"},"external":{"BURN_WEIGHT_TOKEN_1()":"infinite","BURN_WEIGHT_TOKEN_2()":"infinite","BURN_WEIGHT_TOKEN_3()":"infinite","BURN_WEIGHT_TOKEN_4()":"infinite","BURN_WEIGHT_TOKEN_5()":"infinite","BURN_WEIGHT_TOKEN_6()":"infinite","BURN_WEIGHT_TOKEN_7()":"infinite","CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","MERKLE_ROOT()":"infinite","MISSING_ORB()":"infinite","MISSING_ORB_TOKEN_ID()":"241","ORB_OF_POWER()":"infinite","ROC_MULTIPLIER()":"263","currentCycle()":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","orbMultipliers(address)":"2597","supportsInterface(bytes4)":"infinite","totalAshPerCycle(uint256)":"2508","userAshPerCycle(uint256,address)":"2694"}},"methodIdentifiers":{"BURN_WEIGHT_TOKEN_1()":"0277640e","BURN_WEIGHT_TOKEN_2()":"424ab4f7","BURN_WEIGHT_TOKEN_3()":"aa918fd5","BURN_WEIGHT_TOKEN_4()":"0455645a","BURN_WEIGHT_TOKEN_5()":"f95d1016","BURN_WEIGHT_TOKEN_6()":"3838a201","BURN_WEIGHT_TOKEN_7()":"c131754e","CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","MERKLE_ROOT()":"51e75e8b","MISSING_ORB()":"cd18a34f","MISSING_ORB_TOKEN_ID()":"1de0e40b","ORB_OF_POWER()":"28a979cf","ROC_MULTIPLIER()":"55f5b0a8","currentCycle()":"bab2f552","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","orbMultipliers(address)":"12828b7f","supportsInterface(bytes4)":"01ffc9a7","totalAshPerCycle(uint256)":"ab504e73","userAshPerCycle(uint256,address)":"4dac1c2b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[7]\",\"name\":\"tokenBurnWeights\",\"type\":\"uint256[7]\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"orbOfPower\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"missingOrb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AlreadySetROCMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"puzzleGameMultiplierNumerator\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenBurnWeight\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCycleDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMaxCycle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orbMultiplier\",\"type\":\"uint256\"}],\"name\":\"GenerateAsh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curOrbMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedOrbMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateOrbMultiplier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORB_OF_POWER\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROC_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Throws if the cycle duration is zero.Throws if the max cycle is zero.\",\"params\":{\"cycleDuration\":\"The duration of each cycle.\",\"initialTime\":\"The initial time of the contract.\",\"maxCycle\":\"The maximum cycle.\",\"merkleRoot\":\"The Merkle root of the Puzzle Game multiplier claim.\",\"missingOrb\":\"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\",\"orbOfPower\":\"The IERC1155Burnable erc1155 contract burn to generate ASH.\"}},\"currentCycle()\":{\"returns\":{\"_0\":\"cycle The current cycle.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"ids\":\"The token IDs to burn.\",\"values\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"id\":\"The token ID.\",\"value\":\"The token value.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"OrbsBurnPool Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySetROCMultiplier(address)\":[{\"notice\":\"Error thrown when the wallet already has the ROC multiplier been set.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidProof(address,uint256)\":[{\"notice\":\"Error thrown when the proof is invalid.\"}],\"InvalidTokenAddress(address)\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenBurnWeight(uint256)\":[{\"notice\":\"Error thrown when the token weight is invalid.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"InvalidTokenValue(address,uint256,uint256)\":[{\"notice\":\"Error thrown when the token amount is invalid.\"}],\"ZeroCycleDuration()\":[{\"notice\":\"Error thrown when the cycle duration is invalid.\"}],\"ZeroMaxCycle()\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}]},\"events\":{\"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)\":{\"notice\":\"Event emitted when ASH are generated.\"},\"UpdateOrbMultiplier(address,uint256,uint256)\":{\"notice\":\"Event emitted when the multiplier info is updated.\"}},\"kind\":\"user\",\"methods\":{\"BURN_WEIGHT_TOKEN_1()\":{\"notice\":\"The token weights for calculating Ash.\"},\"CYCLE_DURATION()\":{\"notice\":\"The duration of each cycle.\"},\"INITIAL_TIME()\":{\"notice\":\"The initial time of the contract.\"},\"MAX_CYCLE()\":{\"notice\":\"The maximum cycle.\"},\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root for setting the puzzleMultiplier.\"},\"MISSING_ORB()\":{\"notice\":\"The IERC1155 erc1155 contract for setting the token multiplier.\"},\"MISSING_ORB_TOKEN_ID()\":{\"notice\":\"The token ID of RoC for setting the token multiplier.\"},\"ORB_OF_POWER()\":{\"notice\":\"The IERC1155Burnable erc1155 contracts burn to generate ASH.\"},\"ROC_MULTIPLIER()\":{\"notice\":\"The Riddle Of Chaos multiplier.\"},\"constructor\":{\"notice\":\"Constructor for the OrbsBurnPool contract.\"},\"currentCycle()\":{\"notice\":\"Get the current cycle.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Burn the tokens and calculate the ash.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field.\"},\"orbMultipliers(address)\":{\"notice\":\"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalAshPerCycle(uint256)\":{\"notice\":\"The total amount of ASH generated in each cycle.\"},\"userAshPerCycle(uint256,address)\":{\"notice\":\"The total amount of ASH generated by each user in each cycle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/OrbsBurnPool.sol\":\"OrbsBurnPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/burn/OrbsBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title OrbsBurnPool Contract\\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\\n */\\ncontract OrbsBurnPool is ERC1155TokenReceiver {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The denominator for the multiplier.\\n    uint256 internal constant _DENOMINATOR = 10_000;\\n\\n    /// @notice The token ID of RoC for setting the token multiplier.\\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\\n\\n    /// @notice The token weights for calculating Ash.\\n    uint256 public immutable BURN_WEIGHT_TOKEN_1; \\n    uint256 public immutable BURN_WEIGHT_TOKEN_2;\\n    uint256 public immutable BURN_WEIGHT_TOKEN_3;\\n    uint256 public immutable BURN_WEIGHT_TOKEN_4;\\n    uint256 public immutable BURN_WEIGHT_TOKEN_5;\\n    uint256 public immutable BURN_WEIGHT_TOKEN_6;\\n    uint256 public immutable BURN_WEIGHT_TOKEN_7;\\n\\n    /// @notice The Riddle Of Chaos multiplier.\\n    uint256 public constant ROC_MULTIPLIER = 2;\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\\n    IERC1155Burnable public immutable ORB_OF_POWER;\\n\\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\\n    IERC1155Burnable public immutable MISSING_ORB;\\n\\n    /// @notice The initial time of the contract.\\n    uint256 public immutable INITIAL_TIME;\\n\\n    /// @notice The duration of each cycle.\\n    uint256 public immutable CYCLE_DURATION;\\n\\n    /// @notice The maximum cycle.\\n    uint256 public immutable MAX_CYCLE;\\n\\n    /// @notice The Merkle root for setting the puzzleMultiplier.\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /// @notice The total amount of ASH generated in each cycle.\\n    mapping(uint256 => uint256) public totalAshPerCycle;\\n\\n    /// @notice The total amount of ASH generated by each user in each cycle.\\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\\n\\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\\n    mapping(address => uint256) public orbMultipliers;\\n\\n    /// @notice Event emitted when ASH are generated.\\n    event GenerateAsh(\\n        address indexed burner,\\n        uint256 indexed cycle,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 ash,\\n        uint256 totalAsh,\\n        uint256 orbMultiplier\\n    );\\n\\n    /// @notice Event emitted when the multiplier info is updated.\\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the token weight is invalid.\\n    error InvalidTokenBurnWeight(uint256 weight);\\n    \\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidTokenAddress(address token);\\n\\n    /// @notice Error thrown when the token amount is invalid.\\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\\n    error AlreadySetROCMultiplier(address wallet);\\n\\n    /// @notice Error thrown when the proof is invalid.\\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\\n\\n    /// @notice Error thrown when the cycle duration is invalid.\\n    error ZeroCycleDuration();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error ZeroMaxCycle();\\n\\n    /**\\n     * @notice Constructor for the OrbsBurnPool contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\\n     * @dev Throws if the cycle duration is zero.\\n     * @dev Throws if the max cycle is zero.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        uint256[7] memory tokenBurnWeights,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb\\n    ) {\\n        INITIAL_TIME = initialTime;\\n\\n        if (cycleDuration == 0) {\\n            revert ZeroCycleDuration();\\n        }\\n        CYCLE_DURATION = cycleDuration;\\n\\n        if (maxCycle == 0) {\\n            revert ZeroMaxCycle();\\n        }\\n\\n        for (uint256 i = 0; i < tokenBurnWeights.length; i++) {\\n            if (tokenBurnWeights[i] == 0) {\\n                revert InvalidTokenBurnWeight(tokenBurnWeights[i]);\\n            }\\n\\n            if (i == 0) {\\n                BURN_WEIGHT_TOKEN_1 = tokenBurnWeights[i];\\n            } else if (i == 1) {\\n                BURN_WEIGHT_TOKEN_2 = tokenBurnWeights[i];\\n            } else if (i == 2) {\\n                BURN_WEIGHT_TOKEN_3 = tokenBurnWeights[i];\\n            } else if (i == 3) {\\n                BURN_WEIGHT_TOKEN_4 = tokenBurnWeights[i];\\n            } else if (i == 4) {\\n                BURN_WEIGHT_TOKEN_5 = tokenBurnWeights[i];\\n            } else if (i == 5) {\\n                BURN_WEIGHT_TOKEN_6 = tokenBurnWeights[i];\\n            } else {\\n                BURN_WEIGHT_TOKEN_7 = tokenBurnWeights[i];\\n            }\\n        }\\n\\n        MAX_CYCLE = maxCycle;\\n        MERKLE_ROOT = merkleRoot;\\n        ORB_OF_POWER = orbOfPower;\\n        MISSING_ORB = missingOrb;\\n    }\\n\\n    /**\\n     * @notice Get the current cycle.\\n     * @return cycle The current cycle.\\n     */\\n    function currentCycle() public view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n    /**\\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\\n     * @param from The wallet address.\\n     * @param id The token ID.\\n     * @param value The token value.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     * @dev Throws if the token multiplier has already been set.\\n     */\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\\n        if (msg.sender != address(MISSING_ORB)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n        if (id != MISSING_ORB_TOKEN_ID) {\\n            revert InvalidTokenId(msg.sender, id);\\n        }\\n\\n        if (value != 1) {\\n            revert InvalidTokenValue(msg.sender, id, value);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 curOrbMultiplier = orbMultipliers[from];\\n        if (uint128(curOrbMultiplier) > 0) {\\n            revert AlreadySetROCMultiplier(from);\\n        }\\n\\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\\n\\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\\n        if (data.length > 0) {\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\\n                }\\n\\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\\n            }\\n        }\\n        orbMultipliers[from] = newOrbMultiplier;\\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice Burn the tokens and calculate the ash.\\n     * @param from The wallet address.\\n     * @param ids The token IDs to burn.\\n     * @param values The amount of tokens to burn.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        if (msg.sender != address(ORB_OF_POWER)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\\n\\n        uint256 ashGenerated = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] == 0) {\\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\\n            }\\n\\n            if (ids[i] == 1) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\\n            } else if (ids[i] == 2) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\\n            } else if (ids[i] == 3) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\\n            } else if (ids[i] == 4) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\\n            } else if (ids[i] == 5) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\\n            } else if (ids[i] == 6) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\\n            } else if (ids[i] == 7) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\\n            } else {\\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\\n            }\\n        }\\n\\n        address userAddr = from;\\n\\n        // boost the total ash based on the orbMultipliers\\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\\n\\n        if (data.length > 0) {\\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\\n                }\\n\\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\\n                orbMultipliers[userAddr] = newOrbMultiplier;\\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\\n                curOrbMultiplier = newOrbMultiplier;\\n            }\\n\\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n        } else {\\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\\n            if (puzzleGameMultiplierNumerator > 0) {\\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n            }\\n        }\\n\\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\\n        if (rocMultiplier > 0) {\\n            ashGenerated *= rocMultiplier;\\n        }\\n\\n        // update the user status\\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\\n        // update the pool status\\n        totalAshPerCycle[cycle] += ashGenerated;\\n\\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x00aa7f939ac903f91bd23d75937bb1c04eed8fe7f7174de3b2b0a78c26d0c41e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":815,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"totalAshPerCycle","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"},{"astId":822,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"userAshPerCycle","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":827,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"orbMultipliers","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadySetROCMultiplier(address)":[{"notice":"Error thrown when the wallet already has the ROC multiplier been set."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidProof(address,uint256)":[{"notice":"Error thrown when the proof is invalid."}],"InvalidTokenAddress(address)":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenBurnWeight(uint256)":[{"notice":"Error thrown when the token weight is invalid."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"InvalidTokenValue(address,uint256,uint256)":[{"notice":"Error thrown when the token amount is invalid."}],"ZeroCycleDuration()":[{"notice":"Error thrown when the cycle duration is invalid."}],"ZeroMaxCycle()":[{"notice":"Error thrown when the cycle is invalid."}]},"events":{"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)":{"notice":"Event emitted when ASH are generated."},"UpdateOrbMultiplier(address,uint256,uint256)":{"notice":"Event emitted when the multiplier info is updated."}},"kind":"user","methods":{"BURN_WEIGHT_TOKEN_1()":{"notice":"The token weights for calculating Ash."},"CYCLE_DURATION()":{"notice":"The duration of each cycle."},"INITIAL_TIME()":{"notice":"The initial time of the contract."},"MAX_CYCLE()":{"notice":"The maximum cycle."},"MERKLE_ROOT()":{"notice":"The Merkle root for setting the puzzleMultiplier."},"MISSING_ORB()":{"notice":"The IERC1155 erc1155 contract for setting the token multiplier."},"MISSING_ORB_TOKEN_ID()":{"notice":"The token ID of RoC for setting the token multiplier."},"ORB_OF_POWER()":{"notice":"The IERC1155Burnable erc1155 contracts burn to generate ASH."},"ROC_MULTIPLIER()":{"notice":"The Riddle Of Chaos multiplier."},"constructor":{"notice":"Constructor for the OrbsBurnPool contract."},"currentCycle()":{"notice":"Get the current cycle."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Burn the tokens and calculate the ash."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field."},"orbMultipliers(address)":{"notice":"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalAshPerCycle(uint256)":{"notice":"The total amount of ASH generated in each cycle."},"userAshPerCycle(uint256,address)":{"notice":"The total amount of ASH generated by each user in each cycle."}},"version":1}}}}}}