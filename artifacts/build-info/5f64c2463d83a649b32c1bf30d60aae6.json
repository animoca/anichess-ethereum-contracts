{"id":"5f64c2463d83a649b32c1bf30d60aae6","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/burn/OrbsBurnPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {ERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title OrbsBurnPool Contract\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\n */\ncontract OrbsBurnPool is ERC1155TokenReceiver {\n    using MerkleProof for bytes32[];\n\n    /// @notice The denominator for the multiplier.\n    uint256 internal constant _DENOMINATOR = 10_000;\n\n    /// @notice The token ID of RoC for setting the token multiplier.\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\n\n    /// @notice The token weights for calculating Ash.\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\n\n    /// @notice The Riddle Of Chaos multiplier.\n    uint256 public constant ROC_MULTIPLIER = 2;\n\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\n    IERC1155Burnable public immutable ORB_OF_POWER;\n\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\n    IERC1155Burnable public immutable MISSING_ORB;\n\n    /// @notice The initial time of the contract.\n    uint256 public immutable INITIAL_TIME;\n\n    /// @notice The duration of each cycle.\n    uint256 public immutable CYCLE_DURATION;\n\n    /// @notice The maximum cycle.\n    uint256 public immutable MAX_CYCLE;\n\n    /// @notice The Merkle root for setting the puzzleMultiplier.\n    bytes32 public immutable MERKLE_ROOT;\n\n    /// @notice The total amount of ASH generated in each cycle.\n    mapping(uint256 => uint256) public totalAshPerCycle;\n\n    /// @notice The total amount of ASH generated by each user in each cycle.\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\n\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\n    mapping(address => uint256) public orbMultipliers;\n\n    /// @notice Event emitted when ASH are generated.\n    event GenerateAsh(\n        address indexed burner,\n        uint256 indexed cycle,\n        uint256[] ids,\n        uint256[] values,\n        uint256 ash,\n        uint256 totalAsh,\n        uint256 orbMultiplier\n    );\n\n    /// @notice Event emitted when the multiplier info is updated.\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\n\n    /// @notice Error thrown when the token ID is invalid.\n    error InvalidTokenId(address token, uint256 tokenId);\n\n    /// @notice Error thrown when the token is not approved.\n    error InvalidTokenAddress(address token);\n\n    /// @notice Error thrown when the token amount is invalid.\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\n\n    /// @notice Error thrown when the cycle is invalid.\n    error InvalidCycle(uint256 cycle);\n\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\n    error AlreadySetROCMultiplier(address wallet);\n\n    /// @notice Error thrown when the proof is invalid.\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\n\n    /// @notice Error thrown when the cycle duration is invalid.\n    error ZeroCycleDuration();\n\n    /// @notice Error thrown when the cycle is invalid.\n    error ZeroMaxCycle();\n\n    /**\n     * @notice Constructor for the OrbsBurnPool contract.\n     * @param initialTime The initial time of the contract.\n     * @param cycleDuration The duration of each cycle.\n     * @param maxCycle The maximum cycle.\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n     * @dev Throws if the cycle duration is zero.\n     * @dev Throws if the max cycle is zero.\n     */\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        bytes32 merkleRoot,\n        IERC1155Burnable orbOfPower,\n        IERC1155Burnable missingOrb\n    ) {\n        INITIAL_TIME = initialTime;\n\n        if (cycleDuration == 0) {\n            revert ZeroCycleDuration();\n        }\n        CYCLE_DURATION = cycleDuration;\n\n        if (maxCycle == 0) {\n            revert ZeroMaxCycle();\n        }\n        MAX_CYCLE = maxCycle;\n        MERKLE_ROOT = merkleRoot;\n        ORB_OF_POWER = orbOfPower;\n        MISSING_ORB = missingOrb;\n    }\n\n    /**\n     * @notice Get the current cycle.\n     * @return cycle The current cycle.\n     */\n    function currentCycle() public view returns (uint256) {\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\n    }\n\n    /**\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n     * @param from The wallet address.\n     * @param id The token ID.\n     * @param value The token value.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     * @dev Throws if the token multiplier has already been set.\n     */\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\n        if (msg.sender != address(MISSING_ORB)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n        if (id != MISSING_ORB_TOKEN_ID) {\n            revert InvalidTokenId(msg.sender, id);\n        }\n\n        if (value != 1) {\n            revert InvalidTokenValue(msg.sender, id, value);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        uint256 curOrbMultiplier = orbMultipliers[from];\n        if (uint128(curOrbMultiplier) > 0) {\n            revert AlreadySetROCMultiplier(from);\n        }\n\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\n\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\n        if (data.length > 0) {\n            if ((curOrbMultiplier >> 128) == 0) {\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\n                }\n\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\n            }\n        }\n        orbMultipliers[from] = newOrbMultiplier;\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\n\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @notice Burn the tokens and calculate the ash.\n     * @param from The wallet address.\n     * @param ids The token IDs to burn.\n     * @param values The amount of tokens to burn.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        if (msg.sender != address(ORB_OF_POWER)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\n\n        uint256 ashGenerated = 0;\n        for (uint256 i = 0; i < ids.length; i++) {\n            if (values[i] == 0) {\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\n            }\n\n            if (ids[i] == 1) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\n            } else if (ids[i] == 2) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\n            } else if (ids[i] == 3) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\n            } else if (ids[i] == 4) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\n            } else if (ids[i] == 5) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\n            } else if (ids[i] == 6) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\n            } else if (ids[i] == 7) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\n            } else {\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\n            }\n        }\n\n        address userAddr = from;\n\n        // boost the total ash based on the orbMultipliers\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\n\n        if (data.length > 0) {\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n            if ((curOrbMultiplier >> 128) == 0) {\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\n                }\n\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\n                orbMultipliers[userAddr] = newOrbMultiplier;\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\n                curOrbMultiplier = newOrbMultiplier;\n            }\n\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n        } else {\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\n            if (puzzleGameMultiplierNumerator > 0) {\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n            }\n        }\n\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\n        if (rocMultiplier > 0) {\n            ashGenerated *= rocMultiplier;\n        }\n\n        // update the user status\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\n        // update the pool status\n        totalAshPerCycle[cycle] += ashGenerated;\n\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\n\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[46],"InterfaceDetection":[29],"InterfaceDetectionStorage":[147]},"id":30,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":30,"sourceUnit":47,"src":"58:49:0","symbolAliases":[{"foreign":{"id":2,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"66:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":30,"sourceUnit":148,"src":"108:84:0","symbolAliases":[{"foreign":{"id":4,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"116:25:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"IERC165","nameLocations":["425:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"425:7:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"425:7:0"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"194:191:0","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":29,"linearizedBaseContracts":[29,46],"name":"InterfaceDetection","nameLocation":"403:18:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":12,"libraryName":{"id":9,"name":"InterfaceDetectionStorage","nameLocations":["445:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"445:25:0"},"nodeType":"UsingForDirective","src":"439:69:0","typeName":{"id":11,"nodeType":"UserDefinedTypeName","pathNode":{"id":10,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:0","501:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"475:32:0"},"referencedDeclaration":57,"src":"475:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[45],"body":{"id":27,"nodeType":"Block","src":"618:89:0","statements":[{"expression":{"arguments":[{"id":24,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"688:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":20,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"635:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$147_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":146,"src":"635:32:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":22,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":23,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":134,"src":"635:52:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$57_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":19,"id":26,"nodeType":"Return","src":"628:72:0"}]},"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"514:23:0","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":28,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:0","nodeType":"VariableDeclaration","scope":28,"src":"569:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":14,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":28,"src":"612:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":17,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:0"},"scope":29,"src":"542:165:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":30,"src":"385:324:0","usedErrors":[],"usedEvents":[]}],"src":"32:678:0"},"id":0},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[34]},"id":35,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":31,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"58:68:1","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":34,"name":"IllegalInterfaceId","nameLocation":"132:18:1","nodeType":"ErrorDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"150:2:1"},"src":"126:27:1"}],"src":"32:122:1"},"id":1},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[46]},"id":47,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":36,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"58:173:2","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":46,"linearizedBaseContracts":[46],"name":"IERC165","nameLocation":"241:7:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"255:340:2","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":45,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:2","nodeType":"FunctionDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:2","nodeType":"VariableDeclaration","scope":45,"src":"627:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":39,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"supported","nameLocation":"675:9:2","nodeType":"VariableDeclaration","scope":45,"src":"670:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:2"},"scope":46,"src":"600:86:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":47,"src":"231:457:2","usedErrors":[],"usedEvents":[]}],"src":"32:657:2"},"id":2},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[46],"IllegalInterfaceId":[34],"InterfaceDetectionStorage":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":48,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":50,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":35,"src":"58:76:3","symbolAliases":[{"foreign":{"id":49,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"66:18:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":52,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":47,"src":"135:52:3","symbolAliases":[{"foreign":{"id":51,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"143:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":147,"linearizedBaseContracts":[147],"name":"InterfaceDetectionStorage","nameLocation":"197:25:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":57,"members":[{"constant":false,"id":56,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:3","nodeType":"VariableDeclaration","scope":57,"src":"253:43:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":55,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":53,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":54,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:3","nodeType":"StructDefinition","scope":147,"src":"229:74:3","visibility":"public"},{"constant":true,"id":70,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:3","nodeType":"VariableDeclaration","scope":147,"src":"309:136:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":58,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":68,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":63,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:3","typeDescriptions":{}}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":67,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":60,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":59,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:3","typeDescriptions":{}}},"id":69,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":73,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:3","nodeType":"VariableDeclaration","scope":147,"src":"452:58:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":71,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":72,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:3","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":99,"nodeType":"Block","src":"867:141:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":84,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"881:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":85,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"896:20:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":90,"nodeType":"IfStatement","src":"877:68:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"925:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"RevertStatement","src":"918:27:3"}},{"expression":{"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":91,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"955:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":94,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:3","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":56,"src":"955:21:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":95,"indexExpression":{"id":93,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"977:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":96,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"992:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":98,"nodeType":"ExpressionStatement","src":"955:46:3"}]},"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"517:251:3","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":100,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:3","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"s","nameLocation":"819:1:3","nodeType":"VariableDeclaration","scope":100,"src":"804:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"Layout","nameLocations":["804:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"804:6:3"},"referencedDeclaration":57,"src":"804:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:3","nodeType":"VariableDeclaration","scope":100,"src":"822:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":78,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"supported","nameLocation":"847:9:3","nodeType":"VariableDeclaration","scope":100,"src":"842:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:3"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"867:0:3"},"scope":147,"src":"773:235:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":133,"nodeType":"Block","src":"1463:236:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":111,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1477:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":112,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"1492:20:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":117,"nodeType":"IfStatement","src":"1473:78:3","trueBody":{"id":116,"nodeType":"Block","src":"1514:37:3","statements":[{"expression":{"hexValue":"66616c7365","id":114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":110,"id":115,"nodeType":"Return","src":"1528:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":118,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1564:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":120,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"1584:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$46_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$46_$","typeString":"type(contract IERC165)"}],"id":119,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$46","typeString":"type(contract IERC165)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":127,"nodeType":"IfStatement","src":"1560:82:3","trueBody":{"id":126,"nodeType":"Block","src":"1606:36:3","statements":[{"expression":{"hexValue":"74727565","id":124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":110,"id":125,"nodeType":"Return","src":"1620:11:3"}]}},{"expression":{"baseExpression":{"expression":{"id":128,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"1658:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:3","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":56,"src":"1658:21:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":131,"indexExpression":{"id":130,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1680:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":110,"id":132,"nodeType":"Return","src":"1651:41:3"}]},"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"1014:340:3","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":134,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:3","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"s","nameLocation":"1401:1:3","nodeType":"VariableDeclaration","scope":134,"src":"1386:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":103,"nodeType":"UserDefinedTypeName","pathNode":{"id":102,"name":"Layout","nameLocations":["1386:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1386:6:3"},"referencedDeclaration":57,"src":"1386:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:3","nodeType":"VariableDeclaration","scope":134,"src":"1404:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":105,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:3"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"supported","nameLocation":"1452:9:3","nodeType":"VariableDeclaration","scope":134,"src":"1447:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":108,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:3"},"scope":147,"src":"1359:340:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"1764:115:3","statements":[{"assignments":[141],"declarations":[{"constant":false,"id":141,"mutability":"mutable","name":"position","nameLocation":"1782:8:3","nodeType":"VariableDeclaration","scope":145,"src":"1774:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":140,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":143,"initialValue":{"id":142,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1793:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:3"},{"AST":{"nativeSrc":"1831:42:3","nodeType":"YulBlock","src":"1831:42:3","statements":[{"nativeSrc":"1845:18:3","nodeType":"YulAssignment","src":"1845:18:3","value":{"name":"position","nativeSrc":"1855:8:3","nodeType":"YulIdentifier","src":"1855:8:3"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:3","nodeType":"YulIdentifier","src":"1845:6:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":141,"isOffset":false,"isSlot":false,"src":"1855:8:3","valueSize":1},{"declaration":138,"isOffset":false,"isSlot":true,"src":"1845:6:3","suffix":"slot","valueSize":1}],"id":144,"nodeType":"InlineAssembly","src":"1822:51:3"}]},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:3","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[],"src":"1720:2:3"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"s","nameLocation":"1761:1:3","nodeType":"VariableDeclaration","scope":146,"src":"1746:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":137,"nodeType":"UserDefinedTypeName","pathNode":{"id":136,"name":"Layout","nameLocations":["1746:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1746:6:3"},"referencedDeclaration":57,"src":"1746:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:3"},"scope":147,"src":"1705:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":148,"src":"189:1692:3","usedErrors":[],"usedEvents":[]}],"src":"32:1850:3"},"id":3},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[182],"IERC1155TokenReceiver":[246],"InterfaceDetection":[29],"InterfaceDetectionStorage":[147]},"id":183,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./interfaces/IERC1155TokenReceiver.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":247,"src":"58:77:4","symbolAliases":[{"foreign":{"id":150,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"66:21:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":148,"src":"136:104:4","symbolAliases":[{"foreign":{"id":152,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"144:25:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":30,"src":"241:80:4","symbolAliases":[{"foreign":{"id":154,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"249:18:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":157,"name":"IERC1155TokenReceiver","nameLocations":["541:21:4"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"541:21:4"},"id":158,"nodeType":"InheritanceSpecifier","src":"541:21:4"},{"baseName":{"id":159,"name":"InterfaceDetection","nameLocations":["564:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":29,"src":"564:18:4"},"id":160,"nodeType":"InheritanceSpecifier","src":"564:18:4"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"323:176:4","text":"@title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":182,"linearizedBaseContracts":[182,29,46,246],"name":"ERC1155TokenReceiver","nameLocation":"517:20:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":164,"libraryName":{"id":161,"name":"InterfaceDetectionStorage","nameLocations":["595:25:4"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"595:25:4"},"nodeType":"UsingForDirective","src":"589:69:4","typeName":{"id":163,"nodeType":"UserDefinedTypeName","pathNode":{"id":162,"name":"InterfaceDetectionStorage.Layout","nameLocations":["625:25:4","651:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"625:32:4"},"referencedDeclaration":57,"src":"625:32:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":180,"nodeType":"Block","src":"770:120:4","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":174,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"842:21:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$246_$","typeString":"type(contract IERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$246_$","typeString":"type(contract IERC1155TokenReceiver)"}],"id":173,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"837:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155TokenReceiver_$246","typeString":"type(contract IERC1155TokenReceiver)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:11:4","memberName":"interfaceId","nodeType":"MemberAccess","src":"837:39:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"878:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":168,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"780:25:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$147_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":146,"src":"780:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"815:21:4","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":100,"src":"780:56:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$57_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:103:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"780:103:4"}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"664:87:4","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"id":181,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[],"src":"767:2:4"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"770:0:4"},"scope":182,"src":"756:134:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":183,"src":"499:393:4","usedErrors":[34],"usedEvents":[]}],"src":"32:861:4"},"id":4},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[208]},"id":209,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":184,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"59:196:5","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1."},"fullyImplemented":false,"id":208,"linearizedBaseContracts":[208],"name":"IERC1155Burnable","nameLocation":"265:16:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"288:391:5","text":"@notice Burns some token.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"functionSelector":"124d91e5","id":195,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"693:8:5","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"from","nameLocation":"710:4:5","nodeType":"VariableDeclaration","scope":195,"src":"702:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"id","nameLocation":"724:2:5","nodeType":"VariableDeclaration","scope":195,"src":"716:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"value","nameLocation":"736:5:5","nodeType":"VariableDeclaration","scope":195,"src":"728:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:41:5"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"751:0:5"},"scope":208,"src":"684:68:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"758:478:5","text":"@notice Burns multiple tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"functionSelector":"80534934","id":207,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1250:13:5","nodeType":"FunctionDefinition","parameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"from","nameLocation":"1272:4:5","nodeType":"VariableDeclaration","scope":207,"src":"1264:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"ids","nameLocation":"1297:3:5","nodeType":"VariableDeclaration","scope":207,"src":"1278:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":200,"nodeType":"ArrayTypeName","src":"1278:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"values","nameLocation":"1321:6:5","nodeType":"VariableDeclaration","scope":207,"src":"1302:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1302:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":203,"nodeType":"ArrayTypeName","src":"1302:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1263:65:5"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[],"src":"1337:0:5"},"scope":208,"src":"1241:97:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":209,"src":"255:1085:5","usedErrors":[],"usedEvents":[]}],"src":"33:1308:5"},"id":5},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[246]},"id":247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":210,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":211,"nodeType":"StructuredDocumentation","src":"58:284:6","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":246,"linearizedBaseContracts":[246],"name":"IERC1155TokenReceiver","nameLocation":"352:21:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"380:914:6","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":227,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1308:17:6","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"operator","nameLocation":"1334:8:6","nodeType":"VariableDeclaration","scope":227,"src":"1326:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"from","nameLocation":"1352:4:6","nodeType":"VariableDeclaration","scope":227,"src":"1344:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"1344:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"id","nameLocation":"1366:2:6","nodeType":"VariableDeclaration","scope":227,"src":"1358:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":220,"mutability":"mutable","name":"value","nameLocation":"1378:5:6","nodeType":"VariableDeclaration","scope":227,"src":"1370:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":219,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"data","nameLocation":"1400:4:6","nodeType":"VariableDeclaration","scope":227,"src":"1385:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":221,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1325:80:6"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"magicValue","nameLocation":"1431:10:6","nodeType":"VariableDeclaration","scope":227,"src":"1424:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":224,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1423:19:6"},"scope":246,"src":"1299:144:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1449:1062:6","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":245,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2525:22:6","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"operator","nameLocation":"2565:8:6","nodeType":"VariableDeclaration","scope":245,"src":"2557:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"from","nameLocation":"2591:4:6","nodeType":"VariableDeclaration","scope":245,"src":"2583:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":231,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"ids","nameLocation":"2624:3:6","nodeType":"VariableDeclaration","scope":245,"src":"2605:22:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"2605:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":234,"nodeType":"ArrayTypeName","src":"2605:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"values","nameLocation":"2656:6:6","nodeType":"VariableDeclaration","scope":245,"src":"2637:25:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":237,"nodeType":"ArrayTypeName","src":"2637:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"data","nameLocation":"2687:4:6","nodeType":"VariableDeclaration","scope":245,"src":"2672:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":239,"name":"bytes","nodeType":"ElementaryTypeName","src":"2672:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2547:150:6"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"magicValue","nameLocation":"2723:10:6","nodeType":"VariableDeclaration","scope":245,"src":"2716:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":242,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2716:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2715:19:6"},"scope":246,"src":"2516:219:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":247,"src":"342:2395:6","usedErrors":[],"usedEvents":[]}],"src":"32:2706:6"},"id":6},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[748]},"id":749,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":248,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"143:658:7","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":748,"linearizedBaseContracts":[748],"name":"MerkleProof","nameLocation":"810:11:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":269,"nodeType":"Block","src":"1283:57:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":263,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"1313:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":264,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"1320:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":262,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"1300:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":266,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1329:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":261,"id":268,"nodeType":"Return","src":"1293:40:7"}]},"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"828:323:7","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":270,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:7","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":253,"mutability":"mutable","name":"proof","nameLocation":"1198:5:7","nodeType":"VariableDeclaration","scope":270,"src":"1181:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":252,"nodeType":"ArrayTypeName","src":"1181:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"root","nameLocation":"1221:4:7","nodeType":"VariableDeclaration","scope":270,"src":"1213:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:7","nodeType":"VariableDeclaration","scope":270,"src":"1235:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:7"},"returnParameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":270,"src":"1277:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":259,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:7"},"scope":748,"src":"1156:184:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"1578:65:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":284,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"1616:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":285,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"1623:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":283,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"1595:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":287,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1632:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":282,"id":289,"nodeType":"Return","src":"1588:48:7"}]},"documentation":{"id":271,"nodeType":"StructuredDocumentation","src":"1346:90:7","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:7","nodeType":"FunctionDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"proof","nameLocation":"1493:5:7","nodeType":"VariableDeclaration","scope":291,"src":"1474:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":273,"nodeType":"ArrayTypeName","src":"1474:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"root","nameLocation":"1516:4:7","nodeType":"VariableDeclaration","scope":291,"src":"1508:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:7","nodeType":"VariableDeclaration","scope":291,"src":"1530:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:7"},"returnParameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":291,"src":"1572:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":280,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:7"},"scope":748,"src":"1441:202:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":330,"nodeType":"Block","src":"2086:198:7","statements":[{"assignments":[303],"declarations":[{"constant":false,"id":303,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:7","nodeType":"VariableDeclaration","scope":330,"src":"2096:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":305,"initialValue":{"id":304,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"2119:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:7"},{"body":{"id":326,"nodeType":"Block","src":"2176:73:7","statements":[{"expression":{"id":324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":317,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2190:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":319,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2215:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":320,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"2229:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":322,"indexExpression":{"id":321,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2235:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":318,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2205:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":325,"nodeType":"ExpressionStatement","src":"2190:48:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2153:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":311,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"2157:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:7","memberName":"length","nodeType":"MemberAccess","src":"2157:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"initializationExpression":{"assignments":[307],"declarations":[{"constant":false,"id":307,"mutability":"mutable","name":"i","nameLocation":"2146:1:7","nodeType":"VariableDeclaration","scope":327,"src":"2138:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":306,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":309,"initialValue":{"hexValue":"30","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:7","subExpression":{"id":314,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2171:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":316,"nodeType":"ExpressionStatement","src":"2171:3:7"},"nodeType":"ForStatement","src":"2133:116:7"},{"expression":{"id":328,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2265:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":301,"id":329,"nodeType":"Return","src":"2258:19:7"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"1649:340:7","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":331,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:7","nodeType":"FunctionDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"proof","nameLocation":"2033:5:7","nodeType":"VariableDeclaration","scope":331,"src":"2016:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":294,"nodeType":"ArrayTypeName","src":"2016:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":297,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:7","nodeType":"VariableDeclaration","scope":331,"src":"2040:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:7"},"returnParameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":331,"src":"2077:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:7"},"scope":748,"src":"1994:290:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"2493:198:7","statements":[{"assignments":[343],"declarations":[{"constant":false,"id":343,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:7","nodeType":"VariableDeclaration","scope":370,"src":"2503:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":345,"initialValue":{"id":344,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"2526:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:7"},{"body":{"id":366,"nodeType":"Block","src":"2583:73:7","statements":[{"expression":{"id":364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":357,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2597:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":359,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2622:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":360,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2636:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":362,"indexExpression":{"id":361,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2642:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":358,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2612:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":365,"nodeType":"ExpressionStatement","src":"2597:48:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":350,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2560:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":351,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2564:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:7","memberName":"length","nodeType":"MemberAccess","src":"2564:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":367,"initializationExpression":{"assignments":[347],"declarations":[{"constant":false,"id":347,"mutability":"mutable","name":"i","nameLocation":"2553:1:7","nodeType":"VariableDeclaration","scope":367,"src":"2545:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":349,"initialValue":{"hexValue":"30","id":348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:7","subExpression":{"id":354,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2578:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":356,"nodeType":"ExpressionStatement","src":"2578:3:7"},"nodeType":"ForStatement","src":"2540:116:7"},{"expression":{"id":368,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2672:12:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":341,"id":369,"nodeType":"Return","src":"2665:19:7"}]},"documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"2290:96:7","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:7","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"proof","nameLocation":"2440:5:7","nodeType":"VariableDeclaration","scope":371,"src":"2421:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":333,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":334,"nodeType":"ArrayTypeName","src":"2421:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:7","nodeType":"VariableDeclaration","scope":371,"src":"2447:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:7"},"returnParameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":371,"src":"2484:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:7"},"scope":748,"src":"2391:300:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":396,"nodeType":"Block","src":"3234:76:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":389,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"3269:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":390,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"3276:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":391,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3288:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":388,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"3251:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":393,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"3299:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":387,"id":395,"nodeType":"Return","src":"3244:59:7"}]},"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"2697:350:7","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":397,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:7","nodeType":"FunctionDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"proof","nameLocation":"3104:5:7","nodeType":"VariableDeclaration","scope":397,"src":"3087:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":374,"nodeType":"ArrayTypeName","src":"3087:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:7","nodeType":"VariableDeclaration","scope":397,"src":"3119:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":376,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":377,"nodeType":"ArrayTypeName","src":"3119:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"root","nameLocation":"3161:4:7","nodeType":"VariableDeclaration","scope":397,"src":"3153:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:7","nodeType":"VariableDeclaration","scope":397,"src":"3175:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":382,"nodeType":"ArrayTypeName","src":"3175:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:7"},"returnParameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":397,"src":"3228:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":385,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:7"},"scope":748,"src":"3052:258:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":422,"nodeType":"Block","src":"3715:84:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":415,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"3758:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":416,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"3765:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":417,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"3777:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":414,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3732:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":419,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"3788:4:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":413,"id":421,"nodeType":"Return","src":"3725:67:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"3316:200:7","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":423,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:7","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"proof","nameLocation":"3583:5:7","nodeType":"VariableDeclaration","scope":423,"src":"3564:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":400,"nodeType":"ArrayTypeName","src":"3564:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:7","nodeType":"VariableDeclaration","scope":423,"src":"3598:26:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":403,"nodeType":"ArrayTypeName","src":"3598:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":406,"mutability":"mutable","name":"root","nameLocation":"3642:4:7","nodeType":"VariableDeclaration","scope":423,"src":"3634:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":405,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:7","nodeType":"VariableDeclaration","scope":423,"src":"3656:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":408,"nodeType":"ArrayTypeName","src":"3656:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:7"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":423,"src":"3709:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":411,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:7"},"scope":748,"src":"3521:278:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":567,"nodeType":"Block","src":"4753:1860:7","statements":[{"assignments":[439],"declarations":[{"constant":false,"id":439,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:7","nodeType":"VariableDeclaration","scope":567,"src":"5136:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":442,"initialValue":{"expression":{"id":440,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"5156:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:7","memberName":"length","nodeType":"MemberAccess","src":"5156:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:7"},{"assignments":[444],"declarations":[{"constant":false,"id":444,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:7","nodeType":"VariableDeclaration","scope":567,"src":"5179:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":447,"initialValue":{"expression":{"id":445,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"5201:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:7","memberName":"length","nodeType":"MemberAccess","src":"5201:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"5270:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":450,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"5282:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:7","memberName":"length","nodeType":"MemberAccess","src":"5282:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":455,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"5302:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":448,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":459,"nodeType":"ExpressionStatement","src":"5262:87:7"},{"assignments":[464],"declarations":[{"constant":false,"id":464,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:7","nodeType":"VariableDeclaration","scope":567,"src":"5594:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":463,"nodeType":"ArrayTypeName","src":"5594:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":470,"initialValue":{"arguments":[{"id":468,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"5634:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":466,"nodeType":"ArrayTypeName","src":"5624:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:7"},{"assignments":[472],"declarations":[{"constant":false,"id":472,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:7","nodeType":"VariableDeclaration","scope":567,"src":"5656:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":471,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":474,"initialValue":{"hexValue":"30","id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:7"},{"assignments":[476],"declarations":[{"constant":false,"id":476,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:7","nodeType":"VariableDeclaration","scope":567,"src":"5685:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":475,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":478,"initialValue":{"hexValue":"30","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:7"},{"assignments":[480],"declarations":[{"constant":false,"id":480,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:7","nodeType":"VariableDeclaration","scope":567,"src":"5714:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":482,"initialValue":{"hexValue":"30","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:7"},{"body":{"id":540,"nodeType":"Block","src":"6151:258:7","statements":[{"assignments":[494],"declarations":[{"constant":false,"id":494,"mutability":"mutable","name":"a","nameLocation":"6173:1:7","nodeType":"VariableDeclaration","scope":540,"src":"6165:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":507,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":495,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6177:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":496,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6187:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":502,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6219:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":505,"indexExpression":{"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:7","subExpression":{"id":503,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"6226:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:7","trueExpression":{"baseExpression":{"id":498,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6199:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":501,"indexExpression":{"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:7","subExpression":{"id":499,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6206:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:7"},{"assignments":[509],"declarations":[{"constant":false,"id":509,"mutability":"mutable","name":"b","nameLocation":"6258:1:7","nodeType":"VariableDeclaration","scope":540,"src":"6250:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":530,"initialValue":{"condition":{"baseExpression":{"id":510,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"6262:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":512,"indexExpression":{"id":511,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6273:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":525,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"6340:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":528,"indexExpression":{"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:7","subExpression":{"id":526,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6346:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:7","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":513,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6278:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":514,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6288:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":520,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6320:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":523,"indexExpression":{"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:7","subExpression":{"id":521,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"6327:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:7","trueExpression":{"baseExpression":{"id":516,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6300:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":519,"indexExpression":{"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:7","subExpression":{"id":517,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"6307:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:7"},{"expression":{"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":531,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6371:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":533,"indexExpression":{"id":532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6378:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":535,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"6393:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":536,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"6396:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":534,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"6383:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":539,"nodeType":"ExpressionStatement","src":"6371:27:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":487,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6129:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":488,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"6133:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":541,"initializationExpression":{"assignments":[484],"declarations":[{"constant":false,"id":484,"mutability":"mutable","name":"i","nameLocation":"6122:1:7","nodeType":"VariableDeclaration","scope":541,"src":"6114:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":483,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":486,"initialValue":{"hexValue":"30","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:7","subExpression":{"id":490,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"6146:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":492,"nodeType":"ExpressionStatement","src":"6146:3:7"},"nodeType":"ForStatement","src":"6109:300:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":542,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"6423:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":552,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6505:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":564,"nodeType":"Block","src":"6567:40:7","statements":[{"expression":{"baseExpression":{"id":560,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"6588:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":562,"indexExpression":{"hexValue":"30","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":437,"id":563,"nodeType":"Return","src":"6581:15:7"}]},"id":565,"nodeType":"IfStatement","src":"6501:106:7","trueBody":{"id":559,"nodeType":"Block","src":"6520:41:7","statements":[{"expression":{"baseExpression":{"id":555,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6541:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":557,"indexExpression":{"hexValue":"30","id":556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":437,"id":558,"nodeType":"Return","src":"6534:16:7"}]}},"id":566,"nodeType":"IfStatement","src":"6419:188:7","trueBody":{"id":551,"nodeType":"Block","src":"6440:55:7","statements":[{"expression":{"baseExpression":{"id":545,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"6461:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":549,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":546,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"6468:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":437,"id":550,"nodeType":"Return","src":"6454:30:7"}]}}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"3805:768:7","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":568,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:7","nodeType":"FunctionDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"proof","nameLocation":"4631:5:7","nodeType":"VariableDeclaration","scope":568,"src":"4614:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":426,"nodeType":"ArrayTypeName","src":"4614:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:7","nodeType":"VariableDeclaration","scope":568,"src":"4646:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":428,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":429,"nodeType":"ArrayTypeName","src":"4646:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:7","nodeType":"VariableDeclaration","scope":568,"src":"4680:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":432,"nodeType":"ArrayTypeName","src":"4680:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:7"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:7","nodeType":"VariableDeclaration","scope":568,"src":"4733:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:7"},"scope":748,"src":"4578:2035:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":712,"nodeType":"Block","src":"7013:1860:7","statements":[{"assignments":[584],"declarations":[{"constant":false,"id":584,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:7","nodeType":"VariableDeclaration","scope":712,"src":"7396:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":587,"initialValue":{"expression":{"id":585,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"7416:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:7","memberName":"length","nodeType":"MemberAccess","src":"7416:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:7"},{"assignments":[589],"declarations":[{"constant":false,"id":589,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:7","nodeType":"VariableDeclaration","scope":712,"src":"7439:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":592,"initialValue":{"expression":{"id":590,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"7461:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:7","memberName":"length","nodeType":"MemberAccess","src":"7461:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":594,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"7530:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":595,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"7542:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:7","memberName":"length","nodeType":"MemberAccess","src":"7542:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":600,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"7562:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":593,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":604,"nodeType":"ExpressionStatement","src":"7522:87:7"},{"assignments":[609],"declarations":[{"constant":false,"id":609,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:7","nodeType":"VariableDeclaration","scope":712,"src":"7854:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":608,"nodeType":"ArrayTypeName","src":"7854:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":615,"initialValue":{"arguments":[{"id":613,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"7894:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":611,"nodeType":"ArrayTypeName","src":"7884:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:7"},{"assignments":[617],"declarations":[{"constant":false,"id":617,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:7","nodeType":"VariableDeclaration","scope":712,"src":"7916:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":619,"initialValue":{"hexValue":"30","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:7"},{"assignments":[621],"declarations":[{"constant":false,"id":621,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:7","nodeType":"VariableDeclaration","scope":712,"src":"7945:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":620,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":623,"initialValue":{"hexValue":"30","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:7"},{"assignments":[625],"declarations":[{"constant":false,"id":625,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:7","nodeType":"VariableDeclaration","scope":712,"src":"7974:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":624,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":627,"initialValue":{"hexValue":"30","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:7"},{"body":{"id":685,"nodeType":"Block","src":"8411:258:7","statements":[{"assignments":[639],"declarations":[{"constant":false,"id":639,"mutability":"mutable","name":"a","nameLocation":"8433:1:7","nodeType":"VariableDeclaration","scope":685,"src":"8425:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":638,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":652,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":640,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8437:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":641,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"8447:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":647,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8479:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":650,"indexExpression":{"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:7","subExpression":{"id":648,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"8486:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:7","trueExpression":{"baseExpression":{"id":643,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"8459:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":646,"indexExpression":{"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:7","subExpression":{"id":644,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8466:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:7"},{"assignments":[654],"declarations":[{"constant":false,"id":654,"mutability":"mutable","name":"b","nameLocation":"8518:1:7","nodeType":"VariableDeclaration","scope":685,"src":"8510:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":675,"initialValue":{"condition":{"baseExpression":{"id":655,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"8522:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":657,"indexExpression":{"id":656,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8533:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":670,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8600:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":673,"indexExpression":{"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:7","subExpression":{"id":671,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8606:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:7","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":658,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8538:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":659,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"8548:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":665,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8580:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":668,"indexExpression":{"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:7","subExpression":{"id":666,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"8587:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:7","trueExpression":{"baseExpression":{"id":661,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"8560:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":664,"indexExpression":{"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:7","subExpression":{"id":662,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"8567:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:7"},{"expression":{"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":676,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8631:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":678,"indexExpression":{"id":677,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8638:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":680,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"8653:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":681,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"8656:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":679,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8643:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":684,"nodeType":"ExpressionStatement","src":"8631:27:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":632,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8389:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":633,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8393:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":686,"initializationExpression":{"assignments":[629],"declarations":[{"constant":false,"id":629,"mutability":"mutable","name":"i","nameLocation":"8382:1:7","nodeType":"VariableDeclaration","scope":686,"src":"8374:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":631,"initialValue":{"hexValue":"30","id":630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:7","subExpression":{"id":635,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8406:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":637,"nodeType":"ExpressionStatement","src":"8406:3:7"},"nodeType":"ForStatement","src":"8369:300:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":687,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8683:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":697,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"8765:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":709,"nodeType":"Block","src":"8827:40:7","statements":[{"expression":{"baseExpression":{"id":705,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"8848:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":707,"indexExpression":{"hexValue":"30","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":582,"id":708,"nodeType":"Return","src":"8841:15:7"}]},"id":710,"nodeType":"IfStatement","src":"8761:106:7","trueBody":{"id":704,"nodeType":"Block","src":"8780:41:7","statements":[{"expression":{"baseExpression":{"id":700,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"8801:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":702,"indexExpression":{"hexValue":"30","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":582,"id":703,"nodeType":"Return","src":"8794:16:7"}]}},"id":711,"nodeType":"IfStatement","src":"8679:188:7","trueBody":{"id":696,"nodeType":"Block","src":"8700:55:7","statements":[{"expression":{"baseExpression":{"id":690,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"8721:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":694,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":691,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8728:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":582,"id":695,"nodeType":"Return","src":"8714:30:7"}]}}]},"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"6619:202:7","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":713,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:7","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"proof","nameLocation":"6889:5:7","nodeType":"VariableDeclaration","scope":713,"src":"6870:24:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":570,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":571,"nodeType":"ArrayTypeName","src":"6870:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:7","nodeType":"VariableDeclaration","scope":713,"src":"6904:26:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":574,"nodeType":"ArrayTypeName","src":"6904:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:7","nodeType":"VariableDeclaration","scope":713,"src":"6940:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":577,"nodeType":"ArrayTypeName","src":"6940:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:7"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:7","nodeType":"VariableDeclaration","scope":713,"src":"6993:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:7"},"scope":748,"src":"6826:2047:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":735,"nodeType":"Block","src":"8951:75:7","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":722,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8968:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":723,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"8972:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":730,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"9014:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":731,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9017:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":729,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"8999:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:7","trueExpression":{"arguments":[{"id":726,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8991:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":727,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"8994:1:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":725,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"8976:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":721,"id":734,"nodeType":"Return","src":"8961:58:7"}]},"id":736,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:7","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"a","nameLocation":"8906:1:7","nodeType":"VariableDeclaration","scope":736,"src":"8898:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":714,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":717,"mutability":"mutable","name":"b","nameLocation":"8917:1:7","nodeType":"VariableDeclaration","scope":736,"src":"8909:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":716,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:7"},"returnParameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":736,"src":"8942:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:7"},"scope":748,"src":"8879:147:7","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":746,"nodeType":"Block","src":"9115:178:7","statements":[{"AST":{"nativeSrc":"9177:110:7","nodeType":"YulBlock","src":"9177:110:7","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:7","nodeType":"YulLiteral","src":"9198:4:7","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:7","nodeType":"YulIdentifier","src":"9204:1:7"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:7","nodeType":"YulIdentifier","src":"9191:6:7"},"nativeSrc":"9191:15:7","nodeType":"YulFunctionCall","src":"9191:15:7"},"nativeSrc":"9191:15:7","nodeType":"YulExpressionStatement","src":"9191:15:7"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:7","nodeType":"YulLiteral","src":"9226:4:7","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:7","nodeType":"YulIdentifier","src":"9232:1:7"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:7","nodeType":"YulIdentifier","src":"9219:6:7"},"nativeSrc":"9219:15:7","nodeType":"YulFunctionCall","src":"9219:15:7"},"nativeSrc":"9219:15:7","nodeType":"YulExpressionStatement","src":"9219:15:7"},{"nativeSrc":"9247:30:7","nodeType":"YulAssignment","src":"9247:30:7","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:7","nodeType":"YulLiteral","src":"9266:4:7","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:7","nodeType":"YulLiteral","src":"9272:4:7","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:7","nodeType":"YulIdentifier","src":"9256:9:7"},"nativeSrc":"9256:21:7","nodeType":"YulFunctionCall","src":"9256:21:7"},"variableNames":[{"name":"value","nativeSrc":"9247:5:7","nodeType":"YulIdentifier","src":"9247:5:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":738,"isOffset":false,"isSlot":false,"src":"9204:1:7","valueSize":1},{"declaration":740,"isOffset":false,"isSlot":false,"src":"9232:1:7","valueSize":1},{"declaration":743,"isOffset":false,"isSlot":false,"src":"9247:5:7","valueSize":1}],"id":745,"nodeType":"InlineAssembly","src":"9168:119:7"}]},"id":747,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:7","nodeType":"FunctionDefinition","parameters":{"id":741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"a","nameLocation":"9064:1:7","nodeType":"VariableDeclaration","scope":747,"src":"9056:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":737,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":740,"mutability":"mutable","name":"b","nameLocation":"9075:1:7","nodeType":"VariableDeclaration","scope":747,"src":"9067:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":739,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:7"},"returnParameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"value","nameLocation":"9108:5:7","nodeType":"VariableDeclaration","scope":747,"src":"9100:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:7"},"scope":748,"src":"9032:261:7","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":749,"src":"802:8493:7","usedErrors":[],"usedEvents":[]}],"src":"118:9178:7"},"id":7},"contracts/burn/OrbsBurnPool.sol":{"ast":{"absolutePath":"contracts/burn/OrbsBurnPool.sol","exportedSymbols":{"ERC1155TokenReceiver":[182],"IERC1155Burnable":[208],"MerkleProof":[748],"OrbsBurnPool":[1560]},"id":1561,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":750,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","id":752,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1561,"sourceUnit":183,"src":"57:114:8","symbolAliases":[{"foreign":{"id":751,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"65:20:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":754,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1561,"sourceUnit":209,"src":"172:117:8","symbolAliases":[{"foreign":{"id":753,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"180:16:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1561,"sourceUnit":749,"src":"290:87:8","symbolAliases":[{"foreign":{"id":755,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"298:11:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":758,"name":"ERC1155TokenReceiver","nameLocations":["554:20:8"],"nodeType":"IdentifierPath","referencedDeclaration":182,"src":"554:20:8"},"id":759,"nodeType":"InheritanceSpecifier","src":"554:20:8"}],"canonicalName":"OrbsBurnPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"379:149:8","text":" @title OrbsBurnPool Contract\n @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned."},"fullyImplemented":true,"id":1560,"linearizedBaseContracts":[1560,182,29,46,246],"name":"OrbsBurnPool","nameLocation":"538:12:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":763,"libraryName":{"id":760,"name":"MerkleProof","nameLocations":["587:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"587:11:8"},"nodeType":"UsingForDirective","src":"581:32:8","typeName":{"baseType":{"id":761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"603:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":762,"nodeType":"ArrayTypeName","src":"603:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":true,"documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"619:47:8","text":"@notice The denominator for the multiplier."},"id":767,"mutability":"constant","name":"_DENOMINATOR","nameLocation":"697:12:8","nodeType":"VariableDeclaration","scope":1560,"src":"671:47:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"671:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31305f303030","id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"712:6:8","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"visibility":"internal"},{"constant":true,"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"725:65:8","text":"@notice The token ID of RoC for setting the token multiplier."},"functionSelector":"1de0e40b","id":771,"mutability":"constant","name":"MISSING_ORB_TOKEN_ID","nameLocation":"819:20:8","nodeType":"VariableDeclaration","scope":1560,"src":"795:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"795:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"842:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"850:50:8","text":"@notice The token weights for calculating Ash."},"functionSelector":"0277640e","id":775,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_1","nameLocation":"929:19:8","nodeType":"VariableDeclaration","scope":1560,"src":"905:47:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"905:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"424ab4f7","id":778,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_2","nameLocation":"982:19:8","nodeType":"VariableDeclaration","scope":1560,"src":"958:47:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"958:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1004:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"aa918fd5","id":781,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_3","nameLocation":"1035:19:8","nodeType":"VariableDeclaration","scope":1560,"src":"1011:47:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1057:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"0455645a","id":784,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_4","nameLocation":"1088:19:8","nodeType":"VariableDeclaration","scope":1560,"src":"1064:47:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":782,"name":"uint256","nodeType":"ElementaryTypeName","src":"1064:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1110:1:8","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"public"},{"constant":true,"functionSelector":"f95d1016","id":787,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_5","nameLocation":"1141:19:8","nodeType":"VariableDeclaration","scope":1560,"src":"1117:47:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1163:1:8","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"visibility":"public"},{"constant":true,"functionSelector":"3838a201","id":790,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_6","nameLocation":"1194:19:8","nodeType":"VariableDeclaration","scope":1560,"src":"1170:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":788,"name":"uint256","nodeType":"ElementaryTypeName","src":"1170:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3235","id":789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1216:2:8","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"visibility":"public"},{"constant":true,"functionSelector":"c131754e","id":793,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_7","nameLocation":"1248:19:8","nodeType":"VariableDeclaration","scope":1560,"src":"1224:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"1224:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3136","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1270:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"visibility":"public"},{"constant":true,"documentation":{"id":794,"nodeType":"StructuredDocumentation","src":"1279:43:8","text":"@notice The Riddle Of Chaos multiplier."},"functionSelector":"55f5b0a8","id":797,"mutability":"constant","name":"ROC_MULTIPLIER","nameLocation":"1351:14:8","nodeType":"VariableDeclaration","scope":1560,"src":"1327:42:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1327:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1368:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"public"},{"constant":false,"documentation":{"id":798,"nodeType":"StructuredDocumentation","src":"1376:72:8","text":"@notice The IERC1155Burnable erc1155 contracts burn to generate ASH."},"functionSelector":"28a979cf","id":801,"mutability":"immutable","name":"ORB_OF_POWER","nameLocation":"1487:12:8","nodeType":"VariableDeclaration","scope":1560,"src":"1453:46:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":800,"nodeType":"UserDefinedTypeName","pathNode":{"id":799,"name":"IERC1155Burnable","nameLocations":["1453:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"1453:16:8"},"referencedDeclaration":208,"src":"1453:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"1506:75:8","text":"@notice The IERC1155 erc1155 contract for setting the token multiplier."},"functionSelector":"cd18a34f","id":805,"mutability":"immutable","name":"MISSING_ORB","nameLocation":"1620:11:8","nodeType":"VariableDeclaration","scope":1560,"src":"1586:45:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":804,"nodeType":"UserDefinedTypeName","pathNode":{"id":803,"name":"IERC1155Burnable","nameLocations":["1586:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"1586:16:8"},"referencedDeclaration":208,"src":"1586:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"1638:45:8","text":"@notice The initial time of the contract."},"functionSelector":"491bde66","id":808,"mutability":"immutable","name":"INITIAL_TIME","nameLocation":"1713:12:8","nodeType":"VariableDeclaration","scope":1560,"src":"1688:37:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"1688:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"1732:39:8","text":"@notice The duration of each cycle."},"functionSelector":"cd421fbf","id":811,"mutability":"immutable","name":"CYCLE_DURATION","nameLocation":"1801:14:8","nodeType":"VariableDeclaration","scope":1560,"src":"1776:39:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":810,"name":"uint256","nodeType":"ElementaryTypeName","src":"1776:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"1822:30:8","text":"@notice The maximum cycle."},"functionSelector":"043063bc","id":814,"mutability":"immutable","name":"MAX_CYCLE","nameLocation":"1882:9:8","nodeType":"VariableDeclaration","scope":1560,"src":"1857:34:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"1857:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"1898:61:8","text":"@notice The Merkle root for setting the puzzleMultiplier."},"functionSelector":"51e75e8b","id":817,"mutability":"immutable","name":"MERKLE_ROOT","nameLocation":"1989:11:8","nodeType":"VariableDeclaration","scope":1560,"src":"1964:36:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":816,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1964:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":818,"nodeType":"StructuredDocumentation","src":"2007:60:8","text":"@notice The total amount of ASH generated in each cycle."},"functionSelector":"ab504e73","id":822,"mutability":"mutable","name":"totalAshPerCycle","nameLocation":"2107:16:8","nodeType":"VariableDeclaration","scope":1560,"src":"2072:51:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":821,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"2080:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2072:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"2091:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"2130:73:8","text":"@notice The total amount of ASH generated by each user in each cycle."},"functionSelector":"4dac1c2b","id":829,"mutability":"mutable","name":"userAshPerCycle","nameLocation":"2263:15:8","nodeType":"VariableDeclaration","scope":1560,"src":"2208:70:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":828,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2216:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2208:47:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":827,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"2235:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2227:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":826,"name":"uint256","nodeType":"ElementaryTypeName","src":"2246:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"2285:135:8","text":"@notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"functionSelector":"12828b7f","id":834,"mutability":"mutable","name":"orbMultipliers","nameLocation":"2460:14:8","nodeType":"VariableDeclaration","scope":1560,"src":"2425:49:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":833,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"2433:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2425:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2444:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"2481:49:8","text":"@notice Event emitted when ASH are generated."},"eventSelector":"6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b","id":853,"name":"GenerateAsh","nameLocation":"2541:11:8","nodeType":"EventDefinition","parameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"2578:6:8","nodeType":"VariableDeclaration","scope":853,"src":"2562:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"2562:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":839,"indexed":true,"mutability":"mutable","name":"cycle","nameLocation":"2610:5:8","nodeType":"VariableDeclaration","scope":853,"src":"2594:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"2594:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":842,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"2635:3:8","nodeType":"VariableDeclaration","scope":853,"src":"2625:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"2625:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":841,"nodeType":"ArrayTypeName","src":"2625:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":845,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"2658:6:8","nodeType":"VariableDeclaration","scope":853,"src":"2648:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2648:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":844,"nodeType":"ArrayTypeName","src":"2648:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":847,"indexed":false,"mutability":"mutable","name":"ash","nameLocation":"2682:3:8","nodeType":"VariableDeclaration","scope":853,"src":"2674:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2674:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":849,"indexed":false,"mutability":"mutable","name":"totalAsh","nameLocation":"2703:8:8","nodeType":"VariableDeclaration","scope":853,"src":"2695:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":851,"indexed":false,"mutability":"mutable","name":"orbMultiplier","nameLocation":"2729:13:8","nodeType":"VariableDeclaration","scope":853,"src":"2721:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2552:196:8"},"src":"2535:214:8"},{"anonymous":false,"documentation":{"id":854,"nodeType":"StructuredDocumentation","src":"2755:62:8","text":"@notice Event emitted when the multiplier info is updated."},"eventSelector":"528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433","id":862,"name":"UpdateOrbMultiplier","nameLocation":"2828:19:8","nodeType":"EventDefinition","parameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2864:9:8","nodeType":"VariableDeclaration","scope":862,"src":"2848:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":855,"name":"address","nodeType":"ElementaryTypeName","src":"2848:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":858,"indexed":false,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"2883:16:8","nodeType":"VariableDeclaration","scope":862,"src":"2875:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":857,"name":"uint256","nodeType":"ElementaryTypeName","src":"2875:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":860,"indexed":false,"mutability":"mutable","name":"updatedOrbMultiplier","nameLocation":"2909:20:8","nodeType":"VariableDeclaration","scope":862,"src":"2901:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":859,"name":"uint256","nodeType":"ElementaryTypeName","src":"2901:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2847:83:8"},"src":"2822:109:8"},{"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"2937:54:8","text":"@notice Error thrown when the token ID is invalid."},"errorSelector":"1912ea51","id":869,"name":"InvalidTokenId","nameLocation":"3002:14:8","nodeType":"ErrorDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"token","nameLocation":"3025:5:8","nodeType":"VariableDeclaration","scope":869,"src":"3017:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"3017:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"tokenId","nameLocation":"3040:7:8","nodeType":"VariableDeclaration","scope":869,"src":"3032:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":866,"name":"uint256","nodeType":"ElementaryTypeName","src":"3032:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3016:32:8"},"src":"2996:53:8"},{"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"3055:56:8","text":"@notice Error thrown when the token is not approved."},"errorSelector":"73306803","id":874,"name":"InvalidTokenAddress","nameLocation":"3122:19:8","nodeType":"ErrorDefinition","parameters":{"id":873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"token","nameLocation":"3150:5:8","nodeType":"VariableDeclaration","scope":874,"src":"3142:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":871,"name":"address","nodeType":"ElementaryTypeName","src":"3142:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3141:15:8"},"src":"3116:41:8"},{"documentation":{"id":875,"nodeType":"StructuredDocumentation","src":"3163:58:8","text":"@notice Error thrown when the token amount is invalid."},"errorSelector":"e1f366e9","id":883,"name":"InvalidTokenValue","nameLocation":"3232:17:8","nodeType":"ErrorDefinition","parameters":{"id":882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"token","nameLocation":"3258:5:8","nodeType":"VariableDeclaration","scope":883,"src":"3250:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":876,"name":"address","nodeType":"ElementaryTypeName","src":"3250:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"tokenId","nameLocation":"3273:7:8","nodeType":"VariableDeclaration","scope":883,"src":"3265:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":878,"name":"uint256","nodeType":"ElementaryTypeName","src":"3265:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":881,"mutability":"mutable","name":"value","nameLocation":"3290:5:8","nodeType":"VariableDeclaration","scope":883,"src":"3282:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":880,"name":"uint256","nodeType":"ElementaryTypeName","src":"3282:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3249:47:8"},"src":"3226:71:8"},{"documentation":{"id":884,"nodeType":"StructuredDocumentation","src":"3303:51:8","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"764e560f","id":888,"name":"InvalidCycle","nameLocation":"3365:12:8","nodeType":"ErrorDefinition","parameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"mutability":"mutable","name":"cycle","nameLocation":"3386:5:8","nodeType":"VariableDeclaration","scope":888,"src":"3378:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"3378:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3377:15:8"},"src":"3359:34:8"},{"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"3399:81:8","text":"@notice Error thrown when the wallet already has the ROC multiplier been set."},"errorSelector":"383b5493","id":893,"name":"AlreadySetROCMultiplier","nameLocation":"3491:23:8","nodeType":"ErrorDefinition","parameters":{"id":892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"wallet","nameLocation":"3523:6:8","nodeType":"VariableDeclaration","scope":893,"src":"3515:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"3515:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3514:16:8"},"src":"3485:46:8"},{"documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"3537:51:8","text":"@notice Error thrown when the proof is invalid."},"errorSelector":"adbd6512","id":900,"name":"InvalidProof","nameLocation":"3599:12:8","nodeType":"ErrorDefinition","parameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"recipient","nameLocation":"3620:9:8","nodeType":"VariableDeclaration","scope":900,"src":"3612:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":895,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":898,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"3639:29:8","nodeType":"VariableDeclaration","scope":900,"src":"3631:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"3631:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3611:58:8"},"src":"3593:77:8"},{"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"3676:60:8","text":"@notice Error thrown when the cycle duration is invalid."},"errorSelector":"b870efbd","id":903,"name":"ZeroCycleDuration","nameLocation":"3747:17:8","nodeType":"ErrorDefinition","parameters":{"id":902,"nodeType":"ParameterList","parameters":[],"src":"3764:2:8"},"src":"3741:26:8"},{"documentation":{"id":904,"nodeType":"StructuredDocumentation","src":"3773:51:8","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"fcbcab36","id":906,"name":"ZeroMaxCycle","nameLocation":"3835:12:8","nodeType":"ErrorDefinition","parameters":{"id":905,"nodeType":"ParameterList","parameters":[],"src":"3847:2:8"},"src":"3829:21:8"},{"body":{"id":964,"nodeType":"Block","src":"4661:376:8","statements":[{"expression":{"id":926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":924,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"4671:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":925,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"4686:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4671:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":927,"nodeType":"ExpressionStatement","src":"4671:26:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":928,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"4712:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4729:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4712:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":935,"nodeType":"IfStatement","src":"4708:75:8","trueBody":{"id":934,"nodeType":"Block","src":"4732:51:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":931,"name":"ZeroCycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"4753:17:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4753:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"RevertStatement","src":"4746:26:8"}]}},{"expression":{"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":936,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"4792:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":937,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"4809:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4792:30:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":939,"nodeType":"ExpressionStatement","src":"4792:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":940,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"4837:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4849:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4837:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":947,"nodeType":"IfStatement","src":"4833:65:8","trueBody":{"id":946,"nodeType":"Block","src":"4852:46:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":943,"name":"ZeroMaxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"4873:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":945,"nodeType":"RevertStatement","src":"4866:21:8"}]}},{"expression":{"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":948,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"4907:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":949,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"4919:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4907:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":951,"nodeType":"ExpressionStatement","src":"4907:20:8"},{"expression":{"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":952,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"4937:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":953,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"4951:10:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4937:24:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":955,"nodeType":"ExpressionStatement","src":"4937:24:8"},{"expression":{"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":956,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"4971:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":957,"name":"orbOfPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"4986:10:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"src":"4971:25:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":959,"nodeType":"ExpressionStatement","src":"4971:25:8"},{"expression":{"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":960,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"5006:11:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":961,"name":"missingOrb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"5020:10:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"src":"5006:24:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":963,"nodeType":"ExpressionStatement","src":"5006:24:8"}]},"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"3856:594:8","text":" @notice Constructor for the OrbsBurnPool contract.\n @param initialTime The initial time of the contract.\n @param cycleDuration The duration of each cycle.\n @param maxCycle The maximum cycle.\n @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n @dev Throws if the cycle duration is zero.\n @dev Throws if the max cycle is zero."},"id":965,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"initialTime","nameLocation":"4484:11:8","nodeType":"VariableDeclaration","scope":965,"src":"4476:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":908,"name":"uint256","nodeType":"ElementaryTypeName","src":"4476:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"cycleDuration","nameLocation":"4513:13:8","nodeType":"VariableDeclaration","scope":965,"src":"4505:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"4505:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"maxCycle","nameLocation":"4544:8:8","nodeType":"VariableDeclaration","scope":965,"src":"4536:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"4536:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"merkleRoot","nameLocation":"4570:10:8","nodeType":"VariableDeclaration","scope":965,"src":"4562:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":914,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4562:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":918,"mutability":"mutable","name":"orbOfPower","nameLocation":"4607:10:8","nodeType":"VariableDeclaration","scope":965,"src":"4590:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":917,"nodeType":"UserDefinedTypeName","pathNode":{"id":916,"name":"IERC1155Burnable","nameLocations":["4590:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"4590:16:8"},"referencedDeclaration":208,"src":"4590:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":921,"mutability":"mutable","name":"missingOrb","nameLocation":"4644:10:8","nodeType":"VariableDeclaration","scope":965,"src":"4627:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"},"typeName":{"id":920,"nodeType":"UserDefinedTypeName","pathNode":{"id":919,"name":"IERC1155Burnable","nameLocations":["4627:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":208,"src":"4627:16:8"},"referencedDeclaration":208,"src":"4627:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"visibility":"internal"}],"src":"4466:194:8"},"returnParameters":{"id":923,"nodeType":"ParameterList","parameters":[],"src":"4661:0:8"},"scope":1560,"src":"4455:582:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":979,"nodeType":"Block","src":"5191:73:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":971,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5209:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5215:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"5209:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":973,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"5227:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5209:30:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":975,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5208:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":976,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"5243:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5208:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":970,"id":978,"nodeType":"Return","src":"5201:56:8"}]},"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"5043:89:8","text":" @notice Get the current cycle.\n @return cycle The current cycle."},"functionSelector":"bab2f552","id":980,"implemented":true,"kind":"function","modifiers":[],"name":"currentCycle","nameLocation":"5146:12:8","nodeType":"FunctionDefinition","parameters":{"id":967,"nodeType":"ParameterList","parameters":[],"src":"5158:2:8"},"returnParameters":{"id":970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":980,"src":"5182:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":968,"name":"uint256","nodeType":"ElementaryTypeName","src":"5182:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5181:9:8"},"scope":1560,"src":"5137:127:8","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[227],"body":{"id":1165,"nodeType":"Block","src":"6083:1497:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":997,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6097:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6101:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6097:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1001,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"6119:11:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}],"id":1000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:8","typeDescriptions":{}}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6097:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1010,"nodeType":"IfStatement","src":"6093:103:8","trueBody":{"id":1009,"nodeType":"Block","src":"6133:63:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1005,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6174:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6178:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6174:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1004,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"6154:19:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6154:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1008,"nodeType":"RevertStatement","src":"6147:38:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1011,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"6209:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1012,"name":"MISSING_ORB_TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"6215:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6209:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1021,"nodeType":"IfStatement","src":"6205:94:8","trueBody":{"id":1020,"nodeType":"Block","src":"6237:62:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1015,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6273:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6277:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6273:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1017,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"6285:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1014,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"6258:14:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6258:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1019,"nodeType":"RevertStatement","src":"6251:37:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"6313:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":1023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6322:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6313:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1033,"nodeType":"IfStatement","src":"6309:88:8","trueBody":{"id":1032,"nodeType":"Block","src":"6325:72:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1026,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6364:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6368:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6364:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1028,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"6376:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1029,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"6380:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1025,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"6346:17:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1031,"nodeType":"RevertStatement","src":"6339:47:8"}]}},{"assignments":[1035],"declarations":[{"constant":false,"id":1035,"mutability":"mutable","name":"cycle","nameLocation":"6415:5:8","nodeType":"VariableDeclaration","scope":1165,"src":"6407:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"6407:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1038,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1036,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"6423:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6407:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"6451:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1040,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"6459:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6451:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1047,"nodeType":"IfStatement","src":"6447:74:8","trueBody":{"id":1046,"nodeType":"Block","src":"6470:51:8","statements":[{"errorCall":{"arguments":[{"id":1043,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"6504:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1042,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"6491:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6491:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1045,"nodeType":"RevertStatement","src":"6484:26:8"}]}},{"assignments":[1049],"declarations":[{"constant":false,"id":1049,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"6539:16:8","nodeType":"VariableDeclaration","scope":1165,"src":"6531:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1048,"name":"uint256","nodeType":"ElementaryTypeName","src":"6531:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1053,"initialValue":{"baseExpression":{"id":1050,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"6558:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1052,"indexExpression":{"id":1051,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"6573:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6558:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6531:47:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1056,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"6600:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6592:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1054,"name":"uint128","nodeType":"ElementaryTypeName","src":"6592:7:8","typeDescriptions":{}}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6592:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6620:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6592:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1065,"nodeType":"IfStatement","src":"6588:96:8","trueBody":{"id":1064,"nodeType":"Block","src":"6623:61:8","statements":[{"errorCall":{"arguments":[{"id":1061,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"6668:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1060,"name":"AlreadySetROCMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"6644:23:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6644:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1063,"nodeType":"RevertStatement","src":"6637:36:8"}]}},{"expression":{"arguments":[{"arguments":[{"id":1073,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6740:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1560","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$1560","typeString":"contract OrbsBurnPool"}],"id":1072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6732:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1071,"name":"address","nodeType":"ElementaryTypeName","src":"6732:7:8","typeDescriptions":{}}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6732:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1075,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"6747:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"6751:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":1067,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6711:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6715:6:8","memberName":"sender","nodeType":"MemberAccess","src":"6711:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1066,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"6694:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$208_$","typeString":"type(contract IERC1155Burnable)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6694:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6723:8:8","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":195,"src":"6694:37:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) external"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6694:63:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1078,"nodeType":"ExpressionStatement","src":"6694:63:8"},{"assignments":[1080],"declarations":[{"constant":false,"id":1080,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"6776:16:8","nodeType":"VariableDeclaration","scope":1165,"src":"6768:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1079,"name":"uint256","nodeType":"ElementaryTypeName","src":"6768:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1084,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"6795:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1082,"name":"ROC_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"6814:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6795:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6768:60:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1085,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"6842:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6847:6:8","memberName":"length","nodeType":"MemberAccess","src":"6842:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6856:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6842:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1148,"nodeType":"IfStatement","src":"6838:562:8","trueBody":{"id":1147,"nodeType":"Block","src":"6859:541:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1089,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"6878:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6898:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"6878:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1092,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6877:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6906:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6877:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1146,"nodeType":"IfStatement","src":"6873:517:8","trueBody":{"id":1145,"nodeType":"Block","src":"6909:481:8","statements":[{"assignments":[1099,1101],"declarations":[{"constant":false,"id":1099,"mutability":"mutable","name":"proof","nameLocation":"6945:5:8","nodeType":"VariableDeclaration","scope":1145,"src":"6928:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1097,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6928:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1098,"nodeType":"ArrayTypeName","src":"6928:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"6960:29:8","nodeType":"VariableDeclaration","scope":1145,"src":"6952:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"6952:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1112,"initialValue":{"arguments":[{"id":1104,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"7004:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7011:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1105,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7011:7:8","typeDescriptions":{}}},"id":1107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"7011:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":1109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7022:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1108,"name":"uint256","nodeType":"ElementaryTypeName","src":"7022:7:8","typeDescriptions":{}}}],"id":1110,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7010:20:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":1102,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6993:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6997:6:8","memberName":"decode","nodeType":"MemberAccess","src":"6993:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6993:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"6927:104:8"},{"assignments":[1114],"declarations":[{"constant":false,"id":1114,"mutability":"mutable","name":"leaf","nameLocation":"7057:4:8","nodeType":"VariableDeclaration","scope":1145,"src":"7049:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7049:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1122,"initialValue":{"arguments":[{"arguments":[{"id":1118,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"7091:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1119,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"7097:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1116,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7074:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7078:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"7074:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7074:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1115,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7064:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7064:64:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7049:79:8"},{"condition":{"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7150:32:8","subExpression":{"arguments":[{"id":1125,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"7164:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1126,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"7177:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1123,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"7151:5:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7157:6:8","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":270,"src":"7151:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7151:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1135,"nodeType":"IfStatement","src":"7146:135:8","trueBody":{"id":1134,"nodeType":"Block","src":"7184:97:8","statements":[{"errorCall":{"arguments":[{"id":1130,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"7226:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1131,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"7232:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1129,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"7213:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7213:49:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1133,"nodeType":"RevertStatement","src":"7206:56:8"}]}},{"expression":{"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1136,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"7299:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1137,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"7319:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7352:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7319:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1140,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7318:38:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1141,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"7359:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7318:57:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7299:76:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1144,"nodeType":"ExpressionStatement","src":"7299:76:8"}]}}]}},{"expression":{"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1149,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7409:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1151,"indexExpression":{"id":1150,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"7424:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7409:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1152,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"7432:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7409:39:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1154,"nodeType":"ExpressionStatement","src":"7409:39:8"},{"eventCall":{"arguments":[{"id":1156,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"7483:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1157,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"7489:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1158,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"7507:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1155,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7463:19:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7463:61:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1160,"nodeType":"EmitStatement","src":"7458:66:8"},{"expression":{"expression":{"expression":{"id":1161,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7542:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1560","typeString":"contract OrbsBurnPool"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7547:17:8","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1166,"src":"7542:22:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7565:8:8","memberName":"selector","nodeType":"MemberAccess","src":"7542:31:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":996,"id":1164,"nodeType":"Return","src":"7535:38:8"}]},"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"5270:675:8","text":" @notice Set the Orb multiplier by burning the Missing Orb token 1\n @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n @param from The wallet address.\n @param id The token ID.\n @param value The token value.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid.\n @dev Throws if the token multiplier has already been set."},"functionSelector":"f23a6e61","id":1166,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"5959:17:8","nodeType":"FunctionDefinition","overrides":{"id":993,"nodeType":"OverrideSpecifier","overrides":[],"src":"6057:8:8"},"parameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1166,"src":"5977:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":982,"name":"address","nodeType":"ElementaryTypeName","src":"5977:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"from","nameLocation":"5994:4:8","nodeType":"VariableDeclaration","scope":1166,"src":"5986:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":984,"name":"address","nodeType":"ElementaryTypeName","src":"5986:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"id","nameLocation":"6008:2:8","nodeType":"VariableDeclaration","scope":1166,"src":"6000:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"6000:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":989,"mutability":"mutable","name":"value","nameLocation":"6020:5:8","nodeType":"VariableDeclaration","scope":1166,"src":"6012:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"6012:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":991,"mutability":"mutable","name":"data","nameLocation":"6042:4:8","nodeType":"VariableDeclaration","scope":1166,"src":"6027:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":990,"name":"bytes","nodeType":"ElementaryTypeName","src":"6027:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5976:71:8"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1166,"src":"6075:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":994,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6075:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"6074:8:8"},"scope":1560,"src":"5950:1630:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[245],"body":{"id":1558,"nodeType":"Block","src":"8322:3245:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1185,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8336:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8340:6:8","memberName":"sender","nodeType":"MemberAccess","src":"8336:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1189,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"8358:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}],"id":1188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8350:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1187,"name":"address","nodeType":"ElementaryTypeName","src":"8350:7:8","typeDescriptions":{}}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8350:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8336:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1198,"nodeType":"IfStatement","src":"8332:104:8","trueBody":{"id":1197,"nodeType":"Block","src":"8373:63:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1193,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8414:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8418:6:8","memberName":"sender","nodeType":"MemberAccess","src":"8414:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1192,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"8394:19:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8394:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1196,"nodeType":"RevertStatement","src":"8387:38:8"}]}},{"assignments":[1200],"declarations":[{"constant":false,"id":1200,"mutability":"mutable","name":"cycle","nameLocation":"8454:5:8","nodeType":"VariableDeclaration","scope":1558,"src":"8446:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1203,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1201,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"8462:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8462:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8446:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1204,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"8490:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1205,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"8498:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8490:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1212,"nodeType":"IfStatement","src":"8486:74:8","trueBody":{"id":1211,"nodeType":"Block","src":"8509:51:8","statements":[{"errorCall":{"arguments":[{"id":1208,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"8543:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1207,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"8530:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8530:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1210,"nodeType":"RevertStatement","src":"8523:26:8"}]}},{"expression":{"arguments":[{"arguments":[{"id":1220,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8621:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1560","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$1560","typeString":"contract OrbsBurnPool"}],"id":1219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8613:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"8613:7:8","typeDescriptions":{}}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8613:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1222,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"8628:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1223,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8633:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"expression":{"id":1214,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8587:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8591:6:8","memberName":"sender","nodeType":"MemberAccess","src":"8587:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1213,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"8570:16:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$208_$","typeString":"type(contract IERC1155Burnable)"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8570:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8599:13:8","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":207,"src":"8570:42:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8570:70:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"8570:70:8"},{"assignments":[1227],"declarations":[{"constant":false,"id":1227,"mutability":"mutable","name":"ashGenerated","nameLocation":"8659:12:8","nodeType":"VariableDeclaration","scope":1558,"src":"8651:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1226,"name":"uint256","nodeType":"ElementaryTypeName","src":"8651:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1229,"initialValue":{"hexValue":"30","id":1228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8674:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8651:24:8"},{"body":{"id":1382,"nodeType":"Block","src":"8726:966:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1241,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8744:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1243,"indexExpression":{"id":1242,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8751:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8744:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8757:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8744:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1258,"nodeType":"IfStatement","src":"8740:108:8","trueBody":{"id":1257,"nodeType":"Block","src":"8760:88:8","statements":[{"errorCall":{"arguments":[{"expression":{"id":1247,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8803:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8807:6:8","memberName":"sender","nodeType":"MemberAccess","src":"8803:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1249,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"8815:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1251,"indexExpression":{"id":1250,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8819:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8815:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1252,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8823:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1254,"indexExpression":{"id":1253,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8830:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8823:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1246,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"8785:17:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8785:48:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1256,"nodeType":"RevertStatement","src":"8778:55:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1259,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"8866:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1261,"indexExpression":{"id":1260,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8870:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8866:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8876:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8866:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1274,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"8971:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1276,"indexExpression":{"id":1275,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8975:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8971:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8981:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"8971:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1289,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"9076:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1291,"indexExpression":{"id":1290,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9080:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9076:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"33","id":1292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9086:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"9076:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1304,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"9181:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1306,"indexExpression":{"id":1305,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9185:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9181:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9191:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9181:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1319,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"9286:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1321,"indexExpression":{"id":1320,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9290:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9286:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9296:1:8","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"9286:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1334,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"9391:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1336,"indexExpression":{"id":1335,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9395:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9391:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"36","id":1337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9401:1:8","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"9391:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1349,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"9496:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1351,"indexExpression":{"id":1350,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9500:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9496:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"37","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9506:1:8","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"9496:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1374,"nodeType":"Block","src":"9597:85:8","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1367,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"9645:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$208","typeString":"contract IERC1155Burnable"}],"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9637:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"9637:7:8","typeDescriptions":{}}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9637:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1369,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"9660:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1371,"indexExpression":{"id":1370,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9664:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9660:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1364,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"9622:14:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9622:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1373,"nodeType":"RevertStatement","src":"9615:52:8"}]},"id":1375,"nodeType":"IfStatement","src":"9492:190:8","trueBody":{"id":1363,"nodeType":"Block","src":"9509:82:8","statements":[{"expression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1354,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9527:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1355,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9544:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1357,"indexExpression":{"id":1356,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9551:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9544:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1358,"name":"BURN_WEIGHT_TOKEN_7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"9556:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9544:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1360,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9543:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9527:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1362,"nodeType":"ExpressionStatement","src":"9527:49:8"}]}},"id":1376,"nodeType":"IfStatement","src":"9387:295:8","trueBody":{"id":1348,"nodeType":"Block","src":"9404:82:8","statements":[{"expression":{"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1339,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9422:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1340,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9439:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1342,"indexExpression":{"id":1341,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9446:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9439:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1343,"name":"BURN_WEIGHT_TOKEN_6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"9451:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9439:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1345,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9438:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9422:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1347,"nodeType":"ExpressionStatement","src":"9422:49:8"}]}},"id":1377,"nodeType":"IfStatement","src":"9282:400:8","trueBody":{"id":1333,"nodeType":"Block","src":"9299:82:8","statements":[{"expression":{"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1324,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9317:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1325,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9334:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1327,"indexExpression":{"id":1326,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9341:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9334:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1328,"name":"BURN_WEIGHT_TOKEN_5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"9346:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9334:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9333:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9317:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1332,"nodeType":"ExpressionStatement","src":"9317:49:8"}]}},"id":1378,"nodeType":"IfStatement","src":"9177:505:8","trueBody":{"id":1318,"nodeType":"Block","src":"9194:82:8","statements":[{"expression":{"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1309,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9212:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1310,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9229:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1312,"indexExpression":{"id":1311,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9236:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9229:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1313,"name":"BURN_WEIGHT_TOKEN_4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"9241:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9229:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1315,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9228:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9212:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1317,"nodeType":"ExpressionStatement","src":"9212:49:8"}]}},"id":1379,"nodeType":"IfStatement","src":"9072:610:8","trueBody":{"id":1303,"nodeType":"Block","src":"9089:82:8","statements":[{"expression":{"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1294,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9107:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1295,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9124:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1297,"indexExpression":{"id":1296,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9131:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9124:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1298,"name":"BURN_WEIGHT_TOKEN_3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"9136:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9124:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1300,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9123:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9107:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1302,"nodeType":"ExpressionStatement","src":"9107:49:8"}]}},"id":1380,"nodeType":"IfStatement","src":"8967:715:8","trueBody":{"id":1288,"nodeType":"Block","src":"8984:82:8","statements":[{"expression":{"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1279,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9002:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1280,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9019:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1282,"indexExpression":{"id":1281,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9026:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9019:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1283,"name":"BURN_WEIGHT_TOKEN_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"9031:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9019:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1285,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9018:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9002:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1287,"nodeType":"ExpressionStatement","src":"9002:49:8"}]}},"id":1381,"nodeType":"IfStatement","src":"8862:820:8","trueBody":{"id":1273,"nodeType":"Block","src":"8879:82:8","statements":[{"expression":{"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1264,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"8897:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1265,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8914:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1267,"indexExpression":{"id":1266,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8921:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8914:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1268,"name":"BURN_WEIGHT_TOKEN_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"8926:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8914:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8913:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8897:49:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1272,"nodeType":"ExpressionStatement","src":"8897:49:8"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1234,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8705:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1235,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"8709:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8713:6:8","memberName":"length","nodeType":"MemberAccess","src":"8709:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8705:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1383,"initializationExpression":{"assignments":[1231],"declarations":[{"constant":false,"id":1231,"mutability":"mutable","name":"i","nameLocation":"8698:1:8","nodeType":"VariableDeclaration","scope":1383,"src":"8690:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"8690:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1233,"initialValue":{"hexValue":"30","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8702:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8690:13:8"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8721:3:8","subExpression":{"id":1238,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8721:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1240,"nodeType":"ExpressionStatement","src":"8721:3:8"},"nodeType":"ForStatement","src":"8685:1007:8"},{"assignments":[1385],"declarations":[{"constant":false,"id":1385,"mutability":"mutable","name":"userAddr","nameLocation":"9710:8:8","nodeType":"VariableDeclaration","scope":1558,"src":"9702:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"9702:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1387,"initialValue":{"id":1386,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"9721:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9702:23:8"},{"assignments":[1389],"declarations":[{"constant":false,"id":1389,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"9803:16:8","nodeType":"VariableDeclaration","scope":1558,"src":"9795:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"9795:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1393,"initialValue":{"baseExpression":{"id":1390,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"9822:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1392,"indexExpression":{"id":1391,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"9837:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9822:24:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9795:51:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1394,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"9861:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9866:6:8","memberName":"length","nodeType":"MemberAccess","src":"9861:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9875:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9861:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1502,"nodeType":"Block","src":"10730:249:8","statements":[{"assignments":[1483],"declarations":[{"constant":false,"id":1483,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"10752:29:8","nodeType":"VariableDeclaration","scope":1502,"src":"10744:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1482,"name":"uint256","nodeType":"ElementaryTypeName","src":"10744:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1487,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1484,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"10784:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10804:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10784:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10744:63:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1488,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"10825:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10857:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10825:33:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1501,"nodeType":"IfStatement","src":"10821:148:8","trueBody":{"id":1500,"nodeType":"Block","src":"10860:109:8","statements":[{"expression":{"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1491,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"10878:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1492,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"10894:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1493,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"10909:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10894:44:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10893:46:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1496,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"10942:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10893:61:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10878:76:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1499,"nodeType":"ExpressionStatement","src":"10878:76:8"}]}}]},"id":1503,"nodeType":"IfStatement","src":"9857:1122:8","trueBody":{"id":1481,"nodeType":"Block","src":"9878:846:8","statements":[{"assignments":[1402,1404],"declarations":[{"constant":false,"id":1402,"mutability":"mutable","name":"proof","nameLocation":"9910:5:8","nodeType":"VariableDeclaration","scope":1481,"src":"9893:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9893:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1401,"nodeType":"ArrayTypeName","src":"9893:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"9925:29:8","nodeType":"VariableDeclaration","scope":1481,"src":"9917:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1403,"name":"uint256","nodeType":"ElementaryTypeName","src":"9917:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1415,"initialValue":{"arguments":[{"id":1407,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"9969:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":1409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9976:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9976:7:8","typeDescriptions":{}}},"id":1410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"9976:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":1412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9987:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"9987:7:8","typeDescriptions":{}}}],"id":1413,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9975:20:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":1405,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9958:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9962:6:8","memberName":"decode","nodeType":"MemberAccess","src":"9958:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9958:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"9892:104:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1416,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"10015:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10035:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10015:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1419,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10014:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10043:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10014:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1471,"nodeType":"IfStatement","src":"10010:613:8","trueBody":{"id":1470,"nodeType":"Block","src":"10046:577:8","statements":[{"assignments":[1423],"declarations":[{"constant":false,"id":1423,"mutability":"mutable","name":"leaf","nameLocation":"10072:4:8","nodeType":"VariableDeclaration","scope":1470,"src":"10064:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1422,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10064:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1431,"initialValue":{"arguments":[{"arguments":[{"id":1427,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"10106:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1428,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"10116:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1425,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10089:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10093:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"10089:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10089:57:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1424,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10079:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10079:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10064:83:8"},{"condition":{"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10169:32:8","subExpression":{"arguments":[{"id":1434,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"10183:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1435,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"10196:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1432,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"10170:5:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10176:6:8","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":270,"src":"10170:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10170:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1444,"nodeType":"IfStatement","src":"10165:139:8","trueBody":{"id":1443,"nodeType":"Block","src":"10203:101:8","statements":[{"errorCall":{"arguments":[{"id":1439,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"10245:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1440,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"10255:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1438,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"10232:12:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10232:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1442,"nodeType":"RevertStatement","src":"10225:60:8"}]}},{"assignments":[1446],"declarations":[{"constant":false,"id":1446,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"10330:16:8","nodeType":"VariableDeclaration","scope":1470,"src":"10322:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"10322:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1453,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1447,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"10350:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10383:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10350:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1450,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10349:38:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1451,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"10390:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10349:57:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10322:84:8"},{"expression":{"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1454,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"10424:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1456,"indexExpression":{"id":1455,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"10439:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10424:24:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1457,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"10451:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10424:43:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1459,"nodeType":"ExpressionStatement","src":"10424:43:8"},{"eventCall":{"arguments":[{"id":1461,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"10510:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1462,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"10520:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1463,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"10538:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1460,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"10490:19:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10490:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1465,"nodeType":"EmitStatement","src":"10485:70:8"},{"expression":{"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1466,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"10573:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1467,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"10592:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10573:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1469,"nodeType":"ExpressionStatement","src":"10573:35:8"}]}},{"expression":{"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1472,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"10637:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1473,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"10653:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1474,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"10668:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10653:44:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1476,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10652:46:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1477,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"10701:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10652:61:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10637:76:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1480,"nodeType":"ExpressionStatement","src":"10637:76:8"}]}},{"assignments":[1505],"declarations":[{"constant":false,"id":1505,"mutability":"mutable","name":"rocMultiplier","nameLocation":"10997:13:8","nodeType":"VariableDeclaration","scope":1558,"src":"10989:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1504,"name":"uint256","nodeType":"ElementaryTypeName","src":"10989:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1510,"initialValue":{"arguments":[{"id":1508,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"11021:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11013:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1506,"name":"uint128","nodeType":"ElementaryTypeName","src":"11013:7:8","typeDescriptions":{}}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11013:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"10989:49:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1511,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"11052:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11068:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11052:17:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1519,"nodeType":"IfStatement","src":"11048:77:8","trueBody":{"id":1518,"nodeType":"Block","src":"11071:54:8","statements":[{"expression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1514,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"11085:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":1515,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"11101:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11085:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1517,"nodeType":"ExpressionStatement","src":"11085:29:8"}]}},{"assignments":[1521],"declarations":[{"constant":false,"id":1521,"mutability":"mutable","name":"userTotalAshPerCycle","nameLocation":"11177:20:8","nodeType":"VariableDeclaration","scope":1558,"src":"11169:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1520,"name":"uint256","nodeType":"ElementaryTypeName","src":"11169:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1529,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":1522,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"11200:15:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1524,"indexExpression":{"id":1523,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"11216:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11200:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1526,"indexExpression":{"id":1525,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"11223:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11200:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1527,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"11235:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11200:47:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11169:78:8"},{"expression":{"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1530,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"11257:15:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1533,"indexExpression":{"id":1531,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"11273:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11257:22:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1534,"indexExpression":{"id":1532,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"11280:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11257:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1535,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"11292:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11257:55:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1537,"nodeType":"ExpressionStatement","src":"11257:55:8"},{"expression":{"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1538,"name":"totalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"11356:16:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1540,"indexExpression":{"id":1539,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"11373:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11356:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1541,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"11383:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11356:39:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1543,"nodeType":"ExpressionStatement","src":"11356:39:8"},{"eventCall":{"arguments":[{"id":1545,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"11423:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1546,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"11433:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1547,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"11440:3:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1548,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"11445:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1549,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"11453:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1550,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"11467:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1551,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"11489:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1544,"name":"GenerateAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"11411:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256[] memory,uint256[] memory,uint256,uint256,uint256)"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11411:95:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1553,"nodeType":"EmitStatement","src":"11406:100:8"},{"expression":{"expression":{"expression":{"id":1554,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"11524:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1560","typeString":"contract OrbsBurnPool"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11529:22:8","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1559,"src":"11524:27:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11552:8:8","memberName":"selector","nodeType":"MemberAccess","src":"11524:36:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1184,"id":1557,"nodeType":"Return","src":"11517:43:8"}]},"documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"7586:523:8","text":" @notice Burn the tokens and calculate the ash.\n @param from The wallet address.\n @param ids The token IDs to burn.\n @param values The amount of tokens to burn.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid."},"functionSelector":"bc197c81","id":1559,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"8123:22:8","nodeType":"FunctionDefinition","overrides":{"id":1181,"nodeType":"OverrideSpecifier","overrides":[],"src":"8296:8:8"},"parameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1559,"src":"8155:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"8155:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"from","nameLocation":"8180:4:8","nodeType":"VariableDeclaration","scope":1559,"src":"8172:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"8172:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"ids","nameLocation":"8213:3:8","nodeType":"VariableDeclaration","scope":1559,"src":"8194:22:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"8194:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1173,"nodeType":"ArrayTypeName","src":"8194:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1177,"mutability":"mutable","name":"values","nameLocation":"8245:6:8","nodeType":"VariableDeclaration","scope":1559,"src":"8226:25:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1175,"name":"uint256","nodeType":"ElementaryTypeName","src":"8226:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1176,"nodeType":"ArrayTypeName","src":"8226:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"data","nameLocation":"8276:4:8","nodeType":"VariableDeclaration","scope":1559,"src":"8261:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1178,"name":"bytes","nodeType":"ElementaryTypeName","src":"8261:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8145:141:8"},"returnParameters":{"id":1184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1559,"src":"8314:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1182,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8314:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"8313:8:8"},"scope":1560,"src":"8114:3453:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1561,"src":"529:11040:8","usedErrors":[34,869,874,883,888,893,900,903,906],"usedEvents":[853,862]}],"src":"32:11538:8"},"id":8}},"contracts":{"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard, Token Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard, Token Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/burn/OrbsBurnPool.sol":{"OrbsBurnPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Burnable","name":"orbOfPower","type":"address"},{"internalType":"contract IERC1155Burnable","name":"missingOrb","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"AlreadySetROCMultiplier","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"puzzleGameMultiplierNumerator","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"InvalidTokenAddress","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidTokenValue","type":"error"},{"inputs":[],"name":"ZeroCycleDuration","type":"error"},{"inputs":[],"name":"ZeroMaxCycle","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"ash","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orbMultiplier","type":"uint256"}],"name":"GenerateAsh","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"curOrbMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedOrbMultiplier","type":"uint256"}],"name":"UpdateOrbMultiplier","type":"event"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_3","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_4","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_5","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_6","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_7","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB_TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ORB_OF_POWER","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROC_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orbMultipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.","kind":"dev","methods":{"constructor":{"details":"Throws if the cycle duration is zero.Throws if the max cycle is zero.","params":{"cycleDuration":"The duration of each cycle.","initialTime":"The initial time of the contract.","maxCycle":"The maximum cycle.","merkleRoot":"The Merkle root of the Puzzle Game multiplier claim.","missingOrb":"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.","orbOfPower":"The IERC1155Burnable erc1155 contract burn to generate ASH."}},"currentCycle()":{"returns":{"_0":"cycle The current cycle."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","ids":"The token IDs to burn.","values":"The amount of tokens to burn."},"returns":{"_0":"The ERC1155Received selector."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","id":"The token ID.","value":"The token value."},"returns":{"_0":"The ERC1155Received selector."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"OrbsBurnPool Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_181":{"entryPoint":null,"id":181,"parameterSlots":0,"returnSlots":0},"@_965":{"entryPoint":null,"id":965,"parameterSlots":6,"returnSlots":0},"@layout_146":{"entryPoint":206,"id":146,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_100":{"entryPoint":260,"id":100,"parameterSlots":3,"returnSlots":0},"abi_decode_contract_IERC1155Burnable_fromMemory":{"entryPoint":353,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$208t_contract$_IERC1155Burnable_$208_fromMemory":{"entryPoint":382,"id":null,"parameterSlots":2,"returnSlots":6},"checked_sub_t_uint256":{"entryPoint":475,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1070:9","nodeType":"YulBlock","src":"0:1070:9","statements":[{"nativeSrc":"6:3:9","nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nativeSrc":"92:117:9","nodeType":"YulBlock","src":"92:117:9","statements":[{"nativeSrc":"102:22:9","nodeType":"YulAssignment","src":"102:22:9","value":{"arguments":[{"name":"offset","nativeSrc":"117:6:9","nodeType":"YulIdentifier","src":"117:6:9"}],"functionName":{"name":"mload","nativeSrc":"111:5:9","nodeType":"YulIdentifier","src":"111:5:9"},"nativeSrc":"111:13:9","nodeType":"YulFunctionCall","src":"111:13:9"},"variableNames":[{"name":"value","nativeSrc":"102:5:9","nodeType":"YulIdentifier","src":"102:5:9"}]},{"body":{"nativeSrc":"187:16:9","nodeType":"YulBlock","src":"187:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"196:1:9","nodeType":"YulLiteral","src":"196:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"199:1:9","nodeType":"YulLiteral","src":"199:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"189:6:9","nodeType":"YulIdentifier","src":"189:6:9"},"nativeSrc":"189:12:9","nodeType":"YulFunctionCall","src":"189:12:9"},"nativeSrc":"189:12:9","nodeType":"YulExpressionStatement","src":"189:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"146:5:9","nodeType":"YulIdentifier","src":"146:5:9"},{"arguments":[{"name":"value","nativeSrc":"157:5:9","nodeType":"YulIdentifier","src":"157:5:9"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"172:3:9","nodeType":"YulLiteral","src":"172:3:9","type":"","value":"160"},{"kind":"number","nativeSrc":"177:1:9","nodeType":"YulLiteral","src":"177:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"168:3:9","nodeType":"YulIdentifier","src":"168:3:9"},"nativeSrc":"168:11:9","nodeType":"YulFunctionCall","src":"168:11:9"},{"kind":"number","nativeSrc":"181:1:9","nodeType":"YulLiteral","src":"181:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"164:3:9","nodeType":"YulIdentifier","src":"164:3:9"},"nativeSrc":"164:19:9","nodeType":"YulFunctionCall","src":"164:19:9"}],"functionName":{"name":"and","nativeSrc":"153:3:9","nodeType":"YulIdentifier","src":"153:3:9"},"nativeSrc":"153:31:9","nodeType":"YulFunctionCall","src":"153:31:9"}],"functionName":{"name":"eq","nativeSrc":"143:2:9","nodeType":"YulIdentifier","src":"143:2:9"},"nativeSrc":"143:42:9","nodeType":"YulFunctionCall","src":"143:42:9"}],"functionName":{"name":"iszero","nativeSrc":"136:6:9","nodeType":"YulIdentifier","src":"136:6:9"},"nativeSrc":"136:50:9","nodeType":"YulFunctionCall","src":"136:50:9"},"nativeSrc":"133:70:9","nodeType":"YulIf","src":"133:70:9"}]},"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"14:195:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"71:6:9","nodeType":"YulTypedName","src":"71:6:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"82:5:9","nodeType":"YulTypedName","src":"82:5:9","type":""}],"src":"14:195:9"},{"body":{"nativeSrc":"428:410:9","nodeType":"YulBlock","src":"428:410:9","statements":[{"body":{"nativeSrc":"475:16:9","nodeType":"YulBlock","src":"475:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"484:1:9","nodeType":"YulLiteral","src":"484:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"487:1:9","nodeType":"YulLiteral","src":"487:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"477:6:9","nodeType":"YulIdentifier","src":"477:6:9"},"nativeSrc":"477:12:9","nodeType":"YulFunctionCall","src":"477:12:9"},"nativeSrc":"477:12:9","nodeType":"YulExpressionStatement","src":"477:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"449:7:9","nodeType":"YulIdentifier","src":"449:7:9"},{"name":"headStart","nativeSrc":"458:9:9","nodeType":"YulIdentifier","src":"458:9:9"}],"functionName":{"name":"sub","nativeSrc":"445:3:9","nodeType":"YulIdentifier","src":"445:3:9"},"nativeSrc":"445:23:9","nodeType":"YulFunctionCall","src":"445:23:9"},{"kind":"number","nativeSrc":"470:3:9","nodeType":"YulLiteral","src":"470:3:9","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"441:3:9","nodeType":"YulIdentifier","src":"441:3:9"},"nativeSrc":"441:33:9","nodeType":"YulFunctionCall","src":"441:33:9"},"nativeSrc":"438:53:9","nodeType":"YulIf","src":"438:53:9"},{"nativeSrc":"500:26:9","nodeType":"YulAssignment","src":"500:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"516:9:9","nodeType":"YulIdentifier","src":"516:9:9"}],"functionName":{"name":"mload","nativeSrc":"510:5:9","nodeType":"YulIdentifier","src":"510:5:9"},"nativeSrc":"510:16:9","nodeType":"YulFunctionCall","src":"510:16:9"},"variableNames":[{"name":"value0","nativeSrc":"500:6:9","nodeType":"YulIdentifier","src":"500:6:9"}]},{"nativeSrc":"535:35:9","nodeType":"YulAssignment","src":"535:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"555:9:9","nodeType":"YulIdentifier","src":"555:9:9"},{"kind":"number","nativeSrc":"566:2:9","nodeType":"YulLiteral","src":"566:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"551:3:9","nodeType":"YulIdentifier","src":"551:3:9"},"nativeSrc":"551:18:9","nodeType":"YulFunctionCall","src":"551:18:9"}],"functionName":{"name":"mload","nativeSrc":"545:5:9","nodeType":"YulIdentifier","src":"545:5:9"},"nativeSrc":"545:25:9","nodeType":"YulFunctionCall","src":"545:25:9"},"variableNames":[{"name":"value1","nativeSrc":"535:6:9","nodeType":"YulIdentifier","src":"535:6:9"}]},{"nativeSrc":"579:35:9","nodeType":"YulAssignment","src":"579:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"599:9:9","nodeType":"YulIdentifier","src":"599:9:9"},{"kind":"number","nativeSrc":"610:2:9","nodeType":"YulLiteral","src":"610:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"595:3:9","nodeType":"YulIdentifier","src":"595:3:9"},"nativeSrc":"595:18:9","nodeType":"YulFunctionCall","src":"595:18:9"}],"functionName":{"name":"mload","nativeSrc":"589:5:9","nodeType":"YulIdentifier","src":"589:5:9"},"nativeSrc":"589:25:9","nodeType":"YulFunctionCall","src":"589:25:9"},"variableNames":[{"name":"value2","nativeSrc":"579:6:9","nodeType":"YulIdentifier","src":"579:6:9"}]},{"nativeSrc":"623:35:9","nodeType":"YulAssignment","src":"623:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"643:9:9","nodeType":"YulIdentifier","src":"643:9:9"},{"kind":"number","nativeSrc":"654:2:9","nodeType":"YulLiteral","src":"654:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"639:3:9","nodeType":"YulIdentifier","src":"639:3:9"},"nativeSrc":"639:18:9","nodeType":"YulFunctionCall","src":"639:18:9"}],"functionName":{"name":"mload","nativeSrc":"633:5:9","nodeType":"YulIdentifier","src":"633:5:9"},"nativeSrc":"633:25:9","nodeType":"YulFunctionCall","src":"633:25:9"},"variableNames":[{"name":"value3","nativeSrc":"623:6:9","nodeType":"YulIdentifier","src":"623:6:9"}]},{"nativeSrc":"667:78:9","nodeType":"YulAssignment","src":"667:78:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"729:9:9","nodeType":"YulIdentifier","src":"729:9:9"},{"kind":"number","nativeSrc":"740:3:9","nodeType":"YulLiteral","src":"740:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"725:3:9","nodeType":"YulIdentifier","src":"725:3:9"},"nativeSrc":"725:19:9","nodeType":"YulFunctionCall","src":"725:19:9"}],"functionName":{"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"677:47:9","nodeType":"YulIdentifier","src":"677:47:9"},"nativeSrc":"677:68:9","nodeType":"YulFunctionCall","src":"677:68:9"},"variableNames":[{"name":"value4","nativeSrc":"667:6:9","nodeType":"YulIdentifier","src":"667:6:9"}]},{"nativeSrc":"754:78:9","nodeType":"YulAssignment","src":"754:78:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"816:9:9","nodeType":"YulIdentifier","src":"816:9:9"},{"kind":"number","nativeSrc":"827:3:9","nodeType":"YulLiteral","src":"827:3:9","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"812:3:9","nodeType":"YulIdentifier","src":"812:3:9"},"nativeSrc":"812:19:9","nodeType":"YulFunctionCall","src":"812:19:9"}],"functionName":{"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"764:47:9","nodeType":"YulIdentifier","src":"764:47:9"},"nativeSrc":"764:68:9","nodeType":"YulFunctionCall","src":"764:68:9"},"variableNames":[{"name":"value5","nativeSrc":"754:6:9","nodeType":"YulIdentifier","src":"754:6:9"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$208t_contract$_IERC1155Burnable_$208_fromMemory","nativeSrc":"214:624:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"354:9:9","nodeType":"YulTypedName","src":"354:9:9","type":""},{"name":"dataEnd","nativeSrc":"365:7:9","nodeType":"YulTypedName","src":"365:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"377:6:9","nodeType":"YulTypedName","src":"377:6:9","type":""},{"name":"value1","nativeSrc":"385:6:9","nodeType":"YulTypedName","src":"385:6:9","type":""},{"name":"value2","nativeSrc":"393:6:9","nodeType":"YulTypedName","src":"393:6:9","type":""},{"name":"value3","nativeSrc":"401:6:9","nodeType":"YulTypedName","src":"401:6:9","type":""},{"name":"value4","nativeSrc":"409:6:9","nodeType":"YulTypedName","src":"409:6:9","type":""},{"name":"value5","nativeSrc":"417:6:9","nodeType":"YulTypedName","src":"417:6:9","type":""}],"src":"214:624:9"},{"body":{"nativeSrc":"892:176:9","nodeType":"YulBlock","src":"892:176:9","statements":[{"nativeSrc":"902:17:9","nodeType":"YulAssignment","src":"902:17:9","value":{"arguments":[{"name":"x","nativeSrc":"914:1:9","nodeType":"YulIdentifier","src":"914:1:9"},{"name":"y","nativeSrc":"917:1:9","nodeType":"YulIdentifier","src":"917:1:9"}],"functionName":{"name":"sub","nativeSrc":"910:3:9","nodeType":"YulIdentifier","src":"910:3:9"},"nativeSrc":"910:9:9","nodeType":"YulFunctionCall","src":"910:9:9"},"variableNames":[{"name":"diff","nativeSrc":"902:4:9","nodeType":"YulIdentifier","src":"902:4:9"}]},{"body":{"nativeSrc":"951:111:9","nodeType":"YulBlock","src":"951:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"972:1:9","nodeType":"YulLiteral","src":"972:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"979:3:9","nodeType":"YulLiteral","src":"979:3:9","type":"","value":"224"},{"kind":"number","nativeSrc":"984:10:9","nodeType":"YulLiteral","src":"984:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"975:3:9","nodeType":"YulIdentifier","src":"975:3:9"},"nativeSrc":"975:20:9","nodeType":"YulFunctionCall","src":"975:20:9"}],"functionName":{"name":"mstore","nativeSrc":"965:6:9","nodeType":"YulIdentifier","src":"965:6:9"},"nativeSrc":"965:31:9","nodeType":"YulFunctionCall","src":"965:31:9"},"nativeSrc":"965:31:9","nodeType":"YulExpressionStatement","src":"965:31:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1016:1:9","nodeType":"YulLiteral","src":"1016:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"1019:4:9","nodeType":"YulLiteral","src":"1019:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1009:6:9","nodeType":"YulIdentifier","src":"1009:6:9"},"nativeSrc":"1009:15:9","nodeType":"YulFunctionCall","src":"1009:15:9"},"nativeSrc":"1009:15:9","nodeType":"YulExpressionStatement","src":"1009:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1044:1:9","nodeType":"YulLiteral","src":"1044:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1047:4:9","nodeType":"YulLiteral","src":"1047:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1037:6:9","nodeType":"YulIdentifier","src":"1037:6:9"},"nativeSrc":"1037:15:9","nodeType":"YulFunctionCall","src":"1037:15:9"},"nativeSrc":"1037:15:9","nodeType":"YulExpressionStatement","src":"1037:15:9"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"934:4:9","nodeType":"YulIdentifier","src":"934:4:9"},{"name":"x","nativeSrc":"940:1:9","nodeType":"YulIdentifier","src":"940:1:9"}],"functionName":{"name":"gt","nativeSrc":"931:2:9","nodeType":"YulIdentifier","src":"931:2:9"},"nativeSrc":"931:11:9","nodeType":"YulFunctionCall","src":"931:11:9"},"nativeSrc":"928:134:9","nodeType":"YulIf","src":"928:134:9"}]},"name":"checked_sub_t_uint256","nativeSrc":"843:225:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"874:1:9","nodeType":"YulTypedName","src":"874:1:9","type":""},{"name":"y","nativeSrc":"877:1:9","nodeType":"YulTypedName","src":"877:1:9","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"883:4:9","nodeType":"YulTypedName","src":"883:4:9","type":""}],"src":"843:225:9"}]},"contents":"{\n    { }\n    function abi_decode_contract_IERC1155Burnable_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$208t_contract$_IERC1155Burnable_$208_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        value4 := abi_decode_contract_IERC1155Burnable_fromMemory(add(headStart, 128))\n        value5 := abi_decode_contract_IERC1155Burnable_fromMemory(add(headStart, 160))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b50604051620019803803806200198083398101604081905262000035916200017e565b62000055630271189760e51b60016200004d620000ce565b919062000104565b60c086905260008590036200007d5760405163b870efbd60e01b815260040160405180910390fd5b60e08590526000849003620000a557604051637e5e559b60e11b815260040160405180910390fd5b61010093909352610120919091526001600160a01b039081166080521660a05250620001fd9050565b600080620000fe60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e620001db565b92915050565b600160e01b6001600160e01b031983160162000133576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b80516001600160a01b03811681146200017957600080fd5b919050565b60008060008060008060c087890312156200019857600080fd5b86519550602087015194506040870151935060608701519250620001bf6080880162000161565b9150620001cf60a0880162000161565b90509295509295509295565b81810381811115620000fe57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e05161010051610120516116f46200028c600039600081816102c70152818161093d0152610ec20152600081816101ca015281816104ca0152610cc301526000818161039101526103ec015260008181610275015261041001526000818161036a0152610bcf0152600081816102190152818161045e01526107e301526116f46000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806351e75e8b116100d8578063bc197c811161008c578063cd421fbf11610066578063cd421fbf1461038c578063f23a6e61146103b3578063f95d1016146103c657600080fd5b8063bc197c8114610319578063c131754e1461035d578063cd18a34f1461036557600080fd5b8063aa918fd5116100bd578063aa918fd514610268578063ab504e73146102f1578063bab2f5521461031157600080fd5b806351e75e8b146102c257806355f5b0a8146102e957600080fd5b80631de0e40b1161013a578063424ab4f711610114578063424ab4f714610268578063491bde66146102705780634dac1c2b1461029757600080fd5b80631de0e40b146101af57806328a979cf146102145780633838a2011461026057600080fd5b8063043063bc1161016b578063043063bc146101c55780630455645a146101ec57806312828b7f146101f457600080fd5b806301ffc9a7146101875780630277640e146101af575b600080fd5b61019a61019536600461116a565b6103ce565b60405190151581526020015b60405180910390f35b6101b7600181565b6040519081526020016101a6565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101b7600581565b6101b76102023660046111d5565b60026020526000908152604090205481565b61023b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a6565b6101b7601981565b6101b7600381565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101b76102a53660046111f0565b600160209081526000928352604080842090915290825290205481565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101b7600281565b6101b76102ff36600461121c565b60006020819052908152604090205481565b6101b76103e8565b61032c6103273660046112c3565b610444565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101a6565b6101b7601081565b61023b7f000000000000000000000000000000000000000000000000000000000000000081565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b61032c6103c136600461137e565b610bb5565b6101b7600981565b60006103e2826103dc610fd7565b90611005565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006104357f000000000000000000000000000000000000000000000000000000000000000042611425565b61043f9190611438565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146104bc576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006104c66103e8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610525576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018290526024016104b3565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906105699030908c908c908c908c906004016114be565b600060405180830381600087803b15801561058357600080fd5b505af1158015610597573d6000803e3d6000fd5b505050506000805b88811015610875578787828181106105b9576105b961150d565b9050602002013560000361065357338a8a838181106105da576105da61150d565b905060200201358989848181106105f3576105f361150d565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90951660048601526024850193909352506020909102013560448201526064016104b3565b8989828181106106655761066561150d565b905060200201356001036106a95760018888838181106106875761068761150d565b90506020020135610698919061153c565b6106a29083611553565b915061086d565b8989828181106106bb576106bb61150d565b905060200201356002036106dd5760038888838181106106875761068761150d565b8989828181106106ef576106ef61150d565b905060200201356003036107115760038888838181106106875761068761150d565b8989828181106107235761072361150d565b905060200201356004036107455760058888838181106106875761068761150d565b8989828181106107575761075761150d565b905060200201356005036107795760098888838181106106875761068761150d565b89898281811061078b5761078b61150d565b905060200201356006036107ad5760198888838181106106875761068761150d565b8989828181106107bf576107bf61150d565b905060200201356007036107e15760108888838181106106875761068761150d565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106108145761081461150d565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909416600485015260200291909101356024830152506044016104b3565b60010161059f565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610a47576000806108b3888a018a611595565b91509150608083901c600003610a27576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610962837f0000000000000000000000000000000000000000000000000000000000000000836110df565b6109b7576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602481018390526044016104b3565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610a34828761153c565b610a3e9190611438565b94505050610a6e565b608081901c8015610a6c57612710610a5f828661153c565b610a699190611438565b93505b505b6fffffffffffffffffffffffffffffffff81168015610a9457610a91818561153c565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610acf908690611553565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610b1f908490611553565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610b799796959493929190611677565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c28576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024016104b3565b60018514610c6b576040517f1912ea51000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044016104b3565b83600114610cb5576040517fe1f366e900000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481018590526064016104b3565b6000610cbf6103e8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610d1e576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018290526024016104b3565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610da6576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201526024016104b3565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610e0557600080fd5b505af1158015610e19573d6000803e3d6000fd5b5050506002821790508415610f4657608082901c600003610f4657600080610e4387890189611595565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610ee7837f0000000000000000000000000000000000000000000000000000000000000000836110df565b610f3c576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152602481018390526044016104b3565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b6000806103e260017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611425565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611055575060006103e2565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016110a6575060016103e2565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000826110ec85846110f5565b14949350505050565b600081815b845181101561113057611126828683815181106111195761111961150d565b6020026020010151611138565b91506001016110fa565b509392505050565b6000818310611154576000828152602084905260409020611163565b60008381526020839052604090205b9392505050565b60006020828403121561117c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461116357600080fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146111d057600080fd5b919050565b6000602082840312156111e757600080fd5b611163826111ac565b6000806040838503121561120357600080fd5b82359150611213602084016111ac565b90509250929050565b60006020828403121561122e57600080fd5b5035919050565b60008083601f84011261124757600080fd5b50813567ffffffffffffffff81111561125f57600080fd5b6020830191508360208260051b850101111561127a57600080fd5b9250929050565b60008083601f84011261129357600080fd5b50813567ffffffffffffffff8111156112ab57600080fd5b60208301915083602082850101111561127a57600080fd5b60008060008060008060008060a0898b0312156112df57600080fd5b6112e8896111ac565b97506112f660208a016111ac565b9650604089013567ffffffffffffffff8082111561131357600080fd5b61131f8c838d01611235565b909850965060608b013591508082111561133857600080fd5b6113448c838d01611235565b909650945060808b013591508082111561135d57600080fd5b5061136a8b828c01611281565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561139757600080fd5b6113a0876111ac565b95506113ae602088016111ac565b94506040870135935060608701359250608087013567ffffffffffffffff8111156113d857600080fd5b6113e489828a01611281565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156103e2576103e26113f6565b60008261146e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156114a557600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006114ee606083018688611473565b8281036040840152611501818587611473565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820281158282048414176103e2576103e26113f6565b808201808211156103e2576103e26113f6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156115a857600080fd5b823567ffffffffffffffff808211156115c057600080fd5b818501915085601f8301126115d457600080fd5b81356020828211156115e8576115e8611566565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110868211171561162b5761162b611566565b60405292835281830193508481018201928984111561164957600080fd5b948201945b838610156116675785358552948201949382019361164e565b9997909101359750505050505050565b60a08152600061168b60a08301898b611473565b828103602084015261169e81888a611473565b60408401969096525050606081019290925260809091015294935050505056fea2646970667358221220b761619cc0cd930ba131c535ad55e54ddd56a4e8f912ffe15867c1e495bb4ee364736f6c63430008160033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1980 CODESIZE SUB DUP1 PUSH3 0x1980 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x17E JUMP JUMPDEST PUSH3 0x55 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x4D PUSH3 0xCE JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x104 JUMP JUMPDEST PUSH1 0xC0 DUP7 SWAP1 MSTORE PUSH1 0x0 DUP6 SWAP1 SUB PUSH3 0x7D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB870EFBD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xE0 DUP6 SWAP1 MSTORE PUSH1 0x0 DUP5 SWAP1 SUB PUSH3 0xA5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E5E559B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x120 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE AND PUSH1 0xA0 MSTORE POP PUSH3 0x1FD SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xFE PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x1DB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x133 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD SWAP5 POP PUSH1 0x40 DUP8 ADD MLOAD SWAP4 POP PUSH1 0x60 DUP8 ADD MLOAD SWAP3 POP PUSH3 0x1BF PUSH1 0x80 DUP9 ADD PUSH3 0x161 JUMP JUMPDEST SWAP2 POP PUSH3 0x1CF PUSH1 0xA0 DUP9 ADD PUSH3 0x161 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xFE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x16F4 PUSH3 0x28C PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2C7 ADD MSTORE DUP2 DUP2 PUSH2 0x93D ADD MSTORE PUSH2 0xEC2 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1CA ADD MSTORE DUP2 DUP2 PUSH2 0x4CA ADD MSTORE PUSH2 0xCC3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x391 ADD MSTORE PUSH2 0x3EC ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x275 ADD MSTORE PUSH2 0x410 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x36A ADD MSTORE PUSH2 0xBCF ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x219 ADD MSTORE DUP2 DUP2 PUSH2 0x45E ADD MSTORE PUSH2 0x7E3 ADD MSTORE PUSH2 0x16F4 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x297 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x28A979CF EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x43063BC GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x116A JUMP JUMPDEST PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x23B PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x2FF CALLDATASIZE PUSH1 0x4 PUSH2 0x121C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x3E8 JUMP JUMPDEST PUSH2 0x32C PUSH2 0x327 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C3 JUMP JUMPDEST PUSH2 0x444 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x23B PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x32C PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0xBB5 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E2 DUP3 PUSH2 0x3DC PUSH2 0xFD7 JUMP JUMPDEST SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x435 PUSH32 0x0 TIMESTAMP PUSH2 0x1425 JUMP JUMPDEST PUSH2 0x43F SWAP2 SWAP1 PUSH2 0x1438 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x4BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4C6 PUSH2 0x3E8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x525 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x569 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x875 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x5B9 JUMPI PUSH2 0x5B9 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x653 JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x5DA JUMPI PUSH2 0x5DA PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x5F3 JUMPI PUSH2 0x5F3 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B3 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x665 JUMPI PUSH2 0x665 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x6A9 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x698 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH2 0x6A2 SWAP1 DUP4 PUSH2 0x1553 JUMP JUMPDEST SWAP2 POP PUSH2 0x86D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6BB JUMPI PUSH2 0x6BB PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x6DD JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6EF JUMPI PUSH2 0x6EF PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x711 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x723 JUMPI PUSH2 0x723 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x745 JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x779 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x7AD JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x7E1 JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x814 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x59F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 PUSH2 0x8B3 DUP9 DUP11 ADD DUP11 PUSH2 0x1595 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x962 DUP4 PUSH32 0x0 DUP4 PUSH2 0x10DF JUMP JUMPDEST PUSH2 0x9B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xA34 DUP3 DUP8 PUSH2 0x153C JUMP JUMPDEST PUSH2 0xA3E SWAP2 SWAP1 PUSH2 0x1438 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xA6C JUMPI PUSH2 0x2710 PUSH2 0xA5F DUP3 DUP7 PUSH2 0x153C JUMP JUMPDEST PUSH2 0xA69 SWAP2 SWAP1 PUSH2 0x1438 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xA94 JUMPI PUSH2 0xA91 DUP2 DUP6 PUSH2 0x153C JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xACF SWAP1 DUP7 SWAP1 PUSH2 0x1553 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xB1F SWAP1 DUP5 SWAP1 PUSH2 0x1553 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xB79 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1677 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xC28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xC6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xCB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBF PUSH2 0x3E8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xD1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xDA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE19 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0xF46 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xF46 JUMPI PUSH1 0x0 DUP1 PUSH2 0xE43 DUP8 DUP10 ADD DUP10 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xEE7 DUP4 PUSH32 0x0 DUP4 PUSH2 0x10DF JUMP JUMPDEST PUSH2 0xF3C JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E2 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1055 JUMPI POP PUSH1 0x0 PUSH2 0x3E2 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x10A6 JUMPI POP PUSH1 0x1 PUSH2 0x3E2 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x10EC DUP6 DUP5 PUSH2 0x10F5 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1130 JUMPI PUSH2 0x1126 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1119 JUMPI PUSH2 0x1119 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1138 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x10FA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1154 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1163 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x117C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x11D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1163 DUP3 PUSH2 0x11AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1213 PUSH1 0x20 DUP5 ADD PUSH2 0x11AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x122E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x125F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x12DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E8 DUP10 PUSH2 0x11AC JUMP JUMPDEST SWAP8 POP PUSH2 0x12F6 PUSH1 0x20 DUP11 ADD PUSH2 0x11AC JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x131F DUP13 DUP4 DUP14 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1344 DUP13 DUP4 DUP14 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136A DUP12 DUP3 DUP13 ADD PUSH2 0x1281 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13A0 DUP8 PUSH2 0x11AC JUMP JUMPDEST SWAP6 POP PUSH2 0x13AE PUSH1 0x20 DUP9 ADD PUSH2 0x11AC JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13E4 DUP10 DUP3 DUP11 ADD PUSH2 0x1281 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x13F6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x146E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x14A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x14EE PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1473 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1501 DUP2 DUP6 DUP8 PUSH2 0x1473 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x13F6 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x13F6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E8 PUSH2 0x1566 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x162B JUMPI PUSH2 0x162B PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x1649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1667 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x164E JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x168B PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1473 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x169E DUP2 DUP9 DUP11 PUSH2 0x1473 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 PUSH2 0x619C 0xC0 0xCD SWAP4 SIGNEXTEND LOG1 BALANCE 0xC5 CALLDATALOAD 0xAD SSTORE 0xE5 0x4D 0xDD JUMP LOG4 0xE8 0xF9 SLT SELFDESTRUCT 0xE1 PC PUSH8 0xC1E495BB4EE36473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"529:11040:8:-:0;;;4455:582;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;780:103:4;-1:-1:-1;;;878:4:4;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;4671:26:8;;;;4729:1;4712:18;;;4708:75;;4753:19;;-1:-1:-1;;;4753:19:8;;;;;;;;;;;4708:75;4792:30;;;;4849:1;4837:13;;;4833:65;;4873:14;;-1:-1:-1;;;4873:14:8;;;;;;;;;;;4833:65;4907:20;;;;;4937:24;;;;;-1:-1:-1;;;;;4971:25:8;;;;;5006:24;-1:-1:-1;5006:24:8;-1:-1:-1;529:11040:8;;-1:-1:-1;529:11040:8;1705:174:3;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:3:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:3;;;877:68;;925:20;;-1:-1:-1;;;925:20:3;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:3;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:3;;;;;;;;;;773:235::o;14:195:9:-;111:13;;-1:-1:-1;;;;;153:31:9;;143:42;;133:70;;199:1;196;189:12;133:70;14:195;;;:::o;214:624::-;377:6;385;393;401;409;417;470:3;458:9;449:7;445:23;441:33;438:53;;;487:1;484;477:12;438:53;516:9;510:16;500:26;;566:2;555:9;551:18;545:25;535:35;;610:2;599:9;595:18;589:25;579:35;;654:2;643:9;639:18;633:25;623:35;;677:68;740:3;729:9;725:19;677:68;:::i;:::-;667:78;;764:68;827:3;816:9;812:19;764:68;:::i;:::-;754:78;;214:624;;;;;;;;:::o;843:225::-;910:9;;;931:11;;;928:134;;;984:10;979:3;975:20;972:1;965:31;1019:4;1016:1;1009:15;1047:4;1044:1;1037:15;843:225;529:11040:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURN_WEIGHT_TOKEN_1_775":{"entryPoint":null,"id":775,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_2_778":{"entryPoint":null,"id":778,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_3_781":{"entryPoint":null,"id":781,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_4_784":{"entryPoint":null,"id":784,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_5_787":{"entryPoint":null,"id":787,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_6_790":{"entryPoint":null,"id":790,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_7_793":{"entryPoint":null,"id":793,"parameterSlots":0,"returnSlots":0},"@CYCLE_DURATION_811":{"entryPoint":null,"id":811,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_808":{"entryPoint":null,"id":808,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_814":{"entryPoint":null,"id":814,"parameterSlots":0,"returnSlots":0},"@MERKLE_ROOT_817":{"entryPoint":null,"id":817,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_805":{"entryPoint":null,"id":805,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_TOKEN_ID_771":{"entryPoint":null,"id":771,"parameterSlots":0,"returnSlots":0},"@ORB_OF_POWER_801":{"entryPoint":null,"id":801,"parameterSlots":0,"returnSlots":0},"@ROC_MULTIPLIER_797":{"entryPoint":null,"id":797,"parameterSlots":0,"returnSlots":0},"@_efficientHash_747":{"entryPoint":null,"id":747,"parameterSlots":2,"returnSlots":1},"@_hashPair_736":{"entryPoint":4408,"id":736,"parameterSlots":2,"returnSlots":1},"@currentCycle_980":{"entryPoint":1000,"id":980,"parameterSlots":0,"returnSlots":1},"@layout_146":{"entryPoint":4055,"id":146,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_1559":{"entryPoint":1092,"id":1559,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_1166":{"entryPoint":2997,"id":1166,"parameterSlots":6,"returnSlots":1},"@orbMultipliers_834":{"entryPoint":null,"id":834,"parameterSlots":0,"returnSlots":0},"@processProof_331":{"entryPoint":4341,"id":331,"parameterSlots":2,"returnSlots":1},"@supportsInterface_134":{"entryPoint":4101,"id":134,"parameterSlots":2,"returnSlots":1},"@supportsInterface_28":{"entryPoint":974,"id":28,"parameterSlots":1,"returnSlots":1},"@totalAshPerCycle_822":{"entryPoint":null,"id":822,"parameterSlots":0,"returnSlots":0},"@userAshPerCycle_829":{"entryPoint":null,"id":829,"parameterSlots":0,"returnSlots":0},"@verify_270":{"entryPoint":4319,"id":270,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4524,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":4661,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":4737,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4565,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":4803,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":4990,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256":{"entryPoint":5525,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4458,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4636,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":4592,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5235,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5310,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":5751,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$208__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5459,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":5176,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":5436,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5157,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":5110,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5389,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5478,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:10658:9","nodeType":"YulBlock","src":"0:10658:9","statements":[{"nativeSrc":"6:3:9","nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nativeSrc":"83:263:9","nodeType":"YulBlock","src":"83:263:9","statements":[{"body":{"nativeSrc":"129:16:9","nodeType":"YulBlock","src":"129:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:9","nodeType":"YulLiteral","src":"138:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:9","nodeType":"YulLiteral","src":"141:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:9","nodeType":"YulIdentifier","src":"131:6:9"},"nativeSrc":"131:12:9","nodeType":"YulFunctionCall","src":"131:12:9"},"nativeSrc":"131:12:9","nodeType":"YulExpressionStatement","src":"131:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:9","nodeType":"YulIdentifier","src":"104:7:9"},{"name":"headStart","nativeSrc":"113:9:9","nodeType":"YulIdentifier","src":"113:9:9"}],"functionName":{"name":"sub","nativeSrc":"100:3:9","nodeType":"YulIdentifier","src":"100:3:9"},"nativeSrc":"100:23:9","nodeType":"YulFunctionCall","src":"100:23:9"},{"kind":"number","nativeSrc":"125:2:9","nodeType":"YulLiteral","src":"125:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:9","nodeType":"YulIdentifier","src":"96:3:9"},"nativeSrc":"96:32:9","nodeType":"YulFunctionCall","src":"96:32:9"},"nativeSrc":"93:52:9","nodeType":"YulIf","src":"93:52:9"},{"nativeSrc":"154:36:9","nodeType":"YulVariableDeclaration","src":"154:36:9","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:9","nodeType":"YulIdentifier","src":"180:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:9","nodeType":"YulIdentifier","src":"167:12:9"},"nativeSrc":"167:23:9","nodeType":"YulFunctionCall","src":"167:23:9"},"variables":[{"name":"value","nativeSrc":"158:5:9","nodeType":"YulTypedName","src":"158:5:9","type":""}]},{"body":{"nativeSrc":"300:16:9","nodeType":"YulBlock","src":"300:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:9","nodeType":"YulLiteral","src":"309:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:9","nodeType":"YulLiteral","src":"312:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:9","nodeType":"YulIdentifier","src":"302:6:9"},"nativeSrc":"302:12:9","nodeType":"YulFunctionCall","src":"302:12:9"},"nativeSrc":"302:12:9","nodeType":"YulExpressionStatement","src":"302:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:9","nodeType":"YulIdentifier","src":"212:5:9"},{"arguments":[{"name":"value","nativeSrc":"223:5:9","nodeType":"YulIdentifier","src":"223:5:9"},{"kind":"number","nativeSrc":"230:66:9","nodeType":"YulLiteral","src":"230:66:9","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:9","nodeType":"YulIdentifier","src":"219:3:9"},"nativeSrc":"219:78:9","nodeType":"YulFunctionCall","src":"219:78:9"}],"functionName":{"name":"eq","nativeSrc":"209:2:9","nodeType":"YulIdentifier","src":"209:2:9"},"nativeSrc":"209:89:9","nodeType":"YulFunctionCall","src":"209:89:9"}],"functionName":{"name":"iszero","nativeSrc":"202:6:9","nodeType":"YulIdentifier","src":"202:6:9"},"nativeSrc":"202:97:9","nodeType":"YulFunctionCall","src":"202:97:9"},"nativeSrc":"199:117:9","nodeType":"YulIf","src":"199:117:9"},{"nativeSrc":"325:15:9","nodeType":"YulAssignment","src":"325:15:9","value":{"name":"value","nativeSrc":"335:5:9","nodeType":"YulIdentifier","src":"335:5:9"},"variableNames":[{"name":"value0","nativeSrc":"325:6:9","nodeType":"YulIdentifier","src":"325:6:9"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:9","nodeType":"YulTypedName","src":"49:9:9","type":""},{"name":"dataEnd","nativeSrc":"60:7:9","nodeType":"YulTypedName","src":"60:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:9","nodeType":"YulTypedName","src":"72:6:9","type":""}],"src":"14:332:9"},{"body":{"nativeSrc":"446:92:9","nodeType":"YulBlock","src":"446:92:9","statements":[{"nativeSrc":"456:26:9","nodeType":"YulAssignment","src":"456:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:9","nodeType":"YulIdentifier","src":"468:9:9"},{"kind":"number","nativeSrc":"479:2:9","nodeType":"YulLiteral","src":"479:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:9","nodeType":"YulIdentifier","src":"464:3:9"},"nativeSrc":"464:18:9","nodeType":"YulFunctionCall","src":"464:18:9"},"variableNames":[{"name":"tail","nativeSrc":"456:4:9","nodeType":"YulIdentifier","src":"456:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:9","nodeType":"YulIdentifier","src":"498:9:9"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:9","nodeType":"YulIdentifier","src":"523:6:9"}],"functionName":{"name":"iszero","nativeSrc":"516:6:9","nodeType":"YulIdentifier","src":"516:6:9"},"nativeSrc":"516:14:9","nodeType":"YulFunctionCall","src":"516:14:9"}],"functionName":{"name":"iszero","nativeSrc":"509:6:9","nodeType":"YulIdentifier","src":"509:6:9"},"nativeSrc":"509:22:9","nodeType":"YulFunctionCall","src":"509:22:9"}],"functionName":{"name":"mstore","nativeSrc":"491:6:9","nodeType":"YulIdentifier","src":"491:6:9"},"nativeSrc":"491:41:9","nodeType":"YulFunctionCall","src":"491:41:9"},"nativeSrc":"491:41:9","nodeType":"YulExpressionStatement","src":"491:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:9","nodeType":"YulTypedName","src":"415:9:9","type":""},{"name":"value0","nativeSrc":"426:6:9","nodeType":"YulTypedName","src":"426:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:9","nodeType":"YulTypedName","src":"437:4:9","type":""}],"src":"351:187:9"},{"body":{"nativeSrc":"644:76:9","nodeType":"YulBlock","src":"644:76:9","statements":[{"nativeSrc":"654:26:9","nodeType":"YulAssignment","src":"654:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:9","nodeType":"YulIdentifier","src":"666:9:9"},{"kind":"number","nativeSrc":"677:2:9","nodeType":"YulLiteral","src":"677:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:9","nodeType":"YulIdentifier","src":"662:3:9"},"nativeSrc":"662:18:9","nodeType":"YulFunctionCall","src":"662:18:9"},"variableNames":[{"name":"tail","nativeSrc":"654:4:9","nodeType":"YulIdentifier","src":"654:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:9","nodeType":"YulIdentifier","src":"696:9:9"},{"name":"value0","nativeSrc":"707:6:9","nodeType":"YulIdentifier","src":"707:6:9"}],"functionName":{"name":"mstore","nativeSrc":"689:6:9","nodeType":"YulIdentifier","src":"689:6:9"},"nativeSrc":"689:25:9","nodeType":"YulFunctionCall","src":"689:25:9"},"nativeSrc":"689:25:9","nodeType":"YulExpressionStatement","src":"689:25:9"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:9","nodeType":"YulTypedName","src":"613:9:9","type":""},{"name":"value0","nativeSrc":"624:6:9","nodeType":"YulTypedName","src":"624:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:9","nodeType":"YulTypedName","src":"635:4:9","type":""}],"src":"543:177:9"},{"body":{"nativeSrc":"774:147:9","nodeType":"YulBlock","src":"774:147:9","statements":[{"nativeSrc":"784:29:9","nodeType":"YulAssignment","src":"784:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"806:6:9","nodeType":"YulIdentifier","src":"806:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"793:12:9","nodeType":"YulIdentifier","src":"793:12:9"},"nativeSrc":"793:20:9","nodeType":"YulFunctionCall","src":"793:20:9"},"variableNames":[{"name":"value","nativeSrc":"784:5:9","nodeType":"YulIdentifier","src":"784:5:9"}]},{"body":{"nativeSrc":"899:16:9","nodeType":"YulBlock","src":"899:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"908:1:9","nodeType":"YulLiteral","src":"908:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"911:1:9","nodeType":"YulLiteral","src":"911:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"901:6:9","nodeType":"YulIdentifier","src":"901:6:9"},"nativeSrc":"901:12:9","nodeType":"YulFunctionCall","src":"901:12:9"},"nativeSrc":"901:12:9","nodeType":"YulExpressionStatement","src":"901:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:9","nodeType":"YulIdentifier","src":"835:5:9"},{"arguments":[{"name":"value","nativeSrc":"846:5:9","nodeType":"YulIdentifier","src":"846:5:9"},{"kind":"number","nativeSrc":"853:42:9","nodeType":"YulLiteral","src":"853:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"842:3:9","nodeType":"YulIdentifier","src":"842:3:9"},"nativeSrc":"842:54:9","nodeType":"YulFunctionCall","src":"842:54:9"}],"functionName":{"name":"eq","nativeSrc":"832:2:9","nodeType":"YulIdentifier","src":"832:2:9"},"nativeSrc":"832:65:9","nodeType":"YulFunctionCall","src":"832:65:9"}],"functionName":{"name":"iszero","nativeSrc":"825:6:9","nodeType":"YulIdentifier","src":"825:6:9"},"nativeSrc":"825:73:9","nodeType":"YulFunctionCall","src":"825:73:9"},"nativeSrc":"822:93:9","nodeType":"YulIf","src":"822:93:9"}]},"name":"abi_decode_address","nativeSrc":"725:196:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"753:6:9","nodeType":"YulTypedName","src":"753:6:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"764:5:9","nodeType":"YulTypedName","src":"764:5:9","type":""}],"src":"725:196:9"},{"body":{"nativeSrc":"996:116:9","nodeType":"YulBlock","src":"996:116:9","statements":[{"body":{"nativeSrc":"1042:16:9","nodeType":"YulBlock","src":"1042:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1051:1:9","nodeType":"YulLiteral","src":"1051:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1054:1:9","nodeType":"YulLiteral","src":"1054:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1044:6:9","nodeType":"YulIdentifier","src":"1044:6:9"},"nativeSrc":"1044:12:9","nodeType":"YulFunctionCall","src":"1044:12:9"},"nativeSrc":"1044:12:9","nodeType":"YulExpressionStatement","src":"1044:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1017:7:9","nodeType":"YulIdentifier","src":"1017:7:9"},{"name":"headStart","nativeSrc":"1026:9:9","nodeType":"YulIdentifier","src":"1026:9:9"}],"functionName":{"name":"sub","nativeSrc":"1013:3:9","nodeType":"YulIdentifier","src":"1013:3:9"},"nativeSrc":"1013:23:9","nodeType":"YulFunctionCall","src":"1013:23:9"},{"kind":"number","nativeSrc":"1038:2:9","nodeType":"YulLiteral","src":"1038:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1009:3:9","nodeType":"YulIdentifier","src":"1009:3:9"},"nativeSrc":"1009:32:9","nodeType":"YulFunctionCall","src":"1009:32:9"},"nativeSrc":"1006:52:9","nodeType":"YulIf","src":"1006:52:9"},{"nativeSrc":"1067:39:9","nodeType":"YulAssignment","src":"1067:39:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1096:9:9","nodeType":"YulIdentifier","src":"1096:9:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1077:18:9","nodeType":"YulIdentifier","src":"1077:18:9"},"nativeSrc":"1077:29:9","nodeType":"YulFunctionCall","src":"1077:29:9"},"variableNames":[{"name":"value0","nativeSrc":"1067:6:9","nodeType":"YulIdentifier","src":"1067:6:9"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"926:186:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"962:9:9","nodeType":"YulTypedName","src":"962:9:9","type":""},{"name":"dataEnd","nativeSrc":"973:7:9","nodeType":"YulTypedName","src":"973:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"985:6:9","nodeType":"YulTypedName","src":"985:6:9","type":""}],"src":"926:186:9"},{"body":{"nativeSrc":"1242:125:9","nodeType":"YulBlock","src":"1242:125:9","statements":[{"nativeSrc":"1252:26:9","nodeType":"YulAssignment","src":"1252:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1264:9:9","nodeType":"YulIdentifier","src":"1264:9:9"},{"kind":"number","nativeSrc":"1275:2:9","nodeType":"YulLiteral","src":"1275:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1260:3:9","nodeType":"YulIdentifier","src":"1260:3:9"},"nativeSrc":"1260:18:9","nodeType":"YulFunctionCall","src":"1260:18:9"},"variableNames":[{"name":"tail","nativeSrc":"1252:4:9","nodeType":"YulIdentifier","src":"1252:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1294:9:9","nodeType":"YulIdentifier","src":"1294:9:9"},{"arguments":[{"name":"value0","nativeSrc":"1309:6:9","nodeType":"YulIdentifier","src":"1309:6:9"},{"kind":"number","nativeSrc":"1317:42:9","nodeType":"YulLiteral","src":"1317:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1305:3:9","nodeType":"YulIdentifier","src":"1305:3:9"},"nativeSrc":"1305:55:9","nodeType":"YulFunctionCall","src":"1305:55:9"}],"functionName":{"name":"mstore","nativeSrc":"1287:6:9","nodeType":"YulIdentifier","src":"1287:6:9"},"nativeSrc":"1287:74:9","nodeType":"YulFunctionCall","src":"1287:74:9"},"nativeSrc":"1287:74:9","nodeType":"YulExpressionStatement","src":"1287:74:9"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$208__to_t_address__fromStack_reversed","nativeSrc":"1117:250:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1211:9:9","nodeType":"YulTypedName","src":"1211:9:9","type":""},{"name":"value0","nativeSrc":"1222:6:9","nodeType":"YulTypedName","src":"1222:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1233:4:9","nodeType":"YulTypedName","src":"1233:4:9","type":""}],"src":"1117:250:9"},{"body":{"nativeSrc":"1459:167:9","nodeType":"YulBlock","src":"1459:167:9","statements":[{"body":{"nativeSrc":"1505:16:9","nodeType":"YulBlock","src":"1505:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1514:1:9","nodeType":"YulLiteral","src":"1514:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1517:1:9","nodeType":"YulLiteral","src":"1517:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1507:6:9","nodeType":"YulIdentifier","src":"1507:6:9"},"nativeSrc":"1507:12:9","nodeType":"YulFunctionCall","src":"1507:12:9"},"nativeSrc":"1507:12:9","nodeType":"YulExpressionStatement","src":"1507:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1480:7:9","nodeType":"YulIdentifier","src":"1480:7:9"},{"name":"headStart","nativeSrc":"1489:9:9","nodeType":"YulIdentifier","src":"1489:9:9"}],"functionName":{"name":"sub","nativeSrc":"1476:3:9","nodeType":"YulIdentifier","src":"1476:3:9"},"nativeSrc":"1476:23:9","nodeType":"YulFunctionCall","src":"1476:23:9"},{"kind":"number","nativeSrc":"1501:2:9","nodeType":"YulLiteral","src":"1501:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1472:3:9","nodeType":"YulIdentifier","src":"1472:3:9"},"nativeSrc":"1472:32:9","nodeType":"YulFunctionCall","src":"1472:32:9"},"nativeSrc":"1469:52:9","nodeType":"YulIf","src":"1469:52:9"},{"nativeSrc":"1530:33:9","nodeType":"YulAssignment","src":"1530:33:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1553:9:9","nodeType":"YulIdentifier","src":"1553:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"1540:12:9","nodeType":"YulIdentifier","src":"1540:12:9"},"nativeSrc":"1540:23:9","nodeType":"YulFunctionCall","src":"1540:23:9"},"variableNames":[{"name":"value0","nativeSrc":"1530:6:9","nodeType":"YulIdentifier","src":"1530:6:9"}]},{"nativeSrc":"1572:48:9","nodeType":"YulAssignment","src":"1572:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1605:9:9","nodeType":"YulIdentifier","src":"1605:9:9"},{"kind":"number","nativeSrc":"1616:2:9","nodeType":"YulLiteral","src":"1616:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1601:3:9","nodeType":"YulIdentifier","src":"1601:3:9"},"nativeSrc":"1601:18:9","nodeType":"YulFunctionCall","src":"1601:18:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1582:18:9","nodeType":"YulIdentifier","src":"1582:18:9"},"nativeSrc":"1582:38:9","nodeType":"YulFunctionCall","src":"1582:38:9"},"variableNames":[{"name":"value1","nativeSrc":"1572:6:9","nodeType":"YulIdentifier","src":"1572:6:9"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"1372:254:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1417:9:9","nodeType":"YulTypedName","src":"1417:9:9","type":""},{"name":"dataEnd","nativeSrc":"1428:7:9","nodeType":"YulTypedName","src":"1428:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1440:6:9","nodeType":"YulTypedName","src":"1440:6:9","type":""},{"name":"value1","nativeSrc":"1448:6:9","nodeType":"YulTypedName","src":"1448:6:9","type":""}],"src":"1372:254:9"},{"body":{"nativeSrc":"1732:76:9","nodeType":"YulBlock","src":"1732:76:9","statements":[{"nativeSrc":"1742:26:9","nodeType":"YulAssignment","src":"1742:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1754:9:9","nodeType":"YulIdentifier","src":"1754:9:9"},{"kind":"number","nativeSrc":"1765:2:9","nodeType":"YulLiteral","src":"1765:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1750:3:9","nodeType":"YulIdentifier","src":"1750:3:9"},"nativeSrc":"1750:18:9","nodeType":"YulFunctionCall","src":"1750:18:9"},"variableNames":[{"name":"tail","nativeSrc":"1742:4:9","nodeType":"YulIdentifier","src":"1742:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1784:9:9","nodeType":"YulIdentifier","src":"1784:9:9"},{"name":"value0","nativeSrc":"1795:6:9","nodeType":"YulIdentifier","src":"1795:6:9"}],"functionName":{"name":"mstore","nativeSrc":"1777:6:9","nodeType":"YulIdentifier","src":"1777:6:9"},"nativeSrc":"1777:25:9","nodeType":"YulFunctionCall","src":"1777:25:9"},"nativeSrc":"1777:25:9","nodeType":"YulExpressionStatement","src":"1777:25:9"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"1631:177:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1701:9:9","nodeType":"YulTypedName","src":"1701:9:9","type":""},{"name":"value0","nativeSrc":"1712:6:9","nodeType":"YulTypedName","src":"1712:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1723:4:9","nodeType":"YulTypedName","src":"1723:4:9","type":""}],"src":"1631:177:9"},{"body":{"nativeSrc":"1883:110:9","nodeType":"YulBlock","src":"1883:110:9","statements":[{"body":{"nativeSrc":"1929:16:9","nodeType":"YulBlock","src":"1929:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1938:1:9","nodeType":"YulLiteral","src":"1938:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1941:1:9","nodeType":"YulLiteral","src":"1941:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1931:6:9","nodeType":"YulIdentifier","src":"1931:6:9"},"nativeSrc":"1931:12:9","nodeType":"YulFunctionCall","src":"1931:12:9"},"nativeSrc":"1931:12:9","nodeType":"YulExpressionStatement","src":"1931:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1904:7:9","nodeType":"YulIdentifier","src":"1904:7:9"},{"name":"headStart","nativeSrc":"1913:9:9","nodeType":"YulIdentifier","src":"1913:9:9"}],"functionName":{"name":"sub","nativeSrc":"1900:3:9","nodeType":"YulIdentifier","src":"1900:3:9"},"nativeSrc":"1900:23:9","nodeType":"YulFunctionCall","src":"1900:23:9"},{"kind":"number","nativeSrc":"1925:2:9","nodeType":"YulLiteral","src":"1925:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1896:3:9","nodeType":"YulIdentifier","src":"1896:3:9"},"nativeSrc":"1896:32:9","nodeType":"YulFunctionCall","src":"1896:32:9"},"nativeSrc":"1893:52:9","nodeType":"YulIf","src":"1893:52:9"},{"nativeSrc":"1954:33:9","nodeType":"YulAssignment","src":"1954:33:9","value":{"arguments":[{"name":"headStart","nativeSrc":"1977:9:9","nodeType":"YulIdentifier","src":"1977:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"1964:12:9","nodeType":"YulIdentifier","src":"1964:12:9"},"nativeSrc":"1964:23:9","nodeType":"YulFunctionCall","src":"1964:23:9"},"variableNames":[{"name":"value0","nativeSrc":"1954:6:9","nodeType":"YulIdentifier","src":"1954:6:9"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1813:180:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1849:9:9","nodeType":"YulTypedName","src":"1849:9:9","type":""},{"name":"dataEnd","nativeSrc":"1860:7:9","nodeType":"YulTypedName","src":"1860:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1872:6:9","nodeType":"YulTypedName","src":"1872:6:9","type":""}],"src":"1813:180:9"},{"body":{"nativeSrc":"2082:283:9","nodeType":"YulBlock","src":"2082:283:9","statements":[{"body":{"nativeSrc":"2131:16:9","nodeType":"YulBlock","src":"2131:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2140:1:9","nodeType":"YulLiteral","src":"2140:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2143:1:9","nodeType":"YulLiteral","src":"2143:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2133:6:9","nodeType":"YulIdentifier","src":"2133:6:9"},"nativeSrc":"2133:12:9","nodeType":"YulFunctionCall","src":"2133:12:9"},"nativeSrc":"2133:12:9","nodeType":"YulExpressionStatement","src":"2133:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2110:6:9","nodeType":"YulIdentifier","src":"2110:6:9"},{"kind":"number","nativeSrc":"2118:4:9","nodeType":"YulLiteral","src":"2118:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2106:3:9","nodeType":"YulIdentifier","src":"2106:3:9"},"nativeSrc":"2106:17:9","nodeType":"YulFunctionCall","src":"2106:17:9"},{"name":"end","nativeSrc":"2125:3:9","nodeType":"YulIdentifier","src":"2125:3:9"}],"functionName":{"name":"slt","nativeSrc":"2102:3:9","nodeType":"YulIdentifier","src":"2102:3:9"},"nativeSrc":"2102:27:9","nodeType":"YulFunctionCall","src":"2102:27:9"}],"functionName":{"name":"iszero","nativeSrc":"2095:6:9","nodeType":"YulIdentifier","src":"2095:6:9"},"nativeSrc":"2095:35:9","nodeType":"YulFunctionCall","src":"2095:35:9"},"nativeSrc":"2092:55:9","nodeType":"YulIf","src":"2092:55:9"},{"nativeSrc":"2156:30:9","nodeType":"YulAssignment","src":"2156:30:9","value":{"arguments":[{"name":"offset","nativeSrc":"2179:6:9","nodeType":"YulIdentifier","src":"2179:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"2166:12:9","nodeType":"YulIdentifier","src":"2166:12:9"},"nativeSrc":"2166:20:9","nodeType":"YulFunctionCall","src":"2166:20:9"},"variableNames":[{"name":"length","nativeSrc":"2156:6:9","nodeType":"YulIdentifier","src":"2156:6:9"}]},{"body":{"nativeSrc":"2229:16:9","nodeType":"YulBlock","src":"2229:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2238:1:9","nodeType":"YulLiteral","src":"2238:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2241:1:9","nodeType":"YulLiteral","src":"2241:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2231:6:9","nodeType":"YulIdentifier","src":"2231:6:9"},"nativeSrc":"2231:12:9","nodeType":"YulFunctionCall","src":"2231:12:9"},"nativeSrc":"2231:12:9","nodeType":"YulExpressionStatement","src":"2231:12:9"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2201:6:9","nodeType":"YulIdentifier","src":"2201:6:9"},{"kind":"number","nativeSrc":"2209:18:9","nodeType":"YulLiteral","src":"2209:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2198:2:9","nodeType":"YulIdentifier","src":"2198:2:9"},"nativeSrc":"2198:30:9","nodeType":"YulFunctionCall","src":"2198:30:9"},"nativeSrc":"2195:50:9","nodeType":"YulIf","src":"2195:50:9"},{"nativeSrc":"2254:29:9","nodeType":"YulAssignment","src":"2254:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"2270:6:9","nodeType":"YulIdentifier","src":"2270:6:9"},{"kind":"number","nativeSrc":"2278:4:9","nodeType":"YulLiteral","src":"2278:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2266:3:9","nodeType":"YulIdentifier","src":"2266:3:9"},"nativeSrc":"2266:17:9","nodeType":"YulFunctionCall","src":"2266:17:9"},"variableNames":[{"name":"arrayPos","nativeSrc":"2254:8:9","nodeType":"YulIdentifier","src":"2254:8:9"}]},{"body":{"nativeSrc":"2343:16:9","nodeType":"YulBlock","src":"2343:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2352:1:9","nodeType":"YulLiteral","src":"2352:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2355:1:9","nodeType":"YulLiteral","src":"2355:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2345:6:9","nodeType":"YulIdentifier","src":"2345:6:9"},"nativeSrc":"2345:12:9","nodeType":"YulFunctionCall","src":"2345:12:9"},"nativeSrc":"2345:12:9","nodeType":"YulExpressionStatement","src":"2345:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2306:6:9","nodeType":"YulIdentifier","src":"2306:6:9"},{"arguments":[{"kind":"number","nativeSrc":"2318:1:9","nodeType":"YulLiteral","src":"2318:1:9","type":"","value":"5"},{"name":"length","nativeSrc":"2321:6:9","nodeType":"YulIdentifier","src":"2321:6:9"}],"functionName":{"name":"shl","nativeSrc":"2314:3:9","nodeType":"YulIdentifier","src":"2314:3:9"},"nativeSrc":"2314:14:9","nodeType":"YulFunctionCall","src":"2314:14:9"}],"functionName":{"name":"add","nativeSrc":"2302:3:9","nodeType":"YulIdentifier","src":"2302:3:9"},"nativeSrc":"2302:27:9","nodeType":"YulFunctionCall","src":"2302:27:9"},{"kind":"number","nativeSrc":"2331:4:9","nodeType":"YulLiteral","src":"2331:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2298:3:9","nodeType":"YulIdentifier","src":"2298:3:9"},"nativeSrc":"2298:38:9","nodeType":"YulFunctionCall","src":"2298:38:9"},{"name":"end","nativeSrc":"2338:3:9","nodeType":"YulIdentifier","src":"2338:3:9"}],"functionName":{"name":"gt","nativeSrc":"2295:2:9","nodeType":"YulIdentifier","src":"2295:2:9"},"nativeSrc":"2295:47:9","nodeType":"YulFunctionCall","src":"2295:47:9"},"nativeSrc":"2292:67:9","nodeType":"YulIf","src":"2292:67:9"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"1998:367:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2045:6:9","nodeType":"YulTypedName","src":"2045:6:9","type":""},{"name":"end","nativeSrc":"2053:3:9","nodeType":"YulTypedName","src":"2053:3:9","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2061:8:9","nodeType":"YulTypedName","src":"2061:8:9","type":""},{"name":"length","nativeSrc":"2071:6:9","nodeType":"YulTypedName","src":"2071:6:9","type":""}],"src":"1998:367:9"},{"body":{"nativeSrc":"2442:275:9","nodeType":"YulBlock","src":"2442:275:9","statements":[{"body":{"nativeSrc":"2491:16:9","nodeType":"YulBlock","src":"2491:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2500:1:9","nodeType":"YulLiteral","src":"2500:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2503:1:9","nodeType":"YulLiteral","src":"2503:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2493:6:9","nodeType":"YulIdentifier","src":"2493:6:9"},"nativeSrc":"2493:12:9","nodeType":"YulFunctionCall","src":"2493:12:9"},"nativeSrc":"2493:12:9","nodeType":"YulExpressionStatement","src":"2493:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2470:6:9","nodeType":"YulIdentifier","src":"2470:6:9"},{"kind":"number","nativeSrc":"2478:4:9","nodeType":"YulLiteral","src":"2478:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2466:3:9","nodeType":"YulIdentifier","src":"2466:3:9"},"nativeSrc":"2466:17:9","nodeType":"YulFunctionCall","src":"2466:17:9"},{"name":"end","nativeSrc":"2485:3:9","nodeType":"YulIdentifier","src":"2485:3:9"}],"functionName":{"name":"slt","nativeSrc":"2462:3:9","nodeType":"YulIdentifier","src":"2462:3:9"},"nativeSrc":"2462:27:9","nodeType":"YulFunctionCall","src":"2462:27:9"}],"functionName":{"name":"iszero","nativeSrc":"2455:6:9","nodeType":"YulIdentifier","src":"2455:6:9"},"nativeSrc":"2455:35:9","nodeType":"YulFunctionCall","src":"2455:35:9"},"nativeSrc":"2452:55:9","nodeType":"YulIf","src":"2452:55:9"},{"nativeSrc":"2516:30:9","nodeType":"YulAssignment","src":"2516:30:9","value":{"arguments":[{"name":"offset","nativeSrc":"2539:6:9","nodeType":"YulIdentifier","src":"2539:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"2526:12:9","nodeType":"YulIdentifier","src":"2526:12:9"},"nativeSrc":"2526:20:9","nodeType":"YulFunctionCall","src":"2526:20:9"},"variableNames":[{"name":"length","nativeSrc":"2516:6:9","nodeType":"YulIdentifier","src":"2516:6:9"}]},{"body":{"nativeSrc":"2589:16:9","nodeType":"YulBlock","src":"2589:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2598:1:9","nodeType":"YulLiteral","src":"2598:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2601:1:9","nodeType":"YulLiteral","src":"2601:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2591:6:9","nodeType":"YulIdentifier","src":"2591:6:9"},"nativeSrc":"2591:12:9","nodeType":"YulFunctionCall","src":"2591:12:9"},"nativeSrc":"2591:12:9","nodeType":"YulExpressionStatement","src":"2591:12:9"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2561:6:9","nodeType":"YulIdentifier","src":"2561:6:9"},{"kind":"number","nativeSrc":"2569:18:9","nodeType":"YulLiteral","src":"2569:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2558:2:9","nodeType":"YulIdentifier","src":"2558:2:9"},"nativeSrc":"2558:30:9","nodeType":"YulFunctionCall","src":"2558:30:9"},"nativeSrc":"2555:50:9","nodeType":"YulIf","src":"2555:50:9"},{"nativeSrc":"2614:29:9","nodeType":"YulAssignment","src":"2614:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"2630:6:9","nodeType":"YulIdentifier","src":"2630:6:9"},{"kind":"number","nativeSrc":"2638:4:9","nodeType":"YulLiteral","src":"2638:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2626:3:9","nodeType":"YulIdentifier","src":"2626:3:9"},"nativeSrc":"2626:17:9","nodeType":"YulFunctionCall","src":"2626:17:9"},"variableNames":[{"name":"arrayPos","nativeSrc":"2614:8:9","nodeType":"YulIdentifier","src":"2614:8:9"}]},{"body":{"nativeSrc":"2695:16:9","nodeType":"YulBlock","src":"2695:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2704:1:9","nodeType":"YulLiteral","src":"2704:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"2707:1:9","nodeType":"YulLiteral","src":"2707:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2697:6:9","nodeType":"YulIdentifier","src":"2697:6:9"},"nativeSrc":"2697:12:9","nodeType":"YulFunctionCall","src":"2697:12:9"},"nativeSrc":"2697:12:9","nodeType":"YulExpressionStatement","src":"2697:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2666:6:9","nodeType":"YulIdentifier","src":"2666:6:9"},{"name":"length","nativeSrc":"2674:6:9","nodeType":"YulIdentifier","src":"2674:6:9"}],"functionName":{"name":"add","nativeSrc":"2662:3:9","nodeType":"YulIdentifier","src":"2662:3:9"},"nativeSrc":"2662:19:9","nodeType":"YulFunctionCall","src":"2662:19:9"},{"kind":"number","nativeSrc":"2683:4:9","nodeType":"YulLiteral","src":"2683:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2658:3:9","nodeType":"YulIdentifier","src":"2658:3:9"},"nativeSrc":"2658:30:9","nodeType":"YulFunctionCall","src":"2658:30:9"},{"name":"end","nativeSrc":"2690:3:9","nodeType":"YulIdentifier","src":"2690:3:9"}],"functionName":{"name":"gt","nativeSrc":"2655:2:9","nodeType":"YulIdentifier","src":"2655:2:9"},"nativeSrc":"2655:39:9","nodeType":"YulFunctionCall","src":"2655:39:9"},"nativeSrc":"2652:59:9","nodeType":"YulIf","src":"2652:59:9"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"2370:347:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2405:6:9","nodeType":"YulTypedName","src":"2405:6:9","type":""},{"name":"end","nativeSrc":"2413:3:9","nodeType":"YulTypedName","src":"2413:3:9","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2421:8:9","nodeType":"YulTypedName","src":"2421:8:9","type":""},{"name":"length","nativeSrc":"2431:6:9","nodeType":"YulTypedName","src":"2431:6:9","type":""}],"src":"2370:347:9"},{"body":{"nativeSrc":"2949:983:9","nodeType":"YulBlock","src":"2949:983:9","statements":[{"body":{"nativeSrc":"2996:16:9","nodeType":"YulBlock","src":"2996:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3005:1:9","nodeType":"YulLiteral","src":"3005:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3008:1:9","nodeType":"YulLiteral","src":"3008:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2998:6:9","nodeType":"YulIdentifier","src":"2998:6:9"},"nativeSrc":"2998:12:9","nodeType":"YulFunctionCall","src":"2998:12:9"},"nativeSrc":"2998:12:9","nodeType":"YulExpressionStatement","src":"2998:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2970:7:9","nodeType":"YulIdentifier","src":"2970:7:9"},{"name":"headStart","nativeSrc":"2979:9:9","nodeType":"YulIdentifier","src":"2979:9:9"}],"functionName":{"name":"sub","nativeSrc":"2966:3:9","nodeType":"YulIdentifier","src":"2966:3:9"},"nativeSrc":"2966:23:9","nodeType":"YulFunctionCall","src":"2966:23:9"},{"kind":"number","nativeSrc":"2991:3:9","nodeType":"YulLiteral","src":"2991:3:9","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"2962:3:9","nodeType":"YulIdentifier","src":"2962:3:9"},"nativeSrc":"2962:33:9","nodeType":"YulFunctionCall","src":"2962:33:9"},"nativeSrc":"2959:53:9","nodeType":"YulIf","src":"2959:53:9"},{"nativeSrc":"3021:39:9","nodeType":"YulAssignment","src":"3021:39:9","value":{"arguments":[{"name":"headStart","nativeSrc":"3050:9:9","nodeType":"YulIdentifier","src":"3050:9:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3031:18:9","nodeType":"YulIdentifier","src":"3031:18:9"},"nativeSrc":"3031:29:9","nodeType":"YulFunctionCall","src":"3031:29:9"},"variableNames":[{"name":"value0","nativeSrc":"3021:6:9","nodeType":"YulIdentifier","src":"3021:6:9"}]},{"nativeSrc":"3069:48:9","nodeType":"YulAssignment","src":"3069:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3102:9:9","nodeType":"YulIdentifier","src":"3102:9:9"},{"kind":"number","nativeSrc":"3113:2:9","nodeType":"YulLiteral","src":"3113:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3098:3:9","nodeType":"YulIdentifier","src":"3098:3:9"},"nativeSrc":"3098:18:9","nodeType":"YulFunctionCall","src":"3098:18:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3079:18:9","nodeType":"YulIdentifier","src":"3079:18:9"},"nativeSrc":"3079:38:9","nodeType":"YulFunctionCall","src":"3079:38:9"},"variableNames":[{"name":"value1","nativeSrc":"3069:6:9","nodeType":"YulIdentifier","src":"3069:6:9"}]},{"nativeSrc":"3126:46:9","nodeType":"YulVariableDeclaration","src":"3126:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3157:9:9","nodeType":"YulIdentifier","src":"3157:9:9"},{"kind":"number","nativeSrc":"3168:2:9","nodeType":"YulLiteral","src":"3168:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3153:3:9","nodeType":"YulIdentifier","src":"3153:3:9"},"nativeSrc":"3153:18:9","nodeType":"YulFunctionCall","src":"3153:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"3140:12:9","nodeType":"YulIdentifier","src":"3140:12:9"},"nativeSrc":"3140:32:9","nodeType":"YulFunctionCall","src":"3140:32:9"},"variables":[{"name":"offset","nativeSrc":"3130:6:9","nodeType":"YulTypedName","src":"3130:6:9","type":""}]},{"nativeSrc":"3181:28:9","nodeType":"YulVariableDeclaration","src":"3181:28:9","value":{"kind":"number","nativeSrc":"3191:18:9","nodeType":"YulLiteral","src":"3191:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3185:2:9","nodeType":"YulTypedName","src":"3185:2:9","type":""}]},{"body":{"nativeSrc":"3236:16:9","nodeType":"YulBlock","src":"3236:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3245:1:9","nodeType":"YulLiteral","src":"3245:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3248:1:9","nodeType":"YulLiteral","src":"3248:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3238:6:9","nodeType":"YulIdentifier","src":"3238:6:9"},"nativeSrc":"3238:12:9","nodeType":"YulFunctionCall","src":"3238:12:9"},"nativeSrc":"3238:12:9","nodeType":"YulExpressionStatement","src":"3238:12:9"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3224:6:9","nodeType":"YulIdentifier","src":"3224:6:9"},{"name":"_1","nativeSrc":"3232:2:9","nodeType":"YulIdentifier","src":"3232:2:9"}],"functionName":{"name":"gt","nativeSrc":"3221:2:9","nodeType":"YulIdentifier","src":"3221:2:9"},"nativeSrc":"3221:14:9","nodeType":"YulFunctionCall","src":"3221:14:9"},"nativeSrc":"3218:34:9","nodeType":"YulIf","src":"3218:34:9"},{"nativeSrc":"3261:96:9","nodeType":"YulVariableDeclaration","src":"3261:96:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3329:9:9","nodeType":"YulIdentifier","src":"3329:9:9"},{"name":"offset","nativeSrc":"3340:6:9","nodeType":"YulIdentifier","src":"3340:6:9"}],"functionName":{"name":"add","nativeSrc":"3325:3:9","nodeType":"YulIdentifier","src":"3325:3:9"},"nativeSrc":"3325:22:9","nodeType":"YulFunctionCall","src":"3325:22:9"},{"name":"dataEnd","nativeSrc":"3349:7:9","nodeType":"YulIdentifier","src":"3349:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3287:37:9","nodeType":"YulIdentifier","src":"3287:37:9"},"nativeSrc":"3287:70:9","nodeType":"YulFunctionCall","src":"3287:70:9"},"variables":[{"name":"value2_1","nativeSrc":"3265:8:9","nodeType":"YulTypedName","src":"3265:8:9","type":""},{"name":"value3_1","nativeSrc":"3275:8:9","nodeType":"YulTypedName","src":"3275:8:9","type":""}]},{"nativeSrc":"3366:18:9","nodeType":"YulAssignment","src":"3366:18:9","value":{"name":"value2_1","nativeSrc":"3376:8:9","nodeType":"YulIdentifier","src":"3376:8:9"},"variableNames":[{"name":"value2","nativeSrc":"3366:6:9","nodeType":"YulIdentifier","src":"3366:6:9"}]},{"nativeSrc":"3393:18:9","nodeType":"YulAssignment","src":"3393:18:9","value":{"name":"value3_1","nativeSrc":"3403:8:9","nodeType":"YulIdentifier","src":"3403:8:9"},"variableNames":[{"name":"value3","nativeSrc":"3393:6:9","nodeType":"YulIdentifier","src":"3393:6:9"}]},{"nativeSrc":"3420:48:9","nodeType":"YulVariableDeclaration","src":"3420:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3453:9:9","nodeType":"YulIdentifier","src":"3453:9:9"},{"kind":"number","nativeSrc":"3464:2:9","nodeType":"YulLiteral","src":"3464:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3449:3:9","nodeType":"YulIdentifier","src":"3449:3:9"},"nativeSrc":"3449:18:9","nodeType":"YulFunctionCall","src":"3449:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"3436:12:9","nodeType":"YulIdentifier","src":"3436:12:9"},"nativeSrc":"3436:32:9","nodeType":"YulFunctionCall","src":"3436:32:9"},"variables":[{"name":"offset_1","nativeSrc":"3424:8:9","nodeType":"YulTypedName","src":"3424:8:9","type":""}]},{"body":{"nativeSrc":"3497:16:9","nodeType":"YulBlock","src":"3497:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3506:1:9","nodeType":"YulLiteral","src":"3506:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3509:1:9","nodeType":"YulLiteral","src":"3509:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3499:6:9","nodeType":"YulIdentifier","src":"3499:6:9"},"nativeSrc":"3499:12:9","nodeType":"YulFunctionCall","src":"3499:12:9"},"nativeSrc":"3499:12:9","nodeType":"YulExpressionStatement","src":"3499:12:9"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3483:8:9","nodeType":"YulIdentifier","src":"3483:8:9"},{"name":"_1","nativeSrc":"3493:2:9","nodeType":"YulIdentifier","src":"3493:2:9"}],"functionName":{"name":"gt","nativeSrc":"3480:2:9","nodeType":"YulIdentifier","src":"3480:2:9"},"nativeSrc":"3480:16:9","nodeType":"YulFunctionCall","src":"3480:16:9"},"nativeSrc":"3477:36:9","nodeType":"YulIf","src":"3477:36:9"},{"nativeSrc":"3522:98:9","nodeType":"YulVariableDeclaration","src":"3522:98:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3590:9:9","nodeType":"YulIdentifier","src":"3590:9:9"},{"name":"offset_1","nativeSrc":"3601:8:9","nodeType":"YulIdentifier","src":"3601:8:9"}],"functionName":{"name":"add","nativeSrc":"3586:3:9","nodeType":"YulIdentifier","src":"3586:3:9"},"nativeSrc":"3586:24:9","nodeType":"YulFunctionCall","src":"3586:24:9"},{"name":"dataEnd","nativeSrc":"3612:7:9","nodeType":"YulIdentifier","src":"3612:7:9"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3548:37:9","nodeType":"YulIdentifier","src":"3548:37:9"},"nativeSrc":"3548:72:9","nodeType":"YulFunctionCall","src":"3548:72:9"},"variables":[{"name":"value4_1","nativeSrc":"3526:8:9","nodeType":"YulTypedName","src":"3526:8:9","type":""},{"name":"value5_1","nativeSrc":"3536:8:9","nodeType":"YulTypedName","src":"3536:8:9","type":""}]},{"nativeSrc":"3629:18:9","nodeType":"YulAssignment","src":"3629:18:9","value":{"name":"value4_1","nativeSrc":"3639:8:9","nodeType":"YulIdentifier","src":"3639:8:9"},"variableNames":[{"name":"value4","nativeSrc":"3629:6:9","nodeType":"YulIdentifier","src":"3629:6:9"}]},{"nativeSrc":"3656:18:9","nodeType":"YulAssignment","src":"3656:18:9","value":{"name":"value5_1","nativeSrc":"3666:8:9","nodeType":"YulIdentifier","src":"3666:8:9"},"variableNames":[{"name":"value5","nativeSrc":"3656:6:9","nodeType":"YulIdentifier","src":"3656:6:9"}]},{"nativeSrc":"3683:49:9","nodeType":"YulVariableDeclaration","src":"3683:49:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3716:9:9","nodeType":"YulIdentifier","src":"3716:9:9"},{"kind":"number","nativeSrc":"3727:3:9","nodeType":"YulLiteral","src":"3727:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3712:3:9","nodeType":"YulIdentifier","src":"3712:3:9"},"nativeSrc":"3712:19:9","nodeType":"YulFunctionCall","src":"3712:19:9"}],"functionName":{"name":"calldataload","nativeSrc":"3699:12:9","nodeType":"YulIdentifier","src":"3699:12:9"},"nativeSrc":"3699:33:9","nodeType":"YulFunctionCall","src":"3699:33:9"},"variables":[{"name":"offset_2","nativeSrc":"3687:8:9","nodeType":"YulTypedName","src":"3687:8:9","type":""}]},{"body":{"nativeSrc":"3761:16:9","nodeType":"YulBlock","src":"3761:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3770:1:9","nodeType":"YulLiteral","src":"3770:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"3773:1:9","nodeType":"YulLiteral","src":"3773:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3763:6:9","nodeType":"YulIdentifier","src":"3763:6:9"},"nativeSrc":"3763:12:9","nodeType":"YulFunctionCall","src":"3763:12:9"},"nativeSrc":"3763:12:9","nodeType":"YulExpressionStatement","src":"3763:12:9"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"3747:8:9","nodeType":"YulIdentifier","src":"3747:8:9"},{"name":"_1","nativeSrc":"3757:2:9","nodeType":"YulIdentifier","src":"3757:2:9"}],"functionName":{"name":"gt","nativeSrc":"3744:2:9","nodeType":"YulIdentifier","src":"3744:2:9"},"nativeSrc":"3744:16:9","nodeType":"YulFunctionCall","src":"3744:16:9"},"nativeSrc":"3741:36:9","nodeType":"YulIf","src":"3741:36:9"},{"nativeSrc":"3786:86:9","nodeType":"YulVariableDeclaration","src":"3786:86:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3842:9:9","nodeType":"YulIdentifier","src":"3842:9:9"},{"name":"offset_2","nativeSrc":"3853:8:9","nodeType":"YulIdentifier","src":"3853:8:9"}],"functionName":{"name":"add","nativeSrc":"3838:3:9","nodeType":"YulIdentifier","src":"3838:3:9"},"nativeSrc":"3838:24:9","nodeType":"YulFunctionCall","src":"3838:24:9"},{"name":"dataEnd","nativeSrc":"3864:7:9","nodeType":"YulIdentifier","src":"3864:7:9"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3812:25:9","nodeType":"YulIdentifier","src":"3812:25:9"},"nativeSrc":"3812:60:9","nodeType":"YulFunctionCall","src":"3812:60:9"},"variables":[{"name":"value6_1","nativeSrc":"3790:8:9","nodeType":"YulTypedName","src":"3790:8:9","type":""},{"name":"value7_1","nativeSrc":"3800:8:9","nodeType":"YulTypedName","src":"3800:8:9","type":""}]},{"nativeSrc":"3881:18:9","nodeType":"YulAssignment","src":"3881:18:9","value":{"name":"value6_1","nativeSrc":"3891:8:9","nodeType":"YulIdentifier","src":"3891:8:9"},"variableNames":[{"name":"value6","nativeSrc":"3881:6:9","nodeType":"YulIdentifier","src":"3881:6:9"}]},{"nativeSrc":"3908:18:9","nodeType":"YulAssignment","src":"3908:18:9","value":{"name":"value7_1","nativeSrc":"3918:8:9","nodeType":"YulIdentifier","src":"3918:8:9"},"variableNames":[{"name":"value7","nativeSrc":"3908:6:9","nodeType":"YulIdentifier","src":"3908:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"2722:1210:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2859:9:9","nodeType":"YulTypedName","src":"2859:9:9","type":""},{"name":"dataEnd","nativeSrc":"2870:7:9","nodeType":"YulTypedName","src":"2870:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2882:6:9","nodeType":"YulTypedName","src":"2882:6:9","type":""},{"name":"value1","nativeSrc":"2890:6:9","nodeType":"YulTypedName","src":"2890:6:9","type":""},{"name":"value2","nativeSrc":"2898:6:9","nodeType":"YulTypedName","src":"2898:6:9","type":""},{"name":"value3","nativeSrc":"2906:6:9","nodeType":"YulTypedName","src":"2906:6:9","type":""},{"name":"value4","nativeSrc":"2914:6:9","nodeType":"YulTypedName","src":"2914:6:9","type":""},{"name":"value5","nativeSrc":"2922:6:9","nodeType":"YulTypedName","src":"2922:6:9","type":""},{"name":"value6","nativeSrc":"2930:6:9","nodeType":"YulTypedName","src":"2930:6:9","type":""},{"name":"value7","nativeSrc":"2938:6:9","nodeType":"YulTypedName","src":"2938:6:9","type":""}],"src":"2722:1210:9"},{"body":{"nativeSrc":"4036:149:9","nodeType":"YulBlock","src":"4036:149:9","statements":[{"nativeSrc":"4046:26:9","nodeType":"YulAssignment","src":"4046:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"4058:9:9","nodeType":"YulIdentifier","src":"4058:9:9"},{"kind":"number","nativeSrc":"4069:2:9","nodeType":"YulLiteral","src":"4069:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4054:3:9","nodeType":"YulIdentifier","src":"4054:3:9"},"nativeSrc":"4054:18:9","nodeType":"YulFunctionCall","src":"4054:18:9"},"variableNames":[{"name":"tail","nativeSrc":"4046:4:9","nodeType":"YulIdentifier","src":"4046:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4088:9:9","nodeType":"YulIdentifier","src":"4088:9:9"},{"arguments":[{"name":"value0","nativeSrc":"4103:6:9","nodeType":"YulIdentifier","src":"4103:6:9"},{"kind":"number","nativeSrc":"4111:66:9","nodeType":"YulLiteral","src":"4111:66:9","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4099:3:9","nodeType":"YulIdentifier","src":"4099:3:9"},"nativeSrc":"4099:79:9","nodeType":"YulFunctionCall","src":"4099:79:9"}],"functionName":{"name":"mstore","nativeSrc":"4081:6:9","nodeType":"YulIdentifier","src":"4081:6:9"},"nativeSrc":"4081:98:9","nodeType":"YulFunctionCall","src":"4081:98:9"},"nativeSrc":"4081:98:9","nodeType":"YulExpressionStatement","src":"4081:98:9"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"3937:248:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4005:9:9","nodeType":"YulTypedName","src":"4005:9:9","type":""},{"name":"value0","nativeSrc":"4016:6:9","nodeType":"YulTypedName","src":"4016:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4027:4:9","nodeType":"YulTypedName","src":"4027:4:9","type":""}],"src":"3937:248:9"},{"body":{"nativeSrc":"4347:538:9","nodeType":"YulBlock","src":"4347:538:9","statements":[{"body":{"nativeSrc":"4394:16:9","nodeType":"YulBlock","src":"4394:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4403:1:9","nodeType":"YulLiteral","src":"4403:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"4406:1:9","nodeType":"YulLiteral","src":"4406:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4396:6:9","nodeType":"YulIdentifier","src":"4396:6:9"},"nativeSrc":"4396:12:9","nodeType":"YulFunctionCall","src":"4396:12:9"},"nativeSrc":"4396:12:9","nodeType":"YulExpressionStatement","src":"4396:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4368:7:9","nodeType":"YulIdentifier","src":"4368:7:9"},{"name":"headStart","nativeSrc":"4377:9:9","nodeType":"YulIdentifier","src":"4377:9:9"}],"functionName":{"name":"sub","nativeSrc":"4364:3:9","nodeType":"YulIdentifier","src":"4364:3:9"},"nativeSrc":"4364:23:9","nodeType":"YulFunctionCall","src":"4364:23:9"},{"kind":"number","nativeSrc":"4389:3:9","nodeType":"YulLiteral","src":"4389:3:9","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"4360:3:9","nodeType":"YulIdentifier","src":"4360:3:9"},"nativeSrc":"4360:33:9","nodeType":"YulFunctionCall","src":"4360:33:9"},"nativeSrc":"4357:53:9","nodeType":"YulIf","src":"4357:53:9"},{"nativeSrc":"4419:39:9","nodeType":"YulAssignment","src":"4419:39:9","value":{"arguments":[{"name":"headStart","nativeSrc":"4448:9:9","nodeType":"YulIdentifier","src":"4448:9:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4429:18:9","nodeType":"YulIdentifier","src":"4429:18:9"},"nativeSrc":"4429:29:9","nodeType":"YulFunctionCall","src":"4429:29:9"},"variableNames":[{"name":"value0","nativeSrc":"4419:6:9","nodeType":"YulIdentifier","src":"4419:6:9"}]},{"nativeSrc":"4467:48:9","nodeType":"YulAssignment","src":"4467:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4500:9:9","nodeType":"YulIdentifier","src":"4500:9:9"},{"kind":"number","nativeSrc":"4511:2:9","nodeType":"YulLiteral","src":"4511:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4496:3:9","nodeType":"YulIdentifier","src":"4496:3:9"},"nativeSrc":"4496:18:9","nodeType":"YulFunctionCall","src":"4496:18:9"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4477:18:9","nodeType":"YulIdentifier","src":"4477:18:9"},"nativeSrc":"4477:38:9","nodeType":"YulFunctionCall","src":"4477:38:9"},"variableNames":[{"name":"value1","nativeSrc":"4467:6:9","nodeType":"YulIdentifier","src":"4467:6:9"}]},{"nativeSrc":"4524:42:9","nodeType":"YulAssignment","src":"4524:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4551:9:9","nodeType":"YulIdentifier","src":"4551:9:9"},{"kind":"number","nativeSrc":"4562:2:9","nodeType":"YulLiteral","src":"4562:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4547:3:9","nodeType":"YulIdentifier","src":"4547:3:9"},"nativeSrc":"4547:18:9","nodeType":"YulFunctionCall","src":"4547:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"4534:12:9","nodeType":"YulIdentifier","src":"4534:12:9"},"nativeSrc":"4534:32:9","nodeType":"YulFunctionCall","src":"4534:32:9"},"variableNames":[{"name":"value2","nativeSrc":"4524:6:9","nodeType":"YulIdentifier","src":"4524:6:9"}]},{"nativeSrc":"4575:42:9","nodeType":"YulAssignment","src":"4575:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4602:9:9","nodeType":"YulIdentifier","src":"4602:9:9"},{"kind":"number","nativeSrc":"4613:2:9","nodeType":"YulLiteral","src":"4613:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4598:3:9","nodeType":"YulIdentifier","src":"4598:3:9"},"nativeSrc":"4598:18:9","nodeType":"YulFunctionCall","src":"4598:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"4585:12:9","nodeType":"YulIdentifier","src":"4585:12:9"},"nativeSrc":"4585:32:9","nodeType":"YulFunctionCall","src":"4585:32:9"},"variableNames":[{"name":"value3","nativeSrc":"4575:6:9","nodeType":"YulIdentifier","src":"4575:6:9"}]},{"nativeSrc":"4626:47:9","nodeType":"YulVariableDeclaration","src":"4626:47:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4657:9:9","nodeType":"YulIdentifier","src":"4657:9:9"},{"kind":"number","nativeSrc":"4668:3:9","nodeType":"YulLiteral","src":"4668:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4653:3:9","nodeType":"YulIdentifier","src":"4653:3:9"},"nativeSrc":"4653:19:9","nodeType":"YulFunctionCall","src":"4653:19:9"}],"functionName":{"name":"calldataload","nativeSrc":"4640:12:9","nodeType":"YulIdentifier","src":"4640:12:9"},"nativeSrc":"4640:33:9","nodeType":"YulFunctionCall","src":"4640:33:9"},"variables":[{"name":"offset","nativeSrc":"4630:6:9","nodeType":"YulTypedName","src":"4630:6:9","type":""}]},{"body":{"nativeSrc":"4716:16:9","nodeType":"YulBlock","src":"4716:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4725:1:9","nodeType":"YulLiteral","src":"4725:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"4728:1:9","nodeType":"YulLiteral","src":"4728:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4718:6:9","nodeType":"YulIdentifier","src":"4718:6:9"},"nativeSrc":"4718:12:9","nodeType":"YulFunctionCall","src":"4718:12:9"},"nativeSrc":"4718:12:9","nodeType":"YulExpressionStatement","src":"4718:12:9"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4688:6:9","nodeType":"YulIdentifier","src":"4688:6:9"},{"kind":"number","nativeSrc":"4696:18:9","nodeType":"YulLiteral","src":"4696:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4685:2:9","nodeType":"YulIdentifier","src":"4685:2:9"},"nativeSrc":"4685:30:9","nodeType":"YulFunctionCall","src":"4685:30:9"},"nativeSrc":"4682:50:9","nodeType":"YulIf","src":"4682:50:9"},{"nativeSrc":"4741:84:9","nodeType":"YulVariableDeclaration","src":"4741:84:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4797:9:9","nodeType":"YulIdentifier","src":"4797:9:9"},{"name":"offset","nativeSrc":"4808:6:9","nodeType":"YulIdentifier","src":"4808:6:9"}],"functionName":{"name":"add","nativeSrc":"4793:3:9","nodeType":"YulIdentifier","src":"4793:3:9"},"nativeSrc":"4793:22:9","nodeType":"YulFunctionCall","src":"4793:22:9"},{"name":"dataEnd","nativeSrc":"4817:7:9","nodeType":"YulIdentifier","src":"4817:7:9"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4767:25:9","nodeType":"YulIdentifier","src":"4767:25:9"},"nativeSrc":"4767:58:9","nodeType":"YulFunctionCall","src":"4767:58:9"},"variables":[{"name":"value4_1","nativeSrc":"4745:8:9","nodeType":"YulTypedName","src":"4745:8:9","type":""},{"name":"value5_1","nativeSrc":"4755:8:9","nodeType":"YulTypedName","src":"4755:8:9","type":""}]},{"nativeSrc":"4834:18:9","nodeType":"YulAssignment","src":"4834:18:9","value":{"name":"value4_1","nativeSrc":"4844:8:9","nodeType":"YulIdentifier","src":"4844:8:9"},"variableNames":[{"name":"value4","nativeSrc":"4834:6:9","nodeType":"YulIdentifier","src":"4834:6:9"}]},{"nativeSrc":"4861:18:9","nodeType":"YulAssignment","src":"4861:18:9","value":{"name":"value5_1","nativeSrc":"4871:8:9","nodeType":"YulIdentifier","src":"4871:8:9"},"variableNames":[{"name":"value5","nativeSrc":"4861:6:9","nodeType":"YulIdentifier","src":"4861:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"4190:695:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4273:9:9","nodeType":"YulTypedName","src":"4273:9:9","type":""},{"name":"dataEnd","nativeSrc":"4284:7:9","nodeType":"YulTypedName","src":"4284:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4296:6:9","nodeType":"YulTypedName","src":"4296:6:9","type":""},{"name":"value1","nativeSrc":"4304:6:9","nodeType":"YulTypedName","src":"4304:6:9","type":""},{"name":"value2","nativeSrc":"4312:6:9","nodeType":"YulTypedName","src":"4312:6:9","type":""},{"name":"value3","nativeSrc":"4320:6:9","nodeType":"YulTypedName","src":"4320:6:9","type":""},{"name":"value4","nativeSrc":"4328:6:9","nodeType":"YulTypedName","src":"4328:6:9","type":""},{"name":"value5","nativeSrc":"4336:6:9","nodeType":"YulTypedName","src":"4336:6:9","type":""}],"src":"4190:695:9"},{"body":{"nativeSrc":"4922:152:9","nodeType":"YulBlock","src":"4922:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4939:1:9","nodeType":"YulLiteral","src":"4939:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"4942:77:9","nodeType":"YulLiteral","src":"4942:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4932:6:9","nodeType":"YulIdentifier","src":"4932:6:9"},"nativeSrc":"4932:88:9","nodeType":"YulFunctionCall","src":"4932:88:9"},"nativeSrc":"4932:88:9","nodeType":"YulExpressionStatement","src":"4932:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5036:1:9","nodeType":"YulLiteral","src":"5036:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"5039:4:9","nodeType":"YulLiteral","src":"5039:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5029:6:9","nodeType":"YulIdentifier","src":"5029:6:9"},"nativeSrc":"5029:15:9","nodeType":"YulFunctionCall","src":"5029:15:9"},"nativeSrc":"5029:15:9","nodeType":"YulExpressionStatement","src":"5029:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5060:1:9","nodeType":"YulLiteral","src":"5060:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5063:4:9","nodeType":"YulLiteral","src":"5063:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5053:6:9","nodeType":"YulIdentifier","src":"5053:6:9"},"nativeSrc":"5053:15:9","nodeType":"YulFunctionCall","src":"5053:15:9"},"nativeSrc":"5053:15:9","nodeType":"YulExpressionStatement","src":"5053:15:9"}]},"name":"panic_error_0x11","nativeSrc":"4890:184:9","nodeType":"YulFunctionDefinition","src":"4890:184:9"},{"body":{"nativeSrc":"5128:79:9","nodeType":"YulBlock","src":"5128:79:9","statements":[{"nativeSrc":"5138:17:9","nodeType":"YulAssignment","src":"5138:17:9","value":{"arguments":[{"name":"x","nativeSrc":"5150:1:9","nodeType":"YulIdentifier","src":"5150:1:9"},{"name":"y","nativeSrc":"5153:1:9","nodeType":"YulIdentifier","src":"5153:1:9"}],"functionName":{"name":"sub","nativeSrc":"5146:3:9","nodeType":"YulIdentifier","src":"5146:3:9"},"nativeSrc":"5146:9:9","nodeType":"YulFunctionCall","src":"5146:9:9"},"variableNames":[{"name":"diff","nativeSrc":"5138:4:9","nodeType":"YulIdentifier","src":"5138:4:9"}]},{"body":{"nativeSrc":"5179:22:9","nodeType":"YulBlock","src":"5179:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5181:16:9","nodeType":"YulIdentifier","src":"5181:16:9"},"nativeSrc":"5181:18:9","nodeType":"YulFunctionCall","src":"5181:18:9"},"nativeSrc":"5181:18:9","nodeType":"YulExpressionStatement","src":"5181:18:9"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5170:4:9","nodeType":"YulIdentifier","src":"5170:4:9"},{"name":"x","nativeSrc":"5176:1:9","nodeType":"YulIdentifier","src":"5176:1:9"}],"functionName":{"name":"gt","nativeSrc":"5167:2:9","nodeType":"YulIdentifier","src":"5167:2:9"},"nativeSrc":"5167:11:9","nodeType":"YulFunctionCall","src":"5167:11:9"},"nativeSrc":"5164:37:9","nodeType":"YulIf","src":"5164:37:9"}]},"name":"checked_sub_t_uint256","nativeSrc":"5079:128:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5110:1:9","nodeType":"YulTypedName","src":"5110:1:9","type":""},{"name":"y","nativeSrc":"5113:1:9","nodeType":"YulTypedName","src":"5113:1:9","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5119:4:9","nodeType":"YulTypedName","src":"5119:4:9","type":""}],"src":"5079:128:9"},{"body":{"nativeSrc":"5258:228:9","nodeType":"YulBlock","src":"5258:228:9","statements":[{"body":{"nativeSrc":"5289:168:9","nodeType":"YulBlock","src":"5289:168:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5310:1:9","nodeType":"YulLiteral","src":"5310:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5313:77:9","nodeType":"YulLiteral","src":"5313:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5303:6:9","nodeType":"YulIdentifier","src":"5303:6:9"},"nativeSrc":"5303:88:9","nodeType":"YulFunctionCall","src":"5303:88:9"},"nativeSrc":"5303:88:9","nodeType":"YulExpressionStatement","src":"5303:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5411:1:9","nodeType":"YulLiteral","src":"5411:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"5414:4:9","nodeType":"YulLiteral","src":"5414:4:9","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"5404:6:9","nodeType":"YulIdentifier","src":"5404:6:9"},"nativeSrc":"5404:15:9","nodeType":"YulFunctionCall","src":"5404:15:9"},"nativeSrc":"5404:15:9","nodeType":"YulExpressionStatement","src":"5404:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5439:1:9","nodeType":"YulLiteral","src":"5439:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5442:4:9","nodeType":"YulLiteral","src":"5442:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5432:6:9","nodeType":"YulIdentifier","src":"5432:6:9"},"nativeSrc":"5432:15:9","nodeType":"YulFunctionCall","src":"5432:15:9"},"nativeSrc":"5432:15:9","nodeType":"YulExpressionStatement","src":"5432:15:9"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5278:1:9","nodeType":"YulIdentifier","src":"5278:1:9"}],"functionName":{"name":"iszero","nativeSrc":"5271:6:9","nodeType":"YulIdentifier","src":"5271:6:9"},"nativeSrc":"5271:9:9","nodeType":"YulFunctionCall","src":"5271:9:9"},"nativeSrc":"5268:189:9","nodeType":"YulIf","src":"5268:189:9"},{"nativeSrc":"5466:14:9","nodeType":"YulAssignment","src":"5466:14:9","value":{"arguments":[{"name":"x","nativeSrc":"5475:1:9","nodeType":"YulIdentifier","src":"5475:1:9"},{"name":"y","nativeSrc":"5478:1:9","nodeType":"YulIdentifier","src":"5478:1:9"}],"functionName":{"name":"div","nativeSrc":"5471:3:9","nodeType":"YulIdentifier","src":"5471:3:9"},"nativeSrc":"5471:9:9","nodeType":"YulFunctionCall","src":"5471:9:9"},"variableNames":[{"name":"r","nativeSrc":"5466:1:9","nodeType":"YulIdentifier","src":"5466:1:9"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5212:274:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5243:1:9","nodeType":"YulTypedName","src":"5243:1:9","type":""},{"name":"y","nativeSrc":"5246:1:9","nodeType":"YulTypedName","src":"5246:1:9","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5252:1:9","nodeType":"YulTypedName","src":"5252:1:9","type":""}],"src":"5212:274:9"},{"body":{"nativeSrc":"5592:125:9","nodeType":"YulBlock","src":"5592:125:9","statements":[{"nativeSrc":"5602:26:9","nodeType":"YulAssignment","src":"5602:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"5614:9:9","nodeType":"YulIdentifier","src":"5614:9:9"},{"kind":"number","nativeSrc":"5625:2:9","nodeType":"YulLiteral","src":"5625:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5610:3:9","nodeType":"YulIdentifier","src":"5610:3:9"},"nativeSrc":"5610:18:9","nodeType":"YulFunctionCall","src":"5610:18:9"},"variableNames":[{"name":"tail","nativeSrc":"5602:4:9","nodeType":"YulIdentifier","src":"5602:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5644:9:9","nodeType":"YulIdentifier","src":"5644:9:9"},{"arguments":[{"name":"value0","nativeSrc":"5659:6:9","nodeType":"YulIdentifier","src":"5659:6:9"},{"kind":"number","nativeSrc":"5667:42:9","nodeType":"YulLiteral","src":"5667:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5655:3:9","nodeType":"YulIdentifier","src":"5655:3:9"},"nativeSrc":"5655:55:9","nodeType":"YulFunctionCall","src":"5655:55:9"}],"functionName":{"name":"mstore","nativeSrc":"5637:6:9","nodeType":"YulIdentifier","src":"5637:6:9"},"nativeSrc":"5637:74:9","nodeType":"YulFunctionCall","src":"5637:74:9"},"nativeSrc":"5637:74:9","nodeType":"YulExpressionStatement","src":"5637:74:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"5491:226:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5561:9:9","nodeType":"YulTypedName","src":"5561:9:9","type":""},{"name":"value0","nativeSrc":"5572:6:9","nodeType":"YulTypedName","src":"5572:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5583:4:9","nodeType":"YulTypedName","src":"5583:4:9","type":""}],"src":"5491:226:9"},{"body":{"nativeSrc":"5800:280:9","nodeType":"YulBlock","src":"5800:280:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5817:3:9","nodeType":"YulIdentifier","src":"5817:3:9"},{"name":"length","nativeSrc":"5822:6:9","nodeType":"YulIdentifier","src":"5822:6:9"}],"functionName":{"name":"mstore","nativeSrc":"5810:6:9","nodeType":"YulIdentifier","src":"5810:6:9"},"nativeSrc":"5810:19:9","nodeType":"YulFunctionCall","src":"5810:19:9"},"nativeSrc":"5810:19:9","nodeType":"YulExpressionStatement","src":"5810:19:9"},{"body":{"nativeSrc":"5920:16:9","nodeType":"YulBlock","src":"5920:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5929:1:9","nodeType":"YulLiteral","src":"5929:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"5932:1:9","nodeType":"YulLiteral","src":"5932:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5922:6:9","nodeType":"YulIdentifier","src":"5922:6:9"},"nativeSrc":"5922:12:9","nodeType":"YulFunctionCall","src":"5922:12:9"},"nativeSrc":"5922:12:9","nodeType":"YulExpressionStatement","src":"5922:12:9"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"5844:6:9","nodeType":"YulIdentifier","src":"5844:6:9"},{"kind":"number","nativeSrc":"5852:66:9","nodeType":"YulLiteral","src":"5852:66:9","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5841:2:9","nodeType":"YulIdentifier","src":"5841:2:9"},"nativeSrc":"5841:78:9","nodeType":"YulFunctionCall","src":"5841:78:9"},"nativeSrc":"5838:98:9","nodeType":"YulIf","src":"5838:98:9"},{"nativeSrc":"5945:30:9","nodeType":"YulVariableDeclaration","src":"5945:30:9","value":{"arguments":[{"kind":"number","nativeSrc":"5965:1:9","nodeType":"YulLiteral","src":"5965:1:9","type":"","value":"5"},{"name":"length","nativeSrc":"5968:6:9","nodeType":"YulIdentifier","src":"5968:6:9"}],"functionName":{"name":"shl","nativeSrc":"5961:3:9","nodeType":"YulIdentifier","src":"5961:3:9"},"nativeSrc":"5961:14:9","nodeType":"YulFunctionCall","src":"5961:14:9"},"variables":[{"name":"length_1","nativeSrc":"5949:8:9","nodeType":"YulTypedName","src":"5949:8:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6001:3:9","nodeType":"YulIdentifier","src":"6001:3:9"},{"kind":"number","nativeSrc":"6006:4:9","nodeType":"YulLiteral","src":"6006:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5997:3:9","nodeType":"YulIdentifier","src":"5997:3:9"},"nativeSrc":"5997:14:9","nodeType":"YulFunctionCall","src":"5997:14:9"},{"name":"start","nativeSrc":"6013:5:9","nodeType":"YulIdentifier","src":"6013:5:9"},{"name":"length_1","nativeSrc":"6020:8:9","nodeType":"YulIdentifier","src":"6020:8:9"}],"functionName":{"name":"calldatacopy","nativeSrc":"5984:12:9","nodeType":"YulIdentifier","src":"5984:12:9"},"nativeSrc":"5984:45:9","nodeType":"YulFunctionCall","src":"5984:45:9"},"nativeSrc":"5984:45:9","nodeType":"YulExpressionStatement","src":"5984:45:9"},{"nativeSrc":"6038:36:9","nodeType":"YulAssignment","src":"6038:36:9","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6053:3:9","nodeType":"YulIdentifier","src":"6053:3:9"},{"name":"length_1","nativeSrc":"6058:8:9","nodeType":"YulIdentifier","src":"6058:8:9"}],"functionName":{"name":"add","nativeSrc":"6049:3:9","nodeType":"YulIdentifier","src":"6049:3:9"},"nativeSrc":"6049:18:9","nodeType":"YulFunctionCall","src":"6049:18:9"},{"kind":"number","nativeSrc":"6069:4:9","nodeType":"YulLiteral","src":"6069:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6045:3:9","nodeType":"YulIdentifier","src":"6045:3:9"},"nativeSrc":"6045:29:9","nodeType":"YulFunctionCall","src":"6045:29:9"},"variableNames":[{"name":"end","nativeSrc":"6038:3:9","nodeType":"YulIdentifier","src":"6038:3:9"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"5722:358:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"5769:5:9","nodeType":"YulTypedName","src":"5769:5:9","type":""},{"name":"length","nativeSrc":"5776:6:9","nodeType":"YulTypedName","src":"5776:6:9","type":""},{"name":"pos","nativeSrc":"5784:3:9","nodeType":"YulTypedName","src":"5784:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5792:3:9","nodeType":"YulTypedName","src":"5792:3:9","type":""}],"src":"5722:358:9"},{"body":{"nativeSrc":"6362:362:9","nodeType":"YulBlock","src":"6362:362:9","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6379:9:9","nodeType":"YulIdentifier","src":"6379:9:9"},{"arguments":[{"name":"value0","nativeSrc":"6394:6:9","nodeType":"YulIdentifier","src":"6394:6:9"},{"kind":"number","nativeSrc":"6402:42:9","nodeType":"YulLiteral","src":"6402:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6390:3:9","nodeType":"YulIdentifier","src":"6390:3:9"},"nativeSrc":"6390:55:9","nodeType":"YulFunctionCall","src":"6390:55:9"}],"functionName":{"name":"mstore","nativeSrc":"6372:6:9","nodeType":"YulIdentifier","src":"6372:6:9"},"nativeSrc":"6372:74:9","nodeType":"YulFunctionCall","src":"6372:74:9"},"nativeSrc":"6372:74:9","nodeType":"YulExpressionStatement","src":"6372:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6466:9:9","nodeType":"YulIdentifier","src":"6466:9:9"},{"kind":"number","nativeSrc":"6477:2:9","nodeType":"YulLiteral","src":"6477:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6462:3:9","nodeType":"YulIdentifier","src":"6462:3:9"},"nativeSrc":"6462:18:9","nodeType":"YulFunctionCall","src":"6462:18:9"},{"kind":"number","nativeSrc":"6482:2:9","nodeType":"YulLiteral","src":"6482:2:9","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"6455:6:9","nodeType":"YulIdentifier","src":"6455:6:9"},"nativeSrc":"6455:30:9","nodeType":"YulFunctionCall","src":"6455:30:9"},"nativeSrc":"6455:30:9","nodeType":"YulExpressionStatement","src":"6455:30:9"},{"nativeSrc":"6494:87:9","nodeType":"YulVariableDeclaration","src":"6494:87:9","value":{"arguments":[{"name":"value1","nativeSrc":"6546:6:9","nodeType":"YulIdentifier","src":"6546:6:9"},{"name":"value2","nativeSrc":"6554:6:9","nodeType":"YulIdentifier","src":"6554:6:9"},{"arguments":[{"name":"headStart","nativeSrc":"6566:9:9","nodeType":"YulIdentifier","src":"6566:9:9"},{"kind":"number","nativeSrc":"6577:2:9","nodeType":"YulLiteral","src":"6577:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6562:3:9","nodeType":"YulIdentifier","src":"6562:3:9"},"nativeSrc":"6562:18:9","nodeType":"YulFunctionCall","src":"6562:18:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6508:37:9","nodeType":"YulIdentifier","src":"6508:37:9"},"nativeSrc":"6508:73:9","nodeType":"YulFunctionCall","src":"6508:73:9"},"variables":[{"name":"tail_1","nativeSrc":"6498:6:9","nodeType":"YulTypedName","src":"6498:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6601:9:9","nodeType":"YulIdentifier","src":"6601:9:9"},{"kind":"number","nativeSrc":"6612:2:9","nodeType":"YulLiteral","src":"6612:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6597:3:9","nodeType":"YulIdentifier","src":"6597:3:9"},"nativeSrc":"6597:18:9","nodeType":"YulFunctionCall","src":"6597:18:9"},{"arguments":[{"name":"tail_1","nativeSrc":"6621:6:9","nodeType":"YulIdentifier","src":"6621:6:9"},{"name":"headStart","nativeSrc":"6629:9:9","nodeType":"YulIdentifier","src":"6629:9:9"}],"functionName":{"name":"sub","nativeSrc":"6617:3:9","nodeType":"YulIdentifier","src":"6617:3:9"},"nativeSrc":"6617:22:9","nodeType":"YulFunctionCall","src":"6617:22:9"}],"functionName":{"name":"mstore","nativeSrc":"6590:6:9","nodeType":"YulIdentifier","src":"6590:6:9"},"nativeSrc":"6590:50:9","nodeType":"YulFunctionCall","src":"6590:50:9"},"nativeSrc":"6590:50:9","nodeType":"YulExpressionStatement","src":"6590:50:9"},{"nativeSrc":"6649:69:9","nodeType":"YulAssignment","src":"6649:69:9","value":{"arguments":[{"name":"value3","nativeSrc":"6695:6:9","nodeType":"YulIdentifier","src":"6695:6:9"},{"name":"value4","nativeSrc":"6703:6:9","nodeType":"YulIdentifier","src":"6703:6:9"},{"name":"tail_1","nativeSrc":"6711:6:9","nodeType":"YulIdentifier","src":"6711:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6657:37:9","nodeType":"YulIdentifier","src":"6657:37:9"},"nativeSrc":"6657:61:9","nodeType":"YulFunctionCall","src":"6657:61:9"},"variableNames":[{"name":"tail","nativeSrc":"6649:4:9","nodeType":"YulIdentifier","src":"6649:4:9"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6085:639:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6299:9:9","nodeType":"YulTypedName","src":"6299:9:9","type":""},{"name":"value4","nativeSrc":"6310:6:9","nodeType":"YulTypedName","src":"6310:6:9","type":""},{"name":"value3","nativeSrc":"6318:6:9","nodeType":"YulTypedName","src":"6318:6:9","type":""},{"name":"value2","nativeSrc":"6326:6:9","nodeType":"YulTypedName","src":"6326:6:9","type":""},{"name":"value1","nativeSrc":"6334:6:9","nodeType":"YulTypedName","src":"6334:6:9","type":""},{"name":"value0","nativeSrc":"6342:6:9","nodeType":"YulTypedName","src":"6342:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6353:4:9","nodeType":"YulTypedName","src":"6353:4:9","type":""}],"src":"6085:639:9"},{"body":{"nativeSrc":"6761:152:9","nodeType":"YulBlock","src":"6761:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6778:1:9","nodeType":"YulLiteral","src":"6778:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"6781:77:9","nodeType":"YulLiteral","src":"6781:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6771:6:9","nodeType":"YulIdentifier","src":"6771:6:9"},"nativeSrc":"6771:88:9","nodeType":"YulFunctionCall","src":"6771:88:9"},"nativeSrc":"6771:88:9","nodeType":"YulExpressionStatement","src":"6771:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6875:1:9","nodeType":"YulLiteral","src":"6875:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"6878:4:9","nodeType":"YulLiteral","src":"6878:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6868:6:9","nodeType":"YulIdentifier","src":"6868:6:9"},"nativeSrc":"6868:15:9","nodeType":"YulFunctionCall","src":"6868:15:9"},"nativeSrc":"6868:15:9","nodeType":"YulExpressionStatement","src":"6868:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6899:1:9","nodeType":"YulLiteral","src":"6899:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"6902:4:9","nodeType":"YulLiteral","src":"6902:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6892:6:9","nodeType":"YulIdentifier","src":"6892:6:9"},"nativeSrc":"6892:15:9","nodeType":"YulFunctionCall","src":"6892:15:9"},"nativeSrc":"6892:15:9","nodeType":"YulExpressionStatement","src":"6892:15:9"}]},"name":"panic_error_0x32","nativeSrc":"6729:184:9","nodeType":"YulFunctionDefinition","src":"6729:184:9"},{"body":{"nativeSrc":"7075:211:9","nodeType":"YulBlock","src":"7075:211:9","statements":[{"nativeSrc":"7085:26:9","nodeType":"YulAssignment","src":"7085:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"7097:9:9","nodeType":"YulIdentifier","src":"7097:9:9"},{"kind":"number","nativeSrc":"7108:2:9","nodeType":"YulLiteral","src":"7108:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7093:3:9","nodeType":"YulIdentifier","src":"7093:3:9"},"nativeSrc":"7093:18:9","nodeType":"YulFunctionCall","src":"7093:18:9"},"variableNames":[{"name":"tail","nativeSrc":"7085:4:9","nodeType":"YulIdentifier","src":"7085:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7127:9:9","nodeType":"YulIdentifier","src":"7127:9:9"},{"arguments":[{"name":"value0","nativeSrc":"7142:6:9","nodeType":"YulIdentifier","src":"7142:6:9"},{"kind":"number","nativeSrc":"7150:42:9","nodeType":"YulLiteral","src":"7150:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7138:3:9","nodeType":"YulIdentifier","src":"7138:3:9"},"nativeSrc":"7138:55:9","nodeType":"YulFunctionCall","src":"7138:55:9"}],"functionName":{"name":"mstore","nativeSrc":"7120:6:9","nodeType":"YulIdentifier","src":"7120:6:9"},"nativeSrc":"7120:74:9","nodeType":"YulFunctionCall","src":"7120:74:9"},"nativeSrc":"7120:74:9","nodeType":"YulExpressionStatement","src":"7120:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7214:9:9","nodeType":"YulIdentifier","src":"7214:9:9"},{"kind":"number","nativeSrc":"7225:2:9","nodeType":"YulLiteral","src":"7225:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7210:3:9","nodeType":"YulIdentifier","src":"7210:3:9"},"nativeSrc":"7210:18:9","nodeType":"YulFunctionCall","src":"7210:18:9"},{"name":"value1","nativeSrc":"7230:6:9","nodeType":"YulIdentifier","src":"7230:6:9"}],"functionName":{"name":"mstore","nativeSrc":"7203:6:9","nodeType":"YulIdentifier","src":"7203:6:9"},"nativeSrc":"7203:34:9","nodeType":"YulFunctionCall","src":"7203:34:9"},"nativeSrc":"7203:34:9","nodeType":"YulExpressionStatement","src":"7203:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7257:9:9","nodeType":"YulIdentifier","src":"7257:9:9"},{"kind":"number","nativeSrc":"7268:2:9","nodeType":"YulLiteral","src":"7268:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7253:3:9","nodeType":"YulIdentifier","src":"7253:3:9"},"nativeSrc":"7253:18:9","nodeType":"YulFunctionCall","src":"7253:18:9"},{"name":"value2","nativeSrc":"7273:6:9","nodeType":"YulIdentifier","src":"7273:6:9"}],"functionName":{"name":"mstore","nativeSrc":"7246:6:9","nodeType":"YulIdentifier","src":"7246:6:9"},"nativeSrc":"7246:34:9","nodeType":"YulFunctionCall","src":"7246:34:9"},"nativeSrc":"7246:34:9","nodeType":"YulExpressionStatement","src":"7246:34:9"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"6918:368:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7028:9:9","nodeType":"YulTypedName","src":"7028:9:9","type":""},{"name":"value2","nativeSrc":"7039:6:9","nodeType":"YulTypedName","src":"7039:6:9","type":""},{"name":"value1","nativeSrc":"7047:6:9","nodeType":"YulTypedName","src":"7047:6:9","type":""},{"name":"value0","nativeSrc":"7055:6:9","nodeType":"YulTypedName","src":"7055:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7066:4:9","nodeType":"YulTypedName","src":"7066:4:9","type":""}],"src":"6918:368:9"},{"body":{"nativeSrc":"7343:116:9","nodeType":"YulBlock","src":"7343:116:9","statements":[{"nativeSrc":"7353:20:9","nodeType":"YulAssignment","src":"7353:20:9","value":{"arguments":[{"name":"x","nativeSrc":"7368:1:9","nodeType":"YulIdentifier","src":"7368:1:9"},{"name":"y","nativeSrc":"7371:1:9","nodeType":"YulIdentifier","src":"7371:1:9"}],"functionName":{"name":"mul","nativeSrc":"7364:3:9","nodeType":"YulIdentifier","src":"7364:3:9"},"nativeSrc":"7364:9:9","nodeType":"YulFunctionCall","src":"7364:9:9"},"variableNames":[{"name":"product","nativeSrc":"7353:7:9","nodeType":"YulIdentifier","src":"7353:7:9"}]},{"body":{"nativeSrc":"7431:22:9","nodeType":"YulBlock","src":"7431:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7433:16:9","nodeType":"YulIdentifier","src":"7433:16:9"},"nativeSrc":"7433:18:9","nodeType":"YulFunctionCall","src":"7433:18:9"},"nativeSrc":"7433:18:9","nodeType":"YulExpressionStatement","src":"7433:18:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"7402:1:9","nodeType":"YulIdentifier","src":"7402:1:9"}],"functionName":{"name":"iszero","nativeSrc":"7395:6:9","nodeType":"YulIdentifier","src":"7395:6:9"},"nativeSrc":"7395:9:9","nodeType":"YulFunctionCall","src":"7395:9:9"},{"arguments":[{"name":"y","nativeSrc":"7409:1:9","nodeType":"YulIdentifier","src":"7409:1:9"},{"arguments":[{"name":"product","nativeSrc":"7416:7:9","nodeType":"YulIdentifier","src":"7416:7:9"},{"name":"x","nativeSrc":"7425:1:9","nodeType":"YulIdentifier","src":"7425:1:9"}],"functionName":{"name":"div","nativeSrc":"7412:3:9","nodeType":"YulIdentifier","src":"7412:3:9"},"nativeSrc":"7412:15:9","nodeType":"YulFunctionCall","src":"7412:15:9"}],"functionName":{"name":"eq","nativeSrc":"7406:2:9","nodeType":"YulIdentifier","src":"7406:2:9"},"nativeSrc":"7406:22:9","nodeType":"YulFunctionCall","src":"7406:22:9"}],"functionName":{"name":"or","nativeSrc":"7392:2:9","nodeType":"YulIdentifier","src":"7392:2:9"},"nativeSrc":"7392:37:9","nodeType":"YulFunctionCall","src":"7392:37:9"}],"functionName":{"name":"iszero","nativeSrc":"7385:6:9","nodeType":"YulIdentifier","src":"7385:6:9"},"nativeSrc":"7385:45:9","nodeType":"YulFunctionCall","src":"7385:45:9"},"nativeSrc":"7382:71:9","nodeType":"YulIf","src":"7382:71:9"}]},"name":"checked_mul_t_uint256","nativeSrc":"7291:168:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7322:1:9","nodeType":"YulTypedName","src":"7322:1:9","type":""},{"name":"y","nativeSrc":"7325:1:9","nodeType":"YulTypedName","src":"7325:1:9","type":""}],"returnVariables":[{"name":"product","nativeSrc":"7331:7:9","nodeType":"YulTypedName","src":"7331:7:9","type":""}],"src":"7291:168:9"},{"body":{"nativeSrc":"7512:77:9","nodeType":"YulBlock","src":"7512:77:9","statements":[{"nativeSrc":"7522:16:9","nodeType":"YulAssignment","src":"7522:16:9","value":{"arguments":[{"name":"x","nativeSrc":"7533:1:9","nodeType":"YulIdentifier","src":"7533:1:9"},{"name":"y","nativeSrc":"7536:1:9","nodeType":"YulIdentifier","src":"7536:1:9"}],"functionName":{"name":"add","nativeSrc":"7529:3:9","nodeType":"YulIdentifier","src":"7529:3:9"},"nativeSrc":"7529:9:9","nodeType":"YulFunctionCall","src":"7529:9:9"},"variableNames":[{"name":"sum","nativeSrc":"7522:3:9","nodeType":"YulIdentifier","src":"7522:3:9"}]},{"body":{"nativeSrc":"7561:22:9","nodeType":"YulBlock","src":"7561:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7563:16:9","nodeType":"YulIdentifier","src":"7563:16:9"},"nativeSrc":"7563:18:9","nodeType":"YulFunctionCall","src":"7563:18:9"},"nativeSrc":"7563:18:9","nodeType":"YulExpressionStatement","src":"7563:18:9"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"7553:1:9","nodeType":"YulIdentifier","src":"7553:1:9"},{"name":"sum","nativeSrc":"7556:3:9","nodeType":"YulIdentifier","src":"7556:3:9"}],"functionName":{"name":"gt","nativeSrc":"7550:2:9","nodeType":"YulIdentifier","src":"7550:2:9"},"nativeSrc":"7550:10:9","nodeType":"YulFunctionCall","src":"7550:10:9"},"nativeSrc":"7547:36:9","nodeType":"YulIf","src":"7547:36:9"}]},"name":"checked_add_t_uint256","nativeSrc":"7464:125:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7495:1:9","nodeType":"YulTypedName","src":"7495:1:9","type":""},{"name":"y","nativeSrc":"7498:1:9","nodeType":"YulTypedName","src":"7498:1:9","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"7504:3:9","nodeType":"YulTypedName","src":"7504:3:9","type":""}],"src":"7464:125:9"},{"body":{"nativeSrc":"7723:168:9","nodeType":"YulBlock","src":"7723:168:9","statements":[{"nativeSrc":"7733:26:9","nodeType":"YulAssignment","src":"7733:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"7745:9:9","nodeType":"YulIdentifier","src":"7745:9:9"},{"kind":"number","nativeSrc":"7756:2:9","nodeType":"YulLiteral","src":"7756:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7741:3:9","nodeType":"YulIdentifier","src":"7741:3:9"},"nativeSrc":"7741:18:9","nodeType":"YulFunctionCall","src":"7741:18:9"},"variableNames":[{"name":"tail","nativeSrc":"7733:4:9","nodeType":"YulIdentifier","src":"7733:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7775:9:9","nodeType":"YulIdentifier","src":"7775:9:9"},{"arguments":[{"name":"value0","nativeSrc":"7790:6:9","nodeType":"YulIdentifier","src":"7790:6:9"},{"kind":"number","nativeSrc":"7798:42:9","nodeType":"YulLiteral","src":"7798:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7786:3:9","nodeType":"YulIdentifier","src":"7786:3:9"},"nativeSrc":"7786:55:9","nodeType":"YulFunctionCall","src":"7786:55:9"}],"functionName":{"name":"mstore","nativeSrc":"7768:6:9","nodeType":"YulIdentifier","src":"7768:6:9"},"nativeSrc":"7768:74:9","nodeType":"YulFunctionCall","src":"7768:74:9"},"nativeSrc":"7768:74:9","nodeType":"YulExpressionStatement","src":"7768:74:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7862:9:9","nodeType":"YulIdentifier","src":"7862:9:9"},{"kind":"number","nativeSrc":"7873:2:9","nodeType":"YulLiteral","src":"7873:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7858:3:9","nodeType":"YulIdentifier","src":"7858:3:9"},"nativeSrc":"7858:18:9","nodeType":"YulFunctionCall","src":"7858:18:9"},{"name":"value1","nativeSrc":"7878:6:9","nodeType":"YulIdentifier","src":"7878:6:9"}],"functionName":{"name":"mstore","nativeSrc":"7851:6:9","nodeType":"YulIdentifier","src":"7851:6:9"},"nativeSrc":"7851:34:9","nodeType":"YulFunctionCall","src":"7851:34:9"},"nativeSrc":"7851:34:9","nodeType":"YulExpressionStatement","src":"7851:34:9"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7594:297:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7684:9:9","nodeType":"YulTypedName","src":"7684:9:9","type":""},{"name":"value1","nativeSrc":"7695:6:9","nodeType":"YulTypedName","src":"7695:6:9","type":""},{"name":"value0","nativeSrc":"7703:6:9","nodeType":"YulTypedName","src":"7703:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7714:4:9","nodeType":"YulTypedName","src":"7714:4:9","type":""}],"src":"7594:297:9"},{"body":{"nativeSrc":"7928:152:9","nodeType":"YulBlock","src":"7928:152:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7945:1:9","nodeType":"YulLiteral","src":"7945:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"7948:77:9","nodeType":"YulLiteral","src":"7948:77:9","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7938:6:9","nodeType":"YulIdentifier","src":"7938:6:9"},"nativeSrc":"7938:88:9","nodeType":"YulFunctionCall","src":"7938:88:9"},"nativeSrc":"7938:88:9","nodeType":"YulExpressionStatement","src":"7938:88:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8042:1:9","nodeType":"YulLiteral","src":"8042:1:9","type":"","value":"4"},{"kind":"number","nativeSrc":"8045:4:9","nodeType":"YulLiteral","src":"8045:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8035:6:9","nodeType":"YulIdentifier","src":"8035:6:9"},"nativeSrc":"8035:15:9","nodeType":"YulFunctionCall","src":"8035:15:9"},"nativeSrc":"8035:15:9","nodeType":"YulExpressionStatement","src":"8035:15:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8066:1:9","nodeType":"YulLiteral","src":"8066:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8069:4:9","nodeType":"YulLiteral","src":"8069:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8059:6:9","nodeType":"YulIdentifier","src":"8059:6:9"},"nativeSrc":"8059:15:9","nodeType":"YulFunctionCall","src":"8059:15:9"},"nativeSrc":"8059:15:9","nodeType":"YulExpressionStatement","src":"8059:15:9"}]},"name":"panic_error_0x41","nativeSrc":"7896:184:9","nodeType":"YulFunctionDefinition","src":"7896:184:9"},{"body":{"nativeSrc":"8197:1132:9","nodeType":"YulBlock","src":"8197:1132:9","statements":[{"body":{"nativeSrc":"8243:16:9","nodeType":"YulBlock","src":"8243:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8252:1:9","nodeType":"YulLiteral","src":"8252:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8255:1:9","nodeType":"YulLiteral","src":"8255:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8245:6:9","nodeType":"YulIdentifier","src":"8245:6:9"},"nativeSrc":"8245:12:9","nodeType":"YulFunctionCall","src":"8245:12:9"},"nativeSrc":"8245:12:9","nodeType":"YulExpressionStatement","src":"8245:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8218:7:9","nodeType":"YulIdentifier","src":"8218:7:9"},{"name":"headStart","nativeSrc":"8227:9:9","nodeType":"YulIdentifier","src":"8227:9:9"}],"functionName":{"name":"sub","nativeSrc":"8214:3:9","nodeType":"YulIdentifier","src":"8214:3:9"},"nativeSrc":"8214:23:9","nodeType":"YulFunctionCall","src":"8214:23:9"},{"kind":"number","nativeSrc":"8239:2:9","nodeType":"YulLiteral","src":"8239:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8210:3:9","nodeType":"YulIdentifier","src":"8210:3:9"},"nativeSrc":"8210:32:9","nodeType":"YulFunctionCall","src":"8210:32:9"},"nativeSrc":"8207:52:9","nodeType":"YulIf","src":"8207:52:9"},{"nativeSrc":"8268:37:9","nodeType":"YulVariableDeclaration","src":"8268:37:9","value":{"arguments":[{"name":"headStart","nativeSrc":"8295:9:9","nodeType":"YulIdentifier","src":"8295:9:9"}],"functionName":{"name":"calldataload","nativeSrc":"8282:12:9","nodeType":"YulIdentifier","src":"8282:12:9"},"nativeSrc":"8282:23:9","nodeType":"YulFunctionCall","src":"8282:23:9"},"variables":[{"name":"offset","nativeSrc":"8272:6:9","nodeType":"YulTypedName","src":"8272:6:9","type":""}]},{"nativeSrc":"8314:28:9","nodeType":"YulVariableDeclaration","src":"8314:28:9","value":{"kind":"number","nativeSrc":"8324:18:9","nodeType":"YulLiteral","src":"8324:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8318:2:9","nodeType":"YulTypedName","src":"8318:2:9","type":""}]},{"body":{"nativeSrc":"8369:16:9","nodeType":"YulBlock","src":"8369:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8378:1:9","nodeType":"YulLiteral","src":"8378:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8381:1:9","nodeType":"YulLiteral","src":"8381:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8371:6:9","nodeType":"YulIdentifier","src":"8371:6:9"},"nativeSrc":"8371:12:9","nodeType":"YulFunctionCall","src":"8371:12:9"},"nativeSrc":"8371:12:9","nodeType":"YulExpressionStatement","src":"8371:12:9"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8357:6:9","nodeType":"YulIdentifier","src":"8357:6:9"},{"name":"_1","nativeSrc":"8365:2:9","nodeType":"YulIdentifier","src":"8365:2:9"}],"functionName":{"name":"gt","nativeSrc":"8354:2:9","nodeType":"YulIdentifier","src":"8354:2:9"},"nativeSrc":"8354:14:9","nodeType":"YulFunctionCall","src":"8354:14:9"},"nativeSrc":"8351:34:9","nodeType":"YulIf","src":"8351:34:9"},{"nativeSrc":"8394:32:9","nodeType":"YulVariableDeclaration","src":"8394:32:9","value":{"arguments":[{"name":"headStart","nativeSrc":"8408:9:9","nodeType":"YulIdentifier","src":"8408:9:9"},{"name":"offset","nativeSrc":"8419:6:9","nodeType":"YulIdentifier","src":"8419:6:9"}],"functionName":{"name":"add","nativeSrc":"8404:3:9","nodeType":"YulIdentifier","src":"8404:3:9"},"nativeSrc":"8404:22:9","nodeType":"YulFunctionCall","src":"8404:22:9"},"variables":[{"name":"_2","nativeSrc":"8398:2:9","nodeType":"YulTypedName","src":"8398:2:9","type":""}]},{"body":{"nativeSrc":"8474:16:9","nodeType":"YulBlock","src":"8474:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8483:1:9","nodeType":"YulLiteral","src":"8483:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"8486:1:9","nodeType":"YulLiteral","src":"8486:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8476:6:9","nodeType":"YulIdentifier","src":"8476:6:9"},"nativeSrc":"8476:12:9","nodeType":"YulFunctionCall","src":"8476:12:9"},"nativeSrc":"8476:12:9","nodeType":"YulExpressionStatement","src":"8476:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"8453:2:9","nodeType":"YulIdentifier","src":"8453:2:9"},{"kind":"number","nativeSrc":"8457:4:9","nodeType":"YulLiteral","src":"8457:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8449:3:9","nodeType":"YulIdentifier","src":"8449:3:9"},"nativeSrc":"8449:13:9","nodeType":"YulFunctionCall","src":"8449:13:9"},{"name":"dataEnd","nativeSrc":"8464:7:9","nodeType":"YulIdentifier","src":"8464:7:9"}],"functionName":{"name":"slt","nativeSrc":"8445:3:9","nodeType":"YulIdentifier","src":"8445:3:9"},"nativeSrc":"8445:27:9","nodeType":"YulFunctionCall","src":"8445:27:9"}],"functionName":{"name":"iszero","nativeSrc":"8438:6:9","nodeType":"YulIdentifier","src":"8438:6:9"},"nativeSrc":"8438:35:9","nodeType":"YulFunctionCall","src":"8438:35:9"},"nativeSrc":"8435:55:9","nodeType":"YulIf","src":"8435:55:9"},{"nativeSrc":"8499:26:9","nodeType":"YulVariableDeclaration","src":"8499:26:9","value":{"arguments":[{"name":"_2","nativeSrc":"8522:2:9","nodeType":"YulIdentifier","src":"8522:2:9"}],"functionName":{"name":"calldataload","nativeSrc":"8509:12:9","nodeType":"YulIdentifier","src":"8509:12:9"},"nativeSrc":"8509:16:9","nodeType":"YulFunctionCall","src":"8509:16:9"},"variables":[{"name":"_3","nativeSrc":"8503:2:9","nodeType":"YulTypedName","src":"8503:2:9","type":""}]},{"nativeSrc":"8534:14:9","nodeType":"YulVariableDeclaration","src":"8534:14:9","value":{"kind":"number","nativeSrc":"8544:4:9","nodeType":"YulLiteral","src":"8544:4:9","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"8538:2:9","nodeType":"YulTypedName","src":"8538:2:9","type":""}]},{"body":{"nativeSrc":"8571:22:9","nodeType":"YulBlock","src":"8571:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8573:16:9","nodeType":"YulIdentifier","src":"8573:16:9"},"nativeSrc":"8573:18:9","nodeType":"YulFunctionCall","src":"8573:18:9"},"nativeSrc":"8573:18:9","nodeType":"YulExpressionStatement","src":"8573:18:9"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"8563:2:9","nodeType":"YulIdentifier","src":"8563:2:9"},{"name":"_1","nativeSrc":"8567:2:9","nodeType":"YulIdentifier","src":"8567:2:9"}],"functionName":{"name":"gt","nativeSrc":"8560:2:9","nodeType":"YulIdentifier","src":"8560:2:9"},"nativeSrc":"8560:10:9","nodeType":"YulFunctionCall","src":"8560:10:9"},"nativeSrc":"8557:36:9","nodeType":"YulIf","src":"8557:36:9"},{"nativeSrc":"8602:20:9","nodeType":"YulVariableDeclaration","src":"8602:20:9","value":{"arguments":[{"kind":"number","nativeSrc":"8616:1:9","nodeType":"YulLiteral","src":"8616:1:9","type":"","value":"5"},{"name":"_3","nativeSrc":"8619:2:9","nodeType":"YulIdentifier","src":"8619:2:9"}],"functionName":{"name":"shl","nativeSrc":"8612:3:9","nodeType":"YulIdentifier","src":"8612:3:9"},"nativeSrc":"8612:10:9","nodeType":"YulFunctionCall","src":"8612:10:9"},"variables":[{"name":"_5","nativeSrc":"8606:2:9","nodeType":"YulTypedName","src":"8606:2:9","type":""}]},{"nativeSrc":"8631:23:9","nodeType":"YulVariableDeclaration","src":"8631:23:9","value":{"arguments":[{"kind":"number","nativeSrc":"8651:2:9","nodeType":"YulLiteral","src":"8651:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"8645:5:9","nodeType":"YulIdentifier","src":"8645:5:9"},"nativeSrc":"8645:9:9","nodeType":"YulFunctionCall","src":"8645:9:9"},"variables":[{"name":"memPtr","nativeSrc":"8635:6:9","nodeType":"YulTypedName","src":"8635:6:9","type":""}]},{"nativeSrc":"8663:115:9","nodeType":"YulVariableDeclaration","src":"8663:115:9","value":{"arguments":[{"name":"memPtr","nativeSrc":"8685:6:9","nodeType":"YulIdentifier","src":"8685:6:9"},{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"8701:2:9","nodeType":"YulIdentifier","src":"8701:2:9"},{"kind":"number","nativeSrc":"8705:2:9","nodeType":"YulLiteral","src":"8705:2:9","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"8697:3:9","nodeType":"YulIdentifier","src":"8697:3:9"},"nativeSrc":"8697:11:9","nodeType":"YulFunctionCall","src":"8697:11:9"},{"kind":"number","nativeSrc":"8710:66:9","nodeType":"YulLiteral","src":"8710:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"8693:3:9","nodeType":"YulIdentifier","src":"8693:3:9"},"nativeSrc":"8693:84:9","nodeType":"YulFunctionCall","src":"8693:84:9"}],"functionName":{"name":"add","nativeSrc":"8681:3:9","nodeType":"YulIdentifier","src":"8681:3:9"},"nativeSrc":"8681:97:9","nodeType":"YulFunctionCall","src":"8681:97:9"},"variables":[{"name":"newFreePtr","nativeSrc":"8667:10:9","nodeType":"YulTypedName","src":"8667:10:9","type":""}]},{"body":{"nativeSrc":"8837:22:9","nodeType":"YulBlock","src":"8837:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8839:16:9","nodeType":"YulIdentifier","src":"8839:16:9"},"nativeSrc":"8839:18:9","nodeType":"YulFunctionCall","src":"8839:18:9"},"nativeSrc":"8839:18:9","nodeType":"YulExpressionStatement","src":"8839:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"8796:10:9","nodeType":"YulIdentifier","src":"8796:10:9"},{"name":"_1","nativeSrc":"8808:2:9","nodeType":"YulIdentifier","src":"8808:2:9"}],"functionName":{"name":"gt","nativeSrc":"8793:2:9","nodeType":"YulIdentifier","src":"8793:2:9"},"nativeSrc":"8793:18:9","nodeType":"YulFunctionCall","src":"8793:18:9"},{"arguments":[{"name":"newFreePtr","nativeSrc":"8816:10:9","nodeType":"YulIdentifier","src":"8816:10:9"},{"name":"memPtr","nativeSrc":"8828:6:9","nodeType":"YulIdentifier","src":"8828:6:9"}],"functionName":{"name":"lt","nativeSrc":"8813:2:9","nodeType":"YulIdentifier","src":"8813:2:9"},"nativeSrc":"8813:22:9","nodeType":"YulFunctionCall","src":"8813:22:9"}],"functionName":{"name":"or","nativeSrc":"8790:2:9","nodeType":"YulIdentifier","src":"8790:2:9"},"nativeSrc":"8790:46:9","nodeType":"YulFunctionCall","src":"8790:46:9"},"nativeSrc":"8787:72:9","nodeType":"YulIf","src":"8787:72:9"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8875:2:9","nodeType":"YulLiteral","src":"8875:2:9","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"8879:10:9","nodeType":"YulIdentifier","src":"8879:10:9"}],"functionName":{"name":"mstore","nativeSrc":"8868:6:9","nodeType":"YulIdentifier","src":"8868:6:9"},"nativeSrc":"8868:22:9","nodeType":"YulFunctionCall","src":"8868:22:9"},"nativeSrc":"8868:22:9","nodeType":"YulExpressionStatement","src":"8868:22:9"},{"nativeSrc":"8899:17:9","nodeType":"YulVariableDeclaration","src":"8899:17:9","value":{"name":"memPtr","nativeSrc":"8910:6:9","nodeType":"YulIdentifier","src":"8910:6:9"},"variables":[{"name":"dst","nativeSrc":"8903:3:9","nodeType":"YulTypedName","src":"8903:3:9","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"8932:6:9","nodeType":"YulIdentifier","src":"8932:6:9"},{"name":"_3","nativeSrc":"8940:2:9","nodeType":"YulIdentifier","src":"8940:2:9"}],"functionName":{"name":"mstore","nativeSrc":"8925:6:9","nodeType":"YulIdentifier","src":"8925:6:9"},"nativeSrc":"8925:18:9","nodeType":"YulFunctionCall","src":"8925:18:9"},"nativeSrc":"8925:18:9","nodeType":"YulExpressionStatement","src":"8925:18:9"},{"nativeSrc":"8952:22:9","nodeType":"YulAssignment","src":"8952:22:9","value":{"arguments":[{"name":"memPtr","nativeSrc":"8963:6:9","nodeType":"YulIdentifier","src":"8963:6:9"},{"name":"_4","nativeSrc":"8971:2:9","nodeType":"YulIdentifier","src":"8971:2:9"}],"functionName":{"name":"add","nativeSrc":"8959:3:9","nodeType":"YulIdentifier","src":"8959:3:9"},"nativeSrc":"8959:15:9","nodeType":"YulFunctionCall","src":"8959:15:9"},"variableNames":[{"name":"dst","nativeSrc":"8952:3:9","nodeType":"YulIdentifier","src":"8952:3:9"}]},{"nativeSrc":"8983:34:9","nodeType":"YulVariableDeclaration","src":"8983:34:9","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9005:2:9","nodeType":"YulIdentifier","src":"9005:2:9"},{"name":"_5","nativeSrc":"9009:2:9","nodeType":"YulIdentifier","src":"9009:2:9"}],"functionName":{"name":"add","nativeSrc":"9001:3:9","nodeType":"YulIdentifier","src":"9001:3:9"},"nativeSrc":"9001:11:9","nodeType":"YulFunctionCall","src":"9001:11:9"},{"name":"_4","nativeSrc":"9014:2:9","nodeType":"YulIdentifier","src":"9014:2:9"}],"functionName":{"name":"add","nativeSrc":"8997:3:9","nodeType":"YulIdentifier","src":"8997:3:9"},"nativeSrc":"8997:20:9","nodeType":"YulFunctionCall","src":"8997:20:9"},"variables":[{"name":"srcEnd","nativeSrc":"8987:6:9","nodeType":"YulTypedName","src":"8987:6:9","type":""}]},{"body":{"nativeSrc":"9049:16:9","nodeType":"YulBlock","src":"9049:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9058:1:9","nodeType":"YulLiteral","src":"9058:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"9061:1:9","nodeType":"YulLiteral","src":"9061:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9051:6:9","nodeType":"YulIdentifier","src":"9051:6:9"},"nativeSrc":"9051:12:9","nodeType":"YulFunctionCall","src":"9051:12:9"},"nativeSrc":"9051:12:9","nodeType":"YulExpressionStatement","src":"9051:12:9"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9032:6:9","nodeType":"YulIdentifier","src":"9032:6:9"},{"name":"dataEnd","nativeSrc":"9040:7:9","nodeType":"YulIdentifier","src":"9040:7:9"}],"functionName":{"name":"gt","nativeSrc":"9029:2:9","nodeType":"YulIdentifier","src":"9029:2:9"},"nativeSrc":"9029:19:9","nodeType":"YulFunctionCall","src":"9029:19:9"},"nativeSrc":"9026:39:9","nodeType":"YulIf","src":"9026:39:9"},{"nativeSrc":"9074:22:9","nodeType":"YulVariableDeclaration","src":"9074:22:9","value":{"arguments":[{"name":"_2","nativeSrc":"9089:2:9","nodeType":"YulIdentifier","src":"9089:2:9"},{"name":"_4","nativeSrc":"9093:2:9","nodeType":"YulIdentifier","src":"9093:2:9"}],"functionName":{"name":"add","nativeSrc":"9085:3:9","nodeType":"YulIdentifier","src":"9085:3:9"},"nativeSrc":"9085:11:9","nodeType":"YulFunctionCall","src":"9085:11:9"},"variables":[{"name":"src","nativeSrc":"9078:3:9","nodeType":"YulTypedName","src":"9078:3:9","type":""}]},{"body":{"nativeSrc":"9161:86:9","nodeType":"YulBlock","src":"9161:86:9","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9182:3:9","nodeType":"YulIdentifier","src":"9182:3:9"},{"arguments":[{"name":"src","nativeSrc":"9200:3:9","nodeType":"YulIdentifier","src":"9200:3:9"}],"functionName":{"name":"calldataload","nativeSrc":"9187:12:9","nodeType":"YulIdentifier","src":"9187:12:9"},"nativeSrc":"9187:17:9","nodeType":"YulFunctionCall","src":"9187:17:9"}],"functionName":{"name":"mstore","nativeSrc":"9175:6:9","nodeType":"YulIdentifier","src":"9175:6:9"},"nativeSrc":"9175:30:9","nodeType":"YulFunctionCall","src":"9175:30:9"},"nativeSrc":"9175:30:9","nodeType":"YulExpressionStatement","src":"9175:30:9"},{"nativeSrc":"9218:19:9","nodeType":"YulAssignment","src":"9218:19:9","value":{"arguments":[{"name":"dst","nativeSrc":"9229:3:9","nodeType":"YulIdentifier","src":"9229:3:9"},{"name":"_4","nativeSrc":"9234:2:9","nodeType":"YulIdentifier","src":"9234:2:9"}],"functionName":{"name":"add","nativeSrc":"9225:3:9","nodeType":"YulIdentifier","src":"9225:3:9"},"nativeSrc":"9225:12:9","nodeType":"YulFunctionCall","src":"9225:12:9"},"variableNames":[{"name":"dst","nativeSrc":"9218:3:9","nodeType":"YulIdentifier","src":"9218:3:9"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9116:3:9","nodeType":"YulIdentifier","src":"9116:3:9"},{"name":"srcEnd","nativeSrc":"9121:6:9","nodeType":"YulIdentifier","src":"9121:6:9"}],"functionName":{"name":"lt","nativeSrc":"9113:2:9","nodeType":"YulIdentifier","src":"9113:2:9"},"nativeSrc":"9113:15:9","nodeType":"YulFunctionCall","src":"9113:15:9"},"nativeSrc":"9105:142:9","nodeType":"YulForLoop","post":{"nativeSrc":"9129:23:9","nodeType":"YulBlock","src":"9129:23:9","statements":[{"nativeSrc":"9131:19:9","nodeType":"YulAssignment","src":"9131:19:9","value":{"arguments":[{"name":"src","nativeSrc":"9142:3:9","nodeType":"YulIdentifier","src":"9142:3:9"},{"name":"_4","nativeSrc":"9147:2:9","nodeType":"YulIdentifier","src":"9147:2:9"}],"functionName":{"name":"add","nativeSrc":"9138:3:9","nodeType":"YulIdentifier","src":"9138:3:9"},"nativeSrc":"9138:12:9","nodeType":"YulFunctionCall","src":"9138:12:9"},"variableNames":[{"name":"src","nativeSrc":"9131:3:9","nodeType":"YulIdentifier","src":"9131:3:9"}]}]},"pre":{"nativeSrc":"9109:3:9","nodeType":"YulBlock","src":"9109:3:9","statements":[]},"src":"9105:142:9"},{"nativeSrc":"9256:16:9","nodeType":"YulAssignment","src":"9256:16:9","value":{"name":"memPtr","nativeSrc":"9266:6:9","nodeType":"YulIdentifier","src":"9266:6:9"},"variableNames":[{"name":"value0","nativeSrc":"9256:6:9","nodeType":"YulIdentifier","src":"9256:6:9"}]},{"nativeSrc":"9281:42:9","nodeType":"YulAssignment","src":"9281:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9308:9:9","nodeType":"YulIdentifier","src":"9308:9:9"},{"name":"_4","nativeSrc":"9319:2:9","nodeType":"YulIdentifier","src":"9319:2:9"}],"functionName":{"name":"add","nativeSrc":"9304:3:9","nodeType":"YulIdentifier","src":"9304:3:9"},"nativeSrc":"9304:18:9","nodeType":"YulFunctionCall","src":"9304:18:9"}],"functionName":{"name":"calldataload","nativeSrc":"9291:12:9","nodeType":"YulIdentifier","src":"9291:12:9"},"nativeSrc":"9291:32:9","nodeType":"YulFunctionCall","src":"9291:32:9"},"variableNames":[{"name":"value1","nativeSrc":"9281:6:9","nodeType":"YulIdentifier","src":"9281:6:9"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256","nativeSrc":"8085:1244:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8155:9:9","nodeType":"YulTypedName","src":"8155:9:9","type":""},{"name":"dataEnd","nativeSrc":"8166:7:9","nodeType":"YulTypedName","src":"8166:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8178:6:9","nodeType":"YulTypedName","src":"8178:6:9","type":""},{"name":"value1","nativeSrc":"8186:6:9","nodeType":"YulTypedName","src":"8186:6:9","type":""}],"src":"8085:1244:9"},{"body":{"nativeSrc":"9481:182:9","nodeType":"YulBlock","src":"9481:182:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9498:3:9","nodeType":"YulIdentifier","src":"9498:3:9"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9511:2:9","nodeType":"YulLiteral","src":"9511:2:9","type":"","value":"96"},{"name":"value0","nativeSrc":"9515:6:9","nodeType":"YulIdentifier","src":"9515:6:9"}],"functionName":{"name":"shl","nativeSrc":"9507:3:9","nodeType":"YulIdentifier","src":"9507:3:9"},"nativeSrc":"9507:15:9","nodeType":"YulFunctionCall","src":"9507:15:9"},{"kind":"number","nativeSrc":"9524:66:9","nodeType":"YulLiteral","src":"9524:66:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"9503:3:9","nodeType":"YulIdentifier","src":"9503:3:9"},"nativeSrc":"9503:88:9","nodeType":"YulFunctionCall","src":"9503:88:9"}],"functionName":{"name":"mstore","nativeSrc":"9491:6:9","nodeType":"YulIdentifier","src":"9491:6:9"},"nativeSrc":"9491:101:9","nodeType":"YulFunctionCall","src":"9491:101:9"},"nativeSrc":"9491:101:9","nodeType":"YulExpressionStatement","src":"9491:101:9"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9612:3:9","nodeType":"YulIdentifier","src":"9612:3:9"},{"kind":"number","nativeSrc":"9617:2:9","nodeType":"YulLiteral","src":"9617:2:9","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"9608:3:9","nodeType":"YulIdentifier","src":"9608:3:9"},"nativeSrc":"9608:12:9","nodeType":"YulFunctionCall","src":"9608:12:9"},{"name":"value1","nativeSrc":"9622:6:9","nodeType":"YulIdentifier","src":"9622:6:9"}],"functionName":{"name":"mstore","nativeSrc":"9601:6:9","nodeType":"YulIdentifier","src":"9601:6:9"},"nativeSrc":"9601:28:9","nodeType":"YulFunctionCall","src":"9601:28:9"},"nativeSrc":"9601:28:9","nodeType":"YulExpressionStatement","src":"9601:28:9"},{"nativeSrc":"9638:19:9","nodeType":"YulAssignment","src":"9638:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"9649:3:9","nodeType":"YulIdentifier","src":"9649:3:9"},{"kind":"number","nativeSrc":"9654:2:9","nodeType":"YulLiteral","src":"9654:2:9","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"9645:3:9","nodeType":"YulIdentifier","src":"9645:3:9"},"nativeSrc":"9645:12:9","nodeType":"YulFunctionCall","src":"9645:12:9"},"variableNames":[{"name":"end","nativeSrc":"9638:3:9","nodeType":"YulIdentifier","src":"9638:3:9"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"9334:329:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9449:3:9","nodeType":"YulTypedName","src":"9449:3:9","type":""},{"name":"value1","nativeSrc":"9454:6:9","nodeType":"YulTypedName","src":"9454:6:9","type":""},{"name":"value0","nativeSrc":"9462:6:9","nodeType":"YulTypedName","src":"9462:6:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9473:3:9","nodeType":"YulTypedName","src":"9473:3:9","type":""}],"src":"9334:329:9"},{"body":{"nativeSrc":"9797:119:9","nodeType":"YulBlock","src":"9797:119:9","statements":[{"nativeSrc":"9807:26:9","nodeType":"YulAssignment","src":"9807:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"9819:9:9","nodeType":"YulIdentifier","src":"9819:9:9"},{"kind":"number","nativeSrc":"9830:2:9","nodeType":"YulLiteral","src":"9830:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9815:3:9","nodeType":"YulIdentifier","src":"9815:3:9"},"nativeSrc":"9815:18:9","nodeType":"YulFunctionCall","src":"9815:18:9"},"variableNames":[{"name":"tail","nativeSrc":"9807:4:9","nodeType":"YulIdentifier","src":"9807:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9849:9:9","nodeType":"YulIdentifier","src":"9849:9:9"},{"name":"value0","nativeSrc":"9860:6:9","nodeType":"YulIdentifier","src":"9860:6:9"}],"functionName":{"name":"mstore","nativeSrc":"9842:6:9","nodeType":"YulIdentifier","src":"9842:6:9"},"nativeSrc":"9842:25:9","nodeType":"YulFunctionCall","src":"9842:25:9"},"nativeSrc":"9842:25:9","nodeType":"YulExpressionStatement","src":"9842:25:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9887:9:9","nodeType":"YulIdentifier","src":"9887:9:9"},{"kind":"number","nativeSrc":"9898:2:9","nodeType":"YulLiteral","src":"9898:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9883:3:9","nodeType":"YulIdentifier","src":"9883:3:9"},"nativeSrc":"9883:18:9","nodeType":"YulFunctionCall","src":"9883:18:9"},{"name":"value1","nativeSrc":"9903:6:9","nodeType":"YulIdentifier","src":"9903:6:9"}],"functionName":{"name":"mstore","nativeSrc":"9876:6:9","nodeType":"YulIdentifier","src":"9876:6:9"},"nativeSrc":"9876:34:9","nodeType":"YulFunctionCall","src":"9876:34:9"},"nativeSrc":"9876:34:9","nodeType":"YulExpressionStatement","src":"9876:34:9"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9668:248:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9758:9:9","nodeType":"YulTypedName","src":"9758:9:9","type":""},{"name":"value1","nativeSrc":"9769:6:9","nodeType":"YulTypedName","src":"9769:6:9","type":""},{"name":"value0","nativeSrc":"9777:6:9","nodeType":"YulTypedName","src":"9777:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9788:4:9","nodeType":"YulTypedName","src":"9788:4:9","type":""}],"src":"9668:248:9"},{"body":{"nativeSrc":"10254:402:9","nodeType":"YulBlock","src":"10254:402:9","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10271:9:9","nodeType":"YulIdentifier","src":"10271:9:9"},{"kind":"number","nativeSrc":"10282:3:9","nodeType":"YulLiteral","src":"10282:3:9","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"10264:6:9","nodeType":"YulIdentifier","src":"10264:6:9"},"nativeSrc":"10264:22:9","nodeType":"YulFunctionCall","src":"10264:22:9"},"nativeSrc":"10264:22:9","nodeType":"YulExpressionStatement","src":"10264:22:9"},{"nativeSrc":"10295:88:9","nodeType":"YulVariableDeclaration","src":"10295:88:9","value":{"arguments":[{"name":"value0","nativeSrc":"10347:6:9","nodeType":"YulIdentifier","src":"10347:6:9"},{"name":"value1","nativeSrc":"10355:6:9","nodeType":"YulIdentifier","src":"10355:6:9"},{"arguments":[{"name":"headStart","nativeSrc":"10367:9:9","nodeType":"YulIdentifier","src":"10367:9:9"},{"kind":"number","nativeSrc":"10378:3:9","nodeType":"YulLiteral","src":"10378:3:9","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"10363:3:9","nodeType":"YulIdentifier","src":"10363:3:9"},"nativeSrc":"10363:19:9","nodeType":"YulFunctionCall","src":"10363:19:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10309:37:9","nodeType":"YulIdentifier","src":"10309:37:9"},"nativeSrc":"10309:74:9","nodeType":"YulFunctionCall","src":"10309:74:9"},"variables":[{"name":"tail_1","nativeSrc":"10299:6:9","nodeType":"YulTypedName","src":"10299:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10403:9:9","nodeType":"YulIdentifier","src":"10403:9:9"},{"kind":"number","nativeSrc":"10414:2:9","nodeType":"YulLiteral","src":"10414:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10399:3:9","nodeType":"YulIdentifier","src":"10399:3:9"},"nativeSrc":"10399:18:9","nodeType":"YulFunctionCall","src":"10399:18:9"},{"arguments":[{"name":"tail_1","nativeSrc":"10423:6:9","nodeType":"YulIdentifier","src":"10423:6:9"},{"name":"headStart","nativeSrc":"10431:9:9","nodeType":"YulIdentifier","src":"10431:9:9"}],"functionName":{"name":"sub","nativeSrc":"10419:3:9","nodeType":"YulIdentifier","src":"10419:3:9"},"nativeSrc":"10419:22:9","nodeType":"YulFunctionCall","src":"10419:22:9"}],"functionName":{"name":"mstore","nativeSrc":"10392:6:9","nodeType":"YulIdentifier","src":"10392:6:9"},"nativeSrc":"10392:50:9","nodeType":"YulFunctionCall","src":"10392:50:9"},"nativeSrc":"10392:50:9","nodeType":"YulExpressionStatement","src":"10392:50:9"},{"nativeSrc":"10451:69:9","nodeType":"YulAssignment","src":"10451:69:9","value":{"arguments":[{"name":"value2","nativeSrc":"10497:6:9","nodeType":"YulIdentifier","src":"10497:6:9"},{"name":"value3","nativeSrc":"10505:6:9","nodeType":"YulIdentifier","src":"10505:6:9"},{"name":"tail_1","nativeSrc":"10513:6:9","nodeType":"YulIdentifier","src":"10513:6:9"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10459:37:9","nodeType":"YulIdentifier","src":"10459:37:9"},"nativeSrc":"10459:61:9","nodeType":"YulFunctionCall","src":"10459:61:9"},"variableNames":[{"name":"tail","nativeSrc":"10451:4:9","nodeType":"YulIdentifier","src":"10451:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10540:9:9","nodeType":"YulIdentifier","src":"10540:9:9"},{"kind":"number","nativeSrc":"10551:2:9","nodeType":"YulLiteral","src":"10551:2:9","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10536:3:9","nodeType":"YulIdentifier","src":"10536:3:9"},"nativeSrc":"10536:18:9","nodeType":"YulFunctionCall","src":"10536:18:9"},{"name":"value4","nativeSrc":"10556:6:9","nodeType":"YulIdentifier","src":"10556:6:9"}],"functionName":{"name":"mstore","nativeSrc":"10529:6:9","nodeType":"YulIdentifier","src":"10529:6:9"},"nativeSrc":"10529:34:9","nodeType":"YulFunctionCall","src":"10529:34:9"},"nativeSrc":"10529:34:9","nodeType":"YulExpressionStatement","src":"10529:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10583:9:9","nodeType":"YulIdentifier","src":"10583:9:9"},{"kind":"number","nativeSrc":"10594:2:9","nodeType":"YulLiteral","src":"10594:2:9","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10579:3:9","nodeType":"YulIdentifier","src":"10579:3:9"},"nativeSrc":"10579:18:9","nodeType":"YulFunctionCall","src":"10579:18:9"},{"name":"value5","nativeSrc":"10599:6:9","nodeType":"YulIdentifier","src":"10599:6:9"}],"functionName":{"name":"mstore","nativeSrc":"10572:6:9","nodeType":"YulIdentifier","src":"10572:6:9"},"nativeSrc":"10572:34:9","nodeType":"YulFunctionCall","src":"10572:34:9"},"nativeSrc":"10572:34:9","nodeType":"YulExpressionStatement","src":"10572:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10626:9:9","nodeType":"YulIdentifier","src":"10626:9:9"},{"kind":"number","nativeSrc":"10637:3:9","nodeType":"YulLiteral","src":"10637:3:9","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10622:3:9","nodeType":"YulIdentifier","src":"10622:3:9"},"nativeSrc":"10622:19:9","nodeType":"YulFunctionCall","src":"10622:19:9"},{"name":"value6","nativeSrc":"10643:6:9","nodeType":"YulIdentifier","src":"10643:6:9"}],"functionName":{"name":"mstore","nativeSrc":"10615:6:9","nodeType":"YulIdentifier","src":"10615:6:9"},"nativeSrc":"10615:35:9","nodeType":"YulFunctionCall","src":"10615:35:9"},"nativeSrc":"10615:35:9","nodeType":"YulExpressionStatement","src":"10615:35:9"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9921:735:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10175:9:9","nodeType":"YulTypedName","src":"10175:9:9","type":""},{"name":"value6","nativeSrc":"10186:6:9","nodeType":"YulTypedName","src":"10186:6:9","type":""},{"name":"value5","nativeSrc":"10194:6:9","nodeType":"YulTypedName","src":"10194:6:9","type":""},{"name":"value4","nativeSrc":"10202:6:9","nodeType":"YulTypedName","src":"10202:6:9","type":""},{"name":"value3","nativeSrc":"10210:6:9","nodeType":"YulTypedName","src":"10210:6:9","type":""},{"name":"value2","nativeSrc":"10218:6:9","nodeType":"YulTypedName","src":"10218:6:9","type":""},{"name":"value1","nativeSrc":"10226:6:9","nodeType":"YulTypedName","src":"10226:6:9","type":""},{"name":"value0","nativeSrc":"10234:6:9","nodeType":"YulTypedName","src":"10234:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10245:4:9","nodeType":"YulTypedName","src":"10245:4:9","type":""}],"src":"9921:735:9"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$208__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n        mstore(add(headStart, 64), value4)\n        mstore(add(headStart, 96), value5)\n        mstore(add(headStart, 128), value6)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"801":[{"length":32,"start":537},{"length":32,"start":1118},{"length":32,"start":2019}],"805":[{"length":32,"start":874},{"length":32,"start":3023}],"808":[{"length":32,"start":629},{"length":32,"start":1040}],"811":[{"length":32,"start":913},{"length":32,"start":1004}],"814":[{"length":32,"start":458},{"length":32,"start":1226},{"length":32,"start":3267}],"817":[{"length":32,"start":711},{"length":32,"start":2365},{"length":32,"start":3778}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101825760003560e01c806351e75e8b116100d8578063bc197c811161008c578063cd421fbf11610066578063cd421fbf1461038c578063f23a6e61146103b3578063f95d1016146103c657600080fd5b8063bc197c8114610319578063c131754e1461035d578063cd18a34f1461036557600080fd5b8063aa918fd5116100bd578063aa918fd514610268578063ab504e73146102f1578063bab2f5521461031157600080fd5b806351e75e8b146102c257806355f5b0a8146102e957600080fd5b80631de0e40b1161013a578063424ab4f711610114578063424ab4f714610268578063491bde66146102705780634dac1c2b1461029757600080fd5b80631de0e40b146101af57806328a979cf146102145780633838a2011461026057600080fd5b8063043063bc1161016b578063043063bc146101c55780630455645a146101ec57806312828b7f146101f457600080fd5b806301ffc9a7146101875780630277640e146101af575b600080fd5b61019a61019536600461116a565b6103ce565b60405190151581526020015b60405180910390f35b6101b7600181565b6040519081526020016101a6565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101b7600581565b6101b76102023660046111d5565b60026020526000908152604090205481565b61023b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a6565b6101b7601981565b6101b7600381565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101b76102a53660046111f0565b600160209081526000928352604080842090915290825290205481565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101b7600281565b6101b76102ff36600461121c565b60006020819052908152604090205481565b6101b76103e8565b61032c6103273660046112c3565b610444565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101a6565b6101b7601081565b61023b7f000000000000000000000000000000000000000000000000000000000000000081565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b61032c6103c136600461137e565b610bb5565b6101b7600981565b60006103e2826103dc610fd7565b90611005565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006104357f000000000000000000000000000000000000000000000000000000000000000042611425565b61043f9190611438565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146104bc576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006104c66103e8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610525576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018290526024016104b3565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906105699030908c908c908c908c906004016114be565b600060405180830381600087803b15801561058357600080fd5b505af1158015610597573d6000803e3d6000fd5b505050506000805b88811015610875578787828181106105b9576105b961150d565b9050602002013560000361065357338a8a838181106105da576105da61150d565b905060200201358989848181106105f3576105f361150d565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90951660048601526024850193909352506020909102013560448201526064016104b3565b8989828181106106655761066561150d565b905060200201356001036106a95760018888838181106106875761068761150d565b90506020020135610698919061153c565b6106a29083611553565b915061086d565b8989828181106106bb576106bb61150d565b905060200201356002036106dd5760038888838181106106875761068761150d565b8989828181106106ef576106ef61150d565b905060200201356003036107115760038888838181106106875761068761150d565b8989828181106107235761072361150d565b905060200201356004036107455760058888838181106106875761068761150d565b8989828181106107575761075761150d565b905060200201356005036107795760098888838181106106875761068761150d565b89898281811061078b5761078b61150d565b905060200201356006036107ad5760198888838181106106875761068761150d565b8989828181106107bf576107bf61150d565b905060200201356007036107e15760108888838181106106875761068761150d565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106108145761081461150d565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909416600485015260200291909101356024830152506044016104b3565b60010161059f565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610a47576000806108b3888a018a611595565b91509150608083901c600003610a27576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610962837f0000000000000000000000000000000000000000000000000000000000000000836110df565b6109b7576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602481018390526044016104b3565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610a34828761153c565b610a3e9190611438565b94505050610a6e565b608081901c8015610a6c57612710610a5f828661153c565b610a699190611438565b93505b505b6fffffffffffffffffffffffffffffffff81168015610a9457610a91818561153c565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610acf908690611553565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610b1f908490611553565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610b799796959493929190611677565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c28576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024016104b3565b60018514610c6b576040517f1912ea51000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044016104b3565b83600114610cb5576040517fe1f366e900000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481018590526064016104b3565b6000610cbf6103e8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610d1e576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018290526024016104b3565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610da6576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201526024016104b3565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610e0557600080fd5b505af1158015610e19573d6000803e3d6000fd5b5050506002821790508415610f4657608082901c600003610f4657600080610e4387890189611595565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610ee7837f0000000000000000000000000000000000000000000000000000000000000000836110df565b610f3c576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152602481018390526044016104b3565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b6000806103e260017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611425565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611055575060006103e2565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016110a6575060016103e2565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000826110ec85846110f5565b14949350505050565b600081815b845181101561113057611126828683815181106111195761111961150d565b6020026020010151611138565b91506001016110fa565b509392505050565b6000818310611154576000828152602084905260409020611163565b60008381526020839052604090205b9392505050565b60006020828403121561117c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461116357600080fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146111d057600080fd5b919050565b6000602082840312156111e757600080fd5b611163826111ac565b6000806040838503121561120357600080fd5b82359150611213602084016111ac565b90509250929050565b60006020828403121561122e57600080fd5b5035919050565b60008083601f84011261124757600080fd5b50813567ffffffffffffffff81111561125f57600080fd5b6020830191508360208260051b850101111561127a57600080fd5b9250929050565b60008083601f84011261129357600080fd5b50813567ffffffffffffffff8111156112ab57600080fd5b60208301915083602082850101111561127a57600080fd5b60008060008060008060008060a0898b0312156112df57600080fd5b6112e8896111ac565b97506112f660208a016111ac565b9650604089013567ffffffffffffffff8082111561131357600080fd5b61131f8c838d01611235565b909850965060608b013591508082111561133857600080fd5b6113448c838d01611235565b909650945060808b013591508082111561135d57600080fd5b5061136a8b828c01611281565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561139757600080fd5b6113a0876111ac565b95506113ae602088016111ac565b94506040870135935060608701359250608087013567ffffffffffffffff8111156113d857600080fd5b6113e489828a01611281565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156103e2576103e26113f6565b60008261146e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156114a557600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006114ee606083018688611473565b8281036040840152611501818587611473565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820281158282048414176103e2576103e26113f6565b808201808211156103e2576103e26113f6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156115a857600080fd5b823567ffffffffffffffff808211156115c057600080fd5b818501915085601f8301126115d457600080fd5b81356020828211156115e8576115e8611566565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110868211171561162b5761162b611566565b60405292835281830193508481018201928984111561164957600080fd5b948201945b838610156116675785358552948201949382019361164e565b9997909101359750505050505050565b60a08152600061168b60a08301898b611473565b828103602084015261169e81888a611473565b60408401969096525050606081019290925260809091015294935050505056fea2646970667358221220b761619cc0cd930ba131c535ad55e54ddd56a4e8f912ffe15867c1e495bb4ee364736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x297 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x28A979CF EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x43063BC GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x116A JUMP JUMPDEST PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x23B PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x2FF CALLDATASIZE PUSH1 0x4 PUSH2 0x121C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x3E8 JUMP JUMPDEST PUSH2 0x32C PUSH2 0x327 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C3 JUMP JUMPDEST PUSH2 0x444 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x23B PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1B7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x32C PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0xBB5 JUMP JUMPDEST PUSH2 0x1B7 PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E2 DUP3 PUSH2 0x3DC PUSH2 0xFD7 JUMP JUMPDEST SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x435 PUSH32 0x0 TIMESTAMP PUSH2 0x1425 JUMP JUMPDEST PUSH2 0x43F SWAP2 SWAP1 PUSH2 0x1438 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x4BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4C6 PUSH2 0x3E8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x525 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x569 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x875 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x5B9 JUMPI PUSH2 0x5B9 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x653 JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x5DA JUMPI PUSH2 0x5DA PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x5F3 JUMPI PUSH2 0x5F3 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B3 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x665 JUMPI PUSH2 0x665 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x6A9 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x698 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH2 0x6A2 SWAP1 DUP4 PUSH2 0x1553 JUMP JUMPDEST SWAP2 POP PUSH2 0x86D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6BB JUMPI PUSH2 0x6BB PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x6DD JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6EF JUMPI PUSH2 0x6EF PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x711 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x723 JUMPI PUSH2 0x723 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x745 JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x779 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x7AD JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x150D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x7E1 JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x687 JUMPI PUSH2 0x687 PUSH2 0x150D JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x814 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x59F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 PUSH2 0x8B3 DUP9 DUP11 ADD DUP11 PUSH2 0x1595 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x962 DUP4 PUSH32 0x0 DUP4 PUSH2 0x10DF JUMP JUMPDEST PUSH2 0x9B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xA34 DUP3 DUP8 PUSH2 0x153C JUMP JUMPDEST PUSH2 0xA3E SWAP2 SWAP1 PUSH2 0x1438 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xA6C JUMPI PUSH2 0x2710 PUSH2 0xA5F DUP3 DUP7 PUSH2 0x153C JUMP JUMPDEST PUSH2 0xA69 SWAP2 SWAP1 PUSH2 0x1438 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xA94 JUMPI PUSH2 0xA91 DUP2 DUP6 PUSH2 0x153C JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xACF SWAP1 DUP7 SWAP1 PUSH2 0x1553 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xB1F SWAP1 DUP5 SWAP1 PUSH2 0x1553 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xB79 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1677 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xC28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xC6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xCB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBF PUSH2 0x3E8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xD1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xDA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE19 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0xF46 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xF46 JUMPI PUSH1 0x0 DUP1 PUSH2 0xE43 DUP8 DUP10 ADD DUP10 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xEE7 DUP4 PUSH32 0x0 DUP4 PUSH2 0x10DF JUMP JUMPDEST PUSH2 0xF3C JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x4B3 JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E2 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1055 JUMPI POP PUSH1 0x0 PUSH2 0x3E2 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x10A6 JUMPI POP PUSH1 0x1 PUSH2 0x3E2 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x10EC DUP6 DUP5 PUSH2 0x10F5 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1130 JUMPI PUSH2 0x1126 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1119 JUMPI PUSH2 0x1119 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1138 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x10FA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1154 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1163 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x117C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x11D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1163 DUP3 PUSH2 0x11AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1213 PUSH1 0x20 DUP5 ADD PUSH2 0x11AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x122E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x125F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x12DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E8 DUP10 PUSH2 0x11AC JUMP JUMPDEST SWAP8 POP PUSH2 0x12F6 PUSH1 0x20 DUP11 ADD PUSH2 0x11AC JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x131F DUP13 DUP4 DUP14 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1344 DUP13 DUP4 DUP14 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136A DUP12 DUP3 DUP13 ADD PUSH2 0x1281 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13A0 DUP8 PUSH2 0x11AC JUMP JUMPDEST SWAP6 POP PUSH2 0x13AE PUSH1 0x20 DUP9 ADD PUSH2 0x11AC JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13E4 DUP10 DUP3 DUP11 ADD PUSH2 0x1281 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x13F6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x146E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x14A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x14EE PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1473 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1501 DUP2 DUP6 DUP8 PUSH2 0x1473 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x13F6 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x13F6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E8 PUSH2 0x1566 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x162B JUMPI PUSH2 0x162B PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x1649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1667 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x164E JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x168B PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1473 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x169E DUP2 DUP9 DUP11 PUSH2 0x1473 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 PUSH2 0x619C 0xC0 0xCD SWAP4 SIGNEXTEND LOG1 BALANCE 0xC5 CALLDATALOAD 0xAD SSTORE 0xE5 0x4D 0xDD JUMP LOG4 0xE8 0xF9 SLT SELFDESTRUCT 0xE1 PC PUSH8 0xC1E495BB4EE36473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"529:11040:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:0;;;;;;:::i;:::-;;:::i;:::-;;;516:14:9;;509:22;491:41;;479:2;464:18;542:165:0;;;;;;;;905:47:8;;951:1;905:47;;;;;689:25:9;;;677:2;662:18;905:47:8;543:177:9;1857:34:8;;;;;1064:47;;1110:1;1064:47;;2425:49;;;;;;:::i;:::-;;;;;;;;;;;;;;1453:46;;;;;;;;1317:42:9;1305:55;;;1287:74;;1275:2;1260:18;1453:46:8;1117:250:9;1170:48:8;;1216:2;1170:48;;958:47;;1004:1;958:47;;1688:37;;;;;2208:70;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1964:36;;;;;1327:42;;1368:1;1327:42;;2072:51;;;;;;:::i;:::-;;;;;;;;;;;;;;;5137:127;;;:::i;8114:3453::-;;;;;;:::i;:::-;;:::i;:::-;;;4111:66:9;4099:79;;;4081:98;;4069:2;4054:18;8114:3453:8;3937:248:9;1224:48:8;;1270:2;1224:48;;1586:45;;;;;1776:39;;;;;5950:1630;;;;;;:::i;:::-;;:::i;1117:47::-;;1163:1;1117:47;;542:165:0;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:0:o;5137:127:8:-;5182:7;5243:14;5209:30;5227:12;5209:15;:30;:::i;:::-;5208:49;;;;:::i;:::-;5201:56;;5137:127;:::o;8114:3453::-;8314:6;8336:10;:35;8358:12;8336:35;;8332:104;;8394:31;;;;;8414:10;8394:31;;;1287:74:9;1260:18;;8394:31:8;;;;;;;;8332:104;8446:13;8462:14;:12;:14::i;:::-;8446:30;;8498:9;8490:5;:17;8486:74;;;8530:19;;;;;;;;689:25:9;;;662:18;;8530:19:8;543:177:9;8486:74:8;8570:70;;;;;8587:10;;8570:42;;:70;;8621:4;;8628:3;;;;8633:6;;;;8570:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8651:20;8690:9;8685:1007;8705:14;;;8685:1007;;;8744:6;;8751:1;8744:9;;;;;;;:::i;:::-;;;;;;;8757:1;8744:14;8740:108;;8803:10;8815:3;;8819:1;8815:6;;;;;;;:::i;:::-;;;;;;;8823;;8830:1;8823:9;;;;;;;:::i;:::-;8785:48;;;;;7150:42:9;7138:55;;;8785:48:8;;;7120:74:9;7210:18;;;7203:34;;;;-1:-1:-1;8823:9:8;;;;;;7253:18:9;;;7246:34;7093:18;;8785:48:8;6918:368:9;8740:108:8;8866:3;;8870:1;8866:6;;;;;;;:::i;:::-;;;;;;;8876:1;8866:11;8862:820;;951:1;8914:6;;8921:1;8914:9;;;;;;;:::i;:::-;;;;;;;:31;;;;:::i;:::-;8897:49;;;;:::i;:::-;;;8862:820;;;8971:3;;8975:1;8971:6;;;;;;;:::i;:::-;;;;;;;8981:1;8971:11;8967:715;;1004:1;9019:6;;9026:1;9019:9;;;;;;;:::i;8967:715::-;9076:3;;9080:1;9076:6;;;;;;;:::i;:::-;;;;;;;9086:1;9076:11;9072:610;;1057:1;9124:6;;9131:1;9124:9;;;;;;;:::i;9072:610::-;9181:3;;9185:1;9181:6;;;;;;;:::i;:::-;;;;;;;9191:1;9181:11;9177:505;;1110:1;9229:6;;9236:1;9229:9;;;;;;;:::i;9177:505::-;9286:3;;9290:1;9286:6;;;;;;;:::i;:::-;;;;;;;9296:1;9286:11;9282:400;;1163:1;9334:6;;9341:1;9334:9;;;;;;;:::i;9282:400::-;9391:3;;9395:1;9391:6;;;;;;;:::i;:::-;;;;;;;9401:1;9391:11;9387:295;;1216:2;9439:6;;9446:1;9439:9;;;;;;;:::i;9387:295::-;9496:3;;9500:1;9496:6;;;;;;;:::i;:::-;;;;;;;9506:1;9496:11;9492:190;;1270:2;9544:6;;9551:1;9544:9;;;;;;;:::i;9492:190::-;9645:12;9660:3;;9664:1;9660:6;;;;;;;:::i;:::-;9622:45;;;;;7798:42:9;7786:55;;;9622:45:8;;;7768:74:9;9660:6:8;;;;;;;7858:18:9;;;7851:34;-1:-1:-1;7741:18:9;;9622:45:8;7594:297:9;9492:190:8;8721:3;;8685:1007;;;-1:-1:-1;9822:24:8;;;9702:16;9822:24;;;:14;:24;;;;;;9721:4;;9861:15;;9857:1122;;9893:22;;9958:38;;;;9969:4;9958:38;:::i;:::-;9892:104;;;;10035:3;10015:16;:23;;10043:1;10014:30;10010:613;;10089:57;;9524:66:9;9511:2;9507:15;;;9503:88;10089:57:8;;;9491:101:9;9608:12;;;9601:28;;;10064:12:8;;9645::9;;10089:57:8;;;;;;;;;;;;;10079:68;;10089:57;10079:68;;;;;-1:-1:-1;10170:31:8;:5;10183:11;10079:68;10170:12;:31::i;:::-;10165:139;;10232:53;;;;;7798:42:9;7786:55;;10232:53:8;;;7768:74:9;7858:18;;;7851:34;;;7741:18;;10232:53:8;7594:297:9;10165:139:8;10424:24;;;10322;10424;;;:14;:24;;;;;;;;;10383:3;10350:36;;;10349:57;;10424:43;;;;10490:65;;9842:25:9;;;9883:18;;;9876:34;;;10349:57:8;10424:24;10490:65;;9815:18:9;10490:65:8;;;;;;;10592:16;-1:-1:-1;;10010:613:8;712:6;10653:44;10668:29;10653:12;:44;:::i;:::-;10652:61;;;;:::i;:::-;10637:76;;9878:846;;9857:1122;;;10804:3;10784:23;;;10825:33;;10821:148;;712:6;10894:44;10909:29;10894:12;:44;:::i;:::-;10893:61;;;;:::i;:::-;10878:76;;10821:148;10730:249;9857:1122;10989:49;;;11052:17;;11048:77;;11085:29;11101:13;11085:29;;:::i;:::-;;;11048:77;11169:28;11200:22;;;:15;:22;;;;;;;;:32;;;;;;;;;;;:47;;11235:12;;11200:47;:::i;:::-;11257:22;;;;:15;:22;;;;;;;;:32;;;;;;;;;;:55;;;11356:23;;;;;;;;;:39;;11169:78;;-1:-1:-1;11383:12:8;;11356:23;;11257:22;11356:39;;11383:12;;11356:39;:::i;:::-;;;;;;;;11433:5;11423:8;11411:95;;;11440:3;;11445:6;;11453:12;11467:20;11489:16;11411:95;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;11524:36:8;;8114:3453;-1:-1:-1;;;;;;;;;;;;;;8114:3453:8:o;5950:1630::-;6075:6;6097:10;:34;6119:11;6097:34;;6093:103;;6154:31;;;;;6174:10;6154:31;;;1287:74:9;1260:18;;6154:31:8;1117:250:9;6093:103:8;842:1;6209:2;:26;6205:94;;6258:30;;;;;6273:10;6258:30;;;7768:74:9;7858:18;;;7851:34;;;7741:18;;6258:30:8;7594:297:9;6205:94:8;6313:5;6322:1;6313:10;6309:88;;6346:40;;;;;6364:10;6346:40;;;7120:74:9;7210:18;;;7203:34;;;7253:18;;;7246:34;;;7093:18;;6346:40:8;6918:368:9;6309:88:8;6407:13;6423:14;:12;:14::i;:::-;6407:30;;6459:9;6451:5;:17;6447:74;;;6491:19;;;;;;;;689:25:9;;;662:18;;6491:19:8;543:177:9;6447:74:8;6558:20;;;6531:24;6558:20;;;:14;:20;;;;;;6592:29;;;;6588:96;;6644:29;;;;;1317:42:9;1305:55;;6644:29:8;;;1287:74:9;1260:18;;6644:29:8;1117:250:9;6588:96:8;6694:63;;;;;6740:4;6694:63;;;7120:74:9;7210:18;;;7203:34;;;7253:18;;;7246:34;;;6711:10:8;;6694:37;;7093:18:9;;6694:63:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1368:1:8;6795:33;;;-1:-1:-1;6842:15:8;;6838:562;;6898:3;6878:16;:23;;6906:1;6877:30;6873:517;;6928:22;;6993:38;;;;7004:4;6993:38;:::i;:::-;7074:53;;9524:66:9;9511:2;9507:15;;;9503:88;7074:53:8;;;9491:101:9;9608:12;;;9601:28;;;6927:104:8;;-1:-1:-1;6927:104:8;-1:-1:-1;7049:12:8;;9645::9;;7074:53:8;;;;;;;;;;;;;7064:64;;7074:53;7064:64;;;;;-1:-1:-1;7151:31:8;:5;7164:11;7064:64;7151:12;:31::i;:::-;7146:135;;7213:49;;;;;7798:42:9;7786:55;;7213:49:8;;;7768:74:9;7858:18;;;7851:34;;;7741:18;;7213:49:8;7594:297:9;7146:135:8;-1:-1:-1;7352:3:8;7319:36;7318:57;;;;-1:-1:-1;6873:517:8;7409:20;;;;;;;:14;:20;;;;;;;;;:39;;;7463:61;;9842:25:9;;;9883:18;;;9876:34;;;7463:61:8;;9815:18:9;7463:61:8;;;;;;;-1:-1:-1;7542:31:8;;5950:1630;-1:-1:-1;;;;;;;;;5950:1630:8:o;1705:174:3:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:3;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:3;1620:11;;1560:82;-1:-1:-1;1658:34:3;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1156:184:7:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:7:o;1994:290::-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:7;;2133:116;;;-1:-1:-1;2265:12:7;1994:290;-1:-1:-1;;;1994:290:7:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:7:o;14:332:9:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:196;793:20;;853:42;842:54;;832:65;;822:93;;911:1;908;901:12;822:93;725:196;;;:::o;926:186::-;985:6;1038:2;1026:9;1017:7;1013:23;1009:32;1006:52;;;1054:1;1051;1044:12;1006:52;1077:29;1096:9;1077:29;:::i;1372:254::-;1440:6;1448;1501:2;1489:9;1480:7;1476:23;1472:32;1469:52;;;1517:1;1514;1507:12;1469:52;1553:9;1540:23;1530:33;;1582:38;1616:2;1605:9;1601:18;1582:38;:::i;:::-;1572:48;;1372:254;;;;;:::o;1813:180::-;1872:6;1925:2;1913:9;1904:7;1900:23;1896:32;1893:52;;;1941:1;1938;1931:12;1893:52;-1:-1:-1;1964:23:9;;1813:180;-1:-1:-1;1813:180:9:o;1998:367::-;2061:8;2071:6;2125:3;2118:4;2110:6;2106:17;2102:27;2092:55;;2143:1;2140;2133:12;2092:55;-1:-1:-1;2166:20:9;;2209:18;2198:30;;2195:50;;;2241:1;2238;2231:12;2195:50;2278:4;2270:6;2266:17;2254:29;;2338:3;2331:4;2321:6;2318:1;2314:14;2306:6;2302:27;2298:38;2295:47;2292:67;;;2355:1;2352;2345:12;2292:67;1998:367;;;;;:::o;2370:347::-;2421:8;2431:6;2485:3;2478:4;2470:6;2466:17;2462:27;2452:55;;2503:1;2500;2493:12;2452:55;-1:-1:-1;2526:20:9;;2569:18;2558:30;;2555:50;;;2601:1;2598;2591:12;2555:50;2638:4;2630:6;2626:17;2614:29;;2690:3;2683:4;2674:6;2666;2662:19;2658:30;2655:39;2652:59;;;2707:1;2704;2697:12;2722:1210;2882:6;2890;2898;2906;2914;2922;2930;2938;2991:3;2979:9;2970:7;2966:23;2962:33;2959:53;;;3008:1;3005;2998:12;2959:53;3031:29;3050:9;3031:29;:::i;:::-;3021:39;;3079:38;3113:2;3102:9;3098:18;3079:38;:::i;:::-;3069:48;;3168:2;3157:9;3153:18;3140:32;3191:18;3232:2;3224:6;3221:14;3218:34;;;3248:1;3245;3238:12;3218:34;3287:70;3349:7;3340:6;3329:9;3325:22;3287:70;:::i;:::-;3376:8;;-1:-1:-1;3261:96:9;-1:-1:-1;3464:2:9;3449:18;;3436:32;;-1:-1:-1;3480:16:9;;;3477:36;;;3509:1;3506;3499:12;3477:36;3548:72;3612:7;3601:8;3590:9;3586:24;3548:72;:::i;:::-;3639:8;;-1:-1:-1;3522:98:9;-1:-1:-1;3727:3:9;3712:19;;3699:33;;-1:-1:-1;3744:16:9;;;3741:36;;;3773:1;3770;3763:12;3741:36;;3812:60;3864:7;3853:8;3842:9;3838:24;3812:60;:::i;:::-;2722:1210;;;;-1:-1:-1;2722:1210:9;;-1:-1:-1;2722:1210:9;;;;;;3891:8;-1:-1:-1;;;2722:1210:9:o;4190:695::-;4296:6;4304;4312;4320;4328;4336;4389:3;4377:9;4368:7;4364:23;4360:33;4357:53;;;4406:1;4403;4396:12;4357:53;4429:29;4448:9;4429:29;:::i;:::-;4419:39;;4477:38;4511:2;4500:9;4496:18;4477:38;:::i;:::-;4467:48;;4562:2;4551:9;4547:18;4534:32;4524:42;;4613:2;4602:9;4598:18;4585:32;4575:42;;4668:3;4657:9;4653:19;4640:33;4696:18;4688:6;4685:30;4682:50;;;4728:1;4725;4718:12;4682:50;4767:58;4817:7;4808:6;4797:9;4793:22;4767:58;:::i;:::-;4190:695;;;;-1:-1:-1;4190:695:9;;-1:-1:-1;4190:695:9;;4844:8;;4190:695;-1:-1:-1;;;4190:695:9:o;4890:184::-;4942:77;4939:1;4932:88;5039:4;5036:1;5029:15;5063:4;5060:1;5053:15;5079:128;5146:9;;;5167:11;;;5164:37;;;5181:18;;:::i;5212:274::-;5252:1;5278;5268:189;;5313:77;5310:1;5303:88;5414:4;5411:1;5404:15;5442:4;5439:1;5432:15;5268:189;-1:-1:-1;5471:9:9;;5212:274::o;5722:358::-;5822:6;5817:3;5810:19;5792:3;5852:66;5844:6;5841:78;5838:98;;;5932:1;5929;5922:12;5838:98;5968:6;5965:1;5961:14;6020:8;6013:5;6006:4;6001:3;5997:14;5984:45;6049:18;;;;6069:4;6045:29;;5722:358;-1:-1:-1;;;5722:358:9:o;6085:639::-;6402:42;6394:6;6390:55;6379:9;6372:74;6482:2;6477;6466:9;6462:18;6455:30;6353:4;6508:73;6577:2;6566:9;6562:18;6554:6;6546;6508:73;:::i;:::-;6629:9;6621:6;6617:22;6612:2;6601:9;6597:18;6590:50;6657:61;6711:6;6703;6695;6657:61;:::i;:::-;6649:69;6085:639;-1:-1:-1;;;;;;;;6085:639:9:o;6729:184::-;6781:77;6778:1;6771:88;6878:4;6875:1;6868:15;6902:4;6899:1;6892:15;7291:168;7364:9;;;7395;;7412:15;;;7406:22;;7392:37;7382:71;;7433:18;;:::i;7464:125::-;7529:9;;;7550:10;;;7547:36;;;7563:18;;:::i;7896:184::-;7948:77;7945:1;7938:88;8045:4;8042:1;8035:15;8069:4;8066:1;8059:15;8085:1244;8178:6;8186;8239:2;8227:9;8218:7;8214:23;8210:32;8207:52;;;8255:1;8252;8245:12;8207:52;8295:9;8282:23;8324:18;8365:2;8357:6;8354:14;8351:34;;;8381:1;8378;8371:12;8351:34;8419:6;8408:9;8404:22;8394:32;;8464:7;8457:4;8453:2;8449:13;8445:27;8435:55;;8486:1;8483;8476:12;8435:55;8522:2;8509:16;8544:4;8567:2;8563;8560:10;8557:36;;;8573:18;;:::i;:::-;8619:2;8616:1;8612:10;8651:2;8645:9;8710:66;8705:2;8701;8697:11;8693:84;8685:6;8681:97;8828:6;8816:10;8813:22;8808:2;8796:10;8793:18;8790:46;8787:72;;;8839:18;;:::i;:::-;8875:2;8868:22;8925:18;;;8959:15;;;;-1:-1:-1;9001:11:9;;;8997:20;;;9029:19;;;9026:39;;;9061:1;9058;9051:12;9026:39;9085:11;;;;9105:142;9121:6;9116:3;9113:15;9105:142;;;9187:17;;9175:30;;9138:12;;;;9225;;;;9105:142;;;9266:6;9304:18;;;;9291:32;;-1:-1:-1;;;;;;;8085:1244:9:o;9921:735::-;10282:3;10271:9;10264:22;10245:4;10309:74;10378:3;10367:9;10363:19;10355:6;10347;10309:74;:::i;:::-;10431:9;10423:6;10419:22;10414:2;10403:9;10399:18;10392:50;10459:61;10513:6;10505;10497;10459:61;:::i;:::-;10551:2;10536:18;;10529:34;;;;-1:-1:-1;;10594:2:9;10579:18;;10572:34;;;;10637:3;10622:19;;;10615:35;10451:69;9921:735;-1:-1:-1;;;;9921:735:9:o"},"gasEstimates":{"creation":{"codeDepositCost":"1175200","executionCost":"infinite","totalCost":"infinite"},"external":{"BURN_WEIGHT_TOKEN_1()":"264","BURN_WEIGHT_TOKEN_2()":"240","BURN_WEIGHT_TOKEN_3()":"240","BURN_WEIGHT_TOKEN_4()":"263","BURN_WEIGHT_TOKEN_5()":"283","BURN_WEIGHT_TOKEN_6()":"285","BURN_WEIGHT_TOKEN_7()":"262","CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","MERKLE_ROOT()":"infinite","MISSING_ORB()":"infinite","MISSING_ORB_TOKEN_ID()":"241","ORB_OF_POWER()":"infinite","ROC_MULTIPLIER()":"263","currentCycle()":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","orbMultipliers(address)":"2597","supportsInterface(bytes4)":"infinite","totalAshPerCycle(uint256)":"2508","userAshPerCycle(uint256,address)":"2694"}},"methodIdentifiers":{"BURN_WEIGHT_TOKEN_1()":"0277640e","BURN_WEIGHT_TOKEN_2()":"424ab4f7","BURN_WEIGHT_TOKEN_3()":"aa918fd5","BURN_WEIGHT_TOKEN_4()":"0455645a","BURN_WEIGHT_TOKEN_5()":"f95d1016","BURN_WEIGHT_TOKEN_6()":"3838a201","BURN_WEIGHT_TOKEN_7()":"c131754e","CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","MERKLE_ROOT()":"51e75e8b","MISSING_ORB()":"cd18a34f","MISSING_ORB_TOKEN_ID()":"1de0e40b","ORB_OF_POWER()":"28a979cf","ROC_MULTIPLIER()":"55f5b0a8","currentCycle()":"bab2f552","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","orbMultipliers(address)":"12828b7f","supportsInterface(bytes4)":"01ffc9a7","totalAshPerCycle(uint256)":"ab504e73","userAshPerCycle(uint256,address)":"4dac1c2b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"orbOfPower\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"missingOrb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AlreadySetROCMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"puzzleGameMultiplierNumerator\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCycleDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMaxCycle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orbMultiplier\",\"type\":\"uint256\"}],\"name\":\"GenerateAsh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curOrbMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedOrbMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateOrbMultiplier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORB_OF_POWER\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROC_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Throws if the cycle duration is zero.Throws if the max cycle is zero.\",\"params\":{\"cycleDuration\":\"The duration of each cycle.\",\"initialTime\":\"The initial time of the contract.\",\"maxCycle\":\"The maximum cycle.\",\"merkleRoot\":\"The Merkle root of the Puzzle Game multiplier claim.\",\"missingOrb\":\"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\",\"orbOfPower\":\"The IERC1155Burnable erc1155 contract burn to generate ASH.\"}},\"currentCycle()\":{\"returns\":{\"_0\":\"cycle The current cycle.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"ids\":\"The token IDs to burn.\",\"values\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"id\":\"The token ID.\",\"value\":\"The token value.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"OrbsBurnPool Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySetROCMultiplier(address)\":[{\"notice\":\"Error thrown when the wallet already has the ROC multiplier been set.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidProof(address,uint256)\":[{\"notice\":\"Error thrown when the proof is invalid.\"}],\"InvalidTokenAddress(address)\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"InvalidTokenValue(address,uint256,uint256)\":[{\"notice\":\"Error thrown when the token amount is invalid.\"}],\"ZeroCycleDuration()\":[{\"notice\":\"Error thrown when the cycle duration is invalid.\"}],\"ZeroMaxCycle()\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}]},\"events\":{\"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)\":{\"notice\":\"Event emitted when ASH are generated.\"},\"UpdateOrbMultiplier(address,uint256,uint256)\":{\"notice\":\"Event emitted when the multiplier info is updated.\"}},\"kind\":\"user\",\"methods\":{\"BURN_WEIGHT_TOKEN_1()\":{\"notice\":\"The token weights for calculating Ash.\"},\"CYCLE_DURATION()\":{\"notice\":\"The duration of each cycle.\"},\"INITIAL_TIME()\":{\"notice\":\"The initial time of the contract.\"},\"MAX_CYCLE()\":{\"notice\":\"The maximum cycle.\"},\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root for setting the puzzleMultiplier.\"},\"MISSING_ORB()\":{\"notice\":\"The IERC1155 erc1155 contract for setting the token multiplier.\"},\"MISSING_ORB_TOKEN_ID()\":{\"notice\":\"The token ID of RoC for setting the token multiplier.\"},\"ORB_OF_POWER()\":{\"notice\":\"The IERC1155Burnable erc1155 contracts burn to generate ASH.\"},\"ROC_MULTIPLIER()\":{\"notice\":\"The Riddle Of Chaos multiplier.\"},\"constructor\":{\"notice\":\"Constructor for the OrbsBurnPool contract.\"},\"currentCycle()\":{\"notice\":\"Get the current cycle.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Burn the tokens and calculate the ash.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field.\"},\"orbMultipliers(address)\":{\"notice\":\"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalAshPerCycle(uint256)\":{\"notice\":\"The total amount of ASH generated in each cycle.\"},\"userAshPerCycle(uint256,address)\":{\"notice\":\"The total amount of ASH generated by each user in each cycle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/OrbsBurnPool.sol\":\"OrbsBurnPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/burn/OrbsBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title OrbsBurnPool Contract\\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\\n */\\ncontract OrbsBurnPool is ERC1155TokenReceiver {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The denominator for the multiplier.\\n    uint256 internal constant _DENOMINATOR = 10_000;\\n\\n    /// @notice The token ID of RoC for setting the token multiplier.\\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\\n\\n    /// @notice The token weights for calculating Ash.\\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\\n\\n    /// @notice The Riddle Of Chaos multiplier.\\n    uint256 public constant ROC_MULTIPLIER = 2;\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\\n    IERC1155Burnable public immutable ORB_OF_POWER;\\n\\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\\n    IERC1155Burnable public immutable MISSING_ORB;\\n\\n    /// @notice The initial time of the contract.\\n    uint256 public immutable INITIAL_TIME;\\n\\n    /// @notice The duration of each cycle.\\n    uint256 public immutable CYCLE_DURATION;\\n\\n    /// @notice The maximum cycle.\\n    uint256 public immutable MAX_CYCLE;\\n\\n    /// @notice The Merkle root for setting the puzzleMultiplier.\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /// @notice The total amount of ASH generated in each cycle.\\n    mapping(uint256 => uint256) public totalAshPerCycle;\\n\\n    /// @notice The total amount of ASH generated by each user in each cycle.\\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\\n\\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\\n    mapping(address => uint256) public orbMultipliers;\\n\\n    /// @notice Event emitted when ASH are generated.\\n    event GenerateAsh(\\n        address indexed burner,\\n        uint256 indexed cycle,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 ash,\\n        uint256 totalAsh,\\n        uint256 orbMultiplier\\n    );\\n\\n    /// @notice Event emitted when the multiplier info is updated.\\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidTokenAddress(address token);\\n\\n    /// @notice Error thrown when the token amount is invalid.\\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\\n    error AlreadySetROCMultiplier(address wallet);\\n\\n    /// @notice Error thrown when the proof is invalid.\\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\\n\\n    /// @notice Error thrown when the cycle duration is invalid.\\n    error ZeroCycleDuration();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error ZeroMaxCycle();\\n\\n    /**\\n     * @notice Constructor for the OrbsBurnPool contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\\n     * @dev Throws if the cycle duration is zero.\\n     * @dev Throws if the max cycle is zero.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb\\n    ) {\\n        INITIAL_TIME = initialTime;\\n\\n        if (cycleDuration == 0) {\\n            revert ZeroCycleDuration();\\n        }\\n        CYCLE_DURATION = cycleDuration;\\n\\n        if (maxCycle == 0) {\\n            revert ZeroMaxCycle();\\n        }\\n        MAX_CYCLE = maxCycle;\\n        MERKLE_ROOT = merkleRoot;\\n        ORB_OF_POWER = orbOfPower;\\n        MISSING_ORB = missingOrb;\\n    }\\n\\n    /**\\n     * @notice Get the current cycle.\\n     * @return cycle The current cycle.\\n     */\\n    function currentCycle() public view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n    /**\\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\\n     * @param from The wallet address.\\n     * @param id The token ID.\\n     * @param value The token value.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     * @dev Throws if the token multiplier has already been set.\\n     */\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\\n        if (msg.sender != address(MISSING_ORB)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n        if (id != MISSING_ORB_TOKEN_ID) {\\n            revert InvalidTokenId(msg.sender, id);\\n        }\\n\\n        if (value != 1) {\\n            revert InvalidTokenValue(msg.sender, id, value);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 curOrbMultiplier = orbMultipliers[from];\\n        if (uint128(curOrbMultiplier) > 0) {\\n            revert AlreadySetROCMultiplier(from);\\n        }\\n\\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\\n\\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\\n        if (data.length > 0) {\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\\n                }\\n\\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\\n            }\\n        }\\n        orbMultipliers[from] = newOrbMultiplier;\\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice Burn the tokens and calculate the ash.\\n     * @param from The wallet address.\\n     * @param ids The token IDs to burn.\\n     * @param values The amount of tokens to burn.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        if (msg.sender != address(ORB_OF_POWER)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\\n\\n        uint256 ashGenerated = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] == 0) {\\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\\n            }\\n\\n            if (ids[i] == 1) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\\n            } else if (ids[i] == 2) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\\n            } else if (ids[i] == 3) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\\n            } else if (ids[i] == 4) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\\n            } else if (ids[i] == 5) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\\n            } else if (ids[i] == 6) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\\n            } else if (ids[i] == 7) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\\n            } else {\\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\\n            }\\n        }\\n\\n        address userAddr = from;\\n\\n        // boost the total ash based on the orbMultipliers\\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\\n\\n        if (data.length > 0) {\\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\\n                }\\n\\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\\n                orbMultipliers[userAddr] = newOrbMultiplier;\\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\\n                curOrbMultiplier = newOrbMultiplier;\\n            }\\n\\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n        } else {\\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\\n            if (puzzleGameMultiplierNumerator > 0) {\\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n            }\\n        }\\n\\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\\n        if (rocMultiplier > 0) {\\n            ashGenerated *= rocMultiplier;\\n        }\\n\\n        // update the user status\\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\\n        // update the pool status\\n        totalAshPerCycle[cycle] += ashGenerated;\\n\\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x96e8bb7d69678395cf911e5311564c78497eecda67411215f83cfc470bde78eb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":822,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"totalAshPerCycle","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"},{"astId":829,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"userAshPerCycle","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":834,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"orbMultipliers","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadySetROCMultiplier(address)":[{"notice":"Error thrown when the wallet already has the ROC multiplier been set."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidProof(address,uint256)":[{"notice":"Error thrown when the proof is invalid."}],"InvalidTokenAddress(address)":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"InvalidTokenValue(address,uint256,uint256)":[{"notice":"Error thrown when the token amount is invalid."}],"ZeroCycleDuration()":[{"notice":"Error thrown when the cycle duration is invalid."}],"ZeroMaxCycle()":[{"notice":"Error thrown when the cycle is invalid."}]},"events":{"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)":{"notice":"Event emitted when ASH are generated."},"UpdateOrbMultiplier(address,uint256,uint256)":{"notice":"Event emitted when the multiplier info is updated."}},"kind":"user","methods":{"BURN_WEIGHT_TOKEN_1()":{"notice":"The token weights for calculating Ash."},"CYCLE_DURATION()":{"notice":"The duration of each cycle."},"INITIAL_TIME()":{"notice":"The initial time of the contract."},"MAX_CYCLE()":{"notice":"The maximum cycle."},"MERKLE_ROOT()":{"notice":"The Merkle root for setting the puzzleMultiplier."},"MISSING_ORB()":{"notice":"The IERC1155 erc1155 contract for setting the token multiplier."},"MISSING_ORB_TOKEN_ID()":{"notice":"The token ID of RoC for setting the token multiplier."},"ORB_OF_POWER()":{"notice":"The IERC1155Burnable erc1155 contracts burn to generate ASH."},"ROC_MULTIPLIER()":{"notice":"The Riddle Of Chaos multiplier."},"constructor":{"notice":"Constructor for the OrbsBurnPool contract."},"currentCycle()":{"notice":"Get the current cycle."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Burn the tokens and calculate the ash."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field."},"orbMultipliers(address)":{"notice":"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalAshPerCycle(uint256)":{"notice":"The total amount of ASH generated in each cycle."},"userAshPerCycle(uint256,address)":{"notice":"The total amount of ASH generated by each user in each cycle."}},"version":1}}}}}}