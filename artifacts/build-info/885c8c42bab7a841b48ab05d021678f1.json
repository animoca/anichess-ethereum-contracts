{"id":"885c8c42bab7a841b48ab05d021678f1","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the pending contract owner but is required to.\n/// @param account The account that was checked.\nerror NotPendingContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when `role` is granted to `account`.\n/// @param role The role that has been granted.\n/// @param account The account that has been granted the role.\n/// @param operator The account that granted the role.\nevent RoleGranted(bytes32 role, address account, address operator);\n\n/// @notice Emitted when `role` is revoked from `account`.\n/// @param role The role that has been revoked.\n/// @param account The account that has been revoked the role.\n/// @param operator The account that revoked the role.\nevent RoleRevoked(bytes32 role, address account, address operator);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n/// @notice Emitted when a new contract owner is pending.\n/// @param pendingOwner the address of the new contract owner.\nevent OwnershipTransferPending(address indexed pendingOwner);\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {RoleGranted, RoleRevoked} from \"./../events/AccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\n\nlibrary AccessControlStorage {\n    using Address for address;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IPause} from \"./../interfaces/IPause.sol\";\nimport {PauseStorage} from \"./../libraries/PauseStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Pausing mechanism (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract PauseBase is IPause, Context {\n    using PauseStorage for PauseStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {Paused} if the contract is paused.\n    /// @dev Emits a {Paused} event.\n    function pause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().pause();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    function unpause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().unpause();\n    }\n\n    // /// @inheritdoc IPause\n    function paused() external view returns (bool) {\n        return PauseStorage.layout().paused();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/errors/PauseErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the contract is paused but is required not to.\nerror Paused();\n\n/// @notice Thrown when the contract is not paused but is required to.\nerror NotPaused();\n"},"@animoca/ethereum-contracts/contracts/lifecycle/events/PauseEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when the pause is triggered.\nevent Pause();\n\n/// @notice Emitted when the pause is lifted.\nevent Unpause();\n"},"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Pausing mechanism (functions)\ninterface IPause {\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused() external view returns (bool isPaused);\n}\n"},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Paused, NotPaused} from \"./../errors/PauseErrors.sol\";\nimport {Pause, Unpause} from \"./../events/PauseEvents.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary PauseStorage {\n    using PauseStorage for PauseStorage.Layout;\n\n    struct Layout {\n        bool isPaused;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial pause state (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits a {Pause} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function constructorInit(Layout storage s, bool isPaused) internal {\n        if (isPaused) {\n            s.isPaused = true;\n            emit Pause();\n        }\n    }\n\n    /// @notice Initializes the storage with an initial pause state (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits a {Pause} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function proxyInit(Layout storage s, bool isPaused) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(isPaused);\n    }\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts with {Paused} if the contract is paused.\n    /// @dev Emits a {Pause} event.\n    function pause(Layout storage s) internal {\n        s.enforceIsNotPaused();\n        s.isPaused = true;\n        emit Pause();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\n    /// @dev Emits an {Unpause} event.\n    function unpause(Layout storage s) internal {\n        s.enforceIsPaused();\n        s.isPaused = false;\n        emit Unpause();\n    }\n\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused(Layout storage s) internal view returns (bool isPaused) {\n        return s.isPaused;\n    }\n\n    /// @notice Ensures that the contract is paused.\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\n    function enforceIsPaused(Layout storage s) internal view {\n        if (!s.isPaused) revert NotPaused();\n    }\n\n    /// @notice Ensures that the contract is not paused.\n    /// @dev Reverts with {Paused} if the contract is paused.\n    function enforceIsNotPaused(Layout storage s) internal view {\n        if (s.isPaused) revert Paused();\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (\n            msg.sender == address(_FORWARDER_REGISTRY) ||\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\n        ) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Meta-Transactions Forwarder Registry.\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @param target The target contract.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ITokenRecovery} from \"./../interfaces/ITokenRecovery.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {TokenRecoveryLibrary} from \"./../libraries/TokenRecoveryLibrary.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\n    }\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\n    }\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\n\n/// @title Uniquely identified seals management.\ninterface ITokenRecovery {\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InconsistentArrayLengths} from \"./../../CommonErrors.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {IERC165} from \"./../../introspection/interfaces/IERC165.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary TokenRecoveryLibrary {\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\n    /// @param tokenContract The token contract being recovered.\n    error IncorrectTokenContractType(address tokenContract);\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\n        uint256 length = accounts.length;\n        if (length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            accounts[i].sendValue(amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\n        uint256 length = accounts.length;\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\n        uint256 length = accounts.length;\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            IERC721 tokenContract = contracts[i];\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\n                revert IncorrectTokenContractType(address(tokenContract));\n            }\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\n"},"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ninterface ILinearPool {\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerStakePoint() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function stake(bytes calldata stakeData) external payable;\n\n    function withdraw(bytes calldata withdrawData) external;\n\n    function claim() external;\n\n    function addReward(uint256 reward, uint256 duration) external payable;\n}\n"},"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {TokenRecovery} from \"./../../security/TokenRecovery.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\nimport {AccessControlStorage} from \"./../../access/libraries/AccessControlStorage.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ILinearPool} from \"./interfaces/ILinearPool.sol\";\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\n\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\n\n/// @title Linear rewards distribution staking pool.\n/// @notice Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.\n/// @notice Stakes, whether fungible or non-fungible, map to an amount of \"stake points\", then used to compute the user rewards share.\n/// @notice NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.\n/// @notice If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.\n/// @notice NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,\n/// @notice the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract.\nabstract contract LinearPool is ILinearPool, AccessControl, ReentrancyGuard, TokenRecovery, ForwarderRegistryContext {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant REWARDER_ROLE = \"rewarder\";\n    uint256 public constant SCALING_FACTOR = 1e18;\n\n    uint256 public totalStaked;\n    uint256 public lastUpdated;\n    uint256 public rewardRate;\n    uint256 public rewardPerStakePointStored;\n    uint256 public distributionEnd;\n\n    mapping(address staker => uint256 stakePoints) public staked;\n    mapping(address staker => uint256 reward) public rewards;\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\n\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\n\n    error InvalidStakeAmount();\n    error InvalidWithdrawAmount();\n    error NotEnoughStake(address staker, uint256 stake, uint256 withdraw);\n    error InvalidRewardAmount();\n    error InvalidDuration();\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\n\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function _updateReward(address account) internal {\n        rewardPerStakePointStored = rewardPerStakePoint();\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\n            // ensure rewards before the first staker do not get lost\n            lastUpdated = lastTimeRewardApplicable();\n        }\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\n        }\n    }\n\n    /// @notice Returns the last time rewards are applicable.\n    /// @return The minimum of the current block timestamp and the distribution end.\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        uint256 currentDistributionEnd = distributionEnd;\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\n    }\n\n    /// @notice Returns the current reward per stake point.\n    /// @return The sum of the last stored value and the new rewards since the last update\n    function rewardPerStakePoint() public view returns (uint256) {\n        uint256 currentTotalStaked = totalStaked;\n        if (currentTotalStaked == 0) {\n            return rewardPerStakePointStored;\n        }\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\n    }\n\n    /// @notice Returns the amount of rewards earned by the account.\n    /// @param account The address of the account to check.\n    /// @return The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\n    function earned(address account) public view returns (uint256) {\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\n    }\n\n    /// @notice Stakes to the pool.\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\n    /// @dev The stakeData is not used in the base implementation, but it is passed to the event for convenience.\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\n        _stake(_msgSender(), stakeData);\n    }\n\n    /// @notice Stakes to the pool.\n    /// @param staker The address of the staker.\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\n    function _stake(address staker, bytes memory stakeData) internal virtual {\n        _updateReward(staker);\n        uint256 stakePoints = _computeStake(staker, stakeData);\n        require(stakePoints != 0, InvalidStakeAmount());\n        totalStaked += stakePoints;\n        staked[staker] += stakePoints;\n        emit Staked(staker, stakeData, stakePoints);\n    }\n\n    /// @notice Withdraws from the pool.\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\n    /// @dev The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\n        _withdraw(_msgSender(), withdrawData);\n    }\n\n    /// @notice Withdraws from the pool.\n    /// @param staker The address of the staker.\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\n    function _withdraw(address staker, bytes memory withdrawData) internal virtual {\n        _updateReward(staker);\n        uint256 stakePoints = _computeWithdraw(staker, withdrawData);\n        require(stakePoints != 0, InvalidWithdrawAmount());\n        uint256 currentStaked = staked[staker];\n        require(currentStaked >= stakePoints, NotEnoughStake(staker, currentStaked, stakePoints));\n        unchecked {\n            // no underflow possible\n            staked[staker] -= stakePoints;\n            totalStaked = currentStaked - stakePoints;\n        }\n        emit Withdrawn(staker, withdrawData, stakePoints);\n    }\n\n    /// @notice Claims the rewards for the sender.\n    /// @dev Emits a {Claimed} event with the staker address, claimData and reward.\n    /// @dev The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\n    function claim() public virtual {\n        address staker = _msgSender();\n        _updateReward(staker);\n        uint256 reward = earned(staker);\n        if (reward != 0) {\n            rewards[staker] = 0;\n            bytes memory claimData = _computeClaim(staker, reward);\n            emit Claimed(staker, claimData, reward);\n        }\n    }\n\n    /// @notice Adds rewards to the pool.\n    /// @notice If there is an ongoing distribution, the new rewards are added to the current distribution:\n    /// @notice - If the new distribution ends before the current one, the new rewards are added to the current distribution.\n    /// @notice - If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\n    /// @param reward The amount of rewards to be added.\n    /// @param duration The duration of the rewards distribution.\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.\n    /// @dev Reverts with {InvalidRewardAmount} if the reward amount is 0.\n    /// @dev Reverts with {InvalidDuration} if the duration is 0.\n    /// @dev Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.\n    /// @dev Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\n        address rewarder = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, rewarder);\n\n        require(reward != 0, InvalidRewardAmount());\n        require(duration != 0, InvalidDuration());\n\n        _updateReward(address(0));\n\n        uint256 dust;\n        uint256 currentDistributionEnd = distributionEnd;\n        uint256 newDisributionEnd = block.timestamp + duration;\n\n        if (block.timestamp >= currentDistributionEnd) {\n            // No current distribution\n            uint256 newRewardRate = reward / duration;\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\n            rewardRate = newRewardRate;\n            dust = reward % duration;\n            distributionEnd = newDisributionEnd;\n        } else {\n            if (newDisributionEnd <= currentDistributionEnd) {\n                // New distribution ends before current distribution\n                duration = currentDistributionEnd - block.timestamp;\n                uint256 additionalRewardRate = reward / duration;\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\n                rewardRate += additionalRewardRate;\n                dust = reward % duration;\n            } else {\n                // New distribution ends after current distribution\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\n                uint256 totalReward = remainingReward + reward;\n                rewardRate = totalReward / duration;\n                dust = totalReward % duration;\n                distributionEnd = newDisributionEnd;\n            }\n        }\n        lastUpdated = block.timestamp;\n\n        _computeAddReward(rewarder, reward, dust);\n\n        emit RewardAdded(rewarder, reward, duration, dust);\n    }\n\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\n\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\n\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\n\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {LinearPool} from \"./../LinearPool.sol\";\nimport {ERC20Receiver} from \"./../../../token/ERC20/ERC20Receiver.sol\";\nimport {TokenRecoveryBase} from \"./../../../security/base/TokenRecoveryBase.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\n\n/// @title ERC20StakingLinearPool\n/// @notice A linear pool that allows staking of ERC20 tokens.\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable STAKING_TOKEN;\n\n    error InvalidToken();\n    error InvalidRecoveryAmount(uint256 requested, uint256 recoverable);\n\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\n        STAKING_TOKEN = stakingToken;\n    }\n\n    /// @notice Callback called when the contract receives ERC20 tokens via the IERC20SafeTransfers functions.\n    /// @param from The address of the sender.\n    /// @param value The amount of tokens received.\n    /// @return bytes4 The function selector of the callback.\n    /// @dev Reverts  with {InvalidToken} if the sender is not the staking token.\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\n        bool requiresTransfer = false;\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\n        return this.onERC20Received.selector;\n    }\n\n    /// @inheritdoc LinearPool\n    /// @param stakeData The data to be used for staking, encoded as (uint256 value)\n    function stake(bytes calldata stakeData) public payable virtual override {\n        // non-reentrancy check removed\n        bool requiresTransfer = true;\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\n    }\n\n    /// @inheritdoc LinearPool\n    /// @param stakeData The data to be used for staking, encoded as (bool requiresTransfer, bytes data) where data is (uint256 value).\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\n        stakePoints = abi.decode(data, (uint256));\n        if (requiresTransfer) {\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\n        }\n    }\n\n    /// @inheritdoc LinearPool\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\n    function withdraw(bytes calldata withdrawData) public virtual override {\n        // non-reentrancy check removed\n        _withdraw(_msgSender(), withdrawData);\n    }\n\n    /// @inheritdoc LinearPool\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\n        stakePoints = abi.decode(withdrawData, (uint256));\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\n    }\n\n    /// @inheritdoc TokenRecoveryBase\n    /// @dev Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual override {\n        uint256 stakingTokenRecoveryAmount;\n        for (uint256 i; i < tokens.length; ++i) {\n            if (tokens[i] == STAKING_TOKEN) {\n                stakingTokenRecoveryAmount += amounts[i];\n            }\n        }\n        if (stakingTokenRecoveryAmount != 0) {\n            uint256 recoverable = STAKING_TOKEN.balanceOf(address(this)) - totalStaked;\n            if (stakingTokenRecoveryAmount > recoverable) {\n                revert InvalidRecoveryAmount(stakingTokenRecoveryAmount, recoverable);\n            }\n        }\n        super.recoverERC20s(accounts, tokens, amounts);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Receiver} from \"./interfaces/IERC20Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\ninterface IERC20SafeTransfers {\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary Address {\n    /// @notice Checks if the address is a deployed smart contract.\n    /// @param addr The address to check.\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\n    function hasBytecode(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size != 0;\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/merkleClaim/CheckmateMerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IERC20SafeTransfers} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {PauseBase} from \"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\";\nimport {PauseStorage} from \"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\";\n\ncontract CheckmateMerkleClaim is ContractOwnership, PauseBase {\n    using MerkleProof for bytes32[];\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using PauseStorage for PauseStorage.Layout;\n\n    /// @notice a reference to checkmate token contract\n    address public immutable CHECKMATE_TOKEN_CONTRACT;\n\n    /// @notice a reference to staking contract\n    address public immutable STAKING_CONTRACT;\n\n    /// @notice Store the merkle root to nonce mapping\n    mapping(bytes32 root => uint16 nonce) public rootToNonceMap;\n\n    /// @notice leaf hash to claimed state\n    mapping(bytes32 leaf => bool claimed) public claimed;\n\n    /// @notice Store the payout wallet address for transfering checkmate token\n    address public payoutWallet;\n\n    /// @notice Store the nonce\n    uint16 public nonce;\n\n    /// @notice Emitted when a new merkle root is set.\n    /// @param root The new merkle root.\n    /// @param nonce The nonce assigned to the root.\n    event MerkleRootSet(bytes32 indexed root, uint16 indexed nonce);\n\n    /// @notice Emitted when a new payout wallet is set.\n    /// @param newPayoutWallet The new payout wallet.\n    event PayoutWalletSet(address indexed newPayoutWallet);\n\n    /// @notice Emitted when a new treasury wallet is set.\n    /// @param newTreasuryWallet The new treasury wallet.\n    event TreasuryWalletSet(address indexed newTreasuryWallet);\n\n    /// @notice Emitted when a payout is claimed.\n    /// @param root The merkle root on which the claim was made.\n    /// @param payoutWallet The wallet sending out the checkmate token.\n    /// @param recipient The recipient of the checkmate token.\n    /// @param amount The amount of checkmate token is claimed.\n    event PayoutClaimed(bytes32 indexed root, address indexed payoutWallet, address indexed recipient, uint256 amount);\n\n    /// @notice Thrown when the given forwarder registry address is zero address.\n    error InvalidForwarderRegistry();\n\n    /// @notice Thrown when the given root is zero.\n    error InvalidRoot();\n\n    /// @notice Thrown when the given payout wallet address is zero address.\n    error InvalidPayoutWallet();\n\n    /// @notice Thrown when the checkmate token contract address is invalid.\n    error InvalidCheckmateTokenContract();\n\n    /// @notice Thrown when the staking contract address is invalid.\n    error InvalidStakingContract();\n\n    /// @notice Thrown when trying to claim the same leaf more than once.\n    /// @param recipient The recipient of the claim.\n    /// @param amount The amount of checkmate token is claimed.\n    /// @param root The root.\n    error AlreadyClaimed(address recipient, uint256 amount, bytes32 root);\n\n    /// @notice Thrown when a proof cannot be verified.\n    /// @param recipient The recipient of the checkmate token.\n    /// @param amount The amount of checkmate token is claimed.\n    /// @param nonce The nonce of the root.\n    error InvalidProof(address recipient, uint256 amount, uint16 nonce);\n\n    /// @notice Thrown when the merkle root does not exist.\n    /// @param root The root.\n    error MerkleRootNotExists(bytes32 root);\n\n    /// @notice Thrown when the claim amount is zero.\n    /// @param amount The amount of the claim.\n    error InvalidClaimAmount(uint256 amount);\n\n    /// @notice Thrown when checkmate token transfer failed.\n    /// @param payoutWallet The wallet sending out the checkmate token.\n    /// @param recipient The recipient of the claim.\n    /// @param amount The amount of the claim.\n    error TransferFailed(address payoutWallet, address recipient, uint256 amount);\n\n    constructor(address checkmateTokenContract_, address stakingContract_, address payoutWallet_) ContractOwnership(msg.sender) {\n        if (checkmateTokenContract_ == address(0)) {\n            revert InvalidCheckmateTokenContract();\n        }\n        if (stakingContract_ == address(0)) {\n            revert InvalidStakingContract();\n        }\n        if (payoutWallet_ == address(0)) {\n            revert InvalidPayoutWallet();\n        }\n\n        CHECKMATE_TOKEN_CONTRACT = checkmateTokenContract_;\n        STAKING_CONTRACT = stakingContract_;\n        payoutWallet = payoutWallet_;\n    }\n\n    /// @notice Sets the new merkle root with current nonce for claiming.\n    /// @dev Reverts with {InvalidRoot} if the merkle root is zero.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {MerkleRootSet} event.\n    /// @param merkleRoot The merkle root to be set.\n    function setMerkleRoot(bytes32 merkleRoot) external {\n        if (merkleRoot == 0) {\n            revert InvalidRoot();\n        }\n\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        uint16 _nonce = nonce + 1;\n        rootToNonceMap[merkleRoot] = _nonce;\n        nonce = _nonce;\n\n        emit MerkleRootSet(merkleRoot, _nonce);\n    }\n\n    /// @notice Sets the new payout wallet.\n    /// @dev Reverts with {InvalidPayoutWallet} if the new payout wallet is zero address.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param newPayoutWallet The payout wallet to be set.\n    function setPayoutWallet(address newPayoutWallet) external {\n        if (newPayoutWallet == address(0)) {\n            revert InvalidPayoutWallet();\n        }\n\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        payoutWallet = newPayoutWallet;\n\n        emit PayoutWalletSet(newPayoutWallet);\n    }\n\n    /// @notice Executes the payout for a given recipient address (anyone can call this function) and stake the payout right away.\n    /// @dev Reverts with {InvalidClaimAmount} if it is claiming a zero amount.\n    /// @dev Reverts with {Paused} if contract is paused.\n    /// @dev Reverts with {MerkleRootNotExists} if the merkle root does not exist.\n    /// @dev Reverts with {InvalidProof} if the merkle proof has failed the verification\n    /// @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\n    /// @dev Emits a {PayoutClaimed} event.\n    /// @param recipient The recipient for this claim.\n    /// @param amount The amount of checkmate token to be claimed.\n    /// @param root The root for this claim.\n    /// @param proof The Merkle proof of the user based on the merkle root.\n    function claimAndStake(address recipient, uint256 amount, bytes32 root, bytes32[] calldata proof) external {\n        if (amount == 0) {\n            revert InvalidClaimAmount(amount);\n        }\n\n        PauseStorage.layout().enforceIsNotPaused();\n\n        uint16 _nonce = rootToNonceMap[root];\n        if (_nonce == 0) {\n            revert MerkleRootNotExists(root);\n        }\n\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, amount, _nonce));\n        if (!proof.verifyCalldata(root, leaf)) {\n            revert InvalidProof(recipient, amount, _nonce);\n        }\n\n        if (claimed[leaf]) {\n            revert AlreadyClaimed(recipient, amount, root);\n        }\n\n        claimed[leaf] = true;\n\n        address _payoutWallet = payoutWallet;\n        bool success = IERC20SafeTransfers(CHECKMATE_TOKEN_CONTRACT).safeTransferFrom(_payoutWallet, STAKING_CONTRACT, amount, abi.encode(recipient));\n        if (!success) {\n            revert TransferFailed(_payoutWallet, recipient, amount);\n        }\n        emit PayoutClaimed(root, _payoutWallet, recipient, amount);\n    }\n}\n"},"contracts/mocks/ERC20/ERC20ReceiverMock.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.28;\n\nimport {IERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\";\n\ncontract ERC20ReceiverMock is IERC20Receiver {\n    function onERC20Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\n        return 0x4fc35859;\n    }\n}\n"},"contracts/mocks/ERC20/ERC20SafeTransfersAlwaysFailedMock.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.28;\n\nimport {IERC20SafeTransfers} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\";\ncontract ERC20SafeTransfersAlwaysFailedMock is IERC20SafeTransfers {\n    function safeTransfer(address, uint256, bytes calldata) external pure returns (bool) {\n        return false;\n    }\n\n    function safeTransferFrom(address, address, uint256, bytes calldata) external pure returns (bool) {\n        return false;\n    }\n}\n"},"contracts/mocks/points/PointsMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IPoints} from \"../../points/interface/IPoints.sol\";\n\ncontract PointsMock is IPoints {\n    /// @notice Emitted when an amount is deposited to a balance.\n    /// @param sender The sender of the deposit.\n    /// @param reasonCode The reason code of the deposit.\n    /// @param holder The holder of the balance deposited to.\n    /// @param amount The amount deposited.\n    event Deposited(address indexed sender, bytes32 indexed reasonCode, address indexed holder, uint256 amount);\n\n    /// @notice Called by a depositor to increase the balance of a holder.\n    /// @param holder The holder of the balance to deposit to.\n    /// @param amount The amount to deposit.\n    /// @param depositReasonCode The reason code of the deposit.\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external {\n        emit Deposited(msg.sender, depositReasonCode, holder, amount);\n    }\n}\n"},"contracts/points/interface/IPoints.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.28;\n\ninterface IPoints {\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\n}\n"},"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {ERC20StakingPointsRewardsLinearPool} from \"./ERC20StakingPointsRewardsLinearPool.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IPoints} from \"./../points/interface/IPoints.sol\";\n\n/// @title ERC20StakingPointsRewardsLimitedLinearPool\n/// @notice This contract is used to stake ERC20 tokens and obtain Points rewards.\n/// @notice Staking can only be done via a claim contract and the `stake` function is not available.\ncontract ERC20StakingPointsRewardsLimitedLinearPool is ERC20StakingPointsRewardsLinearPool {\n    error InvalidTransferOperator(address operator);\n    error OnlyReceiverInterface();\n\n    constructor(\n        address claimContract,\n        IERC20 stakingToken,\n        IPoints pointsContract,\n        bytes32 depositReasonCode,\n        IForwarderRegistry forwarderRegistry\n    ) ERC20StakingPointsRewardsLinearPool(claimContract, stakingToken, pointsContract, depositReasonCode, forwarderRegistry) {}\n\n    function onERC20Received(address operator, address, uint256 value, bytes calldata data) external virtual override returns (bytes4) {\n        require(msg.sender == address(STAKING_TOKEN), InvalidToken());\n        require(operator == CLAIM_CONTRACT, InvalidTransferOperator(operator));\n        address staker = abi.decode(data, (address));\n        _stake(staker, abi.encode(value));\n        return this.onERC20Received.selector;\n    }\n\n    /// @dev Reverts with {OnlyReceiverInterface}.\n    function stake(bytes calldata) public payable virtual override {\n        revert OnlyReceiverInterface();\n    }\n\n    function _computeStake(address, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\n        // The tokens were received via the receiver interface, so we don't need to transfer them.\n        stakePoints = abi.decode(stakeData, (uint256));\n    }\n}\n"},"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {LinearPool} from \"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\";\nimport {ERC20StakingLinearPool} from \"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\";\nimport {LinearPool_PointsRewards} from \"./reward/LinearPool_PointsRewards.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IPoints} from \"./../points/interface/IPoints.sol\";\n\n/// @title ERC20StakingPointsRewardsLinearPool\n/// @notice This contract is used to stake ERC20 tokens and obtain Points rewards.\n/// @notice Staking can be done by the user or via a claim contract.\ncontract ERC20StakingPointsRewardsLinearPool is ERC20StakingLinearPool, LinearPool_PointsRewards {\n    address public immutable CLAIM_CONTRACT;\n\n    constructor(\n        address claimContract,\n        IERC20 stakingToken,\n        IPoints pointsContract,\n        bytes32 depositReasonCode,\n        IForwarderRegistry forwarderRegistry\n    ) ERC20StakingLinearPool(stakingToken, forwarderRegistry) LinearPool_PointsRewards(pointsContract, depositReasonCode) {\n        CLAIM_CONTRACT = claimContract;\n    }\n\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external virtual override returns (bytes4) {\n        require(msg.sender == address(STAKING_TOKEN), InvalidToken());\n        bool requiresTransfer = false;\n        if (operator == CLAIM_CONTRACT) {\n            address staker = abi.decode(data, (address));\n            _stake(staker, abi.encode(requiresTransfer, abi.encode(value)));\n        } else {\n            _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\n        }\n        return this.onERC20Received.selector;\n    }\n\n    function _computeClaim(\n        address staker,\n        uint256 reward\n    ) internal virtual override(LinearPool, LinearPool_PointsRewards) returns (bytes memory claimData) {\n        return LinearPool_PointsRewards._computeClaim(staker, reward);\n    }\n\n    function _computeAddReward(address rewarder, uint256 reward, uint256 dust) internal virtual override(LinearPool, LinearPool_PointsRewards) {\n        LinearPool_PointsRewards._computeAddReward(rewarder, reward, dust);\n    }\n}\n"},"contracts/staking/reward/LinearPool_PointsRewards.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IPoints} from \"./../../points/interface/IPoints.sol\";\n\n/// @title LinearPool_PointsRewards\n/// @notice This contract is used to handle the points rewards for linear pools.\n// solhint-disable-next-line contract-name-capwords\nabstract contract LinearPool_PointsRewards {\n    IPoints public immutable POINTS_CONTRACT;\n    bytes32 public immutable DEPOSIT_REASON_CODE;\n\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\n        POINTS_CONTRACT = pointsContract;\n        DEPOSIT_REASON_CODE = depositReasonCode;\n    }\n\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\n        claimData = abi.encode(reward);\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\n    }\n\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7],"TransferFailed":[10]},"id":11,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"},{"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"286:52:0","text":"@notice Thrown when an ETH transfer has failed."},"errorSelector":"90b8ec18","id":10,"name":"TransferFailed","nameLocation":"344:14:0","nodeType":"ErrorDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"358:2:0"},"src":"338:23:0"}],"src":"32:330:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[22],"AccessControlBase":[179],"ContractOwnership":[55]},"id":23,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":12,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":14,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":180,"src":"58:63:1","symbolAliases":[{"foreign":{"id":13,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"66:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":16,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":56,"src":"122:58:1","symbolAliases":[{"foreign":{"id":15,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"130:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":18,"name":"AccessControlBase","nameLocations":["384:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"384:17:1"},"id":19,"nodeType":"InheritanceSpecifier","src":"384:17:1"},{"baseName":{"id":20,"name":"ContractOwnership","nameLocations":["403:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"403:17:1"},"id":21,"nodeType":"InheritanceSpecifier","src":"403:17:1"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"182:167:1","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":22,"linearizedBaseContracts":[22,55,892,909,227,179,4085,341,325],"name":"AccessControl","nameLocation":"367:13:1","nodeType":"ContractDefinition","nodes":[],"scope":23,"src":"349:74:1","usedErrors":[236,259,897],"usedEvents":[282,291,300]}],"src":"32:392:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[55],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[862],"InterfaceDetection":[892]},"id":56,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":24,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":26,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":863,"src":"58:82:2","symbolAliases":[{"foreign":{"id":25,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"66:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":28,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":228,"src":"141:71:2","symbolAliases":[{"foreign":{"id":27,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"149:21:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":30,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":893,"src":"213:77:2","symbolAliases":[{"foreign":{"id":29,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"221:18:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":32,"name":"ContractOwnershipBase","nameLocations":["549:21:2"],"nodeType":"IdentifierPath","referencedDeclaration":227,"src":"549:21:2"},"id":33,"nodeType":"InheritanceSpecifier","src":"549:21:2"},{"baseName":{"id":34,"name":"InterfaceDetection","nameLocations":["572:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":892,"src":"572:18:2"},"id":35,"nodeType":"InheritanceSpecifier","src":"572:18:2"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"292:218:2","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":55,"linearizedBaseContracts":[55,892,909,227,4085,341],"name":"ContractOwnership","nameLocation":"528:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":39,"libraryName":{"id":36,"name":"ContractOwnershipStorage","nameLocations":["603:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"603:24:2"},"nodeType":"UsingForDirective","src":"597:67:2","typeName":{"id":38,"nodeType":"UserDefinedTypeName","pathNode":{"id":37,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:2","657:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"632:31:2"},"referencedDeclaration":635,"src":"632:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":53,"nodeType":"Block","src":"998:80:2","statements":[{"expression":{"arguments":[{"id":50,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1058:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":45,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1008:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1008:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":49,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:2","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":705,"src":"1008:49:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1008:63:2"}]},"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"670:289:2","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":54,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:2","nodeType":"VariableDeclaration","scope":54,"src":"976:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"998:0:2"},"scope":55,"src":"964:114:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":56,"src":"510:570:2","usedErrors":[259,897],"usedEvents":[300]}],"src":"32:1049:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[179],"AccessControlStorage":[604],"Context":[4085],"ContractOwnershipStorage":[862],"IAccessControl":[325]},"id":180,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":57,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../../access/interfaces/IAccessControl.sol","id":59,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":326,"src":"58:76:3","symbolAliases":[{"foreign":{"id":58,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"66:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":61,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":605,"src":"135:77:3","symbolAliases":[{"foreign":{"id":60,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"143:20:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":63,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":863,"src":"213:85:3","symbolAliases":[{"foreign":{"id":62,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"221:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":65,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":4086,"src":"299:66:3","symbolAliases":[{"foreign":{"id":64,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"307:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":67,"name":"IAccessControl","nameLocations":["632:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"632:14:3"},"id":68,"nodeType":"InheritanceSpecifier","src":"632:14:3"},{"baseName":{"id":69,"name":"Context","nameLocations":["648:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":4085,"src":"648:7:3"},"id":70,"nodeType":"InheritanceSpecifier","src":"648:7:3"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":66,"nodeType":"StructuredDocumentation","src":"367:226:3","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":179,"linearizedBaseContracts":[179,4085,325],"name":"AccessControlBase","nameLocation":"611:17:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":74,"libraryName":{"id":71,"name":"AccessControlStorage","nameLocations":["668:20:3"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"668:20:3"},"nodeType":"UsingForDirective","src":"662:59:3","typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"AccessControlStorage.Layout","nameLocations":["693:20:3","714:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"693:27:3"},"referencedDeclaration":369,"src":"693:27:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":78,"libraryName":{"id":75,"name":"ContractOwnershipStorage","nameLocations":["732:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"732:24:3"},"nodeType":"UsingForDirective","src":"726:67:3","typeName":{"id":77,"nodeType":"UserDefinedTypeName","pathNode":{"id":76,"name":"ContractOwnershipStorage.Layout","nameLocations":["761:24:3","786:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"761:31:3"},"referencedDeclaration":635,"src":"761:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":109,"nodeType":"Block","src":"1175:198:3","statements":[{"assignments":[87],"declarations":[{"constant":false,"id":87,"mutability":"mutable","name":"operator","nameLocation":"1193:8:3","nodeType":"VariableDeclaration","scope":109,"src":"1185:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":86,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":90,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"1204:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1185:31:3"},{"expression":{"arguments":[{"id":96,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1283:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":91,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1226:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1226:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":95,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1226:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":98,"nodeType":"ExpressionStatement","src":"1226:66:3"},{"expression":{"arguments":[{"id":104,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1342:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":105,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1348:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":106,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1357:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":99,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1302:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"1302:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1332:9:3","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":420,"src":"1302:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":108,"nodeType":"ExpressionStatement","src":"1302:64:3"}]},"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"799:312:3","text":"@notice Grants a role to an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":110,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1125:9:3","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"role","nameLocation":"1143:4:3","nodeType":"VariableDeclaration","scope":110,"src":"1135:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":80,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1135:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"account","nameLocation":"1157:7:3","nodeType":"VariableDeclaration","scope":110,"src":"1149:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1134:31:3"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"1175:0:3"},"scope":179,"src":"1116:257:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":141,"nodeType":"Block","src":"1754:199:3","statements":[{"assignments":[119],"declarations":[{"constant":false,"id":119,"mutability":"mutable","name":"operator","nameLocation":"1772:8:3","nodeType":"VariableDeclaration","scope":141,"src":"1764:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":122,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":120,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"1783:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1783:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1764:31:3"},{"expression":{"arguments":[{"id":128,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1862:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":123,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1805:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1830:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1805:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1839:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1805:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1805:66:3"},{"expression":{"arguments":[{"id":136,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"1922:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":137,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"1928:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":138,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1937:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":131,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1881:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1902:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"1881:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1911:10:3","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":457,"src":"1881:40:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":140,"nodeType":"ExpressionStatement","src":"1881:65:3"}]},"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"1379:310:3","text":"@notice Revokes a role from an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":142,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1703:10:3","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"role","nameLocation":"1722:4:3","nodeType":"VariableDeclaration","scope":142,"src":"1714:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"account","nameLocation":"1736:7:3","nodeType":"VariableDeclaration","scope":142,"src":"1728:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:31:3"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[],"src":"1754:0:3"},"scope":179,"src":"1694:259:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[314],"body":{"id":158,"nodeType":"Block","src":"2039:79:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":153,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"2092:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":155,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"2106:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":148,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2049:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"2049:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:12:3","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":492,"src":"2049:42:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$369_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":157,"nodeType":"ExpressionStatement","src":"2049:62:3"}]},"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"1959:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"8bb9c5bf","id":159,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2003:12:3","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"role","nameLocation":"2024:4:3","nodeType":"VariableDeclaration","scope":159,"src":"2016:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:14:3"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"2039:0:3"},"scope":179,"src":"1994:124:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[324],"body":{"id":177,"nodeType":"Block","src":"2245:76:3","statements":[{"expression":{"arguments":[{"id":173,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"2300:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":174,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":169,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2262:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2283:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"2262:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:7:3","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"2262:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":168,"id":176,"nodeType":"Return","src":"2255:59:3"}]},"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"2124:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"91d14854","id":178,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2168:7:3","nodeType":"FunctionDefinition","parameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"role","nameLocation":"2184:4:3","nodeType":"VariableDeclaration","scope":178,"src":"2176:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2176:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"account","nameLocation":"2198:7:3","nodeType":"VariableDeclaration","scope":178,"src":"2190:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"2190:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:31:3"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"hasRole_","nameLocation":"2235:8:3","nodeType":"VariableDeclaration","scope":178,"src":"2230:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":166,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:15:3"},"scope":179,"src":"2159:162:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":180,"src":"593:1730:3","usedErrors":[236,259],"usedEvents":[282,291]}],"src":"32:2292:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[4085],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[862],"IERC173":[341]},"id":228,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":181,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":342,"src":"58:52:4","symbolAliases":[{"foreign":{"id":182,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"66:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":185,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":863,"src":"111:85:4","symbolAliases":[{"foreign":{"id":184,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"119:24:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":187,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":4086,"src":"197:66:4","symbolAliases":[{"foreign":{"id":186,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"205:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":189,"name":"IERC173","nameLocations":["586:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"586:7:4"},"id":190,"nodeType":"InheritanceSpecifier","src":"586:7:4"},{"baseName":{"id":191,"name":"Context","nameLocations":["595:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":4085,"src":"595:7:4"},"id":192,"nodeType":"InheritanceSpecifier","src":"595:7:4"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"265:278:4","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":227,"linearizedBaseContracts":[227,4085,341],"name":"ContractOwnershipBase","nameLocation":"561:21:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":196,"libraryName":{"id":193,"name":"ContractOwnershipStorage","nameLocations":["615:24:4"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"615:24:4"},"nodeType":"UsingForDirective","src":"609:67:4","typeName":{"id":195,"nodeType":"UserDefinedTypeName","pathNode":{"id":194,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:4","669:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"644:31:4"},"referencedDeclaration":635,"src":"644:31:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[340],"body":{"id":208,"nodeType":"Block","src":"765:65:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":202,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"782:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"782:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":782,"src":"782:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":201,"id":207,"nodeType":"Return","src":"775:48:4"}]},"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"682:23:4","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:4","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"724:2:4"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":209,"src":"756:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:4"},"scope":227,"src":"710:120:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[334],"body":{"id":225,"nodeType":"Block","src":"924:92:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":220,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"986:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":222,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1000:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":215,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"934:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"934:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:4","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":769,"src":"934:51:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$635_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"934:75:4"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"836:23:4","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":226,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:4","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:4","nodeType":"VariableDeclaration","scope":226,"src":"891:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":211,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:4"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"924:0:4"},"scope":227,"src":"864:152:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":228,"src":"543:475:4","usedErrors":[259],"usedEvents":[300]}],"src":"32:987:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","exportedSymbols":{"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245]},"id":246,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":229,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:5"},{"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"58:165:5","text":"@notice Thrown when an account does not have the required role.\n @param role The role the caller is missing.\n @param account The account that was checked."},"errorSelector":"7aa72882","id":236,"name":"NotRoleHolder","nameLocation":"229:13:5","nodeType":"ErrorDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"role","nameLocation":"251:4:5","nodeType":"VariableDeclaration","scope":236,"src":"243:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"243:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"account","nameLocation":"265:7:5","nodeType":"VariableDeclaration","scope":236,"src":"257:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"242:31:5"},"src":"223:51:5"},{"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"276:238:5","text":"@notice Thrown when an account does not have the required role on a target contract.\n @param targetContract The contract that was checked.\n @param role The role that was checked.\n @param account The account that was checked."},"errorSelector":"7a436c16","id":245,"name":"NotTargetContractRoleHolder","nameLocation":"520:27:5","nodeType":"ErrorDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"targetContract","nameLocation":"556:14:5","nodeType":"VariableDeclaration","scope":245,"src":"548:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"580:4:5","nodeType":"VariableDeclaration","scope":245,"src":"572:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"572:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"account","nameLocation":"594:7:5","nodeType":"VariableDeclaration","scope":245,"src":"586:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":242,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"547:55:5"},"src":"514:89:5"}],"src":"32:572:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[252]},"id":253,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":247,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:6"},{"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"58:128:6","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":252,"name":"TargetIsNotAContract","nameLocation":"192:20:6","nodeType":"ErrorDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:6","nodeType":"VariableDeclaration","scope":252,"src":"213:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:6"},"src":"186:51:6"}],"src":"32:206:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[259],"NotPendingContractOwner":[264],"NotTargetContractOwner":[271]},"id":272,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":254,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:7"},{"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"58:130:7","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":259,"name":"NotContractOwner","nameLocation":"194:16:7","nodeType":"ErrorDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"account","nameLocation":"219:7:7","nodeType":"VariableDeclaration","scope":259,"src":"211:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:7"},"src":"188:40:7"},{"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"230:138:7","text":"@notice Thrown when an account is not the pending contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"61848752","id":264,"name":"NotPendingContractOwner","nameLocation":"374:23:7","nodeType":"ErrorDefinition","parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"account","nameLocation":"406:7:7","nodeType":"VariableDeclaration","scope":264,"src":"398:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"398:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"397:17:7"},"src":"368:47:7"},{"documentation":{"id":265,"nodeType":"StructuredDocumentation","src":"417:194:7","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":271,"name":"NotTargetContractOwner","nameLocation":"617:22:7","nodeType":"ErrorDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"targetContract","nameLocation":"648:14:7","nodeType":"VariableDeclaration","scope":271,"src":"640:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":266,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":269,"mutability":"mutable","name":"account","nameLocation":"672:7:7","nodeType":"VariableDeclaration","scope":271,"src":"664:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:41:7"},"src":"611:70:7"}],"src":"32:650:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","exportedSymbols":{"RoleGranted":[282],"RoleRevoked":[291]},"id":292,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":273,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:8"},{"anonymous":false,"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"58:223:8","text":"@notice Emitted when `role` is granted to `account`.\n @param role The role that has been granted.\n @param account The account that has been granted the role.\n @param operator The account that granted the role."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":282,"name":"RoleGranted","nameLocation":"287:11:8","nodeType":"EventDefinition","parameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"307:4:8","nodeType":"VariableDeclaration","scope":282,"src":"299:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"299:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":278,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"321:7:8","nodeType":"VariableDeclaration","scope":282,"src":"313:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":280,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"338:8:8","nodeType":"VariableDeclaration","scope":282,"src":"330:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":279,"name":"address","nodeType":"ElementaryTypeName","src":"330:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"298:49:8"},"src":"281:67:8"},{"anonymous":false,"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"350:225:8","text":"@notice Emitted when `role` is revoked from `account`.\n @param role The role that has been revoked.\n @param account The account that has been revoked the role.\n @param operator The account that revoked the role."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":291,"name":"RoleRevoked","nameLocation":"581:11:8","nodeType":"EventDefinition","parameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"601:4:8","nodeType":"VariableDeclaration","scope":291,"src":"593:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":287,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"615:7:8","nodeType":"VariableDeclaration","scope":291,"src":"607:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":289,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"632:8:8","nodeType":"VariableDeclaration","scope":291,"src":"624:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":288,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"592:49:8"},"src":"575:67:8"}],"src":"32:611:8"},"id":8},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferPending":[305],"OwnershipTransferred":[300]},"id":306,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":293,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:9"},{"anonymous":false,"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"58:155:9","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":300,"name":"OwnershipTransferred","nameLocation":"219:20:9","nodeType":"EventDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:9","nodeType":"VariableDeclaration","scope":300,"src":"240:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":298,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:9","nodeType":"VariableDeclaration","scope":300,"src":"271:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:9"},"src":"213:84:9"},{"anonymous":false,"documentation":{"id":301,"nodeType":"StructuredDocumentation","src":"299:121:9","text":"@notice Emitted when a new contract owner is pending.\n @param pendingOwner the address of the new contract owner."},"eventSelector":"fcf6b9a1f453b7c06ba4f44b1f8c38b02e8b90a7bd35bd0d5c43e2deb547f568","id":305,"name":"OwnershipTransferPending","nameLocation":"426:24:9","nodeType":"EventDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"467:12:9","nodeType":"VariableDeclaration","scope":305,"src":"451:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:30:9"},"src":"420:61:9"}],"src":"32:450:9"},"id":9},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","exportedSymbols":{"IAccessControl":[325]},"id":326,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":307,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"58:59:10","text":"@title Access control via roles management (functions)"},"fullyImplemented":false,"id":325,"linearizedBaseContracts":[325],"name":"IAccessControl","nameLocation":"127:14:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"148:182:10","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":314,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"344:12:10","nodeType":"FunctionDefinition","parameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"role","nameLocation":"365:4:10","nodeType":"VariableDeclaration","scope":314,"src":"357:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:14:10"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[],"src":"379:0:10"},"scope":325,"src":"335:45:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"386:173:10","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"functionSelector":"91d14854","id":324,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"573:7:10","nodeType":"FunctionDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"role","nameLocation":"589:4:10","nodeType":"VariableDeclaration","scope":324,"src":"581:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"581:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"account","nameLocation":"603:7:10","nodeType":"VariableDeclaration","scope":324,"src":"595:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"595:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:31:10"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"hasRole_","nameLocation":"640:8:10","nodeType":"VariableDeclaration","scope":324,"src":"635:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":321,"name":"bool","nodeType":"ElementaryTypeName","src":"635:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"634:15:10"},"scope":325,"src":"564:86:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":326,"src":"117:535:10","usedErrors":[],"usedEvents":[]}],"src":"32:621:10"},"id":10},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[341]},"id":342,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":327,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"58:182:11","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":341,"linearizedBaseContracts":[341],"name":"IERC173","nameLocation":"250:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":329,"nodeType":"StructuredDocumentation","src":"264:342:11","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":334,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:11","nodeType":"FunctionDefinition","parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:11","nodeType":"VariableDeclaration","scope":334,"src":"638:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:11"},"returnParameters":{"id":333,"nodeType":"ParameterList","parameters":[],"src":"664:0:11"},"scope":341,"src":"611:54:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":335,"nodeType":"StructuredDocumentation","src":"671:116:11","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":340,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:11","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[],"src":"806:2:11"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:11","nodeType":"VariableDeclaration","scope":340,"src":"832:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:11"},"scope":341,"src":"792:63:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":342,"src":"240:617:11","usedErrors":[],"usedEvents":[]}],"src":"32:826:11"},"id":11},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[604],"Address":[3218],"IAccessControl":[325],"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245],"RoleGranted":[282],"RoleRevoked":[291],"TargetIsNotAContract":[252]},"id":605,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":343,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","file":"./../errors/AccessControlErrors.sol","id":346,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":246,"src":"58:95:12","symbolAliases":[{"foreign":{"id":344,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"66:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":345,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"81:27:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":348,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":253,"src":"154:60:12","symbolAliases":[{"foreign":{"id":347,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"162:20:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","file":"./../events/AccessControlEvents.sol","id":351,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":292,"src":"215:77:12","symbolAliases":[{"foreign":{"id":349,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"223:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":350,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"236:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../interfaces/IAccessControl.sol","id":353,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":326,"src":"293:66:12","symbolAliases":[{"foreign":{"id":352,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"301:14:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","file":"./../../utils/libraries/Address.sol","id":355,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":3219,"src":"360:60:12","symbolAliases":[{"foreign":{"id":354,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"368:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":604,"linearizedBaseContracts":[604],"name":"AccessControlStorage","nameLocation":"430:20:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":358,"libraryName":{"id":356,"name":"Address","nameLocations":["463:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3218,"src":"463:7:12"},"nodeType":"UsingForDirective","src":"457:26:12","typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":362,"libraryName":{"id":359,"name":"AccessControlStorage","nameLocations":["494:20:12"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"494:20:12"},"nodeType":"UsingForDirective","src":"488:59:12","typeName":{"id":361,"nodeType":"UserDefinedTypeName","pathNode":{"id":360,"name":"AccessControlStorage.Layout","nameLocations":["519:20:12","540:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"519:27:12"},"referencedDeclaration":369,"src":"519:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":369,"members":[{"constant":false,"id":368,"mutability":"mutable","name":"roles","nameLocation":"622:5:12","nodeType":"VariableDeclaration","scope":369,"src":"577:50:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":367,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"585:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"577:44:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":366,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":364,"name":"address","nodeType":"ElementaryTypeName","src":"604:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"596:24:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":365,"name":"bool","nodeType":"ElementaryTypeName","src":"615:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"560:6:12","nodeType":"StructDefinition","scope":604,"src":"553:81:12","visibility":"public"},{"constant":true,"id":382,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"666:19:12","nodeType":"VariableDeclaration","scope":604,"src":"640:124:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"640:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"714:43:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":375,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"704:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"704:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"696:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"696:7:12","typeDescriptions":{}}},"id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"696:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"762:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"696:67:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"688:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"688:7:12","typeDescriptions":{}}},"id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"688:76:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":419,"nodeType":"Block","src":"1240:156:12","statements":[{"condition":{"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1254:25:12","subExpression":{"arguments":[{"id":397,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"1265:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":398,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"1271:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":395,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"1255:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1257:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"1255:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1255:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":418,"nodeType":"IfStatement","src":"1250:140:12","trueBody":{"id":417,"nodeType":"Block","src":"1281:109:12","statements":[{"expression":{"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":401,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"1295:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1297:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"1295:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":406,"indexExpression":{"id":403,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"1303:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1295:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":407,"indexExpression":{"id":404,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"1309:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1295:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1320:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1295:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":410,"nodeType":"ExpressionStatement","src":"1295:29:12"},{"eventCall":{"arguments":[{"id":412,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"1355:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":413,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"1361:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":414,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"1370:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":411,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"1343:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1343:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":416,"nodeType":"EmitStatement","src":"1338:41:12"}]}}]},"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"771:369:12","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":420,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1154:9:12","nodeType":"FunctionDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"s","nameLocation":"1179:1:12","nodeType":"VariableDeclaration","scope":420,"src":"1164:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":385,"nodeType":"UserDefinedTypeName","pathNode":{"id":384,"name":"Layout","nameLocations":["1164:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"1164:6:12"},"referencedDeclaration":369,"src":"1164:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"role","nameLocation":"1190:4:12","nodeType":"VariableDeclaration","scope":420,"src":"1182:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1182:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"account","nameLocation":"1204:7:12","nodeType":"VariableDeclaration","scope":420,"src":"1196:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"1196:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"operator","nameLocation":"1221:8:12","nodeType":"VariableDeclaration","scope":420,"src":"1213:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":391,"name":"address","nodeType":"ElementaryTypeName","src":"1213:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1163:67:12"},"returnParameters":{"id":394,"nodeType":"ParameterList","parameters":[],"src":"1240:0:12"},"scope":604,"src":"1145:251:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":456,"nodeType":"Block","src":"1870:156:12","statements":[{"condition":{"arguments":[{"id":435,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"1894:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":436,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"1900:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":433,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"1884:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1886:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"1884:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1884:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":455,"nodeType":"IfStatement","src":"1880:140:12","trueBody":{"id":454,"nodeType":"Block","src":"1910:110:12","statements":[{"expression":{"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":438,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"1924:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1926:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"1924:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":443,"indexExpression":{"id":440,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"1932:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1924:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":444,"indexExpression":{"id":441,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"1938:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1924:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1949:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1924:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":447,"nodeType":"ExpressionStatement","src":"1924:30:12"},{"eventCall":{"arguments":[{"id":449,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"1985:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":450,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"1991:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":451,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"2000:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":448,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"1973:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":453,"nodeType":"EmitStatement","src":"1968:41:12"}]}}]},"documentation":{"id":421,"nodeType":"StructuredDocumentation","src":"1402:367:12","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":457,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1783:10:12","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"s","nameLocation":"1809:1:12","nodeType":"VariableDeclaration","scope":457,"src":"1794:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":423,"nodeType":"UserDefinedTypeName","pathNode":{"id":422,"name":"Layout","nameLocations":["1794:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"1794:6:12"},"referencedDeclaration":369,"src":"1794:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":426,"mutability":"mutable","name":"role","nameLocation":"1820:4:12","nodeType":"VariableDeclaration","scope":457,"src":"1812:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1812:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":428,"mutability":"mutable","name":"account","nameLocation":"1834:7:12","nodeType":"VariableDeclaration","scope":457,"src":"1826:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"1826:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"operator","nameLocation":"1851:8:12","nodeType":"VariableDeclaration","scope":457,"src":"1843:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"1843:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1793:67:12"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"1870:0:12"},"scope":604,"src":"1774:252:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":491,"nodeType":"Block","src":"2361:134:12","statements":[{"expression":{"arguments":[{"id":471,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"2388:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":472,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2394:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":468,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"2371:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2373:14:12","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":567,"src":"2371:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"ExpressionStatement","src":"2371:30:12"},{"expression":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":475,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"2411:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2413:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"2411:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":480,"indexExpression":{"id":477,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"2419:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2411:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":481,"indexExpression":{"id":478,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2425:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2411:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2435:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2411:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":484,"nodeType":"ExpressionStatement","src":"2411:29:12"},{"eventCall":{"arguments":[{"id":486,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"2467:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":487,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2473:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":488,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2481:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":485,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"2455:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2455:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":490,"nodeType":"EmitStatement","src":"2450:38:12"}]},"documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"2032:245:12","text":"@notice Renounces a role by the sender.\n @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":492,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2291:12:12","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"s","nameLocation":"2319:1:12","nodeType":"VariableDeclaration","scope":492,"src":"2304:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":460,"nodeType":"UserDefinedTypeName","pathNode":{"id":459,"name":"Layout","nameLocations":["2304:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"2304:6:12"},"referencedDeclaration":369,"src":"2304:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"sender","nameLocation":"2330:6:12","nodeType":"VariableDeclaration","scope":492,"src":"2322:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":462,"name":"address","nodeType":"ElementaryTypeName","src":"2322:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":465,"mutability":"mutable","name":"role","nameLocation":"2346:4:12","nodeType":"VariableDeclaration","scope":492,"src":"2338:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2338:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2303:48:12"},"returnParameters":{"id":467,"nodeType":"ParameterList","parameters":[],"src":"2361:0:12"},"scope":604,"src":"2282:213:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":512,"nodeType":"Block","src":"2783:46:12","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":505,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"2800:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2802:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":368,"src":"2800:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":508,"indexExpression":{"id":507,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"2808:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2800:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":510,"indexExpression":{"id":509,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2814:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2800:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":504,"id":511,"nodeType":"Return","src":"2793:29:12"}]},"documentation":{"id":493,"nodeType":"StructuredDocumentation","src":"2501:173:12","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"id":513,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2688:7:12","nodeType":"FunctionDefinition","parameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"s","nameLocation":"2711:1:12","nodeType":"VariableDeclaration","scope":513,"src":"2696:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":495,"nodeType":"UserDefinedTypeName","pathNode":{"id":494,"name":"Layout","nameLocations":["2696:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"2696:6:12"},"referencedDeclaration":369,"src":"2696:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"role","nameLocation":"2722:4:12","nodeType":"VariableDeclaration","scope":513,"src":"2714:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2714:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"account","nameLocation":"2736:7:12","nodeType":"VariableDeclaration","scope":513,"src":"2728:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":499,"name":"address","nodeType":"ElementaryTypeName","src":"2728:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2695:49:12"},"returnParameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"hasRole_","nameLocation":"2773:8:12","nodeType":"VariableDeclaration","scope":513,"src":"2768:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":502,"name":"bool","nodeType":"ElementaryTypeName","src":"2768:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2767:15:12"},"scope":604,"src":"2679:150:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":542,"nodeType":"Block","src":"3274:165:12","statements":[{"condition":{"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3288:29:12","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":525,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3289:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3304:11:12","memberName":"hasBytecode","nodeType":"MemberAccess","referencedDeclaration":3217,"src":"3289:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3289:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":533,"nodeType":"IfStatement","src":"3284:78:12","trueBody":{"errorCall":{"arguments":[{"id":530,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3347:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":529,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"3326:20:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3326:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":532,"nodeType":"RevertStatement","src":"3319:43:12"}},{"expression":{"arguments":[{"id":538,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"3418:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":539,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"3424:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":535,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3394:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":534,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"3379:14:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$325_$","typeString":"type(contract IAccessControl)"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3379:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessControl_$325","typeString":"contract IAccessControl"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3410:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":324,"src":"3379:38:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3379:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":524,"id":541,"nodeType":"Return","src":"3372:60:12"}]},"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"2835:296:12","text":"@notice Checks whether an account has a role in a target contract.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check.\n @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`."},"id":543,"implemented":true,"kind":"function","modifiers":[],"name":"hasTargetContractRole","nameLocation":"3145:21:12","nodeType":"FunctionDefinition","parameters":{"id":521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"targetContract","nameLocation":"3175:14:12","nodeType":"VariableDeclaration","scope":543,"src":"3167:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":515,"name":"address","nodeType":"ElementaryTypeName","src":"3167:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"role","nameLocation":"3199:4:12","nodeType":"VariableDeclaration","scope":543,"src":"3191:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3191:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"account","nameLocation":"3213:7:12","nodeType":"VariableDeclaration","scope":543,"src":"3205:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"3205:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3166:55:12"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"hasTargetContractRole_","nameLocation":"3250:22:12","nodeType":"VariableDeclaration","scope":543,"src":"3245:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":522,"name":"bool","nodeType":"ElementaryTypeName","src":"3245:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3244:29:12"},"scope":604,"src":"3136:303:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":566,"nodeType":"Block","src":"3727:83:12","statements":[{"condition":{"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3741:25:12","subExpression":{"arguments":[{"id":556,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"3752:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":557,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"3758:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":554,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"3742:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3744:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":513,"src":"3742:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3742:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":565,"nodeType":"IfStatement","src":"3737:66:12","trueBody":{"errorCall":{"arguments":[{"id":561,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"3789:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":562,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"3795:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":560,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"3775:13:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$_t_error_$","typeString":"function (bytes32,address) pure returns (error)"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3775:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":564,"nodeType":"RevertStatement","src":"3768:35:12"}}]},"documentation":{"id":544,"nodeType":"StructuredDocumentation","src":"3445:190:12","text":"@notice Ensures that an account has a role.\n @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":567,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"3649:14:12","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":547,"mutability":"mutable","name":"s","nameLocation":"3679:1:12","nodeType":"VariableDeclaration","scope":567,"src":"3664:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":546,"nodeType":"UserDefinedTypeName","pathNode":{"id":545,"name":"Layout","nameLocations":["3664:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"3664:6:12"},"referencedDeclaration":369,"src":"3664:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":549,"mutability":"mutable","name":"role","nameLocation":"3690:4:12","nodeType":"VariableDeclaration","scope":567,"src":"3682:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3682:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":551,"mutability":"mutable","name":"account","nameLocation":"3704:7:12","nodeType":"VariableDeclaration","scope":567,"src":"3696:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"3696:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3663:49:12"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"3727:0:12"},"scope":604,"src":"3640:170:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":590,"nodeType":"Block","src":"4229:141:12","statements":[{"condition":{"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4243:53:12","subExpression":{"arguments":[{"id":578,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4266:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":579,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4282:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":580,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"4288:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":577,"name":"hasTargetContractRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"4244:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4244:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":589,"nodeType":"IfStatement","src":"4239:124:12","trueBody":{"errorCall":{"arguments":[{"id":584,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4333:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":585,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4349:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":586,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"4355:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":583,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"4305:27:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$_t_error_$","typeString":"function (address,bytes32,address) pure returns (error)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4305:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":588,"nodeType":"RevertStatement","src":"4298:65:12"}}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"3816:301:12","text":"@notice Enforces that an account has a role in a target contract.\n @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check."},"id":591,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasTargetContractRole","nameLocation":"4131:28:12","nodeType":"FunctionDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"targetContract","nameLocation":"4168:14:12","nodeType":"VariableDeclaration","scope":591,"src":"4160:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"4160:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"role","nameLocation":"4192:4:12","nodeType":"VariableDeclaration","scope":591,"src":"4184:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"account","nameLocation":"4206:7:12","nodeType":"VariableDeclaration","scope":591,"src":"4198:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"4198:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4159:55:12"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"4229:0:12"},"scope":604,"src":"4122:248:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":602,"nodeType":"Block","src":"4435:115:12","statements":[{"assignments":[598],"declarations":[{"constant":false,"id":598,"mutability":"mutable","name":"position","nameLocation":"4453:8:12","nodeType":"VariableDeclaration","scope":602,"src":"4445:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4445:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":600,"initialValue":{"id":599,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"4464:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4445:38:12"},{"AST":{"nativeSrc":"4502:42:12","nodeType":"YulBlock","src":"4502:42:12","statements":[{"nativeSrc":"4516:18:12","nodeType":"YulAssignment","src":"4516:18:12","value":{"name":"position","nativeSrc":"4526:8:12","nodeType":"YulIdentifier","src":"4526:8:12"},"variableNames":[{"name":"s.slot","nativeSrc":"4516:6:12","nodeType":"YulIdentifier","src":"4516:6:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":598,"isOffset":false,"isSlot":false,"src":"4526:8:12","valueSize":1},{"declaration":595,"isOffset":false,"isSlot":true,"src":"4516:6:12","suffix":"slot","valueSize":1}],"id":601,"nodeType":"InlineAssembly","src":"4493:51:12"}]},"id":603,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4385:6:12","nodeType":"FunctionDefinition","parameters":{"id":592,"nodeType":"ParameterList","parameters":[],"src":"4391:2:12"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"s","nameLocation":"4432:1:12","nodeType":"VariableDeclaration","scope":603,"src":"4417:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":594,"nodeType":"UserDefinedTypeName","pathNode":{"id":593,"name":"Layout","nameLocations":["4417:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"4417:6:12"},"referencedDeclaration":369,"src":"4417:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"4416:18:12"},"scope":604,"src":"4376:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":605,"src":"422:4130:12","usedErrors":[],"usedEvents":[]}],"src":"32:4521:12"},"id":12},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[3218],"ContractOwnershipStorage":[862],"IERC173":[341],"InterfaceDetectionStorage":[1010],"NotContractOwner":[259],"NotTargetContractOwner":[271],"OwnershipTransferred":[300],"ProxyInitialization":[1591],"TargetIsNotAContract":[252]},"id":863,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":606,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":272,"src":"58:97:13","symbolAliases":[{"foreign":{"id":607,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"66:16:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":608,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"84:22:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":611,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":253,"src":"156:60:13","symbolAliases":[{"foreign":{"id":610,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"164:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":613,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":306,"src":"217:66:13","symbolAliases":[{"foreign":{"id":612,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"225:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":615,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":342,"src":"284:52:13","symbolAliases":[{"foreign":{"id":614,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"292:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","file":"./../../utils/libraries/Address.sol","id":617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":3219,"src":"337:60:13","symbolAliases":[{"foreign":{"id":616,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"345:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":619,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":1592,"src":"398:84:13","symbolAliases":[{"foreign":{"id":618,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"406:19:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":863,"sourceUnit":1011,"src":"483:104:13","symbolAliases":[{"foreign":{"id":620,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"491:25:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":862,"linearizedBaseContracts":[862],"name":"ContractOwnershipStorage","nameLocation":"597:24:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":624,"libraryName":{"id":622,"name":"Address","nameLocations":["634:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3218,"src":"634:7:13"},"nodeType":"UsingForDirective","src":"628:26:13","typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"646:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":628,"libraryName":{"id":625,"name":"ContractOwnershipStorage","nameLocations":["665:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"665:24:13"},"nodeType":"UsingForDirective","src":"659:67:13","typeName":{"id":627,"nodeType":"UserDefinedTypeName","pathNode":{"id":626,"name":"ContractOwnershipStorage.Layout","nameLocations":["694:24:13","719:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"694:31:13"},"referencedDeclaration":635,"src":"694:31:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":632,"libraryName":{"id":629,"name":"InterfaceDetectionStorage","nameLocations":["737:25:13"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"737:25:13"},"nodeType":"UsingForDirective","src":"731:69:13","typeName":{"id":631,"nodeType":"UserDefinedTypeName","pathNode":{"id":630,"name":"InterfaceDetectionStorage.Layout","nameLocations":["767:25:13","793:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"767:32:13"},"referencedDeclaration":920,"src":"767:32:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":635,"members":[{"constant":false,"id":634,"mutability":"mutable","name":"contractOwner","nameLocation":"838:13:13","nodeType":"VariableDeclaration","scope":635,"src":"830:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"813:6:13","nodeType":"StructDefinition","scope":862,"src":"806:52:13","visibility":"public"},{"constant":true,"id":648,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"890:19:13","nodeType":"VariableDeclaration","scope":862,"src":"864:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"938:47:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":641,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"928:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"928:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"920:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"920:7:13","typeDescriptions":{}}},"id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:67:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"920:71:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"912:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:13","typeDescriptions":{}}},"id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:80:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":661,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1024:21:13","nodeType":"VariableDeclaration","scope":862,"src":"998:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1074:45:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":654,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1064:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:56:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1056:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:13","typeDescriptions":{}}},"id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1124:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1056:69:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1048:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:13","typeDescriptions":{}}},"id":660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1048:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":704,"nodeType":"Block","src":"1635:267:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":670,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1649:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1673:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:13","typeDescriptions":{}}},"id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":691,"nodeType":"IfStatement","src":"1645:152:13","trueBody":{"id":690,"nodeType":"Block","src":"1677:120:13","statements":[{"expression":{"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":676,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"1691:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1693:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"1691:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":679,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1709:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1691:30:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":681,"nodeType":"ExpressionStatement","src":"1691:30:13"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1769:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1761:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"1761:7:13","typeDescriptions":{}}},"id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1761:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":687,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1773:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":682,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"1740:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":689,"nodeType":"EmitStatement","src":"1735:51:13"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":698,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1868:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$341_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$341_$","typeString":"type(contract IERC173)"}],"id":697,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1863:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1863:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$341","typeString":"type(contract IERC173)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1877:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"1863:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1890:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":692,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"1806:25:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1832:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"1806:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1841:21:13","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"1806:56:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:89:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":703,"nodeType":"ExpressionStatement","src":"1806:89:13"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"1133:423:13","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":705,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1570:15:13","nodeType":"FunctionDefinition","parameters":{"id":668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":665,"mutability":"mutable","name":"s","nameLocation":"1601:1:13","nodeType":"VariableDeclaration","scope":705,"src":"1586:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":664,"nodeType":"UserDefinedTypeName","pathNode":{"id":663,"name":"Layout","nameLocations":["1586:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"1586:6:13"},"referencedDeclaration":635,"src":"1586:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":667,"mutability":"mutable","name":"initialOwner","nameLocation":"1612:12:13","nodeType":"VariableDeclaration","scope":705,"src":"1604:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":666,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1585:40:13"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[],"src":"1635:0:13"},"scope":862,"src":"1561:341:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":727,"nodeType":"Block","src":"2567:112:13","statements":[{"expression":{"arguments":[{"id":717,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"2606:21:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2629:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":714,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"2577:19:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1591_$","typeString":"type(library ProxyInitialization)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2597:8:13","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1590,"src":"2577:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":720,"nodeType":"ExpressionStatement","src":"2577:54:13"},{"expression":{"arguments":[{"id":724,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"2659:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":721,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"2641:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2643:15:13","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":705,"src":"2641:17:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":726,"nodeType":"ExpressionStatement","src":"2641:31:13"}]},"documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"1908:586:13","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":728,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2508:9:13","nodeType":"FunctionDefinition","parameters":{"id":712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":709,"mutability":"mutable","name":"s","nameLocation":"2533:1:13","nodeType":"VariableDeclaration","scope":728,"src":"2518:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":708,"nodeType":"UserDefinedTypeName","pathNode":{"id":707,"name":"Layout","nameLocations":["2518:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"2518:6:13"},"referencedDeclaration":635,"src":"2518:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":711,"mutability":"mutable","name":"initialOwner","nameLocation":"2544:12:13","nodeType":"VariableDeclaration","scope":728,"src":"2536:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":710,"name":"address","nodeType":"ElementaryTypeName","src":"2536:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2517:40:13"},"returnParameters":{"id":713,"nodeType":"ParameterList","parameters":[],"src":"2567:0:13"},"scope":862,"src":"2499:180:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":768,"nodeType":"Block","src":"3142:281:13","statements":[{"assignments":[740],"declarations":[{"constant":false,"id":740,"mutability":"mutable","name":"previousOwner","nameLocation":"3160:13:13","nodeType":"VariableDeclaration","scope":768,"src":"3152:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"3152:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":743,"initialValue":{"expression":{"id":741,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3176:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3178:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"3176:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3152:39:13"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":744,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"3205:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":745,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"3215:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3205:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":751,"nodeType":"IfStatement","src":"3201:60:13","trueBody":{"errorCall":{"arguments":[{"id":748,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"3254:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":747,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"3237:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3237:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":750,"nodeType":"RevertStatement","src":"3230:31:13"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":752,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"3275:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":753,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"3292:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3275:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":767,"nodeType":"IfStatement","src":"3271:146:13","trueBody":{"id":766,"nodeType":"Block","src":"3302:115:13","statements":[{"expression":{"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":755,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"3316:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3318:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"3316:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":758,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"3334:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3316:26:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":760,"nodeType":"ExpressionStatement","src":"3316:26:13"},{"eventCall":{"arguments":[{"id":762,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"3382:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":763,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"3397:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":761,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"3361:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3361:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":765,"nodeType":"EmitStatement","src":"3356:50:13"}]}}]},"documentation":{"id":729,"nodeType":"StructuredDocumentation","src":"2685:364:13","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":769,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3063:17:13","nodeType":"FunctionDefinition","parameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"s","nameLocation":"3096:1:13","nodeType":"VariableDeclaration","scope":769,"src":"3081:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":731,"nodeType":"UserDefinedTypeName","pathNode":{"id":730,"name":"Layout","nameLocations":["3081:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"3081:6:13"},"referencedDeclaration":635,"src":"3081:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"sender","nameLocation":"3107:6:13","nodeType":"VariableDeclaration","scope":769,"src":"3099:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"newOwner","nameLocation":"3123:8:13","nodeType":"VariableDeclaration","scope":769,"src":"3115:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"3115:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3080:52:13"},"returnParameters":{"id":738,"nodeType":"ParameterList","parameters":[],"src":"3142:0:13"},"scope":862,"src":"3054:369:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":781,"nodeType":"Block","src":"3629:39:13","statements":[{"expression":{"expression":{"id":778,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"3646:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3648:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"3646:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":777,"id":780,"nodeType":"Return","src":"3639:22:13"}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"3429:116:13","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":782,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3559:5:13","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"s","nameLocation":"3580:1:13","nodeType":"VariableDeclaration","scope":782,"src":"3565:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":772,"nodeType":"UserDefinedTypeName","pathNode":{"id":771,"name":"Layout","nameLocations":["3565:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"3565:6:13"},"referencedDeclaration":635,"src":"3565:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3564:18:13"},"returnParameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":776,"mutability":"mutable","name":"contractOwner","nameLocation":"3614:13:13","nodeType":"VariableDeclaration","scope":782,"src":"3606:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":775,"name":"address","nodeType":"ElementaryTypeName","src":"3606:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3605:23:13"},"scope":862,"src":"3550:118:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":809,"nodeType":"Block","src":"4064:154:13","statements":[{"condition":{"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4078:29:13","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":792,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"4079:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4094:11:13","memberName":"hasBytecode","nodeType":"MemberAccess","referencedDeclaration":3217,"src":"4079:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4079:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":800,"nodeType":"IfStatement","src":"4074:78:13","trueBody":{"errorCall":{"arguments":[{"id":797,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"4137:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":796,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4116:20:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4116:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":799,"nodeType":"RevertStatement","src":"4109:43:13"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":802,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"4177:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":801,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4169:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$341_$","typeString":"type(contract IERC173)"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$341","typeString":"contract IERC173"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4193:5:13","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":340,"src":"4169:29:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":806,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"4204:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4169:42:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":791,"id":808,"nodeType":"Return","src":"4162:49:13"}]},"documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"3674:261:13","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":810,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3949:21:13","nodeType":"FunctionDefinition","parameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"targetContract","nameLocation":"3979:14:13","nodeType":"VariableDeclaration","scope":810,"src":"3971:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"3971:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"account","nameLocation":"4003:7:13","nodeType":"VariableDeclaration","scope":810,"src":"3995:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":786,"name":"address","nodeType":"ElementaryTypeName","src":"3995:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3970:41:13"},"returnParameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4040:22:13","nodeType":"VariableDeclaration","scope":810,"src":"4035:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":789,"name":"bool","nodeType":"ElementaryTypeName","src":"4035:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4034:29:13"},"scope":862,"src":"3940:278:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":828,"nodeType":"Block","src":"4489:81:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":819,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"4503:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":820,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"4514:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":821,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4516:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":634,"src":"4514:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4503:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":827,"nodeType":"IfStatement","src":"4499:64:13","trueBody":{"errorCall":{"arguments":[{"id":824,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"4555:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":823,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"4538:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4538:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":826,"nodeType":"RevertStatement","src":"4531:32:13"}}]},"documentation":{"id":811,"nodeType":"StructuredDocumentation","src":"4224:179:13","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":829,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4417:22:13","nodeType":"FunctionDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"s","nameLocation":"4455:1:13","nodeType":"VariableDeclaration","scope":829,"src":"4440:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":813,"nodeType":"UserDefinedTypeName","pathNode":{"id":812,"name":"Layout","nameLocations":["4440:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"4440:6:13"},"referencedDeclaration":635,"src":"4440:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":816,"mutability":"mutable","name":"account","nameLocation":"4466:7:13","nodeType":"VariableDeclaration","scope":829,"src":"4458:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":815,"name":"address","nodeType":"ElementaryTypeName","src":"4458:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4439:35:13"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"4489:0:13"},"scope":862,"src":"4408:162:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":848,"nodeType":"Block","src":"4930:124:13","statements":[{"condition":{"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4944:47:13","subExpression":{"arguments":[{"id":838,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"4967:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":839,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"4983:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":837,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"4945:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4945:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":847,"nodeType":"IfStatement","src":"4940:107:13","trueBody":{"errorCall":{"arguments":[{"id":843,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"5023:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":844,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"5039:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":842,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"5000:22:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$","typeString":"function (address,address) pure returns (error)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5000:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":846,"nodeType":"RevertStatement","src":"4993:54:13"}}]},"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"4576:256:13","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":849,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4846:28:13","nodeType":"FunctionDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"targetContract","nameLocation":"4883:14:13","nodeType":"VariableDeclaration","scope":849,"src":"4875:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"4875:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"account","nameLocation":"4907:7:13","nodeType":"VariableDeclaration","scope":849,"src":"4899:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"4899:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4874:41:13"},"returnParameters":{"id":836,"nodeType":"ParameterList","parameters":[],"src":"4930:0:13"},"scope":862,"src":"4837:217:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":860,"nodeType":"Block","src":"5119:115:13","statements":[{"assignments":[856],"declarations":[{"constant":false,"id":856,"mutability":"mutable","name":"position","nameLocation":"5137:8:13","nodeType":"VariableDeclaration","scope":860,"src":"5129:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5129:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":858,"initialValue":{"id":857,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"5148:19:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5129:38:13"},{"AST":{"nativeSrc":"5186:42:13","nodeType":"YulBlock","src":"5186:42:13","statements":[{"nativeSrc":"5200:18:13","nodeType":"YulAssignment","src":"5200:18:13","value":{"name":"position","nativeSrc":"5210:8:13","nodeType":"YulIdentifier","src":"5210:8:13"},"variableNames":[{"name":"s.slot","nativeSrc":"5200:6:13","nodeType":"YulIdentifier","src":"5200:6:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":856,"isOffset":false,"isSlot":false,"src":"5210:8:13","valueSize":1},{"declaration":853,"isOffset":false,"isSlot":true,"src":"5200:6:13","suffix":"slot","valueSize":1}],"id":859,"nodeType":"InlineAssembly","src":"5177:51:13"}]},"id":861,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5069:6:13","nodeType":"FunctionDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[],"src":"5075:2:13"},"returnParameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"s","nameLocation":"5116:1:13","nodeType":"VariableDeclaration","scope":861,"src":"5101:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":852,"nodeType":"UserDefinedTypeName","pathNode":{"id":851,"name":"Layout","nameLocations":["5101:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"5101:6:13"},"referencedDeclaration":635,"src":"5101:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5100:18:13"},"scope":862,"src":"5060:174:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":863,"src":"589:4647:13","usedErrors":[],"usedEvents":[]}],"src":"32:5205:13"},"id":13},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[909],"InterfaceDetection":[892],"InterfaceDetectionStorage":[1010]},"id":893,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":864,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:14"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":866,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":893,"sourceUnit":910,"src":"58:49:14","symbolAliases":[{"foreign":{"id":865,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"66:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":868,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":893,"sourceUnit":1011,"src":"108:84:14","symbolAliases":[{"foreign":{"id":867,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"116:25:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":870,"name":"IERC165","nameLocations":["425:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"425:7:14"},"id":871,"nodeType":"InheritanceSpecifier","src":"425:7:14"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":869,"nodeType":"StructuredDocumentation","src":"194:191:14","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":892,"linearizedBaseContracts":[892,909],"name":"InterfaceDetection","nameLocation":"403:18:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":875,"libraryName":{"id":872,"name":"InterfaceDetectionStorage","nameLocations":["445:25:14"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"445:25:14"},"nodeType":"UsingForDirective","src":"439:69:14","typeName":{"id":874,"nodeType":"UserDefinedTypeName","pathNode":{"id":873,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:14","501:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"475:32:14"},"referencedDeclaration":920,"src":"475:32:14","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[908],"body":{"id":890,"nodeType":"Block","src":"618:89:14","statements":[{"expression":{"arguments":[{"id":887,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"688:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":883,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"635:25:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:14","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"635:32:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":886,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:14","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":997,"src":"635:52:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":882,"id":889,"nodeType":"Return","src":"628:72:14"}]},"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"514:23:14","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":891,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:14","nodeType":"FunctionDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:14","nodeType":"VariableDeclaration","scope":891,"src":"569:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":877,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:14"},"returnParameters":{"id":882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":891,"src":"612:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":880,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:14"},"scope":892,"src":"542:165:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":893,"src":"385:324:14","usedErrors":[],"usedEvents":[]}],"src":"32:678:14"},"id":14},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[897]},"id":898,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":894,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:15"},{"documentation":{"id":895,"nodeType":"StructuredDocumentation","src":"58:68:15","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":897,"name":"IllegalInterfaceId","nameLocation":"132:18:15","nodeType":"ErrorDefinition","parameters":{"id":896,"nodeType":"ParameterList","parameters":[],"src":"150:2:15"},"src":"126:27:15"}],"src":"32:122:15"},"id":15},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[909]},"id":910,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":899,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":900,"nodeType":"StructuredDocumentation","src":"58:173:16","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":909,"linearizedBaseContracts":[909],"name":"IERC165","nameLocation":"241:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"255:340:16","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":908,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:16","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:16","nodeType":"VariableDeclaration","scope":908,"src":"627:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":902,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:16"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"supported","nameLocation":"675:9:16","nodeType":"VariableDeclaration","scope":908,"src":"670:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":905,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:16"},"scope":909,"src":"600:86:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":910,"src":"231:457:16","usedErrors":[],"usedEvents":[]}],"src":"32:657:16"},"id":16},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[909],"IllegalInterfaceId":[897],"InterfaceDetectionStorage":[1010]},"id":1011,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":911,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":913,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1011,"sourceUnit":898,"src":"58:76:17","symbolAliases":[{"foreign":{"id":912,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"66:18:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":915,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1011,"sourceUnit":910,"src":"135:52:17","symbolAliases":[{"foreign":{"id":914,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"143:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1010,"linearizedBaseContracts":[1010],"name":"InterfaceDetectionStorage","nameLocation":"197:25:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":920,"members":[{"constant":false,"id":919,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:17","nodeType":"VariableDeclaration","scope":920,"src":"253:43:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":918,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":916,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":917,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:17","nodeType":"StructDefinition","scope":1010,"src":"229:74:17","visibility":"public"},{"constant":true,"id":933,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:17","nodeType":"VariableDeclaration","scope":1010,"src":"309:136:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":926,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":924,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:17","typeDescriptions":{}}},"id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:17","typeDescriptions":{}}},"id":932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":936,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:17","nodeType":"VariableDeclaration","scope":1010,"src":"452:58:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":934,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:17","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":962,"nodeType":"Block","src":"867:141:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":947,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"881:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":948,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"896:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":953,"nodeType":"IfStatement","src":"877:68:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":950,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"925:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":952,"nodeType":"RevertStatement","src":"918:27:17"}},{"expression":{"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":954,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"955:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":957,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":919,"src":"955:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":958,"indexExpression":{"id":956,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"977:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":959,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"992:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":961,"nodeType":"ExpressionStatement","src":"955:46:17"}]},"documentation":{"id":937,"nodeType":"StructuredDocumentation","src":"517:251:17","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":963,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:17","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"s","nameLocation":"819:1:17","nodeType":"VariableDeclaration","scope":963,"src":"804:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":939,"nodeType":"UserDefinedTypeName","pathNode":{"id":938,"name":"Layout","nameLocations":["804:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"804:6:17"},"referencedDeclaration":920,"src":"804:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:17","nodeType":"VariableDeclaration","scope":963,"src":"822:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":941,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"supported","nameLocation":"847:9:17","nodeType":"VariableDeclaration","scope":963,"src":"842:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":943,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:17"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"867:0:17"},"scope":1010,"src":"773:235:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":996,"nodeType":"Block","src":"1463:236:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"1477:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":975,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"1492:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":980,"nodeType":"IfStatement","src":"1473:78:17","trueBody":{"id":979,"nodeType":"Block","src":"1514:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":973,"id":978,"nodeType":"Return","src":"1528:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":981,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"1564:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":983,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"1584:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$909_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$909_$","typeString":"type(contract IERC165)"}],"id":982,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$909","typeString":"type(contract IERC165)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:17","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":990,"nodeType":"IfStatement","src":"1560:82:17","trueBody":{"id":989,"nodeType":"Block","src":"1606:36:17","statements":[{"expression":{"hexValue":"74727565","id":987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":973,"id":988,"nodeType":"Return","src":"1620:11:17"}]}},{"expression":{"baseExpression":{"expression":{"id":991,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"1658:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":992,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":919,"src":"1658:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":994,"indexExpression":{"id":993,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"1680:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":973,"id":995,"nodeType":"Return","src":"1651:41:17"}]},"documentation":{"id":964,"nodeType":"StructuredDocumentation","src":"1014:340:17","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":997,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:17","nodeType":"FunctionDefinition","parameters":{"id":970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"s","nameLocation":"1401:1:17","nodeType":"VariableDeclaration","scope":997,"src":"1386:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":966,"nodeType":"UserDefinedTypeName","pathNode":{"id":965,"name":"Layout","nameLocations":["1386:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"1386:6:17"},"referencedDeclaration":920,"src":"1386:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:17","nodeType":"VariableDeclaration","scope":997,"src":"1404:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":968,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:17"},"returnParameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"supported","nameLocation":"1452:9:17","nodeType":"VariableDeclaration","scope":997,"src":"1447:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":971,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:17"},"scope":1010,"src":"1359:340:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1008,"nodeType":"Block","src":"1764:115:17","statements":[{"assignments":[1004],"declarations":[{"constant":false,"id":1004,"mutability":"mutable","name":"position","nameLocation":"1782:8:17","nodeType":"VariableDeclaration","scope":1008,"src":"1774:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1003,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1006,"initialValue":{"id":1005,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1793:19:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:17"},{"AST":{"nativeSrc":"1831:42:17","nodeType":"YulBlock","src":"1831:42:17","statements":[{"nativeSrc":"1845:18:17","nodeType":"YulAssignment","src":"1845:18:17","value":{"name":"position","nativeSrc":"1855:8:17","nodeType":"YulIdentifier","src":"1855:8:17"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:17","nodeType":"YulIdentifier","src":"1845:6:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1004,"isOffset":false,"isSlot":false,"src":"1855:8:17","valueSize":1},{"declaration":1001,"isOffset":false,"isSlot":true,"src":"1845:6:17","suffix":"slot","valueSize":1}],"id":1007,"nodeType":"InlineAssembly","src":"1822:51:17"}]},"id":1009,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:17","nodeType":"FunctionDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[],"src":"1720:2:17"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"s","nameLocation":"1761:1:17","nodeType":"VariableDeclaration","scope":1009,"src":"1746:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":1000,"nodeType":"UserDefinedTypeName","pathNode":{"id":999,"name":"Layout","nameLocations":["1746:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"1746:6:17"},"referencedDeclaration":920,"src":"1746:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:17"},"scope":1010,"src":"1705:174:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1011,"src":"189:1692:17","usedErrors":[],"usedEvents":[]}],"src":"32:1850:17"},"id":17},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol","exportedSymbols":{"Context":[4085],"ContractOwnershipStorage":[862],"IPause":[1114],"PauseBase":[1088],"PauseStorage":[1301]},"id":1089,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1012,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol","file":"./../interfaces/IPause.sol","id":1014,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1089,"sourceUnit":1115,"src":"58:50:18","symbolAliases":[{"foreign":{"id":1013,"name":"IPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"66:6:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"./../libraries/PauseStorage.sol","id":1016,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1089,"sourceUnit":1302,"src":"109:61:18","symbolAliases":[{"foreign":{"id":1015,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"117:12:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":1018,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1089,"sourceUnit":863,"src":"171:95:18","symbolAliases":[{"foreign":{"id":1017,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"179:24:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1089,"sourceUnit":4086,"src":"267:66:18","symbolAliases":[{"foreign":{"id":1019,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"275:7:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1022,"name":"IPause","nameLocations":["574:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1114,"src":"574:6:18"},"id":1023,"nodeType":"InheritanceSpecifier","src":"574:6:18"},{"baseName":{"id":1024,"name":"Context","nameLocations":["582:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4085,"src":"582:7:18"},"id":1025,"nodeType":"InheritanceSpecifier","src":"582:7:18"}],"canonicalName":"PauseBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1021,"nodeType":"StructuredDocumentation","src":"335:208:18","text":"@title Pausing mechanism (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1088,"linearizedBaseContracts":[1088,4085,1114],"name":"PauseBase","nameLocation":"561:9:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1029,"libraryName":{"id":1026,"name":"PauseStorage","nameLocations":["602:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":1301,"src":"602:12:18"},"nodeType":"UsingForDirective","src":"596:43:18","typeName":{"id":1028,"nodeType":"UserDefinedTypeName","pathNode":{"id":1027,"name":"PauseStorage.Layout","nameLocations":["619:12:18","632:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"619:19:18"},"referencedDeclaration":1131,"src":"619:19:18","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"global":false,"id":1033,"libraryName":{"id":1030,"name":"ContractOwnershipStorage","nameLocations":["650:24:18"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"650:24:18"},"nodeType":"UsingForDirective","src":"644:67:18","typeName":{"id":1032,"nodeType":"UserDefinedTypeName","pathNode":{"id":1031,"name":"ContractOwnershipStorage.Layout","nameLocations":["679:24:18","704:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"679:31:18"},"referencedDeclaration":635,"src":"679:31:18","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":1053,"nodeType":"Block","src":"965:126:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1042,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"1032:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1032:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1037,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"975:24:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1000:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"975:31:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"975:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1009:22:18","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"975:56:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"975:70:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1045,"nodeType":"ExpressionStatement","src":"975:70:18"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1046,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"1055:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1301_$","typeString":"type(library PauseStorage)"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1068:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1300,"src":"1055:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1055:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1050,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1077:5:18","memberName":"pause","nodeType":"MemberAccess","referencedDeclaration":1224,"src":"1055:27:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1131_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer)"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1055:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1052,"nodeType":"ExpressionStatement","src":"1055:29:18"}]},"documentation":{"id":1034,"nodeType":"StructuredDocumentation","src":"717:217:18","text":"@notice Pauses the contract.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {Paused} if the contract is paused.\n @dev Emits a {Paused} event."},"functionSelector":"8456cb59","id":1054,"implemented":true,"kind":"function","modifiers":[],"name":"pause","nameLocation":"948:5:18","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[],"src":"953:2:18"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[],"src":"965:0:18"},"scope":1088,"src":"939:152:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1074,"nodeType":"Block","src":"1359:128:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1063,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"1426:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1426:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1058,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1369:24:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1394:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1369:31:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1369:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1062,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1403:22:18","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1369:56:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1369:70:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1066,"nodeType":"ExpressionStatement","src":"1369:70:18"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1067,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"1449:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1301_$","typeString":"type(library PauseStorage)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1462:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1300,"src":"1449:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1449:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1071,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1471:7:18","memberName":"unpause","nodeType":"MemberAccess","referencedDeclaration":1246,"src":"1449:29:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1131_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1449:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1073,"nodeType":"ExpressionStatement","src":"1449:31:18"}]},"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"1097:229:18","text":"@notice Unpauses the contract.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {NotPaused} if the contract is not paused.\n @dev Emits an {Unpaused} event."},"functionSelector":"3f4ba83a","id":1075,"implemented":true,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"1340:7:18","nodeType":"FunctionDefinition","parameters":{"id":1056,"nodeType":"ParameterList","parameters":[],"src":"1347:2:18"},"returnParameters":{"id":1057,"nodeType":"ParameterList","parameters":[],"src":"1359:0:18"},"scope":1088,"src":"1331:156:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1113],"body":{"id":1086,"nodeType":"Block","src":"1570:54:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1080,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"1587:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1301_$","typeString":"type(library PauseStorage)"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1600:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1300,"src":"1587:19:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1587:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1083,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1609:6:18","memberName":"paused","nodeType":"MemberAccess","referencedDeclaration":1259,"src":"1587:28:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1131_storage_ptr_$returns$_t_bool_$attached_to$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view returns (bool)"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1587:30:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1079,"id":1085,"nodeType":"Return","src":"1580:37:18"}]},"functionSelector":"5c975abb","id":1087,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1532:6:18","nodeType":"FunctionDefinition","parameters":{"id":1076,"nodeType":"ParameterList","parameters":[],"src":"1538:2:18"},"returnParameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1087,"src":"1564:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1077,"name":"bool","nodeType":"ElementaryTypeName","src":"1564:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1563:6:18"},"scope":1088,"src":"1523:101:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1089,"src":"543:1083:18","usedErrors":[259,1093,1096],"usedEvents":[1101,1104]}],"src":"32:1595:18"},"id":18},"@animoca/ethereum-contracts/contracts/lifecycle/errors/PauseErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/errors/PauseErrors.sol","exportedSymbols":{"NotPaused":[1096],"Paused":[1093]},"id":1097,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1090,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:19"},{"documentation":{"id":1091,"nodeType":"StructuredDocumentation","src":"58:71:19","text":"@notice Thrown when the contract is paused but is required not to."},"errorSelector":"9e87fac8","id":1093,"name":"Paused","nameLocation":"135:6:19","nodeType":"ErrorDefinition","parameters":{"id":1092,"nodeType":"ParameterList","parameters":[],"src":"141:2:19"},"src":"129:15:19"},{"documentation":{"id":1094,"nodeType":"StructuredDocumentation","src":"146:71:19","text":"@notice Thrown when the contract is not paused but is required to."},"errorSelector":"6cd60201","id":1096,"name":"NotPaused","nameLocation":"223:9:19","nodeType":"ErrorDefinition","parameters":{"id":1095,"nodeType":"ParameterList","parameters":[],"src":"232:2:19"},"src":"217:18:19"}],"src":"32:204:19"},"id":19},"@animoca/ethereum-contracts/contracts/lifecycle/events/PauseEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/events/PauseEvents.sol","exportedSymbols":{"Pause":[1101],"Unpause":[1104]},"id":1105,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1098,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:20"},{"anonymous":false,"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"58:49:20","text":"@notice Emitted when the pause is triggered."},"eventSelector":"6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625","id":1101,"name":"Pause","nameLocation":"113:5:20","nodeType":"EventDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[],"src":"118:2:20"},"src":"107:14:20"},{"anonymous":false,"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"123:46:20","text":"@notice Emitted when the pause is lifted."},"eventSelector":"7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33","id":1104,"name":"Unpause","nameLocation":"175:7:20","nodeType":"EventDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[],"src":"182:2:20"},"src":"169:16:20"}],"src":"32:154:20"},"id":20},"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol","exportedSymbols":{"IPause":[1114]},"id":1115,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1106,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IPause","contractDependencies":[],"contractKind":"interface","documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"58:41:21","text":"@title Pausing mechanism (functions)"},"fullyImplemented":false,"id":1114,"linearizedBaseContracts":[1114],"name":"IPause","nameLocation":"109:6:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1108,"nodeType":"StructuredDocumentation","src":"122:109:21","text":"@notice Gets the paused state of the contract.\n @return isPaused The paused state of the contract."},"functionSelector":"5c975abb","id":1113,"implemented":false,"kind":"function","modifiers":[],"name":"paused","nameLocation":"245:6:21","nodeType":"FunctionDefinition","parameters":{"id":1109,"nodeType":"ParameterList","parameters":[],"src":"251:2:21"},"returnParameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"mutability":"mutable","name":"isPaused","nameLocation":"282:8:21","nodeType":"VariableDeclaration","scope":1113,"src":"277:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1110,"name":"bool","nodeType":"ElementaryTypeName","src":"277:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"276:15:21"},"scope":1114,"src":"236:56:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1115,"src":"99:195:21","usedErrors":[],"usedEvents":[]}],"src":"32:263:21"},"id":21},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","exportedSymbols":{"NotPaused":[1096],"Pause":[1101],"PauseStorage":[1301],"Paused":[1093],"ProxyInitialization":[1591],"Unpause":[1104]},"id":1302,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1116,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/errors/PauseErrors.sol","file":"./../errors/PauseErrors.sol","id":1119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1302,"sourceUnit":1097,"src":"58:62:22","symbolAliases":[{"foreign":{"id":1117,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"66:6:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1118,"name":"NotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"74:9:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/events/PauseEvents.sol","file":"./../events/PauseEvents.sol","id":1122,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1302,"sourceUnit":1105,"src":"121:59:22","symbolAliases":[{"foreign":{"id":1120,"name":"Pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"129:5:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1121,"name":"Unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"136:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":1124,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1302,"sourceUnit":1592,"src":"181:84:22","symbolAliases":[{"foreign":{"id":1123,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"189:19:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"PauseStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1301,"linearizedBaseContracts":[1301],"name":"PauseStorage","nameLocation":"275:12:22","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1128,"libraryName":{"id":1125,"name":"PauseStorage","nameLocations":["300:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1301,"src":"300:12:22"},"nodeType":"UsingForDirective","src":"294:43:22","typeName":{"id":1127,"nodeType":"UserDefinedTypeName","pathNode":{"id":1126,"name":"PauseStorage.Layout","nameLocations":["317:12:22","330:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"317:19:22"},"referencedDeclaration":1131,"src":"317:19:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"canonicalName":"PauseStorage.Layout","id":1131,"members":[{"constant":false,"id":1130,"mutability":"mutable","name":"isPaused","nameLocation":"372:8:22","nodeType":"VariableDeclaration","scope":1131,"src":"367:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1129,"name":"bool","nodeType":"ElementaryTypeName","src":"367:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Layout","nameLocation":"350:6:22","nodeType":"StructDefinition","scope":1301,"src":"343:44:22","visibility":"public"},{"constant":true,"id":1144,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"419:19:22","nodeType":"VariableDeclaration","scope":1301,"src":"393:119:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"393:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6c6966656379636c652e50617573652e73746f72616765","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"467:38:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f","typeString":"literal_string \"animoca.core.lifecycle.Pause.storage\""},"value":"animoca.core.lifecycle.Pause.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f","typeString":"literal_string \"animoca.core.lifecycle.Pause.storage\""}],"id":1137,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"457:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"457:49:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"449:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"449:7:22","typeDescriptions":{}}},"id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"449:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"510:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"449:62:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"441:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"441:7:22","typeDescriptions":{}}},"id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"441:71:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":1157,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"544:21:22","nodeType":"VariableDeclaration","scope":1301,"src":"518:119:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"518:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6c6966656379636c652e50617573652e7068617365","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"594:36:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bee9ead429adf7e232b4f4b772a209623333b43e5466fc9b9a766da96c2ae0f","typeString":"literal_string \"animoca.core.lifecycle.Pause.phase\""},"value":"animoca.core.lifecycle.Pause.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3bee9ead429adf7e232b4f4b772a209623333b43e5466fc9b9a766da96c2ae0f","typeString":"literal_string \"animoca.core.lifecycle.Pause.phase\""}],"id":1150,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"584:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"584:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"576:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1148,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:22","typeDescriptions":{}}},"id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"576:56:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"635:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"576:60:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"568:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"568:7:22","typeDescriptions":{}}},"id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"568:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":1178,"nodeType":"Block","src":"1021:98:22","statements":[{"condition":{"id":1166,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"1035:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1177,"nodeType":"IfStatement","src":"1031:82:22","trueBody":{"id":1176,"nodeType":"Block","src":"1045:68:22","statements":[{"expression":{"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1167,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"1059:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1169,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1061:8:22","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"1059:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1072:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1059:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1172,"nodeType":"ExpressionStatement","src":"1059:17:22"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1173,"name":"Pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"1095:5:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1095:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1175,"nodeType":"EmitStatement","src":"1090:12:22"}]}}]},"documentation":{"id":1158,"nodeType":"StructuredDocumentation","src":"644:305:22","text":"@notice Initializes the storage with an initial pause state (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits a {Pause} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":1179,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"963:15:22","nodeType":"FunctionDefinition","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"s","nameLocation":"994:1:22","nodeType":"VariableDeclaration","scope":1179,"src":"979:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1160,"nodeType":"UserDefinedTypeName","pathNode":{"id":1159,"name":"Layout","nameLocations":["979:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"979:6:22"},"referencedDeclaration":1131,"src":"979:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"isPaused","nameLocation":"1002:8:22","nodeType":"VariableDeclaration","scope":1179,"src":"997:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1162,"name":"bool","nodeType":"ElementaryTypeName","src":"997:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"978:33:22"},"returnParameters":{"id":1165,"nodeType":"ParameterList","parameters":[],"src":"1021:0:22"},"scope":1301,"src":"954:165:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1201,"nodeType":"Block","src":"1659:108:22","statements":[{"expression":{"arguments":[{"id":1191,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"1698:21:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":1188,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"1669:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1591_$","typeString":"type(library ProxyInitialization)"}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1689:8:22","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1590,"src":"1669:28:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:54:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1194,"nodeType":"ExpressionStatement","src":"1669:54:22"},{"expression":{"arguments":[{"id":1198,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"1751:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1195,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1733:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1197,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1735:15:22","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":1179,"src":"1733:17:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1131_storage_ptr_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer,bool)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1733:27:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1200,"nodeType":"ExpressionStatement","src":"1733:27:22"}]},"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"1125:468:22","text":"@notice Initializes the storage with an initial pause state (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits a {Pause} event if `isPaused` is true.\n @param isPaused The initial pause state."},"id":1202,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1607:9:22","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"s","nameLocation":"1632:1:22","nodeType":"VariableDeclaration","scope":1202,"src":"1617:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1182,"nodeType":"UserDefinedTypeName","pathNode":{"id":1181,"name":"Layout","nameLocations":["1617:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"1617:6:22"},"referencedDeclaration":1131,"src":"1617:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"isPaused","nameLocation":"1640:8:22","nodeType":"VariableDeclaration","scope":1202,"src":"1635:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1184,"name":"bool","nodeType":"ElementaryTypeName","src":"1635:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1616:33:22"},"returnParameters":{"id":1187,"nodeType":"ParameterList","parameters":[],"src":"1659:0:22"},"scope":1301,"src":"1598:169:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1223,"nodeType":"Block","src":"1950:88:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1209,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"1960:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1211,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1962:18:22","memberName":"enforceIsNotPaused","nodeType":"MemberAccess","referencedDeclaration":1288,"src":"1960:20:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1131_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1960:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1213,"nodeType":"ExpressionStatement","src":"1960:22:22"},{"expression":{"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1214,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"1992:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1994:8:22","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"1992:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2005:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1992:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1219,"nodeType":"ExpressionStatement","src":"1992:17:22"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1220,"name":"Pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2024:5:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2024:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1222,"nodeType":"EmitStatement","src":"2019:12:22"}]},"documentation":{"id":1203,"nodeType":"StructuredDocumentation","src":"1773:130:22","text":"@notice Pauses the contract.\n @dev Reverts with {Paused} if the contract is paused.\n @dev Emits a {Pause} event."},"id":1224,"implemented":true,"kind":"function","modifiers":[],"name":"pause","nameLocation":"1917:5:22","nodeType":"FunctionDefinition","parameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"s","nameLocation":"1938:1:22","nodeType":"VariableDeclaration","scope":1224,"src":"1923:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1205,"nodeType":"UserDefinedTypeName","pathNode":{"id":1204,"name":"Layout","nameLocations":["1923:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"1923:6:22"},"referencedDeclaration":1131,"src":"1923:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"1922:18:22"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[],"src":"1950:0:22"},"scope":1301,"src":"1908:130:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1245,"nodeType":"Block","src":"2235:88:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1231,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"2245:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2247:15:22","memberName":"enforceIsPaused","nodeType":"MemberAccess","referencedDeclaration":1274,"src":"2245:17:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1131_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2245:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1235,"nodeType":"ExpressionStatement","src":"2245:19:22"},{"expression":{"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1236,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"2274:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1238,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2276:8:22","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"2274:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2287:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2274:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1241,"nodeType":"ExpressionStatement","src":"2274:18:22"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1242,"name":"Unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"2307:7:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2307:9:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1244,"nodeType":"EmitStatement","src":"2302:14:22"}]},"documentation":{"id":1225,"nodeType":"StructuredDocumentation","src":"2044:142:22","text":"@notice Unpauses the contract.\n @dev Reverts with {NotPaused} if the contract is not paused.\n @dev Emits an {Unpause} event."},"id":1246,"implemented":true,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"2200:7:22","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"s","nameLocation":"2223:1:22","nodeType":"VariableDeclaration","scope":1246,"src":"2208:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1227,"nodeType":"UserDefinedTypeName","pathNode":{"id":1226,"name":"Layout","nameLocations":["2208:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"2208:6:22"},"referencedDeclaration":1131,"src":"2208:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2207:18:22"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[],"src":"2235:0:22"},"scope":1301,"src":"2191:132:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1258,"nodeType":"Block","src":"2515:34:22","statements":[{"expression":{"expression":{"id":1255,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"2532:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2534:8:22","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"2532:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1254,"id":1257,"nodeType":"Return","src":"2525:17:22"}]},"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"2329:109:22","text":"@notice Gets the paused state of the contract.\n @return isPaused The paused state of the contract."},"id":1259,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"2452:6:22","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"s","nameLocation":"2474:1:22","nodeType":"VariableDeclaration","scope":1259,"src":"2459:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1249,"nodeType":"UserDefinedTypeName","pathNode":{"id":1248,"name":"Layout","nameLocations":["2459:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"2459:6:22"},"referencedDeclaration":1131,"src":"2459:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2458:18:22"},"returnParameters":{"id":1254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1253,"mutability":"mutable","name":"isPaused","nameLocation":"2505:8:22","nodeType":"VariableDeclaration","scope":1259,"src":"2500:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1252,"name":"bool","nodeType":"ElementaryTypeName","src":"2500:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2499:15:22"},"scope":1301,"src":"2443:106:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1273,"nodeType":"Block","src":"2734:52:22","statements":[{"condition":{"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2748:11:22","subExpression":{"expression":{"id":1266,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"2749:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2751:8:22","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"2749:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1272,"nodeType":"IfStatement","src":"2744:35:22","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1269,"name":"NotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"2768:9:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1271,"nodeType":"RevertStatement","src":"2761:18:22"}}]},"documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"2555:117:22","text":"@notice Ensures that the contract is paused.\n @dev Reverts with {NotPaused} if the contract is not paused."},"id":1274,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsPaused","nameLocation":"2686:15:22","nodeType":"FunctionDefinition","parameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"s","nameLocation":"2717:1:22","nodeType":"VariableDeclaration","scope":1274,"src":"2702:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1262,"nodeType":"UserDefinedTypeName","pathNode":{"id":1261,"name":"Layout","nameLocations":["2702:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"2702:6:22"},"referencedDeclaration":1131,"src":"2702:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2701:18:22"},"returnParameters":{"id":1265,"nodeType":"ParameterList","parameters":[],"src":"2734:0:22"},"scope":1301,"src":"2677:109:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1287,"nodeType":"Block","src":"2971:48:22","statements":[{"condition":{"expression":{"id":1281,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"2985:1:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":1282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2987:8:22","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"2985:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1286,"nodeType":"IfStatement","src":"2981:31:22","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1283,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"3004:6:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3004:8:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1285,"nodeType":"RevertStatement","src":"2997:15:22"}}]},"documentation":{"id":1275,"nodeType":"StructuredDocumentation","src":"2792:114:22","text":"@notice Ensures that the contract is not paused.\n @dev Reverts with {Paused} if the contract is paused."},"id":1288,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsNotPaused","nameLocation":"2920:18:22","nodeType":"FunctionDefinition","parameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"s","nameLocation":"2954:1:22","nodeType":"VariableDeclaration","scope":1288,"src":"2939:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1277,"nodeType":"UserDefinedTypeName","pathNode":{"id":1276,"name":"Layout","nameLocations":["2939:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"2939:6:22"},"referencedDeclaration":1131,"src":"2939:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"2938:18:22"},"returnParameters":{"id":1280,"nodeType":"ParameterList","parameters":[],"src":"2971:0:22"},"scope":1301,"src":"2911:108:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1299,"nodeType":"Block","src":"3084:115:22","statements":[{"assignments":[1295],"declarations":[{"constant":false,"id":1295,"mutability":"mutable","name":"position","nameLocation":"3102:8:22","nodeType":"VariableDeclaration","scope":1299,"src":"3094:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3094:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1297,"initialValue":{"id":1296,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"3113:19:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3094:38:22"},{"AST":{"nativeSrc":"3151:42:22","nodeType":"YulBlock","src":"3151:42:22","statements":[{"nativeSrc":"3165:18:22","nodeType":"YulAssignment","src":"3165:18:22","value":{"name":"position","nativeSrc":"3175:8:22","nodeType":"YulIdentifier","src":"3175:8:22"},"variableNames":[{"name":"s.slot","nativeSrc":"3165:6:22","nodeType":"YulIdentifier","src":"3165:6:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1295,"isOffset":false,"isSlot":false,"src":"3175:8:22","valueSize":1},{"declaration":1292,"isOffset":false,"isSlot":true,"src":"3165:6:22","suffix":"slot","valueSize":1}],"id":1298,"nodeType":"InlineAssembly","src":"3142:51:22"}]},"id":1300,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3034:6:22","nodeType":"FunctionDefinition","parameters":{"id":1289,"nodeType":"ParameterList","parameters":[],"src":"3040:2:22"},"returnParameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"s","nameLocation":"3081:1:22","nodeType":"VariableDeclaration","scope":1300,"src":"3066:16:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"},"typeName":{"id":1291,"nodeType":"UserDefinedTypeName","pathNode":{"id":1290,"name":"Layout","nameLocations":["3066:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"3066:6:22"},"referencedDeclaration":1131,"src":"3066:6:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}},"visibility":"internal"}],"src":"3065:18:22"},"scope":1301,"src":"3025:174:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1302,"src":"267:2934:22","usedErrors":[],"usedEvents":[]}],"src":"32:3170:22"},"id":22},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[1350],"ForwarderRegistryContextBase":[1478],"IERC2771":[1490],"IForwarderRegistry":[1506]},"id":1351,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1303,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":1305,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":1507,"src":"58:71:23","symbolAliases":[{"foreign":{"id":1304,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"66:18:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":1307,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":1491,"src":"130:51:23","symbolAliases":[{"foreign":{"id":1306,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"138:8:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":1309,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":1479,"src":"182:85:23","symbolAliases":[{"foreign":{"id":1308,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"190:28:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1311,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:23"],"nodeType":"IdentifierPath","referencedDeclaration":1478,"src":"575:28:23"},"id":1312,"nodeType":"InheritanceSpecifier","src":"575:28:23"},{"baseName":{"id":1313,"name":"IERC2771","nameLocations":["605:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":1490,"src":"605:8:23"},"id":1314,"nodeType":"InheritanceSpecifier","src":"605:8:23"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":1310,"nodeType":"StructuredDocumentation","src":"269:260:23","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1350,"linearizedBaseContracts":[1350,1490,1478],"name":"ForwarderRegistryContext","nameLocation":"547:24:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":1323,"nodeType":"Block","src":"720:2:23","statements":[]},"id":1324,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1320,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"700:18:23","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"id":1321,"kind":"baseConstructorSpecifier","modifierName":{"id":1319,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:23"],"nodeType":"IdentifierPath","referencedDeclaration":1478,"src":"671:28:23"},"nodeType":"ModifierInvocation","src":"671:48:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:23","nodeType":"VariableDeclaration","scope":1324,"src":"632:37:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":1316,"nodeType":"UserDefinedTypeName","pathNode":{"id":1315,"name":"IForwarderRegistry","nameLocations":["632:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"632:18:23"},"referencedDeclaration":1506,"src":"632:18:23","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:23"},"returnParameters":{"id":1322,"nodeType":"ParameterList","parameters":[],"src":"720:0:23"},"scope":1350,"src":"620:102:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1332,"nodeType":"Block","src":"800:43:23","statements":[{"expression":{"id":1330,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"817:19:23","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":1329,"id":1331,"nodeType":"Return","src":"810:26:23"}]},"functionSelector":"2b4c9f16","id":1333,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:23","nodeType":"FunctionDefinition","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[],"src":"754:2:23"},"returnParameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1333,"src":"780:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":1327,"nodeType":"UserDefinedTypeName","pathNode":{"id":1326,"name":"IForwarderRegistry","nameLocations":["780:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"780:18:23"},"referencedDeclaration":1506,"src":"780:18:23","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:23"},"scope":1350,"src":"728:115:23","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1489],"body":{"id":1348,"nodeType":"Block","src":"962:65:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1341,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"979:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1344,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"1000:19:23","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}],"id":1343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1342,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:23","typeDescriptions":{}}},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1340,"id":1347,"nodeType":"Return","src":"972:48:23"}]},"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"849:24:23","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":1349,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:23","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:23","nodeType":"VariableDeclaration","scope":1349,"src":"906:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1335,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:23"},"returnParameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1349,"src":"956:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1338,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:23"},"scope":1350,"src":"878:149:23","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1351,"src":"529:500:23","usedErrors":[],"usedEvents":[]}],"src":"32:998:23"},"id":23},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[1535],"ForwarderRegistryContextBase":[1478],"IForwarderRegistry":[1506]},"id":1479,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1352,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":1354,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1479,"sourceUnit":1507,"src":"58:74:24","symbolAliases":[{"foreign":{"id":1353,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"66:18:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":1356,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1479,"sourceUnit":1536,"src":"133:67:24","symbolAliases":[{"foreign":{"id":1355,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"141:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1357,"nodeType":"StructuredDocumentation","src":"202:243:24","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1478,"linearizedBaseContracts":[1478],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:24","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1360,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:24","nodeType":"VariableDeclaration","scope":1478,"src":"498:57:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":1359,"nodeType":"UserDefinedTypeName","pathNode":{"id":1358,"name":"IForwarderRegistry","nameLocations":["498:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"498:18:24"},"referencedDeclaration":1506,"src":"498:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":1370,"nodeType":"Block","src":"612:56:24","statements":[{"expression":{"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1366,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"622:19:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1367,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"644:17:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"src":"622:39:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"id":1369,"nodeType":"ExpressionStatement","src":"622:39:24"}]},"id":1371,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1363,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:24","nodeType":"VariableDeclaration","scope":1371,"src":"574:36:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":1362,"nodeType":"UserDefinedTypeName","pathNode":{"id":1361,"name":"IForwarderRegistry","nameLocations":["574:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"574:18:24"},"referencedDeclaration":1506,"src":"574:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:24"},"returnParameters":{"id":1365,"nodeType":"ParameterList","parameters":[],"src":"612:0:24"},"scope":1478,"src":"562:106:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1424,"nodeType":"Block","src":"846:698:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1377,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1379,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:24","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:24","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1382,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:24","memberName":"data","nodeType":"MemberAccess","src":"1074:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:24","memberName":"length","nodeType":"MemberAccess","src":"1074:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:24","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1392,"nodeType":"IfStatement","src":"1043:95:24","trueBody":{"id":1391,"nodeType":"Block","src":"1096:42:24","statements":[{"expression":{"expression":{"id":1388,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1376,"id":1390,"nodeType":"Return","src":"1110:17:24"}]}},{"assignments":[1394],"declarations":[{"constant":false,"id":1394,"mutability":"mutable","name":"sender","nameLocation":"1156:6:24","nodeType":"VariableDeclaration","scope":1424,"src":"1148:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1393,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1398,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1395,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"1165:15:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1535_$","typeString":"type(library ERC2771Calldata)"}},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:24","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1517,"src":"1165:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1399,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1403,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"1372:19:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}],"id":1402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1401,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:24","typeDescriptions":{}}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1408,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"1436:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1409,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1413,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1464:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1478","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1478","typeString":"contract ForwarderRegistryContextBase"}],"id":1412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1456:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1411,"name":"address","nodeType":"ElementaryTypeName","src":"1456:7:24","typeDescriptions":{}}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1456:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1406,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"1396:19:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:24","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"1396:39:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:74:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:120:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1420,"nodeType":"IfStatement","src":"1346:164:24","trueBody":{"id":1419,"nodeType":"Block","src":"1472:38:24","statements":[{"expression":{"id":1417,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"1493:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1376,"id":1418,"nodeType":"Return","src":"1486:13:24"}]}},{"expression":{"expression":{"id":1421,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1527:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1531:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1527:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1376,"id":1423,"nodeType":"Return","src":"1520:17:24"}]},"documentation":{"id":1372,"nodeType":"StructuredDocumentation","src":"674:105:24","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":1425,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:24","nodeType":"FunctionDefinition","parameters":{"id":1373,"nodeType":"ParameterList","parameters":[],"src":"803:2:24"},"returnParameters":{"id":1376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1425,"src":"837:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:24"},"scope":1478,"src":"784:760:24","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1476,"nodeType":"Block","src":"1725:717:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1431,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1926:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1930:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1926:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1433,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1940:2:24","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1943:6:24","memberName":"origin","nodeType":"MemberAccess","src":"1940:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1926:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1436,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1953:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1957:4:24","memberName":"data","nodeType":"MemberAccess","src":"1953:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1962:6:24","memberName":"length","nodeType":"MemberAccess","src":"1953:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1971:2:24","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1953:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1926:47:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1446,"nodeType":"IfStatement","src":"1922:93:24","trueBody":{"id":1445,"nodeType":"Block","src":"1975:40:24","statements":[{"expression":{"expression":{"id":1442,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1996:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2000:4:24","memberName":"data","nodeType":"MemberAccess","src":"1996:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1430,"id":1444,"nodeType":"Return","src":"1989:15:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1447,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2189:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2193:6:24","memberName":"sender","nodeType":"MemberAccess","src":"2189:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1451,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"2211:19:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}],"id":1450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2203:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1449,"name":"address","nodeType":"ElementaryTypeName","src":"2203:7:24","typeDescriptions":{}}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2203:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2189:42:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1456,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"2287:15:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1535_$","typeString":"type(library ERC2771Calldata)"}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2303:9:24","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1517,"src":"2287:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2287:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1459,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2316:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2320:6:24","memberName":"sender","nodeType":"MemberAccess","src":"2316:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1463,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2336:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1478","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1478","typeString":"contract ForwarderRegistryContextBase"}],"id":1462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2328:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1461,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:24","typeDescriptions":{}}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2328:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1454,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"2247:19:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2267:19:24","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"2247:39:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:95:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2189:153:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1472,"nodeType":"IfStatement","src":"2172:238:24","trueBody":{"id":1471,"nodeType":"Block","src":"2353:57:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1467,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"2374:15:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1535_$","typeString":"type(library ERC2771Calldata)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2390:7:24","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":1534,"src":"2374:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2374:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1430,"id":1470,"nodeType":"Return","src":"2367:32:24"}]}},{"expression":{"expression":{"id":1473,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2427:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2431:4:24","memberName":"data","nodeType":"MemberAccess","src":"2427:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1430,"id":1475,"nodeType":"Return","src":"2420:15:24"}]},"documentation":{"id":1426,"nodeType":"StructuredDocumentation","src":"1550:103:24","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":1477,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1667:8:24","nodeType":"FunctionDefinition","parameters":{"id":1427,"nodeType":"ParameterList","parameters":[],"src":"1675:2:24"},"returnParameters":{"id":1430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1477,"src":"1709:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1428,"name":"bytes","nodeType":"ElementaryTypeName","src":"1709:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1708:16:24"},"scope":1478,"src":"1658:784:24","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1479,"src":"445:1999:24","usedErrors":[],"usedEvents":[]}],"src":"32:2413:24"},"id":24},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[1490]},"id":1491,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1480,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":1481,"nodeType":"StructuredDocumentation","src":"58:110:25","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":1490,"linearizedBaseContracts":[1490],"name":"IERC2771","nameLocation":"178:8:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1482,"nodeType":"StructuredDocumentation","src":"193:171:25","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":1489,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:25","nodeType":"FunctionDefinition","parameters":{"id":1485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1484,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:25","nodeType":"VariableDeclaration","scope":1489,"src":"397:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1483,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:25"},"returnParameters":{"id":1488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1487,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:25","nodeType":"VariableDeclaration","scope":1489,"src":"439:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1486,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:25"},"scope":1490,"src":"369:86:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1491,"src":"168:289:25","usedErrors":[],"usedEvents":[]}],"src":"32:426:25"},"id":25},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[1506]},"id":1507,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1492,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"58:49:26","text":"@title Meta-Transactions Forwarder Registry."},"fullyImplemented":false,"id":1506,"linearizedBaseContracts":[1506],"name":"IForwarderRegistry","nameLocation":"117:18:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"142:390:26","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @param target The target contract.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."},"functionSelector":"019a2028","id":1505,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"546:19:26","nodeType":"FunctionDefinition","parameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"sender","nameLocation":"574:6:26","nodeType":"VariableDeclaration","scope":1505,"src":"566:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"forwarder","nameLocation":"590:9:26","nodeType":"VariableDeclaration","scope":1505,"src":"582:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1497,"name":"address","nodeType":"ElementaryTypeName","src":"582:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1500,"mutability":"mutable","name":"target","nameLocation":"609:6:26","nodeType":"VariableDeclaration","scope":1505,"src":"601:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1499,"name":"address","nodeType":"ElementaryTypeName","src":"601:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"565:51:26"},"returnParameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"isApproved","nameLocation":"645:10:26","nodeType":"VariableDeclaration","scope":1505,"src":"640:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1502,"name":"bool","nodeType":"ElementaryTypeName","src":"640:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"639:17:26"},"scope":1506,"src":"537:120:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1507,"src":"107:552:26","usedErrors":[],"usedEvents":[]}],"src":"32:628:26"},"id":26},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[1535]},"id":1536,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1508,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":1509,"nodeType":"StructuredDocumentation","src":"58:144:27","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":1535,"linearizedBaseContracts":[1535],"name":"ERC2771Calldata","nameLocation":"210:15:27","nodeType":"ContractDefinition","nodes":[{"body":{"id":1516,"nodeType":"Block","src":"398:105:27","statements":[{"AST":{"nativeSrc":"417:80:27","nodeType":"YulBlock","src":"417:80:27","statements":[{"nativeSrc":"431:56:27","nodeType":"YulAssignment","src":"431:56:27","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:27","nodeType":"YulLiteral","src":"445:2:27","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:27","nodeType":"YulIdentifier","src":"466:12:27"},"nativeSrc":"466:14:27","nodeType":"YulFunctionCall","src":"466:14:27"},{"kind":"number","nativeSrc":"482:2:27","nodeType":"YulLiteral","src":"482:2:27","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:27","nodeType":"YulIdentifier","src":"462:3:27"},"nativeSrc":"462:23:27","nodeType":"YulFunctionCall","src":"462:23:27"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:27","nodeType":"YulIdentifier","src":"449:12:27"},"nativeSrc":"449:37:27","nodeType":"YulFunctionCall","src":"449:37:27"}],"functionName":{"name":"shr","nativeSrc":"441:3:27","nodeType":"YulIdentifier","src":"441:3:27"},"nativeSrc":"441:46:27","nodeType":"YulFunctionCall","src":"441:46:27"},"variableNames":[{"name":"sender","nativeSrc":"431:6:27","nodeType":"YulIdentifier","src":"431:6:27"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1513,"isOffset":false,"isSlot":false,"src":"431:6:27","valueSize":1}],"id":1515,"nodeType":"InlineAssembly","src":"408:89:27"}]},"documentation":{"id":1510,"nodeType":"StructuredDocumentation","src":"232:101:27","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":1517,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:27","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[],"src":"356:2:27"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"sender","nameLocation":"390:6:27","nodeType":"VariableDeclaration","scope":1517,"src":"382:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1512,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:27"},"scope":1535,"src":"338:165:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1533,"nodeType":"Block","src":"679:89:27","statements":[{"id":1532,"nodeType":"UncheckedBlock","src":"689:73:27","statements":[{"expression":{"baseExpression":{"expression":{"id":1523,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:27","memberName":"data","nodeType":"MemberAccess","src":"720:8:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1525,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:27","memberName":"data","nodeType":"MemberAccess","src":"730:8:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:27","memberName":"length","nodeType":"MemberAccess","src":"730:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:27","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":1522,"id":1531,"nodeType":"Return","src":"713:38:27"}]}]},"documentation":{"id":1518,"nodeType":"StructuredDocumentation","src":"509:102:27","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":1534,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:27","nodeType":"FunctionDefinition","parameters":{"id":1519,"nodeType":"ParameterList","parameters":[],"src":"632:2:27"},"returnParameters":{"id":1522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"data","nameLocation":"673:4:27","nodeType":"VariableDeclaration","scope":1534,"src":"658:19:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1520,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:27"},"scope":1535,"src":"616:152:27","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1536,"src":"202:568:27","usedErrors":[],"usedEvents":[]}],"src":"32:739:27"},"id":27},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1544]},"id":1545,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1537,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:28"},{"documentation":{"id":1538,"nodeType":"StructuredDocumentation","src":"58:179:28","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":1544,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:28","nodeType":"ErrorDefinition","parameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:28","nodeType":"VariableDeclaration","scope":1544,"src":"277:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1539,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1542,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:28","nodeType":"VariableDeclaration","scope":1544,"src":"299:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1541,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:28"},"src":"237:80:28"}],"src":"32:286:28"},"id":28},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1544],"ProxyInitialization":[1591],"StorageSlot":[4300]},"id":1592,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1546,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:29"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":1548,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1592,"sourceUnit":1545,"src":"58:92:29","symbolAliases":[{"foreign":{"id":1547,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"66:33:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1592,"sourceUnit":4301,"src":"151:74:29","symbolAliases":[{"foreign":{"id":1549,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4300,"src":"159:11:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1551,"nodeType":"StructuredDocumentation","src":"227:92:29","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1591,"linearizedBaseContracts":[1591],"name":"ProxyInitialization","nameLocation":"327:19:29","nodeType":"ContractDefinition","nodes":[{"body":{"id":1589,"nodeType":"Block","src":"735:294:29","statements":[{"assignments":[1563],"declarations":[{"constant":false,"id":1563,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:29","nodeType":"VariableDeclaration","scope":1589,"src":"745:46:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4191_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1562,"nodeType":"UserDefinedTypeName","pathNode":{"id":1561,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:29","757:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":4191,"src":"745:23:29"},"referencedDeclaration":4191,"src":"745:23:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4191_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1568,"initialValue":{"arguments":[{"id":1566,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"821:11:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1564,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4300,"src":"794:11:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$4300_$","typeString":"type(library StorageSlot)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:29","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":4244,"src":"794:26:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$4191_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4191_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:29"},{"assignments":[1570],"declarations":[{"constant":false,"id":1570,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:29","nodeType":"VariableDeclaration","scope":1589,"src":"843:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1569,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1573,"initialValue":{"expression":{"id":1571,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"866:14:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4191_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1572,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:29","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"866:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1574,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"900:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1575,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"916:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1582,"nodeType":"IfStatement","src":"896:88:29","trueBody":{"errorCall":{"arguments":[{"id":1578,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"964:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1579,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"978:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1577,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"930:33:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1581,"nodeType":"RevertStatement","src":"923:61:29"}},{"expression":{"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1583,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"994:14:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4191_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1585,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:29","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4190,"src":"994:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1586,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1017:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1588,"nodeType":"ExpressionStatement","src":"994:28:29"}]},"documentation":{"id":1552,"nodeType":"StructuredDocumentation","src":"353:314:29","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1590,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:29","nodeType":"FunctionDefinition","parameters":{"id":1557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:29","nodeType":"VariableDeclaration","scope":1590,"src":"690:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1553,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"phase","nameLocation":"719:5:29","nodeType":"VariableDeclaration","scope":1590,"src":"711:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1555,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:29"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[],"src":"735:0:29"},"scope":1591,"src":"672:357:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1592,"src":"319:712:29","usedErrors":[],"usedEvents":[]}],"src":"32:1000:29"},"id":29},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[55],"TokenRecovery":[1603],"TokenRecoveryBase":[1718]},"id":1604,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1593,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:30"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":1595,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1604,"sourceUnit":1719,"src":"58:63:30","symbolAliases":[{"foreign":{"id":1594,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"66:17:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":1597,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1604,"sourceUnit":56,"src":"122:68:30","symbolAliases":[{"foreign":{"id":1596,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"130:17:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1599,"name":"TokenRecoveryBase","nameLocations":["440:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":1718,"src":"440:17:30"},"id":1600,"nodeType":"InheritanceSpecifier","src":"440:17:30"},{"baseName":{"id":1601,"name":"ContractOwnership","nameLocations":["459:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"459:17:30"},"id":1602,"nodeType":"InheritanceSpecifier","src":"459:17:30"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":1598,"nodeType":"StructuredDocumentation","src":"192:213:30","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1603,"linearizedBaseContracts":[1603,55,892,909,227,1718,4085,341,1764],"name":"TokenRecovery","nameLocation":"423:13:30","nodeType":"ContractDefinition","nodes":[],"scope":1604,"src":"405:74:30","usedErrors":[7,259,897,1790,3398,4095,4098],"usedEvents":[300]}],"src":"32:448:30"},"id":30},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Context":[4085],"ContractOwnershipStorage":[862],"IERC20":[3386],"IERC721":[3198],"ITokenRecovery":[1764],"TokenRecoveryBase":[1718],"TokenRecoveryLibrary":[1980]},"id":1719,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1605,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:31"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":1607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1719,"sourceUnit":3309,"src":"58:69:31","symbolAliases":[{"foreign":{"id":1606,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"66:6:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":1609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1719,"sourceUnit":3199,"src":"128:68:31","symbolAliases":[{"foreign":{"id":1608,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"136:7:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol","file":"./../interfaces/ITokenRecovery.sol","id":1611,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1719,"sourceUnit":1765,"src":"197:66:31","symbolAliases":[{"foreign":{"id":1610,"name":"ITokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"205:14:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":1613,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1719,"sourceUnit":863,"src":"264:95:31","symbolAliases":[{"foreign":{"id":1612,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"272:24:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol","file":"./../libraries/TokenRecoveryLibrary.sol","id":1615,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1719,"sourceUnit":1981,"src":"360:77:31","symbolAliases":[{"foreign":{"id":1614,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"368:20:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1719,"sourceUnit":4086,"src":"438:66:31","symbolAliases":[{"foreign":{"id":1616,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"446:7:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1619,"name":"ITokenRecovery","nameLocations":["817:14:31"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"817:14:31"},"id":1620,"nodeType":"InheritanceSpecifier","src":"817:14:31"},{"baseName":{"id":1621,"name":"Context","nameLocations":["833:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":4085,"src":"833:7:31"},"id":1622,"nodeType":"InheritanceSpecifier","src":"833:7:31"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"506:272:31","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1718,"linearizedBaseContracts":[1718,4085,1764],"name":"TokenRecoveryBase","nameLocation":"796:17:31","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1626,"libraryName":{"id":1623,"name":"ContractOwnershipStorage","nameLocations":["853:24:31"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"853:24:31"},"nodeType":"UsingForDirective","src":"847:67:31","typeName":{"id":1625,"nodeType":"UserDefinedTypeName","pathNode":{"id":1624,"name":"ContractOwnershipStorage.Layout","nameLocations":["882:24:31","907:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"882:31:31"},"referencedDeclaration":635,"src":"882:31:31","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[1735],"body":{"id":1652,"nodeType":"Block","src":"1319:147:31","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1641,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"1386:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1386:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1636,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1329:24:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1329:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1329:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1640,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1363:22:31","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1329:56:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1329:70:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1644,"nodeType":"ExpressionStatement","src":"1329:70:31"},{"expression":{"arguments":[{"id":1648,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"1441:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},{"id":1649,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"1451:7:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":1645,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"1409:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenRecoveryLibrary_$1980_$","typeString":"type(library TokenRecoveryLibrary)"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1430:10:31","memberName":"recoverETH","nodeType":"MemberAccess","referencedDeclaration":1834,"src":"1409:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_payable_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address payable[] calldata,uint256[] calldata)"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1409:50:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1651,"nodeType":"ExpressionStatement","src":"1409:50:31"}]},"documentation":{"id":1627,"nodeType":"StructuredDocumentation","src":"920:294:31","text":"@inheritdoc ITokenRecovery\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason."},"functionSelector":"f7ba94bd","id":1653,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1228:10:31","nodeType":"FunctionDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1630,"mutability":"mutable","name":"accounts","nameLocation":"1266:8:31","nodeType":"VariableDeclaration","scope":1653,"src":"1239:35:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":1628,"name":"address","nodeType":"ElementaryTypeName","src":"1239:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1629,"nodeType":"ArrayTypeName","src":"1239:17:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"amounts","nameLocation":"1295:7:31","nodeType":"VariableDeclaration","scope":1653,"src":"1276:26:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"1276:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1632,"nodeType":"ArrayTypeName","src":"1276:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1238:65:31"},"returnParameters":{"id":1635,"nodeType":"ParameterList","parameters":[],"src":"1319:0:31"},"scope":1718,"src":"1219:247:31","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1749],"body":{"id":1684,"nodeType":"Block","src":"1907:158:31","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1672,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"1974:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1974:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1667,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"1917:24:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"1917:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1917:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1671,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1951:22:31","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"1917:56:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1917:70:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"1917:70:31"},{"expression":{"arguments":[{"id":1679,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"2032:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1680,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"2042:6:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},{"id":1681,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"2050:7:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":1676,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"1997:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenRecoveryLibrary_$1980_$","typeString":"type(library TokenRecoveryLibrary)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2018:13:31","memberName":"recoverERC20s","nodeType":"MemberAccess","referencedDeclaration":1890,"src":"1997:34:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address[] calldata,contract IERC20[] calldata,uint256[] calldata)"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1997:61:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1683,"nodeType":"ExpressionStatement","src":"1997:61:31"}]},"documentation":{"id":1654,"nodeType":"StructuredDocumentation","src":"1472:309:31","text":"@inheritdoc ITokenRecovery\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason."},"functionSelector":"73c8a958","id":1685,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"1795:13:31","nodeType":"FunctionDefinition","parameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"accounts","nameLocation":"1828:8:31","nodeType":"VariableDeclaration","scope":1685,"src":"1809:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1655,"name":"address","nodeType":"ElementaryTypeName","src":"1809:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1656,"nodeType":"ArrayTypeName","src":"1809:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"tokens","nameLocation":"1856:6:31","nodeType":"VariableDeclaration","scope":1685,"src":"1838:24:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1659,"nodeType":"UserDefinedTypeName","pathNode":{"id":1658,"name":"IERC20","nameLocations":["1838:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"1838:6:31"},"referencedDeclaration":3386,"src":"1838:6:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":1660,"nodeType":"ArrayTypeName","src":"1838:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1664,"mutability":"mutable","name":"amounts","nameLocation":"1883:7:31","nodeType":"VariableDeclaration","scope":1685,"src":"1864:26:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1663,"nodeType":"ArrayTypeName","src":"1864:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1808:83:31"},"returnParameters":{"id":1666,"nodeType":"ParameterList","parameters":[],"src":"1907:0:31"},"scope":1718,"src":"1786:279:31","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1763],"body":{"id":1716,"nodeType":"Block","src":"2516:163:31","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1704,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"2583:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1699,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"2526:24:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2551:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"2526:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2560:22:31","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"2526:56:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:70:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1707,"nodeType":"ExpressionStatement","src":"2526:70:31"},{"expression":{"arguments":[{"id":1711,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"2642:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1712,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"2652:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},{"id":1713,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"2663:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":1708,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"2606:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenRecoveryLibrary_$1980_$","typeString":"type(library TokenRecoveryLibrary)"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2627:14:31","memberName":"recoverERC721s","nodeType":"MemberAccess","referencedDeclaration":1979,"src":"2606:35:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address[] calldata,contract IERC721[] calldata,uint256[] calldata)"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2606:66:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1715,"nodeType":"ExpressionStatement","src":"2606:66:31"}]},"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"2071:313:31","text":"@inheritdoc ITokenRecovery\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason."},"functionSelector":"c3666c36","id":1717,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"2398:14:31","nodeType":"FunctionDefinition","parameters":{"id":1697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"accounts","nameLocation":"2432:8:31","nodeType":"VariableDeclaration","scope":1717,"src":"2413:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"2413:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1688,"nodeType":"ArrayTypeName","src":"2413:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"contracts","nameLocation":"2461:9:31","nodeType":"VariableDeclaration","scope":1717,"src":"2442:28:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1691,"nodeType":"UserDefinedTypeName","pathNode":{"id":1690,"name":"IERC721","nameLocations":["2442:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":3198,"src":"2442:7:31"},"referencedDeclaration":3198,"src":"2442:7:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}},"id":1692,"nodeType":"ArrayTypeName","src":"2442:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1696,"mutability":"mutable","name":"tokenIds","nameLocation":"2491:8:31","nodeType":"VariableDeclaration","scope":1717,"src":"2472:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1694,"name":"uint256","nodeType":"ElementaryTypeName","src":"2472:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1695,"nodeType":"ArrayTypeName","src":"2472:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2412:88:31"},"returnParameters":{"id":1698,"nodeType":"ParameterList","parameters":[],"src":"2516:0:31"},"scope":1718,"src":"2389:290:31","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1719,"src":"778:1903:31","usedErrors":[7,259,1790,3398,4095,4098],"usedEvents":[]}],"src":"32:2650:31"},"id":31},"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol","exportedSymbols":{"IERC20":[3386],"IERC721":[3198],"ITokenRecovery":[1764]},"id":1765,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1720,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:32"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":1722,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1765,"sourceUnit":3309,"src":"58:69:32","symbolAliases":[{"foreign":{"id":1721,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"66:6:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":1724,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1765,"sourceUnit":3199,"src":"128:68:32","symbolAliases":[{"foreign":{"id":1723,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"136:7:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ITokenRecovery","contractDependencies":[],"contractKind":"interface","documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"198:49:32","text":"@title Uniquely identified seals management."},"fullyImplemented":false,"id":1764,"linearizedBaseContracts":[1764],"name":"ITokenRecovery","nameLocation":"257:14:32","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1726,"nodeType":"StructuredDocumentation","src":"278:626:32","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":1735,"implemented":false,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"918:10:32","nodeType":"FunctionDefinition","parameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"accounts","nameLocation":"956:8:32","nodeType":"VariableDeclaration","scope":1735,"src":"929:35:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"929:15:32","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1728,"nodeType":"ArrayTypeName","src":"929:17:32","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":1732,"mutability":"mutable","name":"amounts","nameLocation":"985:7:32","nodeType":"VariableDeclaration","scope":1735,"src":"966:26:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1730,"name":"uint256","nodeType":"ElementaryTypeName","src":"966:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1731,"nodeType":"ArrayTypeName","src":"966:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"928:65:32"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[],"src":"1002:0:32"},"scope":1764,"src":"909:94:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"1009:479:32","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":1749,"implemented":false,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"1502:13:32","nodeType":"FunctionDefinition","parameters":{"id":1747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"accounts","nameLocation":"1535:8:32","nodeType":"VariableDeclaration","scope":1749,"src":"1516:27:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1737,"name":"address","nodeType":"ElementaryTypeName","src":"1516:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1738,"nodeType":"ArrayTypeName","src":"1516:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1743,"mutability":"mutable","name":"tokens","nameLocation":"1563:6:32","nodeType":"VariableDeclaration","scope":1749,"src":"1545:24:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1741,"nodeType":"UserDefinedTypeName","pathNode":{"id":1740,"name":"IERC20","nameLocations":["1545:6:32"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"1545:6:32"},"referencedDeclaration":3386,"src":"1545:6:32","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":1742,"nodeType":"ArrayTypeName","src":"1545:8:32","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1746,"mutability":"mutable","name":"amounts","nameLocation":"1590:7:32","nodeType":"VariableDeclaration","scope":1749,"src":"1571:26:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1571:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1745,"nodeType":"ArrayTypeName","src":"1571:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1515:83:32"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[],"src":"1607:0:32"},"scope":1764,"src":"1493:115:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"1614:484:32","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":1763,"implemented":false,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"2112:14:32","nodeType":"FunctionDefinition","parameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"accounts","nameLocation":"2146:8:32","nodeType":"VariableDeclaration","scope":1763,"src":"2127:27:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1751,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1752,"nodeType":"ArrayTypeName","src":"2127:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1757,"mutability":"mutable","name":"contracts","nameLocation":"2175:9:32","nodeType":"VariableDeclaration","scope":1763,"src":"2156:28:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1755,"nodeType":"UserDefinedTypeName","pathNode":{"id":1754,"name":"IERC721","nameLocations":["2156:7:32"],"nodeType":"IdentifierPath","referencedDeclaration":3198,"src":"2156:7:32"},"referencedDeclaration":3198,"src":"2156:7:32","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}},"id":1756,"nodeType":"ArrayTypeName","src":"2156:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"tokenIds","nameLocation":"2205:8:32","nodeType":"VariableDeclaration","scope":1763,"src":"2186:27:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"2186:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1759,"nodeType":"ArrayTypeName","src":"2186:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2126:88:32"},"returnParameters":{"id":1762,"nodeType":"ParameterList","parameters":[],"src":"2223:0:32"},"scope":1764,"src":"2103:121:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1765,"src":"247:1979:32","usedErrors":[],"usedEvents":[]}],"src":"32:2195:32"},"id":32},"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol","exportedSymbols":{"Address":[4055],"IERC165":[909],"IERC20":[3386],"IERC721":[3198],"InconsistentArrayLengths":[7],"SafeERC20":[3795],"TokenRecoveryLibrary":[1980]},"id":1981,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1766,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:33"},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../CommonErrors.sol","id":1768,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1981,"sourceUnit":11,"src":"58:66:33","symbolAliases":[{"foreign":{"id":1767,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"66:24:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":1770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1981,"sourceUnit":3309,"src":"125:69:33","symbolAliases":[{"foreign":{"id":1769,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"133:6:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":1772,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1981,"sourceUnit":3199,"src":"195:68:33","symbolAliases":[{"foreign":{"id":1771,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"203:7:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../../introspection/interfaces/IERC165.sol","id":1774,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1981,"sourceUnit":910,"src":"264:69:33","symbolAliases":[{"foreign":{"id":1773,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"272:7:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":1776,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1981,"sourceUnit":3796,"src":"334:82:33","symbolAliases":[{"foreign":{"id":1775,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"342:9:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1778,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1981,"sourceUnit":4056,"src":"417:66:33","symbolAliases":[{"foreign":{"id":1777,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"425:7:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TokenRecoveryLibrary","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1980,"linearizedBaseContracts":[1980],"name":"TokenRecoveryLibrary","nameLocation":"493:20:33","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1782,"libraryName":{"id":1779,"name":"SafeERC20","nameLocations":["526:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":3795,"src":"526:9:33"},"nodeType":"UsingForDirective","src":"520:27:33","typeName":{"id":1781,"nodeType":"UserDefinedTypeName","pathNode":{"id":1780,"name":"IERC20","nameLocations":["540:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"540:6:33"},"referencedDeclaration":3386,"src":"540:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}},{"global":false,"id":1785,"libraryName":{"id":1783,"name":"Address","nameLocations":["558:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":4055,"src":"558:7:33"},"nodeType":"UsingForDirective","src":"552:34:33","typeName":{"id":1784,"name":"address","nodeType":"ElementaryTypeName","src":"570:15:33","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"592:142:33","text":"@notice Thrown when trying to recover a token of the wrong contract type.\n @param tokenContract The token contract being recovered."},"errorSelector":"986b9f1f","id":1790,"name":"IncorrectTokenContractType","nameLocation":"745:26:33","nodeType":"ErrorDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"tokenContract","nameLocation":"780:13:33","nodeType":"VariableDeclaration","scope":1790,"src":"772:21:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1787,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"771:23:33"},"src":"739:56:33"},{"body":{"id":1833,"nodeType":"Block","src":"1704:222:33","statements":[{"assignments":[1801],"declarations":[{"constant":false,"id":1801,"mutability":"mutable","name":"length","nameLocation":"1722:6:33","nodeType":"VariableDeclaration","scope":1833,"src":"1714:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1804,"initialValue":{"expression":{"id":1802,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"1731:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1740:6:33","memberName":"length","nodeType":"MemberAccess","src":"1731:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1714:32:33"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1805,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"1760:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1806,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"1770:7:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1778:6:33","memberName":"length","nodeType":"MemberAccess","src":"1770:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1760:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1812,"nodeType":"IfStatement","src":"1756:63:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1809,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1793:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1811,"nodeType":"RevertStatement","src":"1786:33:33"}},{"body":{"id":1831,"nodeType":"Block","src":"1862:58:33","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1826,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"1898:7:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1828,"indexExpression":{"id":1827,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1906:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1898:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1822,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"1876:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1824,"indexExpression":{"id":1823,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1885:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1876:11:33","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1888:9:33","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":3853,"src":"1876:21:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1876:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1830,"nodeType":"ExpressionStatement","src":"1876:33:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1816,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1845:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1817,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"1849:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1845:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1832,"initializationExpression":{"assignments":[1814],"declarations":[{"constant":false,"id":1814,"mutability":"mutable","name":"i","nameLocation":"1842:1:33","nodeType":"VariableDeclaration","scope":1832,"src":"1834:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1813,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1815,"nodeType":"VariableDeclarationStatement","src":"1834:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1857:3:33","subExpression":{"id":1819,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"1859:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1821,"nodeType":"ExpressionStatement","src":"1857:3:33"},"nodeType":"ForStatement","src":"1829:91:33"}]},"documentation":{"id":1791,"nodeType":"StructuredDocumentation","src":"801:804:33","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"id":1834,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1619:10:33","nodeType":"FunctionDefinition","parameters":{"id":1798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"accounts","nameLocation":"1657:8:33","nodeType":"VariableDeclaration","scope":1834,"src":"1630:35:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":1792,"name":"address","nodeType":"ElementaryTypeName","src":"1630:15:33","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1793,"nodeType":"ArrayTypeName","src":"1630:17:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":1797,"mutability":"mutable","name":"amounts","nameLocation":"1686:7:33","nodeType":"VariableDeclaration","scope":1834,"src":"1667:26:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1667:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1796,"nodeType":"ArrayTypeName","src":"1667:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1629:65:33"},"returnParameters":{"id":1799,"nodeType":"ParameterList","parameters":[],"src":"1704:0:33"},"scope":1980,"src":"1610:316:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1889,"nodeType":"Block","src":"2724:263:33","statements":[{"assignments":[1849],"declarations":[{"constant":false,"id":1849,"mutability":"mutable","name":"length","nameLocation":"2742:6:33","nodeType":"VariableDeclaration","scope":1889,"src":"2734:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2734:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1852,"initialValue":{"expression":{"id":1850,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"2751:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2760:6:33","memberName":"length","nodeType":"MemberAccess","src":"2751:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2734:32:33"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1853,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"2780:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1854,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"2790:6:33","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2797:6:33","memberName":"length","nodeType":"MemberAccess","src":"2790:13:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2780:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1857,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"2807:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1858,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"2817:7:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2825:6:33","memberName":"length","nodeType":"MemberAccess","src":"2817:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2807:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2780:51:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1865,"nodeType":"IfStatement","src":"2776:90:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1862,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2840:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2840:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1864,"nodeType":"RevertStatement","src":"2833:33:33"}},{"body":{"id":1887,"nodeType":"Block","src":"2909:72:33","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1879,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"2946:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1881,"indexExpression":{"id":1880,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2955:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2946:11:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1882,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"2959:7:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1884,"indexExpression":{"id":1883,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2967:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2959:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1875,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"2923:6:33","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1877,"indexExpression":{"id":1876,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2930:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2923:9:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2933:12:33","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":3431,"src":"2923:22:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$3386_$","typeString":"function (contract IERC20,address,uint256)"}},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2923:47:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1886,"nodeType":"ExpressionStatement","src":"2923:47:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1869,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2892:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1870,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"2896:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2892:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1888,"initializationExpression":{"assignments":[1867],"declarations":[{"constant":false,"id":1867,"mutability":"mutable","name":"i","nameLocation":"2889:1:33","nodeType":"VariableDeclaration","scope":1888,"src":"2881:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1866,"name":"uint256","nodeType":"ElementaryTypeName","src":"2881:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1868,"nodeType":"VariableDeclarationStatement","src":"2881:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2904:3:33","subExpression":{"id":1872,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2906:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1874,"nodeType":"ExpressionStatement","src":"2904:3:33"},"nodeType":"ForStatement","src":"2876:105:33"}]},"documentation":{"id":1835,"nodeType":"StructuredDocumentation","src":"1932:672:33","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"id":1890,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"2618:13:33","nodeType":"FunctionDefinition","parameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"accounts","nameLocation":"2651:8:33","nodeType":"VariableDeclaration","scope":1890,"src":"2632:27:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1836,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1837,"nodeType":"ArrayTypeName","src":"2632:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1842,"mutability":"mutable","name":"tokens","nameLocation":"2679:6:33","nodeType":"VariableDeclaration","scope":1890,"src":"2661:24:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1840,"nodeType":"UserDefinedTypeName","pathNode":{"id":1839,"name":"IERC20","nameLocations":["2661:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"2661:6:33"},"referencedDeclaration":3386,"src":"2661:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":1841,"nodeType":"ArrayTypeName","src":"2661:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1845,"mutability":"mutable","name":"amounts","nameLocation":"2706:7:33","nodeType":"VariableDeclaration","scope":1890,"src":"2687:26:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2687:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1844,"nodeType":"ArrayTypeName","src":"2687:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2631:83:33"},"returnParameters":{"id":1847,"nodeType":"ParameterList","parameters":[],"src":"2724:0:33"},"scope":1980,"src":"2609:378:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1978,"nodeType":"Block","src":"3800:526:33","statements":[{"assignments":[1905],"declarations":[{"constant":false,"id":1905,"mutability":"mutable","name":"length","nameLocation":"3818:6:33","nodeType":"VariableDeclaration","scope":1978,"src":"3810:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"3810:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1908,"initialValue":{"expression":{"id":1906,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"3827:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3836:6:33","memberName":"length","nodeType":"MemberAccess","src":"3827:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3810:32:33"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1909,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"3856:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1910,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"3866:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3876:6:33","memberName":"length","nodeType":"MemberAccess","src":"3866:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3856:26:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1913,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"3886:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1914,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"3896:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3905:6:33","memberName":"length","nodeType":"MemberAccess","src":"3896:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3886:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3856:55:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1921,"nodeType":"IfStatement","src":"3852:94:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1918,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"3920:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3920:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1920,"nodeType":"RevertStatement","src":"3913:33:33"}},{"body":{"id":1976,"nodeType":"Block","src":"3989:331:33","statements":[{"assignments":[1933],"declarations":[{"constant":false,"id":1933,"mutability":"mutable","name":"tokenContract","nameLocation":"4011:13:33","nodeType":"VariableDeclaration","scope":1976,"src":"4003:21:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"},"typeName":{"id":1932,"nodeType":"UserDefinedTypeName","pathNode":{"id":1931,"name":"IERC721","nameLocations":["4003:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":3198,"src":"4003:7:33"},"referencedDeclaration":3198,"src":"4003:7:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}},"visibility":"internal"}],"id":1937,"initialValue":{"baseExpression":{"id":1934,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"4027:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1936,"indexExpression":{"id":1935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"4037:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4027:12:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}},"nodeType":"VariableDeclarationStatement","src":"4003:36:33"},{"condition":{"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4057:77:33","subExpression":{"arguments":[{"expression":{"arguments":[{"id":1946,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"4113:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$3198_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$3198_$","typeString":"type(contract IERC721)"}],"id":1945,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4108:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4108:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$3198","typeString":"type(contract IERC721)"}},"id":1948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4122:11:33","memberName":"interfaceId","nodeType":"MemberAccess","src":"4108:25:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"arguments":[{"id":1941,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"4074:13:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}],"id":1940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4066:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1939,"name":"address","nodeType":"ElementaryTypeName","src":"4066:7:33","typeDescriptions":{}}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4066:22:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1938,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"4058:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$909_$","typeString":"type(contract IERC165)"}},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4058:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC165_$909","typeString":"contract IERC165"}},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4090:17:33","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":908,"src":"4058:49:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4058:76:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1959,"nodeType":"IfStatement","src":"4053:173:33","trueBody":{"id":1958,"nodeType":"Block","src":"4136:90:33","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1954,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"4196:13:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}],"id":1953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4188:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1952,"name":"address","nodeType":"ElementaryTypeName","src":"4188:7:33","typeDescriptions":{}}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4188:22:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1951,"name":"IncorrectTokenContractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"4161:26:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4161:50:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1957,"nodeType":"RevertStatement","src":"4154:57:33"}]}},{"expression":{"arguments":[{"arguments":[{"id":1966,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4277:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryLibrary_$1980","typeString":"library TokenRecoveryLibrary"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryLibrary_$1980","typeString":"library TokenRecoveryLibrary"}],"id":1965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4269:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1964,"name":"address","nodeType":"ElementaryTypeName","src":"4269:7:33","typeDescriptions":{}}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4269:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1968,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"4284:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1970,"indexExpression":{"id":1969,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"4293:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4284:11:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1971,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"4297:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1973,"indexExpression":{"id":1972,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"4306:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4297:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1960,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"4239:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1962,"indexExpression":{"id":1961,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"4249:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4239:12:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4252:16:33","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3151,"src":"4239:29:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4239:70:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1975,"nodeType":"ExpressionStatement","src":"4239:70:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1925,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"3972:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1926,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"3976:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3972:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1977,"initializationExpression":{"assignments":[1923],"declarations":[{"constant":false,"id":1923,"mutability":"mutable","name":"i","nameLocation":"3969:1:33","nodeType":"VariableDeclaration","scope":1977,"src":"3961:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"3961:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1924,"nodeType":"VariableDeclarationStatement","src":"3961:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3984:3:33","subExpression":{"id":1928,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"3986:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1930,"nodeType":"ExpressionStatement","src":"3984:3:33"},"nodeType":"ForStatement","src":"3956:364:33"}]},"documentation":{"id":1891,"nodeType":"StructuredDocumentation","src":"2993:681:33","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"id":1979,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"3688:14:33","nodeType":"FunctionDefinition","parameters":{"id":1902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1894,"mutability":"mutable","name":"accounts","nameLocation":"3722:8:33","nodeType":"VariableDeclaration","scope":1979,"src":"3703:27:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1892,"name":"address","nodeType":"ElementaryTypeName","src":"3703:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1893,"nodeType":"ArrayTypeName","src":"3703:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"contracts","nameLocation":"3751:9:33","nodeType":"VariableDeclaration","scope":1979,"src":"3732:28:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1896,"nodeType":"UserDefinedTypeName","pathNode":{"id":1895,"name":"IERC721","nameLocations":["3732:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":3198,"src":"3732:7:33"},"referencedDeclaration":3198,"src":"3732:7:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3198","typeString":"contract IERC721"}},"id":1897,"nodeType":"ArrayTypeName","src":"3732:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3198_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1901,"mutability":"mutable","name":"tokenIds","nameLocation":"3781:8:33","nodeType":"VariableDeclaration","scope":1979,"src":"3762:27:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1899,"name":"uint256","nodeType":"ElementaryTypeName","src":"3762:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1900,"nodeType":"ArrayTypeName","src":"3762:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3702:88:33"},"returnParameters":{"id":1903,"nodeType":"ParameterList","parameters":[],"src":"3800:0:33"},"scope":1980,"src":"3679:647:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1981,"src":"485:3843:33","usedErrors":[1790],"usedEvents":[]}],"src":"32:4297:33"},"id":33},"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","exportedSymbols":{"AccessControl":[22],"AccessControlStorage":[604],"Context":[4085],"ContractOwnership":[55],"ForwarderRegistryContext":[1350],"ForwarderRegistryContextBase":[1478],"IERC20":[3386],"IForwarderRegistry":[1506],"ILinearPool":[2737],"LinearPool":[2697],"ReentrancyGuard":[4176],"SafeERC20":[3795],"TokenRecovery":[1603]},"id":2698,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1982,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:34"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../../access/ContractOwnership.sol","id":1984,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":56,"src":"57:71:34","symbolAliases":[{"foreign":{"id":1983,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"65:17:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"./../../access/AccessControl.sol","id":1986,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":23,"src":"129:63:34","symbolAliases":[{"foreign":{"id":1985,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"137:13:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1988,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":4177,"src":"193:82:34","symbolAliases":[{"foreign":{"id":1987,"name":"ReentrancyGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"201:15:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"./../../security/TokenRecovery.sol","id":1990,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":1604,"src":"276:65:34","symbolAliases":[{"foreign":{"id":1989,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"284:13:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1992,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":4086,"src":"342:66:34","symbolAliases":[{"foreign":{"id":1991,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"350:7:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./../../metatx/base/ForwarderRegistryContextBase.sol","id":1994,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":1479,"src":"409:98:34","symbolAliases":[{"foreign":{"id":1993,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"417:28:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"./../../metatx/ForwarderRegistryContext.sol","id":1996,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":1351,"src":"508:85:34","symbolAliases":[{"foreign":{"id":1995,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"516:24:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../../access/libraries/AccessControlStorage.sol","id":1998,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":605,"src":"594:87:34","symbolAliases":[{"foreign":{"id":1997,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"602:20:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":2001,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":3796,"src":"682:90:34","symbolAliases":[{"foreign":{"id":1999,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"690:9:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2000,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"701:6:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol","file":"./interfaces/ILinearPool.sol","id":2003,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":2738,"src":"773:57:34","symbolAliases":[{"foreign":{"id":2002,"name":"ILinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"781:11:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../../metatx/interfaces/IForwarderRegistry.sol","id":2005,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2698,"sourceUnit":1507,"src":"831:84:34","symbolAliases":[{"foreign":{"id":2004,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"839:18:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2007,"name":"ILinearPool","nameLocations":["1873:11:34"],"nodeType":"IdentifierPath","referencedDeclaration":2737,"src":"1873:11:34"},"id":2008,"nodeType":"InheritanceSpecifier","src":"1873:11:34"},{"baseName":{"id":2009,"name":"AccessControl","nameLocations":["1886:13:34"],"nodeType":"IdentifierPath","referencedDeclaration":22,"src":"1886:13:34"},"id":2010,"nodeType":"InheritanceSpecifier","src":"1886:13:34"},{"baseName":{"id":2011,"name":"ReentrancyGuard","nameLocations":["1901:15:34"],"nodeType":"IdentifierPath","referencedDeclaration":4176,"src":"1901:15:34"},"id":2012,"nodeType":"InheritanceSpecifier","src":"1901:15:34"},{"baseName":{"id":2013,"name":"TokenRecovery","nameLocations":["1918:13:34"],"nodeType":"IdentifierPath","referencedDeclaration":1603,"src":"1918:13:34"},"id":2014,"nodeType":"InheritanceSpecifier","src":"1918:13:34"},{"baseName":{"id":2015,"name":"ForwarderRegistryContext","nameLocations":["1933:24:34"],"nodeType":"IdentifierPath","referencedDeclaration":1350,"src":"1933:24:34"},"id":2016,"nodeType":"InheritanceSpecifier","src":"1933:24:34"}],"canonicalName":"LinearPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"1008:833:34","text":"@title Linear rewards distribution staking pool.\n @notice Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.\n @notice Stakes, whether fungible or non-fungible, map to an amount of \"stake points\", then used to compute the user rewards share.\n @notice NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.\n @notice If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.\n @notice NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,\n @notice the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract."},"fullyImplemented":false,"id":2697,"linearizedBaseContracts":[2697,1350,1490,1478,1603,4176,22,55,892,909,227,1718,179,4085,341,1764,325,2737],"name":"LinearPool","nameLocation":"1859:10:34","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2020,"libraryName":{"id":2017,"name":"AccessControlStorage","nameLocations":["1970:20:34"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"1970:20:34"},"nodeType":"UsingForDirective","src":"1964:59:34","typeName":{"id":2019,"nodeType":"UserDefinedTypeName","pathNode":{"id":2018,"name":"AccessControlStorage.Layout","nameLocations":["1995:20:34","2016:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":369,"src":"1995:27:34"},"referencedDeclaration":369,"src":"1995:27:34","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":2024,"libraryName":{"id":2021,"name":"SafeERC20","nameLocations":["2034:9:34"],"nodeType":"IdentifierPath","referencedDeclaration":3795,"src":"2034:9:34"},"nodeType":"UsingForDirective","src":"2028:27:34","typeName":{"id":2023,"nodeType":"UserDefinedTypeName","pathNode":{"id":2022,"name":"IERC20","nameLocations":["2048:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"2048:6:34"},"referencedDeclaration":3386,"src":"2048:6:34","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}},{"constant":true,"functionSelector":"8580cf76","id":2027,"mutability":"constant","name":"REWARDER_ROLE","nameLocation":"2085:13:34","nodeType":"VariableDeclaration","scope":2697,"src":"2061:50:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2061:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"7265776172646572","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2101:10:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_09d4f938153b9874445ae24b09d3d71e7e819f700e6d9b5515a8ddfdd0cb3d7f","typeString":"literal_string \"rewarder\""},"value":"rewarder"},"visibility":"public"},{"constant":true,"functionSelector":"ef4cadc5","id":2030,"mutability":"constant","name":"SCALING_FACTOR","nameLocation":"2141:14:34","nodeType":"VariableDeclaration","scope":2697,"src":"2117:45:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"2117:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653138","id":2029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2158:4:34","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"public"},{"constant":false,"functionSelector":"817b1cd2","id":2032,"mutability":"mutable","name":"totalStaked","nameLocation":"2184:11:34","nodeType":"VariableDeclaration","scope":2697,"src":"2169:26:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"2169:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"d0b06f5d","id":2034,"mutability":"mutable","name":"lastUpdated","nameLocation":"2216:11:34","nodeType":"VariableDeclaration","scope":2697,"src":"2201:26:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2033,"name":"uint256","nodeType":"ElementaryTypeName","src":"2201:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"7b0a47ee","id":2036,"mutability":"mutable","name":"rewardRate","nameLocation":"2248:10:34","nodeType":"VariableDeclaration","scope":2697,"src":"2233:25:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2035,"name":"uint256","nodeType":"ElementaryTypeName","src":"2233:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"9d696e36","id":2038,"mutability":"mutable","name":"rewardPerStakePointStored","nameLocation":"2279:25:34","nodeType":"VariableDeclaration","scope":2697,"src":"2264:40:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2037,"name":"uint256","nodeType":"ElementaryTypeName","src":"2264:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"efa90b54","id":2040,"mutability":"mutable","name":"distributionEnd","nameLocation":"2325:15:34","nodeType":"VariableDeclaration","scope":2697,"src":"2310:30:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2039,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"98807d84","id":2044,"mutability":"mutable","name":"staked","nameLocation":"2401:6:34","nodeType":"VariableDeclaration","scope":2697,"src":"2347:60:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2043,"keyName":"staker","keyNameLocation":"2363:6:34","keyType":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"2355:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2347:46:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"stakePoints","valueNameLocation":"2381:11:34","valueType":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"2373:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"0700037d","id":2048,"mutability":"mutable","name":"rewards","nameLocation":"2462:7:34","nodeType":"VariableDeclaration","scope":2697,"src":"2413:56:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2047,"keyName":"staker","keyNameLocation":"2429:6:34","keyType":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2413:41:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"reward","valueNameLocation":"2447:6:34","valueType":{"id":2046,"name":"uint256","nodeType":"ElementaryTypeName","src":"2439:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"c5c8f770","id":2052,"mutability":"mutable","name":"rewardPerStakePointPaid","nameLocation":"2522:23:34","nodeType":"VariableDeclaration","scope":2697,"src":"2475:70:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2051,"keyName":"staker","keyNameLocation":"2491:6:34","keyType":{"id":2049,"name":"address","nodeType":"ElementaryTypeName","src":"2483:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2475:39:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"paid","valueNameLocation":"2509:4:34","valueType":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"2501:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"f4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e","id":2060,"name":"Staked","nameLocation":"2558:6:34","nodeType":"EventDefinition","parameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"2581:6:34","nodeType":"VariableDeclaration","scope":2060,"src":"2565:22:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2053,"name":"address","nodeType":"ElementaryTypeName","src":"2565:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2056,"indexed":false,"mutability":"mutable","name":"stakeData","nameLocation":"2595:9:34","nodeType":"VariableDeclaration","scope":2060,"src":"2589:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2055,"name":"bytes","nodeType":"ElementaryTypeName","src":"2589:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2058,"indexed":false,"mutability":"mutable","name":"stakePoints","nameLocation":"2614:11:34","nodeType":"VariableDeclaration","scope":2060,"src":"2606:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"2606:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2564:62:34"},"src":"2552:75:34"},{"anonymous":false,"eventSelector":"aae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e","id":2068,"name":"Withdrawn","nameLocation":"2638:9:34","nodeType":"EventDefinition","parameters":{"id":2067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"2664:6:34","nodeType":"VariableDeclaration","scope":2068,"src":"2648:22:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2061,"name":"address","nodeType":"ElementaryTypeName","src":"2648:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2064,"indexed":false,"mutability":"mutable","name":"withdrawData","nameLocation":"2678:12:34","nodeType":"VariableDeclaration","scope":2068,"src":"2672:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2063,"name":"bytes","nodeType":"ElementaryTypeName","src":"2672:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2066,"indexed":false,"mutability":"mutable","name":"stakePoints","nameLocation":"2700:11:34","nodeType":"VariableDeclaration","scope":2068,"src":"2692:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2065,"name":"uint256","nodeType":"ElementaryTypeName","src":"2692:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2647:65:34"},"src":"2632:81:34"},{"anonymous":false,"eventSelector":"4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd5","id":2076,"name":"Claimed","nameLocation":"2724:7:34","nodeType":"EventDefinition","parameters":{"id":2075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"2748:6:34","nodeType":"VariableDeclaration","scope":2076,"src":"2732:22:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2069,"name":"address","nodeType":"ElementaryTypeName","src":"2732:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2072,"indexed":false,"mutability":"mutable","name":"claimData","nameLocation":"2762:9:34","nodeType":"VariableDeclaration","scope":2076,"src":"2756:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2071,"name":"bytes","nodeType":"ElementaryTypeName","src":"2756:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2074,"indexed":false,"mutability":"mutable","name":"reward","nameLocation":"2781:6:34","nodeType":"VariableDeclaration","scope":2076,"src":"2773:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2073,"name":"uint256","nodeType":"ElementaryTypeName","src":"2773:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2731:57:34"},"src":"2718:71:34"},{"anonymous":false,"eventSelector":"0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf8908083","id":2086,"name":"RewardAdded","nameLocation":"2800:11:34","nodeType":"EventDefinition","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2078,"indexed":true,"mutability":"mutable","name":"rewarder","nameLocation":"2828:8:34","nodeType":"VariableDeclaration","scope":2086,"src":"2812:24:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2077,"name":"address","nodeType":"ElementaryTypeName","src":"2812:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2080,"indexed":false,"mutability":"mutable","name":"reward","nameLocation":"2846:6:34","nodeType":"VariableDeclaration","scope":2086,"src":"2838:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2079,"name":"uint256","nodeType":"ElementaryTypeName","src":"2838:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2082,"indexed":false,"mutability":"mutable","name":"duration","nameLocation":"2862:8:34","nodeType":"VariableDeclaration","scope":2086,"src":"2854:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"2854:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2084,"indexed":false,"mutability":"mutable","name":"dust","nameLocation":"2880:4:34","nodeType":"VariableDeclaration","scope":2086,"src":"2872:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2083,"name":"uint256","nodeType":"ElementaryTypeName","src":"2872:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2811:74:34"},"src":"2794:92:34"},{"errorSelector":"040ef8ec","id":2088,"name":"InvalidStakeAmount","nameLocation":"2898:18:34","nodeType":"ErrorDefinition","parameters":{"id":2087,"nodeType":"ParameterList","parameters":[],"src":"2916:2:34"},"src":"2892:27:34"},{"errorSelector":"db73cdf0","id":2090,"name":"InvalidWithdrawAmount","nameLocation":"2930:21:34","nodeType":"ErrorDefinition","parameters":{"id":2089,"nodeType":"ParameterList","parameters":[],"src":"2951:2:34"},"src":"2924:30:34"},{"errorSelector":"2b6a7758","id":2098,"name":"NotEnoughStake","nameLocation":"2965:14:34","nodeType":"ErrorDefinition","parameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"staker","nameLocation":"2988:6:34","nodeType":"VariableDeclaration","scope":2098,"src":"2980:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2091,"name":"address","nodeType":"ElementaryTypeName","src":"2980:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2094,"mutability":"mutable","name":"stake","nameLocation":"3004:5:34","nodeType":"VariableDeclaration","scope":2098,"src":"2996:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"2996:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2096,"mutability":"mutable","name":"withdraw","nameLocation":"3019:8:34","nodeType":"VariableDeclaration","scope":2098,"src":"3011:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"3011:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2979:49:34"},"src":"2959:70:34"},{"errorSelector":"38539865","id":2100,"name":"InvalidRewardAmount","nameLocation":"3040:19:34","nodeType":"ErrorDefinition","parameters":{"id":2099,"nodeType":"ParameterList","parameters":[],"src":"3059:2:34"},"src":"3034:28:34"},{"errorSelector":"76166401","id":2102,"name":"InvalidDuration","nameLocation":"3073:15:34","nodeType":"ErrorDefinition","parameters":{"id":2101,"nodeType":"ParameterList","parameters":[],"src":"3088:2:34"},"src":"3067:24:34"},{"errorSelector":"99e66a49","id":2108,"name":"RewardTooSmallForDuration","nameLocation":"3102:25:34","nodeType":"ErrorDefinition","parameters":{"id":2107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"mutability":"mutable","name":"reward","nameLocation":"3136:6:34","nodeType":"VariableDeclaration","scope":2108,"src":"3128:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"3128:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2106,"mutability":"mutable","name":"duration","nameLocation":"3152:8:34","nodeType":"VariableDeclaration","scope":2108,"src":"3144:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2105,"name":"uint256","nodeType":"ElementaryTypeName","src":"3144:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3127:34:34"},"src":"3096:66:34"},{"body":{"id":2121,"nodeType":"Block","src":"3292:2:34","statements":[]},"id":2122,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2114,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3236:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3240:6:34","memberName":"sender","nodeType":"MemberAccess","src":"3236:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2116,"kind":"baseConstructorSpecifier","modifierName":{"id":2113,"name":"ContractOwnership","nameLocations":["3218:17:34"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"3218:17:34"},"nodeType":"ModifierInvocation","src":"3218:29:34"},{"arguments":[{"id":2118,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"3273:17:34","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"id":2119,"kind":"baseConstructorSpecifier","modifierName":{"id":2117,"name":"ForwarderRegistryContext","nameLocations":["3248:24:34"],"nodeType":"IdentifierPath","referencedDeclaration":1350,"src":"3248:24:34"},"nodeType":"ModifierInvocation","src":"3248:43:34"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"3199:17:34","nodeType":"VariableDeclaration","scope":2122,"src":"3180:36:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":2110,"nodeType":"UserDefinedTypeName","pathNode":{"id":2109,"name":"IForwarderRegistry","nameLocations":["3180:18:34"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"3180:18:34"},"referencedDeclaration":1506,"src":"3180:18:34","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"3179:38:34"},"returnParameters":{"id":2120,"nodeType":"ParameterList","parameters":[],"src":"3292:0:34"},"scope":2697,"src":"3168:126:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2169,"nodeType":"Block","src":"3349:439:34","statements":[{"expression":{"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2127,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"3359:25:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":2128,"name":"rewardPerStakePoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"3387:19:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3387:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3359:49:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2131,"nodeType":"ExpressionStatement","src":"3359:49:34"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2132,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3422:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3428:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"3422:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2134,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"3441:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3422:34:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2136,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"3460:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3475:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3460:16:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3422:54:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2146,"nodeType":"IfStatement","src":"3418:195:34","trueBody":{"id":2145,"nodeType":"Block","src":"3478:135:34","statements":[{"expression":{"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2140,"name":"lastUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"3562:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":2141,"name":"lastTimeRewardApplicable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"3576:24:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3576:26:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3562:40:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2144,"nodeType":"ExpressionStatement","src":"3562:40:34"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2147,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"3626:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3645:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3637:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2148,"name":"address","nodeType":"ElementaryTypeName","src":"3637:7:34","typeDescriptions":{}}},"id":2151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3637:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3626:21:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2168,"nodeType":"IfStatement","src":"3622:160:34","trueBody":{"id":2167,"nodeType":"Block","src":"3649:133:34","statements":[{"expression":{"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2153,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"3663:7:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2155,"indexExpression":{"id":2154,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"3671:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3663:16:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2157,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"3689:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2156,"name":"earned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"3682:6:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3682:15:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3663:34:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2160,"nodeType":"ExpressionStatement","src":"3663:34:34"},{"expression":{"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2161,"name":"rewardPerStakePointPaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"3711:23:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2163,"indexExpression":{"id":2162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"3735:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3711:32:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2164,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"3746:25:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3711:60:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2166,"nodeType":"ExpressionStatement","src":"3711:60:34"}]}}]},"id":2170,"implemented":true,"kind":"function","modifiers":[],"name":"_updateReward","nameLocation":"3309:13:34","nodeType":"FunctionDefinition","parameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"account","nameLocation":"3331:7:34","nodeType":"VariableDeclaration","scope":2170,"src":"3323:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2123,"name":"address","nodeType":"ElementaryTypeName","src":"3323:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3322:17:34"},"returnParameters":{"id":2126,"nodeType":"ParameterList","parameters":[],"src":"3349:0:34"},"scope":2697,"src":"3300:488:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2704],"body":{"id":2189,"nodeType":"Block","src":"4007:165:34","statements":[{"assignments":[2177],"declarations":[{"constant":false,"id":2177,"mutability":"mutable","name":"currentDistributionEnd","nameLocation":"4025:22:34","nodeType":"VariableDeclaration","scope":2189,"src":"4017:30:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2176,"name":"uint256","nodeType":"ElementaryTypeName","src":"4017:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2179,"initialValue":{"id":2178,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"4050:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4017:48:34"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2180,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4082:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"4082:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2182,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"4100:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4082:40:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2186,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"4143:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4082:83:34","trueExpression":{"expression":{"id":2184,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4125:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4131:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"4125:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2175,"id":2188,"nodeType":"Return","src":"4075:90:34"}]},"documentation":{"id":2171,"nodeType":"StructuredDocumentation","src":"3794:142:34","text":"@notice Returns the last time rewards are applicable.\n @return The minimum of the current block timestamp and the distribution end."},"functionSelector":"80faa57d","id":2190,"implemented":true,"kind":"function","modifiers":[],"name":"lastTimeRewardApplicable","nameLocation":"3950:24:34","nodeType":"FunctionDefinition","parameters":{"id":2172,"nodeType":"ParameterList","parameters":[],"src":"3974:2:34"},"returnParameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2190,"src":"3998:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2173,"name":"uint256","nodeType":"ElementaryTypeName","src":"3998:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3997:9:34"},"scope":2697,"src":"3941:231:34","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[2709],"body":{"id":2223,"nodeType":"Block","src":"4390:294:34","statements":[{"assignments":[2197],"declarations":[{"constant":false,"id":2197,"mutability":"mutable","name":"currentTotalStaked","nameLocation":"4408:18:34","nodeType":"VariableDeclaration","scope":2223,"src":"4400:26:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2196,"name":"uint256","nodeType":"ElementaryTypeName","src":"4400:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2199,"initialValue":{"id":2198,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"4429:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4400:40:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2200,"name":"currentTotalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"4454:18:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4476:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4454:23:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2206,"nodeType":"IfStatement","src":"4450:86:34","trueBody":{"id":2205,"nodeType":"Block","src":"4479:57:34","statements":[{"expression":{"id":2203,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"4500:25:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2195,"id":2204,"nodeType":"Return","src":"4493:32:34"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2207,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"4552:25:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2208,"name":"lastTimeRewardApplicable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"4583:24:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:26:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2210,"name":"lastUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"4612:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4583:40:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2212,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4582:42:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2213,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"4627:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4582:55:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2215,"name":"SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"4640:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4582:72:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2217,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4581:74:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2218,"name":"currentTotalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"4658:18:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4581:95:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2220,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4580:97:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4552:125:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2195,"id":2222,"nodeType":"Return","src":"4545:132:34"}]},"documentation":{"id":2191,"nodeType":"StructuredDocumentation","src":"4178:146:34","text":"@notice Returns the current reward per stake point.\n @return The sum of the last stored value and the new rewards since the last update"},"functionSelector":"2c9d0b80","id":2224,"implemented":true,"kind":"function","modifiers":[],"name":"rewardPerStakePoint","nameLocation":"4338:19:34","nodeType":"FunctionDefinition","parameters":{"id":2192,"nodeType":"ParameterList","parameters":[],"src":"4357:2:34"},"returnParameters":{"id":2195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2224,"src":"4381:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"4381:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4380:9:34"},"scope":2697,"src":"4329:355:34","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[2716],"body":{"id":2251,"nodeType":"Block","src":"5031:138:34","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2232,"name":"staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"5049:6:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2234,"indexExpression":{"id":2233,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"5056:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5049:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2235,"name":"rewardPerStakePoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"5068:19:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5068:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":2237,"name":"rewardPerStakePointPaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"5092:23:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2239,"indexExpression":{"id":2238,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"5116:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5092:32:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5068:56:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2241,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5067:58:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5049:76:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5048:78:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2244,"name":"SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"5129:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5048:95:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"baseExpression":{"id":2246,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"5146:7:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2248,"indexExpression":{"id":2247,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"5154:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5146:16:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5048:114:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2231,"id":2250,"nodeType":"Return","src":"5041:121:34"}]},"documentation":{"id":2225,"nodeType":"StructuredDocumentation","src":"4690:273:34","text":"@notice Returns the amount of rewards earned by the account.\n @param account The address of the account to check.\n @return The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point."},"functionSelector":"008cc262","id":2252,"implemented":true,"kind":"function","modifiers":[],"name":"earned","nameLocation":"4977:6:34","nodeType":"FunctionDefinition","parameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"account","nameLocation":"4992:7:34","nodeType":"VariableDeclaration","scope":2252,"src":"4984:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2226,"name":"address","nodeType":"ElementaryTypeName","src":"4984:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4983:17:34"},"returnParameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2252,"src":"5022:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2229,"name":"uint256","nodeType":"ElementaryTypeName","src":"5022:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5021:9:34"},"scope":2697,"src":"4968:201:34","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[2721],"body":{"id":2266,"nodeType":"Block","src":"5887:48:34","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2261,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2682],"referencedDeclaration":2682,"src":"5904:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5904:12:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2263,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"5918:9:34","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2260,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"5897:6:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:31:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2265,"nodeType":"ExpressionStatement","src":"5897:31:34"}]},"documentation":{"id":2253,"nodeType":"StructuredDocumentation","src":"5175:630:34","text":"@notice Stakes to the pool.\n @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\n @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\n @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\n @dev Emits a {Staked} event with the staker address, stakeData and stake points.\n @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\n @dev The stakeData is not used in the base implementation, but it is passed to the event for convenience."},"functionSelector":"2d1e0c02","id":2267,"implemented":true,"kind":"function","modifiers":[{"id":2258,"kind":"modifierInvocation","modifierName":{"id":2257,"name":"nonReentrant","nameLocations":["5874:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":4140,"src":"5874:12:34"},"nodeType":"ModifierInvocation","src":"5874:12:34"}],"name":"stake","nameLocation":"5819:5:34","nodeType":"FunctionDefinition","parameters":{"id":2256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2255,"mutability":"mutable","name":"stakeData","nameLocation":"5840:9:34","nodeType":"VariableDeclaration","scope":2267,"src":"5825:24:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2254,"name":"bytes","nodeType":"ElementaryTypeName","src":"5825:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5824:26:34"},"returnParameters":{"id":2259,"nodeType":"ParameterList","parameters":[],"src":"5887:0:34"},"scope":2697,"src":"5810:125:34","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":2310,"nodeType":"Block","src":"6496:287:34","statements":[{"expression":{"arguments":[{"id":2276,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"6520:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2275,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"6506:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6506:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2278,"nodeType":"ExpressionStatement","src":"6506:21:34"},{"assignments":[2280],"declarations":[{"constant":false,"id":2280,"mutability":"mutable","name":"stakePoints","nameLocation":"6545:11:34","nodeType":"VariableDeclaration","scope":2310,"src":"6537:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"6537:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2285,"initialValue":{"arguments":[{"id":2282,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"6573:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2283,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"6581:9:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2281,"name":"_computeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"6559:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,bytes memory) returns (uint256)"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6559:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6537:54:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"6609:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6624:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6609:16:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2290,"name":"InvalidStakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"6627:18:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6627:20:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2286,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6601:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6601:47:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2293,"nodeType":"ExpressionStatement","src":"6601:47:34"},{"expression":{"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2294,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"6658:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2295,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"6673:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6658:26:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2297,"nodeType":"ExpressionStatement","src":"6658:26:34"},{"expression":{"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2298,"name":"staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"6694:6:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2300,"indexExpression":{"id":2299,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"6701:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6694:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2301,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"6712:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6694:29:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2303,"nodeType":"ExpressionStatement","src":"6694:29:34"},{"eventCall":{"arguments":[{"id":2305,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"6745:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2306,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"6753:9:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2307,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"6764:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2304,"name":"Staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"6738:6:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256)"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6738:38:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2309,"nodeType":"EmitStatement","src":"6733:43:34"}]},"documentation":{"id":2268,"nodeType":"StructuredDocumentation","src":"5941:477:34","text":"@notice Stakes to the pool.\n @param staker The address of the staker.\n @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\n @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\n @dev Emits a {Staked} event with the staker address, stakeData and stake points.\n @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract."},"id":2311,"implemented":true,"kind":"function","modifiers":[],"name":"_stake","nameLocation":"6432:6:34","nodeType":"FunctionDefinition","parameters":{"id":2273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2270,"mutability":"mutable","name":"staker","nameLocation":"6447:6:34","nodeType":"VariableDeclaration","scope":2311,"src":"6439:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2269,"name":"address","nodeType":"ElementaryTypeName","src":"6439:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2272,"mutability":"mutable","name":"stakeData","nameLocation":"6468:9:34","nodeType":"VariableDeclaration","scope":2311,"src":"6455:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2271,"name":"bytes","nodeType":"ElementaryTypeName","src":"6455:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6438:40:34"},"returnParameters":{"id":2274,"nodeType":"ParameterList","parameters":[],"src":"6496:0:34"},"scope":2697,"src":"6423:360:34","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2726],"body":{"id":2325,"nodeType":"Block","src":"7635:54:34","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2320,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2682],"referencedDeclaration":2682,"src":"7655:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7655:12:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2322,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"7669:12:34","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2319,"name":"_withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"7645:9:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7645:37:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2324,"nodeType":"ExpressionStatement","src":"7645:37:34"}]},"documentation":{"id":2312,"nodeType":"StructuredDocumentation","src":"6789:766:34","text":"@notice Withdraws from the pool.\n @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\n @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\n @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\n @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\n @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\n @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\n @dev The withdrawData is not used in the base implementation, but it is passed to the event for convenience."},"functionSelector":"0968f264","id":2326,"implemented":true,"kind":"function","modifiers":[{"id":2317,"kind":"modifierInvocation","modifierName":{"id":2316,"name":"nonReentrant","nameLocations":["7622:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":4140,"src":"7622:12:34"},"nodeType":"ModifierInvocation","src":"7622:12:34"}],"name":"withdraw","nameLocation":"7569:8:34","nodeType":"FunctionDefinition","parameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"withdrawData","nameLocation":"7593:12:34","nodeType":"VariableDeclaration","scope":2326,"src":"7578:27:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2313,"name":"bytes","nodeType":"ElementaryTypeName","src":"7578:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7577:29:34"},"returnParameters":{"id":2318,"nodeType":"ParameterList","parameters":[],"src":"7635:0:34"},"scope":2697,"src":"7560:129:34","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2389,"nodeType":"Block","src":"8389:539:34","statements":[{"expression":{"arguments":[{"id":2335,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"8413:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2334,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"8399:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2337,"nodeType":"ExpressionStatement","src":"8399:21:34"},{"assignments":[2339],"declarations":[{"constant":false,"id":2339,"mutability":"mutable","name":"stakePoints","nameLocation":"8438:11:34","nodeType":"VariableDeclaration","scope":2389,"src":"8430:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2338,"name":"uint256","nodeType":"ElementaryTypeName","src":"8430:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2344,"initialValue":{"arguments":[{"id":2341,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"8469:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2342,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2331,"src":"8477:12:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2340,"name":"_computeWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"8452:16:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,bytes memory) returns (uint256)"}},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8452:38:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8430:60:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2346,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"8508:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8523:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8508:16:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2349,"name":"InvalidWithdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"8526:21:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8526:23:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2345,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8500:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8500:50:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2352,"nodeType":"ExpressionStatement","src":"8500:50:34"},{"assignments":[2354],"declarations":[{"constant":false,"id":2354,"mutability":"mutable","name":"currentStaked","nameLocation":"8568:13:34","nodeType":"VariableDeclaration","scope":2389,"src":"8560:21:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2353,"name":"uint256","nodeType":"ElementaryTypeName","src":"8560:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2358,"initialValue":{"baseExpression":{"id":2355,"name":"staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"8584:6:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2357,"indexExpression":{"id":2356,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"8591:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8584:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8560:38:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2360,"name":"currentStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"8616:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2361,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"8633:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8616:28:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":2364,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"8661:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2365,"name":"currentStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"8669:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2366,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"8684:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2363,"name":"NotEnoughStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"8646:14:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8646:50:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2359,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8608:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8608:89:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2369,"nodeType":"ExpressionStatement","src":"8608:89:34"},{"id":2382,"nodeType":"UncheckedBlock","src":"8707:156:34","statements":[{"expression":{"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2370,"name":"staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"8768:6:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2372,"indexExpression":{"id":2371,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"8775:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8768:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2373,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"8786:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8768:29:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2375,"nodeType":"ExpressionStatement","src":"8768:29:34"},{"expression":{"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2376,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"8811:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"currentStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"8825:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2378,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"8841:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8825:27:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8811:41:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2381,"nodeType":"ExpressionStatement","src":"8811:41:34"}]},{"eventCall":{"arguments":[{"id":2384,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"8887:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2385,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2331,"src":"8895:12:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2386,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"8909:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2383,"name":"Withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"8877:9:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256)"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8877:44:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2388,"nodeType":"EmitStatement","src":"8872:49:34"}]},"documentation":{"id":2327,"nodeType":"StructuredDocumentation","src":"7695:610:34","text":"@notice Withdraws from the pool.\n @param staker The address of the staker.\n @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\n @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\n @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\n @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\n @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract."},"id":2390,"implemented":true,"kind":"function","modifiers":[],"name":"_withdraw","nameLocation":"8319:9:34","nodeType":"FunctionDefinition","parameters":{"id":2332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"staker","nameLocation":"8337:6:34","nodeType":"VariableDeclaration","scope":2390,"src":"8329:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2328,"name":"address","nodeType":"ElementaryTypeName","src":"8329:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2331,"mutability":"mutable","name":"withdrawData","nameLocation":"8358:12:34","nodeType":"VariableDeclaration","scope":2390,"src":"8345:25:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2330,"name":"bytes","nodeType":"ElementaryTypeName","src":"8345:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8328:43:34"},"returnParameters":{"id":2333,"nodeType":"ParameterList","parameters":[],"src":"8389:0:34"},"scope":2697,"src":"8310:618:34","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2729],"body":{"id":2433,"nodeType":"Block","src":"9224:309:34","statements":[{"assignments":[2395],"declarations":[{"constant":false,"id":2395,"mutability":"mutable","name":"staker","nameLocation":"9242:6:34","nodeType":"VariableDeclaration","scope":2433,"src":"9234:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2394,"name":"address","nodeType":"ElementaryTypeName","src":"9234:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2398,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2396,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2682],"referencedDeclaration":2682,"src":"9251:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9251:12:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9234:29:34"},{"expression":{"arguments":[{"id":2400,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9287:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2399,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"9273:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9273:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2402,"nodeType":"ExpressionStatement","src":"9273:21:34"},{"assignments":[2404],"declarations":[{"constant":false,"id":2404,"mutability":"mutable","name":"reward","nameLocation":"9312:6:34","nodeType":"VariableDeclaration","scope":2433,"src":"9304:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2403,"name":"uint256","nodeType":"ElementaryTypeName","src":"9304:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2408,"initialValue":{"arguments":[{"id":2406,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9328:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2405,"name":"earned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"9321:6:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9321:14:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9304:31:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2409,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"9349:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9359:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9349:11:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2432,"nodeType":"IfStatement","src":"9345:182:34","trueBody":{"id":2431,"nodeType":"Block","src":"9362:165:34","statements":[{"expression":{"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2412,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"9376:7:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2414,"indexExpression":{"id":2413,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9384:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9376:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9394:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9376:19:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2417,"nodeType":"ExpressionStatement","src":"9376:19:34"},{"assignments":[2419],"declarations":[{"constant":false,"id":2419,"mutability":"mutable","name":"claimData","nameLocation":"9422:9:34","nodeType":"VariableDeclaration","scope":2431,"src":"9409:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2418,"name":"bytes","nodeType":"ElementaryTypeName","src":"9409:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2424,"initialValue":{"arguments":[{"id":2421,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9448:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2422,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"9456:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2420,"name":"_computeClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"9434:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,uint256) returns (bytes memory)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9434:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9409:54:34"},{"eventCall":{"arguments":[{"id":2426,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9490:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2427,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"9498:9:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2428,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"9509:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2425,"name":"Claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"9482:7:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256)"}},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9482:34:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2430,"nodeType":"EmitStatement","src":"9477:39:34"}]}}]},"documentation":{"id":2391,"nodeType":"StructuredDocumentation","src":"8934:253:34","text":"@notice Claims the rewards for the sender.\n @dev Emits a {Claimed} event with the staker address, claimData and reward.\n @dev The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract."},"functionSelector":"4e71d92d","id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"9201:5:34","nodeType":"FunctionDefinition","parameters":{"id":2392,"nodeType":"ParameterList","parameters":[],"src":"9206:2:34"},"returnParameters":{"id":2393,"nodeType":"ParameterList","parameters":[],"src":"9224:0:34"},"scope":2697,"src":"9192:341:34","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2736],"body":{"id":2631,"nodeType":"Block","src":"10572:1928:34","statements":[{"assignments":[2443],"declarations":[{"constant":false,"id":2443,"mutability":"mutable","name":"rewarder","nameLocation":"10590:8:34","nodeType":"VariableDeclaration","scope":2631,"src":"10582:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2442,"name":"address","nodeType":"ElementaryTypeName","src":"10582:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2446,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2444,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2682],"referencedDeclaration":2682,"src":"10601:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10601:12:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10582:31:34"},{"expression":{"arguments":[{"id":2452,"name":"REWARDER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"10668:13:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2453,"name":"rewarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"10683:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2447,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"10623:20:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$604_$","typeString":"type(library AccessControlStorage)"}},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10644:6:34","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":603,"src":"10623:27:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10623:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$369_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":2451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10653:14:34","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":567,"src":"10623:44:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$369_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$369_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10623:69:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2455,"nodeType":"ExpressionStatement","src":"10623:69:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2457,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"10711:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10721:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10711:11:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2460,"name":"InvalidRewardAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2100,"src":"10724:19:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10724:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2456,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10703:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10703:43:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2463,"nodeType":"ExpressionStatement","src":"10703:43:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2465,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"10764:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10776:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10764:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2468,"name":"InvalidDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"10779:15:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10779:17:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2464,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10756:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10756:41:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2471,"nodeType":"ExpressionStatement","src":"10756:41:34"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10830:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10822:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2473,"name":"address","nodeType":"ElementaryTypeName","src":"10822:7:34","typeDescriptions":{}}},"id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10822:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2472,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"10808:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10808:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2478,"nodeType":"ExpressionStatement","src":"10808:25:34"},{"assignments":[2480],"declarations":[{"constant":false,"id":2480,"mutability":"mutable","name":"dust","nameLocation":"10852:4:34","nodeType":"VariableDeclaration","scope":2631,"src":"10844:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2479,"name":"uint256","nodeType":"ElementaryTypeName","src":"10844:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2481,"nodeType":"VariableDeclarationStatement","src":"10844:12:34"},{"assignments":[2483],"declarations":[{"constant":false,"id":2483,"mutability":"mutable","name":"currentDistributionEnd","nameLocation":"10874:22:34","nodeType":"VariableDeclaration","scope":2631,"src":"10866:30:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2482,"name":"uint256","nodeType":"ElementaryTypeName","src":"10866:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2485,"initialValue":{"id":2484,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"10899:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10866:48:34"},{"assignments":[2487],"declarations":[{"constant":false,"id":2487,"mutability":"mutable","name":"newDisributionEnd","nameLocation":"10932:17:34","nodeType":"VariableDeclaration","scope":2631,"src":"10924:25:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2486,"name":"uint256","nodeType":"ElementaryTypeName","src":"10924:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2492,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2488,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10952:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10958:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"10952:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2490,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"10970:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10952:26:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10924:54:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2493,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10993:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10999:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"10993:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2495,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"11012:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10993:41:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2611,"nodeType":"Block","src":"11360:982:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2528,"name":"newDisributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"11378:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2529,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"11399:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11378:43:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2609,"nodeType":"Block","src":"11839:493:34","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2566,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11933:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2567,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11942:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11933:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11954:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11933:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":2572,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11983:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2573,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11991:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2571,"name":"RewardTooSmallForDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"11957:25:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11957:43:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2565,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11925:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11925:76:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2576,"nodeType":"ExpressionStatement","src":"11925:76:34"},{"assignments":[2578],"declarations":[{"constant":false,"id":2578,"mutability":"mutable","name":"remainingReward","nameLocation":"12027:15:34","nodeType":"VariableDeclaration","scope":2609,"src":"12019:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2577,"name":"uint256","nodeType":"ElementaryTypeName","src":"12019:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2586,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2579,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"12045:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2580,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"12059:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":2581,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12084:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12090:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"12084:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12059:40:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2584,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12058:42:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12045:55:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12019:81:34"},{"assignments":[2588],"declarations":[{"constant":false,"id":2588,"mutability":"mutable","name":"totalReward","nameLocation":"12126:11:34","nodeType":"VariableDeclaration","scope":2609,"src":"12118:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2587,"name":"uint256","nodeType":"ElementaryTypeName","src":"12118:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2592,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2589,"name":"remainingReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"12140:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2590,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12158:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12140:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12118:46:34"},{"expression":{"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2593,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"12182:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"totalReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"12195:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2595,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"12209:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12195:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12182:35:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2598,"nodeType":"ExpressionStatement","src":"12182:35:34"},{"expression":{"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2599,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"12235:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"totalReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"12242:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2601,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"12256:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12242:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12235:29:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2604,"nodeType":"ExpressionStatement","src":"12235:29:34"},{"expression":{"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2605,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"12282:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2606,"name":"newDisributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"12300:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12282:35:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2608,"nodeType":"ExpressionStatement","src":"12282:35:34"}]},"id":2610,"nodeType":"IfStatement","src":"11374:958:34","trueBody":{"id":2564,"nodeType":"Block","src":"11423:410:34","statements":[{"expression":{"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2531,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11510:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2532,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"11521:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":2533,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"11546:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11552:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"11546:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11521:40:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11510:51:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2537,"nodeType":"ExpressionStatement","src":"11510:51:34"},{"assignments":[2539],"declarations":[{"constant":false,"id":2539,"mutability":"mutable","name":"additionalRewardRate","nameLocation":"11587:20:34","nodeType":"VariableDeclaration","scope":2564,"src":"11579:28:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2538,"name":"uint256","nodeType":"ElementaryTypeName","src":"11579:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2543,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2540,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11610:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2541,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11619:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11610:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11579:48:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2545,"name":"additionalRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"11653:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11677:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11653:25:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":2549,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11706:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2550,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11714:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2548,"name":"RewardTooSmallForDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"11680:25:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11680:43:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11645:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11645:79:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2553,"nodeType":"ExpressionStatement","src":"11645:79:34"},{"expression":{"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2554,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"11742:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2555,"name":"additionalRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"11756:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11742:34:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2557,"nodeType":"ExpressionStatement","src":"11742:34:34"},{"expression":{"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2558,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"11794:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2559,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11801:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2560,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11810:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11801:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11794:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2563,"nodeType":"ExpressionStatement","src":"11794:24:34"}]}}]},"id":2612,"nodeType":"IfStatement","src":"10989:1353:34","trueBody":{"id":2527,"nodeType":"Block","src":"11036:318:34","statements":[{"assignments":[2498],"declarations":[{"constant":false,"id":2498,"mutability":"mutable","name":"newRewardRate","nameLocation":"11097:13:34","nodeType":"VariableDeclaration","scope":2527,"src":"11089:21:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2497,"name":"uint256","nodeType":"ElementaryTypeName","src":"11089:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2502,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2499,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11113:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2500,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11122:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11113:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11089:41:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2504,"name":"newRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"11152:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11169:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11152:18:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":2508,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11198:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2509,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11206:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2507,"name":"RewardTooSmallForDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"11172:25:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11172:43:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":2503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11144:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11144:72:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2512,"nodeType":"ExpressionStatement","src":"11144:72:34"},{"expression":{"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2513,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"11230:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2514,"name":"newRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"11243:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11230:26:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2516,"nodeType":"ExpressionStatement","src":"11230:26:34"},{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"11270:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2518,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11277:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2519,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"11286:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11277:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11270:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2522,"nodeType":"ExpressionStatement","src":"11270:24:34"},{"expression":{"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2523,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"11308:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2524,"name":"newDisributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"11326:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11308:35:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2526,"nodeType":"ExpressionStatement","src":"11308:35:34"}]}},{"expression":{"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2613,"name":"lastUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"12351:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2614,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12365:5:34","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12371:9:34","memberName":"timestamp","nodeType":"MemberAccess","src":"12365:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12351:29:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2617,"nodeType":"ExpressionStatement","src":"12351:29:34"},{"expression":{"arguments":[{"id":2619,"name":"rewarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"12409:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2620,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12419:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2621,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"12427:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2618,"name":"_computeAddReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"12391:17:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:41:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2623,"nodeType":"ExpressionStatement","src":"12391:41:34"},{"eventCall":{"arguments":[{"id":2625,"name":"rewarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"12460:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2626,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12470:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2627,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"12478:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2628,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"12488:4:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2624,"name":"RewardAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"12448:11:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12448:45:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2630,"nodeType":"EmitStatement","src":"12443:50:34"}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"9539:952:34","text":"@notice Adds rewards to the pool.\n @notice If there is an ongoing distribution, the new rewards are added to the current distribution:\n @notice - If the new distribution ends before the current one, the new rewards are added to the current distribution.\n @notice - If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\n @param reward The amount of rewards to be added.\n @param duration The duration of the rewards distribution.\n @dev Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.\n @dev Reverts with {InvalidRewardAmount} if the reward amount is 0.\n @dev Reverts with {InvalidDuration} if the duration is 0.\n @dev Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.\n @dev Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust."},"functionSelector":"75c93bb9","id":2632,"implemented":true,"kind":"function","modifiers":[],"name":"addReward","nameLocation":"10505:9:34","nodeType":"FunctionDefinition","parameters":{"id":2440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"reward","nameLocation":"10523:6:34","nodeType":"VariableDeclaration","scope":2632,"src":"10515:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2436,"name":"uint256","nodeType":"ElementaryTypeName","src":"10515:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"duration","nameLocation":"10539:8:34","nodeType":"VariableDeclaration","scope":2632,"src":"10531:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2438,"name":"uint256","nodeType":"ElementaryTypeName","src":"10531:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10514:34:34"},"returnParameters":{"id":2441,"nodeType":"ParameterList","parameters":[],"src":"10572:0:34"},"scope":2697,"src":"10496:2004:34","stateMutability":"payable","virtual":true,"visibility":"public"},{"id":2641,"implemented":false,"kind":"function","modifiers":[],"name":"_computeStake","nameLocation":"12515:13:34","nodeType":"FunctionDefinition","parameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2634,"mutability":"mutable","name":"sender","nameLocation":"12537:6:34","nodeType":"VariableDeclaration","scope":2641,"src":"12529:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2633,"name":"address","nodeType":"ElementaryTypeName","src":"12529:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2636,"mutability":"mutable","name":"stakeData","nameLocation":"12558:9:34","nodeType":"VariableDeclaration","scope":2641,"src":"12545:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2635,"name":"bytes","nodeType":"ElementaryTypeName","src":"12545:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12528:40:34"},"returnParameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"stakePoints","nameLocation":"12603:11:34","nodeType":"VariableDeclaration","scope":2641,"src":"12595:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"12595:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12594:21:34"},"scope":2697,"src":"12506:110:34","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":2650,"implemented":false,"kind":"function","modifiers":[],"name":"_computeWithdraw","nameLocation":"12631:16:34","nodeType":"FunctionDefinition","parameters":{"id":2646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2643,"mutability":"mutable","name":"sender","nameLocation":"12656:6:34","nodeType":"VariableDeclaration","scope":2650,"src":"12648:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2642,"name":"address","nodeType":"ElementaryTypeName","src":"12648:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2645,"mutability":"mutable","name":"withdrawData","nameLocation":"12677:12:34","nodeType":"VariableDeclaration","scope":2650,"src":"12664:25:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2644,"name":"bytes","nodeType":"ElementaryTypeName","src":"12664:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12647:43:34"},"returnParameters":{"id":2649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2648,"mutability":"mutable","name":"stakePoints","nameLocation":"12725:11:34","nodeType":"VariableDeclaration","scope":2650,"src":"12717:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2647,"name":"uint256","nodeType":"ElementaryTypeName","src":"12717:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12716:21:34"},"scope":2697,"src":"12622:116:34","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":2659,"implemented":false,"kind":"function","modifiers":[],"name":"_computeClaim","nameLocation":"12753:13:34","nodeType":"FunctionDefinition","parameters":{"id":2655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2652,"mutability":"mutable","name":"sender","nameLocation":"12775:6:34","nodeType":"VariableDeclaration","scope":2659,"src":"12767:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2651,"name":"address","nodeType":"ElementaryTypeName","src":"12767:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2654,"mutability":"mutable","name":"reward","nameLocation":"12791:6:34","nodeType":"VariableDeclaration","scope":2659,"src":"12783:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2653,"name":"uint256","nodeType":"ElementaryTypeName","src":"12783:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12766:32:34"},"returnParameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"claimData","nameLocation":"12838:9:34","nodeType":"VariableDeclaration","scope":2659,"src":"12825:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2656,"name":"bytes","nodeType":"ElementaryTypeName","src":"12825:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12824:24:34"},"scope":2697,"src":"12744:105:34","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":2668,"implemented":false,"kind":"function","modifiers":[],"name":"_computeAddReward","nameLocation":"12864:17:34","nodeType":"FunctionDefinition","parameters":{"id":2666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2661,"mutability":"mutable","name":"sender","nameLocation":"12890:6:34","nodeType":"VariableDeclaration","scope":2668,"src":"12882:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2660,"name":"address","nodeType":"ElementaryTypeName","src":"12882:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2663,"mutability":"mutable","name":"reward","nameLocation":"12906:6:34","nodeType":"VariableDeclaration","scope":2668,"src":"12898:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2662,"name":"uint256","nodeType":"ElementaryTypeName","src":"12898:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2665,"mutability":"mutable","name":"dust","nameLocation":"12922:4:34","nodeType":"VariableDeclaration","scope":2668,"src":"12914:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2664,"name":"uint256","nodeType":"ElementaryTypeName","src":"12914:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12881:46:34"},"returnParameters":{"id":2667,"nodeType":"ParameterList","parameters":[],"src":"12944:0:34"},"scope":2697,"src":"12855:90:34","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1425,4067],"body":{"id":2681,"nodeType":"Block","src":"13110:65:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2677,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"13127:28:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1478_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13156:10:34","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":1425,"src":"13127:39:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13127:41:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2676,"id":2680,"nodeType":"Return","src":"13120:48:34"}]},"documentation":{"id":2669,"nodeType":"StructuredDocumentation","src":"12951:44:34","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2682,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"13009:10:34","nodeType":"FunctionDefinition","overrides":{"id":2673,"nodeType":"OverrideSpecifier","overrides":[{"id":2671,"name":"Context","nameLocations":["13053:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":4085,"src":"13053:7:34"},{"id":2672,"name":"ForwarderRegistryContextBase","nameLocations":["13062:28:34"],"nodeType":"IdentifierPath","referencedDeclaration":1478,"src":"13062:28:34"}],"src":"13044:47:34"},"parameters":{"id":2670,"nodeType":"ParameterList","parameters":[],"src":"13019:2:34"},"returnParameters":{"id":2676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2682,"src":"13101:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2674,"name":"address","nodeType":"ElementaryTypeName","src":"13101:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13100:9:34"},"scope":2697,"src":"13000:175:34","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1477,4076],"body":{"id":2695,"nodeType":"Block","src":"13345:63:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2691,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"13362:28:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1478_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13391:8:34","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":1477,"src":"13362:37:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13362:39:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2690,"id":2694,"nodeType":"Return","src":"13355:46:34"}]},"documentation":{"id":2683,"nodeType":"StructuredDocumentation","src":"13181:44:34","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2696,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"13239:8:34","nodeType":"FunctionDefinition","overrides":{"id":2687,"nodeType":"OverrideSpecifier","overrides":[{"id":2685,"name":"Context","nameLocations":["13281:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":4085,"src":"13281:7:34"},{"id":2686,"name":"ForwarderRegistryContextBase","nameLocations":["13290:28:34"],"nodeType":"IdentifierPath","referencedDeclaration":1478,"src":"13290:28:34"}],"src":"13272:47:34"},"parameters":{"id":2684,"nodeType":"ParameterList","parameters":[],"src":"13247:2:34"},"returnParameters":{"id":2690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2696,"src":"13329:14:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2688,"name":"bytes","nodeType":"ElementaryTypeName","src":"13329:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13328:16:34"},"scope":2697,"src":"13230:178:34","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2698,"src":"1841:11569:34","usedErrors":[7,236,259,897,1790,2088,2090,2098,2100,2102,2108,3398,4095,4098,4121],"usedEvents":[282,291,300,2060,2068,2076,2086]}],"src":"32:13379:34"},"id":34},"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol","exportedSymbols":{"ILinearPool":[2737]},"id":2738,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2699,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:35"},{"abstract":false,"baseContracts":[],"canonicalName":"ILinearPool","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2737,"linearizedBaseContracts":[2737],"name":"ILinearPool","nameLocation":"67:11:35","nodeType":"ContractDefinition","nodes":[{"functionSelector":"80faa57d","id":2704,"implemented":false,"kind":"function","modifiers":[],"name":"lastTimeRewardApplicable","nameLocation":"94:24:35","nodeType":"FunctionDefinition","parameters":{"id":2700,"nodeType":"ParameterList","parameters":[],"src":"118:2:35"},"returnParameters":{"id":2703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2704,"src":"144:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2701,"name":"uint256","nodeType":"ElementaryTypeName","src":"144:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"143:9:35"},"scope":2737,"src":"85:68:35","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2c9d0b80","id":2709,"implemented":false,"kind":"function","modifiers":[],"name":"rewardPerStakePoint","nameLocation":"168:19:35","nodeType":"FunctionDefinition","parameters":{"id":2705,"nodeType":"ParameterList","parameters":[],"src":"187:2:35"},"returnParameters":{"id":2708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2709,"src":"213:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2706,"name":"uint256","nodeType":"ElementaryTypeName","src":"213:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"212:9:35"},"scope":2737,"src":"159:63:35","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"008cc262","id":2716,"implemented":false,"kind":"function","modifiers":[],"name":"earned","nameLocation":"237:6:35","nodeType":"FunctionDefinition","parameters":{"id":2712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2711,"mutability":"mutable","name":"account","nameLocation":"252:7:35","nodeType":"VariableDeclaration","scope":2716,"src":"244:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2710,"name":"address","nodeType":"ElementaryTypeName","src":"244:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"243:17:35"},"returnParameters":{"id":2715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2716,"src":"284:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2713,"name":"uint256","nodeType":"ElementaryTypeName","src":"284:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"283:9:35"},"scope":2737,"src":"228:65:35","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2d1e0c02","id":2721,"implemented":false,"kind":"function","modifiers":[],"name":"stake","nameLocation":"308:5:35","nodeType":"FunctionDefinition","parameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2718,"mutability":"mutable","name":"stakeData","nameLocation":"329:9:35","nodeType":"VariableDeclaration","scope":2721,"src":"314:24:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2717,"name":"bytes","nodeType":"ElementaryTypeName","src":"314:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"313:26:35"},"returnParameters":{"id":2720,"nodeType":"ParameterList","parameters":[],"src":"356:0:35"},"scope":2737,"src":"299:58:35","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"0968f264","id":2726,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"372:8:35","nodeType":"FunctionDefinition","parameters":{"id":2724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2723,"mutability":"mutable","name":"withdrawData","nameLocation":"396:12:35","nodeType":"VariableDeclaration","scope":2726,"src":"381:27:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2722,"name":"bytes","nodeType":"ElementaryTypeName","src":"381:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"380:29:35"},"returnParameters":{"id":2725,"nodeType":"ParameterList","parameters":[],"src":"418:0:35"},"scope":2737,"src":"363:56:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4e71d92d","id":2729,"implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"434:5:35","nodeType":"FunctionDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[],"src":"439:2:35"},"returnParameters":{"id":2728,"nodeType":"ParameterList","parameters":[],"src":"450:0:35"},"scope":2737,"src":"425:26:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"75c93bb9","id":2736,"implemented":false,"kind":"function","modifiers":[],"name":"addReward","nameLocation":"466:9:35","nodeType":"FunctionDefinition","parameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"reward","nameLocation":"484:6:35","nodeType":"VariableDeclaration","scope":2736,"src":"476:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2730,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2733,"mutability":"mutable","name":"duration","nameLocation":"500:8:35","nodeType":"VariableDeclaration","scope":2736,"src":"492:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"492:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"475:34:35"},"returnParameters":{"id":2735,"nodeType":"ParameterList","parameters":[],"src":"526:0:35"},"scope":2737,"src":"457:70:35","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2738,"src":"57:472:35","usedErrors":[],"usedEvents":[]}],"src":"32:498:35"},"id":35},"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol","exportedSymbols":{"ERC20Receiver":[3064],"ERC20StakingLinearPool":[3029],"IERC20":[3386],"IForwarderRegistry":[1506],"LinearPool":[2697],"SafeERC20":[3795],"TokenRecoveryBase":[1718]},"id":3030,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2739,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:36"},{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","file":"./../LinearPool.sol","id":2741,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3030,"sourceUnit":2698,"src":"57:47:36","symbolAliases":[{"foreign":{"id":2740,"name":"LinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"65:10:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","file":"./../../../token/ERC20/ERC20Receiver.sol","id":2743,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3030,"sourceUnit":3065,"src":"105:71:36","symbolAliases":[{"foreign":{"id":2742,"name":"ERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"113:13:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./../../../security/base/TokenRecoveryBase.sol","id":2745,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3030,"sourceUnit":1719,"src":"177:81:36","symbolAliases":[{"foreign":{"id":2744,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"185:17:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":2748,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3030,"sourceUnit":3796,"src":"259:90:36","symbolAliases":[{"foreign":{"id":2746,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"267:9:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2747,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"278:6:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../../../metatx/interfaces/IForwarderRegistry.sol","id":2750,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3030,"sourceUnit":1507,"src":"350:87:36","symbolAliases":[{"foreign":{"id":2749,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"358:18:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2752,"name":"LinearPool","nameLocations":["580:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":2697,"src":"580:10:36"},"id":2753,"nodeType":"InheritanceSpecifier","src":"580:10:36"},{"baseName":{"id":2754,"name":"ERC20Receiver","nameLocations":["592:13:36"],"nodeType":"IdentifierPath","referencedDeclaration":3064,"src":"592:13:36"},"id":2755,"nodeType":"InheritanceSpecifier","src":"592:13:36"}],"canonicalName":"ERC20StakingLinearPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":2751,"nodeType":"StructuredDocumentation","src":"439:97:36","text":"@title ERC20StakingLinearPool\n @notice A linear pool that allows staking of ERC20 tokens."},"fullyImplemented":false,"id":3029,"linearizedBaseContracts":[3029,3064,2697,1350,1490,1478,1603,4176,22,55,892,909,3082,227,1718,179,4085,341,1764,325,2737],"name":"ERC20StakingLinearPool","nameLocation":"554:22:36","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2759,"libraryName":{"id":2756,"name":"SafeERC20","nameLocations":["618:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":3795,"src":"618:9:36"},"nodeType":"UsingForDirective","src":"612:27:36","typeName":{"id":2758,"nodeType":"UserDefinedTypeName","pathNode":{"id":2757,"name":"IERC20","nameLocations":["632:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"632:6:36"},"referencedDeclaration":3386,"src":"632:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"0479d644","id":2762,"mutability":"immutable","name":"STAKING_TOKEN","nameLocation":"669:13:36","nodeType":"VariableDeclaration","scope":3029,"src":"645:37:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":2761,"nodeType":"UserDefinedTypeName","pathNode":{"id":2760,"name":"IERC20","nameLocations":["645:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"645:6:36"},"referencedDeclaration":3386,"src":"645:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"public"},{"errorSelector":"c1ab6dc1","id":2764,"name":"InvalidToken","nameLocation":"695:12:36","nodeType":"ErrorDefinition","parameters":{"id":2763,"nodeType":"ParameterList","parameters":[],"src":"707:2:36"},"src":"689:21:36"},{"errorSelector":"15c38d3e","id":2770,"name":"InvalidRecoveryAmount","nameLocation":"721:21:36","nodeType":"ErrorDefinition","parameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2766,"mutability":"mutable","name":"requested","nameLocation":"751:9:36","nodeType":"VariableDeclaration","scope":2770,"src":"743:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"743:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2768,"mutability":"mutable","name":"recoverable","nameLocation":"770:11:36","nodeType":"VariableDeclaration","scope":2770,"src":"762:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2767,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"742:40:36"},"src":"715:68:36"},{"body":{"id":2786,"nodeType":"Block","src":"890:45:36","statements":[{"expression":{"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2782,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"900:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2783,"name":"stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"916:12:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"src":"900:28:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":2785,"nodeType":"ExpressionStatement","src":"900:28:36"}]},"id":2787,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2779,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"871:17:36","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"id":2780,"kind":"baseConstructorSpecifier","modifierName":{"id":2778,"name":"LinearPool","nameLocations":["860:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":2697,"src":"860:10:36"},"nodeType":"ModifierInvocation","src":"860:29:36"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2773,"mutability":"mutable","name":"stakingToken","nameLocation":"808:12:36","nodeType":"VariableDeclaration","scope":2787,"src":"801:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":2772,"nodeType":"UserDefinedTypeName","pathNode":{"id":2771,"name":"IERC20","nameLocations":["801:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"801:6:36"},"referencedDeclaration":3386,"src":"801:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2776,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"841:17:36","nodeType":"VariableDeclaration","scope":2787,"src":"822:36:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":2775,"nodeType":"UserDefinedTypeName","pathNode":{"id":2774,"name":"IForwarderRegistry","nameLocations":["822:18:36"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"822:18:36"},"referencedDeclaration":1506,"src":"822:18:36","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"800:59:36"},"returnParameters":{"id":2781,"nodeType":"ParameterList","parameters":[],"src":"890:0:36"},"scope":3029,"src":"789:146:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3081],"body":{"id":2833,"nodeType":"Block","src":"1417:236:36","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2802,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1431:3:36","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:6:36","memberName":"sender","nodeType":"MemberAccess","src":"1431:10:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2806,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"1453:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}],"id":2805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1445:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2804,"name":"address","nodeType":"ElementaryTypeName","src":"1445:7:36","typeDescriptions":{}}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1445:22:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1431:36:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2812,"nodeType":"IfStatement","src":"1427:63:36","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2809,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"1476:12:36","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1476:14:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2811,"nodeType":"RevertStatement","src":"1469:21:36"}},{"assignments":[2814],"declarations":[{"constant":false,"id":2814,"mutability":"mutable","name":"requiresTransfer","nameLocation":"1505:16:36","nodeType":"VariableDeclaration","scope":2833,"src":"1500:21:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2813,"name":"bool","nodeType":"ElementaryTypeName","src":"1500:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2816,"initialValue":{"hexValue":"66616c7365","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1524:5:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"1500:29:36"},{"expression":{"arguments":[{"id":2818,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"1546:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2821,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"1563:16:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":2824,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"1592:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2822,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1581:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1585:6:36","memberName":"encode","nodeType":"MemberAccess","src":"1581:10:36","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:17:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2819,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1552:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1556:6:36","memberName":"encode","nodeType":"MemberAccess","src":"1552:10:36","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1552:47:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2817,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1539:6:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1539:61:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2828,"nodeType":"ExpressionStatement","src":"1539:61:36"},{"expression":{"expression":{"expression":{"id":2829,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1617:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$3029","typeString":"contract ERC20StakingLinearPool"}},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1622:15:36","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":2834,"src":"1617:20:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1638:8:36","memberName":"selector","nodeType":"MemberAccess","src":"1617:29:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2801,"id":2832,"nodeType":"Return","src":"1610:36:36"}]},"documentation":{"id":2788,"nodeType":"StructuredDocumentation","src":"941:349:36","text":"@notice Callback called when the contract receives ERC20 tokens via the IERC20SafeTransfers functions.\n @param from The address of the sender.\n @param value The amount of tokens received.\n @return bytes4 The function selector of the callback.\n @dev Reverts  with {InvalidToken} if the sender is not the staking token."},"functionSelector":"4fc35859","id":2834,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"1304:15:36","nodeType":"FunctionDefinition","overrides":{"id":2798,"nodeType":"OverrideSpecifier","overrides":[],"src":"1391:8:36"},"parameters":{"id":2797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2834,"src":"1320:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2789,"name":"address","nodeType":"ElementaryTypeName","src":"1320:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2792,"mutability":"mutable","name":"from","nameLocation":"1337:4:36","nodeType":"VariableDeclaration","scope":2834,"src":"1329:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2791,"name":"address","nodeType":"ElementaryTypeName","src":"1329:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2794,"mutability":"mutable","name":"value","nameLocation":"1351:5:36","nodeType":"VariableDeclaration","scope":2834,"src":"1343:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2793,"name":"uint256","nodeType":"ElementaryTypeName","src":"1343:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2834,"src":"1358:14:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2795,"name":"bytes","nodeType":"ElementaryTypeName","src":"1358:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1319:54:36"},"returnParameters":{"id":2801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2834,"src":"1409:6:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2799,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1409:6:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1408:8:36"},"scope":3029,"src":"1295:358:36","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2267],"body":{"id":2855,"nodeType":"Block","src":"1848:156:36","statements":[{"assignments":[2842],"declarations":[{"constant":false,"id":2842,"mutability":"mutable","name":"requiresTransfer","nameLocation":"1903:16:36","nodeType":"VariableDeclaration","scope":2855,"src":"1898:21:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2841,"name":"bool","nodeType":"ElementaryTypeName","src":"1898:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2844,"initialValue":{"hexValue":"74727565","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1922:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"1898:28:36"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2846,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2682],"referencedDeclaration":2682,"src":"1943:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1943:12:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2850,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"1968:16:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2851,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"1986:9:36","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":2848,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1957:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1961:6:36","memberName":"encode","nodeType":"MemberAccess","src":"1957:10:36","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:39:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2845,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1936:6:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1936:61:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2854,"nodeType":"ExpressionStatement","src":"1936:61:36"}]},"documentation":{"id":2835,"nodeType":"StructuredDocumentation","src":"1659:111:36","text":"@inheritdoc LinearPool\n @param stakeData The data to be used for staking, encoded as (uint256 value)"},"functionSelector":"2d1e0c02","id":2856,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"1784:5:36","nodeType":"FunctionDefinition","overrides":{"id":2839,"nodeType":"OverrideSpecifier","overrides":[],"src":"1839:8:36"},"parameters":{"id":2838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"stakeData","nameLocation":"1805:9:36","nodeType":"VariableDeclaration","scope":2856,"src":"1790:24:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2836,"name":"bytes","nodeType":"ElementaryTypeName","src":"1790:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1789:26:36"},"returnParameters":{"id":2840,"nodeType":"ParameterList","parameters":[],"src":"1848:0:36"},"scope":3029,"src":"1775:229:36","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[2641],"body":{"id":2905,"nodeType":"Block","src":"2296:271:36","statements":[{"assignments":[2868,2870],"declarations":[{"constant":false,"id":2868,"mutability":"mutable","name":"requiresTransfer","nameLocation":"2312:16:36","nodeType":"VariableDeclaration","scope":2905,"src":"2307:21:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2867,"name":"bool","nodeType":"ElementaryTypeName","src":"2307:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2870,"mutability":"mutable","name":"data","nameLocation":"2343:4:36","nodeType":"VariableDeclaration","scope":2905,"src":"2330:17:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2869,"name":"bytes","nodeType":"ElementaryTypeName","src":"2330:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2880,"initialValue":{"arguments":[{"id":2873,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"2362:9:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2374:4:36","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2874,"name":"bool","nodeType":"ElementaryTypeName","src":"2374:4:36","typeDescriptions":{}}},{"id":2877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2380:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2876,"name":"bytes","nodeType":"ElementaryTypeName","src":"2380:5:36","typeDescriptions":{}}}],"id":2878,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2373:13:36","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(bool),type(bytes storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(bool),type(bytes storage pointer))"}],"expression":{"id":2871,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2351:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2355:6:36","memberName":"decode","nodeType":"MemberAccess","src":"2351:10:36","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2351:36:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2306:81:36"},{"expression":{"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2881,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"2397:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2884,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"2422:4:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2429:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2429:7:36","typeDescriptions":{}}}],"id":2887,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2428:9:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":2882,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2411:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2415:6:36","memberName":"decode","nodeType":"MemberAccess","src":"2411:10:36","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2411:27:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2397:41:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2890,"nodeType":"ExpressionStatement","src":"2397:41:36"},{"condition":{"id":2891,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"2452:16:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2904,"nodeType":"IfStatement","src":"2448:113:36","trueBody":{"id":2903,"nodeType":"Block","src":"2470:91:36","statements":[{"expression":{"arguments":[{"id":2895,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"2515:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2898,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2531:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$3029","typeString":"contract ERC20StakingLinearPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$3029","typeString":"contract ERC20StakingLinearPool"}],"id":2897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2523:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2896,"name":"address","nodeType":"ElementaryTypeName","src":"2523:7:36","typeDescriptions":{}}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2900,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"2538:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2892,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"2484:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2498:16:36","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3458,"src":"2484:30:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$3386_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2484:66:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2902,"nodeType":"ExpressionStatement","src":"2484:66:36"}]}}]},"documentation":{"id":2857,"nodeType":"StructuredDocumentation","src":"2010:162:36","text":"@inheritdoc LinearPool\n @param stakeData The data to be used for staking, encoded as (bool requiresTransfer, bytes data) where data is (uint256 value)."},"id":2906,"implemented":true,"kind":"function","modifiers":[],"name":"_computeStake","nameLocation":"2186:13:36","nodeType":"FunctionDefinition","overrides":{"id":2863,"nodeType":"OverrideSpecifier","overrides":[],"src":"2257:8:36"},"parameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2859,"mutability":"mutable","name":"staker","nameLocation":"2208:6:36","nodeType":"VariableDeclaration","scope":2906,"src":"2200:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2858,"name":"address","nodeType":"ElementaryTypeName","src":"2200:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2861,"mutability":"mutable","name":"stakeData","nameLocation":"2229:9:36","nodeType":"VariableDeclaration","scope":2906,"src":"2216:22:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2860,"name":"bytes","nodeType":"ElementaryTypeName","src":"2216:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2199:40:36"},"returnParameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"mutability":"mutable","name":"stakePoints","nameLocation":"2283:11:36","nodeType":"VariableDeclaration","scope":2906,"src":"2275:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2864,"name":"uint256","nodeType":"ElementaryTypeName","src":"2275:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2274:21:36"},"scope":3029,"src":"2177:390:36","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2326],"body":{"id":2919,"nodeType":"Block","src":"2767:94:36","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2914,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2682],"referencedDeclaration":2682,"src":"2827:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:12:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2916,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"2841:12:36","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2913,"name":"_withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"2817:9:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:37:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2918,"nodeType":"ExpressionStatement","src":"2817:37:36"}]},"documentation":{"id":2907,"nodeType":"StructuredDocumentation","src":"2573:118:36","text":"@inheritdoc LinearPool\n @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)"},"functionSelector":"0968f264","id":2920,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"2705:8:36","nodeType":"FunctionDefinition","overrides":{"id":2911,"nodeType":"OverrideSpecifier","overrides":[],"src":"2758:8:36"},"parameters":{"id":2910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"withdrawData","nameLocation":"2729:12:36","nodeType":"VariableDeclaration","scope":2920,"src":"2714:27:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2908,"name":"bytes","nodeType":"ElementaryTypeName","src":"2714:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2713:29:36"},"returnParameters":{"id":2912,"nodeType":"ParameterList","parameters":[],"src":"2767:0:36"},"scope":3029,"src":"2696:165:36","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2650],"body":{"id":2948,"nodeType":"Block","src":"3115:123:36","statements":[{"expression":{"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2931,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"3125:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2934,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"3150:12:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3165:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2935,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:36","typeDescriptions":{}}}],"id":2937,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3164:9:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":2932,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3139:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3143:6:36","memberName":"decode","nodeType":"MemberAccess","src":"3139:10:36","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:35:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3125:49:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2940,"nodeType":"ExpressionStatement","src":"3125:49:36"},{"expression":{"arguments":[{"id":2944,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"3211:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2945,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"3219:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2941,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"3184:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3198:12:36","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":3431,"src":"3184:26:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$3386_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3184:47:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2947,"nodeType":"ExpressionStatement","src":"3184:47:36"}]},"documentation":{"id":2921,"nodeType":"StructuredDocumentation","src":"2867:118:36","text":"@inheritdoc LinearPool\n @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)"},"id":2949,"implemented":true,"kind":"function","modifiers":[],"name":"_computeWithdraw","nameLocation":"2999:16:36","nodeType":"FunctionDefinition","overrides":{"id":2927,"nodeType":"OverrideSpecifier","overrides":[],"src":"3076:8:36"},"parameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2923,"mutability":"mutable","name":"staker","nameLocation":"3024:6:36","nodeType":"VariableDeclaration","scope":2949,"src":"3016:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2922,"name":"address","nodeType":"ElementaryTypeName","src":"3016:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2925,"mutability":"mutable","name":"withdrawData","nameLocation":"3045:12:36","nodeType":"VariableDeclaration","scope":2949,"src":"3032:25:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2924,"name":"bytes","nodeType":"ElementaryTypeName","src":"3032:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3015:43:36"},"returnParameters":{"id":2930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2929,"mutability":"mutable","name":"stakePoints","nameLocation":"3102:11:36","nodeType":"VariableDeclaration","scope":2949,"src":"3094:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2928,"name":"uint256","nodeType":"ElementaryTypeName","src":"3094:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3093:21:36"},"scope":3029,"src":"2990:248:36","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1685],"body":{"id":3027,"nodeType":"Block","src":"3540:591:36","statements":[{"assignments":[2965],"declarations":[{"constant":false,"id":2965,"mutability":"mutable","name":"stakingTokenRecoveryAmount","nameLocation":"3558:26:36","nodeType":"VariableDeclaration","scope":3027,"src":"3550:34:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2964,"name":"uint256","nodeType":"ElementaryTypeName","src":"3550:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2966,"nodeType":"VariableDeclarationStatement","src":"3550:34:36"},{"body":{"id":2990,"nodeType":"Block","src":"3634:129:36","statements":[{"condition":{"commonType":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2977,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"3652:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":2979,"indexExpression":{"id":2978,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"3659:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3652:9:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2980,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"3665:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"src":"3652:26:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2989,"nodeType":"IfStatement","src":"3648:105:36","trueBody":{"id":2988,"nodeType":"Block","src":"3680:73:36","statements":[{"expression":{"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2982,"name":"stakingTokenRecoveryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"3698:26:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":2983,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"3728:7:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2985,"indexExpression":{"id":2984,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"3736:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3728:10:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3698:40:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2987,"nodeType":"ExpressionStatement","src":"3698:40:36"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2970,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"3610:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2971,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"3614:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3621:6:36","memberName":"length","nodeType":"MemberAccess","src":"3614:13:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3610:17:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2991,"initializationExpression":{"assignments":[2968],"declarations":[{"constant":false,"id":2968,"mutability":"mutable","name":"i","nameLocation":"3607:1:36","nodeType":"VariableDeclaration","scope":2991,"src":"3599:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2967,"name":"uint256","nodeType":"ElementaryTypeName","src":"3599:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2969,"nodeType":"VariableDeclarationStatement","src":"3599:9:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3629:3:36","subExpression":{"id":2974,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"3631:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2976,"nodeType":"ExpressionStatement","src":"3629:3:36"},"nodeType":"ForStatement","src":"3594:169:36"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2992,"name":"stakingTokenRecoveryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"3776:26:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3806:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3776:31:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3018,"nodeType":"IfStatement","src":"3772:297:36","trueBody":{"id":3017,"nodeType":"Block","src":"3809:260:36","statements":[{"assignments":[2996],"declarations":[{"constant":false,"id":2996,"mutability":"mutable","name":"recoverable","nameLocation":"3831:11:36","nodeType":"VariableDeclaration","scope":3017,"src":"3823:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2995,"name":"uint256","nodeType":"ElementaryTypeName","src":"3823:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3006,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3001,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3877:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$3029","typeString":"contract ERC20StakingLinearPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$3029","typeString":"contract ERC20StakingLinearPool"}],"id":3000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3869:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2999,"name":"address","nodeType":"ElementaryTypeName","src":"3869:7:36","typeDescriptions":{}}},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3869:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2997,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"3845:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3859:9:36","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3343,"src":"3845:23:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3845:38:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3004,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"3886:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3845:52:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3823:74:36"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3007,"name":"stakingTokenRecoveryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"3915:26:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3008,"name":"recoverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"3944:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3915:40:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3016,"nodeType":"IfStatement","src":"3911:148:36","trueBody":{"id":3015,"nodeType":"Block","src":"3957:102:36","statements":[{"errorCall":{"arguments":[{"id":3011,"name":"stakingTokenRecoveryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"4004:26:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3012,"name":"recoverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"4032:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3010,"name":"InvalidRecoveryAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"3982:21:36","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3982:62:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3014,"nodeType":"RevertStatement","src":"3975:69:36"}]}}]}},{"expression":{"arguments":[{"id":3022,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"4098:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":3023,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"4108:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},{"id":3024,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"4116:7:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":3019,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4078:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20StakingLinearPool_$3029_$","typeString":"type(contract super ERC20StakingLinearPool)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4084:13:36","memberName":"recoverERC20s","nodeType":"MemberAccess","referencedDeclaration":1685,"src":"4078:19:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address[] calldata,contract IERC20[] calldata,uint256[] calldata)"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4078:46:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3026,"nodeType":"ExpressionStatement","src":"4078:46:36"}]},"documentation":{"id":2950,"nodeType":"StructuredDocumentation","src":"3244:161:36","text":"@inheritdoc TokenRecoveryBase\n @dev Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable."},"functionSelector":"73c8a958","id":3028,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"3419:13:36","nodeType":"FunctionDefinition","overrides":{"id":2962,"nodeType":"OverrideSpecifier","overrides":[],"src":"3531:8:36"},"parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2953,"mutability":"mutable","name":"accounts","nameLocation":"3452:8:36","nodeType":"VariableDeclaration","scope":3028,"src":"3433:27:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2951,"name":"address","nodeType":"ElementaryTypeName","src":"3433:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2952,"nodeType":"ArrayTypeName","src":"3433:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2957,"mutability":"mutable","name":"tokens","nameLocation":"3480:6:36","nodeType":"VariableDeclaration","scope":3028,"src":"3462:24:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2955,"nodeType":"UserDefinedTypeName","pathNode":{"id":2954,"name":"IERC20","nameLocations":["3462:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"3462:6:36"},"referencedDeclaration":3386,"src":"3462:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":2956,"nodeType":"ArrayTypeName","src":"3462:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3386_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"amounts","nameLocation":"3507:7:36","nodeType":"VariableDeclaration","scope":3028,"src":"3488:26:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2958,"name":"uint256","nodeType":"ElementaryTypeName","src":"3488:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2959,"nodeType":"ArrayTypeName","src":"3488:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3432:83:36"},"returnParameters":{"id":2963,"nodeType":"ParameterList","parameters":[],"src":"3540:0:36"},"scope":3029,"src":"3410:721:36","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":3030,"src":"536:3597:36","usedErrors":[7,236,259,897,1790,2088,2090,2098,2100,2102,2108,2764,2770,3398,4095,4098,4121],"usedEvents":[282,291,300,2060,2068,2076,2086]}],"src":"32:4102:36"},"id":36},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","exportedSymbols":{"ERC20Receiver":[3064],"IERC20Receiver":[3082],"InterfaceDetection":[892],"InterfaceDetectionStorage":[1010]},"id":3065,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3031,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:37"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"./interfaces/IERC20Receiver.sol","id":3033,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3065,"sourceUnit":3083,"src":"58:63:37","symbolAliases":[{"foreign":{"id":3032,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"66:14:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"../../introspection/libraries/InterfaceDetectionStorage.sol","id":3035,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3065,"sourceUnit":1011,"src":"122:102:37","symbolAliases":[{"foreign":{"id":3034,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"130:25:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"../../introspection/InterfaceDetection.sol","id":3037,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3065,"sourceUnit":893,"src":"225:78:37","symbolAliases":[{"foreign":{"id":3036,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"233:18:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3039,"name":"IERC20Receiver","nameLocations":["511:14:37"],"nodeType":"IdentifierPath","referencedDeclaration":3082,"src":"511:14:37"},"id":3040,"nodeType":"InheritanceSpecifier","src":"511:14:37"},{"baseName":{"id":3041,"name":"InterfaceDetection","nameLocations":["527:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":892,"src":"527:18:37"},"id":3042,"nodeType":"InheritanceSpecifier","src":"527:18:37"}],"canonicalName":"ERC20Receiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":3038,"nodeType":"StructuredDocumentation","src":"305:171:37","text":"@title ERC20 Fungible Token Standard, Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":3064,"linearizedBaseContracts":[3064,892,909,3082],"name":"ERC20Receiver","nameLocation":"494:13:37","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3046,"libraryName":{"id":3043,"name":"InterfaceDetectionStorage","nameLocations":["558:25:37"],"nodeType":"IdentifierPath","referencedDeclaration":1010,"src":"558:25:37"},"nodeType":"UsingForDirective","src":"552:69:37","typeName":{"id":3045,"nodeType":"UserDefinedTypeName","pathNode":{"id":3044,"name":"InterfaceDetectionStorage.Layout","nameLocations":["588:25:37","614:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":920,"src":"588:32:37"},"referencedDeclaration":920,"src":"588:32:37","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":3062,"nodeType":"Block","src":"726:113:37","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":3056,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"798:14:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$3082_$","typeString":"type(contract IERC20Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$3082_$","typeString":"type(contract IERC20Receiver)"}],"id":3055,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"793:4:37","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Receiver_$3082","typeString":"type(contract IERC20Receiver)"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"814:11:37","memberName":"interfaceId","nodeType":"MemberAccess","src":"793:32:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3050,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"736:25:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1010_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"762:6:37","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"736:32:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:34:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$920_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":3054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"771:21:37","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":963,"src":"736:56:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$920_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$920_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:96:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3061,"nodeType":"ExpressionStatement","src":"736:96:37"}]},"documentation":{"id":3047,"nodeType":"StructuredDocumentation","src":"627:80:37","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"id":3063,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3048,"nodeType":"ParameterList","parameters":[],"src":"723:2:37"},"returnParameters":{"id":3049,"nodeType":"ParameterList","parameters":[],"src":"726:0:37"},"scope":3064,"src":"712:127:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3065,"src":"476:365:37","usedErrors":[897],"usedEvents":[]}],"src":"32:810:37"},"id":37},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","exportedSymbols":{"IERC20Receiver":[3082]},"id":3083,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3066,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:38"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":3067,"nodeType":"StructuredDocumentation","src":"58:281:38","text":"@title ERC20 Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x4fc35859."},"fullyImplemented":false,"id":3082,"linearizedBaseContracts":[3082],"name":"IERC20Receiver","nameLocation":"349:14:38","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3068,"nodeType":"StructuredDocumentation","src":"370:532:38","text":"@notice Handles the receipt of ERC20 tokens.\n @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n @param operator The initiator of the safe transfer.\n @param from The previous tokens owner.\n @param value The amount of tokens transferred.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."},"functionSelector":"4fc35859","id":3081,"implemented":false,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"916:15:38","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3070,"mutability":"mutable","name":"operator","nameLocation":"940:8:38","nodeType":"VariableDeclaration","scope":3081,"src":"932:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3069,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3072,"mutability":"mutable","name":"from","nameLocation":"958:4:38","nodeType":"VariableDeclaration","scope":3081,"src":"950:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"value","nameLocation":"972:5:38","nodeType":"VariableDeclaration","scope":3081,"src":"964:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3073,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"data","nameLocation":"994:4:38","nodeType":"VariableDeclaration","scope":3081,"src":"979:19:38","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3075,"name":"bytes","nodeType":"ElementaryTypeName","src":"979:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"931:68:38"},"returnParameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"magicValue","nameLocation":"1025:10:38","nodeType":"VariableDeclaration","scope":3081,"src":"1018:17:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3078,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1018:6:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1017:19:38"},"scope":3082,"src":"907:130:38","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3083,"src":"339:700:38","usedErrors":[],"usedEvents":[]}],"src":"32:1008:38"},"id":38},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","exportedSymbols":{"IERC20SafeTransfers":[3112]},"id":3113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3084,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:39"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20SafeTransfers","contractDependencies":[],"contractKind":"interface","documentation":{"id":3085,"nodeType":"StructuredDocumentation","src":"58:192:39","text":"@title ERC20 Token Standard, optional extension: Safe Transfers.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x53f41a97."},"fullyImplemented":false,"id":3112,"linearizedBaseContracts":[3112],"name":"IERC20SafeTransfers","nameLocation":"260:19:39","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3086,"nodeType":"StructuredDocumentation","src":"286:697:39","text":"@notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"eb795549","id":3097,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"997:12:39","nodeType":"FunctionDefinition","parameters":{"id":3093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3088,"mutability":"mutable","name":"to","nameLocation":"1018:2:39","nodeType":"VariableDeclaration","scope":3097,"src":"1010:10:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3087,"name":"address","nodeType":"ElementaryTypeName","src":"1010:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3090,"mutability":"mutable","name":"value","nameLocation":"1030:5:39","nodeType":"VariableDeclaration","scope":3097,"src":"1022:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3089,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3092,"mutability":"mutable","name":"data","nameLocation":"1052:4:39","nodeType":"VariableDeclaration","scope":3097,"src":"1037:19:39","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3091,"name":"bytes","nodeType":"ElementaryTypeName","src":"1037:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1009:48:39"},"returnParameters":{"id":3096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3095,"mutability":"mutable","name":"result","nameLocation":"1081:6:39","nodeType":"VariableDeclaration","scope":3097,"src":"1076:11:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3094,"name":"bool","nodeType":"ElementaryTypeName","src":"1076:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1075:13:39"},"scope":3112,"src":"988:101:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3098,"nodeType":"StructuredDocumentation","src":"1095:1009:39","text":"@notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"b88d4fde","id":3111,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2118:16:39","nodeType":"FunctionDefinition","parameters":{"id":3107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3100,"mutability":"mutable","name":"from","nameLocation":"2143:4:39","nodeType":"VariableDeclaration","scope":3111,"src":"2135:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3099,"name":"address","nodeType":"ElementaryTypeName","src":"2135:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3102,"mutability":"mutable","name":"to","nameLocation":"2157:2:39","nodeType":"VariableDeclaration","scope":3111,"src":"2149:10:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3101,"name":"address","nodeType":"ElementaryTypeName","src":"2149:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3104,"mutability":"mutable","name":"value","nameLocation":"2169:5:39","nodeType":"VariableDeclaration","scope":3111,"src":"2161:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3103,"name":"uint256","nodeType":"ElementaryTypeName","src":"2161:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3106,"mutability":"mutable","name":"data","nameLocation":"2191:4:39","nodeType":"VariableDeclaration","scope":3111,"src":"2176:19:39","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3105,"name":"bytes","nodeType":"ElementaryTypeName","src":"2176:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2134:62:39"},"returnParameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"result","nameLocation":"2220:6:39","nodeType":"VariableDeclaration","scope":3111,"src":"2215:11:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3108,"name":"bool","nodeType":"ElementaryTypeName","src":"2215:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2214:13:39"},"scope":3112,"src":"2109:119:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3113,"src":"250:1980:39","usedErrors":[],"usedEvents":[]}],"src":"32:2199:39"},"id":39},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[3198]},"id":3199,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3114,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:40"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":3115,"nodeType":"StructuredDocumentation","src":"58:296:40","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":3198,"linearizedBaseContracts":[3198],"name":"IERC721","nameLocation":"364:7:40","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3116,"nodeType":"StructuredDocumentation","src":"378:684:40","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":3123,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1076:7:40","nodeType":"FunctionDefinition","parameters":{"id":3121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3118,"mutability":"mutable","name":"to","nameLocation":"1092:2:40","nodeType":"VariableDeclaration","scope":3123,"src":"1084:10:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3117,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3120,"mutability":"mutable","name":"tokenId","nameLocation":"1104:7:40","nodeType":"VariableDeclaration","scope":3123,"src":"1096:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3119,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:29:40"},"returnParameters":{"id":3122,"nodeType":"ParameterList","parameters":[],"src":"1121:0:40"},"scope":3198,"src":"1067:55:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3124,"nodeType":"StructuredDocumentation","src":"1128:341:40","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":3131,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1483:17:40","nodeType":"FunctionDefinition","parameters":{"id":3129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3126,"mutability":"mutable","name":"operator","nameLocation":"1509:8:40","nodeType":"VariableDeclaration","scope":3131,"src":"1501:16:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3125,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3128,"mutability":"mutable","name":"approved","nameLocation":"1524:8:40","nodeType":"VariableDeclaration","scope":3131,"src":"1519:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3127,"name":"bool","nodeType":"ElementaryTypeName","src":"1519:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1500:33:40"},"returnParameters":{"id":3130,"nodeType":"ParameterList","parameters":[],"src":"1542:0:40"},"scope":3198,"src":"1474:69:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3132,"nodeType":"StructuredDocumentation","src":"1549:667:40","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":3141,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2230:12:40","nodeType":"FunctionDefinition","parameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3134,"mutability":"mutable","name":"from","nameLocation":"2251:4:40","nodeType":"VariableDeclaration","scope":3141,"src":"2243:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3133,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3136,"mutability":"mutable","name":"to","nameLocation":"2265:2:40","nodeType":"VariableDeclaration","scope":3141,"src":"2257:10:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3135,"name":"address","nodeType":"ElementaryTypeName","src":"2257:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"tokenId","nameLocation":"2277:7:40","nodeType":"VariableDeclaration","scope":3141,"src":"2269:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:43:40"},"returnParameters":{"id":3140,"nodeType":"ParameterList","parameters":[],"src":"2294:0:40"},"scope":3198,"src":"2221:74:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3142,"nodeType":"StructuredDocumentation","src":"2301:663:40","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":3151,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2978:16:40","nodeType":"FunctionDefinition","parameters":{"id":3149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3144,"mutability":"mutable","name":"from","nameLocation":"3003:4:40","nodeType":"VariableDeclaration","scope":3151,"src":"2995:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3143,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3146,"mutability":"mutable","name":"to","nameLocation":"3017:2:40","nodeType":"VariableDeclaration","scope":3151,"src":"3009:10:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3145,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3148,"mutability":"mutable","name":"tokenId","nameLocation":"3029:7:40","nodeType":"VariableDeclaration","scope":3151,"src":"3021:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:43:40"},"returnParameters":{"id":3150,"nodeType":"ParameterList","parameters":[],"src":"3046:0:40"},"scope":3198,"src":"2969:78:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3152,"nodeType":"StructuredDocumentation","src":"3053:735:40","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":3163,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3802:16:40","nodeType":"FunctionDefinition","parameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3154,"mutability":"mutable","name":"from","nameLocation":"3827:4:40","nodeType":"VariableDeclaration","scope":3163,"src":"3819:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3153,"name":"address","nodeType":"ElementaryTypeName","src":"3819:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3156,"mutability":"mutable","name":"to","nameLocation":"3841:2:40","nodeType":"VariableDeclaration","scope":3163,"src":"3833:10:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3155,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3158,"mutability":"mutable","name":"tokenId","nameLocation":"3853:7:40","nodeType":"VariableDeclaration","scope":3163,"src":"3845:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3157,"name":"uint256","nodeType":"ElementaryTypeName","src":"3845:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3160,"mutability":"mutable","name":"data","nameLocation":"3877:4:40","nodeType":"VariableDeclaration","scope":3163,"src":"3862:19:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3159,"name":"bytes","nodeType":"ElementaryTypeName","src":"3862:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3818:64:40"},"returnParameters":{"id":3162,"nodeType":"ParameterList","parameters":[],"src":"3891:0:40"},"scope":3198,"src":"3793:99:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3164,"nodeType":"StructuredDocumentation","src":"3898:209:40","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":3171,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4121:9:40","nodeType":"FunctionDefinition","parameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"owner","nameLocation":"4139:5:40","nodeType":"VariableDeclaration","scope":3171,"src":"4131:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3165,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:40"},"returnParameters":{"id":3170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3169,"mutability":"mutable","name":"balance","nameLocation":"4177:7:40","nodeType":"VariableDeclaration","scope":3171,"src":"4169:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3168,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:40"},"scope":3198,"src":"4112:74:40","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3172,"nodeType":"StructuredDocumentation","src":"4192:217:40","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":3179,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4423:7:40","nodeType":"FunctionDefinition","parameters":{"id":3175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3174,"mutability":"mutable","name":"tokenId","nameLocation":"4439:7:40","nodeType":"VariableDeclaration","scope":3179,"src":"4431:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3173,"name":"uint256","nodeType":"ElementaryTypeName","src":"4431:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4430:17:40"},"returnParameters":{"id":3178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3177,"mutability":"mutable","name":"tokenOwner","nameLocation":"4479:10:40","nodeType":"VariableDeclaration","scope":3179,"src":"4471:18:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3176,"name":"address","nodeType":"ElementaryTypeName","src":"4471:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4470:20:40"},"scope":3198,"src":"4414:77:40","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3180,"nodeType":"StructuredDocumentation","src":"4497:285:40","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":3187,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4796:11:40","nodeType":"FunctionDefinition","parameters":{"id":3183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"tokenId","nameLocation":"4816:7:40","nodeType":"VariableDeclaration","scope":3187,"src":"4808:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3181,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4807:17:40"},"returnParameters":{"id":3186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3185,"mutability":"mutable","name":"approved","nameLocation":"4856:8:40","nodeType":"VariableDeclaration","scope":3187,"src":"4848:16:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3184,"name":"address","nodeType":"ElementaryTypeName","src":"4848:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4847:18:40"},"scope":3198,"src":"4787:79:40","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3188,"nodeType":"StructuredDocumentation","src":"4872:323:40","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":3197,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5209:16:40","nodeType":"FunctionDefinition","parameters":{"id":3193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3190,"mutability":"mutable","name":"owner","nameLocation":"5234:5:40","nodeType":"VariableDeclaration","scope":3197,"src":"5226:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3189,"name":"address","nodeType":"ElementaryTypeName","src":"5226:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3192,"mutability":"mutable","name":"operator","nameLocation":"5249:8:40","nodeType":"VariableDeclaration","scope":3197,"src":"5241:16:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3191,"name":"address","nodeType":"ElementaryTypeName","src":"5241:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5225:33:40"},"returnParameters":{"id":3196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3195,"mutability":"mutable","name":"approvedForAll","nameLocation":"5287:14:40","nodeType":"VariableDeclaration","scope":3197,"src":"5282:19:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3194,"name":"bool","nodeType":"ElementaryTypeName","src":"5282:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5281:21:40"},"scope":3198,"src":"5200:103:40","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3199,"src":"354:4951:40","usedErrors":[],"usedEvents":[]}],"src":"32:5274:40"},"id":40},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","exportedSymbols":{"Address":[3218]},"id":3219,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3200,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:41"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3218,"linearizedBaseContracts":[3218],"name":"Address","nameLocation":"66:7:41","nodeType":"ContractDefinition","nodes":[{"body":{"id":3216,"nodeType":"Block","src":"344:122:41","statements":[{"assignments":[3209],"declarations":[{"constant":false,"id":3209,"mutability":"mutable","name":"size","nameLocation":"362:4:41","nodeType":"VariableDeclaration","scope":3216,"src":"354:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3208,"name":"uint256","nodeType":"ElementaryTypeName","src":"354:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3210,"nodeType":"VariableDeclarationStatement","src":"354:12:41"},{"AST":{"nativeSrc":"385:49:41","nodeType":"YulBlock","src":"385:49:41","statements":[{"nativeSrc":"399:25:41","nodeType":"YulAssignment","src":"399:25:41","value":{"arguments":[{"name":"addr","nativeSrc":"419:4:41","nodeType":"YulIdentifier","src":"419:4:41"}],"functionName":{"name":"extcodesize","nativeSrc":"407:11:41","nodeType":"YulIdentifier","src":"407:11:41"},"nativeSrc":"407:17:41","nodeType":"YulFunctionCall","src":"407:17:41"},"variableNames":[{"name":"size","nativeSrc":"399:4:41","nodeType":"YulIdentifier","src":"399:4:41"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3203,"isOffset":false,"isSlot":false,"src":"419:4:41","valueSize":1},{"declaration":3209,"isOffset":false,"isSlot":false,"src":"399:4:41","valueSize":1}],"id":3211,"nodeType":"InlineAssembly","src":"376:58:41"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3212,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"450:4:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"458:1:41","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"450:9:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3207,"id":3215,"nodeType":"Return","src":"443:16:41"}]},"documentation":{"id":3201,"nodeType":"StructuredDocumentation","src":"80:195:41","text":"@notice Checks if the address is a deployed smart contract.\n @param addr The address to check.\n @return hasBytecode True if `addr` is a deployed smart contract, false otherwise."},"id":3217,"implemented":true,"kind":"function","modifiers":[],"name":"hasBytecode","nameLocation":"289:11:41","nodeType":"FunctionDefinition","parameters":{"id":3204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3203,"mutability":"mutable","name":"addr","nameLocation":"309:4:41","nodeType":"VariableDeclaration","scope":3217,"src":"301:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3202,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"300:14:41"},"returnParameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3217,"src":"338:4:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3205,"name":"bool","nodeType":"ElementaryTypeName","src":"338:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"337:6:41"},"scope":3218,"src":"280:186:41","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3219,"src":"58:410:41","usedErrors":[],"usedEvents":[]}],"src":"32:437:41"},"id":41},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","exportedSymbols":{"IERC1363":[3300],"IERC165":[5425],"IERC20":[3386]},"id":3301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3220,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:42"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"./IERC20.sol","id":3222,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3301,"sourceUnit":3309,"src":"133:36:42","symbolAliases":[{"foreign":{"id":3221,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"141:6:42","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":3224,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3301,"sourceUnit":3305,"src":"170:38:42","symbolAliases":[{"foreign":{"id":3223,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"178:7:42","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3226,"name":"IERC20","nameLocations":["590:6:42"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"590:6:42"},"id":3227,"nodeType":"InheritanceSpecifier","src":"590:6:42"},{"baseName":{"id":3228,"name":"IERC165","nameLocations":["598:7:42"],"nodeType":"IdentifierPath","referencedDeclaration":5425,"src":"598:7:42"},"id":3229,"nodeType":"InheritanceSpecifier","src":"598:7:42"}],"canonicalName":"IERC1363","contractDependencies":[],"contractKind":"interface","documentation":{"id":3225,"nodeType":"StructuredDocumentation","src":"210:357:42","text":" @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."},"fullyImplemented":false,"id":3300,"linearizedBaseContracts":[3300,5425,3386],"name":"IERC1363","nameLocation":"578:8:42","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3230,"nodeType":"StructuredDocumentation","src":"1148:370:42","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"1296ee62","id":3239,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"1532:15:42","nodeType":"FunctionDefinition","parameters":{"id":3235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3232,"mutability":"mutable","name":"to","nameLocation":"1556:2:42","nodeType":"VariableDeclaration","scope":3239,"src":"1548:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3231,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3234,"mutability":"mutable","name":"value","nameLocation":"1568:5:42","nodeType":"VariableDeclaration","scope":3239,"src":"1560:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3233,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1547:27:42"},"returnParameters":{"id":3238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3239,"src":"1593:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3236,"name":"bool","nodeType":"ElementaryTypeName","src":"1593:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1592:6:42"},"scope":3300,"src":"1523:76:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3240,"nodeType":"StructuredDocumentation","src":"1605:453:42","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"4000aea0","id":3251,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"2072:15:42","nodeType":"FunctionDefinition","parameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3242,"mutability":"mutable","name":"to","nameLocation":"2096:2:42","nodeType":"VariableDeclaration","scope":3251,"src":"2088:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3241,"name":"address","nodeType":"ElementaryTypeName","src":"2088:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3244,"mutability":"mutable","name":"value","nameLocation":"2108:5:42","nodeType":"VariableDeclaration","scope":3251,"src":"2100:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"2100:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3246,"mutability":"mutable","name":"data","nameLocation":"2130:4:42","nodeType":"VariableDeclaration","scope":3251,"src":"2115:19:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3245,"name":"bytes","nodeType":"ElementaryTypeName","src":"2115:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2087:48:42"},"returnParameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3251,"src":"2154:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3248,"name":"bool","nodeType":"ElementaryTypeName","src":"2154:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2153:6:42"},"scope":3300,"src":"2063:97:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3252,"nodeType":"StructuredDocumentation","src":"2166:453:42","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"d8fbe994","id":3263,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"2633:19:42","nodeType":"FunctionDefinition","parameters":{"id":3259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3254,"mutability":"mutable","name":"from","nameLocation":"2661:4:42","nodeType":"VariableDeclaration","scope":3263,"src":"2653:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3253,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3256,"mutability":"mutable","name":"to","nameLocation":"2675:2:42","nodeType":"VariableDeclaration","scope":3263,"src":"2667:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3255,"name":"address","nodeType":"ElementaryTypeName","src":"2667:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3258,"mutability":"mutable","name":"value","nameLocation":"2687:5:42","nodeType":"VariableDeclaration","scope":3263,"src":"2679:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3257,"name":"uint256","nodeType":"ElementaryTypeName","src":"2679:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2652:41:42"},"returnParameters":{"id":3262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3263,"src":"2712:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3260,"name":"bool","nodeType":"ElementaryTypeName","src":"2712:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2711:6:42"},"scope":3300,"src":"2624:94:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3264,"nodeType":"StructuredDocumentation","src":"2724:536:42","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"c1d34b89","id":3277,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"3274:19:42","nodeType":"FunctionDefinition","parameters":{"id":3273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3266,"mutability":"mutable","name":"from","nameLocation":"3302:4:42","nodeType":"VariableDeclaration","scope":3277,"src":"3294:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3265,"name":"address","nodeType":"ElementaryTypeName","src":"3294:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3268,"mutability":"mutable","name":"to","nameLocation":"3316:2:42","nodeType":"VariableDeclaration","scope":3277,"src":"3308:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3267,"name":"address","nodeType":"ElementaryTypeName","src":"3308:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3270,"mutability":"mutable","name":"value","nameLocation":"3328:5:42","nodeType":"VariableDeclaration","scope":3277,"src":"3320:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"3320:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3272,"mutability":"mutable","name":"data","nameLocation":"3350:4:42","nodeType":"VariableDeclaration","scope":3277,"src":"3335:19:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3271,"name":"bytes","nodeType":"ElementaryTypeName","src":"3335:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3293:62:42"},"returnParameters":{"id":3276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3277,"src":"3374:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3274,"name":"bool","nodeType":"ElementaryTypeName","src":"3374:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3373:6:42"},"scope":3300,"src":"3265:115:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3278,"nodeType":"StructuredDocumentation","src":"3386:390:42","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"3177029f","id":3287,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"3790:14:42","nodeType":"FunctionDefinition","parameters":{"id":3283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3280,"mutability":"mutable","name":"spender","nameLocation":"3813:7:42","nodeType":"VariableDeclaration","scope":3287,"src":"3805:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3279,"name":"address","nodeType":"ElementaryTypeName","src":"3805:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3282,"mutability":"mutable","name":"value","nameLocation":"3830:5:42","nodeType":"VariableDeclaration","scope":3287,"src":"3822:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3281,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3804:32:42"},"returnParameters":{"id":3286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3287,"src":"3855:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3284,"name":"bool","nodeType":"ElementaryTypeName","src":"3855:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3854:6:42"},"scope":3300,"src":"3781:80:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3288,"nodeType":"StructuredDocumentation","src":"3867:478:42","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"cae9ca51","id":3299,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"4359:14:42","nodeType":"FunctionDefinition","parameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3290,"mutability":"mutable","name":"spender","nameLocation":"4382:7:42","nodeType":"VariableDeclaration","scope":3299,"src":"4374:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3289,"name":"address","nodeType":"ElementaryTypeName","src":"4374:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3292,"mutability":"mutable","name":"value","nameLocation":"4399:5:42","nodeType":"VariableDeclaration","scope":3299,"src":"4391:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3291,"name":"uint256","nodeType":"ElementaryTypeName","src":"4391:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3294,"mutability":"mutable","name":"data","nameLocation":"4421:4:42","nodeType":"VariableDeclaration","scope":3299,"src":"4406:19:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3293,"name":"bytes","nodeType":"ElementaryTypeName","src":"4406:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4373:53:42"},"returnParameters":{"id":3298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3299,"src":"4445:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3296,"name":"bool","nodeType":"ElementaryTypeName","src":"4445:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4444:6:42"},"scope":3300,"src":"4350:101:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3301,"src":"568:3885:42","usedErrors":[],"usedEvents":[3320,3329]}],"src":"107:4347:42"},"id":42},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[5425]},"id":3305,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3302,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:43"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":3304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3305,"sourceUnit":5426,"src":"132:59:43","symbolAliases":[{"foreign":{"id":3303,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"140:7:43","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:43"},"id":43},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[3386]},"id":3309,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3306,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:44"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":3308,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3309,"sourceUnit":3387,"src":"131:49:44","symbolAliases":[{"foreign":{"id":3307,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"139:6:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"105:76:44"},"id":44},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3386]},"id":3387,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3310,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:45"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":3311,"nodeType":"StructuredDocumentation","src":"132:71:45","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":3386,"linearizedBaseContracts":[3386],"name":"IERC20","nameLocation":"214:6:45","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3312,"nodeType":"StructuredDocumentation","src":"227:158:45","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3320,"name":"Transfer","nameLocation":"396:8:45","nodeType":"EventDefinition","parameters":{"id":3319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3314,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:45","nodeType":"VariableDeclaration","scope":3320,"src":"405:20:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3313,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3316,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:45","nodeType":"VariableDeclaration","scope":3320,"src":"427:18:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3315,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3318,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:45","nodeType":"VariableDeclaration","scope":3320,"src":"447:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3317,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:45"},"src":"390:72:45"},{"anonymous":false,"documentation":{"id":3321,"nodeType":"StructuredDocumentation","src":"468:148:45","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3329,"name":"Approval","nameLocation":"627:8:45","nodeType":"EventDefinition","parameters":{"id":3328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:45","nodeType":"VariableDeclaration","scope":3329,"src":"636:21:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3322,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3325,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:45","nodeType":"VariableDeclaration","scope":3329,"src":"659:23:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3324,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3327,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:45","nodeType":"VariableDeclaration","scope":3329,"src":"684:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3326,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:45"},"src":"621:78:45"},{"documentation":{"id":3330,"nodeType":"StructuredDocumentation","src":"705:65:45","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":3335,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:45","nodeType":"FunctionDefinition","parameters":{"id":3331,"nodeType":"ParameterList","parameters":[],"src":"795:2:45"},"returnParameters":{"id":3334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3335,"src":"821:7:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3332,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:45"},"scope":3386,"src":"775:55:45","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3336,"nodeType":"StructuredDocumentation","src":"836:71:45","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":3343,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:45","nodeType":"FunctionDefinition","parameters":{"id":3339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3338,"mutability":"mutable","name":"account","nameLocation":"939:7:45","nodeType":"VariableDeclaration","scope":3343,"src":"931:15:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3337,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:45"},"returnParameters":{"id":3342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3343,"src":"971:7:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3340,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:45"},"scope":3386,"src":"912:68:45","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3344,"nodeType":"StructuredDocumentation","src":"986:213:45","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3353,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:45","nodeType":"FunctionDefinition","parameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3346,"mutability":"mutable","name":"to","nameLocation":"1230:2:45","nodeType":"VariableDeclaration","scope":3353,"src":"1222:10:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3345,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3348,"mutability":"mutable","name":"value","nameLocation":"1242:5:45","nodeType":"VariableDeclaration","scope":3353,"src":"1234:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3347,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:45"},"returnParameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3353,"src":"1267:4:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3350,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:45"},"scope":3386,"src":"1204:69:45","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3354,"nodeType":"StructuredDocumentation","src":"1279:264:45","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3363,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:45","nodeType":"FunctionDefinition","parameters":{"id":3359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3356,"mutability":"mutable","name":"owner","nameLocation":"1575:5:45","nodeType":"VariableDeclaration","scope":3363,"src":"1567:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3355,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3358,"mutability":"mutable","name":"spender","nameLocation":"1590:7:45","nodeType":"VariableDeclaration","scope":3363,"src":"1582:15:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3357,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:45"},"returnParameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3363,"src":"1622:7:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3360,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:45"},"scope":3386,"src":"1548:83:45","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3364,"nodeType":"StructuredDocumentation","src":"1637:667:45","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3373,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:45","nodeType":"FunctionDefinition","parameters":{"id":3369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"spender","nameLocation":"2334:7:45","nodeType":"VariableDeclaration","scope":3373,"src":"2326:15:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3365,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3368,"mutability":"mutable","name":"value","nameLocation":"2351:5:45","nodeType":"VariableDeclaration","scope":3373,"src":"2343:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3367,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:45"},"returnParameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3373,"src":"2376:4:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3370,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:45"},"scope":3386,"src":"2309:73:45","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3374,"nodeType":"StructuredDocumentation","src":"2388:297:45","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3385,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:45","nodeType":"FunctionDefinition","parameters":{"id":3381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"from","nameLocation":"2720:4:45","nodeType":"VariableDeclaration","scope":3385,"src":"2712:12:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3375,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3378,"mutability":"mutable","name":"to","nameLocation":"2734:2:45","nodeType":"VariableDeclaration","scope":3385,"src":"2726:10:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3380,"mutability":"mutable","name":"value","nameLocation":"2746:5:45","nodeType":"VariableDeclaration","scope":3385,"src":"2738:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3379,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:45"},"returnParameters":{"id":3384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3385,"src":"2771:4:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3382,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:45"},"scope":3386,"src":"2690:87:45","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3387,"src":"204:2575:45","usedErrors":[],"usedEvents":[3320,3329]}],"src":"106:2674:45"},"id":45},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"IERC1363":[3300],"IERC20":[3386],"SafeERC20":[3795]},"id":3796,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3388,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:46"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":3390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3796,"sourceUnit":3387,"src":"141:37:46","symbolAliases":[{"foreign":{"id":3389,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"149:6:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","file":"../../../interfaces/IERC1363.sol","id":3392,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3796,"sourceUnit":3301,"src":"179:58:46","symbolAliases":[{"foreign":{"id":3391,"name":"IERC1363","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"187:8:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":3393,"nodeType":"StructuredDocumentation","src":"239:458:46","text":" @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":3795,"linearizedBaseContracts":[3795],"name":"SafeERC20","nameLocation":"706:9:46","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3394,"nodeType":"StructuredDocumentation","src":"722:65:46","text":" @dev An operation with an ERC-20 token failed."},"errorSelector":"5274afe7","id":3398,"name":"SafeERC20FailedOperation","nameLocation":"798:24:46","nodeType":"ErrorDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3396,"mutability":"mutable","name":"token","nameLocation":"831:5:46","nodeType":"VariableDeclaration","scope":3398,"src":"823:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3395,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"822:15:46"},"src":"792:46:46"},{"documentation":{"id":3399,"nodeType":"StructuredDocumentation","src":"844:71:46","text":" @dev Indicates a failed `decreaseAllowance` request."},"errorSelector":"e570110f","id":3407,"name":"SafeERC20FailedDecreaseAllowance","nameLocation":"926:32:46","nodeType":"ErrorDefinition","parameters":{"id":3406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"spender","nameLocation":"967:7:46","nodeType":"VariableDeclaration","scope":3407,"src":"959:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3400,"name":"address","nodeType":"ElementaryTypeName","src":"959:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3403,"mutability":"mutable","name":"currentAllowance","nameLocation":"984:16:46","nodeType":"VariableDeclaration","scope":3407,"src":"976:24:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3402,"name":"uint256","nodeType":"ElementaryTypeName","src":"976:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3405,"mutability":"mutable","name":"requestedDecrease","nameLocation":"1010:17:46","nodeType":"VariableDeclaration","scope":3407,"src":"1002:25:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3404,"name":"uint256","nodeType":"ElementaryTypeName","src":"1002:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"958:70:46"},"src":"920:109:46"},{"body":{"id":3430,"nodeType":"Block","src":"1291:88:46","statements":[{"expression":{"arguments":[{"id":3419,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"1321:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":3422,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"1343:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1349:8:46","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3353,"src":"1343:14:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":3424,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3413,"src":"1360:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"1364:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3426,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1359:11:46","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":3420,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1328:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1332:10:46","memberName":"encodeCall","nodeType":"MemberAccess","src":"1328:14:46","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1328:43:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3418,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"1301:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1301:71:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3429,"nodeType":"ExpressionStatement","src":"1301:71:46"}]},"documentation":{"id":3408,"nodeType":"StructuredDocumentation","src":"1035:179:46","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3431,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1228:12:46","nodeType":"FunctionDefinition","parameters":{"id":3416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3411,"mutability":"mutable","name":"token","nameLocation":"1248:5:46","nodeType":"VariableDeclaration","scope":3431,"src":"1241:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":3410,"nodeType":"UserDefinedTypeName","pathNode":{"id":3409,"name":"IERC20","nameLocations":["1241:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"1241:6:46"},"referencedDeclaration":3386,"src":"1241:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3413,"mutability":"mutable","name":"to","nameLocation":"1263:2:46","nodeType":"VariableDeclaration","scope":3431,"src":"1255:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3412,"name":"address","nodeType":"ElementaryTypeName","src":"1255:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3415,"mutability":"mutable","name":"value","nameLocation":"1275:5:46","nodeType":"VariableDeclaration","scope":3431,"src":"1267:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3414,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1240:41:46"},"returnParameters":{"id":3417,"nodeType":"ParameterList","parameters":[],"src":"1291:0:46"},"scope":3795,"src":"1219:160:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3457,"nodeType":"Block","src":"1708:98:46","statements":[{"expression":{"arguments":[{"id":3445,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"1738:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":3448,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"1760:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1766:12:46","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3385,"src":"1760:18:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},{"components":[{"id":3450,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3437,"src":"1781:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3451,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"1787:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3441,"src":"1791:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1780:17:46","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}],"expression":{"id":3446,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1745:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1749:10:46","memberName":"encodeCall","nodeType":"MemberAccess","src":"1745:14:46","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1745:53:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3444,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"1718:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:81:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3456,"nodeType":"ExpressionStatement","src":"1718:81:46"}]},"documentation":{"id":3432,"nodeType":"StructuredDocumentation","src":"1385:228:46","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":3458,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1627:16:46","nodeType":"FunctionDefinition","parameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3435,"mutability":"mutable","name":"token","nameLocation":"1651:5:46","nodeType":"VariableDeclaration","scope":3458,"src":"1644:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":3434,"nodeType":"UserDefinedTypeName","pathNode":{"id":3433,"name":"IERC20","nameLocations":["1644:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"1644:6:46"},"referencedDeclaration":3386,"src":"1644:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3437,"mutability":"mutable","name":"from","nameLocation":"1666:4:46","nodeType":"VariableDeclaration","scope":3458,"src":"1658:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3436,"name":"address","nodeType":"ElementaryTypeName","src":"1658:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3439,"mutability":"mutable","name":"to","nameLocation":"1680:2:46","nodeType":"VariableDeclaration","scope":3458,"src":"1672:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3438,"name":"address","nodeType":"ElementaryTypeName","src":"1672:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3441,"mutability":"mutable","name":"value","nameLocation":"1692:5:46","nodeType":"VariableDeclaration","scope":3458,"src":"1684:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3440,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1643:55:46"},"returnParameters":{"id":3443,"nodeType":"ParameterList","parameters":[],"src":"1708:0:46"},"scope":3795,"src":"1618:188:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3488,"nodeType":"Block","src":"2548:139:46","statements":[{"assignments":[3470],"declarations":[{"constant":false,"id":3470,"mutability":"mutable","name":"oldAllowance","nameLocation":"2566:12:46","nodeType":"VariableDeclaration","scope":3488,"src":"2558:20:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3469,"name":"uint256","nodeType":"ElementaryTypeName","src":"2558:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3479,"initialValue":{"arguments":[{"arguments":[{"id":3475,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2605:4:46","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3795","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3795","typeString":"library SafeERC20"}],"id":3474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2597:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3473,"name":"address","nodeType":"ElementaryTypeName","src":"2597:7:46","typeDescriptions":{}}},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2597:13:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3477,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"2612:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3471,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"2581:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2587:9:46","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3363,"src":"2581:15:46","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2581:39:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2558:62:46"},{"expression":{"arguments":[{"id":3481,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"2643:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"id":3482,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"2650:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3483,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"2659:12:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"2674:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2659:20:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3480,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"2630:12:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:50:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3487,"nodeType":"ExpressionStatement","src":"2630:50:46"}]},"documentation":{"id":3459,"nodeType":"StructuredDocumentation","src":"1812:645:46","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":3489,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2471:21:46","nodeType":"FunctionDefinition","parameters":{"id":3467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3462,"mutability":"mutable","name":"token","nameLocation":"2500:5:46","nodeType":"VariableDeclaration","scope":3489,"src":"2493:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":3461,"nodeType":"UserDefinedTypeName","pathNode":{"id":3460,"name":"IERC20","nameLocations":["2493:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"2493:6:46"},"referencedDeclaration":3386,"src":"2493:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3464,"mutability":"mutable","name":"spender","nameLocation":"2515:7:46","nodeType":"VariableDeclaration","scope":3489,"src":"2507:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3463,"name":"address","nodeType":"ElementaryTypeName","src":"2507:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3466,"mutability":"mutable","name":"value","nameLocation":"2532:5:46","nodeType":"VariableDeclaration","scope":3489,"src":"2524:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3465,"name":"uint256","nodeType":"ElementaryTypeName","src":"2524:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2492:46:46"},"returnParameters":{"id":3468,"nodeType":"ParameterList","parameters":[],"src":"2548:0:46"},"scope":3795,"src":"2462:225:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3531,"nodeType":"Block","src":"3453:370:46","statements":[{"id":3530,"nodeType":"UncheckedBlock","src":"3463:354:46","statements":[{"assignments":[3501],"declarations":[{"constant":false,"id":3501,"mutability":"mutable","name":"currentAllowance","nameLocation":"3495:16:46","nodeType":"VariableDeclaration","scope":3530,"src":"3487:24:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3500,"name":"uint256","nodeType":"ElementaryTypeName","src":"3487:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3510,"initialValue":{"arguments":[{"arguments":[{"id":3506,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3538:4:46","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3795","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3795","typeString":"library SafeERC20"}],"id":3505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3530:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3504,"name":"address","nodeType":"ElementaryTypeName","src":"3530:7:46","typeDescriptions":{}}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3530:13:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3508,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"3545:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3502,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"3514:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3520:9:46","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3363,"src":"3514:15:46","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:39:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3487:66:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3511,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"3571:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3512,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"3590:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3571:36:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3521,"nodeType":"IfStatement","src":"3567:160:46","trueBody":{"id":3520,"nodeType":"Block","src":"3609:118:46","statements":[{"errorCall":{"arguments":[{"id":3515,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"3667:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3516,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"3676:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3517,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"3694:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3514,"name":"SafeERC20FailedDecreaseAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"3634:32:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:78:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3519,"nodeType":"RevertStatement","src":"3627:85:46"}]}},{"expression":{"arguments":[{"id":3523,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"3753:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"id":3524,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"3760:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3525,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"3769:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3526,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"3788:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3769:36:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3522,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"3740:12:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3740:66:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3529,"nodeType":"ExpressionStatement","src":"3740:66:46"}]}]},"documentation":{"id":3490,"nodeType":"StructuredDocumentation","src":"2693:657:46","text":" @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":3532,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3364:21:46","nodeType":"FunctionDefinition","parameters":{"id":3498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3493,"mutability":"mutable","name":"token","nameLocation":"3393:5:46","nodeType":"VariableDeclaration","scope":3532,"src":"3386:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":3492,"nodeType":"UserDefinedTypeName","pathNode":{"id":3491,"name":"IERC20","nameLocations":["3386:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"3386:6:46"},"referencedDeclaration":3386,"src":"3386:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3495,"mutability":"mutable","name":"spender","nameLocation":"3408:7:46","nodeType":"VariableDeclaration","scope":3532,"src":"3400:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3494,"name":"address","nodeType":"ElementaryTypeName","src":"3400:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3497,"mutability":"mutable","name":"requestedDecrease","nameLocation":"3425:17:46","nodeType":"VariableDeclaration","scope":3532,"src":"3417:25:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3496,"name":"uint256","nodeType":"ElementaryTypeName","src":"3417:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3385:58:46"},"returnParameters":{"id":3499,"nodeType":"ParameterList","parameters":[],"src":"3453:0:46"},"scope":3795,"src":"3355:468:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3578,"nodeType":"Block","src":"4477:303:46","statements":[{"assignments":[3544],"declarations":[{"constant":false,"id":3544,"mutability":"mutable","name":"approvalCall","nameLocation":"4500:12:46","nodeType":"VariableDeclaration","scope":3578,"src":"4487:25:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3543,"name":"bytes","nodeType":"ElementaryTypeName","src":"4487:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3553,"initialValue":{"arguments":[{"expression":{"id":3547,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"4530:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4536:7:46","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3373,"src":"4530:13:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":3549,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"4546:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"4555:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3551,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4545:16:46","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":3545,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4515:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4519:10:46","memberName":"encodeCall","nodeType":"MemberAccess","src":"4515:14:46","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4515:47:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4487:75:46"},{"condition":{"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4577:45:46","subExpression":{"arguments":[{"id":3555,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"4602:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"id":3556,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4609:12:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3554,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"4578:23:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:44:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3577,"nodeType":"IfStatement","src":"4573:201:46","trueBody":{"id":3576,"nodeType":"Block","src":"4624:150:46","statements":[{"expression":{"arguments":[{"id":3560,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"4658:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":3563,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"4680:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4686:7:46","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3373,"src":"4680:13:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":3565,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"4696:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4705:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4695:12:46","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}],"expression":{"id":3561,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4665:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4669:10:46","memberName":"encodeCall","nodeType":"MemberAccess","src":"4665:14:46","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4665:43:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3559,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"4638:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4638:71:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3570,"nodeType":"ExpressionStatement","src":"4638:71:46"},{"expression":{"arguments":[{"id":3572,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"4743:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"id":3573,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"4750:12:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3571,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"4723:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4723:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3575,"nodeType":"ExpressionStatement","src":"4723:40:46"}]}}]},"documentation":{"id":3533,"nodeType":"StructuredDocumentation","src":"3829:566:46","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."},"id":3579,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"4409:12:46","nodeType":"FunctionDefinition","parameters":{"id":3541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3536,"mutability":"mutable","name":"token","nameLocation":"4429:5:46","nodeType":"VariableDeclaration","scope":3579,"src":"4422:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":3535,"nodeType":"UserDefinedTypeName","pathNode":{"id":3534,"name":"IERC20","nameLocations":["4422:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"4422:6:46"},"referencedDeclaration":3386,"src":"4422:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3538,"mutability":"mutable","name":"spender","nameLocation":"4444:7:46","nodeType":"VariableDeclaration","scope":3579,"src":"4436:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3537,"name":"address","nodeType":"ElementaryTypeName","src":"4436:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3540,"mutability":"mutable","name":"value","nameLocation":"4461:5:46","nodeType":"VariableDeclaration","scope":3579,"src":"4453:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3539,"name":"uint256","nodeType":"ElementaryTypeName","src":"4453:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4421:46:46"},"returnParameters":{"id":3542,"nodeType":"ParameterList","parameters":[],"src":"4477:0:46"},"scope":3795,"src":"4400:380:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3621,"nodeType":"Block","src":"5227:219:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3592,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"5241:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5244:4:46","memberName":"code","nodeType":"MemberAccess","src":"5241:7:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5249:6:46","memberName":"length","nodeType":"MemberAccess","src":"5241:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5259:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5241:19:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5327:39:46","subExpression":{"arguments":[{"id":3606,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"5350:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"5354:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3608,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"5361:4:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3604,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"5328:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5334:15:46","memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":3251,"src":"5328:21:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:38:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3619,"nodeType":"IfStatement","src":"5323:117:46","trueBody":{"id":3618,"nodeType":"Block","src":"5368:72:46","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3614,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"5422:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}],"id":3613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5414:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3612,"name":"address","nodeType":"ElementaryTypeName","src":"5414:7:46","typeDescriptions":{}}},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5414:14:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3611,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"5389:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3617,"nodeType":"RevertStatement","src":"5382:47:46"}]}},"id":3620,"nodeType":"IfStatement","src":"5237:203:46","trueBody":{"id":3603,"nodeType":"Block","src":"5262:55:46","statements":[{"expression":{"arguments":[{"id":3598,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"5289:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},{"id":3599,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"5296:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3600,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"5300:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3597,"name":"safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"5276:12:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5276:30:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3602,"nodeType":"ExpressionStatement","src":"5276:30:46"}]}}]},"documentation":{"id":3580,"nodeType":"StructuredDocumentation","src":"4786:333:46","text":" @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":3622,"implemented":true,"kind":"function","modifiers":[],"name":"transferAndCallRelaxed","nameLocation":"5133:22:46","nodeType":"FunctionDefinition","parameters":{"id":3590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3583,"mutability":"mutable","name":"token","nameLocation":"5165:5:46","nodeType":"VariableDeclaration","scope":3622,"src":"5156:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"},"typeName":{"id":3582,"nodeType":"UserDefinedTypeName","pathNode":{"id":3581,"name":"IERC1363","nameLocations":["5156:8:46"],"nodeType":"IdentifierPath","referencedDeclaration":3300,"src":"5156:8:46"},"referencedDeclaration":3300,"src":"5156:8:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"to","nameLocation":"5180:2:46","nodeType":"VariableDeclaration","scope":3622,"src":"5172:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3584,"name":"address","nodeType":"ElementaryTypeName","src":"5172:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"value","nameLocation":"5192:5:46","nodeType":"VariableDeclaration","scope":3622,"src":"5184:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3586,"name":"uint256","nodeType":"ElementaryTypeName","src":"5184:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3589,"mutability":"mutable","name":"data","nameLocation":"5212:4:46","nodeType":"VariableDeclaration","scope":3622,"src":"5199:17:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3588,"name":"bytes","nodeType":"ElementaryTypeName","src":"5199:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5155:62:46"},"returnParameters":{"id":3591,"nodeType":"ParameterList","parameters":[],"src":"5227:0:46"},"scope":3795,"src":"5124:322:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3668,"nodeType":"Block","src":"5965:239:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3637,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"5979:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5982:4:46","memberName":"code","nodeType":"MemberAccess","src":"5979:7:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5987:6:46","memberName":"length","nodeType":"MemberAccess","src":"5979:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5997:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5979:19:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6075:49:46","subExpression":{"arguments":[{"id":3652,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"6102:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3653,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"6108:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"6112:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3655,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"6119:4:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3650,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"6076:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6082:19:46","memberName":"transferFromAndCall","nodeType":"MemberAccess","referencedDeclaration":3277,"src":"6076:25:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) external returns (bool)"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6076:48:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3666,"nodeType":"IfStatement","src":"6071:127:46","trueBody":{"id":3665,"nodeType":"Block","src":"6126:72:46","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3661,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"6180:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}],"id":3660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6172:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3659,"name":"address","nodeType":"ElementaryTypeName","src":"6172:7:46","typeDescriptions":{}}},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6172:14:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3658,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"6147:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6147:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3664,"nodeType":"RevertStatement","src":"6140:47:46"}]}},"id":3667,"nodeType":"IfStatement","src":"5975:223:46","trueBody":{"id":3649,"nodeType":"Block","src":"6000:65:46","statements":[{"expression":{"arguments":[{"id":3643,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"6031:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},{"id":3644,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"6038:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3645,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"6044:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"6048:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3642,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"6014:16:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6014:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3648,"nodeType":"ExpressionStatement","src":"6014:40:46"}]}}]},"documentation":{"id":3623,"nodeType":"StructuredDocumentation","src":"5452:341:46","text":" @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":3669,"implemented":true,"kind":"function","modifiers":[],"name":"transferFromAndCallRelaxed","nameLocation":"5807:26:46","nodeType":"FunctionDefinition","parameters":{"id":3635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3626,"mutability":"mutable","name":"token","nameLocation":"5852:5:46","nodeType":"VariableDeclaration","scope":3669,"src":"5843:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"},"typeName":{"id":3625,"nodeType":"UserDefinedTypeName","pathNode":{"id":3624,"name":"IERC1363","nameLocations":["5843:8:46"],"nodeType":"IdentifierPath","referencedDeclaration":3300,"src":"5843:8:46"},"referencedDeclaration":3300,"src":"5843:8:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":3628,"mutability":"mutable","name":"from","nameLocation":"5875:4:46","nodeType":"VariableDeclaration","scope":3669,"src":"5867:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3627,"name":"address","nodeType":"ElementaryTypeName","src":"5867:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3630,"mutability":"mutable","name":"to","nameLocation":"5897:2:46","nodeType":"VariableDeclaration","scope":3669,"src":"5889:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3629,"name":"address","nodeType":"ElementaryTypeName","src":"5889:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3632,"mutability":"mutable","name":"value","nameLocation":"5917:5:46","nodeType":"VariableDeclaration","scope":3669,"src":"5909:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3631,"name":"uint256","nodeType":"ElementaryTypeName","src":"5909:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3634,"mutability":"mutable","name":"data","nameLocation":"5945:4:46","nodeType":"VariableDeclaration","scope":3669,"src":"5932:17:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3633,"name":"bytes","nodeType":"ElementaryTypeName","src":"5932:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5833:122:46"},"returnParameters":{"id":3636,"nodeType":"ParameterList","parameters":[],"src":"5965:0:46"},"scope":3795,"src":"5798:406:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3711,"nodeType":"Block","src":"6971:218:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3682,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"6985:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6988:4:46","memberName":"code","nodeType":"MemberAccess","src":"6985:7:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6993:6:46","memberName":"length","nodeType":"MemberAccess","src":"6985:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7003:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:19:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7071:38:46","subExpression":{"arguments":[{"id":3696,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"7093:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3697,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"7097:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3698,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"7104:4:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3694,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"7072:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7078:14:46","memberName":"approveAndCall","nodeType":"MemberAccess","referencedDeclaration":3299,"src":"7072:20:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:37:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3709,"nodeType":"IfStatement","src":"7067:116:46","trueBody":{"id":3708,"nodeType":"Block","src":"7111:72:46","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3704,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"7165:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}],"id":3703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7157:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3702,"name":"address","nodeType":"ElementaryTypeName","src":"7157:7:46","typeDescriptions":{}}},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7157:14:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3701,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7132:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7132:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3707,"nodeType":"RevertStatement","src":"7125:47:46"}]}},"id":3710,"nodeType":"IfStatement","src":"6981:202:46","trueBody":{"id":3693,"nodeType":"Block","src":"7006:55:46","statements":[{"expression":{"arguments":[{"id":3688,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"7033:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},{"id":3689,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"7040:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"7044:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3687,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"7020:12:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3386_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":3691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7020:30:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3692,"nodeType":"ExpressionStatement","src":"7020:30:46"}]}}]},"documentation":{"id":3670,"nodeType":"StructuredDocumentation","src":"6210:654:46","text":" @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."},"id":3712,"implemented":true,"kind":"function","modifiers":[],"name":"approveAndCallRelaxed","nameLocation":"6878:21:46","nodeType":"FunctionDefinition","parameters":{"id":3680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3673,"mutability":"mutable","name":"token","nameLocation":"6909:5:46","nodeType":"VariableDeclaration","scope":3712,"src":"6900:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"},"typeName":{"id":3672,"nodeType":"UserDefinedTypeName","pathNode":{"id":3671,"name":"IERC1363","nameLocations":["6900:8:46"],"nodeType":"IdentifierPath","referencedDeclaration":3300,"src":"6900:8:46"},"referencedDeclaration":3300,"src":"6900:8:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$3300","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":3675,"mutability":"mutable","name":"to","nameLocation":"6924:2:46","nodeType":"VariableDeclaration","scope":3712,"src":"6916:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3674,"name":"address","nodeType":"ElementaryTypeName","src":"6916:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3677,"mutability":"mutable","name":"value","nameLocation":"6936:5:46","nodeType":"VariableDeclaration","scope":3712,"src":"6928:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3676,"name":"uint256","nodeType":"ElementaryTypeName","src":"6928:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3679,"mutability":"mutable","name":"data","nameLocation":"6956:4:46","nodeType":"VariableDeclaration","scope":3712,"src":"6943:17:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3678,"name":"bytes","nodeType":"ElementaryTypeName","src":"6943:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6899:62:46"},"returnParameters":{"id":3681,"nodeType":"ParameterList","parameters":[],"src":"6971:0:46"},"scope":3795,"src":"6869:320:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3752,"nodeType":"Block","src":"7756:650:46","statements":[{"assignments":[3722],"declarations":[{"constant":false,"id":3722,"mutability":"mutable","name":"returnSize","nameLocation":"7774:10:46","nodeType":"VariableDeclaration","scope":3752,"src":"7766:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3721,"name":"uint256","nodeType":"ElementaryTypeName","src":"7766:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3723,"nodeType":"VariableDeclarationStatement","src":"7766:18:46"},{"assignments":[3725],"declarations":[{"constant":false,"id":3725,"mutability":"mutable","name":"returnValue","nameLocation":"7802:11:46","nodeType":"VariableDeclaration","scope":3752,"src":"7794:19:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3724,"name":"uint256","nodeType":"ElementaryTypeName","src":"7794:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3726,"nodeType":"VariableDeclarationStatement","src":"7794:19:46"},{"AST":{"nativeSrc":"7848:396:46","nodeType":"YulBlock","src":"7848:396:46","statements":[{"nativeSrc":"7862:75:46","nodeType":"YulVariableDeclaration","src":"7862:75:46","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"7882:3:46","nodeType":"YulIdentifier","src":"7882:3:46"},"nativeSrc":"7882:5:46","nodeType":"YulFunctionCall","src":"7882:5:46"},{"name":"token","nativeSrc":"7889:5:46","nodeType":"YulIdentifier","src":"7889:5:46"},{"kind":"number","nativeSrc":"7896:1:46","nodeType":"YulLiteral","src":"7896:1:46","type":"","value":"0"},{"arguments":[{"name":"data","nativeSrc":"7903:4:46","nodeType":"YulIdentifier","src":"7903:4:46"},{"kind":"number","nativeSrc":"7909:4:46","nodeType":"YulLiteral","src":"7909:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7899:3:46","nodeType":"YulIdentifier","src":"7899:3:46"},"nativeSrc":"7899:15:46","nodeType":"YulFunctionCall","src":"7899:15:46"},{"arguments":[{"name":"data","nativeSrc":"7922:4:46","nodeType":"YulIdentifier","src":"7922:4:46"}],"functionName":{"name":"mload","nativeSrc":"7916:5:46","nodeType":"YulIdentifier","src":"7916:5:46"},"nativeSrc":"7916:11:46","nodeType":"YulFunctionCall","src":"7916:11:46"},{"kind":"number","nativeSrc":"7929:1:46","nodeType":"YulLiteral","src":"7929:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"7932:4:46","nodeType":"YulLiteral","src":"7932:4:46","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"7877:4:46","nodeType":"YulIdentifier","src":"7877:4:46"},"nativeSrc":"7877:60:46","nodeType":"YulFunctionCall","src":"7877:60:46"},"variables":[{"name":"success","nativeSrc":"7866:7:46","nodeType":"YulTypedName","src":"7866:7:46","type":""}]},{"body":{"nativeSrc":"7998:157:46","nodeType":"YulBlock","src":"7998:157:46","statements":[{"nativeSrc":"8016:22:46","nodeType":"YulVariableDeclaration","src":"8016:22:46","value":{"arguments":[{"kind":"number","nativeSrc":"8033:4:46","nodeType":"YulLiteral","src":"8033:4:46","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"8027:5:46","nodeType":"YulIdentifier","src":"8027:5:46"},"nativeSrc":"8027:11:46","nodeType":"YulFunctionCall","src":"8027:11:46"},"variables":[{"name":"ptr","nativeSrc":"8020:3:46","nodeType":"YulTypedName","src":"8020:3:46","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8070:3:46","nodeType":"YulIdentifier","src":"8070:3:46"},{"kind":"number","nativeSrc":"8075:1:46","nodeType":"YulLiteral","src":"8075:1:46","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8078:14:46","nodeType":"YulIdentifier","src":"8078:14:46"},"nativeSrc":"8078:16:46","nodeType":"YulFunctionCall","src":"8078:16:46"}],"functionName":{"name":"returndatacopy","nativeSrc":"8055:14:46","nodeType":"YulIdentifier","src":"8055:14:46"},"nativeSrc":"8055:40:46","nodeType":"YulFunctionCall","src":"8055:40:46"},"nativeSrc":"8055:40:46","nodeType":"YulExpressionStatement","src":"8055:40:46"},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8119:3:46","nodeType":"YulIdentifier","src":"8119:3:46"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8124:14:46","nodeType":"YulIdentifier","src":"8124:14:46"},"nativeSrc":"8124:16:46","nodeType":"YulFunctionCall","src":"8124:16:46"}],"functionName":{"name":"revert","nativeSrc":"8112:6:46","nodeType":"YulIdentifier","src":"8112:6:46"},"nativeSrc":"8112:29:46","nodeType":"YulFunctionCall","src":"8112:29:46"},"nativeSrc":"8112:29:46","nodeType":"YulExpressionStatement","src":"8112:29:46"}]},"condition":{"arguments":[{"name":"success","nativeSrc":"7989:7:46","nodeType":"YulIdentifier","src":"7989:7:46"}],"functionName":{"name":"iszero","nativeSrc":"7982:6:46","nodeType":"YulIdentifier","src":"7982:6:46"},"nativeSrc":"7982:15:46","nodeType":"YulFunctionCall","src":"7982:15:46"},"nativeSrc":"7979:176:46","nodeType":"YulIf","src":"7979:176:46"},{"nativeSrc":"8168:30:46","nodeType":"YulAssignment","src":"8168:30:46","value":{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8182:14:46","nodeType":"YulIdentifier","src":"8182:14:46"},"nativeSrc":"8182:16:46","nodeType":"YulFunctionCall","src":"8182:16:46"},"variableNames":[{"name":"returnSize","nativeSrc":"8168:10:46","nodeType":"YulIdentifier","src":"8168:10:46"}]},{"nativeSrc":"8211:23:46","nodeType":"YulAssignment","src":"8211:23:46","value":{"arguments":[{"kind":"number","nativeSrc":"8232:1:46","nodeType":"YulLiteral","src":"8232:1:46","type":"","value":"0"}],"functionName":{"name":"mload","nativeSrc":"8226:5:46","nodeType":"YulIdentifier","src":"8226:5:46"},"nativeSrc":"8226:8:46","nodeType":"YulFunctionCall","src":"8226:8:46"},"variableNames":[{"name":"returnValue","nativeSrc":"8211:11:46","nodeType":"YulIdentifier","src":"8211:11:46"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3718,"isOffset":false,"isSlot":false,"src":"7903:4:46","valueSize":1},{"declaration":3718,"isOffset":false,"isSlot":false,"src":"7922:4:46","valueSize":1},{"declaration":3722,"isOffset":false,"isSlot":false,"src":"8168:10:46","valueSize":1},{"declaration":3725,"isOffset":false,"isSlot":false,"src":"8211:11:46","valueSize":1},{"declaration":3716,"isOffset":false,"isSlot":false,"src":"7889:5:46","valueSize":1}],"flags":["memory-safe"],"id":3727,"nodeType":"InlineAssembly","src":"7823:421:46"},{"condition":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3728,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"8258:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8272:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8258:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3739,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"8310:11:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":3740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8325:1:46","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8310:16:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8258:68:46","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":3733,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"8284:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}],"id":3732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8276:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3731,"name":"address","nodeType":"ElementaryTypeName","src":"8276:7:46","typeDescriptions":{}}},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8276:14:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8291:4:46","memberName":"code","nodeType":"MemberAccess","src":"8276:19:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8296:6:46","memberName":"length","nodeType":"MemberAccess","src":"8276:26:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8306:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8276:31:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3751,"nodeType":"IfStatement","src":"8254:146:46","trueBody":{"id":3750,"nodeType":"Block","src":"8328:72:46","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3746,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"8382:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}],"id":3745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8374:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3744,"name":"address","nodeType":"ElementaryTypeName","src":"8374:7:46","typeDescriptions":{}}},"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8374:14:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3743,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"8349:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8349:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3749,"nodeType":"RevertStatement","src":"8342:47:46"}]}}]},"documentation":{"id":3713,"nodeType":"StructuredDocumentation","src":"7195:486:46","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."},"id":3753,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"7695:19:46","nodeType":"FunctionDefinition","parameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3716,"mutability":"mutable","name":"token","nameLocation":"7722:5:46","nodeType":"VariableDeclaration","scope":3753,"src":"7715:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":3715,"nodeType":"UserDefinedTypeName","pathNode":{"id":3714,"name":"IERC20","nameLocations":["7715:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"7715:6:46"},"referencedDeclaration":3386,"src":"7715:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3718,"mutability":"mutable","name":"data","nameLocation":"7742:4:46","nodeType":"VariableDeclaration","scope":3753,"src":"7729:17:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3717,"name":"bytes","nodeType":"ElementaryTypeName","src":"7729:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7714:33:46"},"returnParameters":{"id":3720,"nodeType":"ParameterList","parameters":[],"src":"7756:0:46"},"scope":3795,"src":"7686:720:46","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3793,"nodeType":"Block","src":"8997:391:46","statements":[{"assignments":[3765],"declarations":[{"constant":false,"id":3765,"mutability":"mutable","name":"success","nameLocation":"9012:7:46","nodeType":"VariableDeclaration","scope":3793,"src":"9007:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3764,"name":"bool","nodeType":"ElementaryTypeName","src":"9007:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3766,"nodeType":"VariableDeclarationStatement","src":"9007:12:46"},{"assignments":[3768],"declarations":[{"constant":false,"id":3768,"mutability":"mutable","name":"returnSize","nameLocation":"9037:10:46","nodeType":"VariableDeclaration","scope":3793,"src":"9029:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3767,"name":"uint256","nodeType":"ElementaryTypeName","src":"9029:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3769,"nodeType":"VariableDeclarationStatement","src":"9029:18:46"},{"assignments":[3771],"declarations":[{"constant":false,"id":3771,"mutability":"mutable","name":"returnValue","nameLocation":"9065:11:46","nodeType":"VariableDeclaration","scope":3793,"src":"9057:19:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3770,"name":"uint256","nodeType":"ElementaryTypeName","src":"9057:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3772,"nodeType":"VariableDeclarationStatement","src":"9057:19:46"},{"AST":{"nativeSrc":"9111:174:46","nodeType":"YulBlock","src":"9111:174:46","statements":[{"nativeSrc":"9125:71:46","nodeType":"YulAssignment","src":"9125:71:46","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"9141:3:46","nodeType":"YulIdentifier","src":"9141:3:46"},"nativeSrc":"9141:5:46","nodeType":"YulFunctionCall","src":"9141:5:46"},{"name":"token","nativeSrc":"9148:5:46","nodeType":"YulIdentifier","src":"9148:5:46"},{"kind":"number","nativeSrc":"9155:1:46","nodeType":"YulLiteral","src":"9155:1:46","type":"","value":"0"},{"arguments":[{"name":"data","nativeSrc":"9162:4:46","nodeType":"YulIdentifier","src":"9162:4:46"},{"kind":"number","nativeSrc":"9168:4:46","nodeType":"YulLiteral","src":"9168:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9158:3:46","nodeType":"YulIdentifier","src":"9158:3:46"},"nativeSrc":"9158:15:46","nodeType":"YulFunctionCall","src":"9158:15:46"},{"arguments":[{"name":"data","nativeSrc":"9181:4:46","nodeType":"YulIdentifier","src":"9181:4:46"}],"functionName":{"name":"mload","nativeSrc":"9175:5:46","nodeType":"YulIdentifier","src":"9175:5:46"},"nativeSrc":"9175:11:46","nodeType":"YulFunctionCall","src":"9175:11:46"},{"kind":"number","nativeSrc":"9188:1:46","nodeType":"YulLiteral","src":"9188:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"9191:4:46","nodeType":"YulLiteral","src":"9191:4:46","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"9136:4:46","nodeType":"YulIdentifier","src":"9136:4:46"},"nativeSrc":"9136:60:46","nodeType":"YulFunctionCall","src":"9136:60:46"},"variableNames":[{"name":"success","nativeSrc":"9125:7:46","nodeType":"YulIdentifier","src":"9125:7:46"}]},{"nativeSrc":"9209:30:46","nodeType":"YulAssignment","src":"9209:30:46","value":{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"9223:14:46","nodeType":"YulIdentifier","src":"9223:14:46"},"nativeSrc":"9223:16:46","nodeType":"YulFunctionCall","src":"9223:16:46"},"variableNames":[{"name":"returnSize","nativeSrc":"9209:10:46","nodeType":"YulIdentifier","src":"9209:10:46"}]},{"nativeSrc":"9252:23:46","nodeType":"YulAssignment","src":"9252:23:46","value":{"arguments":[{"kind":"number","nativeSrc":"9273:1:46","nodeType":"YulLiteral","src":"9273:1:46","type":"","value":"0"}],"functionName":{"name":"mload","nativeSrc":"9267:5:46","nodeType":"YulIdentifier","src":"9267:5:46"},"nativeSrc":"9267:8:46","nodeType":"YulFunctionCall","src":"9267:8:46"},"variableNames":[{"name":"returnValue","nativeSrc":"9252:11:46","nodeType":"YulIdentifier","src":"9252:11:46"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3759,"isOffset":false,"isSlot":false,"src":"9162:4:46","valueSize":1},{"declaration":3759,"isOffset":false,"isSlot":false,"src":"9181:4:46","valueSize":1},{"declaration":3768,"isOffset":false,"isSlot":false,"src":"9209:10:46","valueSize":1},{"declaration":3771,"isOffset":false,"isSlot":false,"src":"9252:11:46","valueSize":1},{"declaration":3765,"isOffset":false,"isSlot":false,"src":"9125:7:46","valueSize":1},{"declaration":3757,"isOffset":false,"isSlot":false,"src":"9148:5:46","valueSize":1}],"flags":["memory-safe"],"id":3773,"nodeType":"InlineAssembly","src":"9086:199:46"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3774,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"9301:7:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3775,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"9313:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9327:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9313:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3786,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"9364:11:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9379:1:46","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9364:16:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9313:67:46","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":3780,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"9339:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}],"id":3779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9331:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3778,"name":"address","nodeType":"ElementaryTypeName","src":"9331:7:46","typeDescriptions":{}}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9331:14:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9346:4:46","memberName":"code","nodeType":"MemberAccess","src":"9331:19:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9351:6:46","memberName":"length","nodeType":"MemberAccess","src":"9331:26:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9331:30:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3790,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9312:69:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9301:80:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3763,"id":3792,"nodeType":"Return","src":"9294:87:46"}]},"documentation":{"id":3754,"nodeType":"StructuredDocumentation","src":"8412:491:46","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."},"id":3794,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"8917:23:46","nodeType":"FunctionDefinition","parameters":{"id":3760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3757,"mutability":"mutable","name":"token","nameLocation":"8948:5:46","nodeType":"VariableDeclaration","scope":3794,"src":"8941:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":3756,"nodeType":"UserDefinedTypeName","pathNode":{"id":3755,"name":"IERC20","nameLocations":["8941:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"8941:6:46"},"referencedDeclaration":3386,"src":"8941:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3759,"mutability":"mutable","name":"data","nameLocation":"8968:4:46","nodeType":"VariableDeclaration","scope":3794,"src":"8955:17:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3758,"name":"bytes","nodeType":"ElementaryTypeName","src":"8955:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8940:33:46"},"returnParameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3794,"src":"8991:4:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3761,"name":"bool","nodeType":"ElementaryTypeName","src":"8991:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8990:6:46"},"scope":3795,"src":"8908:480:46","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3796,"src":"698:8692:46","usedErrors":[3398,3407],"usedEvents":[]}],"src":"115:9276:46"},"id":46},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[4055],"Errors":[4107]},"id":4056,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3797,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:47"},{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","file":"./Errors.sol","id":3799,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4056,"sourceUnit":4108,"src":"127:36:47","symbolAliases":[{"foreign":{"id":3798,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"135:6:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3800,"nodeType":"StructuredDocumentation","src":"165:67:47","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":4055,"linearizedBaseContracts":[4055],"name":"Address","nameLocation":"241:7:47","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3801,"nodeType":"StructuredDocumentation","src":"255:75:47","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":3805,"name":"AddressEmptyCode","nameLocation":"341:16:47","nodeType":"ErrorDefinition","parameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3803,"mutability":"mutable","name":"target","nameLocation":"366:6:47","nodeType":"VariableDeclaration","scope":3805,"src":"358:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3802,"name":"address","nodeType":"ElementaryTypeName","src":"358:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"357:16:47"},"src":"335:39:47"},{"body":{"id":3852,"nodeType":"Block","src":"1361:294:47","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3815,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1383:4:47","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}],"id":3814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1375:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3813,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:47","typeDescriptions":{}}},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1375:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1389:7:47","memberName":"balance","nodeType":"MemberAccess","src":"1375:21:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3818,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"1399:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1375:30:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3832,"nodeType":"IfStatement","src":"1371:125:47","trueBody":{"id":3831,"nodeType":"Block","src":"1407:89:47","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":3825,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1463:4:47","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}],"id":3824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1455:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3823,"name":"address","nodeType":"ElementaryTypeName","src":"1455:7:47","typeDescriptions":{}}},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1469:7:47","memberName":"balance","nodeType":"MemberAccess","src":"1455:21:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3828,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"1478:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3820,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"1428:6:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$4107_$","typeString":"type(library Errors)"}},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:19:47","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"1428:26:47","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1428:57:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3830,"nodeType":"RevertStatement","src":"1421:64:47"}]}},{"assignments":[3834,3836],"declarations":[{"constant":false,"id":3834,"mutability":"mutable","name":"success","nameLocation":"1512:7:47","nodeType":"VariableDeclaration","scope":3852,"src":"1507:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3833,"name":"bool","nodeType":"ElementaryTypeName","src":"1507:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3836,"mutability":"mutable","name":"returndata","nameLocation":"1534:10:47","nodeType":"VariableDeclaration","scope":3852,"src":"1521:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3835,"name":"bytes","nodeType":"ElementaryTypeName","src":"1521:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3843,"initialValue":{"arguments":[{"hexValue":"","id":3841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1578:2:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3837,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3808,"src":"1548:9:47","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1558:4:47","memberName":"call","nodeType":"MemberAccess","src":"1548:14:47","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3839,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"1570:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1548:29:47","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1506:75:47"},{"condition":{"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1595:8:47","subExpression":{"id":3844,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"1596:7:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3851,"nodeType":"IfStatement","src":"1591:58:47","trueBody":{"id":3850,"nodeType":"Block","src":"1605:44:47","statements":[{"expression":{"arguments":[{"id":3847,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"1627:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3846,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4054,"src":"1619:7:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1619:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3849,"nodeType":"ExpressionStatement","src":"1619:19:47"}]}}]},"documentation":{"id":3806,"nodeType":"StructuredDocumentation","src":"380:905:47","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3853,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1299:9:47","nodeType":"FunctionDefinition","parameters":{"id":3811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3808,"mutability":"mutable","name":"recipient","nameLocation":"1325:9:47","nodeType":"VariableDeclaration","scope":3853,"src":"1309:25:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3807,"name":"address","nodeType":"ElementaryTypeName","src":"1309:15:47","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3810,"mutability":"mutable","name":"amount","nameLocation":"1344:6:47","nodeType":"VariableDeclaration","scope":3853,"src":"1336:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3809,"name":"uint256","nodeType":"ElementaryTypeName","src":"1336:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1308:43:47"},"returnParameters":{"id":3812,"nodeType":"ParameterList","parameters":[],"src":"1361:0:47"},"scope":4055,"src":"1290:365:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3869,"nodeType":"Block","src":"2589:62:47","statements":[{"expression":{"arguments":[{"id":3864,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"2628:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3865,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"2636:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2642:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3863,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"2606:21:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2606:38:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3862,"id":3868,"nodeType":"Return","src":"2599:45:47"}]},"documentation":{"id":3854,"nodeType":"StructuredDocumentation","src":"1661:834:47","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {Errors.FailedCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":3870,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2509:12:47","nodeType":"FunctionDefinition","parameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3856,"mutability":"mutable","name":"target","nameLocation":"2530:6:47","nodeType":"VariableDeclaration","scope":3870,"src":"2522:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3855,"name":"address","nodeType":"ElementaryTypeName","src":"2522:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3858,"mutability":"mutable","name":"data","nameLocation":"2551:4:47","nodeType":"VariableDeclaration","scope":3870,"src":"2538:17:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3857,"name":"bytes","nodeType":"ElementaryTypeName","src":"2538:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2521:35:47"},"returnParameters":{"id":3862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3870,"src":"2575:12:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3860,"name":"bytes","nodeType":"ElementaryTypeName","src":"2575:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2574:14:47"},"scope":4055,"src":"2500:151:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3919,"nodeType":"Block","src":"3088:294:47","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3884,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3110:4:47","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}],"id":3883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3102:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3882,"name":"address","nodeType":"ElementaryTypeName","src":"3102:7:47","typeDescriptions":{}}},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3102:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3116:7:47","memberName":"balance","nodeType":"MemberAccess","src":"3102:21:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3887,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"3126:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3102:29:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3901,"nodeType":"IfStatement","src":"3098:123:47","trueBody":{"id":3900,"nodeType":"Block","src":"3133:88:47","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":3894,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3189:4:47","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4055","typeString":"library Address"}],"id":3893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3181:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3892,"name":"address","nodeType":"ElementaryTypeName","src":"3181:7:47","typeDescriptions":{}}},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3181:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3195:7:47","memberName":"balance","nodeType":"MemberAccess","src":"3181:21:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"3204:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3889,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"3154:6:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$4107_$","typeString":"type(library Errors)"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3161:19:47","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":4095,"src":"3154:26:47","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3154:56:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3899,"nodeType":"RevertStatement","src":"3147:63:47"}]}},{"assignments":[3903,3905],"declarations":[{"constant":false,"id":3903,"mutability":"mutable","name":"success","nameLocation":"3236:7:47","nodeType":"VariableDeclaration","scope":3919,"src":"3231:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3902,"name":"bool","nodeType":"ElementaryTypeName","src":"3231:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3905,"mutability":"mutable","name":"returndata","nameLocation":"3258:10:47","nodeType":"VariableDeclaration","scope":3919,"src":"3245:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3904,"name":"bytes","nodeType":"ElementaryTypeName","src":"3245:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3912,"initialValue":{"arguments":[{"id":3910,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"3298:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3906,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"3272:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3279:4:47","memberName":"call","nodeType":"MemberAccess","src":"3272:11:47","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"3291:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3272:25:47","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3272:31:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3230:73:47"},{"expression":{"arguments":[{"id":3914,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"3347:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3915,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"3355:7:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3916,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"3364:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3913,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"3320:26:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3320:55:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3881,"id":3918,"nodeType":"Return","src":"3313:62:47"}]},"documentation":{"id":3871,"nodeType":"StructuredDocumentation","src":"2657:313:47","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":3920,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"2984:21:47","nodeType":"FunctionDefinition","parameters":{"id":3878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3873,"mutability":"mutable","name":"target","nameLocation":"3014:6:47","nodeType":"VariableDeclaration","scope":3920,"src":"3006:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3872,"name":"address","nodeType":"ElementaryTypeName","src":"3006:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3875,"mutability":"mutable","name":"data","nameLocation":"3035:4:47","nodeType":"VariableDeclaration","scope":3920,"src":"3022:17:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3874,"name":"bytes","nodeType":"ElementaryTypeName","src":"3022:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3877,"mutability":"mutable","name":"value","nameLocation":"3049:5:47","nodeType":"VariableDeclaration","scope":3920,"src":"3041:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3876,"name":"uint256","nodeType":"ElementaryTypeName","src":"3041:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3005:50:47"},"returnParameters":{"id":3881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3920,"src":"3074:12:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3879,"name":"bytes","nodeType":"ElementaryTypeName","src":"3074:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3073:14:47"},"scope":4055,"src":"2975:407:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3945,"nodeType":"Block","src":"3621:154:47","statements":[{"assignments":[3931,3933],"declarations":[{"constant":false,"id":3931,"mutability":"mutable","name":"success","nameLocation":"3637:7:47","nodeType":"VariableDeclaration","scope":3945,"src":"3632:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3930,"name":"bool","nodeType":"ElementaryTypeName","src":"3632:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3933,"mutability":"mutable","name":"returndata","nameLocation":"3659:10:47","nodeType":"VariableDeclaration","scope":3945,"src":"3646:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3932,"name":"bytes","nodeType":"ElementaryTypeName","src":"3646:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3938,"initialValue":{"arguments":[{"id":3936,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3925,"src":"3691:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3934,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"3673:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3680:10:47","memberName":"staticcall","nodeType":"MemberAccess","src":"3673:17:47","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3673:23:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3631:65:47"},{"expression":{"arguments":[{"id":3940,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"3740:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3941,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3931,"src":"3748:7:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3942,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"3757:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3939,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"3713:26:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3713:55:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3929,"id":3944,"nodeType":"Return","src":"3706:62:47"}]},"documentation":{"id":3921,"nodeType":"StructuredDocumentation","src":"3388:128:47","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":3946,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3530:18:47","nodeType":"FunctionDefinition","parameters":{"id":3926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3923,"mutability":"mutable","name":"target","nameLocation":"3557:6:47","nodeType":"VariableDeclaration","scope":3946,"src":"3549:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3922,"name":"address","nodeType":"ElementaryTypeName","src":"3549:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3925,"mutability":"mutable","name":"data","nameLocation":"3578:4:47","nodeType":"VariableDeclaration","scope":3946,"src":"3565:17:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3924,"name":"bytes","nodeType":"ElementaryTypeName","src":"3565:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3548:35:47"},"returnParameters":{"id":3929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3946,"src":"3607:12:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3927,"name":"bytes","nodeType":"ElementaryTypeName","src":"3607:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3606:14:47"},"scope":4055,"src":"3521:254:47","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3971,"nodeType":"Block","src":"4013:156:47","statements":[{"assignments":[3957,3959],"declarations":[{"constant":false,"id":3957,"mutability":"mutable","name":"success","nameLocation":"4029:7:47","nodeType":"VariableDeclaration","scope":3971,"src":"4024:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3956,"name":"bool","nodeType":"ElementaryTypeName","src":"4024:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3959,"mutability":"mutable","name":"returndata","nameLocation":"4051:10:47","nodeType":"VariableDeclaration","scope":3971,"src":"4038:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3958,"name":"bytes","nodeType":"ElementaryTypeName","src":"4038:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3964,"initialValue":{"arguments":[{"id":3962,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"4085:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3960,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"4065:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4072:12:47","memberName":"delegatecall","nodeType":"MemberAccess","src":"4065:19:47","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4065:25:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4023:67:47"},{"expression":{"arguments":[{"id":3966,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"4134:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3967,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"4142:7:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3968,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"4151:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3965,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"4107:26:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":3969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4107:55:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3955,"id":3970,"nodeType":"Return","src":"4100:62:47"}]},"documentation":{"id":3947,"nodeType":"StructuredDocumentation","src":"3781:130:47","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":3972,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"3925:20:47","nodeType":"FunctionDefinition","parameters":{"id":3952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3949,"mutability":"mutable","name":"target","nameLocation":"3954:6:47","nodeType":"VariableDeclaration","scope":3972,"src":"3946:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3948,"name":"address","nodeType":"ElementaryTypeName","src":"3946:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3951,"mutability":"mutable","name":"data","nameLocation":"3975:4:47","nodeType":"VariableDeclaration","scope":3972,"src":"3962:17:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3950,"name":"bytes","nodeType":"ElementaryTypeName","src":"3962:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3945:35:47"},"returnParameters":{"id":3955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3972,"src":"3999:12:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3953,"name":"bytes","nodeType":"ElementaryTypeName","src":"3999:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3998:14:47"},"scope":4055,"src":"3916:253:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4011,"nodeType":"Block","src":"4595:424:47","statements":[{"condition":{"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4609:8:47","subExpression":{"id":3984,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"4610:7:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4009,"nodeType":"Block","src":"4669:344:47","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3991,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"4857:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4868:6:47","memberName":"length","nodeType":"MemberAccess","src":"4857:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4878:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4857:22:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3995,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"4883:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4890:4:47","memberName":"code","nodeType":"MemberAccess","src":"4883:11:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4895:6:47","memberName":"length","nodeType":"MemberAccess","src":"4883:18:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4905:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4883:23:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4857:49:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4006,"nodeType":"IfStatement","src":"4853:119:47","trueBody":{"id":4005,"nodeType":"Block","src":"4908:64:47","statements":[{"errorCall":{"arguments":[{"id":4002,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"4950:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4001,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3805,"src":"4933:16:47","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4933:24:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4004,"nodeType":"RevertStatement","src":"4926:31:47"}]}},{"expression":{"id":4007,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"4992:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3983,"id":4008,"nodeType":"Return","src":"4985:17:47"}]},"id":4010,"nodeType":"IfStatement","src":"4605:408:47","trueBody":{"id":3990,"nodeType":"Block","src":"4619:44:47","statements":[{"expression":{"arguments":[{"id":3987,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"4641:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3986,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4054,"src":"4633:7:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4633:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3989,"nodeType":"ExpressionStatement","src":"4633:19:47"}]}}]},"documentation":{"id":3973,"nodeType":"StructuredDocumentation","src":"4175:257:47","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n of an unsuccessful call."},"id":4012,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4446:26:47","nodeType":"FunctionDefinition","parameters":{"id":3980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3975,"mutability":"mutable","name":"target","nameLocation":"4490:6:47","nodeType":"VariableDeclaration","scope":4012,"src":"4482:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3974,"name":"address","nodeType":"ElementaryTypeName","src":"4482:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3977,"mutability":"mutable","name":"success","nameLocation":"4511:7:47","nodeType":"VariableDeclaration","scope":4012,"src":"4506:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3976,"name":"bool","nodeType":"ElementaryTypeName","src":"4506:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3979,"mutability":"mutable","name":"returndata","nameLocation":"4541:10:47","nodeType":"VariableDeclaration","scope":4012,"src":"4528:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3978,"name":"bytes","nodeType":"ElementaryTypeName","src":"4528:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4472:85:47"},"returnParameters":{"id":3983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4012,"src":"4581:12:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3981,"name":"bytes","nodeType":"ElementaryTypeName","src":"4581:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4580:14:47"},"scope":4055,"src":"4437:582:47","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4033,"nodeType":"Block","src":"5323:122:47","statements":[{"condition":{"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5337:8:47","subExpression":{"id":4022,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"5338:7:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4031,"nodeType":"Block","src":"5397:42:47","statements":[{"expression":{"id":4029,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5418:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4021,"id":4030,"nodeType":"Return","src":"5411:17:47"}]},"id":4032,"nodeType":"IfStatement","src":"5333:106:47","trueBody":{"id":4028,"nodeType":"Block","src":"5347:44:47","statements":[{"expression":{"arguments":[{"id":4025,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"5369:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4024,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4054,"src":"5361:7:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5361:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4027,"nodeType":"ExpressionStatement","src":"5361:19:47"}]}}]},"documentation":{"id":4013,"nodeType":"StructuredDocumentation","src":"5025:191:47","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {Errors.FailedCall} error."},"id":4034,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5230:16:47","nodeType":"FunctionDefinition","parameters":{"id":4018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4015,"mutability":"mutable","name":"success","nameLocation":"5252:7:47","nodeType":"VariableDeclaration","scope":4034,"src":"5247:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4014,"name":"bool","nodeType":"ElementaryTypeName","src":"5247:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4017,"mutability":"mutable","name":"returndata","nameLocation":"5274:10:47","nodeType":"VariableDeclaration","scope":4034,"src":"5261:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4016,"name":"bytes","nodeType":"ElementaryTypeName","src":"5261:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5246:39:47"},"returnParameters":{"id":4021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4034,"src":"5309:12:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4019,"name":"bytes","nodeType":"ElementaryTypeName","src":"5309:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5308:14:47"},"scope":4055,"src":"5221:224:47","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4053,"nodeType":"Block","src":"5614:432:47","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4040,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4037,"src":"5690:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5701:6:47","memberName":"length","nodeType":"MemberAccess","src":"5690:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5710:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5690:21:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4051,"nodeType":"Block","src":"5989:51:47","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4046,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"6010:6:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$4107_$","typeString":"type(library Errors)"}},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6017:10:47","memberName":"FailedCall","nodeType":"MemberAccess","referencedDeclaration":4098,"src":"6010:17:47","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6010:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4050,"nodeType":"RevertStatement","src":"6003:26:47"}]},"id":4052,"nodeType":"IfStatement","src":"5686:354:47","trueBody":{"id":4045,"nodeType":"Block","src":"5713:270:47","statements":[{"AST":{"nativeSrc":"5840:133:47","nodeType":"YulBlock","src":"5840:133:47","statements":[{"nativeSrc":"5858:40:47","nodeType":"YulVariableDeclaration","src":"5858:40:47","value":{"arguments":[{"name":"returndata","nativeSrc":"5887:10:47","nodeType":"YulIdentifier","src":"5887:10:47"}],"functionName":{"name":"mload","nativeSrc":"5881:5:47","nodeType":"YulIdentifier","src":"5881:5:47"},"nativeSrc":"5881:17:47","nodeType":"YulFunctionCall","src":"5881:17:47"},"variables":[{"name":"returndata_size","nativeSrc":"5862:15:47","nodeType":"YulTypedName","src":"5862:15:47","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5926:2:47","nodeType":"YulLiteral","src":"5926:2:47","type":"","value":"32"},{"name":"returndata","nativeSrc":"5930:10:47","nodeType":"YulIdentifier","src":"5930:10:47"}],"functionName":{"name":"add","nativeSrc":"5922:3:47","nodeType":"YulIdentifier","src":"5922:3:47"},"nativeSrc":"5922:19:47","nodeType":"YulFunctionCall","src":"5922:19:47"},{"name":"returndata_size","nativeSrc":"5943:15:47","nodeType":"YulIdentifier","src":"5943:15:47"}],"functionName":{"name":"revert","nativeSrc":"5915:6:47","nodeType":"YulIdentifier","src":"5915:6:47"},"nativeSrc":"5915:44:47","nodeType":"YulFunctionCall","src":"5915:44:47"},"nativeSrc":"5915:44:47","nodeType":"YulExpressionStatement","src":"5915:44:47"}]},"evmVersion":"paris","externalReferences":[{"declaration":4037,"isOffset":false,"isSlot":false,"src":"5887:10:47","valueSize":1},{"declaration":4037,"isOffset":false,"isSlot":false,"src":"5930:10:47","valueSize":1}],"flags":["memory-safe"],"id":4044,"nodeType":"InlineAssembly","src":"5815:158:47"}]}}]},"documentation":{"id":4035,"nodeType":"StructuredDocumentation","src":"5451:103:47","text":" @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}."},"id":4054,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5568:7:47","nodeType":"FunctionDefinition","parameters":{"id":4038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4037,"mutability":"mutable","name":"returndata","nameLocation":"5589:10:47","nodeType":"VariableDeclaration","scope":4054,"src":"5576:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4036,"name":"bytes","nodeType":"ElementaryTypeName","src":"5576:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5575:25:47"},"returnParameters":{"id":4039,"nodeType":"ParameterList","parameters":[],"src":"5614:0:47"},"scope":4055,"src":"5559:487:47","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4056,"src":"233:5815:47","usedErrors":[3805],"usedEvents":[]}],"src":"101:5948:47"},"id":47},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[4085]},"id":4086,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4057,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:48"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":4058,"nodeType":"StructuredDocumentation","src":"127:496:48","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":4085,"linearizedBaseContracts":[4085],"name":"Context","nameLocation":"642:7:48","nodeType":"ContractDefinition","nodes":[{"body":{"id":4066,"nodeType":"Block","src":"718:34:48","statements":[{"expression":{"expression":{"id":4063,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:48","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:48","memberName":"sender","nodeType":"MemberAccess","src":"735:10:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4062,"id":4065,"nodeType":"Return","src":"728:17:48"}]},"id":4067,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:48","nodeType":"FunctionDefinition","parameters":{"id":4059,"nodeType":"ParameterList","parameters":[],"src":"675:2:48"},"returnParameters":{"id":4062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4061,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4067,"src":"709:7:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4060,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:48"},"scope":4085,"src":"656:96:48","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4075,"nodeType":"Block","src":"825:32:48","statements":[{"expression":{"expression":{"id":4072,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:48","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:48","memberName":"data","nodeType":"MemberAccess","src":"842:8:48","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4071,"id":4074,"nodeType":"Return","src":"835:15:48"}]},"id":4076,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:48","nodeType":"FunctionDefinition","parameters":{"id":4068,"nodeType":"ParameterList","parameters":[],"src":"775:2:48"},"returnParameters":{"id":4071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4076,"src":"809:14:48","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4069,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:48"},"scope":4085,"src":"758:99:48","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4083,"nodeType":"Block","src":"935:25:48","statements":[{"expression":{"hexValue":"30","id":4081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:48","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4080,"id":4082,"nodeType":"Return","src":"945:8:48"}]},"id":4084,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:48","nodeType":"FunctionDefinition","parameters":{"id":4077,"nodeType":"ParameterList","parameters":[],"src":"892:2:48"},"returnParameters":{"id":4080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4084,"src":"926:7:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4078,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:48"},"scope":4085,"src":"863:97:48","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4086,"src":"624:338:48","usedErrors":[],"usedEvents":[]}],"src":"101:862:48"},"id":48},"@openzeppelin/contracts/utils/Errors.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","exportedSymbols":{"Errors":[4107]},"id":4108,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4087,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"100:24:49"},{"abstract":false,"baseContracts":[],"canonicalName":"Errors","contractDependencies":[],"contractKind":"library","documentation":{"id":4088,"nodeType":"StructuredDocumentation","src":"126:284:49","text":" @dev Collection of common custom errors used in multiple contracts\n IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n It is recommended to avoid relying on the error API for critical functionality.\n _Available since v5.1._"},"fullyImplemented":true,"id":4107,"linearizedBaseContracts":[4107],"name":"Errors","nameLocation":"419:6:49","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4089,"nodeType":"StructuredDocumentation","src":"432:94:49","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cf479181","id":4095,"name":"InsufficientBalance","nameLocation":"537:19:49","nodeType":"ErrorDefinition","parameters":{"id":4094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4091,"mutability":"mutable","name":"balance","nameLocation":"565:7:49","nodeType":"VariableDeclaration","scope":4095,"src":"557:15:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4090,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4093,"mutability":"mutable","name":"needed","nameLocation":"582:6:49","nodeType":"VariableDeclaration","scope":4095,"src":"574:14:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4092,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"556:33:49"},"src":"531:59:49"},{"documentation":{"id":4096,"nodeType":"StructuredDocumentation","src":"596:89:49","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"d6bda275","id":4098,"name":"FailedCall","nameLocation":"696:10:49","nodeType":"ErrorDefinition","parameters":{"id":4097,"nodeType":"ParameterList","parameters":[],"src":"706:2:49"},"src":"690:19:49"},{"documentation":{"id":4099,"nodeType":"StructuredDocumentation","src":"715:46:49","text":" @dev The deployment failed."},"errorSelector":"b06ebf3d","id":4101,"name":"FailedDeployment","nameLocation":"772:16:49","nodeType":"ErrorDefinition","parameters":{"id":4100,"nodeType":"ParameterList","parameters":[],"src":"788:2:49"},"src":"766:25:49"},{"documentation":{"id":4102,"nodeType":"StructuredDocumentation","src":"797:58:49","text":" @dev A necessary precompile is missing."},"errorSelector":"42b01bce","id":4106,"name":"MissingPrecompile","nameLocation":"866:17:49","nodeType":"ErrorDefinition","parameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4106,"src":"884:7:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4103,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:49","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"883:9:49"},"src":"860:33:49"}],"scope":4108,"src":"411:484:49","usedErrors":[4095,4098,4101,4106],"usedEvents":[]}],"src":"100:796:49"},"id":49},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[4176]},"id":4177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4109,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:50"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":4110,"nodeType":"StructuredDocumentation","src":"135:894:50","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":4176,"linearizedBaseContracts":[4176],"name":"ReentrancyGuard","nameLocation":"1048:15:50","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4113,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1843:11:50","nodeType":"VariableDeclaration","scope":4176,"src":"1818:40:50","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4111,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":4112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:1:50","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":4116,"mutability":"constant","name":"ENTERED","nameLocation":"1889:7:50","nodeType":"VariableDeclaration","scope":4176,"src":"1864:36:50","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1899:1:50","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":4118,"mutability":"mutable","name":"_status","nameLocation":"1923:7:50","nodeType":"VariableDeclaration","scope":4176,"src":"1907:23:50","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":4119,"nodeType":"StructuredDocumentation","src":"1937:52:50","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":4121,"name":"ReentrancyGuardReentrantCall","nameLocation":"2000:28:50","nodeType":"ErrorDefinition","parameters":{"id":4120,"nodeType":"ParameterList","parameters":[],"src":"2028:2:50"},"src":"1994:37:50"},{"body":{"id":4128,"nodeType":"Block","src":"2051:38:50","statements":[{"expression":{"id":4126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4124,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"2061:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4125,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2071:11:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:21:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4127,"nodeType":"ExpressionStatement","src":"2061:21:50"}]},"id":4129,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4122,"nodeType":"ParameterList","parameters":[],"src":"2048:2:50"},"returnParameters":{"id":4123,"nodeType":"ParameterList","parameters":[],"src":"2051:0:50"},"scope":4176,"src":"2037:52:50","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4139,"nodeType":"Block","src":"2490:79:50","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4132,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"2500:19:50","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:21:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4134,"nodeType":"ExpressionStatement","src":"2500:21:50"},{"id":4135,"nodeType":"PlaceholderStatement","src":"2531:1:50"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4136,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"2542:18:50","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:20:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4138,"nodeType":"ExpressionStatement","src":"2542:20:50"}]},"documentation":{"id":4130,"nodeType":"StructuredDocumentation","src":"2095:366:50","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":4140,"name":"nonReentrant","nameLocation":"2475:12:50","nodeType":"ModifierDefinition","parameters":{"id":4131,"nodeType":"ParameterList","parameters":[],"src":"2487:2:50"},"src":"2466:103:50","virtual":false,"visibility":"internal"},{"body":{"id":4155,"nodeType":"Block","src":"2614:268:50","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4143,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"2702:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4144,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"2713:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:18:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4150,"nodeType":"IfStatement","src":"2698:86:50","trueBody":{"id":4149,"nodeType":"Block","src":"2722:62:50","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4146,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2743:28:50","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2743:30:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4148,"nodeType":"RevertStatement","src":"2736:37:50"}]}},{"expression":{"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4151,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"2858:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4152,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"2868:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2858:17:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4154,"nodeType":"ExpressionStatement","src":"2858:17:50"}]},"id":4156,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2584:19:50","nodeType":"FunctionDefinition","parameters":{"id":4141,"nodeType":"ParameterList","parameters":[],"src":"2603:2:50"},"returnParameters":{"id":4142,"nodeType":"ParameterList","parameters":[],"src":"2614:0:50"},"scope":4176,"src":"2575:307:50","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4163,"nodeType":"Block","src":"2926:170:50","statements":[{"expression":{"id":4161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4159,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"3068:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4160,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"3078:11:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3068:21:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4162,"nodeType":"ExpressionStatement","src":"3068:21:50"}]},"id":4164,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2897:18:50","nodeType":"FunctionDefinition","parameters":{"id":4157,"nodeType":"ParameterList","parameters":[],"src":"2915:2:50"},"returnParameters":{"id":4158,"nodeType":"ParameterList","parameters":[],"src":"2926:0:50"},"scope":4176,"src":"2888:208:50","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4174,"nodeType":"Block","src":"3339:42:50","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4170,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"3356:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4171,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"3367:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3356:18:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4169,"id":4173,"nodeType":"Return","src":"3349:25:50"}]},"documentation":{"id":4165,"nodeType":"StructuredDocumentation","src":"3102:168:50","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":4175,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3284:23:50","nodeType":"FunctionDefinition","parameters":{"id":4166,"nodeType":"ParameterList","parameters":[],"src":"3307:2:50"},"returnParameters":{"id":4169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4175,"src":"3333:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4167,"name":"bool","nodeType":"ElementaryTypeName","src":"3333:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3332:6:50"},"scope":4176,"src":"3275:106:50","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4177,"src":"1030:2353:50","usedErrors":[4121],"usedEvents":[]}],"src":"109:3275:50"},"id":50},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[4300]},"id":4301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4178,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:51"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":4179,"nodeType":"StructuredDocumentation","src":"219:1187:51","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC-1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":4300,"linearizedBaseContracts":[4300],"name":"StorageSlot","nameLocation":"1415:11:51","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":4182,"members":[{"constant":false,"id":4181,"mutability":"mutable","name":"value","nameLocation":"1470:5:51","nodeType":"VariableDeclaration","scope":4182,"src":"1462:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4180,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1440:11:51","nodeType":"StructDefinition","scope":4300,"src":"1433:49:51","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":4185,"members":[{"constant":false,"id":4184,"mutability":"mutable","name":"value","nameLocation":"1522:5:51","nodeType":"VariableDeclaration","scope":4185,"src":"1517:10:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4183,"name":"bool","nodeType":"ElementaryTypeName","src":"1517:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1495:11:51","nodeType":"StructDefinition","scope":4300,"src":"1488:46:51","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":4188,"members":[{"constant":false,"id":4187,"mutability":"mutable","name":"value","nameLocation":"1577:5:51","nodeType":"VariableDeclaration","scope":4188,"src":"1569:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1569:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1547:11:51","nodeType":"StructDefinition","scope":4300,"src":"1540:49:51","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":4191,"members":[{"constant":false,"id":4190,"mutability":"mutable","name":"value","nameLocation":"1632:5:51","nodeType":"VariableDeclaration","scope":4191,"src":"1624:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4189,"name":"uint256","nodeType":"ElementaryTypeName","src":"1624:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1602:11:51","nodeType":"StructDefinition","scope":4300,"src":"1595:49:51","visibility":"public"},{"canonicalName":"StorageSlot.Int256Slot","id":4194,"members":[{"constant":false,"id":4193,"mutability":"mutable","name":"value","nameLocation":"1685:5:51","nodeType":"VariableDeclaration","scope":4194,"src":"1678:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4192,"name":"int256","nodeType":"ElementaryTypeName","src":"1678:6:51","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"1657:10:51","nodeType":"StructDefinition","scope":4300,"src":"1650:47:51","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":4197,"members":[{"constant":false,"id":4196,"mutability":"mutable","name":"value","nameLocation":"1738:5:51","nodeType":"VariableDeclaration","scope":4197,"src":"1731:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4195,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:51","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1710:10:51","nodeType":"StructDefinition","scope":4300,"src":"1703:47:51","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":4200,"members":[{"constant":false,"id":4199,"mutability":"mutable","name":"value","nameLocation":"1789:5:51","nodeType":"VariableDeclaration","scope":4200,"src":"1783:11:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4198,"name":"bytes","nodeType":"ElementaryTypeName","src":"1783:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1763:9:51","nodeType":"StructDefinition","scope":4300,"src":"1756:45:51","visibility":"public"},{"body":{"id":4210,"nodeType":"Block","src":"1983:79:51","statements":[{"AST":{"nativeSrc":"2018:38:51","nodeType":"YulBlock","src":"2018:38:51","statements":[{"nativeSrc":"2032:14:51","nodeType":"YulAssignment","src":"2032:14:51","value":{"name":"slot","nativeSrc":"2042:4:51","nodeType":"YulIdentifier","src":"2042:4:51"},"variableNames":[{"name":"r.slot","nativeSrc":"2032:6:51","nodeType":"YulIdentifier","src":"2032:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4207,"isOffset":false,"isSlot":true,"src":"2032:6:51","suffix":"slot","valueSize":1},{"declaration":4203,"isOffset":false,"isSlot":false,"src":"2042:4:51","valueSize":1}],"flags":["memory-safe"],"id":4209,"nodeType":"InlineAssembly","src":"1993:63:51"}]},"documentation":{"id":4201,"nodeType":"StructuredDocumentation","src":"1807:87:51","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":4211,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1908:14:51","nodeType":"FunctionDefinition","parameters":{"id":4204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4203,"mutability":"mutable","name":"slot","nameLocation":"1931:4:51","nodeType":"VariableDeclaration","scope":4211,"src":"1923:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4202,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1923:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1922:14:51"},"returnParameters":{"id":4208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4207,"mutability":"mutable","name":"r","nameLocation":"1980:1:51","nodeType":"VariableDeclaration","scope":4211,"src":"1960:21:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4182_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":4206,"nodeType":"UserDefinedTypeName","pathNode":{"id":4205,"name":"AddressSlot","nameLocations":["1960:11:51"],"nodeType":"IdentifierPath","referencedDeclaration":4182,"src":"1960:11:51"},"referencedDeclaration":4182,"src":"1960:11:51","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4182_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1959:23:51"},"scope":4300,"src":"1899:163:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4221,"nodeType":"Block","src":"2243:79:51","statements":[{"AST":{"nativeSrc":"2278:38:51","nodeType":"YulBlock","src":"2278:38:51","statements":[{"nativeSrc":"2292:14:51","nodeType":"YulAssignment","src":"2292:14:51","value":{"name":"slot","nativeSrc":"2302:4:51","nodeType":"YulIdentifier","src":"2302:4:51"},"variableNames":[{"name":"r.slot","nativeSrc":"2292:6:51","nodeType":"YulIdentifier","src":"2292:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4218,"isOffset":false,"isSlot":true,"src":"2292:6:51","suffix":"slot","valueSize":1},{"declaration":4214,"isOffset":false,"isSlot":false,"src":"2302:4:51","valueSize":1}],"flags":["memory-safe"],"id":4220,"nodeType":"InlineAssembly","src":"2253:63:51"}]},"documentation":{"id":4212,"nodeType":"StructuredDocumentation","src":"2068:86:51","text":" @dev Returns a `BooleanSlot` with member `value` located at `slot`."},"id":4222,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2168:14:51","nodeType":"FunctionDefinition","parameters":{"id":4215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4214,"mutability":"mutable","name":"slot","nameLocation":"2191:4:51","nodeType":"VariableDeclaration","scope":4222,"src":"2183:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4213,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2183:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2182:14:51"},"returnParameters":{"id":4219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4218,"mutability":"mutable","name":"r","nameLocation":"2240:1:51","nodeType":"VariableDeclaration","scope":4222,"src":"2220:21:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4185_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":4217,"nodeType":"UserDefinedTypeName","pathNode":{"id":4216,"name":"BooleanSlot","nameLocations":["2220:11:51"],"nodeType":"IdentifierPath","referencedDeclaration":4185,"src":"2220:11:51"},"referencedDeclaration":4185,"src":"2220:11:51","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4185_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2219:23:51"},"scope":4300,"src":"2159:163:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4232,"nodeType":"Block","src":"2503:79:51","statements":[{"AST":{"nativeSrc":"2538:38:51","nodeType":"YulBlock","src":"2538:38:51","statements":[{"nativeSrc":"2552:14:51","nodeType":"YulAssignment","src":"2552:14:51","value":{"name":"slot","nativeSrc":"2562:4:51","nodeType":"YulIdentifier","src":"2562:4:51"},"variableNames":[{"name":"r.slot","nativeSrc":"2552:6:51","nodeType":"YulIdentifier","src":"2552:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4229,"isOffset":false,"isSlot":true,"src":"2552:6:51","suffix":"slot","valueSize":1},{"declaration":4225,"isOffset":false,"isSlot":false,"src":"2562:4:51","valueSize":1}],"flags":["memory-safe"],"id":4231,"nodeType":"InlineAssembly","src":"2513:63:51"}]},"documentation":{"id":4223,"nodeType":"StructuredDocumentation","src":"2328:86:51","text":" @dev Returns a `Bytes32Slot` with member `value` located at `slot`."},"id":4233,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2428:14:51","nodeType":"FunctionDefinition","parameters":{"id":4226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4225,"mutability":"mutable","name":"slot","nameLocation":"2451:4:51","nodeType":"VariableDeclaration","scope":4233,"src":"2443:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2442:14:51"},"returnParameters":{"id":4230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4229,"mutability":"mutable","name":"r","nameLocation":"2500:1:51","nodeType":"VariableDeclaration","scope":4233,"src":"2480:21:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4188_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":4228,"nodeType":"UserDefinedTypeName","pathNode":{"id":4227,"name":"Bytes32Slot","nameLocations":["2480:11:51"],"nodeType":"IdentifierPath","referencedDeclaration":4188,"src":"2480:11:51"},"referencedDeclaration":4188,"src":"2480:11:51","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4188_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2479:23:51"},"scope":4300,"src":"2419:163:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4243,"nodeType":"Block","src":"2763:79:51","statements":[{"AST":{"nativeSrc":"2798:38:51","nodeType":"YulBlock","src":"2798:38:51","statements":[{"nativeSrc":"2812:14:51","nodeType":"YulAssignment","src":"2812:14:51","value":{"name":"slot","nativeSrc":"2822:4:51","nodeType":"YulIdentifier","src":"2822:4:51"},"variableNames":[{"name":"r.slot","nativeSrc":"2812:6:51","nodeType":"YulIdentifier","src":"2812:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4240,"isOffset":false,"isSlot":true,"src":"2812:6:51","suffix":"slot","valueSize":1},{"declaration":4236,"isOffset":false,"isSlot":false,"src":"2822:4:51","valueSize":1}],"flags":["memory-safe"],"id":4242,"nodeType":"InlineAssembly","src":"2773:63:51"}]},"documentation":{"id":4234,"nodeType":"StructuredDocumentation","src":"2588:86:51","text":" @dev Returns a `Uint256Slot` with member `value` located at `slot`."},"id":4244,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2688:14:51","nodeType":"FunctionDefinition","parameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4236,"mutability":"mutable","name":"slot","nameLocation":"2711:4:51","nodeType":"VariableDeclaration","scope":4244,"src":"2703:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2703:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2702:14:51"},"returnParameters":{"id":4241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4240,"mutability":"mutable","name":"r","nameLocation":"2760:1:51","nodeType":"VariableDeclaration","scope":4244,"src":"2740:21:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4191_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":4239,"nodeType":"UserDefinedTypeName","pathNode":{"id":4238,"name":"Uint256Slot","nameLocations":["2740:11:51"],"nodeType":"IdentifierPath","referencedDeclaration":4191,"src":"2740:11:51"},"referencedDeclaration":4191,"src":"2740:11:51","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4191_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2739:23:51"},"scope":4300,"src":"2679:163:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4254,"nodeType":"Block","src":"3020:79:51","statements":[{"AST":{"nativeSrc":"3055:38:51","nodeType":"YulBlock","src":"3055:38:51","statements":[{"nativeSrc":"3069:14:51","nodeType":"YulAssignment","src":"3069:14:51","value":{"name":"slot","nativeSrc":"3079:4:51","nodeType":"YulIdentifier","src":"3079:4:51"},"variableNames":[{"name":"r.slot","nativeSrc":"3069:6:51","nodeType":"YulIdentifier","src":"3069:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4251,"isOffset":false,"isSlot":true,"src":"3069:6:51","suffix":"slot","valueSize":1},{"declaration":4247,"isOffset":false,"isSlot":false,"src":"3079:4:51","valueSize":1}],"flags":["memory-safe"],"id":4253,"nodeType":"InlineAssembly","src":"3030:63:51"}]},"documentation":{"id":4245,"nodeType":"StructuredDocumentation","src":"2848:85:51","text":" @dev Returns a `Int256Slot` with member `value` located at `slot`."},"id":4255,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"2947:13:51","nodeType":"FunctionDefinition","parameters":{"id":4248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4247,"mutability":"mutable","name":"slot","nameLocation":"2969:4:51","nodeType":"VariableDeclaration","scope":4255,"src":"2961:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2961:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2960:14:51"},"returnParameters":{"id":4252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4251,"mutability":"mutable","name":"r","nameLocation":"3017:1:51","nodeType":"VariableDeclaration","scope":4255,"src":"2998:20:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$4194_storage_ptr","typeString":"struct StorageSlot.Int256Slot"},"typeName":{"id":4250,"nodeType":"UserDefinedTypeName","pathNode":{"id":4249,"name":"Int256Slot","nameLocations":["2998:10:51"],"nodeType":"IdentifierPath","referencedDeclaration":4194,"src":"2998:10:51"},"referencedDeclaration":4194,"src":"2998:10:51","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$4194_storage_ptr","typeString":"struct StorageSlot.Int256Slot"}},"visibility":"internal"}],"src":"2997:22:51"},"scope":4300,"src":"2938:161:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4265,"nodeType":"Block","src":"3277:79:51","statements":[{"AST":{"nativeSrc":"3312:38:51","nodeType":"YulBlock","src":"3312:38:51","statements":[{"nativeSrc":"3326:14:51","nodeType":"YulAssignment","src":"3326:14:51","value":{"name":"slot","nativeSrc":"3336:4:51","nodeType":"YulIdentifier","src":"3336:4:51"},"variableNames":[{"name":"r.slot","nativeSrc":"3326:6:51","nodeType":"YulIdentifier","src":"3326:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4262,"isOffset":false,"isSlot":true,"src":"3326:6:51","suffix":"slot","valueSize":1},{"declaration":4258,"isOffset":false,"isSlot":false,"src":"3336:4:51","valueSize":1}],"flags":["memory-safe"],"id":4264,"nodeType":"InlineAssembly","src":"3287:63:51"}]},"documentation":{"id":4256,"nodeType":"StructuredDocumentation","src":"3105:85:51","text":" @dev Returns a `StringSlot` with member `value` located at `slot`."},"id":4266,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3204:13:51","nodeType":"FunctionDefinition","parameters":{"id":4259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4258,"mutability":"mutable","name":"slot","nameLocation":"3226:4:51","nodeType":"VariableDeclaration","scope":4266,"src":"3218:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3218:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3217:14:51"},"returnParameters":{"id":4263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4262,"mutability":"mutable","name":"r","nameLocation":"3274:1:51","nodeType":"VariableDeclaration","scope":4266,"src":"3255:20:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4197_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4261,"nodeType":"UserDefinedTypeName","pathNode":{"id":4260,"name":"StringSlot","nameLocations":["3255:10:51"],"nodeType":"IdentifierPath","referencedDeclaration":4197,"src":"3255:10:51"},"referencedDeclaration":4197,"src":"3255:10:51","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4197_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3254:22:51"},"scope":4300,"src":"3195:161:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4276,"nodeType":"Block","src":"3558:85:51","statements":[{"AST":{"nativeSrc":"3593:44:51","nodeType":"YulBlock","src":"3593:44:51","statements":[{"nativeSrc":"3607:20:51","nodeType":"YulAssignment","src":"3607:20:51","value":{"name":"store.slot","nativeSrc":"3617:10:51","nodeType":"YulIdentifier","src":"3617:10:51"},"variableNames":[{"name":"r.slot","nativeSrc":"3607:6:51","nodeType":"YulIdentifier","src":"3607:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4273,"isOffset":false,"isSlot":true,"src":"3607:6:51","suffix":"slot","valueSize":1},{"declaration":4269,"isOffset":false,"isSlot":true,"src":"3617:10:51","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":4275,"nodeType":"InlineAssembly","src":"3568:69:51"}]},"documentation":{"id":4267,"nodeType":"StructuredDocumentation","src":"3362:101:51","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":4277,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3477:13:51","nodeType":"FunctionDefinition","parameters":{"id":4270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4269,"mutability":"mutable","name":"store","nameLocation":"3506:5:51","nodeType":"VariableDeclaration","scope":4277,"src":"3491:20:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4268,"name":"string","nodeType":"ElementaryTypeName","src":"3491:6:51","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3490:22:51"},"returnParameters":{"id":4274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4273,"mutability":"mutable","name":"r","nameLocation":"3555:1:51","nodeType":"VariableDeclaration","scope":4277,"src":"3536:20:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4197_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4272,"nodeType":"UserDefinedTypeName","pathNode":{"id":4271,"name":"StringSlot","nameLocations":["3536:10:51"],"nodeType":"IdentifierPath","referencedDeclaration":4197,"src":"3536:10:51"},"referencedDeclaration":4197,"src":"3536:10:51","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4197_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3535:22:51"},"scope":4300,"src":"3468:175:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4287,"nodeType":"Block","src":"3818:79:51","statements":[{"AST":{"nativeSrc":"3853:38:51","nodeType":"YulBlock","src":"3853:38:51","statements":[{"nativeSrc":"3867:14:51","nodeType":"YulAssignment","src":"3867:14:51","value":{"name":"slot","nativeSrc":"3877:4:51","nodeType":"YulIdentifier","src":"3877:4:51"},"variableNames":[{"name":"r.slot","nativeSrc":"3867:6:51","nodeType":"YulIdentifier","src":"3867:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4284,"isOffset":false,"isSlot":true,"src":"3867:6:51","suffix":"slot","valueSize":1},{"declaration":4280,"isOffset":false,"isSlot":false,"src":"3877:4:51","valueSize":1}],"flags":["memory-safe"],"id":4286,"nodeType":"InlineAssembly","src":"3828:63:51"}]},"documentation":{"id":4278,"nodeType":"StructuredDocumentation","src":"3649:84:51","text":" @dev Returns a `BytesSlot` with member `value` located at `slot`."},"id":4288,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3747:12:51","nodeType":"FunctionDefinition","parameters":{"id":4281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4280,"mutability":"mutable","name":"slot","nameLocation":"3768:4:51","nodeType":"VariableDeclaration","scope":4288,"src":"3760:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4279,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3760:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3759:14:51"},"returnParameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4284,"mutability":"mutable","name":"r","nameLocation":"3815:1:51","nodeType":"VariableDeclaration","scope":4288,"src":"3797:19:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4200_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4283,"nodeType":"UserDefinedTypeName","pathNode":{"id":4282,"name":"BytesSlot","nameLocations":["3797:9:51"],"nodeType":"IdentifierPath","referencedDeclaration":4200,"src":"3797:9:51"},"referencedDeclaration":4200,"src":"3797:9:51","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4200_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3796:21:51"},"scope":4300,"src":"3738:159:51","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4298,"nodeType":"Block","src":"4094:85:51","statements":[{"AST":{"nativeSrc":"4129:44:51","nodeType":"YulBlock","src":"4129:44:51","statements":[{"nativeSrc":"4143:20:51","nodeType":"YulAssignment","src":"4143:20:51","value":{"name":"store.slot","nativeSrc":"4153:10:51","nodeType":"YulIdentifier","src":"4153:10:51"},"variableNames":[{"name":"r.slot","nativeSrc":"4143:6:51","nodeType":"YulIdentifier","src":"4143:6:51"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4295,"isOffset":false,"isSlot":true,"src":"4143:6:51","suffix":"slot","valueSize":1},{"declaration":4291,"isOffset":false,"isSlot":true,"src":"4153:10:51","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":4297,"nodeType":"InlineAssembly","src":"4104:69:51"}]},"documentation":{"id":4289,"nodeType":"StructuredDocumentation","src":"3903:99:51","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":4299,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"4016:12:51","nodeType":"FunctionDefinition","parameters":{"id":4292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4291,"mutability":"mutable","name":"store","nameLocation":"4043:5:51","nodeType":"VariableDeclaration","scope":4299,"src":"4029:19:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4290,"name":"bytes","nodeType":"ElementaryTypeName","src":"4029:5:51","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4028:21:51"},"returnParameters":{"id":4296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4295,"mutability":"mutable","name":"r","nameLocation":"4091:1:51","nodeType":"VariableDeclaration","scope":4299,"src":"4073:19:51","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4200_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4294,"nodeType":"UserDefinedTypeName","pathNode":{"id":4293,"name":"BytesSlot","nameLocations":["4073:9:51"],"nodeType":"IdentifierPath","referencedDeclaration":4200,"src":"4073:9:51"},"referencedDeclaration":4200,"src":"4073:9:51","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4200_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"4072:21:51"},"scope":4300,"src":"4007:172:51","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4301,"src":"1407:2774:51","usedErrors":[],"usedEvents":[]}],"src":"193:3989:51"},"id":51},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[4340]},"id":4341,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4302,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:52"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":4303,"nodeType":"StructuredDocumentation","src":"139:81:52","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":4340,"linearizedBaseContracts":[4340],"name":"Hashes","nameLocation":"229:6:52","nodeType":"ContractDefinition","nodes":[{"body":{"id":4326,"nodeType":"Block","src":"588:85:52","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4313,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"605:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4314,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"609:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":4321,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"661:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4322,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"664:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4320,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"641:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:25:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:61:52","trueExpression":{"arguments":[{"id":4317,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"633:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4318,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"636:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4316,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"613:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:25:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4312,"id":4325,"nodeType":"Return","src":"598:68:52"}]},"documentation":{"id":4304,"nodeType":"StructuredDocumentation","src":"242:257:52","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":4327,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:52","nodeType":"FunctionDefinition","parameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4306,"mutability":"mutable","name":"a","nameLocation":"542:1:52","nodeType":"VariableDeclaration","scope":4327,"src":"534:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4305,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4308,"mutability":"mutable","name":"b","nameLocation":"553:1:52","nodeType":"VariableDeclaration","scope":4327,"src":"545:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:52"},"returnParameters":{"id":4312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4327,"src":"579:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:52"},"scope":4340,"src":"504:169:52","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4338,"nodeType":"Block","src":"881:151:52","statements":[{"AST":{"nativeSrc":"916:110:52","nodeType":"YulBlock","src":"916:110:52","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"937:4:52","nodeType":"YulLiteral","src":"937:4:52","type":"","value":"0x00"},{"name":"a","nativeSrc":"943:1:52","nodeType":"YulIdentifier","src":"943:1:52"}],"functionName":{"name":"mstore","nativeSrc":"930:6:52","nodeType":"YulIdentifier","src":"930:6:52"},"nativeSrc":"930:15:52","nodeType":"YulFunctionCall","src":"930:15:52"},"nativeSrc":"930:15:52","nodeType":"YulExpressionStatement","src":"930:15:52"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"965:4:52","nodeType":"YulLiteral","src":"965:4:52","type":"","value":"0x20"},{"name":"b","nativeSrc":"971:1:52","nodeType":"YulIdentifier","src":"971:1:52"}],"functionName":{"name":"mstore","nativeSrc":"958:6:52","nodeType":"YulIdentifier","src":"958:6:52"},"nativeSrc":"958:15:52","nodeType":"YulFunctionCall","src":"958:15:52"},"nativeSrc":"958:15:52","nodeType":"YulExpressionStatement","src":"958:15:52"},{"nativeSrc":"986:30:52","nodeType":"YulAssignment","src":"986:30:52","value":{"arguments":[{"kind":"number","nativeSrc":"1005:4:52","nodeType":"YulLiteral","src":"1005:4:52","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1011:4:52","nodeType":"YulLiteral","src":"1011:4:52","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"995:9:52","nodeType":"YulIdentifier","src":"995:9:52"},"nativeSrc":"995:21:52","nodeType":"YulFunctionCall","src":"995:21:52"},"variableNames":[{"name":"value","nativeSrc":"986:5:52","nodeType":"YulIdentifier","src":"986:5:52"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4330,"isOffset":false,"isSlot":false,"src":"943:1:52","valueSize":1},{"declaration":4332,"isOffset":false,"isSlot":false,"src":"971:1:52","valueSize":1},{"declaration":4335,"isOffset":false,"isSlot":false,"src":"986:5:52","valueSize":1}],"flags":["memory-safe"],"id":4337,"nodeType":"InlineAssembly","src":"891:135:52"}]},"documentation":{"id":4328,"nodeType":"StructuredDocumentation","src":"679:109:52","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":4339,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientKeccak256","nameLocation":"802:19:52","nodeType":"FunctionDefinition","parameters":{"id":4333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"mutability":"mutable","name":"a","nameLocation":"830:1:52","nodeType":"VariableDeclaration","scope":4339,"src":"822:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"822:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4332,"mutability":"mutable","name":"b","nameLocation":"841:1:52","nodeType":"VariableDeclaration","scope":4339,"src":"833:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"833:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"821:22:52"},"returnParameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4335,"mutability":"mutable","name":"value","nameLocation":"874:5:52","nodeType":"VariableDeclaration","scope":4339,"src":"866:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"866:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"865:15:52"},"scope":4340,"src":"793:239:52","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4341,"src":"221:813:52","usedErrors":[],"usedEvents":[]}],"src":"113:922:52"},"id":52},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[4340],"MerkleProof":[5413]},"id":5414,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4342,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:53"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":4344,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5414,"sourceUnit":4341,"src":"232:36:53","symbolAliases":[{"foreign":{"id":4343,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"240:6:53","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":4345,"nodeType":"StructuredDocumentation","src":"270:1082:53","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":5413,"linearizedBaseContracts":[5413],"name":"MerkleProof","nameLocation":"1361:11:53","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4346,"nodeType":"StructuredDocumentation","src":"1379:60:53","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":4348,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:53","nodeType":"ErrorDefinition","parameters":{"id":4347,"nodeType":"ParameterList","parameters":[],"src":"1478:2:53"},"src":"1444:37:53"},{"body":{"id":4368,"nodeType":"Block","src":"1999:57:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4362,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4352,"src":"2029:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":4363,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4356,"src":"2036:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4361,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[4410,4492],"referencedDeclaration":4410,"src":"2016:12:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4365,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"2045:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4360,"id":4367,"nodeType":"Return","src":"2009:40:53"}]},"documentation":{"id":4349,"nodeType":"StructuredDocumentation","src":"1487:410:53","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":4369,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:53","nodeType":"FunctionDefinition","parameters":{"id":4357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4352,"mutability":"mutable","name":"proof","nameLocation":"1935:5:53","nodeType":"VariableDeclaration","scope":4369,"src":"1918:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4351,"nodeType":"ArrayTypeName","src":"1918:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4354,"mutability":"mutable","name":"root","nameLocation":"1950:4:53","nodeType":"VariableDeclaration","scope":4369,"src":"1942:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4356,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:53","nodeType":"VariableDeclaration","scope":4369,"src":"1956:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:53"},"returnParameters":{"id":4360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4369,"src":"1993:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4358,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:53"},"scope":5413,"src":"1902:154:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4409,"nodeType":"Block","src":"2549:216:53","statements":[{"assignments":[4381],"declarations":[{"constant":false,"id":4381,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:53","nodeType":"VariableDeclaration","scope":4409,"src":"2559:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4383,"initialValue":{"id":4382,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"2582:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:53"},{"body":{"id":4405,"nodeType":"Block","src":"2639:91:53","statements":[{"expression":{"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4395,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"2653:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4398,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"2696:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":4399,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4373,"src":"2710:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4401,"indexExpression":{"id":4400,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"2716:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4396,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"2668:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$4340_$","typeString":"type(library Hashes)"}},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:53","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":4327,"src":"2668:27:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4404,"nodeType":"ExpressionStatement","src":"2653:66:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4388,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"2616:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4389,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4373,"src":"2620:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:53","memberName":"length","nodeType":"MemberAccess","src":"2620:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4406,"initializationExpression":{"assignments":[4385],"declarations":[{"constant":false,"id":4385,"mutability":"mutable","name":"i","nameLocation":"2609:1:53","nodeType":"VariableDeclaration","scope":4406,"src":"2601:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4384,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4387,"initialValue":{"hexValue":"30","id":4386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:53","subExpression":{"id":4392,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"2634:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4394,"nodeType":"ExpressionStatement","src":"2634:3:53"},"nodeType":"ForStatement","src":"2596:134:53"},{"expression":{"id":4407,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4381,"src":"2746:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4379,"id":4408,"nodeType":"Return","src":"2739:19:53"}]},"documentation":{"id":4370,"nodeType":"StructuredDocumentation","src":"2062:390:53","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":4410,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:53","nodeType":"FunctionDefinition","parameters":{"id":4376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4373,"mutability":"mutable","name":"proof","nameLocation":"2496:5:53","nodeType":"VariableDeclaration","scope":4410,"src":"2479:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4372,"nodeType":"ArrayTypeName","src":"2479:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4375,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:53","nodeType":"VariableDeclaration","scope":4410,"src":"2503:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:53"},"returnParameters":{"id":4379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4410,"src":"2540:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:53"},"scope":5413,"src":"2457:308:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4441,"nodeType":"Block","src":"3376:65:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4434,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"3406:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":4435,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"3413:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4436,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4428,"src":"3419:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":4433,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[4410,4492],"referencedDeclaration":4492,"src":"3393:12:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4438,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"3430:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4432,"id":4440,"nodeType":"Return","src":"3386:48:53"}]},"documentation":{"id":4411,"nodeType":"StructuredDocumentation","src":"2771:407:53","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":4442,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:53","nodeType":"FunctionDefinition","parameters":{"id":4429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4414,"mutability":"mutable","name":"proof","nameLocation":"3225:5:53","nodeType":"VariableDeclaration","scope":4442,"src":"3208:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4413,"nodeType":"ArrayTypeName","src":"3208:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4416,"mutability":"mutable","name":"root","nameLocation":"3248:4:53","nodeType":"VariableDeclaration","scope":4442,"src":"3240:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4418,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:53","nodeType":"VariableDeclaration","scope":4442,"src":"3262:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4428,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:53","nodeType":"VariableDeclaration","scope":4442,"src":"3284:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":4427,"nodeType":"FunctionTypeName","parameterTypes":{"id":4423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4427,"src":"3293:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4427,"src":"3302:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4421,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:53"},"returnParameterTypes":{"id":4426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4427,"src":"3325:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:53"},"src":"3284:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:53"},"returnParameters":{"id":4432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4442,"src":"3370:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4430,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:53"},"scope":5413,"src":"3183:258:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4491,"nodeType":"Block","src":"4019:195:53","statements":[{"assignments":[4464],"declarations":[{"constant":false,"id":4464,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:53","nodeType":"VariableDeclaration","scope":4491,"src":"4029:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4466,"initialValue":{"id":4465,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4448,"src":"4052:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:53"},{"body":{"id":4487,"nodeType":"Block","src":"4109:70:53","statements":[{"expression":{"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4478,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"4123:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4480,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"4145:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":4481,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"4159:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4483,"indexExpression":{"id":4482,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"4165:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4479,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"4138:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":4484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4486,"nodeType":"ExpressionStatement","src":"4123:45:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4471,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"4086:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4472,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"4090:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:53","memberName":"length","nodeType":"MemberAccess","src":"4090:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4488,"initializationExpression":{"assignments":[4468],"declarations":[{"constant":false,"id":4468,"mutability":"mutable","name":"i","nameLocation":"4079:1:53","nodeType":"VariableDeclaration","scope":4488,"src":"4071:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4467,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4470,"initialValue":{"hexValue":"30","id":4469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:53","subExpression":{"id":4475,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"4104:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4477,"nodeType":"ExpressionStatement","src":"4104:3:53"},"nodeType":"ForStatement","src":"4066:113:53"},{"expression":{"id":4489,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"4195:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4462,"id":4490,"nodeType":"Return","src":"4188:19:53"}]},"documentation":{"id":4443,"nodeType":"StructuredDocumentation","src":"3447:387:53","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":4492,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:53","nodeType":"FunctionDefinition","parameters":{"id":4459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4446,"mutability":"mutable","name":"proof","nameLocation":"3887:5:53","nodeType":"VariableDeclaration","scope":4492,"src":"3870:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4445,"nodeType":"ArrayTypeName","src":"3870:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4448,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:53","nodeType":"VariableDeclaration","scope":4492,"src":"3902:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4458,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:53","nodeType":"VariableDeclaration","scope":4492,"src":"3924:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":4457,"nodeType":"FunctionTypeName","parameterTypes":{"id":4453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4450,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4457,"src":"3933:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4457,"src":"3942:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:53"},"returnParameterTypes":{"id":4456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4457,"src":"3965:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:53"},"src":"3924:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:53"},"returnParameters":{"id":4462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4492,"src":"4010:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:53"},"scope":5413,"src":"3839:375:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4512,"nodeType":"Block","src":"4744:65:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4506,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4496,"src":"4782:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":4507,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"4789:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4505,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[4554,4636],"referencedDeclaration":4554,"src":"4761:20:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4509,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"4798:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4504,"id":4511,"nodeType":"Return","src":"4754:48:53"}]},"documentation":{"id":4493,"nodeType":"StructuredDocumentation","src":"4220:412:53","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":4513,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:53","nodeType":"FunctionDefinition","parameters":{"id":4501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4496,"mutability":"mutable","name":"proof","nameLocation":"4680:5:53","nodeType":"VariableDeclaration","scope":4513,"src":"4661:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4495,"nodeType":"ArrayTypeName","src":"4661:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4498,"mutability":"mutable","name":"root","nameLocation":"4695:4:53","nodeType":"VariableDeclaration","scope":4513,"src":"4687:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4500,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:53","nodeType":"VariableDeclaration","scope":4513,"src":"4701:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:53"},"returnParameters":{"id":4504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4513,"src":"4738:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4502,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:53"},"scope":5413,"src":"4637:172:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4553,"nodeType":"Block","src":"5314:216:53","statements":[{"assignments":[4525],"declarations":[{"constant":false,"id":4525,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:53","nodeType":"VariableDeclaration","scope":4553,"src":"5324:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4527,"initialValue":{"id":4526,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"5347:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:53"},{"body":{"id":4549,"nodeType":"Block","src":"5404:91:53","statements":[{"expression":{"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4539,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"5418:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4542,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"5461:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":4543,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"5475:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4545,"indexExpression":{"id":4544,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"5481:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4540,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"5433:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$4340_$","typeString":"type(library Hashes)"}},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:53","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":4327,"src":"5433:27:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4548,"nodeType":"ExpressionStatement","src":"5418:66:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"5381:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4533,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"5385:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:53","memberName":"length","nodeType":"MemberAccess","src":"5385:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4550,"initializationExpression":{"assignments":[4529],"declarations":[{"constant":false,"id":4529,"mutability":"mutable","name":"i","nameLocation":"5374:1:53","nodeType":"VariableDeclaration","scope":4550,"src":"5366:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4528,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4531,"initialValue":{"hexValue":"30","id":4530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:53","subExpression":{"id":4536,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"5399:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4538,"nodeType":"ExpressionStatement","src":"5399:3:53"},"nodeType":"ForStatement","src":"5361:134:53"},{"expression":{"id":4551,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"5511:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4523,"id":4552,"nodeType":"Return","src":"5504:19:53"}]},"documentation":{"id":4514,"nodeType":"StructuredDocumentation","src":"4815:392:53","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":4554,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:53","nodeType":"FunctionDefinition","parameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4517,"mutability":"mutable","name":"proof","nameLocation":"5261:5:53","nodeType":"VariableDeclaration","scope":4554,"src":"5242:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4516,"nodeType":"ArrayTypeName","src":"5242:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4519,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:53","nodeType":"VariableDeclaration","scope":4554,"src":"5268:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:53"},"returnParameters":{"id":4523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4554,"src":"5305:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:53"},"scope":5413,"src":"5212:318:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4585,"nodeType":"Block","src":"6153:73:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4578,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"6191:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":4579,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"6198:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4580,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4572,"src":"6204:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":4577,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[4554,4636],"referencedDeclaration":4636,"src":"6170:20:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":4581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4582,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"6215:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4576,"id":4584,"nodeType":"Return","src":"6163:56:53"}]},"documentation":{"id":4555,"nodeType":"StructuredDocumentation","src":"5536:409:53","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":4586,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:53","nodeType":"FunctionDefinition","parameters":{"id":4573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4558,"mutability":"mutable","name":"proof","nameLocation":"6002:5:53","nodeType":"VariableDeclaration","scope":4586,"src":"5983:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4557,"nodeType":"ArrayTypeName","src":"5983:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4560,"mutability":"mutable","name":"root","nameLocation":"6025:4:53","nodeType":"VariableDeclaration","scope":4586,"src":"6017:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4562,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:53","nodeType":"VariableDeclaration","scope":4586,"src":"6039:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4572,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:53","nodeType":"VariableDeclaration","scope":4586,"src":"6061:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":4571,"nodeType":"FunctionTypeName","parameterTypes":{"id":4567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4571,"src":"6070:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4571,"src":"6079:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:53"},"returnParameterTypes":{"id":4570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4571,"src":"6102:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:53"},"src":"6061:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:53"},"returnParameters":{"id":4576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4586,"src":"6147:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4574,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:53"},"scope":5413,"src":"5950:276:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4635,"nodeType":"Block","src":"6816:195:53","statements":[{"assignments":[4608],"declarations":[{"constant":false,"id":4608,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:53","nodeType":"VariableDeclaration","scope":4635,"src":"6826:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4610,"initialValue":{"id":4609,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4592,"src":"6849:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:53"},{"body":{"id":4631,"nodeType":"Block","src":"6906:70:53","statements":[{"expression":{"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4622,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"6920:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4624,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"6942:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":4625,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"6956:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4627,"indexExpression":{"id":4626,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"6962:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4623,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"6935:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4630,"nodeType":"ExpressionStatement","src":"6920:45:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4615,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"6883:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4616,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"6887:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:53","memberName":"length","nodeType":"MemberAccess","src":"6887:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4632,"initializationExpression":{"assignments":[4612],"declarations":[{"constant":false,"id":4612,"mutability":"mutable","name":"i","nameLocation":"6876:1:53","nodeType":"VariableDeclaration","scope":4632,"src":"6868:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4611,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4614,"initialValue":{"hexValue":"30","id":4613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:53","subExpression":{"id":4619,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4612,"src":"6901:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4621,"nodeType":"ExpressionStatement","src":"6901:3:53"},"nodeType":"ForStatement","src":"6863:113:53"},{"expression":{"id":4633,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"6992:12:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4606,"id":4634,"nodeType":"Return","src":"6985:19:53"}]},"documentation":{"id":4587,"nodeType":"StructuredDocumentation","src":"6232:389:53","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":4636,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:53","nodeType":"FunctionDefinition","parameters":{"id":4603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4590,"mutability":"mutable","name":"proof","nameLocation":"6684:5:53","nodeType":"VariableDeclaration","scope":4636,"src":"6665:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4589,"nodeType":"ArrayTypeName","src":"6665:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4592,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:53","nodeType":"VariableDeclaration","scope":4636,"src":"6699:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4602,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:53","nodeType":"VariableDeclaration","scope":4636,"src":"6721:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":4601,"nodeType":"FunctionTypeName","parameterTypes":{"id":4597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4601,"src":"6730:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4601,"src":"6739:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:53"},"returnParameterTypes":{"id":4600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4601,"src":"6762:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:53"},"src":"6721:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:53"},"returnParameters":{"id":4606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4636,"src":"6807:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:53"},"scope":5413,"src":"6626:385:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4661,"nodeType":"Block","src":"7797:76:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4654,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"7832:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":4655,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"7839:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":4656,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"7851:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":4653,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[4820,5024],"referencedDeclaration":4820,"src":"7814:17:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4658,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"7862:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4652,"id":4660,"nodeType":"Return","src":"7807:59:53"}]},"documentation":{"id":4637,"nodeType":"StructuredDocumentation","src":"7017:593:53","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":4662,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:53","nodeType":"FunctionDefinition","parameters":{"id":4649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4640,"mutability":"mutable","name":"proof","nameLocation":"7667:5:53","nodeType":"VariableDeclaration","scope":4662,"src":"7650:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4638,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4639,"nodeType":"ArrayTypeName","src":"7650:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4643,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:53","nodeType":"VariableDeclaration","scope":4662,"src":"7682:24:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":4641,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4642,"nodeType":"ArrayTypeName","src":"7682:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":4645,"mutability":"mutable","name":"root","nameLocation":"7724:4:53","nodeType":"VariableDeclaration","scope":4662,"src":"7716:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4648,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:53","nodeType":"VariableDeclaration","scope":4662,"src":"7738:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4647,"nodeType":"ArrayTypeName","src":"7738:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:53"},"returnParameters":{"id":4652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4662,"src":"7791:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4650,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:53"},"scope":5413,"src":"7615:258:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4819,"nodeType":"Block","src":"9159:2104:53","statements":[{"assignments":[4678],"declarations":[{"constant":false,"id":4678,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:53","nodeType":"VariableDeclaration","scope":4819,"src":"9543:17:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4677,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4681,"initialValue":{"expression":{"id":4679,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"9563:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:53","memberName":"length","nodeType":"MemberAccess","src":"9563:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:53"},{"assignments":[4683],"declarations":[{"constant":false,"id":4683,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:53","nodeType":"VariableDeclaration","scope":4819,"src":"9586:21:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4682,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4686,"initialValue":{"expression":{"id":4684,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9610:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:53","memberName":"length","nodeType":"MemberAccess","src":"9610:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4687,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"9675:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4688,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"9687:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:53","memberName":"length","nodeType":"MemberAccess","src":"9687:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4691,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"9703:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4699,"nodeType":"IfStatement","src":"9671:113:53","trueBody":{"id":4698,"nodeType":"Block","src":"9722:62:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4695,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"9743:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4697,"nodeType":"RevertStatement","src":"9736:37:53"}]}},{"assignments":[4704],"declarations":[{"constant":false,"id":4704,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:53","nodeType":"VariableDeclaration","scope":4819,"src":"10028:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4703,"nodeType":"ArrayTypeName","src":"10028:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4710,"initialValue":{"arguments":[{"id":4708,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"10068:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:53","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":4705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4706,"nodeType":"ArrayTypeName","src":"10058:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:53"},{"assignments":[4712],"declarations":[{"constant":false,"id":4712,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:53","nodeType":"VariableDeclaration","scope":4819,"src":"10092:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4711,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4714,"initialValue":{"hexValue":"30","id":4713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:53"},{"assignments":[4716],"declarations":[{"constant":false,"id":4716,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:53","nodeType":"VariableDeclaration","scope":4819,"src":"10121:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4715,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4718,"initialValue":{"hexValue":"30","id":4717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:53"},{"assignments":[4720],"declarations":[{"constant":false,"id":4720,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:53","nodeType":"VariableDeclaration","scope":4819,"src":"10150:16:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4719,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4722,"initialValue":{"hexValue":"30","id":4721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:53"},{"body":{"id":4782,"nodeType":"Block","src":"10590:310:53","statements":[{"assignments":[4734],"declarations":[{"constant":false,"id":4734,"mutability":"mutable","name":"a","nameLocation":"10612:1:53","nodeType":"VariableDeclaration","scope":4782,"src":"10604:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4733,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4747,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4735,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"10616:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4736,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"10626:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":4742,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"10658:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4745,"indexExpression":{"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:53","subExpression":{"id":4743,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"10665:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:53","trueExpression":{"baseExpression":{"id":4738,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"10638:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4741,"indexExpression":{"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:53","subExpression":{"id":4739,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"10645:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:53"},{"assignments":[4749],"declarations":[{"constant":false,"id":4749,"mutability":"mutable","name":"b","nameLocation":"10697:1:53","nodeType":"VariableDeclaration","scope":4782,"src":"10689:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4771,"initialValue":{"condition":{"baseExpression":{"id":4750,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"10701:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":4752,"indexExpression":{"id":4751,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"10712:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":4766,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"10813:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4769,"indexExpression":{"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:53","subExpression":{"id":4767,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"10819:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:53","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4753,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"10734:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4754,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"10744:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":4760,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"10776:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4763,"indexExpression":{"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:53","subExpression":{"id":4761,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"10783:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:53","trueExpression":{"baseExpression":{"id":4756,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"10756:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4759,"indexExpression":{"id":4758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:53","subExpression":{"id":4757,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"10763:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:53"},{"expression":{"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4772,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"10844:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4774,"indexExpression":{"id":4773,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"10851:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4777,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4734,"src":"10884:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4778,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"10887:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4775,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"10856:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$4340_$","typeString":"type(library Hashes)"}},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:53","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":4327,"src":"10856:27:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4781,"nodeType":"ExpressionStatement","src":"10844:45:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4727,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"10566:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4728,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"10570:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4783,"initializationExpression":{"assignments":[4724],"declarations":[{"constant":false,"id":4724,"mutability":"mutable","name":"i","nameLocation":"10559:1:53","nodeType":"VariableDeclaration","scope":4783,"src":"10551:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4723,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4726,"initialValue":{"hexValue":"30","id":4725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:53","subExpression":{"id":4730,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"10585:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4732,"nodeType":"ExpressionStatement","src":"10585:3:53"},"nodeType":"ForStatement","src":"10546:354:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4784,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"10914:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4804,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"11155:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4816,"nodeType":"Block","src":"11217:40:53","statements":[{"expression":{"baseExpression":{"id":4812,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"11238:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4814,"indexExpression":{"hexValue":"30","id":4813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4676,"id":4815,"nodeType":"Return","src":"11231:15:53"}]},"id":4817,"nodeType":"IfStatement","src":"11151:106:53","trueBody":{"id":4811,"nodeType":"Block","src":"11170:41:53","statements":[{"expression":{"baseExpression":{"id":4807,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"11191:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4809,"indexExpression":{"hexValue":"30","id":4808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4676,"id":4810,"nodeType":"Return","src":"11184:16:53"}]}},"id":4818,"nodeType":"IfStatement","src":"10910:347:53","trueBody":{"id":4803,"nodeType":"Block","src":"10933:212:53","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4787,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"10951:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4788,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"10963:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:53","memberName":"length","nodeType":"MemberAccess","src":"10963:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4795,"nodeType":"IfStatement","src":"10947:100:53","trueBody":{"id":4794,"nodeType":"Block","src":"10977:70:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4791,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"11002:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4793,"nodeType":"RevertStatement","src":"10995:37:53"}]}},{"id":4802,"nodeType":"UncheckedBlock","src":"11060:75:53","statements":[{"expression":{"baseExpression":{"id":4796,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"11095:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4800,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4797,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"11102:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4676,"id":4801,"nodeType":"Return","src":"11088:32:53"}]}]}}]},"documentation":{"id":4663,"nodeType":"StructuredDocumentation","src":"7879:1100:53","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":4820,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:53","nodeType":"FunctionDefinition","parameters":{"id":4673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4666,"mutability":"mutable","name":"proof","nameLocation":"9037:5:53","nodeType":"VariableDeclaration","scope":4820,"src":"9020:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4665,"nodeType":"ArrayTypeName","src":"9020:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4669,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:53","nodeType":"VariableDeclaration","scope":4820,"src":"9052:24:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":4667,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4668,"nodeType":"ArrayTypeName","src":"9052:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":4672,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:53","nodeType":"VariableDeclaration","scope":4820,"src":"9086:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4671,"nodeType":"ArrayTypeName","src":"9086:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:53"},"returnParameters":{"id":4676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4675,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:53","nodeType":"VariableDeclaration","scope":4820,"src":"9139:18:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:53"},"scope":5413,"src":"8984:2279:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4856,"nodeType":"Block","src":"12112:84:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4848,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"12147:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":4849,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"12154:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":4850,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"12166:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":4851,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"12174:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":4847,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[4820,5024],"referencedDeclaration":5024,"src":"12129:17:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4853,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4829,"src":"12185:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4846,"id":4855,"nodeType":"Return","src":"12122:67:53"}]},"documentation":{"id":4821,"nodeType":"StructuredDocumentation","src":"11269:590:53","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":4857,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:53","nodeType":"FunctionDefinition","parameters":{"id":4843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4824,"mutability":"mutable","name":"proof","nameLocation":"11916:5:53","nodeType":"VariableDeclaration","scope":4857,"src":"11899:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4822,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4823,"nodeType":"ArrayTypeName","src":"11899:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4827,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:53","nodeType":"VariableDeclaration","scope":4857,"src":"11931:24:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":4825,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4826,"nodeType":"ArrayTypeName","src":"11931:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":4829,"mutability":"mutable","name":"root","nameLocation":"11973:4:53","nodeType":"VariableDeclaration","scope":4857,"src":"11965:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4828,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4832,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:53","nodeType":"VariableDeclaration","scope":4857,"src":"11987:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4831,"nodeType":"ArrayTypeName","src":"11987:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4842,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:53","nodeType":"VariableDeclaration","scope":4857,"src":"12020:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":4841,"nodeType":"FunctionTypeName","parameterTypes":{"id":4837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4841,"src":"12029:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4841,"src":"12038:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4835,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:53"},"returnParameterTypes":{"id":4840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4841,"src":"12061:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4838,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:53"},"src":"12020:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:53"},"returnParameters":{"id":4846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4857,"src":"12106:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4844,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:53"},"scope":5413,"src":"11864:332:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5023,"nodeType":"Block","src":"13545:2083:53","statements":[{"assignments":[4883],"declarations":[{"constant":false,"id":4883,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:53","nodeType":"VariableDeclaration","scope":5023,"src":"13929:17:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4882,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4886,"initialValue":{"expression":{"id":4884,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"13949:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:53","memberName":"length","nodeType":"MemberAccess","src":"13949:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:53"},{"assignments":[4888],"declarations":[{"constant":false,"id":4888,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:53","nodeType":"VariableDeclaration","scope":5023,"src":"13972:21:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4887,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4891,"initialValue":{"expression":{"id":4889,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"13996:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:53","memberName":"length","nodeType":"MemberAccess","src":"13996:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4892,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"14061:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4893,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"14073:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:53","memberName":"length","nodeType":"MemberAccess","src":"14073:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4896,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"14089:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4904,"nodeType":"IfStatement","src":"14057:113:53","trueBody":{"id":4903,"nodeType":"Block","src":"14108:62:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4900,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"14129:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4902,"nodeType":"RevertStatement","src":"14122:37:53"}]}},{"assignments":[4909],"declarations":[{"constant":false,"id":4909,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:53","nodeType":"VariableDeclaration","scope":5023,"src":"14414:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4908,"nodeType":"ArrayTypeName","src":"14414:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4915,"initialValue":{"arguments":[{"id":4913,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"14454:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:53","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":4910,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4911,"nodeType":"ArrayTypeName","src":"14444:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:53"},{"assignments":[4917],"declarations":[{"constant":false,"id":4917,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:53","nodeType":"VariableDeclaration","scope":5023,"src":"14478:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4916,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4919,"initialValue":{"hexValue":"30","id":4918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:53"},{"assignments":[4921],"declarations":[{"constant":false,"id":4921,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:53","nodeType":"VariableDeclaration","scope":5023,"src":"14507:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4920,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4923,"initialValue":{"hexValue":"30","id":4922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:53"},{"assignments":[4925],"declarations":[{"constant":false,"id":4925,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:53","nodeType":"VariableDeclaration","scope":5023,"src":"14536:16:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4924,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4927,"initialValue":{"hexValue":"30","id":4926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:53"},{"body":{"id":4986,"nodeType":"Block","src":"14976:289:53","statements":[{"assignments":[4939],"declarations":[{"constant":false,"id":4939,"mutability":"mutable","name":"a","nameLocation":"14998:1:53","nodeType":"VariableDeclaration","scope":4986,"src":"14990:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4952,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4940,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"15002:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4941,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"15012:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":4947,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"15044:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4950,"indexExpression":{"id":4949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:53","subExpression":{"id":4948,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"15051:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:53","trueExpression":{"baseExpression":{"id":4943,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"15024:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4946,"indexExpression":{"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:53","subExpression":{"id":4944,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"15031:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:53"},{"assignments":[4954],"declarations":[{"constant":false,"id":4954,"mutability":"mutable","name":"b","nameLocation":"15083:1:53","nodeType":"VariableDeclaration","scope":4986,"src":"15075:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4953,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4976,"initialValue":{"condition":{"baseExpression":{"id":4955,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"15087:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":4957,"indexExpression":{"id":4956,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"15098:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":4971,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"15199:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4974,"indexExpression":{"id":4973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:53","subExpression":{"id":4972,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"15205:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:53","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4958,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"15120:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4959,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"15130:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":4965,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"15162:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4968,"indexExpression":{"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:53","subExpression":{"id":4966,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"15169:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:53","trueExpression":{"baseExpression":{"id":4961,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"15142:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4964,"indexExpression":{"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:53","subExpression":{"id":4962,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"15149:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4970,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:53"},{"expression":{"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4977,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"15230:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4979,"indexExpression":{"id":4978,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"15237:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4981,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"15249:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4982,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"15252:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4980,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"15242:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4985,"nodeType":"ExpressionStatement","src":"15230:24:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4932,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"14952:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4933,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"14956:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4987,"initializationExpression":{"assignments":[4929],"declarations":[{"constant":false,"id":4929,"mutability":"mutable","name":"i","nameLocation":"14945:1:53","nodeType":"VariableDeclaration","scope":4987,"src":"14937:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4928,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4931,"initialValue":{"hexValue":"30","id":4930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:53","subExpression":{"id":4935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"14971:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4937,"nodeType":"ExpressionStatement","src":"14971:3:53"},"nodeType":"ForStatement","src":"14932:333:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4988,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"15279:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5008,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"15520:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5020,"nodeType":"Block","src":"15582:40:53","statements":[{"expression":{"baseExpression":{"id":5016,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"15603:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5018,"indexExpression":{"hexValue":"30","id":5017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4881,"id":5019,"nodeType":"Return","src":"15596:15:53"}]},"id":5021,"nodeType":"IfStatement","src":"15516:106:53","trueBody":{"id":5015,"nodeType":"Block","src":"15535:41:53","statements":[{"expression":{"baseExpression":{"id":5011,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"15556:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5013,"indexExpression":{"hexValue":"30","id":5012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4881,"id":5014,"nodeType":"Return","src":"15549:16:53"}]}},"id":5022,"nodeType":"IfStatement","src":"15275:347:53","trueBody":{"id":5007,"nodeType":"Block","src":"15298:212:53","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4991,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"15316:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4992,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"15328:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":4993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:53","memberName":"length","nodeType":"MemberAccess","src":"15328:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4999,"nodeType":"IfStatement","src":"15312:100:53","trueBody":{"id":4998,"nodeType":"Block","src":"15342:70:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4995,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"15367:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4997,"nodeType":"RevertStatement","src":"15360:37:53"}]}},{"id":5006,"nodeType":"UncheckedBlock","src":"15425:75:53","statements":[{"expression":{"baseExpression":{"id":5000,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"15460:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5004,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5001,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"15467:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4881,"id":5005,"nodeType":"Return","src":"15453:32:53"}]}]}}]},"documentation":{"id":4858,"nodeType":"StructuredDocumentation","src":"12202:1097:53","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":5024,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:53","nodeType":"FunctionDefinition","parameters":{"id":4878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4861,"mutability":"mutable","name":"proof","nameLocation":"13357:5:53","nodeType":"VariableDeclaration","scope":5024,"src":"13340:22:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4860,"nodeType":"ArrayTypeName","src":"13340:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4864,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:53","nodeType":"VariableDeclaration","scope":5024,"src":"13372:24:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":4862,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4863,"nodeType":"ArrayTypeName","src":"13372:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":4867,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:53","nodeType":"VariableDeclaration","scope":5024,"src":"13406:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4866,"nodeType":"ArrayTypeName","src":"13406:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4877,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:53","nodeType":"VariableDeclaration","scope":5024,"src":"13439:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":4876,"nodeType":"FunctionTypeName","parameterTypes":{"id":4872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4876,"src":"13448:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4868,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4876,"src":"13457:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:53"},"returnParameterTypes":{"id":4875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4876,"src":"13480:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:53"},"src":"13439:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:53"},"returnParameters":{"id":4881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4880,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:53","nodeType":"VariableDeclaration","scope":5024,"src":"13525:18:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4879,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:53"},"scope":5413,"src":"13304:2324:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5049,"nodeType":"Block","src":"16436:84:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5042,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"16479:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":5043,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5031,"src":"16486:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":5044,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"16498:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":5041,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[5208,5412],"referencedDeclaration":5208,"src":"16453:25:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":5045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5046,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5033,"src":"16509:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5040,"id":5048,"nodeType":"Return","src":"16446:67:53"}]},"documentation":{"id":5025,"nodeType":"StructuredDocumentation","src":"15634:603:53","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":5050,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:53","nodeType":"FunctionDefinition","parameters":{"id":5037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5028,"mutability":"mutable","name":"proof","nameLocation":"16304:5:53","nodeType":"VariableDeclaration","scope":5050,"src":"16285:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5026,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5027,"nodeType":"ArrayTypeName","src":"16285:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5031,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:53","nodeType":"VariableDeclaration","scope":5050,"src":"16319:26:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":5029,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5030,"nodeType":"ArrayTypeName","src":"16319:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":5033,"mutability":"mutable","name":"root","nameLocation":"16363:4:53","nodeType":"VariableDeclaration","scope":5050,"src":"16355:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5036,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:53","nodeType":"VariableDeclaration","scope":5050,"src":"16377:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5034,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5035,"nodeType":"ArrayTypeName","src":"16377:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:53"},"returnParameters":{"id":5040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5050,"src":"16430:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5038,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:53"},"scope":5413,"src":"16242:278:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5207,"nodeType":"Block","src":"17820:2104:53","statements":[{"assignments":[5066],"declarations":[{"constant":false,"id":5066,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:53","nodeType":"VariableDeclaration","scope":5207,"src":"18204:17:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5065,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5069,"initialValue":{"expression":{"id":5067,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5060,"src":"18224:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:53","memberName":"length","nodeType":"MemberAccess","src":"18224:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:53"},{"assignments":[5071],"declarations":[{"constant":false,"id":5071,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:53","nodeType":"VariableDeclaration","scope":5207,"src":"18247:21:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5070,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5074,"initialValue":{"expression":{"id":5072,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"18271:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:53","memberName":"length","nodeType":"MemberAccess","src":"18271:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5075,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"18336:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":5076,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"18348:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:53","memberName":"length","nodeType":"MemberAccess","src":"18348:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5079,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"18364:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5087,"nodeType":"IfStatement","src":"18332:113:53","trueBody":{"id":5086,"nodeType":"Block","src":"18383:62:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5083,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"18404:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5085,"nodeType":"RevertStatement","src":"18397:37:53"}]}},{"assignments":[5092],"declarations":[{"constant":false,"id":5092,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:53","nodeType":"VariableDeclaration","scope":5207,"src":"18689:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5090,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5091,"nodeType":"ArrayTypeName","src":"18689:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5098,"initialValue":{"arguments":[{"id":5096,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"18729:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:53","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":5093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5094,"nodeType":"ArrayTypeName","src":"18719:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:53"},{"assignments":[5100],"declarations":[{"constant":false,"id":5100,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:53","nodeType":"VariableDeclaration","scope":5207,"src":"18753:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5099,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5102,"initialValue":{"hexValue":"30","id":5101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:53"},{"assignments":[5104],"declarations":[{"constant":false,"id":5104,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:53","nodeType":"VariableDeclaration","scope":5207,"src":"18782:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5103,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5106,"initialValue":{"hexValue":"30","id":5105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:53"},{"assignments":[5108],"declarations":[{"constant":false,"id":5108,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:53","nodeType":"VariableDeclaration","scope":5207,"src":"18811:16:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5107,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5110,"initialValue":{"hexValue":"30","id":5109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:53"},{"body":{"id":5170,"nodeType":"Block","src":"19251:310:53","statements":[{"assignments":[5122],"declarations":[{"constant":false,"id":5122,"mutability":"mutable","name":"a","nameLocation":"19273:1:53","nodeType":"VariableDeclaration","scope":5170,"src":"19265:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5121,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5135,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5123,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"19277:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5124,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"19287:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":5130,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"19319:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5133,"indexExpression":{"id":5132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:53","subExpression":{"id":5131,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"19326:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:53","trueExpression":{"baseExpression":{"id":5126,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5060,"src":"19299:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5129,"indexExpression":{"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:53","subExpression":{"id":5127,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"19306:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:53"},{"assignments":[5137],"declarations":[{"constant":false,"id":5137,"mutability":"mutable","name":"b","nameLocation":"19358:1:53","nodeType":"VariableDeclaration","scope":5170,"src":"19350:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5136,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5159,"initialValue":{"condition":{"baseExpression":{"id":5138,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"19362:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":5140,"indexExpression":{"id":5139,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"19373:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":5154,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"19474:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5157,"indexExpression":{"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:53","subExpression":{"id":5155,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5108,"src":"19480:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:53","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5141,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"19395:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5142,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"19405:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":5148,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"19437:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5151,"indexExpression":{"id":5150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:53","subExpression":{"id":5149,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"19444:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:53","trueExpression":{"baseExpression":{"id":5144,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5060,"src":"19417:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5147,"indexExpression":{"id":5146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:53","subExpression":{"id":5145,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"19424:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:53"},{"expression":{"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5160,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"19505:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5162,"indexExpression":{"id":5161,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"19512:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5165,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5122,"src":"19545:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5166,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5137,"src":"19548:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5163,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4340,"src":"19517:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$4340_$","typeString":"type(library Hashes)"}},"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:53","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":4327,"src":"19517:27:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":5167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5169,"nodeType":"ExpressionStatement","src":"19505:45:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5115,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"19227:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5116,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"19231:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5171,"initializationExpression":{"assignments":[5112],"declarations":[{"constant":false,"id":5112,"mutability":"mutable","name":"i","nameLocation":"19220:1:53","nodeType":"VariableDeclaration","scope":5171,"src":"19212:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5111,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5114,"initialValue":{"hexValue":"30","id":5113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:53","subExpression":{"id":5118,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"19246:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5120,"nodeType":"ExpressionStatement","src":"19246:3:53"},"nodeType":"ForStatement","src":"19207:354:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5172,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"19575:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5192,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"19816:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5204,"nodeType":"Block","src":"19878:40:53","statements":[{"expression":{"baseExpression":{"id":5200,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"19899:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5202,"indexExpression":{"hexValue":"30","id":5201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5064,"id":5203,"nodeType":"Return","src":"19892:15:53"}]},"id":5205,"nodeType":"IfStatement","src":"19812:106:53","trueBody":{"id":5199,"nodeType":"Block","src":"19831:41:53","statements":[{"expression":{"baseExpression":{"id":5195,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5060,"src":"19852:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5197,"indexExpression":{"hexValue":"30","id":5196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5064,"id":5198,"nodeType":"Return","src":"19845:16:53"}]}},"id":5206,"nodeType":"IfStatement","src":"19571:347:53","trueBody":{"id":5191,"nodeType":"Block","src":"19594:212:53","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5175,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5108,"src":"19612:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5176,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"19624:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:53","memberName":"length","nodeType":"MemberAccess","src":"19624:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5183,"nodeType":"IfStatement","src":"19608:100:53","trueBody":{"id":5182,"nodeType":"Block","src":"19638:70:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5179,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"19663:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5181,"nodeType":"RevertStatement","src":"19656:37:53"}]}},{"id":5190,"nodeType":"UncheckedBlock","src":"19721:75:53","statements":[{"expression":{"baseExpression":{"id":5184,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"19756:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5188,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5185,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"19763:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5064,"id":5189,"nodeType":"Return","src":"19749:32:53"}]}]}}]},"documentation":{"id":5051,"nodeType":"StructuredDocumentation","src":"16526:1102:53","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":5208,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:53","nodeType":"FunctionDefinition","parameters":{"id":5061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5054,"mutability":"mutable","name":"proof","nameLocation":"17696:5:53","nodeType":"VariableDeclaration","scope":5208,"src":"17677:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5053,"nodeType":"ArrayTypeName","src":"17677:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5057,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:53","nodeType":"VariableDeclaration","scope":5208,"src":"17711:26:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":5055,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5056,"nodeType":"ArrayTypeName","src":"17711:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":5060,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:53","nodeType":"VariableDeclaration","scope":5208,"src":"17747:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5058,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5059,"nodeType":"ArrayTypeName","src":"17747:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:53"},"returnParameters":{"id":5064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5063,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:53","nodeType":"VariableDeclaration","scope":5208,"src":"17800:18:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:53"},"scope":5413,"src":"17633:2291:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5244,"nodeType":"Block","src":"20795:92:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5236,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"20838:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":5237,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"20845:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":5238,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"20857:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":5239,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"20865:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":5235,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[5208,5412],"referencedDeclaration":5412,"src":"20812:25:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5241,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5217,"src":"20876:4:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5234,"id":5243,"nodeType":"Return","src":"20805:75:53"}]},"documentation":{"id":5209,"nodeType":"StructuredDocumentation","src":"19930:600:53","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":5245,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:53","nodeType":"FunctionDefinition","parameters":{"id":5231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5212,"mutability":"mutable","name":"proof","nameLocation":"20597:5:53","nodeType":"VariableDeclaration","scope":5245,"src":"20578:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5210,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5211,"nodeType":"ArrayTypeName","src":"20578:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5215,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:53","nodeType":"VariableDeclaration","scope":5245,"src":"20612:26:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":5213,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5214,"nodeType":"ArrayTypeName","src":"20612:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":5217,"mutability":"mutable","name":"root","nameLocation":"20656:4:53","nodeType":"VariableDeclaration","scope":5245,"src":"20648:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5216,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5220,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:53","nodeType":"VariableDeclaration","scope":5245,"src":"20670:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5219,"nodeType":"ArrayTypeName","src":"20670:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5230,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:53","nodeType":"VariableDeclaration","scope":5245,"src":"20703:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":5229,"nodeType":"FunctionTypeName","parameterTypes":{"id":5225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5229,"src":"20712:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5229,"src":"20721:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:53"},"returnParameterTypes":{"id":5228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5229,"src":"20744:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:53"},"src":"20703:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:53"},"returnParameters":{"id":5234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5245,"src":"20789:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5232,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:53"},"scope":5413,"src":"20535:352:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5411,"nodeType":"Block","src":"22250:2083:53","statements":[{"assignments":[5271],"declarations":[{"constant":false,"id":5271,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:53","nodeType":"VariableDeclaration","scope":5411,"src":"22634:17:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5270,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5274,"initialValue":{"expression":{"id":5272,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5255,"src":"22654:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:53","memberName":"length","nodeType":"MemberAccess","src":"22654:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:53"},{"assignments":[5276],"declarations":[{"constant":false,"id":5276,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:53","nodeType":"VariableDeclaration","scope":5411,"src":"22677:21:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5275,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5279,"initialValue":{"expression":{"id":5277,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"22701:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:53","memberName":"length","nodeType":"MemberAccess","src":"22701:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5280,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"22766:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":5281,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"22778:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:53","memberName":"length","nodeType":"MemberAccess","src":"22778:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5284,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"22794:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5292,"nodeType":"IfStatement","src":"22762:113:53","trueBody":{"id":5291,"nodeType":"Block","src":"22813:62:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5288,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"22834:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5290,"nodeType":"RevertStatement","src":"22827:37:53"}]}},{"assignments":[5297],"declarations":[{"constant":false,"id":5297,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:53","nodeType":"VariableDeclaration","scope":5411,"src":"23119:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5296,"nodeType":"ArrayTypeName","src":"23119:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5303,"initialValue":{"arguments":[{"id":5301,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"23159:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:53","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":5298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5299,"nodeType":"ArrayTypeName","src":"23149:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:53"},{"assignments":[5305],"declarations":[{"constant":false,"id":5305,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:53","nodeType":"VariableDeclaration","scope":5411,"src":"23183:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5304,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5307,"initialValue":{"hexValue":"30","id":5306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:53"},{"assignments":[5309],"declarations":[{"constant":false,"id":5309,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:53","nodeType":"VariableDeclaration","scope":5411,"src":"23212:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5308,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5311,"initialValue":{"hexValue":"30","id":5310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:53"},{"assignments":[5313],"declarations":[{"constant":false,"id":5313,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:53","nodeType":"VariableDeclaration","scope":5411,"src":"23241:16:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5312,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5315,"initialValue":{"hexValue":"30","id":5314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:53"},{"body":{"id":5374,"nodeType":"Block","src":"23681:289:53","statements":[{"assignments":[5327],"declarations":[{"constant":false,"id":5327,"mutability":"mutable","name":"a","nameLocation":"23703:1:53","nodeType":"VariableDeclaration","scope":5374,"src":"23695:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5340,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5328,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5305,"src":"23707:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5329,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"23717:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":5335,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5297,"src":"23749:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5338,"indexExpression":{"id":5337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:53","subExpression":{"id":5336,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"23756:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:53","trueExpression":{"baseExpression":{"id":5331,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5255,"src":"23729:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5334,"indexExpression":{"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:53","subExpression":{"id":5332,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5305,"src":"23736:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:53"},{"assignments":[5342],"declarations":[{"constant":false,"id":5342,"mutability":"mutable","name":"b","nameLocation":"23788:1:53","nodeType":"VariableDeclaration","scope":5374,"src":"23780:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5364,"initialValue":{"condition":{"baseExpression":{"id":5343,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"23792:10:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":5345,"indexExpression":{"id":5344,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"23803:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":5359,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"23904:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5362,"indexExpression":{"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:53","subExpression":{"id":5360,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"23910:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:53","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5346,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5305,"src":"23825:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5347,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"23835:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":5353,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5297,"src":"23867:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5356,"indexExpression":{"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:53","subExpression":{"id":5354,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"23874:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:53","trueExpression":{"baseExpression":{"id":5349,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5255,"src":"23847:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5352,"indexExpression":{"id":5351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:53","subExpression":{"id":5350,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5305,"src":"23854:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5358,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:53"},{"expression":{"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5365,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5297,"src":"23935:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5367,"indexExpression":{"id":5366,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"23942:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5369,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"23954:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5370,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"23957:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5368,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"23947:6:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":5371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5373,"nodeType":"ExpressionStatement","src":"23935:24:53"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5320,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"23657:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5321,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"23661:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5375,"initializationExpression":{"assignments":[5317],"declarations":[{"constant":false,"id":5317,"mutability":"mutable","name":"i","nameLocation":"23650:1:53","nodeType":"VariableDeclaration","scope":5375,"src":"23642:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5316,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5319,"initialValue":{"hexValue":"30","id":5318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:53"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:53","subExpression":{"id":5323,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"23676:1:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5325,"nodeType":"ExpressionStatement","src":"23676:3:53"},"nodeType":"ForStatement","src":"23637:333:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5376,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"23984:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5396,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5271,"src":"24225:9:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5408,"nodeType":"Block","src":"24287:40:53","statements":[{"expression":{"baseExpression":{"id":5404,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"24308:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5406,"indexExpression":{"hexValue":"30","id":5405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5269,"id":5407,"nodeType":"Return","src":"24301:15:53"}]},"id":5409,"nodeType":"IfStatement","src":"24221:106:53","trueBody":{"id":5403,"nodeType":"Block","src":"24240:41:53","statements":[{"expression":{"baseExpression":{"id":5399,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5255,"src":"24261:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5401,"indexExpression":{"hexValue":"30","id":5400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5269,"id":5402,"nodeType":"Return","src":"24254:16:53"}]}},"id":5410,"nodeType":"IfStatement","src":"23980:347:53","trueBody":{"id":5395,"nodeType":"Block","src":"24003:212:53","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5379,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"24021:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5380,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"24033:5:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:53","memberName":"length","nodeType":"MemberAccess","src":"24033:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5387,"nodeType":"IfStatement","src":"24017:100:53","trueBody":{"id":5386,"nodeType":"Block","src":"24047:70:53","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5383,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"24072:28:53","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5385,"nodeType":"RevertStatement","src":"24065:37:53"}]}},{"id":5394,"nodeType":"UncheckedBlock","src":"24130:75:53","statements":[{"expression":{"baseExpression":{"id":5388,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5297,"src":"24165:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":5392,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5389,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"24172:13:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5269,"id":5393,"nodeType":"Return","src":"24158:32:53"}]}]}}]},"documentation":{"id":5246,"nodeType":"StructuredDocumentation","src":"20893:1099:53","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":5412,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:53","nodeType":"FunctionDefinition","parameters":{"id":5266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5249,"mutability":"mutable","name":"proof","nameLocation":"22060:5:53","nodeType":"VariableDeclaration","scope":5412,"src":"22041:24:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5248,"nodeType":"ArrayTypeName","src":"22041:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5252,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:53","nodeType":"VariableDeclaration","scope":5412,"src":"22075:26:53","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":5250,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5251,"nodeType":"ArrayTypeName","src":"22075:6:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":5255,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:53","nodeType":"VariableDeclaration","scope":5412,"src":"22111:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5254,"nodeType":"ArrayTypeName","src":"22111:9:53","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5265,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:53","nodeType":"VariableDeclaration","scope":5412,"src":"22144:56:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":5264,"nodeType":"FunctionTypeName","parameterTypes":{"id":5260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5264,"src":"22153:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5264,"src":"22162:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:53"},"returnParameterTypes":{"id":5263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5262,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5264,"src":"22185:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:53"},"src":"22144:56:53","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:53"},"returnParameters":{"id":5269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5268,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:53","nodeType":"VariableDeclaration","scope":5412,"src":"22230:18:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:53"},"scope":5413,"src":"21997:2336:53","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5414,"src":"1353:22982:53","usedErrors":[4348],"usedEvents":[]}],"src":"206:24130:53"},"id":53},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[5425]},"id":5426,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5415,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:54"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":5416,"nodeType":"StructuredDocumentation","src":"141:280:54","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":5425,"linearizedBaseContracts":[5425],"name":"IERC165","nameLocation":"432:7:54","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5417,"nodeType":"StructuredDocumentation","src":"446:340:54","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":5424,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"800:17:54","nodeType":"FunctionDefinition","parameters":{"id":5420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5419,"mutability":"mutable","name":"interfaceId","nameLocation":"825:11:54","nodeType":"VariableDeclaration","scope":5424,"src":"818:18:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5418,"name":"bytes4","nodeType":"ElementaryTypeName","src":"818:6:54","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"817:20:54"},"returnParameters":{"id":5423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5424,"src":"861:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5421,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:54"},"scope":5425,"src":"791:76:54","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5426,"src":"422:447:54","usedErrors":[],"usedEvents":[]}],"src":"115:755:54"},"id":54},"contracts/merkleClaim/CheckmateMerkleClaim.sol":{"ast":{"absolutePath":"contracts/merkleClaim/CheckmateMerkleClaim.sol","exportedSymbols":{"CheckmateMerkleClaim":[5820],"ContractOwnership":[55],"ContractOwnershipStorage":[862],"IERC20SafeTransfers":[3112],"MerkleProof":[5413],"PauseBase":[1088],"PauseStorage":[1301]},"id":5821,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5427,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:55"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","id":5429,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5821,"sourceUnit":3113,"src":"57:121:55","symbolAliases":[{"foreign":{"id":5428,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"65:19:55","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":5431,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5821,"sourceUnit":5414,"src":"179:87:55","symbolAliases":[{"foreign":{"id":5430,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"187:11:55","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":5433,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5821,"sourceUnit":56,"src":"267:101:55","symbolAliases":[{"foreign":{"id":5432,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"275:17:55","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":5435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5821,"sourceUnit":863,"src":"369:125:55","symbolAliases":[{"foreign":{"id":5434,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"377:24:55","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol","file":"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol","id":5437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5821,"sourceUnit":1089,"src":"495:93:55","symbolAliases":[{"foreign":{"id":5436,"name":"PauseBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"503:9:55","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","file":"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol","id":5439,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5821,"sourceUnit":1302,"src":"589:104:55","symbolAliases":[{"foreign":{"id":5438,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"597:12:55","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5440,"name":"ContractOwnership","nameLocations":["728:17:55"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"728:17:55"},"id":5441,"nodeType":"InheritanceSpecifier","src":"728:17:55"},{"baseName":{"id":5442,"name":"PauseBase","nameLocations":["747:9:55"],"nodeType":"IdentifierPath","referencedDeclaration":1088,"src":"747:9:55"},"id":5443,"nodeType":"InheritanceSpecifier","src":"747:9:55"}],"canonicalName":"CheckmateMerkleClaim","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5820,"linearizedBaseContracts":[5820,1088,55,892,909,227,4085,1114,341],"name":"CheckmateMerkleClaim","nameLocation":"704:20:55","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5447,"libraryName":{"id":5444,"name":"MerkleProof","nameLocations":["769:11:55"],"nodeType":"IdentifierPath","referencedDeclaration":5413,"src":"769:11:55"},"nodeType":"UsingForDirective","src":"763:32:55","typeName":{"baseType":{"id":5445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"785:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5446,"nodeType":"ArrayTypeName","src":"785:9:55","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"global":false,"id":5451,"libraryName":{"id":5448,"name":"ContractOwnershipStorage","nameLocations":["806:24:55"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"806:24:55"},"nodeType":"UsingForDirective","src":"800:67:55","typeName":{"id":5450,"nodeType":"UserDefinedTypeName","pathNode":{"id":5449,"name":"ContractOwnershipStorage.Layout","nameLocations":["835:24:55","860:6:55"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"835:31:55"},"referencedDeclaration":635,"src":"835:31:55","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":5455,"libraryName":{"id":5452,"name":"PauseStorage","nameLocations":["878:12:55"],"nodeType":"IdentifierPath","referencedDeclaration":1301,"src":"878:12:55"},"nodeType":"UsingForDirective","src":"872:43:55","typeName":{"id":5454,"nodeType":"UserDefinedTypeName","pathNode":{"id":5453,"name":"PauseStorage.Layout","nameLocations":["895:12:55","908:6:55"],"nodeType":"IdentifierPath","referencedDeclaration":1131,"src":"895:19:55"},"referencedDeclaration":1131,"src":"895:19:55","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout"}}},{"constant":false,"documentation":{"id":5456,"nodeType":"StructuredDocumentation","src":"921:51:55","text":"@notice a reference to checkmate token contract"},"functionSelector":"b1bb0c6c","id":5458,"mutability":"immutable","name":"CHECKMATE_TOKEN_CONTRACT","nameLocation":"1002:24:55","nodeType":"VariableDeclaration","scope":5820,"src":"977:49:55","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5457,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":5459,"nodeType":"StructuredDocumentation","src":"1033:43:55","text":"@notice a reference to staking contract"},"functionSelector":"da19ddfb","id":5461,"mutability":"immutable","name":"STAKING_CONTRACT","nameLocation":"1106:16:55","nodeType":"VariableDeclaration","scope":5820,"src":"1081:41:55","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5460,"name":"address","nodeType":"ElementaryTypeName","src":"1081:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":5462,"nodeType":"StructuredDocumentation","src":"1129:50:55","text":"@notice Store the merkle root to nonce mapping"},"functionSelector":"7505fee1","id":5466,"mutability":"mutable","name":"rootToNonceMap","nameLocation":"1229:14:55","nodeType":"VariableDeclaration","scope":5820,"src":"1184:59:55","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"},"typeName":{"id":5465,"keyName":"root","keyNameLocation":"1200:4:55","keyType":{"id":5463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1192:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1184:37:55","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"},"valueName":"nonce","valueNameLocation":"1215:5:55","valueType":{"id":5464,"name":"uint16","nodeType":"ElementaryTypeName","src":"1208:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}},"visibility":"public"},{"constant":false,"documentation":{"id":5467,"nodeType":"StructuredDocumentation","src":"1250:38:55","text":"@notice leaf hash to claimed state"},"functionSelector":"cc3c0f06","id":5471,"mutability":"mutable","name":"claimed","nameLocation":"1338:7:55","nodeType":"VariableDeclaration","scope":5820,"src":"1293:52:55","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":5470,"keyName":"leaf","keyNameLocation":"1309:4:55","keyType":{"id":5468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1301:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1293:37:55","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"claimed","valueNameLocation":"1322:7:55","valueType":{"id":5469,"name":"bool","nodeType":"ElementaryTypeName","src":"1317:4:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"documentation":{"id":5472,"nodeType":"StructuredDocumentation","src":"1352:75:55","text":"@notice Store the payout wallet address for transfering checkmate token"},"functionSelector":"8488bb4e","id":5474,"mutability":"mutable","name":"payoutWallet","nameLocation":"1447:12:55","nodeType":"VariableDeclaration","scope":5820,"src":"1432:27:55","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5473,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":5475,"nodeType":"StructuredDocumentation","src":"1466:27:55","text":"@notice Store the nonce"},"functionSelector":"affed0e0","id":5477,"mutability":"mutable","name":"nonce","nameLocation":"1512:5:55","nodeType":"VariableDeclaration","scope":5820,"src":"1498:19:55","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5476,"name":"uint16","nodeType":"ElementaryTypeName","src":"1498:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"public"},{"anonymous":false,"documentation":{"id":5478,"nodeType":"StructuredDocumentation","src":"1524:144:55","text":"@notice Emitted when a new merkle root is set.\n @param root The new merkle root.\n @param nonce The nonce assigned to the root."},"eventSelector":"bb00584cc5258c6d02504d390995c03261d52c617c9171c16cb9edb00f672f3a","id":5484,"name":"MerkleRootSet","nameLocation":"1679:13:55","nodeType":"EventDefinition","parameters":{"id":5483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5480,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1709:4:55","nodeType":"VariableDeclaration","scope":5484,"src":"1693:20:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1693:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5482,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"1730:5:55","nodeType":"VariableDeclaration","scope":5484,"src":"1715:20:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5481,"name":"uint16","nodeType":"ElementaryTypeName","src":"1715:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1692:44:55"},"src":"1673:64:55"},{"anonymous":false,"documentation":{"id":5485,"nodeType":"StructuredDocumentation","src":"1743:106:55","text":"@notice Emitted when a new payout wallet is set.\n @param newPayoutWallet The new payout wallet."},"eventSelector":"dd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f855","id":5489,"name":"PayoutWalletSet","nameLocation":"1860:15:55","nodeType":"EventDefinition","parameters":{"id":5488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5487,"indexed":true,"mutability":"mutable","name":"newPayoutWallet","nameLocation":"1892:15:55","nodeType":"VariableDeclaration","scope":5489,"src":"1876:31:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5486,"name":"address","nodeType":"ElementaryTypeName","src":"1876:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1875:33:55"},"src":"1854:55:55"},{"anonymous":false,"documentation":{"id":5490,"nodeType":"StructuredDocumentation","src":"1915:112:55","text":"@notice Emitted when a new treasury wallet is set.\n @param newTreasuryWallet The new treasury wallet."},"eventSelector":"5695f8b02f5f53d02b408db3ed952c16f32f9701ad2691c44733f2a2d09225a9","id":5494,"name":"TreasuryWalletSet","nameLocation":"2038:17:55","nodeType":"EventDefinition","parameters":{"id":5493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5492,"indexed":true,"mutability":"mutable","name":"newTreasuryWallet","nameLocation":"2072:17:55","nodeType":"VariableDeclaration","scope":5494,"src":"2056:33:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5491,"name":"address","nodeType":"ElementaryTypeName","src":"2056:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2055:35:55"},"src":"2032:59:55"},{"anonymous":false,"documentation":{"id":5495,"nodeType":"StructuredDocumentation","src":"2097:309:55","text":"@notice Emitted when a payout is claimed.\n @param root The merkle root on which the claim was made.\n @param payoutWallet The wallet sending out the checkmate token.\n @param recipient The recipient of the checkmate token.\n @param amount The amount of checkmate token is claimed."},"eventSelector":"96a0bda4b1c283cf8feeb70ec1fc51c1f830f0548dc9f740b8d885079be89106","id":5505,"name":"PayoutClaimed","nameLocation":"2417:13:55","nodeType":"EventDefinition","parameters":{"id":5504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5497,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"2447:4:55","nodeType":"VariableDeclaration","scope":5505,"src":"2431:20:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2431:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5499,"indexed":true,"mutability":"mutable","name":"payoutWallet","nameLocation":"2469:12:55","nodeType":"VariableDeclaration","scope":5505,"src":"2453:28:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5498,"name":"address","nodeType":"ElementaryTypeName","src":"2453:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5501,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2499:9:55","nodeType":"VariableDeclaration","scope":5505,"src":"2483:25:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5500,"name":"address","nodeType":"ElementaryTypeName","src":"2483:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5503,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2518:6:55","nodeType":"VariableDeclaration","scope":5505,"src":"2510:14:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5502,"name":"uint256","nodeType":"ElementaryTypeName","src":"2510:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:95:55"},"src":"2411:115:55"},{"documentation":{"id":5506,"nodeType":"StructuredDocumentation","src":"2532:77:55","text":"@notice Thrown when the given forwarder registry address is zero address."},"errorSelector":"d516e87c","id":5508,"name":"InvalidForwarderRegistry","nameLocation":"2620:24:55","nodeType":"ErrorDefinition","parameters":{"id":5507,"nodeType":"ParameterList","parameters":[],"src":"2644:2:55"},"src":"2614:33:55"},{"documentation":{"id":5509,"nodeType":"StructuredDocumentation","src":"2653:47:55","text":"@notice Thrown when the given root is zero."},"errorSelector":"504570e3","id":5511,"name":"InvalidRoot","nameLocation":"2711:11:55","nodeType":"ErrorDefinition","parameters":{"id":5510,"nodeType":"ParameterList","parameters":[],"src":"2722:2:55"},"src":"2705:20:55"},{"documentation":{"id":5512,"nodeType":"StructuredDocumentation","src":"2731:72:55","text":"@notice Thrown when the given payout wallet address is zero address."},"errorSelector":"c41cbee2","id":5514,"name":"InvalidPayoutWallet","nameLocation":"2814:19:55","nodeType":"ErrorDefinition","parameters":{"id":5513,"nodeType":"ParameterList","parameters":[],"src":"2833:2:55"},"src":"2808:28:55"},{"documentation":{"id":5515,"nodeType":"StructuredDocumentation","src":"2842:72:55","text":"@notice Thrown when the checkmate token contract address is invalid."},"errorSelector":"8246bfe7","id":5517,"name":"InvalidCheckmateTokenContract","nameLocation":"2925:29:55","nodeType":"ErrorDefinition","parameters":{"id":5516,"nodeType":"ParameterList","parameters":[],"src":"2954:2:55"},"src":"2919:38:55"},{"documentation":{"id":5518,"nodeType":"StructuredDocumentation","src":"2963:64:55","text":"@notice Thrown when the staking contract address is invalid."},"errorSelector":"3d8c6f98","id":5520,"name":"InvalidStakingContract","nameLocation":"3038:22:55","nodeType":"ErrorDefinition","parameters":{"id":5519,"nodeType":"ParameterList","parameters":[],"src":"3060:2:55"},"src":"3032:31:55"},{"documentation":{"id":5521,"nodeType":"StructuredDocumentation","src":"3069:216:55","text":"@notice Thrown when trying to claim the same leaf more than once.\n @param recipient The recipient of the claim.\n @param amount The amount of checkmate token is claimed.\n @param root The root."},"errorSelector":"685fced7","id":5529,"name":"AlreadyClaimed","nameLocation":"3296:14:55","nodeType":"ErrorDefinition","parameters":{"id":5528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5523,"mutability":"mutable","name":"recipient","nameLocation":"3319:9:55","nodeType":"VariableDeclaration","scope":5529,"src":"3311:17:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5522,"name":"address","nodeType":"ElementaryTypeName","src":"3311:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5525,"mutability":"mutable","name":"amount","nameLocation":"3338:6:55","nodeType":"VariableDeclaration","scope":5529,"src":"3330:14:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5524,"name":"uint256","nodeType":"ElementaryTypeName","src":"3330:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5527,"mutability":"mutable","name":"root","nameLocation":"3354:4:55","nodeType":"VariableDeclaration","scope":5529,"src":"3346:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3346:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3310:49:55"},"src":"3290:70:55"},{"documentation":{"id":5530,"nodeType":"StructuredDocumentation","src":"3366:222:55","text":"@notice Thrown when a proof cannot be verified.\n @param recipient The recipient of the checkmate token.\n @param amount The amount of checkmate token is claimed.\n @param nonce The nonce of the root."},"errorSelector":"acfb1865","id":5538,"name":"InvalidProof","nameLocation":"3599:12:55","nodeType":"ErrorDefinition","parameters":{"id":5537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5532,"mutability":"mutable","name":"recipient","nameLocation":"3620:9:55","nodeType":"VariableDeclaration","scope":5538,"src":"3612:17:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5531,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5534,"mutability":"mutable","name":"amount","nameLocation":"3639:6:55","nodeType":"VariableDeclaration","scope":5538,"src":"3631:14:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5533,"name":"uint256","nodeType":"ElementaryTypeName","src":"3631:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5536,"mutability":"mutable","name":"nonce","nameLocation":"3654:5:55","nodeType":"VariableDeclaration","scope":5538,"src":"3647:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5535,"name":"uint16","nodeType":"ElementaryTypeName","src":"3647:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3611:49:55"},"src":"3593:68:55"},{"documentation":{"id":5539,"nodeType":"StructuredDocumentation","src":"3667:85:55","text":"@notice Thrown when the merkle root does not exist.\n @param root The root."},"errorSelector":"1d3bbc3f","id":5543,"name":"MerkleRootNotExists","nameLocation":"3763:19:55","nodeType":"ErrorDefinition","parameters":{"id":5542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5541,"mutability":"mutable","name":"root","nameLocation":"3791:4:55","nodeType":"VariableDeclaration","scope":5543,"src":"3783:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5540,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3783:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3782:14:55"},"src":"3757:40:55"},{"documentation":{"id":5544,"nodeType":"StructuredDocumentation","src":"3803:96:55","text":"@notice Thrown when the claim amount is zero.\n @param amount The amount of the claim."},"errorSelector":"27ab1ee2","id":5548,"name":"InvalidClaimAmount","nameLocation":"3910:18:55","nodeType":"ErrorDefinition","parameters":{"id":5547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5546,"mutability":"mutable","name":"amount","nameLocation":"3937:6:55","nodeType":"VariableDeclaration","scope":5548,"src":"3929:14:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5545,"name":"uint256","nodeType":"ElementaryTypeName","src":"3929:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3928:16:55"},"src":"3904:41:55"},{"documentation":{"id":5549,"nodeType":"StructuredDocumentation","src":"3951:228:55","text":"@notice Thrown when checkmate token transfer failed.\n @param payoutWallet The wallet sending out the checkmate token.\n @param recipient The recipient of the claim.\n @param amount The amount of the claim."},"errorSelector":"bf182be8","id":5557,"name":"TransferFailed","nameLocation":"4190:14:55","nodeType":"ErrorDefinition","parameters":{"id":5556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5551,"mutability":"mutable","name":"payoutWallet","nameLocation":"4213:12:55","nodeType":"VariableDeclaration","scope":5557,"src":"4205:20:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5550,"name":"address","nodeType":"ElementaryTypeName","src":"4205:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5553,"mutability":"mutable","name":"recipient","nameLocation":"4235:9:55","nodeType":"VariableDeclaration","scope":5557,"src":"4227:17:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5552,"name":"address","nodeType":"ElementaryTypeName","src":"4227:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5555,"mutability":"mutable","name":"amount","nameLocation":"4254:6:55","nodeType":"VariableDeclaration","scope":5557,"src":"4246:14:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5554,"name":"uint256","nodeType":"ElementaryTypeName","src":"4246:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4204:57:55"},"src":"4184:78:55"},{"body":{"id":5615,"nodeType":"Block","src":"4392:462:55","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5570,"name":"checkmateTokenContract_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5559,"src":"4406:23:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4441:1:55","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4433:7:55","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5571,"name":"address","nodeType":"ElementaryTypeName","src":"4433:7:55","typeDescriptions":{}}},"id":5574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4433:10:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4406:37:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5580,"nodeType":"IfStatement","src":"4402:106:55","trueBody":{"id":5579,"nodeType":"Block","src":"4445:63:55","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5576,"name":"InvalidCheckmateTokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5517,"src":"4466:29:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4466:31:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5578,"nodeType":"RevertStatement","src":"4459:38:55"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5581,"name":"stakingContract_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5561,"src":"4521:16:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4549:1:55","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4541:7:55","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5582,"name":"address","nodeType":"ElementaryTypeName","src":"4541:7:55","typeDescriptions":{}}},"id":5585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4541:10:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4521:30:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5591,"nodeType":"IfStatement","src":"4517:92:55","trueBody":{"id":5590,"nodeType":"Block","src":"4553:56:55","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5587,"name":"InvalidStakingContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5520,"src":"4574:22:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4574:24:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5589,"nodeType":"RevertStatement","src":"4567:31:55"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5592,"name":"payoutWallet_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5563,"src":"4622:13:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4647:1:55","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4639:7:55","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5593,"name":"address","nodeType":"ElementaryTypeName","src":"4639:7:55","typeDescriptions":{}}},"id":5596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4639:10:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4622:27:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5602,"nodeType":"IfStatement","src":"4618:86:55","trueBody":{"id":5601,"nodeType":"Block","src":"4651:53:55","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5598,"name":"InvalidPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"4672:19:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4672:21:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5600,"nodeType":"RevertStatement","src":"4665:28:55"}]}},{"expression":{"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5603,"name":"CHECKMATE_TOKEN_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"4714:24:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5604,"name":"checkmateTokenContract_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5559,"src":"4741:23:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4714:50:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5606,"nodeType":"ExpressionStatement","src":"4714:50:55"},{"expression":{"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5607,"name":"STAKING_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"4774:16:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5608,"name":"stakingContract_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5561,"src":"4793:16:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4774:35:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5610,"nodeType":"ExpressionStatement","src":"4774:35:55"},{"expression":{"id":5613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5611,"name":"payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5474,"src":"4819:12:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5612,"name":"payoutWallet_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5563,"src":"4834:13:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4819:28:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5614,"nodeType":"ExpressionStatement","src":"4819:28:55"}]},"id":5616,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":5566,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4380:3:55","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4384:6:55","memberName":"sender","nodeType":"MemberAccess","src":"4380:10:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5568,"kind":"baseConstructorSpecifier","modifierName":{"id":5565,"name":"ContractOwnership","nameLocations":["4362:17:55"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"4362:17:55"},"nodeType":"ModifierInvocation","src":"4362:29:55"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5559,"mutability":"mutable","name":"checkmateTokenContract_","nameLocation":"4288:23:55","nodeType":"VariableDeclaration","scope":5616,"src":"4280:31:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5558,"name":"address","nodeType":"ElementaryTypeName","src":"4280:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5561,"mutability":"mutable","name":"stakingContract_","nameLocation":"4321:16:55","nodeType":"VariableDeclaration","scope":5616,"src":"4313:24:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5560,"name":"address","nodeType":"ElementaryTypeName","src":"4313:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5563,"mutability":"mutable","name":"payoutWallet_","nameLocation":"4347:13:55","nodeType":"VariableDeclaration","scope":5616,"src":"4339:21:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5562,"name":"address","nodeType":"ElementaryTypeName","src":"4339:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4279:82:55"},"returnParameters":{"id":5569,"nodeType":"ParameterList","parameters":[],"src":"4392:0:55"},"scope":5820,"src":"4268:586:55","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5660,"nodeType":"Block","src":"5237:317:55","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5622,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5619,"src":"5251:10:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5265:1:55","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5251:15:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5629,"nodeType":"IfStatement","src":"5247:66:55","trueBody":{"id":5628,"nodeType":"Block","src":"5268:45:55","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5625,"name":"InvalidRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"5289:11:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5289:13:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5627,"nodeType":"RevertStatement","src":"5282:20:55"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5635,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"5380:10:55","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5380:12:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5630,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"5323:24:55","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":5632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5348:6:55","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"5323:31:55","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5323:33:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":5634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5357:22:55","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"5323:56:55","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5323:70:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5638,"nodeType":"ExpressionStatement","src":"5323:70:55"},{"assignments":[5640],"declarations":[{"constant":false,"id":5640,"mutability":"mutable","name":"_nonce","nameLocation":"5411:6:55","nodeType":"VariableDeclaration","scope":5660,"src":"5404:13:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5639,"name":"uint16","nodeType":"ElementaryTypeName","src":"5404:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":5644,"initialValue":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":5643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5641,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"5420:5:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5428:1:55","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5420:9:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"5404:25:55"},{"expression":{"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5645,"name":"rootToNonceMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"5439:14:55","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"}},"id":5647,"indexExpression":{"id":5646,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5619,"src":"5454:10:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5439:26:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5648,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5640,"src":"5468:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5439:35:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":5650,"nodeType":"ExpressionStatement","src":"5439:35:55"},{"expression":{"id":5653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5651,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"5484:5:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5652,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5640,"src":"5492:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5484:14:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":5654,"nodeType":"ExpressionStatement","src":"5484:14:55"},{"eventCall":{"arguments":[{"id":5656,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5619,"src":"5528:10:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5657,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5640,"src":"5540:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":5655,"name":"MerkleRootSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"5514:13:55","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint16_$returns$__$","typeString":"function (bytes32,uint16)"}},"id":5658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5514:33:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5659,"nodeType":"EmitStatement","src":"5509:38:55"}]},"documentation":{"id":5617,"nodeType":"StructuredDocumentation","src":"4860:320:55","text":"@notice Sets the new merkle root with current nonce for claiming.\n @dev Reverts with {InvalidRoot} if the merkle root is zero.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {MerkleRootSet} event.\n @param merkleRoot The merkle root to be set."},"functionSelector":"7cb64759","id":5661,"implemented":true,"kind":"function","modifiers":[],"name":"setMerkleRoot","nameLocation":"5194:13:55","nodeType":"FunctionDefinition","parameters":{"id":5620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5619,"mutability":"mutable","name":"merkleRoot","nameLocation":"5216:10:55","nodeType":"VariableDeclaration","scope":5661,"src":"5208:18:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5208:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5207:20:55"},"returnParameters":{"id":5621,"nodeType":"ParameterList","parameters":[],"src":"5237:0:55"},"scope":5820,"src":"5185:369:55","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5695,"nodeType":"Block","src":"5945:274:55","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5667,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5664,"src":"5959:15:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5986:1:55","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5978:7:55","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5668,"name":"address","nodeType":"ElementaryTypeName","src":"5978:7:55","typeDescriptions":{}}},"id":5671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5978:10:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5959:29:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5677,"nodeType":"IfStatement","src":"5955:88:55","trueBody":{"id":5676,"nodeType":"Block","src":"5990:53:55","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5673,"name":"InvalidPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"6011:19:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6011:21:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5675,"nodeType":"RevertStatement","src":"6004:28:55"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5683,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"6110:10:55","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6110:12:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5678,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"6053:24:55","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$862_$","typeString":"type(library ContractOwnershipStorage)"}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6078:6:55","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":861,"src":"6053:31:55","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6053:33:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$635_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":5682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6087:22:55","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":829,"src":"6053:56:55","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$635_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$635_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6053:70:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5686,"nodeType":"ExpressionStatement","src":"6053:70:55"},{"expression":{"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5687,"name":"payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5474,"src":"6134:12:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5688,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5664,"src":"6149:15:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6134:30:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5690,"nodeType":"ExpressionStatement","src":"6134:30:55"},{"eventCall":{"arguments":[{"id":5692,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5664,"src":"6196:15:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5691,"name":"PayoutWalletSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5489,"src":"6180:15:55","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6180:32:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5694,"nodeType":"EmitStatement","src":"6175:37:55"}]},"documentation":{"id":5662,"nodeType":"StructuredDocumentation","src":"5560:321:55","text":"@notice Sets the new payout wallet.\n @dev Reverts with {InvalidPayoutWallet} if the new payout wallet is zero address.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {PayoutWalletSet} event.\n @param newPayoutWallet The payout wallet to be set."},"functionSelector":"6b8f9c43","id":5696,"implemented":true,"kind":"function","modifiers":[],"name":"setPayoutWallet","nameLocation":"5895:15:55","nodeType":"FunctionDefinition","parameters":{"id":5665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5664,"mutability":"mutable","name":"newPayoutWallet","nameLocation":"5919:15:55","nodeType":"VariableDeclaration","scope":5696,"src":"5911:23:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5663,"name":"address","nodeType":"ElementaryTypeName","src":"5911:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5910:25:55"},"returnParameters":{"id":5666,"nodeType":"ParameterList","parameters":[],"src":"5945:0:55"},"scope":5820,"src":"5886:333:55","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5818,"nodeType":"Block","src":"7153:973:55","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5709,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"7167:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7177:1:55","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7167:11:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5717,"nodeType":"IfStatement","src":"7163:75:55","trueBody":{"id":5716,"nodeType":"Block","src":"7180:58:55","statements":[{"errorCall":{"arguments":[{"id":5713,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"7220:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5712,"name":"InvalidClaimAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5548,"src":"7201:18:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":5714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7201:26:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5715,"nodeType":"RevertStatement","src":"7194:33:55"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5718,"name":"PauseStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"7248:12:55","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PauseStorage_$1301_$","typeString":"type(library PauseStorage)"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7261:6:55","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1300,"src":"7248:19:55","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function () pure returns (struct PauseStorage.Layout storage pointer)"}},"id":5721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7248:21:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1131_storage_ptr","typeString":"struct PauseStorage.Layout storage pointer"}},"id":5722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7270:18:55","memberName":"enforceIsNotPaused","nodeType":"MemberAccess","referencedDeclaration":1288,"src":"7248:40:55","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1131_storage_ptr_$returns$__$attached_to$_t_struct$_Layout_$1131_storage_ptr_$","typeString":"function (struct PauseStorage.Layout storage pointer) view"}},"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7248:42:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5724,"nodeType":"ExpressionStatement","src":"7248:42:55"},{"assignments":[5726],"declarations":[{"constant":false,"id":5726,"mutability":"mutable","name":"_nonce","nameLocation":"7308:6:55","nodeType":"VariableDeclaration","scope":5818,"src":"7301:13:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5725,"name":"uint16","nodeType":"ElementaryTypeName","src":"7301:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":5730,"initialValue":{"baseExpression":{"id":5727,"name":"rootToNonceMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"7317:14:55","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint16_$","typeString":"mapping(bytes32 => uint16)"}},"id":5729,"indexExpression":{"id":5728,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"7332:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7317:20:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"7301:36:55"},{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5731,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5726,"src":"7351:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7361:1:55","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7351:11:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5739,"nodeType":"IfStatement","src":"7347:74:55","trueBody":{"id":5738,"nodeType":"Block","src":"7364:57:55","statements":[{"errorCall":{"arguments":[{"id":5735,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"7405:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5734,"name":"MerkleRootNotExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"7385:19:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$_t_error_$","typeString":"function (bytes32) pure returns (error)"}},"id":5736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7385:25:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5737,"nodeType":"RevertStatement","src":"7378:32:55"}]}},{"assignments":[5741],"declarations":[{"constant":false,"id":5741,"mutability":"mutable","name":"leaf","nameLocation":"7439:4:55","nodeType":"VariableDeclaration","scope":5818,"src":"7431:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7431:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5750,"initialValue":{"arguments":[{"arguments":[{"id":5745,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"7473:9:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5746,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"7484:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5747,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5726,"src":"7492:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":5743,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7456:3:55","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7460:12:55","memberName":"encodePacked","nodeType":"MemberAccess","src":"7456:16:55","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7456:43:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5742,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7446:9:55","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7446:54:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7431:69:55"},{"condition":{"id":5756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7514:33:55","subExpression":{"arguments":[{"id":5753,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"7536:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5754,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5741,"src":"7542:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5751,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"7515:5:55","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":5752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7521:14:55","memberName":"verifyCalldata","nodeType":"MemberAccess","referencedDeclaration":4513,"src":"7515:20:55","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_calldata_ptr_$","typeString":"function (bytes32[] calldata,bytes32,bytes32) pure returns (bool)"}},"id":5755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7515:32:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5764,"nodeType":"IfStatement","src":"7510:110:55","trueBody":{"id":5763,"nodeType":"Block","src":"7549:71:55","statements":[{"errorCall":{"arguments":[{"id":5758,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"7583:9:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5759,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"7594:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5760,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5726,"src":"7602:6:55","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":5757,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"7570:12:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint16_$returns$_t_error_$","typeString":"function (address,uint256,uint16) pure returns (error)"}},"id":5761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7570:39:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5762,"nodeType":"RevertStatement","src":"7563:46:55"}]}},{"condition":{"baseExpression":{"id":5765,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5471,"src":"7634:7:55","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5767,"indexExpression":{"id":5766,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5741,"src":"7642:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7634:13:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5775,"nodeType":"IfStatement","src":"7630:90:55","trueBody":{"id":5774,"nodeType":"Block","src":"7649:71:55","statements":[{"errorCall":{"arguments":[{"id":5769,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"7685:9:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5770,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"7696:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5771,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"7704:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5768,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"7670:14:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_bytes32_$returns$_t_error_$","typeString":"function (address,uint256,bytes32) pure returns (error)"}},"id":5772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7670:39:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5773,"nodeType":"RevertStatement","src":"7663:46:55"}]}},{"expression":{"id":5780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5776,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5471,"src":"7730:7:55","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5778,"indexExpression":{"id":5777,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5741,"src":"7738:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7730:13:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7746:4:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7730:20:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5781,"nodeType":"ExpressionStatement","src":"7730:20:55"},{"assignments":[5783],"declarations":[{"constant":false,"id":5783,"mutability":"mutable","name":"_payoutWallet","nameLocation":"7769:13:55","nodeType":"VariableDeclaration","scope":5818,"src":"7761:21:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5782,"name":"address","nodeType":"ElementaryTypeName","src":"7761:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5785,"initialValue":{"id":5784,"name":"payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5474,"src":"7785:12:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7761:36:55"},{"assignments":[5787],"declarations":[{"constant":false,"id":5787,"mutability":"mutable","name":"success","nameLocation":"7812:7:55","nodeType":"VariableDeclaration","scope":5818,"src":"7807:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5786,"name":"bool","nodeType":"ElementaryTypeName","src":"7807:4:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5800,"initialValue":{"arguments":[{"id":5792,"name":"_payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"7885:13:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5793,"name":"STAKING_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"7900:16:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5794,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"7918:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5797,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"7937:9:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5795,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7926:3:55","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7930:6:55","memberName":"encode","nodeType":"MemberAccess","src":"7926:10:55","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7926:21:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":5789,"name":"CHECKMATE_TOKEN_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"7842:24:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5788,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"7822:19:55","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20SafeTransfers_$3112_$","typeString":"type(contract IERC20SafeTransfers)"}},"id":5790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7822:45:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$3112","typeString":"contract IERC20SafeTransfers"}},"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7868:16:55","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3111,"src":"7822:62:55","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) external returns (bool)"}},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7822:126:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"7807:141:55"},{"condition":{"id":5802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7962:8:55","subExpression":{"id":5801,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5787,"src":"7963:7:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5810,"nodeType":"IfStatement","src":"7958:94:55","trueBody":{"id":5809,"nodeType":"Block","src":"7972:80:55","statements":[{"errorCall":{"arguments":[{"id":5804,"name":"_payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"8008:13:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5805,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"8023:9:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5806,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"8034:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5803,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5557,"src":"7993:14:55","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$_t_error_$","typeString":"function (address,address,uint256) pure returns (error)"}},"id":5807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7993:48:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5808,"nodeType":"RevertStatement","src":"7986:55:55"}]}},{"eventCall":{"arguments":[{"id":5812,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"8080:4:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5813,"name":"_payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"8086:13:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5814,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"8101:9:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5815,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"8112:6:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5811,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"8066:13:55","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8066:53:55","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5817,"nodeType":"EmitStatement","src":"8061:58:55"}]},"documentation":{"id":5697,"nodeType":"StructuredDocumentation","src":"6225:816:55","text":"@notice Executes the payout for a given recipient address (anyone can call this function) and stake the payout right away.\n @dev Reverts with {InvalidClaimAmount} if it is claiming a zero amount.\n @dev Reverts with {Paused} if contract is paused.\n @dev Reverts with {MerkleRootNotExists} if the merkle root does not exist.\n @dev Reverts with {InvalidProof} if the merkle proof has failed the verification\n @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\n @dev Emits a {PayoutClaimed} event.\n @param recipient The recipient for this claim.\n @param amount The amount of checkmate token to be claimed.\n @param root The root for this claim.\n @param proof The Merkle proof of the user based on the merkle root."},"functionSelector":"422a8b55","id":5819,"implemented":true,"kind":"function","modifiers":[],"name":"claimAndStake","nameLocation":"7055:13:55","nodeType":"FunctionDefinition","parameters":{"id":5707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5699,"mutability":"mutable","name":"recipient","nameLocation":"7077:9:55","nodeType":"VariableDeclaration","scope":5819,"src":"7069:17:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5698,"name":"address","nodeType":"ElementaryTypeName","src":"7069:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5701,"mutability":"mutable","name":"amount","nameLocation":"7096:6:55","nodeType":"VariableDeclaration","scope":5819,"src":"7088:14:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5700,"name":"uint256","nodeType":"ElementaryTypeName","src":"7088:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5703,"mutability":"mutable","name":"root","nameLocation":"7112:4:55","nodeType":"VariableDeclaration","scope":5819,"src":"7104:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7104:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5706,"mutability":"mutable","name":"proof","nameLocation":"7137:5:55","nodeType":"VariableDeclaration","scope":5819,"src":"7118:24:55","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5704,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7118:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5705,"nodeType":"ArrayTypeName","src":"7118:9:55","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7068:75:55"},"returnParameters":{"id":5708,"nodeType":"ParameterList","parameters":[],"src":"7153:0:55"},"scope":5820,"src":"7046:1080:55","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5821,"src":"695:7433:55","usedErrors":[259,897,1093,1096,5508,5511,5514,5517,5520,5529,5538,5543,5548,5557],"usedEvents":[300,1101,1104,5484,5489,5494,5505]}],"src":"32:8097:55"},"id":55},"contracts/mocks/ERC20/ERC20ReceiverMock.sol":{"ast":{"absolutePath":"contracts/mocks/ERC20/ERC20ReceiverMock.sol","exportedSymbols":{"ERC20ReceiverMock":[5843],"IERC20Receiver":[3082]},"id":5844,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5822,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"45:24:56"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","id":5824,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5844,"sourceUnit":3083,"src":"71:111:56","symbolAliases":[{"foreign":{"id":5823,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"79:14:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5825,"name":"IERC20Receiver","nameLocations":["214:14:56"],"nodeType":"IdentifierPath","referencedDeclaration":3082,"src":"214:14:56"},"id":5826,"nodeType":"InheritanceSpecifier","src":"214:14:56"}],"canonicalName":"ERC20ReceiverMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5843,"linearizedBaseContracts":[5843,3082],"name":"ERC20ReceiverMock","nameLocation":"193:17:56","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3081],"body":{"id":5841,"nodeType":"Block","src":"334:34:56","statements":[{"expression":{"hexValue":"30783466633335383539","id":5839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"351:10:56","typeDescriptions":{"typeIdentifier":"t_rational_1338202201_by_1","typeString":"int_const 1338202201"},"value":"0x4fc35859"},"functionReturnParameters":5838,"id":5840,"nodeType":"Return","src":"344:17:56"}]},"functionSelector":"4fc35859","id":5842,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"244:15:56","nodeType":"FunctionDefinition","parameters":{"id":5835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5842,"src":"260:7:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5827,"name":"address","nodeType":"ElementaryTypeName","src":"260:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5842,"src":"269:7:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5829,"name":"address","nodeType":"ElementaryTypeName","src":"269:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5842,"src":"278:7:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5831,"name":"uint256","nodeType":"ElementaryTypeName","src":"278:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5842,"src":"287:14:56","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5833,"name":"bytes","nodeType":"ElementaryTypeName","src":"287:5:56","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"259:43:56"},"returnParameters":{"id":5838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5842,"src":"326:6:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5836,"name":"bytes4","nodeType":"ElementaryTypeName","src":"326:6:56","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"325:8:56"},"scope":5843,"src":"235:133:56","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":5844,"src":"184:186:56","usedErrors":[],"usedEvents":[]}],"src":"45:326:56"},"id":56},"contracts/mocks/ERC20/ERC20SafeTransfersAlwaysFailedMock.sol":{"ast":{"absolutePath":"contracts/mocks/ERC20/ERC20SafeTransfersAlwaysFailedMock.sol","exportedSymbols":{"ERC20SafeTransfersAlwaysFailedMock":[5880],"IERC20SafeTransfers":[3112]},"id":5881,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5845,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"45:24:57"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","id":5847,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5881,"sourceUnit":3113,"src":"71:121:57","symbolAliases":[{"foreign":{"id":5846,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"79:19:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5848,"name":"IERC20SafeTransfers","nameLocations":["240:19:57"],"nodeType":"IdentifierPath","referencedDeclaration":3112,"src":"240:19:57"},"id":5849,"nodeType":"InheritanceSpecifier","src":"240:19:57"}],"canonicalName":"ERC20SafeTransfersAlwaysFailedMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5880,"linearizedBaseContracts":[5880,3112],"name":"ERC20SafeTransfersAlwaysFailedMock","nameLocation":"202:34:57","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3097],"body":{"id":5862,"nodeType":"Block","src":"351:29:57","statements":[{"expression":{"hexValue":"66616c7365","id":5860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"368:5:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5859,"id":5861,"nodeType":"Return","src":"361:12:57"}]},"functionSelector":"eb795549","id":5863,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"275:12:57","nodeType":"FunctionDefinition","parameters":{"id":5856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5863,"src":"288:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5850,"name":"address","nodeType":"ElementaryTypeName","src":"288:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5863,"src":"297:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5852,"name":"uint256","nodeType":"ElementaryTypeName","src":"297:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5863,"src":"306:14:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5854,"name":"bytes","nodeType":"ElementaryTypeName","src":"306:5:57","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"287:34:57"},"returnParameters":{"id":5859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5863,"src":"345:4:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5857,"name":"bool","nodeType":"ElementaryTypeName","src":"345:4:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"344:6:57"},"scope":5880,"src":"266:114:57","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3111],"body":{"id":5878,"nodeType":"Block","src":"484:29:57","statements":[{"expression":{"hexValue":"66616c7365","id":5876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"501:5:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5875,"id":5877,"nodeType":"Return","src":"494:12:57"}]},"functionSelector":"b88d4fde","id":5879,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"395:16:57","nodeType":"FunctionDefinition","parameters":{"id":5872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5879,"src":"412:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5864,"name":"address","nodeType":"ElementaryTypeName","src":"412:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5879,"src":"421:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5866,"name":"address","nodeType":"ElementaryTypeName","src":"421:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5879,"src":"430:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5868,"name":"uint256","nodeType":"ElementaryTypeName","src":"430:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5879,"src":"439:14:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5870,"name":"bytes","nodeType":"ElementaryTypeName","src":"439:5:57","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"411:43:57"},"returnParameters":{"id":5875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5879,"src":"478:4:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5873,"name":"bool","nodeType":"ElementaryTypeName","src":"478:4:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"477:6:57"},"scope":5880,"src":"386:127:57","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":5881,"src":"193:322:57","usedErrors":[],"usedEvents":[]}],"src":"45:471:57"},"id":57},"contracts/mocks/points/PointsMock.sol":{"ast":{"absolutePath":"contracts/mocks/points/PointsMock.sol","exportedSymbols":{"IPoints":[5929],"PointsMock":[5917]},"id":5918,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5882,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:58"},{"absolutePath":"contracts/points/interface/IPoints.sol","file":"../../points/interface/IPoints.sol","id":5884,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5918,"sourceUnit":5930,"src":"57:59:58","symbolAliases":[{"foreign":{"id":5883,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"65:7:58","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5885,"name":"IPoints","nameLocations":["141:7:58"],"nodeType":"IdentifierPath","referencedDeclaration":5929,"src":"141:7:58"},"id":5886,"nodeType":"InheritanceSpecifier","src":"141:7:58"}],"canonicalName":"PointsMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5917,"linearizedBaseContracts":[5917,5929],"name":"PointsMock","nameLocation":"127:10:58","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":5887,"nodeType":"StructuredDocumentation","src":"155:274:58","text":"@notice Emitted when an amount is deposited to a balance.\n @param sender The sender of the deposit.\n @param reasonCode The reason code of the deposit.\n @param holder The holder of the balance deposited to.\n @param amount The amount deposited."},"eventSelector":"81226022599698f02239ac5895ce7a96962ba5fe72f8f7610d1cc2cb0405f391","id":5897,"name":"Deposited","nameLocation":"440:9:58","nodeType":"EventDefinition","parameters":{"id":5896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5889,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"466:6:58","nodeType":"VariableDeclaration","scope":5897,"src":"450:22:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5888,"name":"address","nodeType":"ElementaryTypeName","src":"450:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5891,"indexed":true,"mutability":"mutable","name":"reasonCode","nameLocation":"490:10:58","nodeType":"VariableDeclaration","scope":5897,"src":"474:26:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5890,"name":"bytes32","nodeType":"ElementaryTypeName","src":"474:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5893,"indexed":true,"mutability":"mutable","name":"holder","nameLocation":"518:6:58","nodeType":"VariableDeclaration","scope":5897,"src":"502:22:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5892,"name":"address","nodeType":"ElementaryTypeName","src":"502:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5895,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"534:6:58","nodeType":"VariableDeclaration","scope":5897,"src":"526:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5894,"name":"uint256","nodeType":"ElementaryTypeName","src":"526:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"449:92:58"},"src":"434:108:58"},{"baseFunctions":[5928],"body":{"id":5915,"nodeType":"Block","src":"881:78:58","statements":[{"eventCall":{"arguments":[{"expression":{"id":5908,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"906:3:58","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"910:6:58","memberName":"sender","nodeType":"MemberAccess","src":"906:10:58","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5910,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5904,"src":"918:17:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5911,"name":"holder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5900,"src":"937:6:58","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5912,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5902,"src":"945:6:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5907,"name":"Deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5897,"src":"896:9:58","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,address,uint256)"}},"id":5913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"896:56:58","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5914,"nodeType":"EmitStatement","src":"891:61:58"}]},"documentation":{"id":5898,"nodeType":"StructuredDocumentation","src":"548:243:58","text":"@notice Called by a depositor to increase the balance of a holder.\n @param holder The holder of the balance to deposit to.\n @param amount The amount to deposit.\n @param depositReasonCode The reason code of the deposit."},"functionSelector":"26b3293f","id":5916,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"805:7:58","nodeType":"FunctionDefinition","parameters":{"id":5905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5900,"mutability":"mutable","name":"holder","nameLocation":"821:6:58","nodeType":"VariableDeclaration","scope":5916,"src":"813:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5899,"name":"address","nodeType":"ElementaryTypeName","src":"813:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5902,"mutability":"mutable","name":"amount","nameLocation":"837:6:58","nodeType":"VariableDeclaration","scope":5916,"src":"829:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5901,"name":"uint256","nodeType":"ElementaryTypeName","src":"829:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5904,"mutability":"mutable","name":"depositReasonCode","nameLocation":"853:17:58","nodeType":"VariableDeclaration","scope":5916,"src":"845:25:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5903,"name":"bytes32","nodeType":"ElementaryTypeName","src":"845:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"812:59:58"},"returnParameters":{"id":5906,"nodeType":"ParameterList","parameters":[],"src":"881:0:58"},"scope":5917,"src":"796:163:58","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5918,"src":"118:843:58","usedErrors":[],"usedEvents":[5897]}],"src":"32:930:58"},"id":58},"contracts/points/interface/IPoints.sol":{"ast":{"absolutePath":"contracts/points/interface/IPoints.sol","exportedSymbols":{"IPoints":[5929]},"id":5930,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5919,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"45:24:59"},{"abstract":false,"baseContracts":[],"canonicalName":"IPoints","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5929,"linearizedBaseContracts":[5929],"name":"IPoints","nameLocation":"81:7:59","nodeType":"ContractDefinition","nodes":[{"functionSelector":"26b3293f","id":5928,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"104:7:59","nodeType":"FunctionDefinition","parameters":{"id":5926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5921,"mutability":"mutable","name":"holder","nameLocation":"120:6:59","nodeType":"VariableDeclaration","scope":5928,"src":"112:14:59","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5920,"name":"address","nodeType":"ElementaryTypeName","src":"112:7:59","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5923,"mutability":"mutable","name":"amount","nameLocation":"136:6:59","nodeType":"VariableDeclaration","scope":5928,"src":"128:14:59","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5922,"name":"uint256","nodeType":"ElementaryTypeName","src":"128:7:59","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5925,"mutability":"mutable","name":"depositReasonCode","nameLocation":"152:17:59","nodeType":"VariableDeclaration","scope":5928,"src":"144:25:59","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5924,"name":"bytes32","nodeType":"ElementaryTypeName","src":"144:7:59","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"111:59:59"},"returnParameters":{"id":5927,"nodeType":"ParameterList","parameters":[],"src":"179:0:59"},"scope":5929,"src":"95:85:59","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5930,"src":"71:111:59","usedErrors":[],"usedEvents":[]}],"src":"45:138:59"},"id":59},"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol":{"ast":{"absolutePath":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol","exportedSymbols":{"ERC20StakingPointsRewardsLimitedLinearPool":[6063],"ERC20StakingPointsRewardsLinearPool":[6229],"IERC20":[3386],"IForwarderRegistry":[1506],"IPoints":[5929]},"id":6064,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5931,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:60"},{"absolutePath":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol","file":"./ERC20StakingPointsRewardsLinearPool.sol","id":5933,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6064,"sourceUnit":6230,"src":"57:94:60","symbolAliases":[{"foreign":{"id":5932,"name":"ERC20StakingPointsRewardsLinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"65:35:60","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":5935,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6064,"sourceUnit":3796,"src":"152:79:60","symbolAliases":[{"foreign":{"id":5934,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"160:6:60","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":5937,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6064,"sourceUnit":1507,"src":"232:114:60","symbolAliases":[{"foreign":{"id":5936,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"240:18:60","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/points/interface/IPoints.sol","file":"./../points/interface/IPoints.sol","id":5939,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6064,"sourceUnit":5930,"src":"347:58:60","symbolAliases":[{"foreign":{"id":5938,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"355:7:60","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5941,"name":"ERC20StakingPointsRewardsLinearPool","nameLocations":["700:35:60"],"nodeType":"IdentifierPath","referencedDeclaration":6229,"src":"700:35:60"},"id":5942,"nodeType":"InheritanceSpecifier","src":"700:35:60"}],"canonicalName":"ERC20StakingPointsRewardsLimitedLinearPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":5940,"nodeType":"StructuredDocumentation","src":"407:238:60","text":"@title ERC20StakingPointsRewardsLimitedLinearPool\n @notice This contract is used to stake ERC20 tokens and obtain Points rewards.\n @notice Staking can only be done via a claim contract and the `stake` function is not available."},"fullyImplemented":true,"id":6063,"linearizedBaseContracts":[6063,6229,6292,3029,3064,2697,1350,1490,1478,1603,4176,22,55,892,909,3082,227,1718,179,4085,341,1764,325,2737],"name":"ERC20StakingPointsRewardsLimitedLinearPool","nameLocation":"654:42:60","nodeType":"ContractDefinition","nodes":[{"errorSelector":"d0411ac5","id":5946,"name":"InvalidTransferOperator","nameLocation":"748:23:60","nodeType":"ErrorDefinition","parameters":{"id":5945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5944,"mutability":"mutable","name":"operator","nameLocation":"780:8:60","nodeType":"VariableDeclaration","scope":5946,"src":"772:16:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5943,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:60","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"771:18:60"},"src":"742:48:60"},{"errorSelector":"7a404b19","id":5948,"name":"OnlyReceiverInterface","nameLocation":"801:21:60","nodeType":"ErrorDefinition","parameters":{"id":5947,"nodeType":"ParameterList","parameters":[],"src":"822:2:60"},"src":"795:30:60"},{"body":{"id":5971,"nodeType":"Block","src":"1141:2:60","statements":[]},"id":5972,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5964,"name":"claimContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5950,"src":"1058:13:60","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5965,"name":"stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5953,"src":"1073:12:60","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"id":5966,"name":"pointsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"1087:14:60","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},{"id":5967,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"1103:17:60","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5968,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5961,"src":"1122:17:60","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"id":5969,"kind":"baseConstructorSpecifier","modifierName":{"id":5963,"name":"ERC20StakingPointsRewardsLinearPool","nameLocations":["1022:35:60"],"nodeType":"IdentifierPath","referencedDeclaration":6229,"src":"1022:35:60"},"nodeType":"ModifierInvocation","src":"1022:118:60"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5950,"mutability":"mutable","name":"claimContract","nameLocation":"860:13:60","nodeType":"VariableDeclaration","scope":5972,"src":"852:21:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5949,"name":"address","nodeType":"ElementaryTypeName","src":"852:7:60","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5953,"mutability":"mutable","name":"stakingToken","nameLocation":"890:12:60","nodeType":"VariableDeclaration","scope":5972,"src":"883:19:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":5952,"nodeType":"UserDefinedTypeName","pathNode":{"id":5951,"name":"IERC20","nameLocations":["883:6:60"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"883:6:60"},"referencedDeclaration":3386,"src":"883:6:60","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":5956,"mutability":"mutable","name":"pointsContract","nameLocation":"920:14:60","nodeType":"VariableDeclaration","scope":5972,"src":"912:22:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"},"typeName":{"id":5955,"nodeType":"UserDefinedTypeName","pathNode":{"id":5954,"name":"IPoints","nameLocations":["912:7:60"],"nodeType":"IdentifierPath","referencedDeclaration":5929,"src":"912:7:60"},"referencedDeclaration":5929,"src":"912:7:60","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"visibility":"internal"},{"constant":false,"id":5958,"mutability":"mutable","name":"depositReasonCode","nameLocation":"952:17:60","nodeType":"VariableDeclaration","scope":5972,"src":"944:25:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"944:7:60","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5961,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"998:17:60","nodeType":"VariableDeclaration","scope":5972,"src":"979:36:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":5960,"nodeType":"UserDefinedTypeName","pathNode":{"id":5959,"name":"IForwarderRegistry","nameLocations":["979:18:60"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"979:18:60"},"referencedDeclaration":1506,"src":"979:18:60","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"842:179:60"},"returnParameters":{"id":5970,"nodeType":"ParameterList","parameters":[],"src":"1141:0:60"},"scope":6063,"src":"831:312:60","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[6188],"body":{"id":6029,"nodeType":"Block","src":"1280:301:60","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5987,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1298:3:60","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1302:6:60","memberName":"sender","nodeType":"MemberAccess","src":"1298:10:60","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5991,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"1320:13:60","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}],"id":5990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1312:7:60","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5989,"name":"address","nodeType":"ElementaryTypeName","src":"1312:7:60","typeDescriptions":{}}},"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1312:22:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1298:36:60","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5994,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"1336:12:60","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:14:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":5986,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1290:7:60","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":5996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1290:61:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5997,"nodeType":"ExpressionStatement","src":"1290:61:60"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5999,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"1369:8:60","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6000,"name":"CLAIM_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"1381:14:60","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1369:26:60","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":6003,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"1421:8:60","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6002,"name":"InvalidTransferOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5946,"src":"1397:23:60","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1397:33:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":5998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1361:7:60","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":6005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1361:70:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6006,"nodeType":"ExpressionStatement","src":"1361:70:60"},{"assignments":[6008],"declarations":[{"constant":false,"id":6008,"mutability":"mutable","name":"staker","nameLocation":"1449:6:60","nodeType":"VariableDeclaration","scope":6029,"src":"1441:14:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6007,"name":"address","nodeType":"ElementaryTypeName","src":"1441:7:60","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6016,"initialValue":{"arguments":[{"id":6011,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"1469:4:60","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":6013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1476:7:60","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6012,"name":"address","nodeType":"ElementaryTypeName","src":"1476:7:60","typeDescriptions":{}}}],"id":6014,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1475:9:60","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":6009,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1458:3:60","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1462:6:60","memberName":"decode","nodeType":"MemberAccess","src":"1458:10:60","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1458:27:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"1441:44:60"},{"expression":{"arguments":[{"id":6018,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6008,"src":"1502:6:60","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5978,"src":"1521:5:60","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6019,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1510:3:60","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1514:6:60","memberName":"encode","nodeType":"MemberAccess","src":"1510:10:60","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1510:17:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6017,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1495:6:60","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":6023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1495:33:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6024,"nodeType":"ExpressionStatement","src":"1495:33:60"},{"expression":{"expression":{"expression":{"id":6025,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1545:4:60","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingPointsRewardsLimitedLinearPool_$6063","typeString":"contract ERC20StakingPointsRewardsLimitedLinearPool"}},"id":6026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1550:15:60","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":6030,"src":"1545:20:60","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":6027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1566:8:60","memberName":"selector","nodeType":"MemberAccess","src":"1545:29:60","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":5985,"id":6028,"nodeType":"Return","src":"1538:36:60"}]},"functionSelector":"4fc35859","id":6030,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"1158:15:60","nodeType":"FunctionDefinition","overrides":{"id":5982,"nodeType":"OverrideSpecifier","overrides":[],"src":"1254:8:60"},"parameters":{"id":5981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5974,"mutability":"mutable","name":"operator","nameLocation":"1182:8:60","nodeType":"VariableDeclaration","scope":6030,"src":"1174:16:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5973,"name":"address","nodeType":"ElementaryTypeName","src":"1174:7:60","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6030,"src":"1192:7:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5975,"name":"address","nodeType":"ElementaryTypeName","src":"1192:7:60","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5978,"mutability":"mutable","name":"value","nameLocation":"1209:5:60","nodeType":"VariableDeclaration","scope":6030,"src":"1201:13:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5977,"name":"uint256","nodeType":"ElementaryTypeName","src":"1201:7:60","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5980,"mutability":"mutable","name":"data","nameLocation":"1231:4:60","nodeType":"VariableDeclaration","scope":6030,"src":"1216:19:60","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5979,"name":"bytes","nodeType":"ElementaryTypeName","src":"1216:5:60","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1173:63:60"},"returnParameters":{"id":5985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6030,"src":"1272:6:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5983,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1272:6:60","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1271:8:60"},"scope":6063,"src":"1149:432:60","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2856],"body":{"id":6040,"nodeType":"Block","src":"1701:47:60","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6037,"name":"OnlyReceiverInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5948,"src":"1718:21:60","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:23:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6039,"nodeType":"RevertStatement","src":"1711:30:60"}]},"documentation":{"id":6031,"nodeType":"StructuredDocumentation","src":"1587:46:60","text":"@dev Reverts with {OnlyReceiverInterface}."},"functionSelector":"2d1e0c02","id":6041,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"1647:5:60","nodeType":"FunctionDefinition","overrides":{"id":6035,"nodeType":"OverrideSpecifier","overrides":[],"src":"1692:8:60"},"parameters":{"id":6034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6041,"src":"1653:14:60","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6032,"name":"bytes","nodeType":"ElementaryTypeName","src":"1653:5:60","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1652:16:60"},"returnParameters":{"id":6036,"nodeType":"ParameterList","parameters":[],"src":"1701:0:60"},"scope":6063,"src":"1638:110:60","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[2906],"body":{"id":6061,"nodeType":"Block","src":"1866:162:60","statements":[{"expression":{"id":6059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6051,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"1975:11:60","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6054,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6045,"src":"2000:9:60","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2012:7:60","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6055,"name":"uint256","nodeType":"ElementaryTypeName","src":"2012:7:60","typeDescriptions":{}}}],"id":6057,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2011:9:60","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":6052,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1989:3:60","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1993:6:60","memberName":"decode","nodeType":"MemberAccess","src":"1989:10:60","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1989:32:60","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1975:46:60","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6060,"nodeType":"ExpressionStatement","src":"1975:46:60"}]},"id":6062,"implemented":true,"kind":"function","modifiers":[],"name":"_computeStake","nameLocation":"1763:13:60","nodeType":"FunctionDefinition","overrides":{"id":6047,"nodeType":"OverrideSpecifier","overrides":[],"src":"1827:8:60"},"parameters":{"id":6046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6062,"src":"1777:7:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6042,"name":"address","nodeType":"ElementaryTypeName","src":"1777:7:60","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6045,"mutability":"mutable","name":"stakeData","nameLocation":"1799:9:60","nodeType":"VariableDeclaration","scope":6062,"src":"1786:22:60","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6044,"name":"bytes","nodeType":"ElementaryTypeName","src":"1786:5:60","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1776:33:60"},"returnParameters":{"id":6050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6049,"mutability":"mutable","name":"stakePoints","nameLocation":"1853:11:60","nodeType":"VariableDeclaration","scope":6062,"src":"1845:19:60","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1845:7:60","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1844:21:60"},"scope":6063,"src":"1754:274:60","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":6064,"src":"645:1385:60","usedErrors":[7,236,259,897,1790,2088,2090,2098,2100,2102,2108,2764,2770,3398,4095,4098,4121,5946,5948],"usedEvents":[282,291,300,2060,2068,2076,2086]}],"src":"32:1999:60"},"id":60},"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol":{"ast":{"absolutePath":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol","exportedSymbols":{"ERC20StakingLinearPool":[3029],"ERC20StakingPointsRewardsLinearPool":[6229],"IERC20":[3386],"IForwarderRegistry":[1506],"IPoints":[5929],"LinearPool":[2697],"LinearPool_PointsRewards":[6292]},"id":6230,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6065,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:61"},{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","file":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","id":6067,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6230,"sourceUnit":2698,"src":"57:95:61","symbolAliases":[{"foreign":{"id":6066,"name":"LinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"65:10:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol","file":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol","id":6069,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6230,"sourceUnit":3030,"src":"153:125:61","symbolAliases":[{"foreign":{"id":6068,"name":"ERC20StakingLinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"161:22:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/staking/reward/LinearPool_PointsRewards.sol","file":"./reward/LinearPool_PointsRewards.sol","id":6071,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6230,"sourceUnit":6293,"src":"279:79:61","symbolAliases":[{"foreign":{"id":6070,"name":"LinearPool_PointsRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6292,"src":"287:24:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":6073,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6230,"sourceUnit":3796,"src":"359:79:61","symbolAliases":[{"foreign":{"id":6072,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"367:6:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":6075,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6230,"sourceUnit":1507,"src":"439:114:61","symbolAliases":[{"foreign":{"id":6074,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"447:18:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/points/interface/IPoints.sol","file":"./../points/interface/IPoints.sol","id":6077,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6230,"sourceUnit":5930,"src":"554:58:61","symbolAliases":[{"foreign":{"id":6076,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"562:7:61","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6079,"name":"ERC20StakingLinearPool","nameLocations":["861:22:61"],"nodeType":"IdentifierPath","referencedDeclaration":3029,"src":"861:22:61"},"id":6080,"nodeType":"InheritanceSpecifier","src":"861:22:61"},{"baseName":{"id":6081,"name":"LinearPool_PointsRewards","nameLocations":["885:24:61"],"nodeType":"IdentifierPath","referencedDeclaration":6292,"src":"885:24:61"},"id":6082,"nodeType":"InheritanceSpecifier","src":"885:24:61"}],"canonicalName":"ERC20StakingPointsRewardsLinearPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":6078,"nodeType":"StructuredDocumentation","src":"614:199:61","text":"@title ERC20StakingPointsRewardsLinearPool\n @notice This contract is used to stake ERC20 tokens and obtain Points rewards.\n @notice Staking can be done by the user or via a claim contract."},"fullyImplemented":true,"id":6229,"linearizedBaseContracts":[6229,6292,3029,3064,2697,1350,1490,1478,1603,4176,22,55,892,909,3082,227,1718,179,4085,341,1764,325,2737],"name":"ERC20StakingPointsRewardsLinearPool","nameLocation":"822:35:61","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"62ba9096","id":6084,"mutability":"immutable","name":"CLAIM_CONTRACT","nameLocation":"941:14:61","nodeType":"VariableDeclaration","scope":6229,"src":"916:39:61","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6083,"name":"address","nodeType":"ElementaryTypeName","src":"916:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":6112,"nodeType":"Block","src":"1269:47:61","statements":[{"expression":{"id":6110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6108,"name":"CLAIM_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"1279:14:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6109,"name":"claimContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6086,"src":"1296:13:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1279:30:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6111,"nodeType":"ExpressionStatement","src":"1279:30:61"}]},"id":6113,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6100,"name":"stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"1176:12:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},{"id":6101,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6097,"src":"1190:17:61","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}}],"id":6102,"kind":"baseConstructorSpecifier","modifierName":{"id":6099,"name":"ERC20StakingLinearPool","nameLocations":["1153:22:61"],"nodeType":"IdentifierPath","referencedDeclaration":3029,"src":"1153:22:61"},"nodeType":"ModifierInvocation","src":"1153:55:61"},{"arguments":[{"id":6104,"name":"pointsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"1234:14:61","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},{"id":6105,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"1250:17:61","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6106,"kind":"baseConstructorSpecifier","modifierName":{"id":6103,"name":"LinearPool_PointsRewards","nameLocations":["1209:24:61"],"nodeType":"IdentifierPath","referencedDeclaration":6292,"src":"1209:24:61"},"nodeType":"ModifierInvocation","src":"1209:59:61"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6086,"mutability":"mutable","name":"claimContract","nameLocation":"991:13:61","nodeType":"VariableDeclaration","scope":6113,"src":"983:21:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6085,"name":"address","nodeType":"ElementaryTypeName","src":"983:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6089,"mutability":"mutable","name":"stakingToken","nameLocation":"1021:12:61","nodeType":"VariableDeclaration","scope":6113,"src":"1014:19:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"},"typeName":{"id":6088,"nodeType":"UserDefinedTypeName","pathNode":{"id":6087,"name":"IERC20","nameLocations":["1014:6:61"],"nodeType":"IdentifierPath","referencedDeclaration":3386,"src":"1014:6:61"},"referencedDeclaration":3386,"src":"1014:6:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6092,"mutability":"mutable","name":"pointsContract","nameLocation":"1051:14:61","nodeType":"VariableDeclaration","scope":6113,"src":"1043:22:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"},"typeName":{"id":6091,"nodeType":"UserDefinedTypeName","pathNode":{"id":6090,"name":"IPoints","nameLocations":["1043:7:61"],"nodeType":"IdentifierPath","referencedDeclaration":5929,"src":"1043:7:61"},"referencedDeclaration":5929,"src":"1043:7:61","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"visibility":"internal"},{"constant":false,"id":6094,"mutability":"mutable","name":"depositReasonCode","nameLocation":"1083:17:61","nodeType":"VariableDeclaration","scope":6113,"src":"1075:25:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1075:7:61","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6097,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"1129:17:61","nodeType":"VariableDeclaration","scope":6113,"src":"1110:36:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"},"typeName":{"id":6096,"nodeType":"UserDefinedTypeName","pathNode":{"id":6095,"name":"IForwarderRegistry","nameLocations":["1110:18:61"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"1110:18:61"},"referencedDeclaration":1506,"src":"1110:18:61","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1506","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"973:179:61"},"returnParameters":{"id":6107,"nodeType":"ParameterList","parameters":[],"src":"1269:0:61"},"scope":6229,"src":"962:354:61","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2834],"body":{"id":6187,"nodeType":"Block","src":"1458:442:61","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6128,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1476:3:61","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1480:6:61","memberName":"sender","nodeType":"MemberAccess","src":"1476:10:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6132,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"1498:13:61","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3386","typeString":"contract IERC20"}],"id":6131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1490:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6130,"name":"address","nodeType":"ElementaryTypeName","src":"1490:7:61","typeDescriptions":{}}},"id":6133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1490:22:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1476:36:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":6135,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"1514:12:61","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":6136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1514:14:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":6127,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1468:7:61","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":6137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1468:61:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6138,"nodeType":"ExpressionStatement","src":"1468:61:61"},{"assignments":[6140],"declarations":[{"constant":false,"id":6140,"mutability":"mutable","name":"requiresTransfer","nameLocation":"1544:16:61","nodeType":"VariableDeclaration","scope":6187,"src":"1539:21:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6139,"name":"bool","nodeType":"ElementaryTypeName","src":"1539:4:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6142,"initialValue":{"hexValue":"66616c7365","id":6141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1563:5:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"1539:29:61"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6143,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6115,"src":"1582:8:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6144,"name":"CLAIM_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"1594:14:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1582:26:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6181,"nodeType":"Block","src":"1762:86:61","statements":[{"expression":{"arguments":[{"id":6170,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"1783:4:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6173,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6140,"src":"1800:16:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":6176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6119,"src":"1829:5:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6174,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1818:3:61","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1822:6:61","memberName":"encode","nodeType":"MemberAccess","src":"1818:10:61","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:17:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6171,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1789:3:61","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1793:6:61","memberName":"encode","nodeType":"MemberAccess","src":"1789:10:61","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1789:47:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6169,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1776:6:61","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":6179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1776:61:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6180,"nodeType":"ExpressionStatement","src":"1776:61:61"}]},"id":6182,"nodeType":"IfStatement","src":"1578:270:61","trueBody":{"id":6168,"nodeType":"Block","src":"1610:146:61","statements":[{"assignments":[6147],"declarations":[{"constant":false,"id":6147,"mutability":"mutable","name":"staker","nameLocation":"1632:6:61","nodeType":"VariableDeclaration","scope":6168,"src":"1624:14:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6146,"name":"address","nodeType":"ElementaryTypeName","src":"1624:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6155,"initialValue":{"arguments":[{"id":6150,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"1652:4:61","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":6152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1659:7:61","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6151,"name":"address","nodeType":"ElementaryTypeName","src":"1659:7:61","typeDescriptions":{}}}],"id":6153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1658:9:61","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":6148,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1641:3:61","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1645:6:61","memberName":"decode","nodeType":"MemberAccess","src":"1641:10:61","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:27:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"1624:44:61"},{"expression":{"arguments":[{"id":6157,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6147,"src":"1689:6:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6160,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6140,"src":"1708:16:61","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":6163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6119,"src":"1737:5:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6161,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1726:3:61","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1730:6:61","memberName":"encode","nodeType":"MemberAccess","src":"1726:10:61","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1726:17:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6158,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1697:3:61","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1701:6:61","memberName":"encode","nodeType":"MemberAccess","src":"1697:10:61","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1697:47:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6156,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1682:6:61","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":6166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1682:63:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6167,"nodeType":"ExpressionStatement","src":"1682:63:61"}]}},{"expression":{"expression":{"expression":{"id":6183,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1864:4:61","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingPointsRewardsLinearPool_$6229","typeString":"contract ERC20StakingPointsRewardsLinearPool"}},"id":6184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1869:15:61","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":6188,"src":"1864:20:61","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":6185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1885:8:61","memberName":"selector","nodeType":"MemberAccess","src":"1864:29:61","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":6126,"id":6186,"nodeType":"Return","src":"1857:36:61"}]},"functionSelector":"4fc35859","id":6188,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"1331:15:61","nodeType":"FunctionDefinition","overrides":{"id":6123,"nodeType":"OverrideSpecifier","overrides":[],"src":"1432:8:61"},"parameters":{"id":6122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6115,"mutability":"mutable","name":"operator","nameLocation":"1355:8:61","nodeType":"VariableDeclaration","scope":6188,"src":"1347:16:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6114,"name":"address","nodeType":"ElementaryTypeName","src":"1347:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6117,"mutability":"mutable","name":"from","nameLocation":"1373:4:61","nodeType":"VariableDeclaration","scope":6188,"src":"1365:12:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6116,"name":"address","nodeType":"ElementaryTypeName","src":"1365:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6119,"mutability":"mutable","name":"value","nameLocation":"1387:5:61","nodeType":"VariableDeclaration","scope":6188,"src":"1379:13:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6118,"name":"uint256","nodeType":"ElementaryTypeName","src":"1379:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6121,"mutability":"mutable","name":"data","nameLocation":"1409:4:61","nodeType":"VariableDeclaration","scope":6188,"src":"1394:19:61","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6120,"name":"bytes","nodeType":"ElementaryTypeName","src":"1394:5:61","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1346:68:61"},"returnParameters":{"id":6126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6188,"src":"1450:6:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6124,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1450:6:61","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1449:8:61"},"scope":6229,"src":"1322:578:61","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2659,6281],"body":{"id":6206,"nodeType":"Block","src":"2080:78:61","statements":[{"expression":{"arguments":[{"id":6202,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6190,"src":"2136:6:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6203,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6192,"src":"2144:6:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6200,"name":"LinearPool_PointsRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6292,"src":"2097:24:61","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearPool_PointsRewards_$6292_$","typeString":"type(contract LinearPool_PointsRewards)"}},"id":6201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2122:13:61","memberName":"_computeClaim","nodeType":"MemberAccess","referencedDeclaration":6281,"src":"2097:38:61","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,uint256) returns (bytes memory)"}},"id":6204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2097:54:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6199,"id":6205,"nodeType":"Return","src":"2090:61:61"}]},"id":6207,"implemented":true,"kind":"function","modifiers":[],"name":"_computeClaim","nameLocation":"1915:13:61","nodeType":"FunctionDefinition","overrides":{"id":6196,"nodeType":"OverrideSpecifier","overrides":[{"id":6194,"name":"LinearPool","nameLocations":["2009:10:61"],"nodeType":"IdentifierPath","referencedDeclaration":2697,"src":"2009:10:61"},{"id":6195,"name":"LinearPool_PointsRewards","nameLocations":["2021:24:61"],"nodeType":"IdentifierPath","referencedDeclaration":6292,"src":"2021:24:61"}],"src":"2000:46:61"},"parameters":{"id":6193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6190,"mutability":"mutable","name":"staker","nameLocation":"1946:6:61","nodeType":"VariableDeclaration","scope":6207,"src":"1938:14:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6189,"name":"address","nodeType":"ElementaryTypeName","src":"1938:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6192,"mutability":"mutable","name":"reward","nameLocation":"1970:6:61","nodeType":"VariableDeclaration","scope":6207,"src":"1962:14:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6191,"name":"uint256","nodeType":"ElementaryTypeName","src":"1962:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1928:54:61"},"returnParameters":{"id":6199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6198,"mutability":"mutable","name":"claimData","nameLocation":"2069:9:61","nodeType":"VariableDeclaration","scope":6207,"src":"2056:22:61","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6197,"name":"bytes","nodeType":"ElementaryTypeName","src":"2056:5:61","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2055:24:61"},"scope":6229,"src":"1906:252:61","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2668,6291],"body":{"id":6227,"nodeType":"Block","src":"2303:83:61","statements":[{"expression":{"arguments":[{"id":6222,"name":"rewarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6209,"src":"2356:8:61","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6223,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6211,"src":"2366:6:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6224,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6213,"src":"2374:4:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6219,"name":"LinearPool_PointsRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6292,"src":"2313:24:61","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearPool_PointsRewards_$6292_$","typeString":"type(contract LinearPool_PointsRewards)"}},"id":6221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2338:17:61","memberName":"_computeAddReward","nodeType":"MemberAccess","referencedDeclaration":6291,"src":"2313:42:61","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2313:66:61","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6226,"nodeType":"ExpressionStatement","src":"2313:66:61"}]},"id":6228,"implemented":true,"kind":"function","modifiers":[],"name":"_computeAddReward","nameLocation":"2173:17:61","nodeType":"FunctionDefinition","overrides":{"id":6217,"nodeType":"OverrideSpecifier","overrides":[{"id":6215,"name":"LinearPool","nameLocations":["2265:10:61"],"nodeType":"IdentifierPath","referencedDeclaration":2697,"src":"2265:10:61"},{"id":6216,"name":"LinearPool_PointsRewards","nameLocations":["2277:24:61"],"nodeType":"IdentifierPath","referencedDeclaration":6292,"src":"2277:24:61"}],"src":"2256:46:61"},"parameters":{"id":6214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6209,"mutability":"mutable","name":"rewarder","nameLocation":"2199:8:61","nodeType":"VariableDeclaration","scope":6228,"src":"2191:16:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6208,"name":"address","nodeType":"ElementaryTypeName","src":"2191:7:61","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6211,"mutability":"mutable","name":"reward","nameLocation":"2217:6:61","nodeType":"VariableDeclaration","scope":6228,"src":"2209:14:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6210,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6213,"mutability":"mutable","name":"dust","nameLocation":"2233:4:61","nodeType":"VariableDeclaration","scope":6228,"src":"2225:12:61","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6212,"name":"uint256","nodeType":"ElementaryTypeName","src":"2225:7:61","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2190:48:61"},"returnParameters":{"id":6218,"nodeType":"ParameterList","parameters":[],"src":"2303:0:61"},"scope":6229,"src":"2164:222:61","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":6230,"src":"813:1575:61","usedErrors":[7,236,259,897,1790,2088,2090,2098,2100,2102,2108,2764,2770,3398,4095,4098,4121],"usedEvents":[282,291,300,2060,2068,2076,2086]}],"src":"32:2357:61"},"id":61},"contracts/staking/reward/LinearPool_PointsRewards.sol":{"ast":{"absolutePath":"contracts/staking/reward/LinearPool_PointsRewards.sol","exportedSymbols":{"IPoints":[5929],"LinearPool_PointsRewards":[6292]},"id":6293,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6231,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:62"},{"absolutePath":"contracts/points/interface/IPoints.sol","file":"./../../points/interface/IPoints.sol","id":6233,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6293,"sourceUnit":5930,"src":"57:61:62","symbolAliases":[{"foreign":{"id":6232,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"65:7:62","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"LinearPool_PointsRewards","contractDependencies":[],"contractKind":"contract","documentation":{"id":6234,"nodeType":"StructuredDocumentation","src":"120:117:62","text":"@title LinearPool_PointsRewards\n @notice This contract is used to handle the points rewards for linear pools."},"fullyImplemented":true,"id":6292,"linearizedBaseContracts":[6292],"name":"LinearPool_PointsRewards","nameLocation":"307:24:62","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2d4c2f93","id":6237,"mutability":"immutable","name":"POINTS_CONTRACT","nameLocation":"363:15:62","nodeType":"VariableDeclaration","scope":6292,"src":"338:40:62","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"},"typeName":{"id":6236,"nodeType":"UserDefinedTypeName","pathNode":{"id":6235,"name":"IPoints","nameLocations":["338:7:62"],"nodeType":"IdentifierPath","referencedDeclaration":5929,"src":"338:7:62"},"referencedDeclaration":5929,"src":"338:7:62","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"visibility":"public"},{"constant":false,"functionSelector":"2196e445","id":6239,"mutability":"immutable","name":"DEPOSIT_REASON_CODE","nameLocation":"409:19:62","nodeType":"VariableDeclaration","scope":6292,"src":"384:44:62","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"384:7:62","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":6255,"nodeType":"Block","src":"498:98:62","statements":[{"expression":{"id":6249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6247,"name":"POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6237,"src":"508:15:62","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6248,"name":"pointsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6242,"src":"526:14:62","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"src":"508:32:62","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"id":6250,"nodeType":"ExpressionStatement","src":"508:32:62"},{"expression":{"id":6253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6251,"name":"DEPOSIT_REASON_CODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"550:19:62","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6252,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6244,"src":"572:17:62","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"550:39:62","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6254,"nodeType":"ExpressionStatement","src":"550:39:62"}]},"id":6256,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6242,"mutability":"mutable","name":"pointsContract","nameLocation":"455:14:62","nodeType":"VariableDeclaration","scope":6256,"src":"447:22:62","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"},"typeName":{"id":6241,"nodeType":"UserDefinedTypeName","pathNode":{"id":6240,"name":"IPoints","nameLocations":["447:7:62"],"nodeType":"IdentifierPath","referencedDeclaration":5929,"src":"447:7:62"},"referencedDeclaration":5929,"src":"447:7:62","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"visibility":"internal"},{"constant":false,"id":6244,"mutability":"mutable","name":"depositReasonCode","nameLocation":"479:17:62","nodeType":"VariableDeclaration","scope":6256,"src":"471:25:62","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"471:7:62","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"446:51:62"},"returnParameters":{"id":6246,"nodeType":"ParameterList","parameters":[],"src":"498:0:62"},"scope":6292,"src":"435:161:62","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6280,"nodeType":"Block","src":"707:117:62","statements":[{"expression":{"id":6270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6265,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6263,"src":"717:9:62","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6268,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6260,"src":"740:6:62","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6266,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"729:3:62","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"733:6:62","memberName":"encode","nodeType":"MemberAccess","src":"729:10:62","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"729:18:62","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"717:30:62","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6271,"nodeType":"ExpressionStatement","src":"717:30:62"},{"expression":{"arguments":[{"id":6275,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6258,"src":"781:6:62","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6276,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6260,"src":"789:6:62","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6277,"name":"DEPOSIT_REASON_CODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"797:19:62","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6272,"name":"POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6237,"src":"757:15:62","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$5929","typeString":"contract IPoints"}},"id":6274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"773:7:62","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":5928,"src":"757:23:62","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,bytes32) external"}},"id":6278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"757:60:62","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6279,"nodeType":"ExpressionStatement","src":"757:60:62"}]},"id":6281,"implemented":true,"kind":"function","modifiers":[],"name":"_computeClaim","nameLocation":"611:13:62","nodeType":"FunctionDefinition","parameters":{"id":6261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6258,"mutability":"mutable","name":"sender","nameLocation":"633:6:62","nodeType":"VariableDeclaration","scope":6281,"src":"625:14:62","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6257,"name":"address","nodeType":"ElementaryTypeName","src":"625:7:62","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6260,"mutability":"mutable","name":"reward","nameLocation":"649:6:62","nodeType":"VariableDeclaration","scope":6281,"src":"641:14:62","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6259,"name":"uint256","nodeType":"ElementaryTypeName","src":"641:7:62","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"624:32:62"},"returnParameters":{"id":6264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6263,"mutability":"mutable","name":"claimData","nameLocation":"696:9:62","nodeType":"VariableDeclaration","scope":6281,"src":"683:22:62","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6262,"name":"bytes","nodeType":"ElementaryTypeName","src":"683:5:62","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"682:24:62"},"scope":6292,"src":"602:222:62","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6290,"nodeType":"Block","src":"920:2:62","statements":[]},"id":6291,"implemented":true,"kind":"function","modifiers":[],"name":"_computeAddReward","nameLocation":"839:17:62","nodeType":"FunctionDefinition","parameters":{"id":6288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6283,"mutability":"mutable","name":"sender","nameLocation":"865:6:62","nodeType":"VariableDeclaration","scope":6291,"src":"857:14:62","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6282,"name":"address","nodeType":"ElementaryTypeName","src":"857:7:62","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6285,"mutability":"mutable","name":"reward","nameLocation":"881:6:62","nodeType":"VariableDeclaration","scope":6291,"src":"873:14:62","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6284,"name":"uint256","nodeType":"ElementaryTypeName","src":"873:7:62","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6287,"mutability":"mutable","name":"dust","nameLocation":"897:4:62","nodeType":"VariableDeclaration","scope":6291,"src":"889:12:62","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6286,"name":"uint256","nodeType":"ElementaryTypeName","src":"889:7:62","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"856:46:62"},"returnParameters":{"id":6289,"nodeType":"ParameterList","parameters":[],"src":"920:0:62"},"scope":6292,"src":"830:92:62","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":6293,"src":"289:635:62","usedErrors":[],"usedEvents":[]}],"src":"32:893:62"},"id":62}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}}},"title":"Access control via roles management (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}}},\"title\":\"Access control via roles management (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206ff46fe05321bfd9e6e6febeaf6c137e0c60a8c237f684057194663d82e2ad4d64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xF46FE05321BFD9E6E6FEBEAF6C137E0C PUSH1 0xA8 0xC2 CALLDATACOPY 0xF6 DUP5 SDIV PUSH18 0x94663D82E2AD4D64736F6C634300081C0033 ","sourceMap":"422:4130:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;422:4130:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206ff46fe05321bfd9e6e6febeaf6c137e0c60a8c237f684057194663d82e2ad4d64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xF46FE05321BFD9E6E6FEBEAF6C137E0C PUSH1 0xA8 0xC2 CALLDATACOPY 0xF6 DUP5 SDIV PUSH18 0x94663D82E2AD4D64736F6C634300081C0033 ","sourceMap":"422:4130:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","enforceHasTargetContractRole(address,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","hasTargetContractRole(address,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;589:4647:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol":{"PauseBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"NotPaused","type":"error"},{"inputs":[],"name":"Paused","type":"error"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"kind":"dev","methods":{"pause()":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {Paused} if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"The paused state of the contract."}},"unpause()":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {NotPaused} if the contract is not paused.Emits an {Unpaused} event."}},"title":"Pausing mechanism (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pause()":"8456cb59","paused()":"5c975abb","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"pause()\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {Paused} if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"The paused state of the contract.\"}},\"unpause()\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {NotPaused} if the contract is not paused.Emits an {Unpaused} event.\"}},\"title\":\"Pausing mechanism (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotPaused()\":[{\"notice\":\"Thrown when the contract is not paused but is required to.\"}],\"Paused()\":[{\"notice\":\"Thrown when the contract is paused but is required not to.\"}]},\"events\":{\"Pause()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"Unpause()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":\"PauseBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IPause} from \\\"./../interfaces/IPause.sol\\\";\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is IPause, Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    // /// @inheritdoc IPause\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x243a848c4070275ac5527682d8b1437141d4480ff32b6e490bb97eb6a9dbd811\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/errors/PauseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the contract is paused but is required not to.\\nerror Paused();\\n\\n/// @notice Thrown when the contract is not paused but is required to.\\nerror NotPaused();\\n\",\"keccak256\":\"0x989debfdaf1aff85eb78e8be2c33f0a12fc4354f105aae1a751fc79ee4a42697\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/events/PauseEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the pause is triggered.\\nevent Pause();\\n\\n/// @notice Emitted when the pause is lifted.\\nevent Unpause();\\n\",\"keccak256\":\"0x596e0ee31efcf10dbf7e3dc2d70c1b5f130aacfcbc28c3b03c341b3d7eef2394\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Pausing mechanism (functions)\\ninterface IPause {\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool isPaused);\\n}\\n\",\"keccak256\":\"0x1c995bd170ce74f760f551706e42b120a579face097411a276c87668d00cc74d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {Paused, NotPaused} from \\\"./../errors/PauseErrors.sol\\\";\\nimport {Pause, Unpause} from \\\"./../events/PauseEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Pause} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Pause();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Pause} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    /// @dev Emits a {Pause} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    /// @dev Emits an {Unpause} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        if (!s.isPaused) revert NotPaused();\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        if (s.isPaused) revert Paused();\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0e63151c1ce1b423171f9a01c79cd0d8e2eaf3ec988aaba68e7d6ab1b60f7bc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotPaused()":[{"notice":"Thrown when the contract is not paused but is required to."}],"Paused()":[{"notice":"Thrown when the contract is paused but is required not to."}]},"events":{"Pause()":{"notice":"Emitted when the pause is triggered."},"Unpause()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"unpause()":{"notice":"Unpauses the contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol":{"IPause":{"abi":[{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"isPaused","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"paused()":{"returns":{"isPaused":"The paused state of the contract."}}},"title":"Pausing mechanism (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"returns\":{\"isPaused\":\"The paused state of the contract.\"}}},\"title\":\"Pausing mechanism (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol\":\"IPause\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Pausing mechanism (functions)\\ninterface IPause {\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool isPaused);\\n}\\n\",\"keccak256\":\"0x1c995bd170ce74f760f551706e42b120a579face097411a276c87668d00cc74d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"paused()":{"notice":"Gets the paused state of the contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol":{"PauseStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c3293a479c749e8f5011a4be3f1f9232595707d9d5092a077970a41dc7bae4d764736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0x29 GASPRICE SELFBALANCE SWAP13 PUSH21 0x9E8F5011A4BE3F1F9232595707D9D5092A077970A4 SAR 0xC7 0xBA 0xE4 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"267:2934:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;267:2934:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c3293a479c749e8f5011a4be3f1f9232595707d9d5092a077970a41dc7bae4d764736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0x29 GASPRICE SELFBALANCE SWAP13 PUSH21 0x9E8F5011A4BE3F1F9232595707D9D5092A077970A4 SAR 0xC7 0xBA 0xE4 0xD7 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"267:2934:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct PauseStorage.Layout storage pointer,bool)":"infinite","enforceIsNotPaused(struct PauseStorage.Layout storage pointer)":"infinite","enforceIsPaused(struct PauseStorage.Layout storage pointer)":"infinite","layout()":"infinite","pause(struct PauseStorage.Layout storage pointer)":"infinite","paused(struct PauseStorage.Layout storage pointer)":"infinite","proxyInit(struct PauseStorage.Layout storage pointer,bool)":"infinite","unpause(struct PauseStorage.Layout storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":\"PauseStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/lifecycle/errors/PauseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the contract is paused but is required not to.\\nerror Paused();\\n\\n/// @notice Thrown when the contract is not paused but is required to.\\nerror NotPaused();\\n\",\"keccak256\":\"0x989debfdaf1aff85eb78e8be2c33f0a12fc4354f105aae1a751fc79ee4a42697\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/events/PauseEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the pause is triggered.\\nevent Pause();\\n\\n/// @notice Emitted when the pause is lifted.\\nevent Unpause();\\n\",\"keccak256\":\"0x596e0ee31efcf10dbf7e3dc2d70c1b5f130aacfcbc28c3b03c341b3d7eef2394\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {Paused, NotPaused} from \\\"./../errors/PauseErrors.sol\\\";\\nimport {Pause, Unpause} from \\\"./../events/PauseEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Pause} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Pause();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Pause} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    /// @dev Emits a {Pause} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    /// @dev Emits an {Unpause} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        if (!s.isPaused) revert NotPaused();\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        if (s.isPaused) revert Paused();\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0e63151c1ce1b423171f9a01c79cd0d8e2eaf3ec988aaba68e7d6ab1b60f7bc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"},{"internalType":"address","name":"target","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isApprovedForwarder(address,address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account.","target":"The target contract."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."}}},"title":"Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address,address)":"019a2028"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\",\"target\":\"The target contract.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\"}}},\"title\":\"Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol":{"ITokenRecovery":{"abi":[{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Uniquely identified seals management.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Uniquely identified seals management.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":\"ITokenRecovery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol":{"TokenRecoveryLibrary":{"abi":[{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"}],"devdoc":{"errors":{"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207da9a67842eb4b71f0701f060b4d0953ff3e74485935f33f0a5d1c115a8f0ba364736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xA9A67842EB4B71F0701F060B4D0953FF3E74485935F33F0A5D1C115A8F0B LOG3 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"485:3843:33:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;485:3843:33;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207da9a67842eb4b71f0701f060b4d0953ff3e74485935f33f0a5d1c115a8f0ba364736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xA9A67842EB4B71F0701F060B4D0953FF3E74485935F33F0A5D1C115A8F0B LOG3 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"485:3843:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"recoverERC20s(address[] calldata,contract IERC20[] calldata,uint256[] calldata)":"infinite","recoverERC721s(address[] calldata,contract IERC721[] calldata,uint256[] calldata)":"infinite","recoverETH(address payable[] calldata,uint256[] calldata)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":\"TokenRecoveryLibrary\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}]},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol":{"LinearPool":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"withdraw","type":"uint256"}],"name":"NotEnoughStake","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"stakeData","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"addReward(uint256,uint256)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.","params":{"duration":"The duration of the rewards distribution.","reward":"The amount of rewards to be added."}},"claim()":{"details":"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract."},"earned(address)":{"params":{"account":"The address of the account to check."},"returns":{"_0":"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"lastTimeRewardApplicable()":{"returns":{"_0":"The minimum of the current block timestamp and the distribution end."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"rewardPerStakePoint()":{"returns":{"_0":"The sum of the last stored value and the new rewards since the last update"}},"stake(bytes)":{"details":"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidStakeAmount} if the stake amount is 0.Emits a {Staked} event with the staker address, stakeData and stake points.The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.The stakeData is not used in the base implementation, but it is passed to the event for convenience.","params":{"stakeData":"The data to be used for the stake (encoding freely determined by the deriving contracts)."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw(bytes)":{"details":"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.","params":{"withdrawData":"The data to be used for the withdraw (encoding freely determined by the deriving contracts)."}}},"title":"Linear rewards distribution staking pool.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"name\":\"NotEnoughStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"addReward(uint256,uint256)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\",\"params\":{\"duration\":\"The duration of the rewards distribution.\",\"reward\":\"The amount of rewards to be added.\"}},\"claim()\":{\"details\":\"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\"},\"earned(address)\":{\"params\":{\"account\":\"The address of the account to check.\"},\"returns\":{\"_0\":\"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"The minimum of the current block timestamp and the distribution end.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"rewardPerStakePoint()\":{\"returns\":{\"_0\":\"The sum of the last stored value and the new rewards since the last update\"}},\"stake(bytes)\":{\"details\":\"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidStakeAmount} if the stake amount is 0.Emits a {Staked} event with the staker address, stakeData and stake points.The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.The stakeData is not used in the base implementation, but it is passed to the event for convenience.\",\"params\":{\"stakeData\":\"The data to be used for the stake (encoding freely determined by the deriving contracts).\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw(bytes)\":{\"details\":\"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\",\"params\":{\"withdrawData\":\"The data to be used for the withdraw (encoding freely determined by the deriving contracts).\"}}},\"title\":\"Linear rewards distribution staking pool.\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"addReward(uint256,uint256)\":{\"notice\":\"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\"},\"claim()\":{\"notice\":\"Claims the rewards for the sender.\"},\"earned(address)\":{\"notice\":\"Returns the amount of rewards earned by the account.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns the last time rewards are applicable.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"rewardPerStakePoint()\":{\"notice\":\"Returns the current reward per stake point.\"},\"stake(bytes)\":{\"notice\":\"Stakes to the pool.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw(bytes)\":{\"notice\":\"Withdraws from the pool.\"}},\"notice\":\"Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.Stakes, whether fungible or non-fungible, map to an amount of \\\"stake points\\\", then used to compute the user rewards share.NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":\"LinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {TokenRecovery} from \\\"./../../security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ILinearPool} from \\\"./interfaces/ILinearPool.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\n/// @title Linear rewards distribution staking pool.\\n/// @notice Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.\\n/// @notice Stakes, whether fungible or non-fungible, map to an amount of \\\"stake points\\\", then used to compute the user rewards share.\\n/// @notice NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.\\n/// @notice If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.\\n/// @notice NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,\\n/// @notice the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract.\\nabstract contract LinearPool is ILinearPool, AccessControl, ReentrancyGuard, TokenRecovery, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error NotEnoughStake(address staker, uint256 stake, uint256 withdraw);\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    /// @notice Returns the last time rewards are applicable.\\n    /// @return The minimum of the current block timestamp and the distribution end.\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    /// @notice Returns the current reward per stake point.\\n    /// @return The sum of the last stored value and the new rewards since the last update\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    /// @notice Returns the amount of rewards earned by the account.\\n    /// @param account The address of the account to check.\\n    /// @return The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    /// @dev The stakeData is not used in the base implementation, but it is passed to the event for convenience.\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), stakeData);\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param staker The address of the staker.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    function _stake(address staker, bytes memory stakeData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeStake(staker, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[staker] += stakePoints;\\n        emit Staked(staker, stakeData, stakePoints);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    /// @dev The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param staker The address of the staker.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    function _withdraw(address staker, bytes memory withdrawData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeWithdraw(staker, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        uint256 currentStaked = staked[staker];\\n        require(currentStaked >= stakePoints, NotEnoughStake(staker, currentStaked, stakePoints));\\n        unchecked {\\n            // no underflow possible\\n            staked[staker] -= stakePoints;\\n            totalStaked = currentStaked - stakePoints;\\n        }\\n        emit Withdrawn(staker, withdrawData, stakePoints);\\n    }\\n\\n    /// @notice Claims the rewards for the sender.\\n    /// @dev Emits a {Claimed} event with the staker address, claimData and reward.\\n    /// @dev The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\\n    function claim() public virtual {\\n        address staker = _msgSender();\\n        _updateReward(staker);\\n        uint256 reward = earned(staker);\\n        if (reward != 0) {\\n            rewards[staker] = 0;\\n            bytes memory claimData = _computeClaim(staker, reward);\\n            emit Claimed(staker, claimData, reward);\\n        }\\n    }\\n\\n    /// @notice Adds rewards to the pool.\\n    /// @notice If there is an ongoing distribution, the new rewards are added to the current distribution:\\n    /// @notice - If the new distribution ends before the current one, the new rewards are added to the current distribution.\\n    /// @notice - If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\\n    /// @param reward The amount of rewards to be added.\\n    /// @param duration The duration of the rewards distribution.\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.\\n    /// @dev Reverts with {InvalidRewardAmount} if the reward amount is 0.\\n    /// @dev Reverts with {InvalidDuration} if the duration is 0.\\n    /// @dev Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.\\n    /// @dev Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address rewarder = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, rewarder);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(rewarder, reward, dust);\\n\\n        emit RewardAdded(rewarder, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xb233904513719b7c8ad3acc65cadf8a3f900f8bc0687f35ce8a5ecd55bab0965\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ninterface ILinearPool {\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerStakePoint() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function stake(bytes calldata stakeData) external payable;\\n\\n    function withdraw(bytes calldata withdrawData) external;\\n\\n    function claim() external;\\n\\n    function addReward(uint256 reward, uint256 duration) external payable;\\n}\\n\",\"keccak256\":\"0x7d90f50bc5a3a2700d7de92188b10b0d46b3eafc3b49f2431d0ae0cf494d05f4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4118,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":2032,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":2034,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":2036,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":2038,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":2040,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":2044,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":2048,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":2052,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"addReward(uint256,uint256)":{"notice":"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution."},"claim()":{"notice":"Claims the rewards for the sender."},"earned(address)":{"notice":"Returns the amount of rewards earned by the account."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"lastTimeRewardApplicable()":{"notice":"Returns the last time rewards are applicable."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"rewardPerStakePoint()":{"notice":"Returns the current reward per stake point."},"stake(bytes)":{"notice":"Stakes to the pool."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw(bytes)":{"notice":"Withdraws from the pool."}},"notice":"Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.Stakes, whether fungible or non-fungible, map to an amount of \"stake points\", then used to compute the user rewards share.NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract.","version":1}}},"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol":{"ILinearPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"stakeData","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","earned(address)":"008cc262","lastTimeRewardApplicable()":"80faa57d","rewardPerStakePoint()":"2c9d0b80","stake(bytes)":"2d1e0c02","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol\":\"ILinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ninterface ILinearPool {\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerStakePoint() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function stake(bytes calldata stakeData) external payable;\\n\\n    function withdraw(bytes calldata withdrawData) external;\\n\\n    function claim() external;\\n\\n    function addReward(uint256 reward, uint256 duration) external payable;\\n}\\n\",\"keccak256\":\"0x7d90f50bc5a3a2700d7de92188b10b0d46b3eafc3b49f2431d0ae0cf494d05f4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol":{"ERC20StakingLinearPool":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[{"internalType":"uint256","name":"requested","type":"uint256"},{"internalType":"uint256","name":"recoverable","type":"uint256"}],"name":"InvalidRecoveryAmount","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"withdraw","type":"uint256"}],"name":"NotEnoughStake","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"stakeData","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"addReward(uint256,uint256)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.","params":{"duration":"The duration of the rewards distribution.","reward":"The amount of rewards to be added."}},"claim()":{"details":"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract."},"earned(address)":{"params":{"account":"The address of the account to check."},"returns":{"_0":"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"lastTimeRewardApplicable()":{"returns":{"_0":"The minimum of the current block timestamp and the distribution end."}},"onERC20Received(address,address,uint256,bytes)":{"details":"Reverts  with {InvalidToken} if the sender is not the staking token.","params":{"from":"The address of the sender.","value":"The amount of tokens received."},"returns":{"_0":"bytes4 The function selector of the callback."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"rewardPerStakePoint()":{"returns":{"_0":"The sum of the last stored value and the new rewards since the last update"}},"stake(bytes)":{"details":"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidStakeAmount} if the stake amount is 0.Emits a {Staked} event with the staker address, stakeData and stake points.The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.The stakeData is not used in the base implementation, but it is passed to the event for convenience.","params":{"stakeData":"The data to be used for staking, encoded as (uint256 value)"}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw(bytes)":{"details":"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.","params":{"withdrawData":"The data to be used for withdrawing, encoded as (uint256 value)"}}},"title":"ERC20StakingLinearPool","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","STAKING_TOKEN()":"0479d644","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverable\",\"type\":\"uint256\"}],\"name\":\"InvalidRecoveryAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"name\":\"NotEnoughStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"addReward(uint256,uint256)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\",\"params\":{\"duration\":\"The duration of the rewards distribution.\",\"reward\":\"The amount of rewards to be added.\"}},\"claim()\":{\"details\":\"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\"},\"earned(address)\":{\"params\":{\"account\":\"The address of the account to check.\"},\"returns\":{\"_0\":\"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"The minimum of the current block timestamp and the distribution end.\"}},\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Reverts  with {InvalidToken} if the sender is not the staking token.\",\"params\":{\"from\":\"The address of the sender.\",\"value\":\"The amount of tokens received.\"},\"returns\":{\"_0\":\"bytes4 The function selector of the callback.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"rewardPerStakePoint()\":{\"returns\":{\"_0\":\"The sum of the last stored value and the new rewards since the last update\"}},\"stake(bytes)\":{\"details\":\"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidStakeAmount} if the stake amount is 0.Emits a {Staked} event with the staker address, stakeData and stake points.The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.The stakeData is not used in the base implementation, but it is passed to the event for convenience.\",\"params\":{\"stakeData\":\"The data to be used for staking, encoded as (uint256 value)\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw(bytes)\":{\"details\":\"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\",\"params\":{\"withdrawData\":\"The data to be used for withdrawing, encoded as (uint256 value)\"}}},\"title\":\"ERC20StakingLinearPool\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"addReward(uint256,uint256)\":{\"notice\":\"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\"},\"claim()\":{\"notice\":\"Claims the rewards for the sender.\"},\"earned(address)\":{\"notice\":\"Returns the amount of rewards earned by the account.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns the last time rewards are applicable.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Callback called when the contract receives ERC20 tokens via the IERC20SafeTransfers functions.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"rewardPerStakePoint()\":{\"notice\":\"Returns the current reward per stake point.\"},\"stake(bytes)\":{\"notice\":\"Stakes to the pool.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw(bytes)\":{\"notice\":\"Withdraws from the pool.\"}},\"notice\":\"A linear pool that allows staking of ERC20 tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":\"ERC20StakingLinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {TokenRecovery} from \\\"./../../security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ILinearPool} from \\\"./interfaces/ILinearPool.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\n/// @title Linear rewards distribution staking pool.\\n/// @notice Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.\\n/// @notice Stakes, whether fungible or non-fungible, map to an amount of \\\"stake points\\\", then used to compute the user rewards share.\\n/// @notice NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.\\n/// @notice If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.\\n/// @notice NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,\\n/// @notice the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract.\\nabstract contract LinearPool is ILinearPool, AccessControl, ReentrancyGuard, TokenRecovery, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error NotEnoughStake(address staker, uint256 stake, uint256 withdraw);\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    /// @notice Returns the last time rewards are applicable.\\n    /// @return The minimum of the current block timestamp and the distribution end.\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    /// @notice Returns the current reward per stake point.\\n    /// @return The sum of the last stored value and the new rewards since the last update\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    /// @notice Returns the amount of rewards earned by the account.\\n    /// @param account The address of the account to check.\\n    /// @return The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    /// @dev The stakeData is not used in the base implementation, but it is passed to the event for convenience.\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), stakeData);\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param staker The address of the staker.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    function _stake(address staker, bytes memory stakeData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeStake(staker, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[staker] += stakePoints;\\n        emit Staked(staker, stakeData, stakePoints);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    /// @dev The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param staker The address of the staker.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    function _withdraw(address staker, bytes memory withdrawData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeWithdraw(staker, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        uint256 currentStaked = staked[staker];\\n        require(currentStaked >= stakePoints, NotEnoughStake(staker, currentStaked, stakePoints));\\n        unchecked {\\n            // no underflow possible\\n            staked[staker] -= stakePoints;\\n            totalStaked = currentStaked - stakePoints;\\n        }\\n        emit Withdrawn(staker, withdrawData, stakePoints);\\n    }\\n\\n    /// @notice Claims the rewards for the sender.\\n    /// @dev Emits a {Claimed} event with the staker address, claimData and reward.\\n    /// @dev The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\\n    function claim() public virtual {\\n        address staker = _msgSender();\\n        _updateReward(staker);\\n        uint256 reward = earned(staker);\\n        if (reward != 0) {\\n            rewards[staker] = 0;\\n            bytes memory claimData = _computeClaim(staker, reward);\\n            emit Claimed(staker, claimData, reward);\\n        }\\n    }\\n\\n    /// @notice Adds rewards to the pool.\\n    /// @notice If there is an ongoing distribution, the new rewards are added to the current distribution:\\n    /// @notice - If the new distribution ends before the current one, the new rewards are added to the current distribution.\\n    /// @notice - If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\\n    /// @param reward The amount of rewards to be added.\\n    /// @param duration The duration of the rewards distribution.\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.\\n    /// @dev Reverts with {InvalidRewardAmount} if the reward amount is 0.\\n    /// @dev Reverts with {InvalidDuration} if the duration is 0.\\n    /// @dev Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.\\n    /// @dev Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address rewarder = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, rewarder);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(rewarder, reward, dust);\\n\\n        emit RewardAdded(rewarder, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xb233904513719b7c8ad3acc65cadf8a3f900f8bc0687f35ce8a5ecd55bab0965\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ninterface ILinearPool {\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerStakePoint() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function stake(bytes calldata stakeData) external payable;\\n\\n    function withdraw(bytes calldata withdrawData) external;\\n\\n    function claim() external;\\n\\n    function addReward(uint256 reward, uint256 duration) external payable;\\n}\\n\",\"keccak256\":\"0x7d90f50bc5a3a2700d7de92188b10b0d46b3eafc3b49f2431d0ae0cf494d05f4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"./../LinearPool.sol\\\";\\nimport {ERC20Receiver} from \\\"./../../../token/ERC20/ERC20Receiver.sol\\\";\\nimport {TokenRecoveryBase} from \\\"./../../../security/base/TokenRecoveryBase.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n/// @title ERC20StakingLinearPool\\n/// @notice A linear pool that allows staking of ERC20 tokens.\\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable STAKING_TOKEN;\\n\\n    error InvalidToken();\\n    error InvalidRecoveryAmount(uint256 requested, uint256 recoverable);\\n\\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\\n        STAKING_TOKEN = stakingToken;\\n    }\\n\\n    /// @notice Callback called when the contract receives ERC20 tokens via the IERC20SafeTransfers functions.\\n    /// @param from The address of the sender.\\n    /// @param value The amount of tokens received.\\n    /// @return bytes4 The function selector of the callback.\\n    /// @dev Reverts  with {InvalidToken} if the sender is not the staking token.\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\\n        bool requiresTransfer = false;\\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param stakeData The data to be used for staking, encoded as (uint256 value)\\n    function stake(bytes calldata stakeData) public payable virtual override {\\n        // non-reentrancy check removed\\n        bool requiresTransfer = true;\\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param stakeData The data to be used for staking, encoded as (bool requiresTransfer, bytes data) where data is (uint256 value).\\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\\n        stakePoints = abi.decode(data, (uint256));\\n        if (requiresTransfer) {\\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\\n        }\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\\n    function withdraw(bytes calldata withdrawData) public virtual override {\\n        // non-reentrancy check removed\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\\n        stakePoints = abi.decode(withdrawData, (uint256));\\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\\n    }\\n\\n    /// @inheritdoc TokenRecoveryBase\\n    /// @dev Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual override {\\n        uint256 stakingTokenRecoveryAmount;\\n        for (uint256 i; i < tokens.length; ++i) {\\n            if (tokens[i] == STAKING_TOKEN) {\\n                stakingTokenRecoveryAmount += amounts[i];\\n            }\\n        }\\n        if (stakingTokenRecoveryAmount != 0) {\\n            uint256 recoverable = STAKING_TOKEN.balanceOf(address(this)) - totalStaked;\\n            if (stakingTokenRecoveryAmount > recoverable) {\\n                revert InvalidRecoveryAmount(stakingTokenRecoveryAmount, recoverable);\\n            }\\n        }\\n        super.recoverERC20s(accounts, tokens, amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x3addc69ce91fa21ec4796bbcf56cb8d801fac10d6bddaa7d4eab0cc25709122e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4118,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":2032,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":2034,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":2036,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":2038,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":2040,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":2044,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":2048,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":2052,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"addReward(uint256,uint256)":{"notice":"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution."},"claim()":{"notice":"Claims the rewards for the sender."},"earned(address)":{"notice":"Returns the amount of rewards earned by the account."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"lastTimeRewardApplicable()":{"notice":"Returns the last time rewards are applicable."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Callback called when the contract receives ERC20 tokens via the IERC20SafeTransfers functions."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"rewardPerStakePoint()":{"notice":"Returns the current reward per stake point."},"stake(bytes)":{"notice":"Stakes to the pool."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw(bytes)":{"notice":"Withdraws from the pool."}},"notice":"A linear pool that allows staking of ERC20 tokens.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ERC20Receiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC20 Fungible Token Standard, Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC20 Fungible Token Standard, Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Receiver.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":\"ERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"IERC20Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}}},"title":"ERC20 Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}}},\"title\":\"ERC20 Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"}},\"notice\":\"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":\"IERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."}},"notice":"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"IERC20SafeTransfers":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.","kind":"dev","methods":{"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Safe Transfers.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.\",\"kind\":\"dev\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Safe Transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":\"IERC20SafeTransfers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"Address":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:41:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:410:41;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:41:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"hasBytecode(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"IERC1363":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"approveAndCall(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"approveAndCall(address,uint256,bytes)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"data":"Additional data with no specified format, sent in call to `spender`.","spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferAndCall(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferAndCall(address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFromAndCall(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}}},"title":"IERC1363","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","approveAndCall(address,uint256)":"3177029f","approveAndCall(address,uint256,bytes)":"cae9ca51","balanceOf(address)":"70a08231","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256)":"1296ee62","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd","transferFromAndCall(address,address,uint256)":"d8fbe994","transferFromAndCall(address,address,uint256,bytes)":"c1d34b89"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-20 standard as defined in the ERC.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"devdoc":{"details":"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","errors":{"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)":[{"details":"Indicates a failed `decreaseAllowance` request."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220607550b4c6a633bc8d1bcca1ae00bd7e6a16f7cd0cab8030df71f92b25cfe28864736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x75 POP 0xB4 0xC6 0xA6 CALLER 0xBC DUP14 SHL 0xCC LOG1 0xAE STOP 0xBD PUSH31 0x6A16F7CD0CAB8030DF71F92B25CFE28864736F6C634300081C003300000000 ","sourceMap":"698:8692:46:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;698:8692:46;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220607550b4c6a633bc8d1bcca1ae00bd7e6a16f7cd0cab8030df71f92b25cfe28864736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x75 POP 0xB4 0xC6 0xA6 CALLER 0xBC DUP14 SHL 0xCC LOG1 0xAE STOP 0xBD PUSH31 0x6A16F7CD0CAB8030DF71F92B25CFE28864736F6C634300081C003300000000 ","sourceMap":"698:8692:46:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite","transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"}],"devdoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4d6505cfba92dca4ae35db03d1ed0cc224b445372e9fb25f2ed11209600cf3764736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xD6 POP TLOAD 0xFB 0xA9 0x2D 0xCA BLOBBASEFEE 0xE3 TSTORE 0xB0 RETURNDATASIZE 0x1E 0xD0 0xCC 0x22 0x4B PREVRANDAO MSTORE8 PUSH19 0xE9FB25F2ED11209600CF3764736F6C63430008 SHR STOP CALLER ","sourceMap":"233:5815:47:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;233:5815:47;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4d6505cfba92dca4ae35db03d1ed0cc224b445372e9fb25f2ed11209600cf3764736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xD6 POP TLOAD 0xFB 0xA9 0x2D 0xCA BLOBBASEFEE 0xE3 TSTORE 0xB0 RETURNDATASIZE 0x1E 0xD0 0xCC 0x22 0x4B PREVRANDAO MSTORE8 PUSH19 0xE9FB25F2ED11209600CF3764736F6C63430008 SHR STOP CALLER ","sourceMap":"233:5815:47:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Errors.sol":{"Errors":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"FailedDeployment","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"MissingPrecompile","type":"error"}],"devdoc":{"details":"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._","errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"FailedDeployment()":[{"details":"The deployment failed."}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"MissingPrecompile(address)":[{"details":"A necessary precompile is missing."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091fed336c2a6257b00acfb7a966e90e7e627e141d220b481e3ae4abf3c4a8ca564736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 INVALID 0xD3 CALLDATASIZE 0xC2 0xA6 0x25 PUSH28 0xACFB7A966E90E7E627E141D220B481E3AE4ABF3C4A8CA564736F6C PUSH4 0x4300081C STOP CALLER ","sourceMap":"411:484:49:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;411:484:49;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091fed336c2a6257b00acfb7a966e90e7e627e141d220b481e3ae4abf3c4a8ca564736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 INVALID 0xD3 CALLDATASIZE 0xC2 0xA6 0x25 PUSH28 0xACFB7A966E90E7E627E141D220B481E3AE4ABF3C4A8CA564736F6C PUSH4 0x4300081C STOP CALLER ","sourceMap":"411:484:49:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MissingPrecompile\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"MissingPrecompile(address)\":[{\"details\":\"A necessary precompile is missing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4118,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:51:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1407:2774:51;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:51:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getInt256Slot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"devdoc":{"details":"Library of standard hash functions. _Available since v5.1._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122023e756b69c1ebac6c888c4ddd61fdac4cac45146c946352e2a3338beab609cd164736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 0xE7 JUMP 0xB6 SWAP13 0x1E 0xBA 0xC6 0xC8 DUP9 0xC4 0xDD 0xD6 0x1F 0xDA 0xC4 0xCA 0xC4 MLOAD CHAINID 0xC9 CHAINID CALLDATALOAD 0x2E 0x2A CALLER CODESIZE 0xBE 0xAB PUSH1 0x9C 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"221:813:52:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;221:813:52;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122023e756b69c1ebac6c888c4ddd61fdac4cac45146c946352e2a3338beab609cd164736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 0xE7 JUMP 0xB6 SWAP13 0x1E 0xBA 0xC6 0xC8 DUP9 0xC4 0xDD 0xD6 0x1F 0xDA 0xC4 0xCA 0xC4 MLOAD CHAINID 0xC9 CHAINID CALLDATALOAD 0x2E 0x2A CALLER CODESIZE 0xBE 0xAB PUSH1 0x9C 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"221:813:52:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientKeccak256(bytes32,bytes32)":"infinite","commutativeKeccak256(bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library of standard hash functions.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Hashes {\\n    /**\\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\\n     *\\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n     */\\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.","errors":{"MerkleProofInvalidMultiproof()":[{"details":"The multiproof provided is not valid."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de7ead9276d491b3c971e476d2c63d48954ed8d6dd0cde16d3ab2cdc275282ca64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE PUSH31 0xAD9276D491B3C971E476D2C63D48954ED8D6DD0CDE16D3AB2CDC275282CA64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"1353:22982:53:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1353:22982:53;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de7ead9276d491b3c971e476d2c63d48954ed8d6dd0cde16d3ab2cdc275282ca64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE PUSH31 0xAD9276D491B3C971E476D2C63D48954ED8D6DD0CDE16D3AB2CDC275282CA64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"1353:22982:53:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProof(bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library of standard hash functions.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Hashes {\\n    /**\\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\\n     *\\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n     */\\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Hashes} from \\\"./Hashes.sol\\\";\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n *\\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\\n * that access memory in an unsafe way.\\n *\\n * NOTE: This library supports proof verification for merkle trees built using\\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\\n * leaf inclusion in trees built using non-commutative hashing functions requires\\n * additional logic that is not supported by this library.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProof(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function processProof(\\n        bytes32[] memory proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProofCalldata(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function processProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/merkleClaim/CheckmateMerkleClaim.sol":{"CheckmateMerkleClaim":{"abi":[{"inputs":[{"internalType":"address","name":"checkmateTokenContract_","type":"address"},{"internalType":"address","name":"stakingContract_","type":"address"},{"internalType":"address","name":"payoutWallet_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidCheckmateTokenContract","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidClaimAmount","type":"error"},{"inputs":[],"name":"InvalidForwarderRegistry","type":"error"},{"inputs":[],"name":"InvalidPayoutWallet","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint16","name":"nonce","type":"uint16"}],"name":"InvalidProof","type":"error"},{"inputs":[],"name":"InvalidRoot","type":"error"},{"inputs":[],"name":"InvalidStakingContract","type":"error"},{"inputs":[{"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootNotExists","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"NotPaused","type":"error"},{"inputs":[],"name":"Paused","type":"error"},{"inputs":[{"internalType":"address","name":"payoutWallet","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"uint16","name":"nonce","type":"uint16"}],"name":"MerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"address","name":"payoutWallet","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newPayoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newTreasuryWallet","type":"address"}],"name":"TreasuryWalletSet","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"inputs":[],"name":"CHECKMATE_TOKEN_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claimAndStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"rootToNonceMap","outputs":[{"internalType":"uint16","name":"nonce","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AlreadyClaimed(address,uint256,bytes32)":[{"params":{"amount":"The amount of checkmate token is claimed.","recipient":"The recipient of the claim.","root":"The root."}}],"InvalidClaimAmount(uint256)":[{"params":{"amount":"The amount of the claim."}}],"InvalidProof(address,uint256,uint16)":[{"params":{"amount":"The amount of checkmate token is claimed.","nonce":"The nonce of the root.","recipient":"The recipient of the checkmate token."}}],"MerkleRootNotExists(bytes32)":[{"params":{"root":"The root."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"TransferFailed(address,address,uint256)":[{"params":{"amount":"The amount of the claim.","payoutWallet":"The wallet sending out the checkmate token.","recipient":"The recipient of the claim."}}]},"events":{"MerkleRootSet(bytes32,uint16)":{"params":{"nonce":"The nonce assigned to the root.","root":"The new merkle root."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutClaimed(bytes32,address,address,uint256)":{"params":{"amount":"The amount of checkmate token is claimed.","payoutWallet":"The wallet sending out the checkmate token.","recipient":"The recipient of the checkmate token.","root":"The merkle root on which the claim was made."}},"PayoutWalletSet(address)":{"params":{"newPayoutWallet":"The new payout wallet."}},"TreasuryWalletSet(address)":{"params":{"newTreasuryWallet":"The new treasury wallet."}}},"kind":"dev","methods":{"claimAndStake(address,uint256,bytes32,bytes32[])":{"details":"Reverts with {InvalidClaimAmount} if it is claiming a zero amount.Reverts with {Paused} if contract is paused.Reverts with {MerkleRootNotExists} if the merkle root does not exist.Reverts with {InvalidProof} if the merkle proof has failed the verificationReverts with {AlreadyClaimed} if this specific payout has already been claimed.Emits a {PayoutClaimed} event.","params":{"amount":"The amount of checkmate token to be claimed.","proof":"The Merkle proof of the user based on the merkle root.","recipient":"The recipient for this claim.","root":"The root for this claim."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"pause()":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {Paused} if the contract is paused.Emits a {Paused} event."},"paused()":{"returns":{"_0":"The paused state of the contract."}},"setMerkleRoot(bytes32)":{"details":"Reverts with {InvalidRoot} if the merkle root is zero.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {MerkleRootSet} event.","params":{"merkleRoot":"The merkle root to be set."}},"setPayoutWallet(address)":{"details":"Reverts with {InvalidPayoutWallet} if the new payout wallet is zero address.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet to be set."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"unpause()":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {NotPaused} if the contract is not paused.Emits an {Unpaused} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@_5616":{"entryPoint":null,"id":5616,"parameterSlots":3,"returnSlots":0},"@constructorInit_705":{"entryPoint":282,"id":705,"parameterSlots":2,"returnSlots":0},"@layout_1009":{"entryPoint":400,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":230,"id":861,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_963":{"entryPoint":446,"id":963,"parameterSlots":3,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":538,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_address_fromMemory":{"entryPoint":566,"id":null,"parameterSlots":2,"returnSlots":3},"checked_sub_t_uint256":{"entryPoint":633,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:806:63","nodeType":"YulBlock","src":"0:806:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"74:117:63","nodeType":"YulBlock","src":"74:117:63","statements":[{"nativeSrc":"84:22:63","nodeType":"YulAssignment","src":"84:22:63","value":{"arguments":[{"name":"offset","nativeSrc":"99:6:63","nodeType":"YulIdentifier","src":"99:6:63"}],"functionName":{"name":"mload","nativeSrc":"93:5:63","nodeType":"YulIdentifier","src":"93:5:63"},"nativeSrc":"93:13:63","nodeType":"YulFunctionCall","src":"93:13:63"},"variableNames":[{"name":"value","nativeSrc":"84:5:63","nodeType":"YulIdentifier","src":"84:5:63"}]},{"body":{"nativeSrc":"169:16:63","nodeType":"YulBlock","src":"169:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:63","nodeType":"YulLiteral","src":"178:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:63","nodeType":"YulLiteral","src":"181:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:63","nodeType":"YulIdentifier","src":"171:6:63"},"nativeSrc":"171:12:63","nodeType":"YulFunctionCall","src":"171:12:63"},"nativeSrc":"171:12:63","nodeType":"YulExpressionStatement","src":"171:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"128:5:63","nodeType":"YulIdentifier","src":"128:5:63"},{"arguments":[{"name":"value","nativeSrc":"139:5:63","nodeType":"YulIdentifier","src":"139:5:63"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"154:3:63","nodeType":"YulLiteral","src":"154:3:63","type":"","value":"160"},{"kind":"number","nativeSrc":"159:1:63","nodeType":"YulLiteral","src":"159:1:63","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"150:3:63","nodeType":"YulIdentifier","src":"150:3:63"},"nativeSrc":"150:11:63","nodeType":"YulFunctionCall","src":"150:11:63"},{"kind":"number","nativeSrc":"163:1:63","nodeType":"YulLiteral","src":"163:1:63","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"146:3:63","nodeType":"YulIdentifier","src":"146:3:63"},"nativeSrc":"146:19:63","nodeType":"YulFunctionCall","src":"146:19:63"}],"functionName":{"name":"and","nativeSrc":"135:3:63","nodeType":"YulIdentifier","src":"135:3:63"},"nativeSrc":"135:31:63","nodeType":"YulFunctionCall","src":"135:31:63"}],"functionName":{"name":"eq","nativeSrc":"125:2:63","nodeType":"YulIdentifier","src":"125:2:63"},"nativeSrc":"125:42:63","nodeType":"YulFunctionCall","src":"125:42:63"}],"functionName":{"name":"iszero","nativeSrc":"118:6:63","nodeType":"YulIdentifier","src":"118:6:63"},"nativeSrc":"118:50:63","nodeType":"YulFunctionCall","src":"118:50:63"},"nativeSrc":"115:70:63","nodeType":"YulIf","src":"115:70:63"}]},"name":"abi_decode_address_fromMemory","nativeSrc":"14:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"53:6:63","nodeType":"YulTypedName","src":"53:6:63","type":""}],"returnVariables":[{"name":"value","nativeSrc":"64:5:63","nodeType":"YulTypedName","src":"64:5:63","type":""}],"src":"14:177:63"},{"body":{"nativeSrc":"311:263:63","nodeType":"YulBlock","src":"311:263:63","statements":[{"body":{"nativeSrc":"357:16:63","nodeType":"YulBlock","src":"357:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"366:1:63","nodeType":"YulLiteral","src":"366:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"369:1:63","nodeType":"YulLiteral","src":"369:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"359:6:63","nodeType":"YulIdentifier","src":"359:6:63"},"nativeSrc":"359:12:63","nodeType":"YulFunctionCall","src":"359:12:63"},"nativeSrc":"359:12:63","nodeType":"YulExpressionStatement","src":"359:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"332:7:63","nodeType":"YulIdentifier","src":"332:7:63"},{"name":"headStart","nativeSrc":"341:9:63","nodeType":"YulIdentifier","src":"341:9:63"}],"functionName":{"name":"sub","nativeSrc":"328:3:63","nodeType":"YulIdentifier","src":"328:3:63"},"nativeSrc":"328:23:63","nodeType":"YulFunctionCall","src":"328:23:63"},{"kind":"number","nativeSrc":"353:2:63","nodeType":"YulLiteral","src":"353:2:63","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"324:3:63","nodeType":"YulIdentifier","src":"324:3:63"},"nativeSrc":"324:32:63","nodeType":"YulFunctionCall","src":"324:32:63"},"nativeSrc":"321:52:63","nodeType":"YulIf","src":"321:52:63"},{"nativeSrc":"382:50:63","nodeType":"YulAssignment","src":"382:50:63","value":{"arguments":[{"name":"headStart","nativeSrc":"422:9:63","nodeType":"YulIdentifier","src":"422:9:63"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"392:29:63","nodeType":"YulIdentifier","src":"392:29:63"},"nativeSrc":"392:40:63","nodeType":"YulFunctionCall","src":"392:40:63"},"variableNames":[{"name":"value0","nativeSrc":"382:6:63","nodeType":"YulIdentifier","src":"382:6:63"}]},{"nativeSrc":"441:59:63","nodeType":"YulAssignment","src":"441:59:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"485:9:63","nodeType":"YulIdentifier","src":"485:9:63"},{"kind":"number","nativeSrc":"496:2:63","nodeType":"YulLiteral","src":"496:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:63","nodeType":"YulIdentifier","src":"481:3:63"},"nativeSrc":"481:18:63","nodeType":"YulFunctionCall","src":"481:18:63"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"451:29:63","nodeType":"YulIdentifier","src":"451:29:63"},"nativeSrc":"451:49:63","nodeType":"YulFunctionCall","src":"451:49:63"},"variableNames":[{"name":"value1","nativeSrc":"441:6:63","nodeType":"YulIdentifier","src":"441:6:63"}]},{"nativeSrc":"509:59:63","nodeType":"YulAssignment","src":"509:59:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"553:9:63","nodeType":"YulIdentifier","src":"553:9:63"},{"kind":"number","nativeSrc":"564:2:63","nodeType":"YulLiteral","src":"564:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"549:3:63","nodeType":"YulIdentifier","src":"549:3:63"},"nativeSrc":"549:18:63","nodeType":"YulFunctionCall","src":"549:18:63"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"519:29:63","nodeType":"YulIdentifier","src":"519:29:63"},"nativeSrc":"519:49:63","nodeType":"YulFunctionCall","src":"519:49:63"},"variableNames":[{"name":"value2","nativeSrc":"509:6:63","nodeType":"YulIdentifier","src":"509:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_address_fromMemory","nativeSrc":"196:378:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"261:9:63","nodeType":"YulTypedName","src":"261:9:63","type":""},{"name":"dataEnd","nativeSrc":"272:7:63","nodeType":"YulTypedName","src":"272:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"284:6:63","nodeType":"YulTypedName","src":"284:6:63","type":""},{"name":"value1","nativeSrc":"292:6:63","nodeType":"YulTypedName","src":"292:6:63","type":""},{"name":"value2","nativeSrc":"300:6:63","nodeType":"YulTypedName","src":"300:6:63","type":""}],"src":"196:378:63"},{"body":{"nativeSrc":"628:176:63","nodeType":"YulBlock","src":"628:176:63","statements":[{"nativeSrc":"638:17:63","nodeType":"YulAssignment","src":"638:17:63","value":{"arguments":[{"name":"x","nativeSrc":"650:1:63","nodeType":"YulIdentifier","src":"650:1:63"},{"name":"y","nativeSrc":"653:1:63","nodeType":"YulIdentifier","src":"653:1:63"}],"functionName":{"name":"sub","nativeSrc":"646:3:63","nodeType":"YulIdentifier","src":"646:3:63"},"nativeSrc":"646:9:63","nodeType":"YulFunctionCall","src":"646:9:63"},"variableNames":[{"name":"diff","nativeSrc":"638:4:63","nodeType":"YulIdentifier","src":"638:4:63"}]},{"body":{"nativeSrc":"687:111:63","nodeType":"YulBlock","src":"687:111:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"708:1:63","nodeType":"YulLiteral","src":"708:1:63","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"715:3:63","nodeType":"YulLiteral","src":"715:3:63","type":"","value":"224"},{"kind":"number","nativeSrc":"720:10:63","nodeType":"YulLiteral","src":"720:10:63","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"711:3:63","nodeType":"YulIdentifier","src":"711:3:63"},"nativeSrc":"711:20:63","nodeType":"YulFunctionCall","src":"711:20:63"}],"functionName":{"name":"mstore","nativeSrc":"701:6:63","nodeType":"YulIdentifier","src":"701:6:63"},"nativeSrc":"701:31:63","nodeType":"YulFunctionCall","src":"701:31:63"},"nativeSrc":"701:31:63","nodeType":"YulExpressionStatement","src":"701:31:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"752:1:63","nodeType":"YulLiteral","src":"752:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"755:4:63","nodeType":"YulLiteral","src":"755:4:63","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"745:6:63","nodeType":"YulIdentifier","src":"745:6:63"},"nativeSrc":"745:15:63","nodeType":"YulFunctionCall","src":"745:15:63"},"nativeSrc":"745:15:63","nodeType":"YulExpressionStatement","src":"745:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"780:1:63","nodeType":"YulLiteral","src":"780:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"783:4:63","nodeType":"YulLiteral","src":"783:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"773:6:63","nodeType":"YulIdentifier","src":"773:6:63"},"nativeSrc":"773:15:63","nodeType":"YulFunctionCall","src":"773:15:63"},"nativeSrc":"773:15:63","nodeType":"YulExpressionStatement","src":"773:15:63"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"670:4:63","nodeType":"YulIdentifier","src":"670:4:63"},{"name":"x","nativeSrc":"676:1:63","nodeType":"YulIdentifier","src":"676:1:63"}],"functionName":{"name":"gt","nativeSrc":"667:2:63","nodeType":"YulIdentifier","src":"667:2:63"},"nativeSrc":"667:11:63","nodeType":"YulFunctionCall","src":"667:11:63"},"nativeSrc":"664:134:63","nodeType":"YulIf","src":"664:134:63"}]},"name":"checked_sub_t_uint256","nativeSrc":"579:225:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"610:1:63","nodeType":"YulTypedName","src":"610:1:63","type":""},{"name":"y","nativeSrc":"613:1:63","nodeType":"YulTypedName","src":"613:1:63","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"619:4:63","nodeType":"YulTypedName","src":"619:4:63","type":""}],"src":"579:225:63"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c060405234801561001057600080fd5b5060405161139238038061139283398101604081905261002f91610236565b336100428161003c6100e6565b9061011a565b506001600160a01b03831661006a57604051638246bfe760e01b815260040160405180910390fd5b6001600160a01b038216610091576040516307b18df360e31b815260040160405180910390fd5b6001600160a01b0381166100b85760405163620e5f7160e11b815260040160405180910390fd5b6001600160a01b0392831660805290821660a052600280546001600160a01b0319169190921617905561029a565b60008061011460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610279565b92915050565b6001600160a01b038116156101705781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b61018c6307f5828d60e41b6001610185610190565b91906101be565b5050565b60008061011460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610279565b600160e01b6001600160e01b03198316016101ec576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b80516001600160a01b038116811461023157600080fd5b919050565b60008060006060848603121561024b57600080fd5b6102548461021a565b92506102626020850161021a565b91506102706040850161021a565b90509250925092565b8181038181111561011457634e487b7160e01b600052601160045260246000fd5b60805160a0516110c56102cd6000396000818161026e01526105c5015260008181610224015261059601526110c56000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638456cb5911610097578063b1bb0c6c11610066578063b1bb0c6c1461021f578063cc3c0f0614610246578063da19ddfb14610269578063f2fde38b1461029057600080fd5b80638456cb59146101a45780638488bb4e146101ac5780638da5cb5b146101f1578063affed0e0146101f957600080fd5b80635c975abb116100d35780635c975abb1461013f5780636b8f9c43146101475780637505fee11461015a5780637cb647591461019157600080fd5b806301ffc9a7146100fa5780633f4ba83a14610122578063422a8b551461012c575b600080fd5b61010d610108366004610dfd565b6102a3565b60405190151581526020015b60405180910390f35b61012a6102bd565b005b61012a61013a366004610e68565b6102e2565b61010d610705565b61012a610155366004610f01565b61071e565b61017e610168366004610f1c565b60006020819052908152604090205461ffff1681565b60405161ffff9091168152602001610119565b61012a61019f366004610f1c565b6107e3565b61012a610902565b6002546101cc9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610119565b6101cc61091b565b60025461017e9074010000000000000000000000000000000000000000900461ffff1681565b6101cc7f000000000000000000000000000000000000000000000000000000000000000081565b61010d610254366004610f1c565b60016020526000908152604090205460ff1681565b6101cc7f000000000000000000000000000000000000000000000000000000000000000081565b61012a61029e366004610f01565b610942565b60006102b7826102b1610959565b90610987565b92915050565b6102d0335b6102ca610a61565b90610a8f565b6102e06102db610afe565b610b2c565b565b83600003610324576040517f27ab1ee2000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b61033461032f610afe565b610b87565b60008381526020819052604081205461ffff1690819003610384576040517f1d3bbc3f0000000000000000000000000000000000000000000000000000000081526004810185905260240161031b565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088901b166020820152603481018690527fffff00000000000000000000000000000000000000000000000000000000000060f083901b166054820152600090605601604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120905061043084848784610bc3565b61048f576040517facfb186500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881660048201526024810187905261ffff8316604482015260640161031b565b60008181526001602052604090205460ff16156104fe576040517f685fced700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88166004820152602481018790526044810186905260640161031b565b600081815260016020818152604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909317909255600254825173ffffffffffffffffffffffffffffffffffffffff8c81168285015284518083039094018452818501948590527fb88d4fde0000000000000000000000000000000000000000000000000000000090945290831693927f0000000000000000000000000000000000000000000000000000000000000000169163b88d4fde916105ef9186917f0000000000000000000000000000000000000000000000000000000000000000918e91604401610f35565b6020604051808303816000875af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190610fe2565b905080610692576040517fbf182be800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301528a1660248201526044810189905260640161031b565b8873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16887f96a0bda4b1c283cf8feeb70ec1fc51c1f830f0548dc9f740b8d885079be891068b6040516106f291815260200190565b60405180910390a4505050505050505050565b6000610719610712610afe565b5460ff1690565b905090565b73ffffffffffffffffffffffffffffffffffffffff811661076b576040517fc41cbee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610774336102c2565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f85590600090a250565b600081900361081e576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610827336102c2565b6002546000906108549074010000000000000000000000000000000000000000900461ffff166001611033565b60008381526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff8516908117909155600280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000830217905590519293509184917fbb00584cc5258c6d02504d390995c03261d52c617c9171c16cb9edb00f672f3a91a35050565b61090b336102c2565b6102e0610916610afe565b610bdb565b6000610719610928610a61565b5473ffffffffffffffffffffffffffffffffffffffff1690565b610956338261094f610a61565b9190610c39565b50565b6000806102b760017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61104d565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109d7575060006102b7565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a28575060016102b7565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806102b760017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61104d565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610afa576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161031b565b5050565b6000806102b760017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f61104d565b610b3581610d4e565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150565b805460ff1615610956576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082610bd1868685610d89565b1495945050505050565b610be481610b87565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610ca6576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d485783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b805460ff16610956576040517f6cd6020100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815b84811015610dc257610db882878784818110610dac57610dac611060565b90506020020135610dcb565b9150600101610d8e565b50949350505050565b6000818310610de7576000828152602084905260409020610df6565b60008381526020839052604090205b9392505050565b600060208284031215610e0f57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610df657600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610e6357600080fd5b919050565b600080600080600060808688031215610e8057600080fd5b610e8986610e3f565b94506020860135935060408601359250606086013567ffffffffffffffff811115610eb357600080fd5b8601601f81018813610ec457600080fd5b803567ffffffffffffffff811115610edb57600080fd5b8860208260051b8401011115610ef057600080fd5b959894975092955050506020019190565b600060208284031215610f1357600080fd5b610df682610e3f565b600060208284031215610f2e57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152826040820152608060608201526000825180608084015260005b81811015610fa157602081860181015160a0868401015201610f84565b50600060a0828501015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505095945050505050565b600060208284031215610ff457600080fd5b81518015158114610df657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61ffff81811683821601908111156102b7576102b7611004565b818103818111156102b7576102b7611004565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a38206df15181e77868d951b70ea57d206d1480dbaafd8a9a97c43f891f0739964736f6c634300081c0033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1392 CODESIZE SUB DUP1 PUSH2 0x1392 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x236 JUMP JUMPDEST CALLER PUSH2 0x42 DUP2 PUSH2 0x3C PUSH2 0xE6 JUMP JUMPDEST SWAP1 PUSH2 0x11A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x8246BFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x91 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7B18DF3 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x620E5F71 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x80 MSTORE SWAP1 DUP3 AND PUSH1 0xA0 MSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH2 0x29A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x114 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x279 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x170 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x18C PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x185 PUSH2 0x190 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x114 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x254 DUP5 PUSH2 0x21A JUMP JUMPDEST SWAP3 POP PUSH2 0x262 PUSH1 0x20 DUP6 ADD PUSH2 0x21A JUMP JUMPDEST SWAP2 POP PUSH2 0x270 PUSH1 0x40 DUP6 ADD PUSH2 0x21A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x114 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x10C5 PUSH2 0x2CD PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x26E ADD MSTORE PUSH2 0x5C5 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x224 ADD MSTORE PUSH2 0x596 ADD MSTORE PUSH2 0x10C5 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB1BB0C6C GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB1BB0C6C EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0xDA19DDFB EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x7505FEE1 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x422A8B55 EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x2BD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12A PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x705 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xF01 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH2 0x17E PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0xF1C JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x902 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1CC SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x91B JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x17E SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1CC PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x254 CALLDATASIZE PUSH1 0x4 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1CC PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0xF01 JUMP JUMPDEST PUSH2 0x942 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7 DUP3 PUSH2 0x2B1 PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x987 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D0 CALLER JUMPDEST PUSH2 0x2CA PUSH2 0xA61 JUMP JUMPDEST SWAP1 PUSH2 0xA8F JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0xAFE JUMP JUMPDEST PUSH2 0xB2C JUMP JUMPDEST JUMP JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0x324 JUMPI PUSH1 0x40 MLOAD PUSH32 0x27AB1EE200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0xAFE JUMP JUMPDEST PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xFFFF AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1D3BBC3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x31B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP9 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP7 SWAP1 MSTORE PUSH32 0xFFFF000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP4 SWAP1 SHL AND PUSH1 0x54 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x56 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x430 DUP5 DUP5 DUP8 DUP5 PUSH2 0xBC3 JUMP JUMPDEST PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD PUSH32 0xACFB186500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0xFFFF DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x31B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x685FCED700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x31B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 SLOAD DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP2 AND DUP3 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE DUP2 DUP6 ADD SWAP5 DUP6 SWAP1 MSTORE PUSH32 0xB88D4FDE00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 MSTORE SWAP1 DUP4 AND SWAP4 SWAP3 PUSH32 0x0 AND SWAP2 PUSH4 0xB88D4FDE SWAP2 PUSH2 0x5EF SWAP2 DUP7 SWAP2 PUSH32 0x0 SWAP2 DUP15 SWAP2 PUSH1 0x44 ADD PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x60E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x632 SWAP2 SWAP1 PUSH2 0xFE2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x692 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBF182BE800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x31B JUMP JUMPDEST DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH32 0x96A0BDA4B1C283CF8FEEB70EC1FC51C1F830F0548DC9F740B8D885079BE89106 DUP12 PUSH1 0x40 MLOAD PUSH2 0x6F2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x719 PUSH2 0x712 PUSH2 0xAFE JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x76B JUMPI PUSH1 0x40 MLOAD PUSH32 0xC41CBEE200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x774 CALLER PUSH2 0x2C2 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SUB PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH32 0x504570E300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x827 CALLER PUSH2 0x2C2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x854 SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH2 0xFFFF AND PUSH1 0x1 PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0xFFFF DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 DUP4 MUL OR SWAP1 SSTORE SWAP1 MLOAD SWAP3 SWAP4 POP SWAP2 DUP5 SWAP2 PUSH32 0xBB00584CC5258C6D02504D390995C03261D52C617C9171C16CB9EDB00F672F3A SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH2 0x90B CALLER PUSH2 0x2C2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x916 PUSH2 0xAFE JUMP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x719 PUSH2 0x928 PUSH2 0xA61 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x956 CALLER DUP3 PUSH2 0x94F PUSH2 0xA61 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B7 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x104D JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9D7 JUMPI POP PUSH1 0x0 PUSH2 0x2B7 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA28 JUMPI POP PUSH1 0x1 PUSH2 0x2B7 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B7 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x104D JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x31B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B7 PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH2 0x104D JUMP JUMPDEST PUSH2 0xB35 DUP2 PUSH2 0xD4E JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x7805862F689E2F13DF9F062FF482AD3AD112ACA9E0847911ED832E158C525B33 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x956 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9E87FAC800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBD1 DUP7 DUP7 DUP6 PUSH2 0xD89 JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBE4 DUP2 PUSH2 0xB87 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6985A02210A168E66602D3235CB6DB0E70F92B3BA4D376A33C0F3D9434BFF625 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xCA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x31B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD48 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x956 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6CD6020100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDC2 JUMPI PUSH2 0xDB8 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xDAC JUMPI PUSH2 0xDAC PUSH2 0x1060 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xDCB JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xD8E JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xDE7 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE89 DUP7 PUSH2 0xE3F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xEF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF6 DUP3 PUSH2 0xE3F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFA1 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0xA0 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0xF84 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA0 DUP3 DUP6 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x2B7 JUMPI PUSH2 0x2B7 PUSH2 0x1004 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2B7 JUMPI PUSH2 0x2B7 PUSH2 0x1004 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 DUP3 MOD 0xDF ISZERO XOR 0x1E PUSH24 0x868D951B70EA57D206D1480DBAAFD8A9A97C43F891F07399 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"695:7433:55:-:0;;;4268:586;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4380:10;1008:63:2;4380:10:55;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;4406:37:55;::::1;4402:106;;4466:31;;-1:-1:-1::0;;;4466:31:55::1;;;;;;;;;;;4402:106;-1:-1:-1::0;;;;;4521:30:55;::::1;4517:92;;4574:24;;-1:-1:-1::0;;;4574:24:55::1;;;;;;;;;;;4517:92;-1:-1:-1::0;;;;;4622:27:55;::::1;4618:86;;4672:21;;-1:-1:-1::0;;;4672:21:55::1;;;;;;;;;;;4618:86;-1:-1:-1::0;;;;;4714:50:55;;::::1;;::::0;4774:35;;::::1;;::::0;4819:12:::1;:28:::0;;-1:-1:-1;;;;;;4819:28:55::1;::::0;;;::::1;;::::0;;695:7433;;5060:174:13;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:13:o;1561:341::-;-1:-1:-1;;;;;1649:26:13;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:13;-1:-1:-1;;;;;1691:30:13;;;;;;;1740:46;;-1:-1:-1;;1740:46:13;;-1:-1:-1;;1740:46:13;1645:152;1806:89;-1:-1:-1;;;1890:4:13;1806:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1561:341;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:177:63:-;93:13;;-1:-1:-1;;;;;135:31:63;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:378::-;284:6;292;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;392:40;422:9;392:40;:::i;:::-;382:50;;451:49;496:2;485:9;481:18;451:49;:::i;:::-;441:59;;519:49;564:2;553:9;549:18;519:49;:::i;:::-;509:59;;196:378;;;;;:::o;579:225::-;646:9;;;667:11;;;664:134;;;720:10;715:3;711:20;708:1;701:31;755:4;752:1;745:15;783:4;780:1;773:15;579:225;695:7433:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CHECKMATE_TOKEN_CONTRACT_5458":{"entryPoint":null,"id":5458,"parameterSlots":0,"returnSlots":0},"@STAKING_CONTRACT_5461":{"entryPoint":null,"id":5461,"parameterSlots":0,"returnSlots":0},"@_efficientKeccak256_4339":{"entryPoint":null,"id":4339,"parameterSlots":2,"returnSlots":1},"@_msgSender_4067":{"entryPoint":null,"id":4067,"parameterSlots":0,"returnSlots":1},"@claimAndStake_5819":{"entryPoint":738,"id":5819,"parameterSlots":5,"returnSlots":0},"@claimed_5471":{"entryPoint":null,"id":5471,"parameterSlots":0,"returnSlots":0},"@commutativeKeccak256_4327":{"entryPoint":3531,"id":4327,"parameterSlots":2,"returnSlots":1},"@enforceIsContractOwner_829":{"entryPoint":2703,"id":829,"parameterSlots":2,"returnSlots":0},"@enforceIsNotPaused_1288":{"entryPoint":2951,"id":1288,"parameterSlots":1,"returnSlots":0},"@enforceIsPaused_1274":{"entryPoint":3406,"id":1274,"parameterSlots":1,"returnSlots":0},"@layout_1009":{"entryPoint":2393,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_1300":{"entryPoint":2814,"id":1300,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":2657,"id":861,"parameterSlots":0,"returnSlots":1},"@nonce_5477":{"entryPoint":null,"id":5477,"parameterSlots":0,"returnSlots":0},"@owner_209":{"entryPoint":2331,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_782":{"entryPoint":null,"id":782,"parameterSlots":1,"returnSlots":1},"@pause_1054":{"entryPoint":2306,"id":1054,"parameterSlots":0,"returnSlots":0},"@pause_1224":{"entryPoint":3035,"id":1224,"parameterSlots":1,"returnSlots":0},"@paused_1087":{"entryPoint":1797,"id":1087,"parameterSlots":0,"returnSlots":1},"@paused_1259":{"entryPoint":null,"id":1259,"parameterSlots":1,"returnSlots":1},"@payoutWallet_5474":{"entryPoint":null,"id":5474,"parameterSlots":0,"returnSlots":0},"@processProofCalldata_4554":{"entryPoint":3465,"id":4554,"parameterSlots":3,"returnSlots":1},"@rootToNonceMap_5466":{"entryPoint":null,"id":5466,"parameterSlots":0,"returnSlots":0},"@setMerkleRoot_5661":{"entryPoint":2019,"id":5661,"parameterSlots":1,"returnSlots":0},"@setPayoutWallet_5696":{"entryPoint":1822,"id":5696,"parameterSlots":1,"returnSlots":0},"@supportsInterface_891":{"entryPoint":675,"id":891,"parameterSlots":1,"returnSlots":1},"@supportsInterface_997":{"entryPoint":2439,"id":997,"parameterSlots":2,"returnSlots":1},"@transferOwnership_226":{"entryPoint":2370,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_769":{"entryPoint":3129,"id":769,"parameterSlots":3,"returnSlots":0},"@unpause_1075":{"entryPoint":701,"id":1075,"parameterSlots":0,"returnSlots":0},"@unpause_1246":{"entryPoint":2860,"id":1246,"parameterSlots":1,"returnSlots":0},"@verifyCalldata_4513":{"entryPoint":3011,"id":4513,"parameterSlots":4,"returnSlots":1},"abi_decode_address":{"entryPoint":3647,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3841,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":3688,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4066,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3868,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":3581,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3893,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint16":{"entryPoint":4147,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4173,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4100,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4192,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:6340:63","nodeType":"YulBlock","src":"0:6340:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"83:263:63","nodeType":"YulBlock","src":"83:263:63","statements":[{"body":{"nativeSrc":"129:16:63","nodeType":"YulBlock","src":"129:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:63","nodeType":"YulLiteral","src":"138:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:63","nodeType":"YulLiteral","src":"141:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:63","nodeType":"YulIdentifier","src":"131:6:63"},"nativeSrc":"131:12:63","nodeType":"YulFunctionCall","src":"131:12:63"},"nativeSrc":"131:12:63","nodeType":"YulExpressionStatement","src":"131:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:63","nodeType":"YulIdentifier","src":"104:7:63"},{"name":"headStart","nativeSrc":"113:9:63","nodeType":"YulIdentifier","src":"113:9:63"}],"functionName":{"name":"sub","nativeSrc":"100:3:63","nodeType":"YulIdentifier","src":"100:3:63"},"nativeSrc":"100:23:63","nodeType":"YulFunctionCall","src":"100:23:63"},{"kind":"number","nativeSrc":"125:2:63","nodeType":"YulLiteral","src":"125:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:63","nodeType":"YulIdentifier","src":"96:3:63"},"nativeSrc":"96:32:63","nodeType":"YulFunctionCall","src":"96:32:63"},"nativeSrc":"93:52:63","nodeType":"YulIf","src":"93:52:63"},{"nativeSrc":"154:36:63","nodeType":"YulVariableDeclaration","src":"154:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:63","nodeType":"YulIdentifier","src":"180:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:63","nodeType":"YulIdentifier","src":"167:12:63"},"nativeSrc":"167:23:63","nodeType":"YulFunctionCall","src":"167:23:63"},"variables":[{"name":"value","nativeSrc":"158:5:63","nodeType":"YulTypedName","src":"158:5:63","type":""}]},{"body":{"nativeSrc":"300:16:63","nodeType":"YulBlock","src":"300:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:63","nodeType":"YulLiteral","src":"309:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:63","nodeType":"YulLiteral","src":"312:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:63","nodeType":"YulIdentifier","src":"302:6:63"},"nativeSrc":"302:12:63","nodeType":"YulFunctionCall","src":"302:12:63"},"nativeSrc":"302:12:63","nodeType":"YulExpressionStatement","src":"302:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:63","nodeType":"YulIdentifier","src":"212:5:63"},{"arguments":[{"name":"value","nativeSrc":"223:5:63","nodeType":"YulIdentifier","src":"223:5:63"},{"kind":"number","nativeSrc":"230:66:63","nodeType":"YulLiteral","src":"230:66:63","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:63","nodeType":"YulIdentifier","src":"219:3:63"},"nativeSrc":"219:78:63","nodeType":"YulFunctionCall","src":"219:78:63"}],"functionName":{"name":"eq","nativeSrc":"209:2:63","nodeType":"YulIdentifier","src":"209:2:63"},"nativeSrc":"209:89:63","nodeType":"YulFunctionCall","src":"209:89:63"}],"functionName":{"name":"iszero","nativeSrc":"202:6:63","nodeType":"YulIdentifier","src":"202:6:63"},"nativeSrc":"202:97:63","nodeType":"YulFunctionCall","src":"202:97:63"},"nativeSrc":"199:117:63","nodeType":"YulIf","src":"199:117:63"},{"nativeSrc":"325:15:63","nodeType":"YulAssignment","src":"325:15:63","value":{"name":"value","nativeSrc":"335:5:63","nodeType":"YulIdentifier","src":"335:5:63"},"variableNames":[{"name":"value0","nativeSrc":"325:6:63","nodeType":"YulIdentifier","src":"325:6:63"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:63","nodeType":"YulTypedName","src":"49:9:63","type":""},{"name":"dataEnd","nativeSrc":"60:7:63","nodeType":"YulTypedName","src":"60:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:63","nodeType":"YulTypedName","src":"72:6:63","type":""}],"src":"14:332:63"},{"body":{"nativeSrc":"446:92:63","nodeType":"YulBlock","src":"446:92:63","statements":[{"nativeSrc":"456:26:63","nodeType":"YulAssignment","src":"456:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:63","nodeType":"YulIdentifier","src":"468:9:63"},{"kind":"number","nativeSrc":"479:2:63","nodeType":"YulLiteral","src":"479:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:63","nodeType":"YulIdentifier","src":"464:3:63"},"nativeSrc":"464:18:63","nodeType":"YulFunctionCall","src":"464:18:63"},"variableNames":[{"name":"tail","nativeSrc":"456:4:63","nodeType":"YulIdentifier","src":"456:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:63","nodeType":"YulIdentifier","src":"498:9:63"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:63","nodeType":"YulIdentifier","src":"523:6:63"}],"functionName":{"name":"iszero","nativeSrc":"516:6:63","nodeType":"YulIdentifier","src":"516:6:63"},"nativeSrc":"516:14:63","nodeType":"YulFunctionCall","src":"516:14:63"}],"functionName":{"name":"iszero","nativeSrc":"509:6:63","nodeType":"YulIdentifier","src":"509:6:63"},"nativeSrc":"509:22:63","nodeType":"YulFunctionCall","src":"509:22:63"}],"functionName":{"name":"mstore","nativeSrc":"491:6:63","nodeType":"YulIdentifier","src":"491:6:63"},"nativeSrc":"491:41:63","nodeType":"YulFunctionCall","src":"491:41:63"},"nativeSrc":"491:41:63","nodeType":"YulExpressionStatement","src":"491:41:63"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:63","nodeType":"YulTypedName","src":"415:9:63","type":""},{"name":"value0","nativeSrc":"426:6:63","nodeType":"YulTypedName","src":"426:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:63","nodeType":"YulTypedName","src":"437:4:63","type":""}],"src":"351:187:63"},{"body":{"nativeSrc":"592:147:63","nodeType":"YulBlock","src":"592:147:63","statements":[{"nativeSrc":"602:29:63","nodeType":"YulAssignment","src":"602:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"624:6:63","nodeType":"YulIdentifier","src":"624:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"611:12:63","nodeType":"YulIdentifier","src":"611:12:63"},"nativeSrc":"611:20:63","nodeType":"YulFunctionCall","src":"611:20:63"},"variableNames":[{"name":"value","nativeSrc":"602:5:63","nodeType":"YulIdentifier","src":"602:5:63"}]},{"body":{"nativeSrc":"717:16:63","nodeType":"YulBlock","src":"717:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"726:1:63","nodeType":"YulLiteral","src":"726:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"729:1:63","nodeType":"YulLiteral","src":"729:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"719:6:63","nodeType":"YulIdentifier","src":"719:6:63"},"nativeSrc":"719:12:63","nodeType":"YulFunctionCall","src":"719:12:63"},"nativeSrc":"719:12:63","nodeType":"YulExpressionStatement","src":"719:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"653:5:63","nodeType":"YulIdentifier","src":"653:5:63"},{"arguments":[{"name":"value","nativeSrc":"664:5:63","nodeType":"YulIdentifier","src":"664:5:63"},{"kind":"number","nativeSrc":"671:42:63","nodeType":"YulLiteral","src":"671:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"660:3:63","nodeType":"YulIdentifier","src":"660:3:63"},"nativeSrc":"660:54:63","nodeType":"YulFunctionCall","src":"660:54:63"}],"functionName":{"name":"eq","nativeSrc":"650:2:63","nodeType":"YulIdentifier","src":"650:2:63"},"nativeSrc":"650:65:63","nodeType":"YulFunctionCall","src":"650:65:63"}],"functionName":{"name":"iszero","nativeSrc":"643:6:63","nodeType":"YulIdentifier","src":"643:6:63"},"nativeSrc":"643:73:63","nodeType":"YulFunctionCall","src":"643:73:63"},"nativeSrc":"640:93:63","nodeType":"YulIf","src":"640:93:63"}]},"name":"abi_decode_address","nativeSrc":"543:196:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"571:6:63","nodeType":"YulTypedName","src":"571:6:63","type":""}],"returnVariables":[{"name":"value","nativeSrc":"582:5:63","nodeType":"YulTypedName","src":"582:5:63","type":""}],"src":"543:196:63"},{"body":{"nativeSrc":"900:711:63","nodeType":"YulBlock","src":"900:711:63","statements":[{"body":{"nativeSrc":"947:16:63","nodeType":"YulBlock","src":"947:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"956:1:63","nodeType":"YulLiteral","src":"956:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"959:1:63","nodeType":"YulLiteral","src":"959:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"949:6:63","nodeType":"YulIdentifier","src":"949:6:63"},"nativeSrc":"949:12:63","nodeType":"YulFunctionCall","src":"949:12:63"},"nativeSrc":"949:12:63","nodeType":"YulExpressionStatement","src":"949:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"921:7:63","nodeType":"YulIdentifier","src":"921:7:63"},{"name":"headStart","nativeSrc":"930:9:63","nodeType":"YulIdentifier","src":"930:9:63"}],"functionName":{"name":"sub","nativeSrc":"917:3:63","nodeType":"YulIdentifier","src":"917:3:63"},"nativeSrc":"917:23:63","nodeType":"YulFunctionCall","src":"917:23:63"},{"kind":"number","nativeSrc":"942:3:63","nodeType":"YulLiteral","src":"942:3:63","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"913:3:63","nodeType":"YulIdentifier","src":"913:3:63"},"nativeSrc":"913:33:63","nodeType":"YulFunctionCall","src":"913:33:63"},"nativeSrc":"910:53:63","nodeType":"YulIf","src":"910:53:63"},{"nativeSrc":"972:39:63","nodeType":"YulAssignment","src":"972:39:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1001:9:63","nodeType":"YulIdentifier","src":"1001:9:63"}],"functionName":{"name":"abi_decode_address","nativeSrc":"982:18:63","nodeType":"YulIdentifier","src":"982:18:63"},"nativeSrc":"982:29:63","nodeType":"YulFunctionCall","src":"982:29:63"},"variableNames":[{"name":"value0","nativeSrc":"972:6:63","nodeType":"YulIdentifier","src":"972:6:63"}]},{"nativeSrc":"1020:42:63","nodeType":"YulAssignment","src":"1020:42:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1047:9:63","nodeType":"YulIdentifier","src":"1047:9:63"},{"kind":"number","nativeSrc":"1058:2:63","nodeType":"YulLiteral","src":"1058:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1043:3:63","nodeType":"YulIdentifier","src":"1043:3:63"},"nativeSrc":"1043:18:63","nodeType":"YulFunctionCall","src":"1043:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"1030:12:63","nodeType":"YulIdentifier","src":"1030:12:63"},"nativeSrc":"1030:32:63","nodeType":"YulFunctionCall","src":"1030:32:63"},"variableNames":[{"name":"value1","nativeSrc":"1020:6:63","nodeType":"YulIdentifier","src":"1020:6:63"}]},{"nativeSrc":"1071:14:63","nodeType":"YulVariableDeclaration","src":"1071:14:63","value":{"kind":"number","nativeSrc":"1084:1:63","nodeType":"YulLiteral","src":"1084:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1075:5:63","nodeType":"YulTypedName","src":"1075:5:63","type":""}]},{"nativeSrc":"1094:41:63","nodeType":"YulAssignment","src":"1094:41:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1120:9:63","nodeType":"YulIdentifier","src":"1120:9:63"},{"kind":"number","nativeSrc":"1131:2:63","nodeType":"YulLiteral","src":"1131:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1116:3:63","nodeType":"YulIdentifier","src":"1116:3:63"},"nativeSrc":"1116:18:63","nodeType":"YulFunctionCall","src":"1116:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"1103:12:63","nodeType":"YulIdentifier","src":"1103:12:63"},"nativeSrc":"1103:32:63","nodeType":"YulFunctionCall","src":"1103:32:63"},"variableNames":[{"name":"value","nativeSrc":"1094:5:63","nodeType":"YulIdentifier","src":"1094:5:63"}]},{"nativeSrc":"1144:15:63","nodeType":"YulAssignment","src":"1144:15:63","value":{"name":"value","nativeSrc":"1154:5:63","nodeType":"YulIdentifier","src":"1154:5:63"},"variableNames":[{"name":"value2","nativeSrc":"1144:6:63","nodeType":"YulIdentifier","src":"1144:6:63"}]},{"nativeSrc":"1168:46:63","nodeType":"YulVariableDeclaration","src":"1168:46:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1199:9:63","nodeType":"YulIdentifier","src":"1199:9:63"},{"kind":"number","nativeSrc":"1210:2:63","nodeType":"YulLiteral","src":"1210:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1195:3:63","nodeType":"YulIdentifier","src":"1195:3:63"},"nativeSrc":"1195:18:63","nodeType":"YulFunctionCall","src":"1195:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"1182:12:63","nodeType":"YulIdentifier","src":"1182:12:63"},"nativeSrc":"1182:32:63","nodeType":"YulFunctionCall","src":"1182:32:63"},"variables":[{"name":"offset","nativeSrc":"1172:6:63","nodeType":"YulTypedName","src":"1172:6:63","type":""}]},{"body":{"nativeSrc":"1257:16:63","nodeType":"YulBlock","src":"1257:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1266:1:63","nodeType":"YulLiteral","src":"1266:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1269:1:63","nodeType":"YulLiteral","src":"1269:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1259:6:63","nodeType":"YulIdentifier","src":"1259:6:63"},"nativeSrc":"1259:12:63","nodeType":"YulFunctionCall","src":"1259:12:63"},"nativeSrc":"1259:12:63","nodeType":"YulExpressionStatement","src":"1259:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1229:6:63","nodeType":"YulIdentifier","src":"1229:6:63"},{"kind":"number","nativeSrc":"1237:18:63","nodeType":"YulLiteral","src":"1237:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1226:2:63","nodeType":"YulIdentifier","src":"1226:2:63"},"nativeSrc":"1226:30:63","nodeType":"YulFunctionCall","src":"1226:30:63"},"nativeSrc":"1223:50:63","nodeType":"YulIf","src":"1223:50:63"},{"nativeSrc":"1282:32:63","nodeType":"YulVariableDeclaration","src":"1282:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1296:9:63","nodeType":"YulIdentifier","src":"1296:9:63"},{"name":"offset","nativeSrc":"1307:6:63","nodeType":"YulIdentifier","src":"1307:6:63"}],"functionName":{"name":"add","nativeSrc":"1292:3:63","nodeType":"YulIdentifier","src":"1292:3:63"},"nativeSrc":"1292:22:63","nodeType":"YulFunctionCall","src":"1292:22:63"},"variables":[{"name":"_1","nativeSrc":"1286:2:63","nodeType":"YulTypedName","src":"1286:2:63","type":""}]},{"body":{"nativeSrc":"1362:16:63","nodeType":"YulBlock","src":"1362:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1371:1:63","nodeType":"YulLiteral","src":"1371:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1374:1:63","nodeType":"YulLiteral","src":"1374:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1364:6:63","nodeType":"YulIdentifier","src":"1364:6:63"},"nativeSrc":"1364:12:63","nodeType":"YulFunctionCall","src":"1364:12:63"},"nativeSrc":"1364:12:63","nodeType":"YulExpressionStatement","src":"1364:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1341:2:63","nodeType":"YulIdentifier","src":"1341:2:63"},{"kind":"number","nativeSrc":"1345:4:63","nodeType":"YulLiteral","src":"1345:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1337:3:63","nodeType":"YulIdentifier","src":"1337:3:63"},"nativeSrc":"1337:13:63","nodeType":"YulFunctionCall","src":"1337:13:63"},{"name":"dataEnd","nativeSrc":"1352:7:63","nodeType":"YulIdentifier","src":"1352:7:63"}],"functionName":{"name":"slt","nativeSrc":"1333:3:63","nodeType":"YulIdentifier","src":"1333:3:63"},"nativeSrc":"1333:27:63","nodeType":"YulFunctionCall","src":"1333:27:63"}],"functionName":{"name":"iszero","nativeSrc":"1326:6:63","nodeType":"YulIdentifier","src":"1326:6:63"},"nativeSrc":"1326:35:63","nodeType":"YulFunctionCall","src":"1326:35:63"},"nativeSrc":"1323:55:63","nodeType":"YulIf","src":"1323:55:63"},{"nativeSrc":"1387:30:63","nodeType":"YulVariableDeclaration","src":"1387:30:63","value":{"arguments":[{"name":"_1","nativeSrc":"1414:2:63","nodeType":"YulIdentifier","src":"1414:2:63"}],"functionName":{"name":"calldataload","nativeSrc":"1401:12:63","nodeType":"YulIdentifier","src":"1401:12:63"},"nativeSrc":"1401:16:63","nodeType":"YulFunctionCall","src":"1401:16:63"},"variables":[{"name":"length","nativeSrc":"1391:6:63","nodeType":"YulTypedName","src":"1391:6:63","type":""}]},{"body":{"nativeSrc":"1460:16:63","nodeType":"YulBlock","src":"1460:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1469:1:63","nodeType":"YulLiteral","src":"1469:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1472:1:63","nodeType":"YulLiteral","src":"1472:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1462:6:63","nodeType":"YulIdentifier","src":"1462:6:63"},"nativeSrc":"1462:12:63","nodeType":"YulFunctionCall","src":"1462:12:63"},"nativeSrc":"1462:12:63","nodeType":"YulExpressionStatement","src":"1462:12:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1432:6:63","nodeType":"YulIdentifier","src":"1432:6:63"},{"kind":"number","nativeSrc":"1440:18:63","nodeType":"YulLiteral","src":"1440:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1429:2:63","nodeType":"YulIdentifier","src":"1429:2:63"},"nativeSrc":"1429:30:63","nodeType":"YulFunctionCall","src":"1429:30:63"},"nativeSrc":"1426:50:63","nodeType":"YulIf","src":"1426:50:63"},{"body":{"nativeSrc":"1534:16:63","nodeType":"YulBlock","src":"1534:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1543:1:63","nodeType":"YulLiteral","src":"1543:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1546:1:63","nodeType":"YulLiteral","src":"1546:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1536:6:63","nodeType":"YulIdentifier","src":"1536:6:63"},"nativeSrc":"1536:12:63","nodeType":"YulFunctionCall","src":"1536:12:63"},"nativeSrc":"1536:12:63","nodeType":"YulExpressionStatement","src":"1536:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1499:2:63","nodeType":"YulIdentifier","src":"1499:2:63"},{"arguments":[{"kind":"number","nativeSrc":"1507:1:63","nodeType":"YulLiteral","src":"1507:1:63","type":"","value":"5"},{"name":"length","nativeSrc":"1510:6:63","nodeType":"YulIdentifier","src":"1510:6:63"}],"functionName":{"name":"shl","nativeSrc":"1503:3:63","nodeType":"YulIdentifier","src":"1503:3:63"},"nativeSrc":"1503:14:63","nodeType":"YulFunctionCall","src":"1503:14:63"}],"functionName":{"name":"add","nativeSrc":"1495:3:63","nodeType":"YulIdentifier","src":"1495:3:63"},"nativeSrc":"1495:23:63","nodeType":"YulFunctionCall","src":"1495:23:63"},{"kind":"number","nativeSrc":"1520:2:63","nodeType":"YulLiteral","src":"1520:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1491:3:63","nodeType":"YulIdentifier","src":"1491:3:63"},"nativeSrc":"1491:32:63","nodeType":"YulFunctionCall","src":"1491:32:63"},{"name":"dataEnd","nativeSrc":"1525:7:63","nodeType":"YulIdentifier","src":"1525:7:63"}],"functionName":{"name":"gt","nativeSrc":"1488:2:63","nodeType":"YulIdentifier","src":"1488:2:63"},"nativeSrc":"1488:45:63","nodeType":"YulFunctionCall","src":"1488:45:63"},"nativeSrc":"1485:65:63","nodeType":"YulIf","src":"1485:65:63"},{"nativeSrc":"1559:21:63","nodeType":"YulAssignment","src":"1559:21:63","value":{"arguments":[{"name":"_1","nativeSrc":"1573:2:63","nodeType":"YulIdentifier","src":"1573:2:63"},{"kind":"number","nativeSrc":"1577:2:63","nodeType":"YulLiteral","src":"1577:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1569:3:63","nodeType":"YulIdentifier","src":"1569:3:63"},"nativeSrc":"1569:11:63","nodeType":"YulFunctionCall","src":"1569:11:63"},"variableNames":[{"name":"value3","nativeSrc":"1559:6:63","nodeType":"YulIdentifier","src":"1559:6:63"}]},{"nativeSrc":"1589:16:63","nodeType":"YulAssignment","src":"1589:16:63","value":{"name":"length","nativeSrc":"1599:6:63","nodeType":"YulIdentifier","src":"1599:6:63"},"variableNames":[{"name":"value4","nativeSrc":"1589:6:63","nodeType":"YulIdentifier","src":"1589:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"744:867:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"834:9:63","nodeType":"YulTypedName","src":"834:9:63","type":""},{"name":"dataEnd","nativeSrc":"845:7:63","nodeType":"YulTypedName","src":"845:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"857:6:63","nodeType":"YulTypedName","src":"857:6:63","type":""},{"name":"value1","nativeSrc":"865:6:63","nodeType":"YulTypedName","src":"865:6:63","type":""},{"name":"value2","nativeSrc":"873:6:63","nodeType":"YulTypedName","src":"873:6:63","type":""},{"name":"value3","nativeSrc":"881:6:63","nodeType":"YulTypedName","src":"881:6:63","type":""},{"name":"value4","nativeSrc":"889:6:63","nodeType":"YulTypedName","src":"889:6:63","type":""}],"src":"744:867:63"},{"body":{"nativeSrc":"1686:116:63","nodeType":"YulBlock","src":"1686:116:63","statements":[{"body":{"nativeSrc":"1732:16:63","nodeType":"YulBlock","src":"1732:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1741:1:63","nodeType":"YulLiteral","src":"1741:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1744:1:63","nodeType":"YulLiteral","src":"1744:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1734:6:63","nodeType":"YulIdentifier","src":"1734:6:63"},"nativeSrc":"1734:12:63","nodeType":"YulFunctionCall","src":"1734:12:63"},"nativeSrc":"1734:12:63","nodeType":"YulExpressionStatement","src":"1734:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1707:7:63","nodeType":"YulIdentifier","src":"1707:7:63"},{"name":"headStart","nativeSrc":"1716:9:63","nodeType":"YulIdentifier","src":"1716:9:63"}],"functionName":{"name":"sub","nativeSrc":"1703:3:63","nodeType":"YulIdentifier","src":"1703:3:63"},"nativeSrc":"1703:23:63","nodeType":"YulFunctionCall","src":"1703:23:63"},{"kind":"number","nativeSrc":"1728:2:63","nodeType":"YulLiteral","src":"1728:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1699:3:63","nodeType":"YulIdentifier","src":"1699:3:63"},"nativeSrc":"1699:32:63","nodeType":"YulFunctionCall","src":"1699:32:63"},"nativeSrc":"1696:52:63","nodeType":"YulIf","src":"1696:52:63"},{"nativeSrc":"1757:39:63","nodeType":"YulAssignment","src":"1757:39:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1786:9:63","nodeType":"YulIdentifier","src":"1786:9:63"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1767:18:63","nodeType":"YulIdentifier","src":"1767:18:63"},"nativeSrc":"1767:29:63","nodeType":"YulFunctionCall","src":"1767:29:63"},"variableNames":[{"name":"value0","nativeSrc":"1757:6:63","nodeType":"YulIdentifier","src":"1757:6:63"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1616:186:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1652:9:63","nodeType":"YulTypedName","src":"1652:9:63","type":""},{"name":"dataEnd","nativeSrc":"1663:7:63","nodeType":"YulTypedName","src":"1663:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1675:6:63","nodeType":"YulTypedName","src":"1675:6:63","type":""}],"src":"1616:186:63"},{"body":{"nativeSrc":"1877:156:63","nodeType":"YulBlock","src":"1877:156:63","statements":[{"body":{"nativeSrc":"1923:16:63","nodeType":"YulBlock","src":"1923:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1932:1:63","nodeType":"YulLiteral","src":"1932:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1935:1:63","nodeType":"YulLiteral","src":"1935:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1925:6:63","nodeType":"YulIdentifier","src":"1925:6:63"},"nativeSrc":"1925:12:63","nodeType":"YulFunctionCall","src":"1925:12:63"},"nativeSrc":"1925:12:63","nodeType":"YulExpressionStatement","src":"1925:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1898:7:63","nodeType":"YulIdentifier","src":"1898:7:63"},{"name":"headStart","nativeSrc":"1907:9:63","nodeType":"YulIdentifier","src":"1907:9:63"}],"functionName":{"name":"sub","nativeSrc":"1894:3:63","nodeType":"YulIdentifier","src":"1894:3:63"},"nativeSrc":"1894:23:63","nodeType":"YulFunctionCall","src":"1894:23:63"},{"kind":"number","nativeSrc":"1919:2:63","nodeType":"YulLiteral","src":"1919:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1890:3:63","nodeType":"YulIdentifier","src":"1890:3:63"},"nativeSrc":"1890:32:63","nodeType":"YulFunctionCall","src":"1890:32:63"},"nativeSrc":"1887:52:63","nodeType":"YulIf","src":"1887:52:63"},{"nativeSrc":"1948:14:63","nodeType":"YulVariableDeclaration","src":"1948:14:63","value":{"kind":"number","nativeSrc":"1961:1:63","nodeType":"YulLiteral","src":"1961:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1952:5:63","nodeType":"YulTypedName","src":"1952:5:63","type":""}]},{"nativeSrc":"1971:32:63","nodeType":"YulAssignment","src":"1971:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1993:9:63","nodeType":"YulIdentifier","src":"1993:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"1980:12:63","nodeType":"YulIdentifier","src":"1980:12:63"},"nativeSrc":"1980:23:63","nodeType":"YulFunctionCall","src":"1980:23:63"},"variableNames":[{"name":"value","nativeSrc":"1971:5:63","nodeType":"YulIdentifier","src":"1971:5:63"}]},{"nativeSrc":"2012:15:63","nodeType":"YulAssignment","src":"2012:15:63","value":{"name":"value","nativeSrc":"2022:5:63","nodeType":"YulIdentifier","src":"2022:5:63"},"variableNames":[{"name":"value0","nativeSrc":"2012:6:63","nodeType":"YulIdentifier","src":"2012:6:63"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"1807:226:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1843:9:63","nodeType":"YulTypedName","src":"1843:9:63","type":""},{"name":"dataEnd","nativeSrc":"1854:7:63","nodeType":"YulTypedName","src":"1854:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1866:6:63","nodeType":"YulTypedName","src":"1866:6:63","type":""}],"src":"1807:226:63"},{"body":{"nativeSrc":"2137:89:63","nodeType":"YulBlock","src":"2137:89:63","statements":[{"nativeSrc":"2147:26:63","nodeType":"YulAssignment","src":"2147:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2159:9:63","nodeType":"YulIdentifier","src":"2159:9:63"},{"kind":"number","nativeSrc":"2170:2:63","nodeType":"YulLiteral","src":"2170:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2155:3:63","nodeType":"YulIdentifier","src":"2155:3:63"},"nativeSrc":"2155:18:63","nodeType":"YulFunctionCall","src":"2155:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2147:4:63","nodeType":"YulIdentifier","src":"2147:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2189:9:63","nodeType":"YulIdentifier","src":"2189:9:63"},{"arguments":[{"name":"value0","nativeSrc":"2204:6:63","nodeType":"YulIdentifier","src":"2204:6:63"},{"kind":"number","nativeSrc":"2212:6:63","nodeType":"YulLiteral","src":"2212:6:63","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"2200:3:63","nodeType":"YulIdentifier","src":"2200:3:63"},"nativeSrc":"2200:19:63","nodeType":"YulFunctionCall","src":"2200:19:63"}],"functionName":{"name":"mstore","nativeSrc":"2182:6:63","nodeType":"YulIdentifier","src":"2182:6:63"},"nativeSrc":"2182:38:63","nodeType":"YulFunctionCall","src":"2182:38:63"},"nativeSrc":"2182:38:63","nodeType":"YulExpressionStatement","src":"2182:38:63"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nativeSrc":"2038:188:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2106:9:63","nodeType":"YulTypedName","src":"2106:9:63","type":""},{"name":"value0","nativeSrc":"2117:6:63","nodeType":"YulTypedName","src":"2117:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2128:4:63","nodeType":"YulTypedName","src":"2128:4:63","type":""}],"src":"2038:188:63"},{"body":{"nativeSrc":"2332:125:63","nodeType":"YulBlock","src":"2332:125:63","statements":[{"nativeSrc":"2342:26:63","nodeType":"YulAssignment","src":"2342:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2354:9:63","nodeType":"YulIdentifier","src":"2354:9:63"},{"kind":"number","nativeSrc":"2365:2:63","nodeType":"YulLiteral","src":"2365:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2350:3:63","nodeType":"YulIdentifier","src":"2350:3:63"},"nativeSrc":"2350:18:63","nodeType":"YulFunctionCall","src":"2350:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2342:4:63","nodeType":"YulIdentifier","src":"2342:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2384:9:63","nodeType":"YulIdentifier","src":"2384:9:63"},{"arguments":[{"name":"value0","nativeSrc":"2399:6:63","nodeType":"YulIdentifier","src":"2399:6:63"},{"kind":"number","nativeSrc":"2407:42:63","nodeType":"YulLiteral","src":"2407:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2395:3:63","nodeType":"YulIdentifier","src":"2395:3:63"},"nativeSrc":"2395:55:63","nodeType":"YulFunctionCall","src":"2395:55:63"}],"functionName":{"name":"mstore","nativeSrc":"2377:6:63","nodeType":"YulIdentifier","src":"2377:6:63"},"nativeSrc":"2377:74:63","nodeType":"YulFunctionCall","src":"2377:74:63"},"nativeSrc":"2377:74:63","nodeType":"YulExpressionStatement","src":"2377:74:63"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2231:226:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2301:9:63","nodeType":"YulTypedName","src":"2301:9:63","type":""},{"name":"value0","nativeSrc":"2312:6:63","nodeType":"YulTypedName","src":"2312:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2323:4:63","nodeType":"YulTypedName","src":"2323:4:63","type":""}],"src":"2231:226:63"},{"body":{"nativeSrc":"2563:76:63","nodeType":"YulBlock","src":"2563:76:63","statements":[{"nativeSrc":"2573:26:63","nodeType":"YulAssignment","src":"2573:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2585:9:63","nodeType":"YulIdentifier","src":"2585:9:63"},{"kind":"number","nativeSrc":"2596:2:63","nodeType":"YulLiteral","src":"2596:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2581:3:63","nodeType":"YulIdentifier","src":"2581:3:63"},"nativeSrc":"2581:18:63","nodeType":"YulFunctionCall","src":"2581:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2573:4:63","nodeType":"YulIdentifier","src":"2573:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2615:9:63","nodeType":"YulIdentifier","src":"2615:9:63"},{"name":"value0","nativeSrc":"2626:6:63","nodeType":"YulIdentifier","src":"2626:6:63"}],"functionName":{"name":"mstore","nativeSrc":"2608:6:63","nodeType":"YulIdentifier","src":"2608:6:63"},"nativeSrc":"2608:25:63","nodeType":"YulFunctionCall","src":"2608:25:63"},"nativeSrc":"2608:25:63","nodeType":"YulExpressionStatement","src":"2608:25:63"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"2462:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2532:9:63","nodeType":"YulTypedName","src":"2532:9:63","type":""},{"name":"value0","nativeSrc":"2543:6:63","nodeType":"YulTypedName","src":"2543:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2554:4:63","nodeType":"YulTypedName","src":"2554:4:63","type":""}],"src":"2462:177:63"},{"body":{"nativeSrc":"2745:76:63","nodeType":"YulBlock","src":"2745:76:63","statements":[{"nativeSrc":"2755:26:63","nodeType":"YulAssignment","src":"2755:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2767:9:63","nodeType":"YulIdentifier","src":"2767:9:63"},{"kind":"number","nativeSrc":"2778:2:63","nodeType":"YulLiteral","src":"2778:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2763:3:63","nodeType":"YulIdentifier","src":"2763:3:63"},"nativeSrc":"2763:18:63","nodeType":"YulFunctionCall","src":"2763:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2755:4:63","nodeType":"YulIdentifier","src":"2755:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2797:9:63","nodeType":"YulIdentifier","src":"2797:9:63"},{"name":"value0","nativeSrc":"2808:6:63","nodeType":"YulIdentifier","src":"2808:6:63"}],"functionName":{"name":"mstore","nativeSrc":"2790:6:63","nodeType":"YulIdentifier","src":"2790:6:63"},"nativeSrc":"2790:25:63","nodeType":"YulFunctionCall","src":"2790:25:63"},"nativeSrc":"2790:25:63","nodeType":"YulExpressionStatement","src":"2790:25:63"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2644:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2714:9:63","nodeType":"YulTypedName","src":"2714:9:63","type":""},{"name":"value0","nativeSrc":"2725:6:63","nodeType":"YulTypedName","src":"2725:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2736:4:63","nodeType":"YulTypedName","src":"2736:4:63","type":""}],"src":"2644:177:63"},{"body":{"nativeSrc":"2999:302:63","nodeType":"YulBlock","src":"2999:302:63","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3016:3:63","nodeType":"YulIdentifier","src":"3016:3:63"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3029:2:63","nodeType":"YulLiteral","src":"3029:2:63","type":"","value":"96"},{"name":"value0","nativeSrc":"3033:6:63","nodeType":"YulIdentifier","src":"3033:6:63"}],"functionName":{"name":"shl","nativeSrc":"3025:3:63","nodeType":"YulIdentifier","src":"3025:3:63"},"nativeSrc":"3025:15:63","nodeType":"YulFunctionCall","src":"3025:15:63"},{"kind":"number","nativeSrc":"3042:66:63","nodeType":"YulLiteral","src":"3042:66:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"3021:3:63","nodeType":"YulIdentifier","src":"3021:3:63"},"nativeSrc":"3021:88:63","nodeType":"YulFunctionCall","src":"3021:88:63"}],"functionName":{"name":"mstore","nativeSrc":"3009:6:63","nodeType":"YulIdentifier","src":"3009:6:63"},"nativeSrc":"3009:101:63","nodeType":"YulFunctionCall","src":"3009:101:63"},"nativeSrc":"3009:101:63","nodeType":"YulExpressionStatement","src":"3009:101:63"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3130:3:63","nodeType":"YulIdentifier","src":"3130:3:63"},{"kind":"number","nativeSrc":"3135:2:63","nodeType":"YulLiteral","src":"3135:2:63","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"3126:3:63","nodeType":"YulIdentifier","src":"3126:3:63"},"nativeSrc":"3126:12:63","nodeType":"YulFunctionCall","src":"3126:12:63"},{"name":"value1","nativeSrc":"3140:6:63","nodeType":"YulIdentifier","src":"3140:6:63"}],"functionName":{"name":"mstore","nativeSrc":"3119:6:63","nodeType":"YulIdentifier","src":"3119:6:63"},"nativeSrc":"3119:28:63","nodeType":"YulFunctionCall","src":"3119:28:63"},"nativeSrc":"3119:28:63","nodeType":"YulExpressionStatement","src":"3119:28:63"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3167:3:63","nodeType":"YulIdentifier","src":"3167:3:63"},{"kind":"number","nativeSrc":"3172:2:63","nodeType":"YulLiteral","src":"3172:2:63","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"3163:3:63","nodeType":"YulIdentifier","src":"3163:3:63"},"nativeSrc":"3163:12:63","nodeType":"YulFunctionCall","src":"3163:12:63"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3185:3:63","nodeType":"YulLiteral","src":"3185:3:63","type":"","value":"240"},{"name":"value2","nativeSrc":"3190:6:63","nodeType":"YulIdentifier","src":"3190:6:63"}],"functionName":{"name":"shl","nativeSrc":"3181:3:63","nodeType":"YulIdentifier","src":"3181:3:63"},"nativeSrc":"3181:16:63","nodeType":"YulFunctionCall","src":"3181:16:63"},{"kind":"number","nativeSrc":"3199:66:63","nodeType":"YulLiteral","src":"3199:66:63","type":"","value":"0xffff000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"3177:3:63","nodeType":"YulIdentifier","src":"3177:3:63"},"nativeSrc":"3177:89:63","nodeType":"YulFunctionCall","src":"3177:89:63"}],"functionName":{"name":"mstore","nativeSrc":"3156:6:63","nodeType":"YulIdentifier","src":"3156:6:63"},"nativeSrc":"3156:111:63","nodeType":"YulFunctionCall","src":"3156:111:63"},"nativeSrc":"3156:111:63","nodeType":"YulExpressionStatement","src":"3156:111:63"},{"nativeSrc":"3276:19:63","nodeType":"YulAssignment","src":"3276:19:63","value":{"arguments":[{"name":"pos","nativeSrc":"3287:3:63","nodeType":"YulIdentifier","src":"3287:3:63"},{"kind":"number","nativeSrc":"3292:2:63","nodeType":"YulLiteral","src":"3292:2:63","type":"","value":"54"}],"functionName":{"name":"add","nativeSrc":"3283:3:63","nodeType":"YulIdentifier","src":"3283:3:63"},"nativeSrc":"3283:12:63","nodeType":"YulFunctionCall","src":"3283:12:63"},"variableNames":[{"name":"end","nativeSrc":"3276:3:63","nodeType":"YulIdentifier","src":"3276:3:63"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__nonPadded_inplace_fromStack_reversed","nativeSrc":"2826:475:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2959:3:63","nodeType":"YulTypedName","src":"2959:3:63","type":""},{"name":"value2","nativeSrc":"2964:6:63","nodeType":"YulTypedName","src":"2964:6:63","type":""},{"name":"value1","nativeSrc":"2972:6:63","nodeType":"YulTypedName","src":"2972:6:63","type":""},{"name":"value0","nativeSrc":"2980:6:63","nodeType":"YulTypedName","src":"2980:6:63","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2991:3:63","nodeType":"YulTypedName","src":"2991:3:63","type":""}],"src":"2826:475:63"},{"body":{"nativeSrc":"3461:224:63","nodeType":"YulBlock","src":"3461:224:63","statements":[{"nativeSrc":"3471:26:63","nodeType":"YulAssignment","src":"3471:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"3483:9:63","nodeType":"YulIdentifier","src":"3483:9:63"},{"kind":"number","nativeSrc":"3494:2:63","nodeType":"YulLiteral","src":"3494:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3479:3:63","nodeType":"YulIdentifier","src":"3479:3:63"},"nativeSrc":"3479:18:63","nodeType":"YulFunctionCall","src":"3479:18:63"},"variableNames":[{"name":"tail","nativeSrc":"3471:4:63","nodeType":"YulIdentifier","src":"3471:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3513:9:63","nodeType":"YulIdentifier","src":"3513:9:63"},{"arguments":[{"name":"value0","nativeSrc":"3528:6:63","nodeType":"YulIdentifier","src":"3528:6:63"},{"kind":"number","nativeSrc":"3536:42:63","nodeType":"YulLiteral","src":"3536:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3524:3:63","nodeType":"YulIdentifier","src":"3524:3:63"},"nativeSrc":"3524:55:63","nodeType":"YulFunctionCall","src":"3524:55:63"}],"functionName":{"name":"mstore","nativeSrc":"3506:6:63","nodeType":"YulIdentifier","src":"3506:6:63"},"nativeSrc":"3506:74:63","nodeType":"YulFunctionCall","src":"3506:74:63"},"nativeSrc":"3506:74:63","nodeType":"YulExpressionStatement","src":"3506:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3600:9:63","nodeType":"YulIdentifier","src":"3600:9:63"},{"kind":"number","nativeSrc":"3611:2:63","nodeType":"YulLiteral","src":"3611:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3596:3:63","nodeType":"YulIdentifier","src":"3596:3:63"},"nativeSrc":"3596:18:63","nodeType":"YulFunctionCall","src":"3596:18:63"},{"name":"value1","nativeSrc":"3616:6:63","nodeType":"YulIdentifier","src":"3616:6:63"}],"functionName":{"name":"mstore","nativeSrc":"3589:6:63","nodeType":"YulIdentifier","src":"3589:6:63"},"nativeSrc":"3589:34:63","nodeType":"YulFunctionCall","src":"3589:34:63"},"nativeSrc":"3589:34:63","nodeType":"YulExpressionStatement","src":"3589:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3643:9:63","nodeType":"YulIdentifier","src":"3643:9:63"},{"kind":"number","nativeSrc":"3654:2:63","nodeType":"YulLiteral","src":"3654:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3639:3:63","nodeType":"YulIdentifier","src":"3639:3:63"},"nativeSrc":"3639:18:63","nodeType":"YulFunctionCall","src":"3639:18:63"},{"arguments":[{"name":"value2","nativeSrc":"3663:6:63","nodeType":"YulIdentifier","src":"3663:6:63"},{"kind":"number","nativeSrc":"3671:6:63","nodeType":"YulLiteral","src":"3671:6:63","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3659:3:63","nodeType":"YulIdentifier","src":"3659:3:63"},"nativeSrc":"3659:19:63","nodeType":"YulFunctionCall","src":"3659:19:63"}],"functionName":{"name":"mstore","nativeSrc":"3632:6:63","nodeType":"YulIdentifier","src":"3632:6:63"},"nativeSrc":"3632:47:63","nodeType":"YulFunctionCall","src":"3632:47:63"},"nativeSrc":"3632:47:63","nodeType":"YulExpressionStatement","src":"3632:47:63"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__fromStack_reversed","nativeSrc":"3306:379:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3414:9:63","nodeType":"YulTypedName","src":"3414:9:63","type":""},{"name":"value2","nativeSrc":"3425:6:63","nodeType":"YulTypedName","src":"3425:6:63","type":""},{"name":"value1","nativeSrc":"3433:6:63","nodeType":"YulTypedName","src":"3433:6:63","type":""},{"name":"value0","nativeSrc":"3441:6:63","nodeType":"YulTypedName","src":"3441:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3452:4:63","nodeType":"YulTypedName","src":"3452:4:63","type":""}],"src":"3306:379:63"},{"body":{"nativeSrc":"3847:211:63","nodeType":"YulBlock","src":"3847:211:63","statements":[{"nativeSrc":"3857:26:63","nodeType":"YulAssignment","src":"3857:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"3869:9:63","nodeType":"YulIdentifier","src":"3869:9:63"},{"kind":"number","nativeSrc":"3880:2:63","nodeType":"YulLiteral","src":"3880:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3865:3:63","nodeType":"YulIdentifier","src":"3865:3:63"},"nativeSrc":"3865:18:63","nodeType":"YulFunctionCall","src":"3865:18:63"},"variableNames":[{"name":"tail","nativeSrc":"3857:4:63","nodeType":"YulIdentifier","src":"3857:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3899:9:63","nodeType":"YulIdentifier","src":"3899:9:63"},{"arguments":[{"name":"value0","nativeSrc":"3914:6:63","nodeType":"YulIdentifier","src":"3914:6:63"},{"kind":"number","nativeSrc":"3922:42:63","nodeType":"YulLiteral","src":"3922:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3910:3:63","nodeType":"YulIdentifier","src":"3910:3:63"},"nativeSrc":"3910:55:63","nodeType":"YulFunctionCall","src":"3910:55:63"}],"functionName":{"name":"mstore","nativeSrc":"3892:6:63","nodeType":"YulIdentifier","src":"3892:6:63"},"nativeSrc":"3892:74:63","nodeType":"YulFunctionCall","src":"3892:74:63"},"nativeSrc":"3892:74:63","nodeType":"YulExpressionStatement","src":"3892:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3986:9:63","nodeType":"YulIdentifier","src":"3986:9:63"},{"kind":"number","nativeSrc":"3997:2:63","nodeType":"YulLiteral","src":"3997:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3982:3:63","nodeType":"YulIdentifier","src":"3982:3:63"},"nativeSrc":"3982:18:63","nodeType":"YulFunctionCall","src":"3982:18:63"},{"name":"value1","nativeSrc":"4002:6:63","nodeType":"YulIdentifier","src":"4002:6:63"}],"functionName":{"name":"mstore","nativeSrc":"3975:6:63","nodeType":"YulIdentifier","src":"3975:6:63"},"nativeSrc":"3975:34:63","nodeType":"YulFunctionCall","src":"3975:34:63"},"nativeSrc":"3975:34:63","nodeType":"YulExpressionStatement","src":"3975:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4029:9:63","nodeType":"YulIdentifier","src":"4029:9:63"},{"kind":"number","nativeSrc":"4040:2:63","nodeType":"YulLiteral","src":"4040:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4025:3:63","nodeType":"YulIdentifier","src":"4025:3:63"},"nativeSrc":"4025:18:63","nodeType":"YulFunctionCall","src":"4025:18:63"},{"name":"value2","nativeSrc":"4045:6:63","nodeType":"YulIdentifier","src":"4045:6:63"}],"functionName":{"name":"mstore","nativeSrc":"4018:6:63","nodeType":"YulIdentifier","src":"4018:6:63"},"nativeSrc":"4018:34:63","nodeType":"YulFunctionCall","src":"4018:34:63"},"nativeSrc":"4018:34:63","nodeType":"YulExpressionStatement","src":"4018:34:63"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"3690:368:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3800:9:63","nodeType":"YulTypedName","src":"3800:9:63","type":""},{"name":"value2","nativeSrc":"3811:6:63","nodeType":"YulTypedName","src":"3811:6:63","type":""},{"name":"value1","nativeSrc":"3819:6:63","nodeType":"YulTypedName","src":"3819:6:63","type":""},{"name":"value0","nativeSrc":"3827:6:63","nodeType":"YulTypedName","src":"3827:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3838:4:63","nodeType":"YulTypedName","src":"3838:4:63","type":""}],"src":"3690:368:63"},{"body":{"nativeSrc":"4266:697:63","nodeType":"YulBlock","src":"4266:697:63","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4283:9:63","nodeType":"YulIdentifier","src":"4283:9:63"},{"arguments":[{"name":"value0","nativeSrc":"4298:6:63","nodeType":"YulIdentifier","src":"4298:6:63"},{"kind":"number","nativeSrc":"4306:42:63","nodeType":"YulLiteral","src":"4306:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4294:3:63","nodeType":"YulIdentifier","src":"4294:3:63"},"nativeSrc":"4294:55:63","nodeType":"YulFunctionCall","src":"4294:55:63"}],"functionName":{"name":"mstore","nativeSrc":"4276:6:63","nodeType":"YulIdentifier","src":"4276:6:63"},"nativeSrc":"4276:74:63","nodeType":"YulFunctionCall","src":"4276:74:63"},"nativeSrc":"4276:74:63","nodeType":"YulExpressionStatement","src":"4276:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4370:9:63","nodeType":"YulIdentifier","src":"4370:9:63"},{"kind":"number","nativeSrc":"4381:2:63","nodeType":"YulLiteral","src":"4381:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4366:3:63","nodeType":"YulIdentifier","src":"4366:3:63"},"nativeSrc":"4366:18:63","nodeType":"YulFunctionCall","src":"4366:18:63"},{"arguments":[{"name":"value1","nativeSrc":"4390:6:63","nodeType":"YulIdentifier","src":"4390:6:63"},{"kind":"number","nativeSrc":"4398:42:63","nodeType":"YulLiteral","src":"4398:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4386:3:63","nodeType":"YulIdentifier","src":"4386:3:63"},"nativeSrc":"4386:55:63","nodeType":"YulFunctionCall","src":"4386:55:63"}],"functionName":{"name":"mstore","nativeSrc":"4359:6:63","nodeType":"YulIdentifier","src":"4359:6:63"},"nativeSrc":"4359:83:63","nodeType":"YulFunctionCall","src":"4359:83:63"},"nativeSrc":"4359:83:63","nodeType":"YulExpressionStatement","src":"4359:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4462:9:63","nodeType":"YulIdentifier","src":"4462:9:63"},{"kind":"number","nativeSrc":"4473:2:63","nodeType":"YulLiteral","src":"4473:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4458:3:63","nodeType":"YulIdentifier","src":"4458:3:63"},"nativeSrc":"4458:18:63","nodeType":"YulFunctionCall","src":"4458:18:63"},{"name":"value2","nativeSrc":"4478:6:63","nodeType":"YulIdentifier","src":"4478:6:63"}],"functionName":{"name":"mstore","nativeSrc":"4451:6:63","nodeType":"YulIdentifier","src":"4451:6:63"},"nativeSrc":"4451:34:63","nodeType":"YulFunctionCall","src":"4451:34:63"},"nativeSrc":"4451:34:63","nodeType":"YulExpressionStatement","src":"4451:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4505:9:63","nodeType":"YulIdentifier","src":"4505:9:63"},{"kind":"number","nativeSrc":"4516:2:63","nodeType":"YulLiteral","src":"4516:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4501:3:63","nodeType":"YulIdentifier","src":"4501:3:63"},"nativeSrc":"4501:18:63","nodeType":"YulFunctionCall","src":"4501:18:63"},{"kind":"number","nativeSrc":"4521:3:63","nodeType":"YulLiteral","src":"4521:3:63","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"4494:6:63","nodeType":"YulIdentifier","src":"4494:6:63"},"nativeSrc":"4494:31:63","nodeType":"YulFunctionCall","src":"4494:31:63"},"nativeSrc":"4494:31:63","nodeType":"YulExpressionStatement","src":"4494:31:63"},{"nativeSrc":"4534:27:63","nodeType":"YulVariableDeclaration","src":"4534:27:63","value":{"arguments":[{"name":"value3","nativeSrc":"4554:6:63","nodeType":"YulIdentifier","src":"4554:6:63"}],"functionName":{"name":"mload","nativeSrc":"4548:5:63","nodeType":"YulIdentifier","src":"4548:5:63"},"nativeSrc":"4548:13:63","nodeType":"YulFunctionCall","src":"4548:13:63"},"variables":[{"name":"length","nativeSrc":"4538:6:63","nodeType":"YulTypedName","src":"4538:6:63","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4581:9:63","nodeType":"YulIdentifier","src":"4581:9:63"},{"kind":"number","nativeSrc":"4592:3:63","nodeType":"YulLiteral","src":"4592:3:63","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4577:3:63","nodeType":"YulIdentifier","src":"4577:3:63"},"nativeSrc":"4577:19:63","nodeType":"YulFunctionCall","src":"4577:19:63"},{"name":"length","nativeSrc":"4598:6:63","nodeType":"YulIdentifier","src":"4598:6:63"}],"functionName":{"name":"mstore","nativeSrc":"4570:6:63","nodeType":"YulIdentifier","src":"4570:6:63"},"nativeSrc":"4570:35:63","nodeType":"YulFunctionCall","src":"4570:35:63"},"nativeSrc":"4570:35:63","nodeType":"YulExpressionStatement","src":"4570:35:63"},{"nativeSrc":"4614:10:63","nodeType":"YulVariableDeclaration","src":"4614:10:63","value":{"kind":"number","nativeSrc":"4623:1:63","nodeType":"YulLiteral","src":"4623:1:63","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4618:1:63","nodeType":"YulTypedName","src":"4618:1:63","type":""}]},{"body":{"nativeSrc":"4683:91:63","nodeType":"YulBlock","src":"4683:91:63","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4712:9:63","nodeType":"YulIdentifier","src":"4712:9:63"},{"name":"i","nativeSrc":"4723:1:63","nodeType":"YulIdentifier","src":"4723:1:63"}],"functionName":{"name":"add","nativeSrc":"4708:3:63","nodeType":"YulIdentifier","src":"4708:3:63"},"nativeSrc":"4708:17:63","nodeType":"YulFunctionCall","src":"4708:17:63"},{"kind":"number","nativeSrc":"4727:3:63","nodeType":"YulLiteral","src":"4727:3:63","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4704:3:63","nodeType":"YulIdentifier","src":"4704:3:63"},"nativeSrc":"4704:27:63","nodeType":"YulFunctionCall","src":"4704:27:63"},{"arguments":[{"arguments":[{"arguments":[{"name":"value3","nativeSrc":"4747:6:63","nodeType":"YulIdentifier","src":"4747:6:63"},{"name":"i","nativeSrc":"4755:1:63","nodeType":"YulIdentifier","src":"4755:1:63"}],"functionName":{"name":"add","nativeSrc":"4743:3:63","nodeType":"YulIdentifier","src":"4743:3:63"},"nativeSrc":"4743:14:63","nodeType":"YulFunctionCall","src":"4743:14:63"},{"kind":"number","nativeSrc":"4759:2:63","nodeType":"YulLiteral","src":"4759:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4739:3:63","nodeType":"YulIdentifier","src":"4739:3:63"},"nativeSrc":"4739:23:63","nodeType":"YulFunctionCall","src":"4739:23:63"}],"functionName":{"name":"mload","nativeSrc":"4733:5:63","nodeType":"YulIdentifier","src":"4733:5:63"},"nativeSrc":"4733:30:63","nodeType":"YulFunctionCall","src":"4733:30:63"}],"functionName":{"name":"mstore","nativeSrc":"4697:6:63","nodeType":"YulIdentifier","src":"4697:6:63"},"nativeSrc":"4697:67:63","nodeType":"YulFunctionCall","src":"4697:67:63"},"nativeSrc":"4697:67:63","nodeType":"YulExpressionStatement","src":"4697:67:63"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4644:1:63","nodeType":"YulIdentifier","src":"4644:1:63"},{"name":"length","nativeSrc":"4647:6:63","nodeType":"YulIdentifier","src":"4647:6:63"}],"functionName":{"name":"lt","nativeSrc":"4641:2:63","nodeType":"YulIdentifier","src":"4641:2:63"},"nativeSrc":"4641:13:63","nodeType":"YulFunctionCall","src":"4641:13:63"},"nativeSrc":"4633:141:63","nodeType":"YulForLoop","post":{"nativeSrc":"4655:19:63","nodeType":"YulBlock","src":"4655:19:63","statements":[{"nativeSrc":"4657:15:63","nodeType":"YulAssignment","src":"4657:15:63","value":{"arguments":[{"name":"i","nativeSrc":"4666:1:63","nodeType":"YulIdentifier","src":"4666:1:63"},{"kind":"number","nativeSrc":"4669:2:63","nodeType":"YulLiteral","src":"4669:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4662:3:63","nodeType":"YulIdentifier","src":"4662:3:63"},"nativeSrc":"4662:10:63","nodeType":"YulFunctionCall","src":"4662:10:63"},"variableNames":[{"name":"i","nativeSrc":"4657:1:63","nodeType":"YulIdentifier","src":"4657:1:63"}]}]},"pre":{"nativeSrc":"4637:3:63","nodeType":"YulBlock","src":"4637:3:63","statements":[]},"src":"4633:141:63"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4798:9:63","nodeType":"YulIdentifier","src":"4798:9:63"},{"name":"length","nativeSrc":"4809:6:63","nodeType":"YulIdentifier","src":"4809:6:63"}],"functionName":{"name":"add","nativeSrc":"4794:3:63","nodeType":"YulIdentifier","src":"4794:3:63"},"nativeSrc":"4794:22:63","nodeType":"YulFunctionCall","src":"4794:22:63"},{"kind":"number","nativeSrc":"4818:3:63","nodeType":"YulLiteral","src":"4818:3:63","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4790:3:63","nodeType":"YulIdentifier","src":"4790:3:63"},"nativeSrc":"4790:32:63","nodeType":"YulFunctionCall","src":"4790:32:63"},{"kind":"number","nativeSrc":"4824:1:63","nodeType":"YulLiteral","src":"4824:1:63","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"4783:6:63","nodeType":"YulIdentifier","src":"4783:6:63"},"nativeSrc":"4783:43:63","nodeType":"YulFunctionCall","src":"4783:43:63"},"nativeSrc":"4783:43:63","nodeType":"YulExpressionStatement","src":"4783:43:63"},{"nativeSrc":"4835:122:63","nodeType":"YulAssignment","src":"4835:122:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4851:9:63","nodeType":"YulIdentifier","src":"4851:9:63"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"4870:6:63","nodeType":"YulIdentifier","src":"4870:6:63"},{"kind":"number","nativeSrc":"4878:2:63","nodeType":"YulLiteral","src":"4878:2:63","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"4866:3:63","nodeType":"YulIdentifier","src":"4866:3:63"},"nativeSrc":"4866:15:63","nodeType":"YulFunctionCall","src":"4866:15:63"},{"kind":"number","nativeSrc":"4883:66:63","nodeType":"YulLiteral","src":"4883:66:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"4862:3:63","nodeType":"YulIdentifier","src":"4862:3:63"},"nativeSrc":"4862:88:63","nodeType":"YulFunctionCall","src":"4862:88:63"}],"functionName":{"name":"add","nativeSrc":"4847:3:63","nodeType":"YulIdentifier","src":"4847:3:63"},"nativeSrc":"4847:104:63","nodeType":"YulFunctionCall","src":"4847:104:63"},{"kind":"number","nativeSrc":"4953:3:63","nodeType":"YulLiteral","src":"4953:3:63","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4843:3:63","nodeType":"YulIdentifier","src":"4843:3:63"},"nativeSrc":"4843:114:63","nodeType":"YulFunctionCall","src":"4843:114:63"},"variableNames":[{"name":"tail","nativeSrc":"4835:4:63","nodeType":"YulIdentifier","src":"4835:4:63"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"4063:900:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4211:9:63","nodeType":"YulTypedName","src":"4211:9:63","type":""},{"name":"value3","nativeSrc":"4222:6:63","nodeType":"YulTypedName","src":"4222:6:63","type":""},{"name":"value2","nativeSrc":"4230:6:63","nodeType":"YulTypedName","src":"4230:6:63","type":""},{"name":"value1","nativeSrc":"4238:6:63","nodeType":"YulTypedName","src":"4238:6:63","type":""},{"name":"value0","nativeSrc":"4246:6:63","nodeType":"YulTypedName","src":"4246:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4257:4:63","nodeType":"YulTypedName","src":"4257:4:63","type":""}],"src":"4063:900:63"},{"body":{"nativeSrc":"5046:199:63","nodeType":"YulBlock","src":"5046:199:63","statements":[{"body":{"nativeSrc":"5092:16:63","nodeType":"YulBlock","src":"5092:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5101:1:63","nodeType":"YulLiteral","src":"5101:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5104:1:63","nodeType":"YulLiteral","src":"5104:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5094:6:63","nodeType":"YulIdentifier","src":"5094:6:63"},"nativeSrc":"5094:12:63","nodeType":"YulFunctionCall","src":"5094:12:63"},"nativeSrc":"5094:12:63","nodeType":"YulExpressionStatement","src":"5094:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5067:7:63","nodeType":"YulIdentifier","src":"5067:7:63"},{"name":"headStart","nativeSrc":"5076:9:63","nodeType":"YulIdentifier","src":"5076:9:63"}],"functionName":{"name":"sub","nativeSrc":"5063:3:63","nodeType":"YulIdentifier","src":"5063:3:63"},"nativeSrc":"5063:23:63","nodeType":"YulFunctionCall","src":"5063:23:63"},{"kind":"number","nativeSrc":"5088:2:63","nodeType":"YulLiteral","src":"5088:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5059:3:63","nodeType":"YulIdentifier","src":"5059:3:63"},"nativeSrc":"5059:32:63","nodeType":"YulFunctionCall","src":"5059:32:63"},"nativeSrc":"5056:52:63","nodeType":"YulIf","src":"5056:52:63"},{"nativeSrc":"5117:29:63","nodeType":"YulVariableDeclaration","src":"5117:29:63","value":{"arguments":[{"name":"headStart","nativeSrc":"5136:9:63","nodeType":"YulIdentifier","src":"5136:9:63"}],"functionName":{"name":"mload","nativeSrc":"5130:5:63","nodeType":"YulIdentifier","src":"5130:5:63"},"nativeSrc":"5130:16:63","nodeType":"YulFunctionCall","src":"5130:16:63"},"variables":[{"name":"value","nativeSrc":"5121:5:63","nodeType":"YulTypedName","src":"5121:5:63","type":""}]},{"body":{"nativeSrc":"5199:16:63","nodeType":"YulBlock","src":"5199:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5208:1:63","nodeType":"YulLiteral","src":"5208:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5211:1:63","nodeType":"YulLiteral","src":"5211:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5201:6:63","nodeType":"YulIdentifier","src":"5201:6:63"},"nativeSrc":"5201:12:63","nodeType":"YulFunctionCall","src":"5201:12:63"},"nativeSrc":"5201:12:63","nodeType":"YulExpressionStatement","src":"5201:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5168:5:63","nodeType":"YulIdentifier","src":"5168:5:63"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5189:5:63","nodeType":"YulIdentifier","src":"5189:5:63"}],"functionName":{"name":"iszero","nativeSrc":"5182:6:63","nodeType":"YulIdentifier","src":"5182:6:63"},"nativeSrc":"5182:13:63","nodeType":"YulFunctionCall","src":"5182:13:63"}],"functionName":{"name":"iszero","nativeSrc":"5175:6:63","nodeType":"YulIdentifier","src":"5175:6:63"},"nativeSrc":"5175:21:63","nodeType":"YulFunctionCall","src":"5175:21:63"}],"functionName":{"name":"eq","nativeSrc":"5165:2:63","nodeType":"YulIdentifier","src":"5165:2:63"},"nativeSrc":"5165:32:63","nodeType":"YulFunctionCall","src":"5165:32:63"}],"functionName":{"name":"iszero","nativeSrc":"5158:6:63","nodeType":"YulIdentifier","src":"5158:6:63"},"nativeSrc":"5158:40:63","nodeType":"YulFunctionCall","src":"5158:40:63"},"nativeSrc":"5155:60:63","nodeType":"YulIf","src":"5155:60:63"},{"nativeSrc":"5224:15:63","nodeType":"YulAssignment","src":"5224:15:63","value":{"name":"value","nativeSrc":"5234:5:63","nodeType":"YulIdentifier","src":"5234:5:63"},"variableNames":[{"name":"value0","nativeSrc":"5224:6:63","nodeType":"YulIdentifier","src":"5224:6:63"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"4968:277:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5012:9:63","nodeType":"YulTypedName","src":"5012:9:63","type":""},{"name":"dataEnd","nativeSrc":"5023:7:63","nodeType":"YulTypedName","src":"5023:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5035:6:63","nodeType":"YulTypedName","src":"5035:6:63","type":""}],"src":"4968:277:63"},{"body":{"nativeSrc":"5407:260:63","nodeType":"YulBlock","src":"5407:260:63","statements":[{"nativeSrc":"5417:26:63","nodeType":"YulAssignment","src":"5417:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"5429:9:63","nodeType":"YulIdentifier","src":"5429:9:63"},{"kind":"number","nativeSrc":"5440:2:63","nodeType":"YulLiteral","src":"5440:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5425:3:63","nodeType":"YulIdentifier","src":"5425:3:63"},"nativeSrc":"5425:18:63","nodeType":"YulFunctionCall","src":"5425:18:63"},"variableNames":[{"name":"tail","nativeSrc":"5417:4:63","nodeType":"YulIdentifier","src":"5417:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5459:9:63","nodeType":"YulIdentifier","src":"5459:9:63"},{"arguments":[{"name":"value0","nativeSrc":"5474:6:63","nodeType":"YulIdentifier","src":"5474:6:63"},{"kind":"number","nativeSrc":"5482:42:63","nodeType":"YulLiteral","src":"5482:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5470:3:63","nodeType":"YulIdentifier","src":"5470:3:63"},"nativeSrc":"5470:55:63","nodeType":"YulFunctionCall","src":"5470:55:63"}],"functionName":{"name":"mstore","nativeSrc":"5452:6:63","nodeType":"YulIdentifier","src":"5452:6:63"},"nativeSrc":"5452:74:63","nodeType":"YulFunctionCall","src":"5452:74:63"},"nativeSrc":"5452:74:63","nodeType":"YulExpressionStatement","src":"5452:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5546:9:63","nodeType":"YulIdentifier","src":"5546:9:63"},{"kind":"number","nativeSrc":"5557:2:63","nodeType":"YulLiteral","src":"5557:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5542:3:63","nodeType":"YulIdentifier","src":"5542:3:63"},"nativeSrc":"5542:18:63","nodeType":"YulFunctionCall","src":"5542:18:63"},{"arguments":[{"name":"value1","nativeSrc":"5566:6:63","nodeType":"YulIdentifier","src":"5566:6:63"},{"kind":"number","nativeSrc":"5574:42:63","nodeType":"YulLiteral","src":"5574:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5562:3:63","nodeType":"YulIdentifier","src":"5562:3:63"},"nativeSrc":"5562:55:63","nodeType":"YulFunctionCall","src":"5562:55:63"}],"functionName":{"name":"mstore","nativeSrc":"5535:6:63","nodeType":"YulIdentifier","src":"5535:6:63"},"nativeSrc":"5535:83:63","nodeType":"YulFunctionCall","src":"5535:83:63"},"nativeSrc":"5535:83:63","nodeType":"YulExpressionStatement","src":"5535:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5638:9:63","nodeType":"YulIdentifier","src":"5638:9:63"},{"kind":"number","nativeSrc":"5649:2:63","nodeType":"YulLiteral","src":"5649:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5634:3:63","nodeType":"YulIdentifier","src":"5634:3:63"},"nativeSrc":"5634:18:63","nodeType":"YulFunctionCall","src":"5634:18:63"},{"name":"value2","nativeSrc":"5654:6:63","nodeType":"YulIdentifier","src":"5654:6:63"}],"functionName":{"name":"mstore","nativeSrc":"5627:6:63","nodeType":"YulIdentifier","src":"5627:6:63"},"nativeSrc":"5627:34:63","nodeType":"YulFunctionCall","src":"5627:34:63"},"nativeSrc":"5627:34:63","nodeType":"YulExpressionStatement","src":"5627:34:63"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"5250:417:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5360:9:63","nodeType":"YulTypedName","src":"5360:9:63","type":""},{"name":"value2","nativeSrc":"5371:6:63","nodeType":"YulTypedName","src":"5371:6:63","type":""},{"name":"value1","nativeSrc":"5379:6:63","nodeType":"YulTypedName","src":"5379:6:63","type":""},{"name":"value0","nativeSrc":"5387:6:63","nodeType":"YulTypedName","src":"5387:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5398:4:63","nodeType":"YulTypedName","src":"5398:4:63","type":""}],"src":"5250:417:63"},{"body":{"nativeSrc":"5704:152:63","nodeType":"YulBlock","src":"5704:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5721:1:63","nodeType":"YulLiteral","src":"5721:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5724:77:63","nodeType":"YulLiteral","src":"5724:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5714:6:63","nodeType":"YulIdentifier","src":"5714:6:63"},"nativeSrc":"5714:88:63","nodeType":"YulFunctionCall","src":"5714:88:63"},"nativeSrc":"5714:88:63","nodeType":"YulExpressionStatement","src":"5714:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5818:1:63","nodeType":"YulLiteral","src":"5818:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"5821:4:63","nodeType":"YulLiteral","src":"5821:4:63","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5811:6:63","nodeType":"YulIdentifier","src":"5811:6:63"},"nativeSrc":"5811:15:63","nodeType":"YulFunctionCall","src":"5811:15:63"},"nativeSrc":"5811:15:63","nodeType":"YulExpressionStatement","src":"5811:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5842:1:63","nodeType":"YulLiteral","src":"5842:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5845:4:63","nodeType":"YulLiteral","src":"5845:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5835:6:63","nodeType":"YulIdentifier","src":"5835:6:63"},"nativeSrc":"5835:15:63","nodeType":"YulFunctionCall","src":"5835:15:63"},"nativeSrc":"5835:15:63","nodeType":"YulExpressionStatement","src":"5835:15:63"}]},"name":"panic_error_0x11","nativeSrc":"5672:184:63","nodeType":"YulFunctionDefinition","src":"5672:184:63"},{"body":{"nativeSrc":"5908:108:63","nodeType":"YulBlock","src":"5908:108:63","statements":[{"nativeSrc":"5918:42:63","nodeType":"YulAssignment","src":"5918:42:63","value":{"arguments":[{"arguments":[{"name":"x","nativeSrc":"5933:1:63","nodeType":"YulIdentifier","src":"5933:1:63"},{"kind":"number","nativeSrc":"5936:6:63","nodeType":"YulLiteral","src":"5936:6:63","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"5929:3:63","nodeType":"YulIdentifier","src":"5929:3:63"},"nativeSrc":"5929:14:63","nodeType":"YulFunctionCall","src":"5929:14:63"},{"arguments":[{"name":"y","nativeSrc":"5949:1:63","nodeType":"YulIdentifier","src":"5949:1:63"},{"kind":"number","nativeSrc":"5952:6:63","nodeType":"YulLiteral","src":"5952:6:63","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"5945:3:63","nodeType":"YulIdentifier","src":"5945:3:63"},"nativeSrc":"5945:14:63","nodeType":"YulFunctionCall","src":"5945:14:63"}],"functionName":{"name":"add","nativeSrc":"5925:3:63","nodeType":"YulIdentifier","src":"5925:3:63"},"nativeSrc":"5925:35:63","nodeType":"YulFunctionCall","src":"5925:35:63"},"variableNames":[{"name":"sum","nativeSrc":"5918:3:63","nodeType":"YulIdentifier","src":"5918:3:63"}]},{"body":{"nativeSrc":"5988:22:63","nodeType":"YulBlock","src":"5988:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5990:16:63","nodeType":"YulIdentifier","src":"5990:16:63"},"nativeSrc":"5990:18:63","nodeType":"YulFunctionCall","src":"5990:18:63"},"nativeSrc":"5990:18:63","nodeType":"YulExpressionStatement","src":"5990:18:63"}]},"condition":{"arguments":[{"name":"sum","nativeSrc":"5975:3:63","nodeType":"YulIdentifier","src":"5975:3:63"},{"kind":"number","nativeSrc":"5980:6:63","nodeType":"YulLiteral","src":"5980:6:63","type":"","value":"0xffff"}],"functionName":{"name":"gt","nativeSrc":"5972:2:63","nodeType":"YulIdentifier","src":"5972:2:63"},"nativeSrc":"5972:15:63","nodeType":"YulFunctionCall","src":"5972:15:63"},"nativeSrc":"5969:41:63","nodeType":"YulIf","src":"5969:41:63"}]},"name":"checked_add_t_uint16","nativeSrc":"5861:155:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5891:1:63","nodeType":"YulTypedName","src":"5891:1:63","type":""},{"name":"y","nativeSrc":"5894:1:63","nodeType":"YulTypedName","src":"5894:1:63","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"5900:3:63","nodeType":"YulTypedName","src":"5900:3:63","type":""}],"src":"5861:155:63"},{"body":{"nativeSrc":"6070:79:63","nodeType":"YulBlock","src":"6070:79:63","statements":[{"nativeSrc":"6080:17:63","nodeType":"YulAssignment","src":"6080:17:63","value":{"arguments":[{"name":"x","nativeSrc":"6092:1:63","nodeType":"YulIdentifier","src":"6092:1:63"},{"name":"y","nativeSrc":"6095:1:63","nodeType":"YulIdentifier","src":"6095:1:63"}],"functionName":{"name":"sub","nativeSrc":"6088:3:63","nodeType":"YulIdentifier","src":"6088:3:63"},"nativeSrc":"6088:9:63","nodeType":"YulFunctionCall","src":"6088:9:63"},"variableNames":[{"name":"diff","nativeSrc":"6080:4:63","nodeType":"YulIdentifier","src":"6080:4:63"}]},{"body":{"nativeSrc":"6121:22:63","nodeType":"YulBlock","src":"6121:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6123:16:63","nodeType":"YulIdentifier","src":"6123:16:63"},"nativeSrc":"6123:18:63","nodeType":"YulFunctionCall","src":"6123:18:63"},"nativeSrc":"6123:18:63","nodeType":"YulExpressionStatement","src":"6123:18:63"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6112:4:63","nodeType":"YulIdentifier","src":"6112:4:63"},{"name":"x","nativeSrc":"6118:1:63","nodeType":"YulIdentifier","src":"6118:1:63"}],"functionName":{"name":"gt","nativeSrc":"6109:2:63","nodeType":"YulIdentifier","src":"6109:2:63"},"nativeSrc":"6109:11:63","nodeType":"YulFunctionCall","src":"6109:11:63"},"nativeSrc":"6106:37:63","nodeType":"YulIf","src":"6106:37:63"}]},"name":"checked_sub_t_uint256","nativeSrc":"6021:128:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6052:1:63","nodeType":"YulTypedName","src":"6052:1:63","type":""},{"name":"y","nativeSrc":"6055:1:63","nodeType":"YulTypedName","src":"6055:1:63","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6061:4:63","nodeType":"YulTypedName","src":"6061:4:63","type":""}],"src":"6021:128:63"},{"body":{"nativeSrc":"6186:152:63","nodeType":"YulBlock","src":"6186:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6203:1:63","nodeType":"YulLiteral","src":"6203:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6206:77:63","nodeType":"YulLiteral","src":"6206:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6196:6:63","nodeType":"YulIdentifier","src":"6196:6:63"},"nativeSrc":"6196:88:63","nodeType":"YulFunctionCall","src":"6196:88:63"},"nativeSrc":"6196:88:63","nodeType":"YulExpressionStatement","src":"6196:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6300:1:63","nodeType":"YulLiteral","src":"6300:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"6303:4:63","nodeType":"YulLiteral","src":"6303:4:63","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6293:6:63","nodeType":"YulIdentifier","src":"6293:6:63"},"nativeSrc":"6293:15:63","nodeType":"YulFunctionCall","src":"6293:15:63"},"nativeSrc":"6293:15:63","nodeType":"YulExpressionStatement","src":"6293:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6324:1:63","nodeType":"YulLiteral","src":"6324:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6327:4:63","nodeType":"YulLiteral","src":"6327:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6317:6:63","nodeType":"YulIdentifier","src":"6317:6:63"},"nativeSrc":"6317:15:63","nodeType":"YulFunctionCall","src":"6317:15:63"},"nativeSrc":"6317:15:63","nodeType":"YulExpressionStatement","src":"6317:15:63"}]},"name":"panic_error_0x32","nativeSrc":"6154:184:63","nodeType":"YulFunctionDefinition","src":"6154:184:63"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_1, 32)\n        value4 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), and(shl(240, value2), 0xffff000000000000000000000000000000000000000000000000000000000000))\n        end := add(pos, 54)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint16__to_t_address_t_uint256_t_uint16__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        let length := mload(value3)\n        mstore(add(headStart, 128), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(add(headStart, i), 160), mload(add(add(value3, i), 32)))\n        }\n        mstore(add(add(headStart, length), 160), 0)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 160)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint16(x, y) -> sum\n    {\n        sum := add(and(x, 0xffff), and(y, 0xffff))\n        if gt(sum, 0xffff) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"5458":[{"length":32,"start":548},{"length":32,"start":1430}],"5461":[{"length":32,"start":622},{"length":32,"start":1477}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100f55760003560e01c80638456cb5911610097578063b1bb0c6c11610066578063b1bb0c6c1461021f578063cc3c0f0614610246578063da19ddfb14610269578063f2fde38b1461029057600080fd5b80638456cb59146101a45780638488bb4e146101ac5780638da5cb5b146101f1578063affed0e0146101f957600080fd5b80635c975abb116100d35780635c975abb1461013f5780636b8f9c43146101475780637505fee11461015a5780637cb647591461019157600080fd5b806301ffc9a7146100fa5780633f4ba83a14610122578063422a8b551461012c575b600080fd5b61010d610108366004610dfd565b6102a3565b60405190151581526020015b60405180910390f35b61012a6102bd565b005b61012a61013a366004610e68565b6102e2565b61010d610705565b61012a610155366004610f01565b61071e565b61017e610168366004610f1c565b60006020819052908152604090205461ffff1681565b60405161ffff9091168152602001610119565b61012a61019f366004610f1c565b6107e3565b61012a610902565b6002546101cc9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610119565b6101cc61091b565b60025461017e9074010000000000000000000000000000000000000000900461ffff1681565b6101cc7f000000000000000000000000000000000000000000000000000000000000000081565b61010d610254366004610f1c565b60016020526000908152604090205460ff1681565b6101cc7f000000000000000000000000000000000000000000000000000000000000000081565b61012a61029e366004610f01565b610942565b60006102b7826102b1610959565b90610987565b92915050565b6102d0335b6102ca610a61565b90610a8f565b6102e06102db610afe565b610b2c565b565b83600003610324576040517f27ab1ee2000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b61033461032f610afe565b610b87565b60008381526020819052604081205461ffff1690819003610384576040517f1d3bbc3f0000000000000000000000000000000000000000000000000000000081526004810185905260240161031b565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088901b166020820152603481018690527fffff00000000000000000000000000000000000000000000000000000000000060f083901b166054820152600090605601604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120905061043084848784610bc3565b61048f576040517facfb186500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881660048201526024810187905261ffff8316604482015260640161031b565b60008181526001602052604090205460ff16156104fe576040517f685fced700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88166004820152602481018790526044810186905260640161031b565b600081815260016020818152604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909317909255600254825173ffffffffffffffffffffffffffffffffffffffff8c81168285015284518083039094018452818501948590527fb88d4fde0000000000000000000000000000000000000000000000000000000090945290831693927f0000000000000000000000000000000000000000000000000000000000000000169163b88d4fde916105ef9186917f0000000000000000000000000000000000000000000000000000000000000000918e91604401610f35565b6020604051808303816000875af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190610fe2565b905080610692576040517fbf182be800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301528a1660248201526044810189905260640161031b565b8873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16887f96a0bda4b1c283cf8feeb70ec1fc51c1f830f0548dc9f740b8d885079be891068b6040516106f291815260200190565b60405180910390a4505050505050505050565b6000610719610712610afe565b5460ff1690565b905090565b73ffffffffffffffffffffffffffffffffffffffff811661076b576040517fc41cbee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610774336102c2565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f85590600090a250565b600081900361081e576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610827336102c2565b6002546000906108549074010000000000000000000000000000000000000000900461ffff166001611033565b60008381526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff8516908117909155600280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000830217905590519293509184917fbb00584cc5258c6d02504d390995c03261d52c617c9171c16cb9edb00f672f3a91a35050565b61090b336102c2565b6102e0610916610afe565b610bdb565b6000610719610928610a61565b5473ffffffffffffffffffffffffffffffffffffffff1690565b610956338261094f610a61565b9190610c39565b50565b6000806102b760017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61104d565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109d7575060006102b7565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a28575060016102b7565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806102b760017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61104d565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610afa576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161031b565b5050565b6000806102b760017f0186a05f63b1553398ad5ea3233c0ce68b8c9eecc47717f123c5c2b42fbd6d9f61104d565b610b3581610d4e565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150565b805460ff1615610956576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082610bd1868685610d89565b1495945050505050565b610be481610b87565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610ca6576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d485783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b805460ff16610956576040517f6cd6020100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815b84811015610dc257610db882878784818110610dac57610dac611060565b90506020020135610dcb565b9150600101610d8e565b50949350505050565b6000818310610de7576000828152602084905260409020610df6565b60008381526020839052604090205b9392505050565b600060208284031215610e0f57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610df657600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610e6357600080fd5b919050565b600080600080600060808688031215610e8057600080fd5b610e8986610e3f565b94506020860135935060408601359250606086013567ffffffffffffffff811115610eb357600080fd5b8601601f81018813610ec457600080fd5b803567ffffffffffffffff811115610edb57600080fd5b8860208260051b8401011115610ef057600080fd5b959894975092955050506020019190565b600060208284031215610f1357600080fd5b610df682610e3f565b600060208284031215610f2e57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152826040820152608060608201526000825180608084015260005b81811015610fa157602081860181015160a0868401015201610f84565b50600060a0828501015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505095945050505050565b600060208284031215610ff457600080fd5b81518015158114610df657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61ffff81811683821601908111156102b7576102b7611004565b818103818111156102b7576102b7611004565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a38206df15181e77868d951b70ea57d206d1480dbaafd8a9a97c43f891f0739964736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB1BB0C6C GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB1BB0C6C EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0xDA19DDFB EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x7505FEE1 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x422A8B55 EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x2BD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12A PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x705 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xF01 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH2 0x17E PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0xF1C JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x902 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1CC SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x91B JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x17E SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1CC PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x254 CALLDATASIZE PUSH1 0x4 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1CC PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0xF01 JUMP JUMPDEST PUSH2 0x942 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7 DUP3 PUSH2 0x2B1 PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x987 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D0 CALLER JUMPDEST PUSH2 0x2CA PUSH2 0xA61 JUMP JUMPDEST SWAP1 PUSH2 0xA8F JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0xAFE JUMP JUMPDEST PUSH2 0xB2C JUMP JUMPDEST JUMP JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0x324 JUMPI PUSH1 0x40 MLOAD PUSH32 0x27AB1EE200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0xAFE JUMP JUMPDEST PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xFFFF AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1D3BBC3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x31B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP9 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP7 SWAP1 MSTORE PUSH32 0xFFFF000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP4 SWAP1 SHL AND PUSH1 0x54 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x56 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x430 DUP5 DUP5 DUP8 DUP5 PUSH2 0xBC3 JUMP JUMPDEST PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD PUSH32 0xACFB186500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0xFFFF DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x31B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x685FCED700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x31B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 SLOAD DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP2 AND DUP3 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE DUP2 DUP6 ADD SWAP5 DUP6 SWAP1 MSTORE PUSH32 0xB88D4FDE00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 MSTORE SWAP1 DUP4 AND SWAP4 SWAP3 PUSH32 0x0 AND SWAP2 PUSH4 0xB88D4FDE SWAP2 PUSH2 0x5EF SWAP2 DUP7 SWAP2 PUSH32 0x0 SWAP2 DUP15 SWAP2 PUSH1 0x44 ADD PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x60E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x632 SWAP2 SWAP1 PUSH2 0xFE2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x692 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBF182BE800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x31B JUMP JUMPDEST DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH32 0x96A0BDA4B1C283CF8FEEB70EC1FC51C1F830F0548DC9F740B8D885079BE89106 DUP12 PUSH1 0x40 MLOAD PUSH2 0x6F2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x719 PUSH2 0x712 PUSH2 0xAFE JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x76B JUMPI PUSH1 0x40 MLOAD PUSH32 0xC41CBEE200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x774 CALLER PUSH2 0x2C2 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SUB PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH32 0x504570E300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x827 CALLER PUSH2 0x2C2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x854 SWAP1 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH2 0xFFFF AND PUSH1 0x1 PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0xFFFF DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 DUP4 MUL OR SWAP1 SSTORE SWAP1 MLOAD SWAP3 SWAP4 POP SWAP2 DUP5 SWAP2 PUSH32 0xBB00584CC5258C6D02504D390995C03261D52C617C9171C16CB9EDB00F672F3A SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH2 0x90B CALLER PUSH2 0x2C2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x916 PUSH2 0xAFE JUMP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x719 PUSH2 0x928 PUSH2 0xA61 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x956 CALLER DUP3 PUSH2 0x94F PUSH2 0xA61 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B7 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x104D JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9D7 JUMPI POP PUSH1 0x0 PUSH2 0x2B7 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA28 JUMPI POP PUSH1 0x1 PUSH2 0x2B7 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B7 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x104D JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x31B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B7 PUSH1 0x1 PUSH32 0x186A05F63B1553398AD5EA3233C0CE68B8C9EECC47717F123C5C2B42FBD6D9F PUSH2 0x104D JUMP JUMPDEST PUSH2 0xB35 DUP2 PUSH2 0xD4E JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x7805862F689E2F13DF9F062FF482AD3AD112ACA9E0847911ED832E158C525B33 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x956 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9E87FAC800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBD1 DUP7 DUP7 DUP6 PUSH2 0xD89 JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBE4 DUP2 PUSH2 0xB87 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6985A02210A168E66602D3235CB6DB0E70F92B3BA4D376A33C0F3D9434BFF625 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xCA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x31B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD48 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x956 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6CD6020100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDC2 JUMPI PUSH2 0xDB8 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xDAC JUMPI PUSH2 0xDAC PUSH2 0x1060 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xDCB JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xD8E JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xDE7 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE89 DUP7 PUSH2 0xE3F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xEF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF6 DUP3 PUSH2 0xE3F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFA1 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0xA0 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0xF84 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA0 DUP3 DUP6 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x2B7 JUMPI PUSH2 0x2B7 PUSH2 0x1004 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2B7 JUMPI PUSH2 0x2B7 PUSH2 0x1004 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 DUP3 MOD 0xDF ISZERO XOR 0x1E PUSH24 0x868D951B70EA57D206D1480DBAAFD8A9A97C43F891F07399 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"695:7433:55:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;516:14:63;;509:22;491:41;;479:2;464:18;542:165:14;;;;;;;;1331:156:18;;;:::i;:::-;;7046:1080:55;;;;;;:::i;:::-;;:::i;1523:101:18:-;;;:::i;5886:333:55:-;;;;;;:::i;:::-;;:::i;1184:59::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;2212:6:63;2200:19;;;2182:38;;2170:2;2155:18;1184:59:55;2038:188:63;5185:369:55;;;;;;:::i;:::-;;:::i;939:152:18:-;;;:::i;1432:27:55:-;;;;;;;;;;;;2407:42:63;2395:55;;;2377:74;;2365:2;2350:18;1432:27:55;2231:226:63;710:120:4;;;:::i;1498:19:55:-;;;;;;;;;;;;977:49;;;;;1293:52;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1081:41;;;;;864:152:4;;;;;;:::i;:::-;;:::i;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;1331:156:18:-;1369:70;735:10:48;1426:12:18;1369:33;:31;:33::i;:::-;:56;;:70::i;:::-;1449:31;:21;:19;:21::i;:::-;:29;:31::i;:::-;1331:156::o;7046:1080:55:-;7167:6;7177:1;7167:11;7163:75;;7201:26;;;;;;;;2608:25:63;;;2581:18;;7201:26:55;;;;;;;;7163:75;7248:42;:21;:19;:21::i;:::-;:40;:42::i;:::-;7301:13;7317:20;;;;;;;;;;;;;;7351:11;;;7347:74;;7385:25;;;;;;;;2608::63;;;2581:18;;7385:25:55;2462:177:63;7347:74:55;7456:43;;3042:66:63;3029:2;3025:15;;;3021:88;7456:43:55;;;3009:101:63;3126:12;;;3119:28;;;3199:66;3185:3;3181:16;;;3177:89;3163:12;;;3156:111;7431:12:55;;3283::63;;7456:43:55;;;;;;;;;;;;;7446:54;;7456:43;7446:54;;;;;-1:-1:-1;7515:32:55;:5;;7536:4;7446:54;7515:20;:32::i;:::-;7510:110;;7570:39;;;;;3536:42:63;3524:55;;7570:39:55;;;3506:74:63;3596:18;;;3589:34;;;3671:6;3659:19;;3639:18;;;3632:47;3479:18;;7570:39:55;3306:379:63;7510:110:55;7634:13;;;;:7;:13;;;;;;;;7630:90;;;7670:39;;;;;3922:42:63;3910:55;;7670:39:55;;;3892:74:63;3982:18;;;3975:34;;;4025:18;;;4018:34;;;3865:18;;7670:39:55;3690:368:63;7630:90:55;7730:13;;;;7746:4;7730:13;;;;;;;;:20;;;;;;;;;;7785:12;;7926:21;;7785:12;2395:55:63;;;7926:21:55;;;2377:74:63;7926:21:55;;;;;;;;;;2350:18:63;;;7926:21:55;;;;7822:126;;;;7785:12;;;;7730:13;7842:24;7822:62;;;;:126;;7785:12;;7900:16;;7918:6;;7822:126;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7807:141;;7963:7;7958:94;;7993:48;;;;;5482:42:63;5470:55;;;7993:48:55;;;5452:74:63;5562:55;;5542:18;;;5535:83;5634:18;;;5627:34;;;5425:18;;7993:48:55;5250:417:63;7958:94:55;8101:9;8066:53;;8086:13;8066:53;;8080:4;8066:53;8112:6;8066:53;;;;2608:25:63;;2596:2;2581:18;;2462:177;8066:53:55;;;;;;;;7153:973;;;;7046:1080;;;;;:::o;1523:101:18:-;1564:4;1587:30;:21;:19;:21::i;:::-;2532:10:22;;;;2443:106;1587:30:18;1580:37;;1523:101;:::o;5886:333:55:-;5959:29;;;5955:88;;6011:21;;;;;;;;;;;;;;5955:88;6053:70;735:10:48;6110:12:55;656:96:48;6053:70:55;6134:12;:30;;;;;;;;;;;;;6180:32;;;;-1:-1:-1;;6180:32:55;5886:333;:::o;5185:369::-;5265:1;5251:15;;;5247:66;;5289:13;;;;;;;;;;;;;;5247:66;5323:70;735:10:48;5380:12:55;656:96:48;5323:70:55;5420:5;;5404:13;;5420:9;;:5;;;;;5428:1;5420:9;:::i;:::-;5439:14;:26;;;;;;;;;;;:35;;;;;;;;;;;;;5484:5;:14;;;;;;;;;;5514:33;;5439:35;;-1:-1:-1;5439:35:55;:26;;5514:33;;;5237:317;5185:369;:::o;939:152:18:-;975:70;735:10:48;1032:12:18;656:96:48;975:70:18;1055:29;:21;:19;:21::i;:::-;:27;:29::i;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:13;;;;3550:118;864:152:4;934:75;735:10:48;1000:8:4;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5060:174:13:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;2407:42:63;2395:55;;4538:25:13;;;2377:74:63;2350:18;;4538:25:13;2231:226:63;4499:64:13;4408:162;;:::o;3025:174:22:-;3066:16;;449:62;510:1;457:49;449:62;:::i;2191:132::-;2245:19;:1;:17;:19::i;:::-;2274:18;;;;;;2307:9;;;;2287:5;;2307:9;2191:132;:::o;2911:108::-;2985:10;;;;2981:31;;;3004:8;;;;;;;;;;;;;;4637:172:53;4738:4;4798;4761:33;4782:5;;4789:4;4761:20;:33::i;:::-;:41;;4637:172;-1:-1:-1;;;;;4637:172:53:o;1908:130:22:-;1960:22;:1;:20;:22::i;:::-;1992:17;;;;2005:4;1992:17;;;2024:7;;;;1992:10;;2024:7;1908:130;:::o;3054:369:13:-;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;2407:42:63;2395:55;;3237:24:13;;;2377:74:63;2350:18;;3237:24:13;2231:226:63;3201:60:13;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:13;3271:146;3142:281;3054:369;;;:::o;2677:109:22:-;2749:10;;;;2744:35;;2768:11;;;;;;;;;;;;;;5212:318:53;5305:7;5347:4;5305:7;5361:134;5381:16;;;5361:134;;;5433:51;5461:12;5475:5;;5481:1;5475:8;;;;;;;:::i;:::-;;;;;;;5433:27;:51::i;:::-;5418:66;-1:-1:-1;5399:3:53;;5361:134;;;-1:-1:-1;5511:12:53;5212:318;-1:-1:-1;;;;5212:318:53:o;504:169:52:-;579:7;609:1;605;:5;:61;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;605:61;;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;613:25;598:68;504:169;-1:-1:-1;;;504:169:52:o;14:332:63:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:196;611:20;;671:42;660:54;;650:65;;640:93;;729:1;726;719:12;640:93;543:196;;;:::o;744:867::-;857:6;865;873;881;889;942:3;930:9;921:7;917:23;913:33;910:53;;;959:1;956;949:12;910:53;982:29;1001:9;982:29;:::i;:::-;972:39;-1:-1:-1;1058:2:63;1043:18;;1030:32;;-1:-1:-1;1131:2:63;1116:18;;1103:32;;-1:-1:-1;1210:2:63;1195:18;;1182:32;1237:18;1226:30;;1223:50;;;1269:1;1266;1259:12;1223:50;1292:22;;1345:4;1337:13;;1333:27;-1:-1:-1;1323:55:63;;1374:1;1371;1364:12;1323:55;1414:2;1401:16;1440:18;1432:6;1429:30;1426:50;;;1472:1;1469;1462:12;1426:50;1525:7;1520:2;1510:6;1507:1;1503:14;1499:2;1495:23;1491:32;1488:45;1485:65;;;1546:1;1543;1536:12;1485:65;744:867;;;;-1:-1:-1;744:867:63;;-1:-1:-1;;;1577:2:63;1569:11;;1599:6;744:867::o;1616:186::-;1675:6;1728:2;1716:9;1707:7;1703:23;1699:32;1696:52;;;1744:1;1741;1734:12;1696:52;1767:29;1786:9;1767:29;:::i;1807:226::-;1866:6;1919:2;1907:9;1898:7;1894:23;1890:32;1887:52;;;1935:1;1932;1925:12;1887:52;-1:-1:-1;1980:23:63;;1807:226;-1:-1:-1;1807:226:63:o;4063:900::-;4306:42;4298:6;4294:55;4283:9;4276:74;4398:42;4390:6;4386:55;4381:2;4370:9;4366:18;4359:83;4478:6;4473:2;4462:9;4458:18;4451:34;4521:3;4516:2;4505:9;4501:18;4494:31;4257:4;4554:6;4548:13;4598:6;4592:3;4581:9;4577:19;4570:35;4623:1;4633:141;4647:6;4644:1;4641:13;4633:141;;;4759:2;4743:14;;;4739:23;;4733:30;4727:3;4708:17;;;4704:27;4697:67;4662:10;4633:141;;;4637:3;4824:1;4818:3;4809:6;4798:9;4794:22;4790:32;4783:43;4953:3;4883:66;4878:2;4870:6;4866:15;4862:88;4851:9;4847:104;4843:114;4835:122;;;4063:900;;;;;;;:::o;4968:277::-;5035:6;5088:2;5076:9;5067:7;5063:23;5059:32;5056:52;;;5104:1;5101;5094:12;5056:52;5136:9;5130:16;5189:5;5182:13;5175:21;5168:5;5165:32;5155:60;;5211:1;5208;5201:12;5672:184;5724:77;5721:1;5714:88;5821:4;5818:1;5811:15;5845:4;5842:1;5835:15;5861:155;5952:6;5929:14;;;5945;;;5925:35;;5972:15;;5969:41;;;5990:18;;:::i;6021:128::-;6088:9;;;6109:11;;;6106:37;;;6123:18;;:::i;6154:184::-;6206:77;6203:1;6196:88;6303:4;6300:1;6293:15;6327:4;6324:1;6317:15"},"gasEstimates":{"creation":{"codeDepositCost":"858600","executionCost":"infinite","totalCost":"infinite"},"external":{"CHECKMATE_TOKEN_CONTRACT()":"infinite","STAKING_CONTRACT()":"infinite","claimAndStake(address,uint256,bytes32,bytes32[])":"infinite","claimed(bytes32)":"2483","nonce()":"2413","owner()":"infinite","pause()":"infinite","paused()":"infinite","payoutWallet()":"2358","rootToNonceMap(bytes32)":"2523","setMerkleRoot(bytes32)":"infinite","setPayoutWallet(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite","unpause()":"infinite"}},"methodIdentifiers":{"CHECKMATE_TOKEN_CONTRACT()":"b1bb0c6c","STAKING_CONTRACT()":"da19ddfb","claimAndStake(address,uint256,bytes32,bytes32[])":"422a8b55","claimed(bytes32)":"cc3c0f06","nonce()":"affed0e0","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","payoutWallet()":"8488bb4e","rootToNonceMap(bytes32)":"7505fee1","setMerkleRoot(bytes32)":"7cb64759","setPayoutWallet(address)":"6b8f9c43","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkmateTokenContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutWallet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCheckmateTokenContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidForwarderRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayoutWallet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakingContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"TreasuryWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHECKMATE_TOKEN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"rootToNonceMap\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256,bytes32)\":[{\"params\":{\"amount\":\"The amount of checkmate token is claimed.\",\"recipient\":\"The recipient of the claim.\",\"root\":\"The root.\"}}],\"InvalidClaimAmount(uint256)\":[{\"params\":{\"amount\":\"The amount of the claim.\"}}],\"InvalidProof(address,uint256,uint16)\":[{\"params\":{\"amount\":\"The amount of checkmate token is claimed.\",\"nonce\":\"The nonce of the root.\",\"recipient\":\"The recipient of the checkmate token.\"}}],\"MerkleRootNotExists(bytes32)\":[{\"params\":{\"root\":\"The root.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"TransferFailed(address,address,uint256)\":[{\"params\":{\"amount\":\"The amount of the claim.\",\"payoutWallet\":\"The wallet sending out the checkmate token.\",\"recipient\":\"The recipient of the claim.\"}}]},\"events\":{\"MerkleRootSet(bytes32,uint16)\":{\"params\":{\"nonce\":\"The nonce assigned to the root.\",\"root\":\"The new merkle root.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutClaimed(bytes32,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of checkmate token is claimed.\",\"payoutWallet\":\"The wallet sending out the checkmate token.\",\"recipient\":\"The recipient of the checkmate token.\",\"root\":\"The merkle root on which the claim was made.\"}},\"PayoutWalletSet(address)\":{\"params\":{\"newPayoutWallet\":\"The new payout wallet.\"}},\"TreasuryWalletSet(address)\":{\"params\":{\"newTreasuryWallet\":\"The new treasury wallet.\"}}},\"kind\":\"dev\",\"methods\":{\"claimAndStake(address,uint256,bytes32,bytes32[])\":{\"details\":\"Reverts with {InvalidClaimAmount} if it is claiming a zero amount.Reverts with {Paused} if contract is paused.Reverts with {MerkleRootNotExists} if the merkle root does not exist.Reverts with {InvalidProof} if the merkle proof has failed the verificationReverts with {AlreadyClaimed} if this specific payout has already been claimed.Emits a {PayoutClaimed} event.\",\"params\":{\"amount\":\"The amount of checkmate token to be claimed.\",\"proof\":\"The Merkle proof of the user based on the merkle root.\",\"recipient\":\"The recipient for this claim.\",\"root\":\"The root for this claim.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"pause()\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {Paused} if the contract is paused.Emits a {Paused} event.\"},\"paused()\":{\"returns\":{\"_0\":\"The paused state of the contract.\"}},\"setMerkleRoot(bytes32)\":{\"details\":\"Reverts with {InvalidRoot} if the merkle root is zero.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {MerkleRootSet} event.\",\"params\":{\"merkleRoot\":\"The merkle root to be set.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {InvalidPayoutWallet} if the new payout wallet is zero address.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet to be set.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"unpause()\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {NotPaused} if the contract is not paused.Emits an {Unpaused} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256,bytes32)\":[{\"notice\":\"Thrown when trying to claim the same leaf more than once.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidCheckmateTokenContract()\":[{\"notice\":\"Thrown when the checkmate token contract address is invalid.\"}],\"InvalidClaimAmount(uint256)\":[{\"notice\":\"Thrown when the claim amount is zero.\"}],\"InvalidForwarderRegistry()\":[{\"notice\":\"Thrown when the given forwarder registry address is zero address.\"}],\"InvalidPayoutWallet()\":[{\"notice\":\"Thrown when the given payout wallet address is zero address.\"}],\"InvalidProof(address,uint256,uint16)\":[{\"notice\":\"Thrown when a proof cannot be verified.\"}],\"InvalidRoot()\":[{\"notice\":\"Thrown when the given root is zero.\"}],\"InvalidStakingContract()\":[{\"notice\":\"Thrown when the staking contract address is invalid.\"}],\"MerkleRootNotExists(bytes32)\":[{\"notice\":\"Thrown when the merkle root does not exist.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotPaused()\":[{\"notice\":\"Thrown when the contract is not paused but is required to.\"}],\"Paused()\":[{\"notice\":\"Thrown when the contract is paused but is required not to.\"}],\"TransferFailed(address,address,uint256)\":[{\"notice\":\"Thrown when checkmate token transfer failed.\"}]},\"events\":{\"MerkleRootSet(bytes32,uint16)\":{\"notice\":\"Emitted when a new merkle root is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"Pause()\":{\"notice\":\"Emitted when the pause is triggered.\"},\"PayoutClaimed(bytes32,address,address,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"},\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when a new payout wallet is set.\"},\"TreasuryWalletSet(address)\":{\"notice\":\"Emitted when a new treasury wallet is set.\"},\"Unpause()\":{\"notice\":\"Emitted when the pause is lifted.\"}},\"kind\":\"user\",\"methods\":{\"CHECKMATE_TOKEN_CONTRACT()\":{\"notice\":\"a reference to checkmate token contract\"},\"STAKING_CONTRACT()\":{\"notice\":\"a reference to staking contract\"},\"claimAndStake(address,uint256,bytes32,bytes32[])\":{\"notice\":\"Executes the payout for a given recipient address (anyone can call this function) and stake the payout right away.\"},\"claimed(bytes32)\":{\"notice\":\"leaf hash to claimed state\"},\"nonce()\":{\"notice\":\"Store the nonce\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"paused()\":{\"notice\":\"Gets the paused state of the contract.\"},\"payoutWallet()\":{\"notice\":\"Store the payout wallet address for transfering checkmate token\"},\"rootToNonceMap(bytes32)\":{\"notice\":\"Store the merkle root to nonce mapping\"},\"setMerkleRoot(bytes32)\":{\"notice\":\"Sets the new merkle root with current nonce for claiming.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the new payout wallet.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleClaim/CheckmateMerkleClaim.sol\":\"CheckmateMerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IPause} from \\\"./../interfaces/IPause.sol\\\";\\nimport {PauseStorage} from \\\"./../libraries/PauseStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Pausing mechanism (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PauseBase is IPause, Context {\\n    using PauseStorage for PauseStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    /// @dev Emits a {Paused} event.\\n    function pause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    /// @dev Emits an {Unpaused} event.\\n    function unpause() external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PauseStorage.layout().unpause();\\n    }\\n\\n    // /// @inheritdoc IPause\\n    function paused() external view returns (bool) {\\n        return PauseStorage.layout().paused();\\n    }\\n}\\n\",\"keccak256\":\"0x243a848c4070275ac5527682d8b1437141d4480ff32b6e490bb97eb6a9dbd811\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/errors/PauseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the contract is paused but is required not to.\\nerror Paused();\\n\\n/// @notice Thrown when the contract is not paused but is required to.\\nerror NotPaused();\\n\",\"keccak256\":\"0x989debfdaf1aff85eb78e8be2c33f0a12fc4354f105aae1a751fc79ee4a42697\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/events/PauseEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the pause is triggered.\\nevent Pause();\\n\\n/// @notice Emitted when the pause is lifted.\\nevent Unpause();\\n\",\"keccak256\":\"0x596e0ee31efcf10dbf7e3dc2d70c1b5f130aacfcbc28c3b03c341b3d7eef2394\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/interfaces/IPause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Pausing mechanism (functions)\\ninterface IPause {\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused() external view returns (bool isPaused);\\n}\\n\",\"keccak256\":\"0x1c995bd170ce74f760f551706e42b120a579face097411a276c87668d00cc74d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {Paused, NotPaused} from \\\"./../errors/PauseErrors.sol\\\";\\nimport {Pause, Unpause} from \\\"./../events/PauseEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PauseStorage {\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    struct Layout {\\n        bool isPaused;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Pause.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial pause state (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits a {Pause} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function constructorInit(Layout storage s, bool isPaused) internal {\\n        if (isPaused) {\\n            s.isPaused = true;\\n            emit Pause();\\n        }\\n    }\\n\\n    /// @notice Initializes the storage with an initial pause state (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits a {Pause} event if `isPaused` is true.\\n    /// @param isPaused The initial pause state.\\n    function proxyInit(Layout storage s, bool isPaused) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(isPaused);\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    /// @dev Emits a {Pause} event.\\n    function pause(Layout storage s) internal {\\n        s.enforceIsNotPaused();\\n        s.isPaused = true;\\n        emit Pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    /// @dev Emits an {Unpause} event.\\n    function unpause(Layout storage s) internal {\\n        s.enforceIsPaused();\\n        s.isPaused = false;\\n        emit Unpause();\\n    }\\n\\n    /// @notice Gets the paused state of the contract.\\n    /// @return isPaused The paused state of the contract.\\n    function paused(Layout storage s) internal view returns (bool isPaused) {\\n        return s.isPaused;\\n    }\\n\\n    /// @notice Ensures that the contract is paused.\\n    /// @dev Reverts with {NotPaused} if the contract is not paused.\\n    function enforceIsPaused(Layout storage s) internal view {\\n        if (!s.isPaused) revert NotPaused();\\n    }\\n\\n    /// @notice Ensures that the contract is not paused.\\n    /// @dev Reverts with {Paused} if the contract is paused.\\n    function enforceIsNotPaused(Layout storage s) internal view {\\n        if (s.isPaused) revert Paused();\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0e63151c1ce1b423171f9a01c79cd0d8e2eaf3ec988aaba68e7d6ab1b60f7bc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library of standard hash functions.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Hashes {\\n    /**\\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\\n     *\\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n     */\\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Hashes} from \\\"./Hashes.sol\\\";\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n *\\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\\n * that access memory in an unsafe way.\\n *\\n * NOTE: This library supports proof verification for merkle trees built using\\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\\n * leaf inclusion in trees built using non-commutative hashing functions requires\\n * additional logic that is not supported by this library.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProof(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function processProof(\\n        bytes32[] memory proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProofCalldata(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function processProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\"},\"contracts/merkleClaim/CheckmateMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IERC20SafeTransfers} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PauseBase} from \\\"@animoca/ethereum-contracts/contracts/lifecycle/base/PauseBase.sol\\\";\\nimport {PauseStorage} from \\\"@animoca/ethereum-contracts/contracts/lifecycle/libraries/PauseStorage.sol\\\";\\n\\ncontract CheckmateMerkleClaim is ContractOwnership, PauseBase {\\n    using MerkleProof for bytes32[];\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PauseStorage for PauseStorage.Layout;\\n\\n    /// @notice a reference to checkmate token contract\\n    address public immutable CHECKMATE_TOKEN_CONTRACT;\\n\\n    /// @notice a reference to staking contract\\n    address public immutable STAKING_CONTRACT;\\n\\n    /// @notice Store the merkle root to nonce mapping\\n    mapping(bytes32 root => uint16 nonce) public rootToNonceMap;\\n\\n    /// @notice leaf hash to claimed state\\n    mapping(bytes32 leaf => bool claimed) public claimed;\\n\\n    /// @notice Store the payout wallet address for transfering checkmate token\\n    address public payoutWallet;\\n\\n    /// @notice Store the nonce\\n    uint16 public nonce;\\n\\n    /// @notice Emitted when a new merkle root is set.\\n    /// @param root The new merkle root.\\n    /// @param nonce The nonce assigned to the root.\\n    event MerkleRootSet(bytes32 indexed root, uint16 indexed nonce);\\n\\n    /// @notice Emitted when a new payout wallet is set.\\n    /// @param newPayoutWallet The new payout wallet.\\n    event PayoutWalletSet(address indexed newPayoutWallet);\\n\\n    /// @notice Emitted when a new treasury wallet is set.\\n    /// @param newTreasuryWallet The new treasury wallet.\\n    event TreasuryWalletSet(address indexed newTreasuryWallet);\\n\\n    /// @notice Emitted when a payout is claimed.\\n    /// @param root The merkle root on which the claim was made.\\n    /// @param payoutWallet The wallet sending out the checkmate token.\\n    /// @param recipient The recipient of the checkmate token.\\n    /// @param amount The amount of checkmate token is claimed.\\n    event PayoutClaimed(bytes32 indexed root, address indexed payoutWallet, address indexed recipient, uint256 amount);\\n\\n    /// @notice Thrown when the given forwarder registry address is zero address.\\n    error InvalidForwarderRegistry();\\n\\n    /// @notice Thrown when the given root is zero.\\n    error InvalidRoot();\\n\\n    /// @notice Thrown when the given payout wallet address is zero address.\\n    error InvalidPayoutWallet();\\n\\n    /// @notice Thrown when the checkmate token contract address is invalid.\\n    error InvalidCheckmateTokenContract();\\n\\n    /// @notice Thrown when the staking contract address is invalid.\\n    error InvalidStakingContract();\\n\\n    /// @notice Thrown when trying to claim the same leaf more than once.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount of checkmate token is claimed.\\n    /// @param root The root.\\n    error AlreadyClaimed(address recipient, uint256 amount, bytes32 root);\\n\\n    /// @notice Thrown when a proof cannot be verified.\\n    /// @param recipient The recipient of the checkmate token.\\n    /// @param amount The amount of checkmate token is claimed.\\n    /// @param nonce The nonce of the root.\\n    error InvalidProof(address recipient, uint256 amount, uint16 nonce);\\n\\n    /// @notice Thrown when the merkle root does not exist.\\n    /// @param root The root.\\n    error MerkleRootNotExists(bytes32 root);\\n\\n    /// @notice Thrown when the claim amount is zero.\\n    /// @param amount The amount of the claim.\\n    error InvalidClaimAmount(uint256 amount);\\n\\n    /// @notice Thrown when checkmate token transfer failed.\\n    /// @param payoutWallet The wallet sending out the checkmate token.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount of the claim.\\n    error TransferFailed(address payoutWallet, address recipient, uint256 amount);\\n\\n    constructor(address checkmateTokenContract_, address stakingContract_, address payoutWallet_) ContractOwnership(msg.sender) {\\n        if (checkmateTokenContract_ == address(0)) {\\n            revert InvalidCheckmateTokenContract();\\n        }\\n        if (stakingContract_ == address(0)) {\\n            revert InvalidStakingContract();\\n        }\\n        if (payoutWallet_ == address(0)) {\\n            revert InvalidPayoutWallet();\\n        }\\n\\n        CHECKMATE_TOKEN_CONTRACT = checkmateTokenContract_;\\n        STAKING_CONTRACT = stakingContract_;\\n        payoutWallet = payoutWallet_;\\n    }\\n\\n    /// @notice Sets the new merkle root with current nonce for claiming.\\n    /// @dev Reverts with {InvalidRoot} if the merkle root is zero.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {MerkleRootSet} event.\\n    /// @param merkleRoot The merkle root to be set.\\n    function setMerkleRoot(bytes32 merkleRoot) external {\\n        if (merkleRoot == 0) {\\n            revert InvalidRoot();\\n        }\\n\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        uint16 _nonce = nonce + 1;\\n        rootToNonceMap[merkleRoot] = _nonce;\\n        nonce = _nonce;\\n\\n        emit MerkleRootSet(merkleRoot, _nonce);\\n    }\\n\\n    /// @notice Sets the new payout wallet.\\n    /// @dev Reverts with {InvalidPayoutWallet} if the new payout wallet is zero address.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet to be set.\\n    function setPayoutWallet(address newPayoutWallet) external {\\n        if (newPayoutWallet == address(0)) {\\n            revert InvalidPayoutWallet();\\n        }\\n\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        payoutWallet = newPayoutWallet;\\n\\n        emit PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Executes the payout for a given recipient address (anyone can call this function) and stake the payout right away.\\n    /// @dev Reverts with {InvalidClaimAmount} if it is claiming a zero amount.\\n    /// @dev Reverts with {Paused} if contract is paused.\\n    /// @dev Reverts with {MerkleRootNotExists} if the merkle root does not exist.\\n    /// @dev Reverts with {InvalidProof} if the merkle proof has failed the verification\\n    /// @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\\n    /// @dev Emits a {PayoutClaimed} event.\\n    /// @param recipient The recipient for this claim.\\n    /// @param amount The amount of checkmate token to be claimed.\\n    /// @param root The root for this claim.\\n    /// @param proof The Merkle proof of the user based on the merkle root.\\n    function claimAndStake(address recipient, uint256 amount, bytes32 root, bytes32[] calldata proof) external {\\n        if (amount == 0) {\\n            revert InvalidClaimAmount(amount);\\n        }\\n\\n        PauseStorage.layout().enforceIsNotPaused();\\n\\n        uint16 _nonce = rootToNonceMap[root];\\n        if (_nonce == 0) {\\n            revert MerkleRootNotExists(root);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, amount, _nonce));\\n        if (!proof.verifyCalldata(root, leaf)) {\\n            revert InvalidProof(recipient, amount, _nonce);\\n        }\\n\\n        if (claimed[leaf]) {\\n            revert AlreadyClaimed(recipient, amount, root);\\n        }\\n\\n        claimed[leaf] = true;\\n\\n        address _payoutWallet = payoutWallet;\\n        bool success = IERC20SafeTransfers(CHECKMATE_TOKEN_CONTRACT).safeTransferFrom(_payoutWallet, STAKING_CONTRACT, amount, abi.encode(recipient));\\n        if (!success) {\\n            revert TransferFailed(_payoutWallet, recipient, amount);\\n        }\\n        emit PayoutClaimed(root, _payoutWallet, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9d1d7d7d6433858235413f3294fc4d2da19f276d3a25605d3c4fb8eb8e2c0139\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5466,"contract":"contracts/merkleClaim/CheckmateMerkleClaim.sol:CheckmateMerkleClaim","label":"rootToNonceMap","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint16)"},{"astId":5471,"contract":"contracts/merkleClaim/CheckmateMerkleClaim.sol:CheckmateMerkleClaim","label":"claimed","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bool)"},{"astId":5474,"contract":"contracts/merkleClaim/CheckmateMerkleClaim.sol:CheckmateMerkleClaim","label":"payoutWallet","offset":0,"slot":"2","type":"t_address"},{"astId":5477,"contract":"contracts/merkleClaim/CheckmateMerkleClaim.sol:CheckmateMerkleClaim","label":"nonce","offset":20,"slot":"2","type":"t_uint16"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_uint16)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"}}},"userdoc":{"errors":{"AlreadyClaimed(address,uint256,bytes32)":[{"notice":"Thrown when trying to claim the same leaf more than once."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidCheckmateTokenContract()":[{"notice":"Thrown when the checkmate token contract address is invalid."}],"InvalidClaimAmount(uint256)":[{"notice":"Thrown when the claim amount is zero."}],"InvalidForwarderRegistry()":[{"notice":"Thrown when the given forwarder registry address is zero address."}],"InvalidPayoutWallet()":[{"notice":"Thrown when the given payout wallet address is zero address."}],"InvalidProof(address,uint256,uint16)":[{"notice":"Thrown when a proof cannot be verified."}],"InvalidRoot()":[{"notice":"Thrown when the given root is zero."}],"InvalidStakingContract()":[{"notice":"Thrown when the staking contract address is invalid."}],"MerkleRootNotExists(bytes32)":[{"notice":"Thrown when the merkle root does not exist."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotPaused()":[{"notice":"Thrown when the contract is not paused but is required to."}],"Paused()":[{"notice":"Thrown when the contract is paused but is required not to."}],"TransferFailed(address,address,uint256)":[{"notice":"Thrown when checkmate token transfer failed."}]},"events":{"MerkleRootSet(bytes32,uint16)":{"notice":"Emitted when a new merkle root is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"Pause()":{"notice":"Emitted when the pause is triggered."},"PayoutClaimed(bytes32,address,address,uint256)":{"notice":"Emitted when a payout is claimed."},"PayoutWalletSet(address)":{"notice":"Emitted when a new payout wallet is set."},"TreasuryWalletSet(address)":{"notice":"Emitted when a new treasury wallet is set."},"Unpause()":{"notice":"Emitted when the pause is lifted."}},"kind":"user","methods":{"CHECKMATE_TOKEN_CONTRACT()":{"notice":"a reference to checkmate token contract"},"STAKING_CONTRACT()":{"notice":"a reference to staking contract"},"claimAndStake(address,uint256,bytes32,bytes32[])":{"notice":"Executes the payout for a given recipient address (anyone can call this function) and stake the payout right away."},"claimed(bytes32)":{"notice":"leaf hash to claimed state"},"nonce()":{"notice":"Store the nonce"},"owner()":{"notice":"Gets the address of the contract owner."},"pause()":{"notice":"Pauses the contract."},"paused()":{"notice":"Gets the paused state of the contract."},"payoutWallet()":{"notice":"Store the payout wallet address for transfering checkmate token"},"rootToNonceMap(bytes32)":{"notice":"Store the merkle root to nonce mapping"},"setMerkleRoot(bytes32)":{"notice":"Sets the new merkle root with current nonce for claiming."},"setPayoutWallet(address)":{"notice":"Sets the new payout wallet."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"unpause()":{"notice":"Unpauses the contract."}},"version":1}}},"contracts/mocks/ERC20/ERC20ReceiverMock.sol":{"ERC20ReceiverMock":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b506101998061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634fc3585914610030575b600080fd5b61006861003e3660046100c6565b7f4fc358590000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100c157600080fd5b919050565b6000806000806000608086880312156100de57600080fd5b6100e78661009d565b94506100f56020870161009d565b935060408601359250606086013567ffffffffffffffff81111561011857600080fd5b8601601f8101881361012957600080fd5b803567ffffffffffffffff81111561014057600080fd5b88602082840101111561015257600080fd5b95989497509295505050602001919056fea2646970667358221220bd8700687f44bbeeb29e64bf712b32acbeec6dc976e13a32fcb070b77bfd8eaa64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x199 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x68 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xC6 JUMP JUMPDEST PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 DUP7 PUSH2 0x9D JUMP JUMPDEST SWAP5 POP PUSH2 0xF5 PUSH1 0x20 DUP8 ADD PUSH2 0x9D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD DUP8 STOP PUSH9 0x7F44BBEEB29E64BF71 0x2B ORIGIN 0xAC 0xBE 0xEC PUSH14 0xC976E13A32FCB070B77BFD8EAA64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"184:186:56:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@onERC20Received_5842":{"entryPoint":null,"id":5842,"parameterSlots":5,"returnSlots":1},"abi_decode_address":{"entryPoint":157,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":198,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1273:63","nodeType":"YulBlock","src":"0:1273:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"63:147:63","nodeType":"YulBlock","src":"63:147:63","statements":[{"nativeSrc":"73:29:63","nodeType":"YulAssignment","src":"73:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"95:6:63","nodeType":"YulIdentifier","src":"95:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"82:12:63","nodeType":"YulIdentifier","src":"82:12:63"},"nativeSrc":"82:20:63","nodeType":"YulFunctionCall","src":"82:20:63"},"variableNames":[{"name":"value","nativeSrc":"73:5:63","nodeType":"YulIdentifier","src":"73:5:63"}]},{"body":{"nativeSrc":"188:16:63","nodeType":"YulBlock","src":"188:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"197:1:63","nodeType":"YulLiteral","src":"197:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"200:1:63","nodeType":"YulLiteral","src":"200:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"190:6:63","nodeType":"YulIdentifier","src":"190:6:63"},"nativeSrc":"190:12:63","nodeType":"YulFunctionCall","src":"190:12:63"},"nativeSrc":"190:12:63","nodeType":"YulExpressionStatement","src":"190:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"124:5:63","nodeType":"YulIdentifier","src":"124:5:63"},{"arguments":[{"name":"value","nativeSrc":"135:5:63","nodeType":"YulIdentifier","src":"135:5:63"},{"kind":"number","nativeSrc":"142:42:63","nodeType":"YulLiteral","src":"142:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"131:3:63","nodeType":"YulIdentifier","src":"131:3:63"},"nativeSrc":"131:54:63","nodeType":"YulFunctionCall","src":"131:54:63"}],"functionName":{"name":"eq","nativeSrc":"121:2:63","nodeType":"YulIdentifier","src":"121:2:63"},"nativeSrc":"121:65:63","nodeType":"YulFunctionCall","src":"121:65:63"}],"functionName":{"name":"iszero","nativeSrc":"114:6:63","nodeType":"YulIdentifier","src":"114:6:63"},"nativeSrc":"114:73:63","nodeType":"YulFunctionCall","src":"114:73:63"},"nativeSrc":"111:93:63","nodeType":"YulIf","src":"111:93:63"}]},"name":"abi_decode_address","nativeSrc":"14:196:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"42:6:63","nodeType":"YulTypedName","src":"42:6:63","type":""}],"returnVariables":[{"name":"value","nativeSrc":"53:5:63","nodeType":"YulTypedName","src":"53:5:63","type":""}],"src":"14:196:63"},{"body":{"nativeSrc":"355:663:63","nodeType":"YulBlock","src":"355:663:63","statements":[{"body":{"nativeSrc":"402:16:63","nodeType":"YulBlock","src":"402:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"411:1:63","nodeType":"YulLiteral","src":"411:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"414:1:63","nodeType":"YulLiteral","src":"414:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"404:6:63","nodeType":"YulIdentifier","src":"404:6:63"},"nativeSrc":"404:12:63","nodeType":"YulFunctionCall","src":"404:12:63"},"nativeSrc":"404:12:63","nodeType":"YulExpressionStatement","src":"404:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"376:7:63","nodeType":"YulIdentifier","src":"376:7:63"},{"name":"headStart","nativeSrc":"385:9:63","nodeType":"YulIdentifier","src":"385:9:63"}],"functionName":{"name":"sub","nativeSrc":"372:3:63","nodeType":"YulIdentifier","src":"372:3:63"},"nativeSrc":"372:23:63","nodeType":"YulFunctionCall","src":"372:23:63"},{"kind":"number","nativeSrc":"397:3:63","nodeType":"YulLiteral","src":"397:3:63","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"368:3:63","nodeType":"YulIdentifier","src":"368:3:63"},"nativeSrc":"368:33:63","nodeType":"YulFunctionCall","src":"368:33:63"},"nativeSrc":"365:53:63","nodeType":"YulIf","src":"365:53:63"},{"nativeSrc":"427:39:63","nodeType":"YulAssignment","src":"427:39:63","value":{"arguments":[{"name":"headStart","nativeSrc":"456:9:63","nodeType":"YulIdentifier","src":"456:9:63"}],"functionName":{"name":"abi_decode_address","nativeSrc":"437:18:63","nodeType":"YulIdentifier","src":"437:18:63"},"nativeSrc":"437:29:63","nodeType":"YulFunctionCall","src":"437:29:63"},"variableNames":[{"name":"value0","nativeSrc":"427:6:63","nodeType":"YulIdentifier","src":"427:6:63"}]},{"nativeSrc":"475:48:63","nodeType":"YulAssignment","src":"475:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"508:9:63","nodeType":"YulIdentifier","src":"508:9:63"},{"kind":"number","nativeSrc":"519:2:63","nodeType":"YulLiteral","src":"519:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"504:3:63","nodeType":"YulIdentifier","src":"504:3:63"},"nativeSrc":"504:18:63","nodeType":"YulFunctionCall","src":"504:18:63"}],"functionName":{"name":"abi_decode_address","nativeSrc":"485:18:63","nodeType":"YulIdentifier","src":"485:18:63"},"nativeSrc":"485:38:63","nodeType":"YulFunctionCall","src":"485:38:63"},"variableNames":[{"name":"value1","nativeSrc":"475:6:63","nodeType":"YulIdentifier","src":"475:6:63"}]},{"nativeSrc":"532:42:63","nodeType":"YulAssignment","src":"532:42:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"559:9:63","nodeType":"YulIdentifier","src":"559:9:63"},{"kind":"number","nativeSrc":"570:2:63","nodeType":"YulLiteral","src":"570:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"555:3:63","nodeType":"YulIdentifier","src":"555:3:63"},"nativeSrc":"555:18:63","nodeType":"YulFunctionCall","src":"555:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"542:12:63","nodeType":"YulIdentifier","src":"542:12:63"},"nativeSrc":"542:32:63","nodeType":"YulFunctionCall","src":"542:32:63"},"variableNames":[{"name":"value2","nativeSrc":"532:6:63","nodeType":"YulIdentifier","src":"532:6:63"}]},{"nativeSrc":"583:46:63","nodeType":"YulVariableDeclaration","src":"583:46:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"614:9:63","nodeType":"YulIdentifier","src":"614:9:63"},{"kind":"number","nativeSrc":"625:2:63","nodeType":"YulLiteral","src":"625:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"610:3:63","nodeType":"YulIdentifier","src":"610:3:63"},"nativeSrc":"610:18:63","nodeType":"YulFunctionCall","src":"610:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"597:12:63","nodeType":"YulIdentifier","src":"597:12:63"},"nativeSrc":"597:32:63","nodeType":"YulFunctionCall","src":"597:32:63"},"variables":[{"name":"offset","nativeSrc":"587:6:63","nodeType":"YulTypedName","src":"587:6:63","type":""}]},{"body":{"nativeSrc":"672:16:63","nodeType":"YulBlock","src":"672:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"681:1:63","nodeType":"YulLiteral","src":"681:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"684:1:63","nodeType":"YulLiteral","src":"684:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"674:6:63","nodeType":"YulIdentifier","src":"674:6:63"},"nativeSrc":"674:12:63","nodeType":"YulFunctionCall","src":"674:12:63"},"nativeSrc":"674:12:63","nodeType":"YulExpressionStatement","src":"674:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"644:6:63","nodeType":"YulIdentifier","src":"644:6:63"},{"kind":"number","nativeSrc":"652:18:63","nodeType":"YulLiteral","src":"652:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"641:2:63","nodeType":"YulIdentifier","src":"641:2:63"},"nativeSrc":"641:30:63","nodeType":"YulFunctionCall","src":"641:30:63"},"nativeSrc":"638:50:63","nodeType":"YulIf","src":"638:50:63"},{"nativeSrc":"697:32:63","nodeType":"YulVariableDeclaration","src":"697:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"711:9:63","nodeType":"YulIdentifier","src":"711:9:63"},{"name":"offset","nativeSrc":"722:6:63","nodeType":"YulIdentifier","src":"722:6:63"}],"functionName":{"name":"add","nativeSrc":"707:3:63","nodeType":"YulIdentifier","src":"707:3:63"},"nativeSrc":"707:22:63","nodeType":"YulFunctionCall","src":"707:22:63"},"variables":[{"name":"_1","nativeSrc":"701:2:63","nodeType":"YulTypedName","src":"701:2:63","type":""}]},{"body":{"nativeSrc":"777:16:63","nodeType":"YulBlock","src":"777:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"786:1:63","nodeType":"YulLiteral","src":"786:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"789:1:63","nodeType":"YulLiteral","src":"789:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"779:6:63","nodeType":"YulIdentifier","src":"779:6:63"},"nativeSrc":"779:12:63","nodeType":"YulFunctionCall","src":"779:12:63"},"nativeSrc":"779:12:63","nodeType":"YulExpressionStatement","src":"779:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"756:2:63","nodeType":"YulIdentifier","src":"756:2:63"},{"kind":"number","nativeSrc":"760:4:63","nodeType":"YulLiteral","src":"760:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"752:3:63","nodeType":"YulIdentifier","src":"752:3:63"},"nativeSrc":"752:13:63","nodeType":"YulFunctionCall","src":"752:13:63"},{"name":"dataEnd","nativeSrc":"767:7:63","nodeType":"YulIdentifier","src":"767:7:63"}],"functionName":{"name":"slt","nativeSrc":"748:3:63","nodeType":"YulIdentifier","src":"748:3:63"},"nativeSrc":"748:27:63","nodeType":"YulFunctionCall","src":"748:27:63"}],"functionName":{"name":"iszero","nativeSrc":"741:6:63","nodeType":"YulIdentifier","src":"741:6:63"},"nativeSrc":"741:35:63","nodeType":"YulFunctionCall","src":"741:35:63"},"nativeSrc":"738:55:63","nodeType":"YulIf","src":"738:55:63"},{"nativeSrc":"802:30:63","nodeType":"YulVariableDeclaration","src":"802:30:63","value":{"arguments":[{"name":"_1","nativeSrc":"829:2:63","nodeType":"YulIdentifier","src":"829:2:63"}],"functionName":{"name":"calldataload","nativeSrc":"816:12:63","nodeType":"YulIdentifier","src":"816:12:63"},"nativeSrc":"816:16:63","nodeType":"YulFunctionCall","src":"816:16:63"},"variables":[{"name":"length","nativeSrc":"806:6:63","nodeType":"YulTypedName","src":"806:6:63","type":""}]},{"body":{"nativeSrc":"875:16:63","nodeType":"YulBlock","src":"875:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"884:1:63","nodeType":"YulLiteral","src":"884:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"887:1:63","nodeType":"YulLiteral","src":"887:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"877:6:63","nodeType":"YulIdentifier","src":"877:6:63"},"nativeSrc":"877:12:63","nodeType":"YulFunctionCall","src":"877:12:63"},"nativeSrc":"877:12:63","nodeType":"YulExpressionStatement","src":"877:12:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"847:6:63","nodeType":"YulIdentifier","src":"847:6:63"},{"kind":"number","nativeSrc":"855:18:63","nodeType":"YulLiteral","src":"855:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"844:2:63","nodeType":"YulIdentifier","src":"844:2:63"},"nativeSrc":"844:30:63","nodeType":"YulFunctionCall","src":"844:30:63"},"nativeSrc":"841:50:63","nodeType":"YulIf","src":"841:50:63"},{"body":{"nativeSrc":"941:16:63","nodeType":"YulBlock","src":"941:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"950:1:63","nodeType":"YulLiteral","src":"950:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"953:1:63","nodeType":"YulLiteral","src":"953:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"943:6:63","nodeType":"YulIdentifier","src":"943:6:63"},"nativeSrc":"943:12:63","nodeType":"YulFunctionCall","src":"943:12:63"},"nativeSrc":"943:12:63","nodeType":"YulExpressionStatement","src":"943:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"914:2:63","nodeType":"YulIdentifier","src":"914:2:63"},{"name":"length","nativeSrc":"918:6:63","nodeType":"YulIdentifier","src":"918:6:63"}],"functionName":{"name":"add","nativeSrc":"910:3:63","nodeType":"YulIdentifier","src":"910:3:63"},"nativeSrc":"910:15:63","nodeType":"YulFunctionCall","src":"910:15:63"},{"kind":"number","nativeSrc":"927:2:63","nodeType":"YulLiteral","src":"927:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"906:3:63","nodeType":"YulIdentifier","src":"906:3:63"},"nativeSrc":"906:24:63","nodeType":"YulFunctionCall","src":"906:24:63"},{"name":"dataEnd","nativeSrc":"932:7:63","nodeType":"YulIdentifier","src":"932:7:63"}],"functionName":{"name":"gt","nativeSrc":"903:2:63","nodeType":"YulIdentifier","src":"903:2:63"},"nativeSrc":"903:37:63","nodeType":"YulFunctionCall","src":"903:37:63"},"nativeSrc":"900:57:63","nodeType":"YulIf","src":"900:57:63"},{"nativeSrc":"966:21:63","nodeType":"YulAssignment","src":"966:21:63","value":{"arguments":[{"name":"_1","nativeSrc":"980:2:63","nodeType":"YulIdentifier","src":"980:2:63"},{"kind":"number","nativeSrc":"984:2:63","nodeType":"YulLiteral","src":"984:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"976:3:63","nodeType":"YulIdentifier","src":"976:3:63"},"nativeSrc":"976:11:63","nodeType":"YulFunctionCall","src":"976:11:63"},"variableNames":[{"name":"value3","nativeSrc":"966:6:63","nodeType":"YulIdentifier","src":"966:6:63"}]},{"nativeSrc":"996:16:63","nodeType":"YulAssignment","src":"996:16:63","value":{"name":"length","nativeSrc":"1006:6:63","nodeType":"YulIdentifier","src":"1006:6:63"},"variableNames":[{"name":"value4","nativeSrc":"996:6:63","nodeType":"YulIdentifier","src":"996:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"215:803:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"289:9:63","nodeType":"YulTypedName","src":"289:9:63","type":""},{"name":"dataEnd","nativeSrc":"300:7:63","nodeType":"YulTypedName","src":"300:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"312:6:63","nodeType":"YulTypedName","src":"312:6:63","type":""},{"name":"value1","nativeSrc":"320:6:63","nodeType":"YulTypedName","src":"320:6:63","type":""},{"name":"value2","nativeSrc":"328:6:63","nodeType":"YulTypedName","src":"328:6:63","type":""},{"name":"value3","nativeSrc":"336:6:63","nodeType":"YulTypedName","src":"336:6:63","type":""},{"name":"value4","nativeSrc":"344:6:63","nodeType":"YulTypedName","src":"344:6:63","type":""}],"src":"215:803:63"},{"body":{"nativeSrc":"1122:149:63","nodeType":"YulBlock","src":"1122:149:63","statements":[{"nativeSrc":"1132:26:63","nodeType":"YulAssignment","src":"1132:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1144:9:63","nodeType":"YulIdentifier","src":"1144:9:63"},{"kind":"number","nativeSrc":"1155:2:63","nodeType":"YulLiteral","src":"1155:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1140:3:63","nodeType":"YulIdentifier","src":"1140:3:63"},"nativeSrc":"1140:18:63","nodeType":"YulFunctionCall","src":"1140:18:63"},"variableNames":[{"name":"tail","nativeSrc":"1132:4:63","nodeType":"YulIdentifier","src":"1132:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1174:9:63","nodeType":"YulIdentifier","src":"1174:9:63"},{"arguments":[{"name":"value0","nativeSrc":"1189:6:63","nodeType":"YulIdentifier","src":"1189:6:63"},{"kind":"number","nativeSrc":"1197:66:63","nodeType":"YulLiteral","src":"1197:66:63","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"1185:3:63","nodeType":"YulIdentifier","src":"1185:3:63"},"nativeSrc":"1185:79:63","nodeType":"YulFunctionCall","src":"1185:79:63"}],"functionName":{"name":"mstore","nativeSrc":"1167:6:63","nodeType":"YulIdentifier","src":"1167:6:63"},"nativeSrc":"1167:98:63","nodeType":"YulFunctionCall","src":"1167:98:63"},"nativeSrc":"1167:98:63","nodeType":"YulExpressionStatement","src":"1167:98:63"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"1023:248:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1091:9:63","nodeType":"YulTypedName","src":"1091:9:63","type":""},{"name":"value0","nativeSrc":"1102:6:63","nodeType":"YulTypedName","src":"1102:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1113:4:63","nodeType":"YulTypedName","src":"1113:4:63","type":""}],"src":"1023:248:63"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_1, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c80634fc3585914610030575b600080fd5b61006861003e3660046100c6565b7f4fc358590000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100c157600080fd5b919050565b6000806000806000608086880312156100de57600080fd5b6100e78661009d565b94506100f56020870161009d565b935060408601359250606086013567ffffffffffffffff81111561011857600080fd5b8601601f8101881361012957600080fd5b803567ffffffffffffffff81111561014057600080fd5b88602082840101111561015257600080fd5b95989497509295505050602001919056fea2646970667358221220bd8700687f44bbeeb29e64bf712b32acbeec6dc976e13a32fcb070b77bfd8eaa64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x68 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xC6 JUMP JUMPDEST PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 DUP7 PUSH2 0x9D JUMP JUMPDEST SWAP5 POP PUSH2 0xF5 PUSH1 0x20 DUP8 ADD PUSH2 0x9D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD DUP8 STOP PUSH9 0x7F44BBEEB29E64BF71 0x2B ORIGIN 0xAC 0xBE 0xEC PUSH14 0xC976E13A32FCB070B77BFD8EAA64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"184:186:56:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;235:133;;;;;;:::i;:::-;344:17;235:133;;;;;;;;;;;1197:66:63;1185:79;;;1167:98;;1155:2;1140:18;235:133:56;;;;;;;14:196:63;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:803::-;312:6;320;328;336;344;397:3;385:9;376:7;372:23;368:33;365:53;;;414:1;411;404:12;365:53;437:29;456:9;437:29;:::i;:::-;427:39;;485:38;519:2;508:9;504:18;485:38;:::i;:::-;475:48;;570:2;559:9;555:18;542:32;532:42;;625:2;614:9;610:18;597:32;652:18;644:6;641:30;638:50;;;684:1;681;674:12;638:50;707:22;;760:4;752:13;;748:27;-1:-1:-1;738:55:63;;789:1;786;779:12;738:55;829:2;816:16;855:18;847:6;844:30;841:50;;;887:1;884;877:12;841:50;932:7;927:2;918:6;914:2;910:15;906:24;903:37;900:57;;;953:1;950;943:12;900:57;215:803;;;;-1:-1:-1;215:803:63;;-1:-1:-1;;;984:2:63;976:11;;1006:6;215:803::o"},"gasEstimates":{"creation":{"codeDepositCost":"81800","executionCost":"129","totalCost":"81929"},"external":{"onERC20Received(address,address,uint256,bytes)":"infinite"}},"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/ERC20/ERC20ReceiverMock.sol\":\"ERC20ReceiverMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"contracts/mocks/ERC20/ERC20ReceiverMock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\\\";\\n\\ncontract ERC20ReceiverMock is IERC20Receiver {\\n    function onERC20Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\\n        return 0x4fc35859;\\n    }\\n}\\n\",\"keccak256\":\"0xa458764de6d35e6aae91c7dfb03bfadf33072163208927a87f0b1fe2a0b3c130\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/ERC20/ERC20SafeTransfersAlwaysFailedMock.sol":{"ERC20SafeTransfersAlwaysFailedMock":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b506101f18061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b88d4fde1461003b578063eb79554914610068575b600080fd5b6100546100493660046100f2565b600095945050505050565b604051901515815260200160405180910390f35b610054610076366004610161565b6000949350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100a457600080fd5b919050565b60008083601f8401126100bb57600080fd5b50813567ffffffffffffffff8111156100d357600080fd5b6020830191508360208285010111156100eb57600080fd5b9250929050565b60008060008060006080868803121561010a57600080fd5b61011386610080565b945061012160208701610080565b935060408601359250606086013567ffffffffffffffff81111561014457600080fd5b610150888289016100a9565b969995985093965092949392505050565b6000806000806060858703121561017757600080fd5b61018085610080565b935060208501359250604085013567ffffffffffffffff8111156101a357600080fd5b6101af878288016100a9565b9598949750955050505056fea2646970667358221220f1e161e2a8589b806d287fbf2418f27e5d190acb745e1f56c3d42e858e17506964736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xEB795549 EQ PUSH2 0x68 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0xF2 JUMP JUMPDEST PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54 PUSH2 0x76 CALLDATASIZE PUSH1 0x4 PUSH2 0x161 JUMP JUMPDEST PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x113 DUP7 PUSH2 0x80 JUMP JUMPDEST SWAP5 POP PUSH2 0x121 PUSH1 0x20 DUP8 ADD PUSH2 0x80 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x150 DUP9 DUP3 DUP10 ADD PUSH2 0xA9 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x180 DUP6 PUSH2 0x80 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF DUP8 DUP3 DUP9 ADD PUSH2 0xA9 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE1 PUSH2 0xE2A8 PC SWAP12 DUP1 PUSH14 0x287FBF2418F27E5D190ACB745E1F JUMP 0xC3 0xD4 0x2E DUP6 DUP15 OR POP PUSH10 0x64736F6C634300081C00 CALLER ","sourceMap":"193:322:57:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@safeTransferFrom_5879":{"entryPoint":null,"id":5879,"parameterSlots":5,"returnSlots":1},"@safeTransfer_5863":{"entryPoint":null,"id":5863,"parameterSlots":4,"returnSlots":1},"abi_decode_address":{"entryPoint":128,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":169,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":242,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":353,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:2035:63","nodeType":"YulBlock","src":"0:2035:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"63:147:63","nodeType":"YulBlock","src":"63:147:63","statements":[{"nativeSrc":"73:29:63","nodeType":"YulAssignment","src":"73:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"95:6:63","nodeType":"YulIdentifier","src":"95:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"82:12:63","nodeType":"YulIdentifier","src":"82:12:63"},"nativeSrc":"82:20:63","nodeType":"YulFunctionCall","src":"82:20:63"},"variableNames":[{"name":"value","nativeSrc":"73:5:63","nodeType":"YulIdentifier","src":"73:5:63"}]},{"body":{"nativeSrc":"188:16:63","nodeType":"YulBlock","src":"188:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"197:1:63","nodeType":"YulLiteral","src":"197:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"200:1:63","nodeType":"YulLiteral","src":"200:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"190:6:63","nodeType":"YulIdentifier","src":"190:6:63"},"nativeSrc":"190:12:63","nodeType":"YulFunctionCall","src":"190:12:63"},"nativeSrc":"190:12:63","nodeType":"YulExpressionStatement","src":"190:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"124:5:63","nodeType":"YulIdentifier","src":"124:5:63"},{"arguments":[{"name":"value","nativeSrc":"135:5:63","nodeType":"YulIdentifier","src":"135:5:63"},{"kind":"number","nativeSrc":"142:42:63","nodeType":"YulLiteral","src":"142:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"131:3:63","nodeType":"YulIdentifier","src":"131:3:63"},"nativeSrc":"131:54:63","nodeType":"YulFunctionCall","src":"131:54:63"}],"functionName":{"name":"eq","nativeSrc":"121:2:63","nodeType":"YulIdentifier","src":"121:2:63"},"nativeSrc":"121:65:63","nodeType":"YulFunctionCall","src":"121:65:63"}],"functionName":{"name":"iszero","nativeSrc":"114:6:63","nodeType":"YulIdentifier","src":"114:6:63"},"nativeSrc":"114:73:63","nodeType":"YulFunctionCall","src":"114:73:63"},"nativeSrc":"111:93:63","nodeType":"YulIf","src":"111:93:63"}]},"name":"abi_decode_address","nativeSrc":"14:196:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"42:6:63","nodeType":"YulTypedName","src":"42:6:63","type":""}],"returnVariables":[{"name":"value","nativeSrc":"53:5:63","nodeType":"YulTypedName","src":"53:5:63","type":""}],"src":"14:196:63"},{"body":{"nativeSrc":"287:275:63","nodeType":"YulBlock","src":"287:275:63","statements":[{"body":{"nativeSrc":"336:16:63","nodeType":"YulBlock","src":"336:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"345:1:63","nodeType":"YulLiteral","src":"345:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"348:1:63","nodeType":"YulLiteral","src":"348:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"338:6:63","nodeType":"YulIdentifier","src":"338:6:63"},"nativeSrc":"338:12:63","nodeType":"YulFunctionCall","src":"338:12:63"},"nativeSrc":"338:12:63","nodeType":"YulExpressionStatement","src":"338:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"315:6:63","nodeType":"YulIdentifier","src":"315:6:63"},{"kind":"number","nativeSrc":"323:4:63","nodeType":"YulLiteral","src":"323:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"311:3:63","nodeType":"YulIdentifier","src":"311:3:63"},"nativeSrc":"311:17:63","nodeType":"YulFunctionCall","src":"311:17:63"},{"name":"end","nativeSrc":"330:3:63","nodeType":"YulIdentifier","src":"330:3:63"}],"functionName":{"name":"slt","nativeSrc":"307:3:63","nodeType":"YulIdentifier","src":"307:3:63"},"nativeSrc":"307:27:63","nodeType":"YulFunctionCall","src":"307:27:63"}],"functionName":{"name":"iszero","nativeSrc":"300:6:63","nodeType":"YulIdentifier","src":"300:6:63"},"nativeSrc":"300:35:63","nodeType":"YulFunctionCall","src":"300:35:63"},"nativeSrc":"297:55:63","nodeType":"YulIf","src":"297:55:63"},{"nativeSrc":"361:30:63","nodeType":"YulAssignment","src":"361:30:63","value":{"arguments":[{"name":"offset","nativeSrc":"384:6:63","nodeType":"YulIdentifier","src":"384:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"371:12:63","nodeType":"YulIdentifier","src":"371:12:63"},"nativeSrc":"371:20:63","nodeType":"YulFunctionCall","src":"371:20:63"},"variableNames":[{"name":"length","nativeSrc":"361:6:63","nodeType":"YulIdentifier","src":"361:6:63"}]},{"body":{"nativeSrc":"434:16:63","nodeType":"YulBlock","src":"434:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"443:1:63","nodeType":"YulLiteral","src":"443:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"446:1:63","nodeType":"YulLiteral","src":"446:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"436:6:63","nodeType":"YulIdentifier","src":"436:6:63"},"nativeSrc":"436:12:63","nodeType":"YulFunctionCall","src":"436:12:63"},"nativeSrc":"436:12:63","nodeType":"YulExpressionStatement","src":"436:12:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"406:6:63","nodeType":"YulIdentifier","src":"406:6:63"},{"kind":"number","nativeSrc":"414:18:63","nodeType":"YulLiteral","src":"414:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"403:2:63","nodeType":"YulIdentifier","src":"403:2:63"},"nativeSrc":"403:30:63","nodeType":"YulFunctionCall","src":"403:30:63"},"nativeSrc":"400:50:63","nodeType":"YulIf","src":"400:50:63"},{"nativeSrc":"459:29:63","nodeType":"YulAssignment","src":"459:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"475:6:63","nodeType":"YulIdentifier","src":"475:6:63"},{"kind":"number","nativeSrc":"483:4:63","nodeType":"YulLiteral","src":"483:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"471:3:63","nodeType":"YulIdentifier","src":"471:3:63"},"nativeSrc":"471:17:63","nodeType":"YulFunctionCall","src":"471:17:63"},"variableNames":[{"name":"arrayPos","nativeSrc":"459:8:63","nodeType":"YulIdentifier","src":"459:8:63"}]},{"body":{"nativeSrc":"540:16:63","nodeType":"YulBlock","src":"540:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"549:1:63","nodeType":"YulLiteral","src":"549:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"552:1:63","nodeType":"YulLiteral","src":"552:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"542:6:63","nodeType":"YulIdentifier","src":"542:6:63"},"nativeSrc":"542:12:63","nodeType":"YulFunctionCall","src":"542:12:63"},"nativeSrc":"542:12:63","nodeType":"YulExpressionStatement","src":"542:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"511:6:63","nodeType":"YulIdentifier","src":"511:6:63"},{"name":"length","nativeSrc":"519:6:63","nodeType":"YulIdentifier","src":"519:6:63"}],"functionName":{"name":"add","nativeSrc":"507:3:63","nodeType":"YulIdentifier","src":"507:3:63"},"nativeSrc":"507:19:63","nodeType":"YulFunctionCall","src":"507:19:63"},{"kind":"number","nativeSrc":"528:4:63","nodeType":"YulLiteral","src":"528:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"503:3:63","nodeType":"YulIdentifier","src":"503:3:63"},"nativeSrc":"503:30:63","nodeType":"YulFunctionCall","src":"503:30:63"},{"name":"end","nativeSrc":"535:3:63","nodeType":"YulIdentifier","src":"535:3:63"}],"functionName":{"name":"gt","nativeSrc":"500:2:63","nodeType":"YulIdentifier","src":"500:2:63"},"nativeSrc":"500:39:63","nodeType":"YulFunctionCall","src":"500:39:63"},"nativeSrc":"497:59:63","nodeType":"YulIf","src":"497:59:63"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"215:347:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"250:6:63","nodeType":"YulTypedName","src":"250:6:63","type":""},{"name":"end","nativeSrc":"258:3:63","nodeType":"YulTypedName","src":"258:3:63","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"266:8:63","nodeType":"YulTypedName","src":"266:8:63","type":""},{"name":"length","nativeSrc":"276:6:63","nodeType":"YulTypedName","src":"276:6:63","type":""}],"src":"215:347:63"},{"body":{"nativeSrc":"707:532:63","nodeType":"YulBlock","src":"707:532:63","statements":[{"body":{"nativeSrc":"754:16:63","nodeType":"YulBlock","src":"754:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"763:1:63","nodeType":"YulLiteral","src":"763:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"766:1:63","nodeType":"YulLiteral","src":"766:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"756:6:63","nodeType":"YulIdentifier","src":"756:6:63"},"nativeSrc":"756:12:63","nodeType":"YulFunctionCall","src":"756:12:63"},"nativeSrc":"756:12:63","nodeType":"YulExpressionStatement","src":"756:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"728:7:63","nodeType":"YulIdentifier","src":"728:7:63"},{"name":"headStart","nativeSrc":"737:9:63","nodeType":"YulIdentifier","src":"737:9:63"}],"functionName":{"name":"sub","nativeSrc":"724:3:63","nodeType":"YulIdentifier","src":"724:3:63"},"nativeSrc":"724:23:63","nodeType":"YulFunctionCall","src":"724:23:63"},{"kind":"number","nativeSrc":"749:3:63","nodeType":"YulLiteral","src":"749:3:63","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"720:3:63","nodeType":"YulIdentifier","src":"720:3:63"},"nativeSrc":"720:33:63","nodeType":"YulFunctionCall","src":"720:33:63"},"nativeSrc":"717:53:63","nodeType":"YulIf","src":"717:53:63"},{"nativeSrc":"779:39:63","nodeType":"YulAssignment","src":"779:39:63","value":{"arguments":[{"name":"headStart","nativeSrc":"808:9:63","nodeType":"YulIdentifier","src":"808:9:63"}],"functionName":{"name":"abi_decode_address","nativeSrc":"789:18:63","nodeType":"YulIdentifier","src":"789:18:63"},"nativeSrc":"789:29:63","nodeType":"YulFunctionCall","src":"789:29:63"},"variableNames":[{"name":"value0","nativeSrc":"779:6:63","nodeType":"YulIdentifier","src":"779:6:63"}]},{"nativeSrc":"827:48:63","nodeType":"YulAssignment","src":"827:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"860:9:63","nodeType":"YulIdentifier","src":"860:9:63"},{"kind":"number","nativeSrc":"871:2:63","nodeType":"YulLiteral","src":"871:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"856:3:63","nodeType":"YulIdentifier","src":"856:3:63"},"nativeSrc":"856:18:63","nodeType":"YulFunctionCall","src":"856:18:63"}],"functionName":{"name":"abi_decode_address","nativeSrc":"837:18:63","nodeType":"YulIdentifier","src":"837:18:63"},"nativeSrc":"837:38:63","nodeType":"YulFunctionCall","src":"837:38:63"},"variableNames":[{"name":"value1","nativeSrc":"827:6:63","nodeType":"YulIdentifier","src":"827:6:63"}]},{"nativeSrc":"884:14:63","nodeType":"YulVariableDeclaration","src":"884:14:63","value":{"kind":"number","nativeSrc":"897:1:63","nodeType":"YulLiteral","src":"897:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"888:5:63","nodeType":"YulTypedName","src":"888:5:63","type":""}]},{"nativeSrc":"907:41:63","nodeType":"YulAssignment","src":"907:41:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"933:9:63","nodeType":"YulIdentifier","src":"933:9:63"},{"kind":"number","nativeSrc":"944:2:63","nodeType":"YulLiteral","src":"944:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"929:3:63","nodeType":"YulIdentifier","src":"929:3:63"},"nativeSrc":"929:18:63","nodeType":"YulFunctionCall","src":"929:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"916:12:63","nodeType":"YulIdentifier","src":"916:12:63"},"nativeSrc":"916:32:63","nodeType":"YulFunctionCall","src":"916:32:63"},"variableNames":[{"name":"value","nativeSrc":"907:5:63","nodeType":"YulIdentifier","src":"907:5:63"}]},{"nativeSrc":"957:15:63","nodeType":"YulAssignment","src":"957:15:63","value":{"name":"value","nativeSrc":"967:5:63","nodeType":"YulIdentifier","src":"967:5:63"},"variableNames":[{"name":"value2","nativeSrc":"957:6:63","nodeType":"YulIdentifier","src":"957:6:63"}]},{"nativeSrc":"981:46:63","nodeType":"YulVariableDeclaration","src":"981:46:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1012:9:63","nodeType":"YulIdentifier","src":"1012:9:63"},{"kind":"number","nativeSrc":"1023:2:63","nodeType":"YulLiteral","src":"1023:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1008:3:63","nodeType":"YulIdentifier","src":"1008:3:63"},"nativeSrc":"1008:18:63","nodeType":"YulFunctionCall","src":"1008:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"995:12:63","nodeType":"YulIdentifier","src":"995:12:63"},"nativeSrc":"995:32:63","nodeType":"YulFunctionCall","src":"995:32:63"},"variables":[{"name":"offset","nativeSrc":"985:6:63","nodeType":"YulTypedName","src":"985:6:63","type":""}]},{"body":{"nativeSrc":"1070:16:63","nodeType":"YulBlock","src":"1070:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1079:1:63","nodeType":"YulLiteral","src":"1079:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1082:1:63","nodeType":"YulLiteral","src":"1082:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1072:6:63","nodeType":"YulIdentifier","src":"1072:6:63"},"nativeSrc":"1072:12:63","nodeType":"YulFunctionCall","src":"1072:12:63"},"nativeSrc":"1072:12:63","nodeType":"YulExpressionStatement","src":"1072:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1042:6:63","nodeType":"YulIdentifier","src":"1042:6:63"},{"kind":"number","nativeSrc":"1050:18:63","nodeType":"YulLiteral","src":"1050:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1039:2:63","nodeType":"YulIdentifier","src":"1039:2:63"},"nativeSrc":"1039:30:63","nodeType":"YulFunctionCall","src":"1039:30:63"},"nativeSrc":"1036:50:63","nodeType":"YulIf","src":"1036:50:63"},{"nativeSrc":"1095:84:63","nodeType":"YulVariableDeclaration","src":"1095:84:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:63","nodeType":"YulIdentifier","src":"1151:9:63"},{"name":"offset","nativeSrc":"1162:6:63","nodeType":"YulIdentifier","src":"1162:6:63"}],"functionName":{"name":"add","nativeSrc":"1147:3:63","nodeType":"YulIdentifier","src":"1147:3:63"},"nativeSrc":"1147:22:63","nodeType":"YulFunctionCall","src":"1147:22:63"},{"name":"dataEnd","nativeSrc":"1171:7:63","nodeType":"YulIdentifier","src":"1171:7:63"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1121:25:63","nodeType":"YulIdentifier","src":"1121:25:63"},"nativeSrc":"1121:58:63","nodeType":"YulFunctionCall","src":"1121:58:63"},"variables":[{"name":"value3_1","nativeSrc":"1099:8:63","nodeType":"YulTypedName","src":"1099:8:63","type":""},{"name":"value4_1","nativeSrc":"1109:8:63","nodeType":"YulTypedName","src":"1109:8:63","type":""}]},{"nativeSrc":"1188:18:63","nodeType":"YulAssignment","src":"1188:18:63","value":{"name":"value3_1","nativeSrc":"1198:8:63","nodeType":"YulIdentifier","src":"1198:8:63"},"variableNames":[{"name":"value3","nativeSrc":"1188:6:63","nodeType":"YulIdentifier","src":"1188:6:63"}]},{"nativeSrc":"1215:18:63","nodeType":"YulAssignment","src":"1215:18:63","value":{"name":"value4_1","nativeSrc":"1225:8:63","nodeType":"YulIdentifier","src":"1225:8:63"},"variableNames":[{"name":"value4","nativeSrc":"1215:6:63","nodeType":"YulIdentifier","src":"1215:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"567:672:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"641:9:63","nodeType":"YulTypedName","src":"641:9:63","type":""},{"name":"dataEnd","nativeSrc":"652:7:63","nodeType":"YulTypedName","src":"652:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"664:6:63","nodeType":"YulTypedName","src":"664:6:63","type":""},{"name":"value1","nativeSrc":"672:6:63","nodeType":"YulTypedName","src":"672:6:63","type":""},{"name":"value2","nativeSrc":"680:6:63","nodeType":"YulTypedName","src":"680:6:63","type":""},{"name":"value3","nativeSrc":"688:6:63","nodeType":"YulTypedName","src":"688:6:63","type":""},{"name":"value4","nativeSrc":"696:6:63","nodeType":"YulTypedName","src":"696:6:63","type":""}],"src":"567:672:63"},{"body":{"nativeSrc":"1339:92:63","nodeType":"YulBlock","src":"1339:92:63","statements":[{"nativeSrc":"1349:26:63","nodeType":"YulAssignment","src":"1349:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1361:9:63","nodeType":"YulIdentifier","src":"1361:9:63"},{"kind":"number","nativeSrc":"1372:2:63","nodeType":"YulLiteral","src":"1372:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1357:3:63","nodeType":"YulIdentifier","src":"1357:3:63"},"nativeSrc":"1357:18:63","nodeType":"YulFunctionCall","src":"1357:18:63"},"variableNames":[{"name":"tail","nativeSrc":"1349:4:63","nodeType":"YulIdentifier","src":"1349:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1391:9:63","nodeType":"YulIdentifier","src":"1391:9:63"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1416:6:63","nodeType":"YulIdentifier","src":"1416:6:63"}],"functionName":{"name":"iszero","nativeSrc":"1409:6:63","nodeType":"YulIdentifier","src":"1409:6:63"},"nativeSrc":"1409:14:63","nodeType":"YulFunctionCall","src":"1409:14:63"}],"functionName":{"name":"iszero","nativeSrc":"1402:6:63","nodeType":"YulIdentifier","src":"1402:6:63"},"nativeSrc":"1402:22:63","nodeType":"YulFunctionCall","src":"1402:22:63"}],"functionName":{"name":"mstore","nativeSrc":"1384:6:63","nodeType":"YulIdentifier","src":"1384:6:63"},"nativeSrc":"1384:41:63","nodeType":"YulFunctionCall","src":"1384:41:63"},"nativeSrc":"1384:41:63","nodeType":"YulExpressionStatement","src":"1384:41:63"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1244:187:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1308:9:63","nodeType":"YulTypedName","src":"1308:9:63","type":""},{"name":"value0","nativeSrc":"1319:6:63","nodeType":"YulTypedName","src":"1319:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1330:4:63","nodeType":"YulTypedName","src":"1330:4:63","type":""}],"src":"1244:187:63"},{"body":{"nativeSrc":"1559:474:63","nodeType":"YulBlock","src":"1559:474:63","statements":[{"body":{"nativeSrc":"1605:16:63","nodeType":"YulBlock","src":"1605:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1614:1:63","nodeType":"YulLiteral","src":"1614:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1617:1:63","nodeType":"YulLiteral","src":"1617:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1607:6:63","nodeType":"YulIdentifier","src":"1607:6:63"},"nativeSrc":"1607:12:63","nodeType":"YulFunctionCall","src":"1607:12:63"},"nativeSrc":"1607:12:63","nodeType":"YulExpressionStatement","src":"1607:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1580:7:63","nodeType":"YulIdentifier","src":"1580:7:63"},{"name":"headStart","nativeSrc":"1589:9:63","nodeType":"YulIdentifier","src":"1589:9:63"}],"functionName":{"name":"sub","nativeSrc":"1576:3:63","nodeType":"YulIdentifier","src":"1576:3:63"},"nativeSrc":"1576:23:63","nodeType":"YulFunctionCall","src":"1576:23:63"},{"kind":"number","nativeSrc":"1601:2:63","nodeType":"YulLiteral","src":"1601:2:63","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"1572:3:63","nodeType":"YulIdentifier","src":"1572:3:63"},"nativeSrc":"1572:32:63","nodeType":"YulFunctionCall","src":"1572:32:63"},"nativeSrc":"1569:52:63","nodeType":"YulIf","src":"1569:52:63"},{"nativeSrc":"1630:39:63","nodeType":"YulAssignment","src":"1630:39:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1659:9:63","nodeType":"YulIdentifier","src":"1659:9:63"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1640:18:63","nodeType":"YulIdentifier","src":"1640:18:63"},"nativeSrc":"1640:29:63","nodeType":"YulFunctionCall","src":"1640:29:63"},"variableNames":[{"name":"value0","nativeSrc":"1630:6:63","nodeType":"YulIdentifier","src":"1630:6:63"}]},{"nativeSrc":"1678:14:63","nodeType":"YulVariableDeclaration","src":"1678:14:63","value":{"kind":"number","nativeSrc":"1691:1:63","nodeType":"YulLiteral","src":"1691:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1682:5:63","nodeType":"YulTypedName","src":"1682:5:63","type":""}]},{"nativeSrc":"1701:41:63","nodeType":"YulAssignment","src":"1701:41:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1727:9:63","nodeType":"YulIdentifier","src":"1727:9:63"},{"kind":"number","nativeSrc":"1738:2:63","nodeType":"YulLiteral","src":"1738:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1723:3:63","nodeType":"YulIdentifier","src":"1723:3:63"},"nativeSrc":"1723:18:63","nodeType":"YulFunctionCall","src":"1723:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"1710:12:63","nodeType":"YulIdentifier","src":"1710:12:63"},"nativeSrc":"1710:32:63","nodeType":"YulFunctionCall","src":"1710:32:63"},"variableNames":[{"name":"value","nativeSrc":"1701:5:63","nodeType":"YulIdentifier","src":"1701:5:63"}]},{"nativeSrc":"1751:15:63","nodeType":"YulAssignment","src":"1751:15:63","value":{"name":"value","nativeSrc":"1761:5:63","nodeType":"YulIdentifier","src":"1761:5:63"},"variableNames":[{"name":"value1","nativeSrc":"1751:6:63","nodeType":"YulIdentifier","src":"1751:6:63"}]},{"nativeSrc":"1775:46:63","nodeType":"YulVariableDeclaration","src":"1775:46:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1806:9:63","nodeType":"YulIdentifier","src":"1806:9:63"},{"kind":"number","nativeSrc":"1817:2:63","nodeType":"YulLiteral","src":"1817:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1802:3:63","nodeType":"YulIdentifier","src":"1802:3:63"},"nativeSrc":"1802:18:63","nodeType":"YulFunctionCall","src":"1802:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"1789:12:63","nodeType":"YulIdentifier","src":"1789:12:63"},"nativeSrc":"1789:32:63","nodeType":"YulFunctionCall","src":"1789:32:63"},"variables":[{"name":"offset","nativeSrc":"1779:6:63","nodeType":"YulTypedName","src":"1779:6:63","type":""}]},{"body":{"nativeSrc":"1864:16:63","nodeType":"YulBlock","src":"1864:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1873:1:63","nodeType":"YulLiteral","src":"1873:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1876:1:63","nodeType":"YulLiteral","src":"1876:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1866:6:63","nodeType":"YulIdentifier","src":"1866:6:63"},"nativeSrc":"1866:12:63","nodeType":"YulFunctionCall","src":"1866:12:63"},"nativeSrc":"1866:12:63","nodeType":"YulExpressionStatement","src":"1866:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1836:6:63","nodeType":"YulIdentifier","src":"1836:6:63"},{"kind":"number","nativeSrc":"1844:18:63","nodeType":"YulLiteral","src":"1844:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1833:2:63","nodeType":"YulIdentifier","src":"1833:2:63"},"nativeSrc":"1833:30:63","nodeType":"YulFunctionCall","src":"1833:30:63"},"nativeSrc":"1830:50:63","nodeType":"YulIf","src":"1830:50:63"},{"nativeSrc":"1889:84:63","nodeType":"YulVariableDeclaration","src":"1889:84:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1945:9:63","nodeType":"YulIdentifier","src":"1945:9:63"},{"name":"offset","nativeSrc":"1956:6:63","nodeType":"YulIdentifier","src":"1956:6:63"}],"functionName":{"name":"add","nativeSrc":"1941:3:63","nodeType":"YulIdentifier","src":"1941:3:63"},"nativeSrc":"1941:22:63","nodeType":"YulFunctionCall","src":"1941:22:63"},{"name":"dataEnd","nativeSrc":"1965:7:63","nodeType":"YulIdentifier","src":"1965:7:63"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1915:25:63","nodeType":"YulIdentifier","src":"1915:25:63"},"nativeSrc":"1915:58:63","nodeType":"YulFunctionCall","src":"1915:58:63"},"variables":[{"name":"value2_1","nativeSrc":"1893:8:63","nodeType":"YulTypedName","src":"1893:8:63","type":""},{"name":"value3_1","nativeSrc":"1903:8:63","nodeType":"YulTypedName","src":"1903:8:63","type":""}]},{"nativeSrc":"1982:18:63","nodeType":"YulAssignment","src":"1982:18:63","value":{"name":"value2_1","nativeSrc":"1992:8:63","nodeType":"YulIdentifier","src":"1992:8:63"},"variableNames":[{"name":"value2","nativeSrc":"1982:6:63","nodeType":"YulIdentifier","src":"1982:6:63"}]},{"nativeSrc":"2009:18:63","nodeType":"YulAssignment","src":"2009:18:63","value":{"name":"value3_1","nativeSrc":"2019:8:63","nodeType":"YulIdentifier","src":"2019:8:63"},"variableNames":[{"name":"value3","nativeSrc":"2009:6:63","nodeType":"YulIdentifier","src":"2009:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"1436:597:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1501:9:63","nodeType":"YulTypedName","src":"1501:9:63","type":""},{"name":"dataEnd","nativeSrc":"1512:7:63","nodeType":"YulTypedName","src":"1512:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1524:6:63","nodeType":"YulTypedName","src":"1524:6:63","type":""},{"name":"value1","nativeSrc":"1532:6:63","nodeType":"YulTypedName","src":"1532:6:63","type":""},{"name":"value2","nativeSrc":"1540:6:63","nodeType":"YulTypedName","src":"1540:6:63","type":""},{"name":"value3","nativeSrc":"1548:6:63","nodeType":"YulTypedName","src":"1548:6:63","type":""}],"src":"1436:597:63"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c8063b88d4fde1461003b578063eb79554914610068575b600080fd5b6100546100493660046100f2565b600095945050505050565b604051901515815260200160405180910390f35b610054610076366004610161565b6000949350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100a457600080fd5b919050565b60008083601f8401126100bb57600080fd5b50813567ffffffffffffffff8111156100d357600080fd5b6020830191508360208285010111156100eb57600080fd5b9250929050565b60008060008060006080868803121561010a57600080fd5b61011386610080565b945061012160208701610080565b935060408601359250606086013567ffffffffffffffff81111561014457600080fd5b610150888289016100a9565b969995985093965092949392505050565b6000806000806060858703121561017757600080fd5b61018085610080565b935060208501359250604085013567ffffffffffffffff8111156101a357600080fd5b6101af878288016100a9565b9598949750955050505056fea2646970667358221220f1e161e2a8589b806d287fbf2418f27e5d190acb745e1f56c3d42e858e17506964736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xEB795549 EQ PUSH2 0x68 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0xF2 JUMP JUMPDEST PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54 PUSH2 0x76 CALLDATASIZE PUSH1 0x4 PUSH2 0x161 JUMP JUMPDEST PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x113 DUP7 PUSH2 0x80 JUMP JUMPDEST SWAP5 POP PUSH2 0x121 PUSH1 0x20 DUP8 ADD PUSH2 0x80 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x150 DUP9 DUP3 DUP10 ADD PUSH2 0xA9 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x180 DUP6 PUSH2 0x80 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF DUP8 DUP3 DUP9 ADD PUSH2 0xA9 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE1 PUSH2 0xE2A8 PC SWAP12 DUP1 PUSH14 0x287FBF2418F27E5D190ACB745E1F JUMP 0xC3 0xD4 0x2E DUP6 DUP15 OR POP PUSH10 0x64736F6C634300081C00 CALLER ","sourceMap":"193:322:57:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;386:127;;;;;;:::i;:::-;478:4;386:127;;;;;;;;;;;1409:14:63;;1402:22;1384:41;;1372:2;1357:18;386:127:57;;;;;;;266:114;;;;;;:::i;:::-;345:4;266:114;;;;;;;14:196:63;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:347::-;266:8;276:6;330:3;323:4;315:6;311:17;307:27;297:55;;348:1;345;338:12;297:55;-1:-1:-1;371:20:63;;414:18;403:30;;400:50;;;446:1;443;436:12;400:50;483:4;475:6;471:17;459:29;;535:3;528:4;519:6;511;507:19;503:30;500:39;497:59;;;552:1;549;542:12;497:59;215:347;;;;;:::o;567:672::-;664:6;672;680;688;696;749:3;737:9;728:7;724:23;720:33;717:53;;;766:1;763;756:12;717:53;789:29;808:9;789:29;:::i;:::-;779:39;;837:38;871:2;860:9;856:18;837:38;:::i;:::-;827:48;-1:-1:-1;944:2:63;929:18;;916:32;;-1:-1:-1;1023:2:63;1008:18;;995:32;1050:18;1039:30;;1036:50;;;1082:1;1079;1072:12;1036:50;1121:58;1171:7;1162:6;1151:9;1147:22;1121:58;:::i;:::-;567:672;;;;-1:-1:-1;567:672:63;;-1:-1:-1;1198:8:63;;1095:84;567:672;-1:-1:-1;;;567:672:63:o;1436:597::-;1524:6;1532;1540;1548;1601:2;1589:9;1580:7;1576:23;1572:32;1569:52;;;1617:1;1614;1607:12;1569:52;1640:29;1659:9;1640:29;:::i;:::-;1630:39;-1:-1:-1;1738:2:63;1723:18;;1710:32;;-1:-1:-1;1817:2:63;1802:18;;1789:32;1844:18;1833:30;;1830:50;;;1876:1;1873;1866:12;1830:50;1915:58;1965:7;1956:6;1945:9;1941:22;1915:58;:::i;:::-;1436:597;;;;-1:-1:-1;1992:8:63;-1:-1:-1;;;;1436:597:63:o"},"gasEstimates":{"creation":{"codeDepositCost":"99400","executionCost":"147","totalCost":"99547"},"external":{"safeTransfer(address,uint256,bytes)":"598","safeTransferFrom(address,address,uint256,bytes)":"infinite"}},"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/ERC20/ERC20SafeTransfersAlwaysFailedMock.sol\":\"ERC20SafeTransfersAlwaysFailedMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"},\"contracts/mocks/ERC20/ERC20SafeTransfersAlwaysFailedMock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\nimport {IERC20SafeTransfers} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\\\";\\ncontract ERC20SafeTransfersAlwaysFailedMock is IERC20SafeTransfers {\\n    function safeTransfer(address, uint256, bytes calldata) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    function safeTransferFrom(address, address, uint256, bytes calldata) external pure returns (bool) {\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x60efd98478fe6e85c7b41958d6d86c30c2c3812c2ae751b5c6e9a318785b9426\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/points/PointsMock.sol":{"PointsMock":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"indexed":true,"internalType":"address","name":"holder","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposited","type":"event"},{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposited(address,bytes32,address,uint256)":{"params":{"amount":"The amount deposited.","holder":"The holder of the balance deposited to.","reasonCode":"The reason code of the deposit.","sender":"The sender of the deposit."}}},"kind":"dev","methods":{"deposit(address,uint256,bytes32)":{"params":{"amount":"The amount to deposit.","depositReasonCode":"The reason code of the deposit.","holder":"The holder of the balance to deposit to."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b5061012c8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806326b3293f14602d575b600080fd5b603c603836600460aa565b603e565b005b8273ffffffffffffffffffffffffffffffffffffffff16813373ffffffffffffffffffffffffffffffffffffffff167f81226022599698f02239ac5895ce7a96962ba5fe72f8f7610d1cc2cb0405f39185604051609d91815260200190565b60405180910390a4505050565b60008060006060848603121560be57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811460e157600080fd5b9560208501359550604090940135939250505056fea26469706673582212209f00959c3503eee27db719101f579d786a4e106a8be16d3d8670722e54948f7064736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x26B3293F EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x38 CALLDATASIZE PUSH1 0x4 PUSH1 0xAA JUMP JUMPDEST PUSH1 0x3E JUMP JUMPDEST STOP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x81226022599698F02239AC5895CE7A96962BA5FE72F8F7610D1CC2CB0405F391 DUP6 PUSH1 0x40 MLOAD PUSH1 0x9D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH1 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH1 0xE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 STOP SWAP6 SWAP13 CALLDATALOAD SUB 0xEE 0xE2 PUSH30 0xB719101F579D786A4E106A8BE16D3D8670722E54948F7064736F6C634300 ADDMOD SHR STOP CALLER ","sourceMap":"118:843:58:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@deposit_5916":{"entryPoint":62,"id":5916,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_uint256t_bytes32":{"entryPoint":170,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:643:63","nodeType":"YulBlock","src":"0:643:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"118:341:63","nodeType":"YulBlock","src":"118:341:63","statements":[{"body":{"nativeSrc":"164:16:63","nodeType":"YulBlock","src":"164:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"173:1:63","nodeType":"YulLiteral","src":"173:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"176:1:63","nodeType":"YulLiteral","src":"176:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"166:6:63","nodeType":"YulIdentifier","src":"166:6:63"},"nativeSrc":"166:12:63","nodeType":"YulFunctionCall","src":"166:12:63"},"nativeSrc":"166:12:63","nodeType":"YulExpressionStatement","src":"166:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"139:7:63","nodeType":"YulIdentifier","src":"139:7:63"},{"name":"headStart","nativeSrc":"148:9:63","nodeType":"YulIdentifier","src":"148:9:63"}],"functionName":{"name":"sub","nativeSrc":"135:3:63","nodeType":"YulIdentifier","src":"135:3:63"},"nativeSrc":"135:23:63","nodeType":"YulFunctionCall","src":"135:23:63"},{"kind":"number","nativeSrc":"160:2:63","nodeType":"YulLiteral","src":"160:2:63","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"131:3:63","nodeType":"YulIdentifier","src":"131:3:63"},"nativeSrc":"131:32:63","nodeType":"YulFunctionCall","src":"131:32:63"},"nativeSrc":"128:52:63","nodeType":"YulIf","src":"128:52:63"},{"nativeSrc":"189:36:63","nodeType":"YulVariableDeclaration","src":"189:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"215:9:63","nodeType":"YulIdentifier","src":"215:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"202:12:63","nodeType":"YulIdentifier","src":"202:12:63"},"nativeSrc":"202:23:63","nodeType":"YulFunctionCall","src":"202:23:63"},"variables":[{"name":"value","nativeSrc":"193:5:63","nodeType":"YulTypedName","src":"193:5:63","type":""}]},{"body":{"nativeSrc":"311:16:63","nodeType":"YulBlock","src":"311:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"320:1:63","nodeType":"YulLiteral","src":"320:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"323:1:63","nodeType":"YulLiteral","src":"323:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"313:6:63","nodeType":"YulIdentifier","src":"313:6:63"},"nativeSrc":"313:12:63","nodeType":"YulFunctionCall","src":"313:12:63"},"nativeSrc":"313:12:63","nodeType":"YulExpressionStatement","src":"313:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"247:5:63","nodeType":"YulIdentifier","src":"247:5:63"},{"arguments":[{"name":"value","nativeSrc":"258:5:63","nodeType":"YulIdentifier","src":"258:5:63"},{"kind":"number","nativeSrc":"265:42:63","nodeType":"YulLiteral","src":"265:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"254:3:63","nodeType":"YulIdentifier","src":"254:3:63"},"nativeSrc":"254:54:63","nodeType":"YulFunctionCall","src":"254:54:63"}],"functionName":{"name":"eq","nativeSrc":"244:2:63","nodeType":"YulIdentifier","src":"244:2:63"},"nativeSrc":"244:65:63","nodeType":"YulFunctionCall","src":"244:65:63"}],"functionName":{"name":"iszero","nativeSrc":"237:6:63","nodeType":"YulIdentifier","src":"237:6:63"},"nativeSrc":"237:73:63","nodeType":"YulFunctionCall","src":"237:73:63"},"nativeSrc":"234:93:63","nodeType":"YulIf","src":"234:93:63"},{"nativeSrc":"336:15:63","nodeType":"YulAssignment","src":"336:15:63","value":{"name":"value","nativeSrc":"346:5:63","nodeType":"YulIdentifier","src":"346:5:63"},"variableNames":[{"name":"value0","nativeSrc":"336:6:63","nodeType":"YulIdentifier","src":"336:6:63"}]},{"nativeSrc":"360:42:63","nodeType":"YulAssignment","src":"360:42:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"387:9:63","nodeType":"YulIdentifier","src":"387:9:63"},{"kind":"number","nativeSrc":"398:2:63","nodeType":"YulLiteral","src":"398:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"383:3:63","nodeType":"YulIdentifier","src":"383:3:63"},"nativeSrc":"383:18:63","nodeType":"YulFunctionCall","src":"383:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"370:12:63","nodeType":"YulIdentifier","src":"370:12:63"},"nativeSrc":"370:32:63","nodeType":"YulFunctionCall","src":"370:32:63"},"variableNames":[{"name":"value1","nativeSrc":"360:6:63","nodeType":"YulIdentifier","src":"360:6:63"}]},{"nativeSrc":"411:42:63","nodeType":"YulAssignment","src":"411:42:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"438:9:63","nodeType":"YulIdentifier","src":"438:9:63"},{"kind":"number","nativeSrc":"449:2:63","nodeType":"YulLiteral","src":"449:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"434:3:63","nodeType":"YulIdentifier","src":"434:3:63"},"nativeSrc":"434:18:63","nodeType":"YulFunctionCall","src":"434:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"421:12:63","nodeType":"YulIdentifier","src":"421:12:63"},"nativeSrc":"421:32:63","nodeType":"YulFunctionCall","src":"421:32:63"},"variableNames":[{"name":"value2","nativeSrc":"411:6:63","nodeType":"YulIdentifier","src":"411:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32","nativeSrc":"14:445:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"68:9:63","nodeType":"YulTypedName","src":"68:9:63","type":""},{"name":"dataEnd","nativeSrc":"79:7:63","nodeType":"YulTypedName","src":"79:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"91:6:63","nodeType":"YulTypedName","src":"91:6:63","type":""},{"name":"value1","nativeSrc":"99:6:63","nodeType":"YulTypedName","src":"99:6:63","type":""},{"name":"value2","nativeSrc":"107:6:63","nodeType":"YulTypedName","src":"107:6:63","type":""}],"src":"14:445:63"},{"body":{"nativeSrc":"565:76:63","nodeType":"YulBlock","src":"565:76:63","statements":[{"nativeSrc":"575:26:63","nodeType":"YulAssignment","src":"575:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"587:9:63","nodeType":"YulIdentifier","src":"587:9:63"},{"kind":"number","nativeSrc":"598:2:63","nodeType":"YulLiteral","src":"598:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"583:3:63","nodeType":"YulIdentifier","src":"583:3:63"},"nativeSrc":"583:18:63","nodeType":"YulFunctionCall","src":"583:18:63"},"variableNames":[{"name":"tail","nativeSrc":"575:4:63","nodeType":"YulIdentifier","src":"575:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"617:9:63","nodeType":"YulIdentifier","src":"617:9:63"},{"name":"value0","nativeSrc":"628:6:63","nodeType":"YulIdentifier","src":"628:6:63"}],"functionName":{"name":"mstore","nativeSrc":"610:6:63","nodeType":"YulIdentifier","src":"610:6:63"},"nativeSrc":"610:25:63","nodeType":"YulFunctionCall","src":"610:25:63"},"nativeSrc":"610:25:63","nodeType":"YulExpressionStatement","src":"610:25:63"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"464:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"534:9:63","nodeType":"YulTypedName","src":"534:9:63","type":""},{"name":"value0","nativeSrc":"545:6:63","nodeType":"YulTypedName","src":"545:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"556:4:63","nodeType":"YulTypedName","src":"556:4:63","type":""}],"src":"464:177:63"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_addresst_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052348015600f57600080fd5b506004361060285760003560e01c806326b3293f14602d575b600080fd5b603c603836600460aa565b603e565b005b8273ffffffffffffffffffffffffffffffffffffffff16813373ffffffffffffffffffffffffffffffffffffffff167f81226022599698f02239ac5895ce7a96962ba5fe72f8f7610d1cc2cb0405f39185604051609d91815260200190565b60405180910390a4505050565b60008060006060848603121560be57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811460e157600080fd5b9560208501359550604090940135939250505056fea26469706673582212209f00959c3503eee27db719101f579d786a4e106a8be16d3d8670722e54948f7064736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x26B3293F EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x38 CALLDATASIZE PUSH1 0x4 PUSH1 0xAA JUMP JUMPDEST PUSH1 0x3E JUMP JUMPDEST STOP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x81226022599698F02239AC5895CE7A96962BA5FE72F8F7610D1CC2CB0405F391 DUP6 PUSH1 0x40 MLOAD PUSH1 0x9D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH1 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH1 0xE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 STOP SWAP6 SWAP13 CALLDATALOAD SUB 0xEE 0xE2 PUSH30 0xB719101F579D786A4E106A8BE16D3D8670722E54948F7064736F6C634300 ADDMOD SHR STOP CALLER ","sourceMap":"118:843:58:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;796:163;;;;;;:::i;:::-;;:::i;:::-;;;937:6;896:56;;918:17;906:10;896:56;;;945:6;896:56;;;;610:25:63;;598:2;583:18;;464:177;896:56:58;;;;;;;;796:163;;;:::o;14:445:63:-;91:6;99;107;160:2;148:9;139:7;135:23;131:32;128:52;;;176:1;173;166:12;128:52;215:9;202:23;265:42;258:5;254:54;247:5;244:65;234:93;;323:1;320;313:12;234:93;346:5;398:2;383:18;;370:32;;-1:-1:-1;449:2:63;434:18;;;421:32;;14:445;-1:-1:-1;;;14:445:63:o"},"gasEstimates":{"creation":{"codeDepositCost":"60000","executionCost":"111","totalCost":"60111"},"external":{"deposit(address,uint256,bytes32)":"2497"}},"methodIdentifiers":{"deposit(address,uint256,bytes32)":"26b3293f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposited(address,bytes32,address,uint256)\":{\"params\":{\"amount\":\"The amount deposited.\",\"holder\":\"The holder of the balance deposited to.\",\"reasonCode\":\"The reason code of the deposit.\",\"sender\":\"The sender of the deposit.\"}}},\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,bytes32)\":{\"params\":{\"amount\":\"The amount to deposit.\",\"depositReasonCode\":\"The reason code of the deposit.\",\"holder\":\"The holder of the balance to deposit to.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposited(address,bytes32,address,uint256)\":{\"notice\":\"Emitted when an amount is deposited to a balance.\"}},\"kind\":\"user\",\"methods\":{\"deposit(address,uint256,bytes32)\":{\"notice\":\"Called by a depositor to increase the balance of a holder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/points/PointsMock.sol\":\"PointsMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/mocks/points/PointsMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IPoints} from \\\"../../points/interface/IPoints.sol\\\";\\n\\ncontract PointsMock is IPoints {\\n    /// @notice Emitted when an amount is deposited to a balance.\\n    /// @param sender The sender of the deposit.\\n    /// @param reasonCode The reason code of the deposit.\\n    /// @param holder The holder of the balance deposited to.\\n    /// @param amount The amount deposited.\\n    event Deposited(address indexed sender, bytes32 indexed reasonCode, address indexed holder, uint256 amount);\\n\\n    /// @notice Called by a depositor to increase the balance of a holder.\\n    /// @param holder The holder of the balance to deposit to.\\n    /// @param amount The amount to deposit.\\n    /// @param depositReasonCode The reason code of the deposit.\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external {\\n        emit Deposited(msg.sender, depositReasonCode, holder, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2ecfac59d7567e39054ec6f13f93d68834a848d174854a967df3b6b87b78135b\",\"license\":\"MIT\"},\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Deposited(address,bytes32,address,uint256)":{"notice":"Emitted when an amount is deposited to a balance."}},"kind":"user","methods":{"deposit(address,uint256,bytes32)":{"notice":"Called by a depositor to increase the balance of a holder."}},"version":1}}},"contracts/points/interface/IPoints.sol":{"IPoints":{"abi":[{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit(address,uint256,bytes32)":"26b3293f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/points/interface/IPoints.sol\":\"IPoints\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol":{"ERC20StakingPointsRewardsLimitedLinearPool":{"abi":[{"inputs":[{"internalType":"address","name":"claimContract","type":"address"},{"internalType":"contract IERC20","name":"stakingToken","type":"address"},{"internalType":"contract IPoints","name":"pointsContract","type":"address"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[{"internalType":"uint256","name":"requested","type":"uint256"},{"internalType":"uint256","name":"recoverable","type":"uint256"}],"name":"InvalidRecoveryAmount","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"InvalidTransferOperator","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"withdraw","type":"uint256"}],"name":"NotEnoughStake","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"OnlyReceiverInterface","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"CLAIM_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEPOSIT_REASON_CODE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"addReward(uint256,uint256)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.","params":{"duration":"The duration of the rewards distribution.","reward":"The amount of rewards to be added."}},"claim()":{"details":"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract."},"earned(address)":{"params":{"account":"The address of the account to check."},"returns":{"_0":"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"lastTimeRewardApplicable()":{"returns":{"_0":"The minimum of the current block timestamp and the distribution end."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"rewardPerStakePoint()":{"returns":{"_0":"The sum of the last stored value and the new rewards since the last update"}},"stake(bytes)":{"details":"Reverts with {OnlyReceiverInterface}."},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw(bytes)":{"details":"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.","params":{"withdrawData":"The data to be used for withdrawing, encoded as (uint256 value)"}}},"title":"ERC20StakingPointsRewardsLimitedLinearPool","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1324":{"entryPoint":null,"id":1324,"parameterSlots":1,"returnSlots":0},"@_1371":{"entryPoint":null,"id":1371,"parameterSlots":1,"returnSlots":0},"@_2122":{"entryPoint":null,"id":2122,"parameterSlots":1,"returnSlots":0},"@_2787":{"entryPoint":null,"id":2787,"parameterSlots":2,"returnSlots":0},"@_3063":{"entryPoint":null,"id":3063,"parameterSlots":0,"returnSlots":0},"@_4129":{"entryPoint":null,"id":4129,"parameterSlots":0,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@_5972":{"entryPoint":null,"id":5972,"parameterSlots":5,"returnSlots":0},"@_6113":{"entryPoint":null,"id":6113,"parameterSlots":5,"returnSlots":0},"@_6256":{"entryPoint":null,"id":6256,"parameterSlots":2,"returnSlots":0},"@constructorInit_705":{"entryPoint":230,"id":705,"parameterSlots":2,"returnSlots":0},"@layout_1009":{"entryPoint":341,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":178,"id":861,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_963":{"entryPoint":387,"id":963,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IERC20_$3386t_contract$_IPoints_$5929t_bytes32t_contract$_IForwarderRegistry_$1506_fromMemory":{"entryPoint":503,"id":null,"parameterSlots":2,"returnSlots":5},"checked_sub_t_uint256":{"entryPoint":610,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":479,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1156:63","nodeType":"YulBlock","src":"0:1156:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"59:86:63","nodeType":"YulBlock","src":"59:86:63","statements":[{"body":{"nativeSrc":"123:16:63","nodeType":"YulBlock","src":"123:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:63","nodeType":"YulLiteral","src":"132:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:63","nodeType":"YulLiteral","src":"135:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:63","nodeType":"YulIdentifier","src":"125:6:63"},"nativeSrc":"125:12:63","nodeType":"YulFunctionCall","src":"125:12:63"},"nativeSrc":"125:12:63","nodeType":"YulExpressionStatement","src":"125:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:63","nodeType":"YulIdentifier","src":"82:5:63"},{"arguments":[{"name":"value","nativeSrc":"93:5:63","nodeType":"YulIdentifier","src":"93:5:63"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:63","nodeType":"YulLiteral","src":"108:3:63","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:63","nodeType":"YulLiteral","src":"113:1:63","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:63","nodeType":"YulIdentifier","src":"104:3:63"},"nativeSrc":"104:11:63","nodeType":"YulFunctionCall","src":"104:11:63"},{"kind":"number","nativeSrc":"117:1:63","nodeType":"YulLiteral","src":"117:1:63","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:63","nodeType":"YulIdentifier","src":"100:3:63"},"nativeSrc":"100:19:63","nodeType":"YulFunctionCall","src":"100:19:63"}],"functionName":{"name":"and","nativeSrc":"89:3:63","nodeType":"YulIdentifier","src":"89:3:63"},"nativeSrc":"89:31:63","nodeType":"YulFunctionCall","src":"89:31:63"}],"functionName":{"name":"eq","nativeSrc":"79:2:63","nodeType":"YulIdentifier","src":"79:2:63"},"nativeSrc":"79:42:63","nodeType":"YulFunctionCall","src":"79:42:63"}],"functionName":{"name":"iszero","nativeSrc":"72:6:63","nodeType":"YulIdentifier","src":"72:6:63"},"nativeSrc":"72:50:63","nodeType":"YulFunctionCall","src":"72:50:63"},"nativeSrc":"69:70:63","nodeType":"YulIf","src":"69:70:63"}]},"name":"validator_revert_address","nativeSrc":"14:131:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:63","nodeType":"YulTypedName","src":"48:5:63","type":""}],"src":"14:131:63"},{"body":{"nativeSrc":"357:567:63","nodeType":"YulBlock","src":"357:567:63","statements":[{"body":{"nativeSrc":"404:16:63","nodeType":"YulBlock","src":"404:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"413:1:63","nodeType":"YulLiteral","src":"413:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"416:1:63","nodeType":"YulLiteral","src":"416:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"406:6:63","nodeType":"YulIdentifier","src":"406:6:63"},"nativeSrc":"406:12:63","nodeType":"YulFunctionCall","src":"406:12:63"},"nativeSrc":"406:12:63","nodeType":"YulExpressionStatement","src":"406:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"378:7:63","nodeType":"YulIdentifier","src":"378:7:63"},{"name":"headStart","nativeSrc":"387:9:63","nodeType":"YulIdentifier","src":"387:9:63"}],"functionName":{"name":"sub","nativeSrc":"374:3:63","nodeType":"YulIdentifier","src":"374:3:63"},"nativeSrc":"374:23:63","nodeType":"YulFunctionCall","src":"374:23:63"},{"kind":"number","nativeSrc":"399:3:63","nodeType":"YulLiteral","src":"399:3:63","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"370:3:63","nodeType":"YulIdentifier","src":"370:3:63"},"nativeSrc":"370:33:63","nodeType":"YulFunctionCall","src":"370:33:63"},"nativeSrc":"367:53:63","nodeType":"YulIf","src":"367:53:63"},{"nativeSrc":"429:29:63","nodeType":"YulVariableDeclaration","src":"429:29:63","value":{"arguments":[{"name":"headStart","nativeSrc":"448:9:63","nodeType":"YulIdentifier","src":"448:9:63"}],"functionName":{"name":"mload","nativeSrc":"442:5:63","nodeType":"YulIdentifier","src":"442:5:63"},"nativeSrc":"442:16:63","nodeType":"YulFunctionCall","src":"442:16:63"},"variables":[{"name":"value","nativeSrc":"433:5:63","nodeType":"YulTypedName","src":"433:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"492:5:63","nodeType":"YulIdentifier","src":"492:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"467:24:63","nodeType":"YulIdentifier","src":"467:24:63"},"nativeSrc":"467:31:63","nodeType":"YulFunctionCall","src":"467:31:63"},"nativeSrc":"467:31:63","nodeType":"YulExpressionStatement","src":"467:31:63"},{"nativeSrc":"507:15:63","nodeType":"YulAssignment","src":"507:15:63","value":{"name":"value","nativeSrc":"517:5:63","nodeType":"YulIdentifier","src":"517:5:63"},"variableNames":[{"name":"value0","nativeSrc":"507:6:63","nodeType":"YulIdentifier","src":"507:6:63"}]},{"nativeSrc":"531:40:63","nodeType":"YulVariableDeclaration","src":"531:40:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"556:9:63","nodeType":"YulIdentifier","src":"556:9:63"},{"kind":"number","nativeSrc":"567:2:63","nodeType":"YulLiteral","src":"567:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"552:3:63","nodeType":"YulIdentifier","src":"552:3:63"},"nativeSrc":"552:18:63","nodeType":"YulFunctionCall","src":"552:18:63"}],"functionName":{"name":"mload","nativeSrc":"546:5:63","nodeType":"YulIdentifier","src":"546:5:63"},"nativeSrc":"546:25:63","nodeType":"YulFunctionCall","src":"546:25:63"},"variables":[{"name":"value_1","nativeSrc":"535:7:63","nodeType":"YulTypedName","src":"535:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"605:7:63","nodeType":"YulIdentifier","src":"605:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"580:24:63","nodeType":"YulIdentifier","src":"580:24:63"},"nativeSrc":"580:33:63","nodeType":"YulFunctionCall","src":"580:33:63"},"nativeSrc":"580:33:63","nodeType":"YulExpressionStatement","src":"580:33:63"},{"nativeSrc":"622:17:63","nodeType":"YulAssignment","src":"622:17:63","value":{"name":"value_1","nativeSrc":"632:7:63","nodeType":"YulIdentifier","src":"632:7:63"},"variableNames":[{"name":"value1","nativeSrc":"622:6:63","nodeType":"YulIdentifier","src":"622:6:63"}]},{"nativeSrc":"648:40:63","nodeType":"YulVariableDeclaration","src":"648:40:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"673:9:63","nodeType":"YulIdentifier","src":"673:9:63"},{"kind":"number","nativeSrc":"684:2:63","nodeType":"YulLiteral","src":"684:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"669:3:63","nodeType":"YulIdentifier","src":"669:3:63"},"nativeSrc":"669:18:63","nodeType":"YulFunctionCall","src":"669:18:63"}],"functionName":{"name":"mload","nativeSrc":"663:5:63","nodeType":"YulIdentifier","src":"663:5:63"},"nativeSrc":"663:25:63","nodeType":"YulFunctionCall","src":"663:25:63"},"variables":[{"name":"value_2","nativeSrc":"652:7:63","nodeType":"YulTypedName","src":"652:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"722:7:63","nodeType":"YulIdentifier","src":"722:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"697:24:63","nodeType":"YulIdentifier","src":"697:24:63"},"nativeSrc":"697:33:63","nodeType":"YulFunctionCall","src":"697:33:63"},"nativeSrc":"697:33:63","nodeType":"YulExpressionStatement","src":"697:33:63"},{"nativeSrc":"739:17:63","nodeType":"YulAssignment","src":"739:17:63","value":{"name":"value_2","nativeSrc":"749:7:63","nodeType":"YulIdentifier","src":"749:7:63"},"variableNames":[{"name":"value2","nativeSrc":"739:6:63","nodeType":"YulIdentifier","src":"739:6:63"}]},{"nativeSrc":"765:35:63","nodeType":"YulAssignment","src":"765:35:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"785:9:63","nodeType":"YulIdentifier","src":"785:9:63"},{"kind":"number","nativeSrc":"796:2:63","nodeType":"YulLiteral","src":"796:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"781:3:63","nodeType":"YulIdentifier","src":"781:3:63"},"nativeSrc":"781:18:63","nodeType":"YulFunctionCall","src":"781:18:63"}],"functionName":{"name":"mload","nativeSrc":"775:5:63","nodeType":"YulIdentifier","src":"775:5:63"},"nativeSrc":"775:25:63","nodeType":"YulFunctionCall","src":"775:25:63"},"variableNames":[{"name":"value3","nativeSrc":"765:6:63","nodeType":"YulIdentifier","src":"765:6:63"}]},{"nativeSrc":"809:41:63","nodeType":"YulVariableDeclaration","src":"809:41:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"834:9:63","nodeType":"YulIdentifier","src":"834:9:63"},{"kind":"number","nativeSrc":"845:3:63","nodeType":"YulLiteral","src":"845:3:63","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"830:3:63","nodeType":"YulIdentifier","src":"830:3:63"},"nativeSrc":"830:19:63","nodeType":"YulFunctionCall","src":"830:19:63"}],"functionName":{"name":"mload","nativeSrc":"824:5:63","nodeType":"YulIdentifier","src":"824:5:63"},"nativeSrc":"824:26:63","nodeType":"YulFunctionCall","src":"824:26:63"},"variables":[{"name":"value_3","nativeSrc":"813:7:63","nodeType":"YulTypedName","src":"813:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"884:7:63","nodeType":"YulIdentifier","src":"884:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"859:24:63","nodeType":"YulIdentifier","src":"859:24:63"},"nativeSrc":"859:33:63","nodeType":"YulFunctionCall","src":"859:33:63"},"nativeSrc":"859:33:63","nodeType":"YulExpressionStatement","src":"859:33:63"},{"nativeSrc":"901:17:63","nodeType":"YulAssignment","src":"901:17:63","value":{"name":"value_3","nativeSrc":"911:7:63","nodeType":"YulIdentifier","src":"911:7:63"},"variableNames":[{"name":"value4","nativeSrc":"901:6:63","nodeType":"YulIdentifier","src":"901:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IERC20_$3386t_contract$_IPoints_$5929t_bytes32t_contract$_IForwarderRegistry_$1506_fromMemory","nativeSrc":"150:774:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"291:9:63","nodeType":"YulTypedName","src":"291:9:63","type":""},{"name":"dataEnd","nativeSrc":"302:7:63","nodeType":"YulTypedName","src":"302:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"314:6:63","nodeType":"YulTypedName","src":"314:6:63","type":""},{"name":"value1","nativeSrc":"322:6:63","nodeType":"YulTypedName","src":"322:6:63","type":""},{"name":"value2","nativeSrc":"330:6:63","nodeType":"YulTypedName","src":"330:6:63","type":""},{"name":"value3","nativeSrc":"338:6:63","nodeType":"YulTypedName","src":"338:6:63","type":""},{"name":"value4","nativeSrc":"346:6:63","nodeType":"YulTypedName","src":"346:6:63","type":""}],"src":"150:774:63"},{"body":{"nativeSrc":"978:176:63","nodeType":"YulBlock","src":"978:176:63","statements":[{"nativeSrc":"988:17:63","nodeType":"YulAssignment","src":"988:17:63","value":{"arguments":[{"name":"x","nativeSrc":"1000:1:63","nodeType":"YulIdentifier","src":"1000:1:63"},{"name":"y","nativeSrc":"1003:1:63","nodeType":"YulIdentifier","src":"1003:1:63"}],"functionName":{"name":"sub","nativeSrc":"996:3:63","nodeType":"YulIdentifier","src":"996:3:63"},"nativeSrc":"996:9:63","nodeType":"YulFunctionCall","src":"996:9:63"},"variableNames":[{"name":"diff","nativeSrc":"988:4:63","nodeType":"YulIdentifier","src":"988:4:63"}]},{"body":{"nativeSrc":"1037:111:63","nodeType":"YulBlock","src":"1037:111:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1058:1:63","nodeType":"YulLiteral","src":"1058:1:63","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1065:3:63","nodeType":"YulLiteral","src":"1065:3:63","type":"","value":"224"},{"kind":"number","nativeSrc":"1070:10:63","nodeType":"YulLiteral","src":"1070:10:63","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1061:3:63","nodeType":"YulIdentifier","src":"1061:3:63"},"nativeSrc":"1061:20:63","nodeType":"YulFunctionCall","src":"1061:20:63"}],"functionName":{"name":"mstore","nativeSrc":"1051:6:63","nodeType":"YulIdentifier","src":"1051:6:63"},"nativeSrc":"1051:31:63","nodeType":"YulFunctionCall","src":"1051:31:63"},"nativeSrc":"1051:31:63","nodeType":"YulExpressionStatement","src":"1051:31:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1102:1:63","nodeType":"YulLiteral","src":"1102:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"1105:4:63","nodeType":"YulLiteral","src":"1105:4:63","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1095:6:63","nodeType":"YulIdentifier","src":"1095:6:63"},"nativeSrc":"1095:15:63","nodeType":"YulFunctionCall","src":"1095:15:63"},"nativeSrc":"1095:15:63","nodeType":"YulExpressionStatement","src":"1095:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1130:1:63","nodeType":"YulLiteral","src":"1130:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1133:4:63","nodeType":"YulLiteral","src":"1133:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1123:6:63","nodeType":"YulIdentifier","src":"1123:6:63"},"nativeSrc":"1123:15:63","nodeType":"YulFunctionCall","src":"1123:15:63"},"nativeSrc":"1123:15:63","nodeType":"YulExpressionStatement","src":"1123:15:63"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1020:4:63","nodeType":"YulIdentifier","src":"1020:4:63"},{"name":"x","nativeSrc":"1026:1:63","nodeType":"YulIdentifier","src":"1026:1:63"}],"functionName":{"name":"gt","nativeSrc":"1017:2:63","nodeType":"YulIdentifier","src":"1017:2:63"},"nativeSrc":"1017:11:63","nodeType":"YulFunctionCall","src":"1017:11:63"},"nativeSrc":"1014:134:63","nodeType":"YulIf","src":"1014:134:63"}]},"name":"checked_sub_t_uint256","nativeSrc":"929:225:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"960:1:63","nodeType":"YulTypedName","src":"960:1:63","type":""},{"name":"y","nativeSrc":"963:1:63","nodeType":"YulTypedName","src":"963:1:63","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"969:4:63","nodeType":"YulTypedName","src":"969:4:63","type":""}],"src":"929:225:63"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IERC20_$3386t_contract$_IPoints_$5929t_bytes32t_contract$_IForwarderRegistry_$1506_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        value3 := mload(add(headStart, 96))\n        let value_3 := mload(add(headStart, 128))\n        validator_revert_address(value_3)\n        value4 := value_3\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61012060405234801561001157600080fd5b50604051612b10380380612b10833981016040819052610030916101f7565b8484848484828285838080803361004f816100496100b2565b906100e6565b50600160008190556001600160a01b039091166080526100839250634fc3585960e01b915061007c610155565b9190610183565b506001600160a01b0390811660a05291821660c05260e052949094166101005250610283975050505050505050565b6000806100e060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610262565b92915050565b6001600160a01b0381161561013c5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6101516307f5828d60e41b600161007c610155565b5050565b6000806100e060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610262565b600160e01b6001600160e01b03198316016101b1576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146101f457600080fd5b50565b600080600080600060a0868803121561020f57600080fd5b855161021a816101df565b602087015190955061022b816101df565b604087015190945061023c816101df565b606087015160808801519194509250610254816101df565b809150509295509295909350565b818103818111156100e057634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e0516101005161280361030d600039600081816104dd0152610a2101526000818161033a0152611f3c0152600081816103c90152611f65015260008181610292015281816109c801528181610b3a01528181610c310152611e8801526000818161036b0152818161048e01528181611d4c0152611dda01526128036000f3fe6080604052600436106102185760003560e01c80637b0a47ee1161011d5780639d696e36116100b0578063d547741f1161007f578063efa90b5411610064578063efa90b54146106de578063f2fde38b146106f4578063f7ba94bd1461071457600080fd5b8063d547741f146106a2578063ef4cadc5146106c257600080fd5b80639d696e3614610629578063c3666c361461063f578063c5c8f7701461065f578063d0b06f5d1461068c57600080fd5b80638bb9c5bf116100ec5780638bb9c5bf146105a75780638da5cb5b146105c757806391d14854146105dc57806398807d84146105fc57600080fd5b80637b0a47ee1461053257806380faa57d14610548578063817b1cd21461055d5780638580cf761461057357600080fd5b80632d1e0c02116101b05780634fc358591161017f57806362ba90961161016457806362ba9096146104cb57806373c8a958146104ff57806375c93bb91461051f57600080fd5b80634fc3585914610420578063572b6c051461047157600080fd5b80632d1e0c02146103a45780632d4c2f93146103b75780632f2ff15d146103eb5780634e71d92d1461040b57600080fd5b80630968f264116101ec5780630968f264146103065780632196e445146103285780632b4c9f161461035c5780632c9d0b801461038f57600080fd5b80628cc2621461021d57806301ffc9a7146102505780630479d644146102805780630700037d146102d9575b600080fd5b34801561022957600080fd5b5061023d610238366004612309565b610734565b6040519081526020015b60405180910390f35b34801561025c57600080fd5b5061027061026b366004612326565b6107cb565b6040519015158152602001610247565b34801561028c57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610247565b3480156102e557600080fd5b5061023d6102f4366004612309565b60076020526000908152604090205481565b34801561031257600080fd5b506103266103213660046123b1565b6107df565b005b34801561033457600080fd5b5061023d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561036857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102b4565b34801561039b57600080fd5b5061023d61082a565b6103266103b23660046123b1565b610892565b3480156103c357600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f757600080fd5b506103266104063660046123f3565b6108c4565b34801561041757600080fd5b506103266108fd565b34801561042c57600080fd5b5061044061043b366004612423565b6109ae565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610247565b34801561047d57600080fd5b5061027061048c366004612309565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b3480156104d757600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561050b57600080fd5b5061032661051a3660046124db565b610b2c565b61032661052d366004612581565b610d05565b34801561053e57600080fd5b5061023d60035481565b34801561055457600080fd5b5061023d610fda565b34801561056957600080fd5b5061023d60015481565b34801561057f57600080fd5b5061023d7f726577617264657200000000000000000000000000000000000000000000000081565b3480156105b357600080fd5b506103266105c23660046125a3565b610ff4565b3480156105d357600080fd5b506102b4611012565b3480156105e857600080fd5b506102706105f73660046123f3565b61103e565b34801561060857600080fd5b5061023d610617366004612309565b60066020526000908152604090205481565b34801561063557600080fd5b5061023d60045481565b34801561064b57600080fd5b5061032661065a3660046124db565b611089565b34801561066b57600080fd5b5061023d61067a366004612309565b60086020526000908152604090205481565b34801561069857600080fd5b5061023d60025481565b3480156106ae57600080fd5b506103266106bd3660046123f3565b6110b2565b3480156106ce57600080fd5b5061023d670de0b6b3a764000081565b3480156106ea57600080fd5b5061023d60055481565b34801561070057600080fd5b5061032661070f366004612309565b6110e0565b34801561072057600080fd5b5061032661072f3660046125bc565b6110fb565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546008909252822054670de0b6b3a76400009061077761082a565b610781919061265c565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020546107b1919061266f565b6107bb91906126b5565b6107c591906126c9565b92915050565b60006107c5826107d9611118565b90611146565b6108266107ea611220565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061122a92505050565b5050565b60015460009080820361083f57505060045490565b80670de0b6b3a7640000600354600254610857610fda565b610861919061265c565b61086b919061266f565b610875919061266f565b61087f91906126b5565b60045461088c91906126c9565b91505090565b6040517f7a404b1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108ce611220565b90506108e2816108dc611379565b906113a7565b6108f88383836108f0611412565b929190611440565b505050565b6000610907611220565b905061091281611516565b600061091d82610734565b905080156108265773ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812081905561095783836115a4565b90508273ffffffffffffffffffffffffffffffffffffffff167f4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd582846040516109a19291906126dc565b60405180910390a2505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a1f576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16148690610ac4576040517fd0411ac500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015b60405180910390fd5b506000610ad383850185612309565b9050610b008186604051602001610aec91815260200190565b6040516020818303038152906040526115b0565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b6000805b84811015610be0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868683818110610b8157610b8161274f565b9050602002016020810190610b969190612309565b73ffffffffffffffffffffffffffffffffffffffff1603610bd857838382818110610bc357610bc361274f565b9050602002013582610bd591906126c9565b91505b600101610b30565b508015610cee576001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c919061277e565b610ca6919061265c565b905080821115610cec576040517f15c38d3e0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610abb565b505b610cfc87878787878761169c565b50505050505050565b6000610d0f611220565b9050610d457f726577617264657200000000000000000000000000000000000000000000000082610d3e611412565b91906116b5565b82600003610d7f576040517f3853986500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600003610db9576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dc36000611516565b60055460009081610dd485426126c9565b9050814210610e4c576000610de986886126b5565b9050868682610e2d576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610abb565b50506003819055610e3e8688612797565b60058390559350610f759050565b818111610edb57610e5d428361265c565b94506000610e6b86886126b5565b9050868682610eaf576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610abb565b50508060036000828254610ec391906126c9565b90915550610ed390508688612797565b935050610f75565b610ee585876126b5565b86908690610f28576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610abb565b5060009050610f37428461265c565b600354610f44919061266f565b90506000610f5288836126c9565b9050610f5e87826126b5565b600355610f6b8782612797565b6005849055945050505b42600255604080518781526020810187905290810184905273ffffffffffffffffffffffffffffffffffffffff8516907f0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf89080839060600160405180910390a2505050505050565b600554600090428111610fed578061088c565b4291505090565b61100f610fff611220565b82611008611412565b919061173b565b50565b600061103961101f611379565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000611082838361104d611412565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b61109c611094611220565b6108dc611379565b6110aa8686868686866117df565b505050505050565b60006110bc611220565b90506110ca816108dc611379565b6108f88383836110d8611412565b929190611a7f565b61100f6110eb611220565b826110f4611379565b9190611b49565b611106611094611220565b61111284848484611c5d565b50505050565b6000806107c560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61265c565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611196575060006107c5565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111e7575060016107c5565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000611039611d09565b61123382611516565b600061123f8383611e56565b90508060000361127b576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205483818380821015611304576040517f2b6a775800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091526044820152606401610abb565b50505073ffffffffffffffffffffffffffffffffffffffff84166000818152600660205260409081902080548590039055838303600155517faae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e9061136b90869086906126dc565b60405180910390a250505050565b6000806107c560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61265c565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610826576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610abb565b6000806107c560017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b2361265c565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166111125760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b61151e61082a565b60045560055442101580611533575060015415155b1561154457611540610fda565b6002555b73ffffffffffffffffffffffffffffffffffffffff81161561100f5761156981610734565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083209390935560045460089091529190205550565b60606110828383611eaf565b6115b982611516565b60006115c58383611fc7565b905080600003611601576040517f040ef8ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600082825461161391906126c9565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120805483929061164d9084906126c9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167ff4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e83836040516109a19291906126dc565b6116a7611094611220565b6110aa868686868686611fdd565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108f8576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610abb565b6117468382846116b5565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b8483811415806117ef5750808214155b15611826576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015611a755760008686838181106118455761184561274f565b905060200201602081019061185a9190612309565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa1580156118e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190b91906127ab565b611959576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610abb565b86868381811061196b5761196b61274f565b90506020020160208101906119809190612309565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b868181106119ae576119ae61274f565b90506020020160208101906119c39190612309565b8888878181106119d5576119d561274f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015611a5157600080fd5b505af1158015611a65573d6000803e3d6000fd5b5050505050806001019050611829565b5050505050505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156111125760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611508565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611bb6576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610abb565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111125783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b82818114611c97576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156110aa57611d01848483818110611cb757611cb761274f565b90506020020135878784818110611cd057611cd061274f565b9050602002016020810190611ce59190612309565b73ffffffffffffffffffffffffffffffffffffffff16906120be565b600101611c9a565b600033321480611d195750601836105b15611d2357503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611e4557506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4591906127ab565b15611e4f57919050565b3391505090565b600081806020019051810190611e6c919061277e565b90506107c573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168483612174565b606081604051602001611ec491815260200190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290527f26b3293f00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8581166004840152602483018590527f000000000000000000000000000000000000000000000000000000000000000060448401529092507f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b158015611fa957600080fd5b505af1158015611fbd573d6000803e3d6000fd5b5050505092915050565b600081806020019051810190611082919061277e565b848381141580611fed5750808214155b15612024576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015611a75576120b68888838181106120445761204461274f565b90506020020160208101906120599190612309565b85858481811061206b5761206b61274f565b905060200201358888858181106120845761208461274f565b90506020020160208101906120999190612309565b73ffffffffffffffffffffffffffffffffffffffff169190612174565b600101612027565b80471015612101576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610abb565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d806000811461215c576040519150601f19603f3d011682016040523d82523d6000602084013e612161565b606091505b5091509150816111125761111281612201565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526108f8908490612243565b8051156122115780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080602060008451602086016000885af180612266576040513d6000823e3d81fd5b50506000513d9150811561227e578060011415612298565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15611112576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610abb565b73ffffffffffffffffffffffffffffffffffffffff8116811461100f57600080fd5b60006020828403121561231b57600080fd5b8135611082816122e7565b60006020828403121561233857600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461108257600080fd5b60008083601f84011261237a57600080fd5b50813567ffffffffffffffff81111561239257600080fd5b6020830191508360208285010111156123aa57600080fd5b9250929050565b600080602083850312156123c457600080fd5b823567ffffffffffffffff8111156123db57600080fd5b6123e785828601612368565b90969095509350505050565b6000806040838503121561240657600080fd5b823591506020830135612418816122e7565b809150509250929050565b60008060008060006080868803121561243b57600080fd5b8535612446816122e7565b94506020860135612456816122e7565b935060408601359250606086013567ffffffffffffffff81111561247957600080fd5b61248588828901612368565b969995985093965092949392505050565b60008083601f8401126124a857600080fd5b50813567ffffffffffffffff8111156124c057600080fd5b6020830191508360208260051b85010111156123aa57600080fd5b600080600080600080606087890312156124f457600080fd5b863567ffffffffffffffff81111561250b57600080fd5b61251789828a01612496565b909750955050602087013567ffffffffffffffff81111561253757600080fd5b61254389828a01612496565b909550935050604087013567ffffffffffffffff81111561256357600080fd5b61256f89828a01612496565b979a9699509497509295939492505050565b6000806040838503121561259457600080fd5b50508035926020909101359150565b6000602082840312156125b557600080fd5b5035919050565b600080600080604085870312156125d257600080fd5b843567ffffffffffffffff8111156125e957600080fd5b6125f587828801612496565b909550935050602085013567ffffffffffffffff81111561261557600080fd5b61262187828801612496565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156107c5576107c561262d565b80820281158282048414176107c5576107c561262d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826126c4576126c4612686565b500490565b808201808211156107c5576107c561262d565b604081526000835180604084015260005b8181101561270a57602081870181015160608684010152016126ed565b5060006060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561279057600080fd5b5051919050565b6000826127a6576127a6612686565b500690565b6000602082840312156127bd57600080fd5b8151801515811461108257600080fdfea2646970667358221220c5c6510a20b98179a7fa7e80031dc655b9f838d7f63d4be7b7dca003ccfb320b64736f6c634300081c0033","opcodes":"PUSH2 0x120 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2B10 CODESIZE SUB DUP1 PUSH2 0x2B10 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x1F7 JUMP JUMPDEST DUP5 DUP5 DUP5 DUP5 DUP5 DUP3 DUP3 DUP6 DUP4 DUP1 DUP1 DUP1 CALLER PUSH2 0x4F DUP2 PUSH2 0x49 PUSH2 0xB2 JUMP JUMPDEST SWAP1 PUSH2 0xE6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x80 MSTORE PUSH2 0x83 SWAP3 POP PUSH4 0x4FC35859 PUSH1 0xE0 SHL SWAP2 POP PUSH2 0x7C PUSH2 0x155 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x183 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE SWAP2 DUP3 AND PUSH1 0xC0 MSTORE PUSH1 0xE0 MSTORE SWAP5 SWAP1 SWAP5 AND PUSH2 0x100 MSTORE POP PUSH2 0x283 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE0 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x262 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x13C JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x151 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x7C PUSH2 0x155 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE0 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x262 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x21A DUP2 PUSH2 0x1DF JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x22B DUP2 PUSH2 0x1DF JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x23C DUP2 PUSH2 0x1DF JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH2 0x254 DUP2 PUSH2 0x1DF JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xE0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x2803 PUSH2 0x30D PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x4DD ADD MSTORE PUSH2 0xA21 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x33A ADD MSTORE PUSH2 0x1F3C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3C9 ADD MSTORE PUSH2 0x1F65 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x292 ADD MSTORE DUP2 DUP2 PUSH2 0x9C8 ADD MSTORE DUP2 DUP2 PUSH2 0xB3A ADD MSTORE DUP2 DUP2 PUSH2 0xC31 ADD MSTORE PUSH2 0x1E88 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x36B ADD MSTORE DUP2 DUP2 PUSH2 0x48E ADD MSTORE DUP2 DUP2 PUSH2 0x1D4C ADD MSTORE PUSH2 0x1DDA ADD MSTORE PUSH2 0x2803 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x218 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0x11D JUMPI DUP1 PUSH4 0x9D696E36 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xEFA90B54 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x6DE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD547741F EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x629 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x5A7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5DC JUMPI DUP1 PUSH4 0x98807D84 EQ PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x4FC35859 GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x62BA9096 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x62BA9096 EQ PUSH2 0x4CB JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x968F264 GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x2D9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x2326 JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x23B1 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x2B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x82A JUMP JUMPDEST PUSH2 0x326 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x23B1 JUMP JUMPDEST PUSH2 0x892 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0x8C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x8FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x440 PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x2423 JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x51A CALLDATASIZE PUSH1 0x4 PUSH2 0x24DB JUMP JUMPDEST PUSH2 0xB2C JUMP JUMPDEST PUSH2 0x326 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0xD05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0xFDA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x25A3 JUMP JUMPDEST PUSH2 0xFF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x1012 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x5F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0x103E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x617 CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x65A CALLDATASIZE PUSH1 0x4 PUSH2 0x24DB JUMP JUMPDEST PUSH2 0x1089 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x67A CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0x10B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x700 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x70F CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH2 0x10E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x25BC JUMP JUMPDEST PUSH2 0x10FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x777 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x265C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x7BB SWAP2 SWAP1 PUSH2 0x26B5 JUMP JUMPDEST PUSH2 0x7C5 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C5 DUP3 PUSH2 0x7D9 PUSH2 0x1118 JUMP JUMPDEST SWAP1 PUSH2 0x1146 JUMP JUMPDEST PUSH2 0x826 PUSH2 0x7EA PUSH2 0x1220 JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x122A SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x83F JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x857 PUSH2 0xFDA JUMP JUMPDEST PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x265C JUMP JUMPDEST PUSH2 0x86B SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x875 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x87F SWAP2 SWAP1 PUSH2 0x26B5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7A404B1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8CE PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0x8E2 DUP2 PUSH2 0x8DC PUSH2 0x1379 JUMP JUMPDEST SWAP1 PUSH2 0x13A7 JUMP JUMPDEST PUSH2 0x8F8 DUP4 DUP4 DUP4 PUSH2 0x8F0 PUSH2 0x1412 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1440 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x907 PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0x912 DUP2 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91D DUP3 PUSH2 0x734 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x826 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x957 DUP4 DUP4 PUSH2 0x15A4 JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9A1 SWAP3 SWAP2 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xA1F JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP7 SWAP1 PUSH2 0xAC4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0411AC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0xAD3 DUP4 DUP6 ADD DUP6 PUSH2 0x2309 JUMP JUMPDEST SWAP1 POP PUSH2 0xB00 DUP2 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAEC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x15B0 JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBE0 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0xB81 JUMPI PUSH2 0xB81 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB96 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD8 JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0xBC3 JUMPI PUSH2 0xBC3 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xBD5 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB30 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xCEE JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC78 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC9C SWAP2 SWAP1 PUSH2 0x277E JUMP JUMPDEST PUSH2 0xCA6 SWAP2 SWAP1 PUSH2 0x265C JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xCEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x15C38D3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP JUMPDEST PUSH2 0xCFC DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x169C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0F PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0xD45 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xD3E PUSH2 0x1412 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16B5 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xD7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xDB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDC3 PUSH1 0x0 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xDD4 DUP6 TIMESTAMP PUSH2 0x26C9 JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xE4C JUMPI PUSH1 0x0 PUSH2 0xDE9 DUP7 DUP9 PUSH2 0x26B5 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xE2D JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xE3E DUP7 DUP9 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xF75 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xEDB JUMPI PUSH2 0xE5D TIMESTAMP DUP4 PUSH2 0x265C JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xE6B DUP7 DUP9 PUSH2 0x26B5 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xEAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEC3 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xED3 SWAP1 POP DUP7 DUP9 PUSH2 0x2797 JUMP JUMPDEST SWAP4 POP POP PUSH2 0xF75 JUMP JUMPDEST PUSH2 0xEE5 DUP6 DUP8 PUSH2 0x26B5 JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xF28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xF37 TIMESTAMP DUP5 PUSH2 0x265C JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xF44 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF52 DUP9 DUP4 PUSH2 0x26C9 JUMP JUMPDEST SWAP1 POP PUSH2 0xF5E DUP8 DUP3 PUSH2 0x26B5 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xF6B DUP8 DUP3 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xFED JUMPI DUP1 PUSH2 0x88C JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x100F PUSH2 0xFFF PUSH2 0x1220 JUMP JUMPDEST DUP3 PUSH2 0x1008 PUSH2 0x1412 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x173B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1039 PUSH2 0x101F PUSH2 0x1379 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1082 DUP4 DUP4 PUSH2 0x104D PUSH2 0x1412 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x109C PUSH2 0x1094 PUSH2 0x1220 JUMP JUMPDEST PUSH2 0x8DC PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x10AA DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x17DF JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BC PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0x10CA DUP2 PUSH2 0x8DC PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x8F8 DUP4 DUP4 DUP4 PUSH2 0x10D8 PUSH2 0x1412 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH2 0x100F PUSH2 0x10EB PUSH2 0x1220 JUMP JUMPDEST DUP3 PUSH2 0x10F4 PUSH2 0x1379 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x1106 PUSH2 0x1094 PUSH2 0x1220 JUMP JUMPDEST PUSH2 0x1112 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C5D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x265C JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1196 JUMPI POP PUSH1 0x0 PUSH2 0x7C5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x11E7 JUMPI POP PUSH1 0x1 PUSH2 0x7C5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1039 PUSH2 0x1D09 JUMP JUMPDEST PUSH2 0x1233 DUP3 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x123F DUP4 DUP4 PUSH2 0x1E56 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x127B JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 DUP4 DUP1 DUP3 LT ISZERO PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B6A775800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xABB JUMP JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE DUP4 DUP4 SUB PUSH1 0x1 SSTORE MLOAD PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E SWAP1 PUSH2 0x136B SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x265C JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x265C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1112 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x151E PUSH2 0x82A JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x1533 JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1544 JUMPI PUSH2 0x1540 PUSH2 0xFDA JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x100F JUMPI PUSH2 0x1569 DUP2 PUSH2 0x734 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1082 DUP4 DUP4 PUSH2 0x1EAF JUMP JUMPDEST PUSH2 0x15B9 DUP3 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C5 DUP4 DUP4 PUSH2 0x1FC7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x1601 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1613 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x164D SWAP1 DUP5 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x9A1 SWAP3 SWAP2 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH2 0x16A7 PUSH2 0x1094 PUSH2 0x1220 JUMP JUMPDEST PUSH2 0x10AA DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST PUSH2 0x1746 DUP4 DUP3 DUP5 PUSH2 0x16B5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x17EF JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A75 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x1845 JUMPI PUSH2 0x1845 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x185A SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x190B SWAP2 SWAP1 PUSH2 0x27AB JUMP JUMPDEST PUSH2 0x1959 JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x196B JUMPI PUSH2 0x196B PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1980 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x19AE JUMPI PUSH2 0x19AE PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19C3 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x19D5 JUMPI PUSH2 0x19D5 PUSH2 0x274F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1829 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1112 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1508 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1BB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1112 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10AA JUMPI PUSH2 0x1D01 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1CB7 JUMPI PUSH2 0x1CB7 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1CD0 JUMPI PUSH2 0x1CD0 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1CE5 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C9A JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1D19 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1D23 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1E45 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E21 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E45 SWAP2 SWAP1 PUSH2 0x27AB JUMP JUMPDEST ISZERO PUSH2 0x1E4F JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1E6C SWAP2 SWAP1 PUSH2 0x277E JUMP JUMPDEST SWAP1 POP PUSH2 0x7C5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x2174 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1EC4 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FBD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1082 SWAP2 SWAP1 PUSH2 0x277E JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1FED JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2024 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A75 JUMPI PUSH2 0x20B6 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x2044 JUMPI PUSH2 0x2044 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2059 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x206B JUMPI PUSH2 0x206B PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2084 JUMPI PUSH2 0x2084 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2099 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x2174 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2027 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x2101 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x215C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2161 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1112 JUMPI PUSH2 0x1112 DUP2 PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x8F8 SWAP1 DUP5 SWAP1 PUSH2 0x2243 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2211 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x2266 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x227E JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2298 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1112 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x231B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1082 DUP2 PUSH2 0x22E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1082 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x237A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E7 DUP6 DUP3 DUP7 ADD PUSH2 0x2368 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2418 DUP2 PUSH2 0x22E7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2446 DUP2 PUSH2 0x22E7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2456 DUP2 PUSH2 0x22E7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2485 DUP9 DUP3 DUP10 ADD PUSH2 0x2368 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x24A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x24F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x250B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2517 DUP10 DUP3 DUP11 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2543 DUP10 DUP3 DUP11 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x256F DUP10 DUP3 DUP11 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x25D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25F5 DUP8 DUP3 DUP9 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2621 DUP8 DUP3 DUP9 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x262D JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x262D JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x26C4 JUMPI PUSH2 0x26C4 PUSH2 0x2686 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x262D JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x270A JUMPI PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD MLOAD PUSH1 0x60 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x26ED JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x27A6 JUMPI PUSH2 0x27A6 PUSH2 0x2686 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1082 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xC6 MLOAD EXP KECCAK256 0xB9 DUP2 PUSH26 0xA7FA7E80031DC655B9F838D7F63D4BE7B7DCA003CCFB320B6473 PUSH16 0x6C634300081C00330000000000000000 ","sourceMap":"645:1385:60:-:0;;;831:312;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1058:13;1073:12;1087:14;1103:17;1122;1087:14;1103:17;1073:12;1122:17;;;;3236:10:34;1008:63:2;3236:10:34;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;1857:1:50;2061:7;:21;;;-1:-1:-1;;;;;622:39:24;;;;;736:96:37;;-1:-1:-1;;;;793:32:37;-1:-1:-1;736:34:37;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;;900:28:36;;::::1;;::::0;508:32:62;;;;;550:39;;1279:30:61;;;::::2;;::::0;-1:-1:-1;645:1385:60;;-1:-1:-1;;;;;;;;645:1385:60;5060:174:13;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:13:o;1561:341::-;-1:-1:-1;;;;;1649:26:13;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:13;-1:-1:-1;;;;;1691:30:13;;;;;;;1740:46;;-1:-1:-1;;1740:46:13;;-1:-1:-1;;1740:46:13;1645:152;1806:89;-1:-1:-1;;;1890:4:13;1806:34;:32;:34::i;:89::-;1561:341;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:131:63:-;-1:-1:-1;;;;;89:31:63;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:774::-;314:6;322;330;338;346;399:3;387:9;378:7;374:23;370:33;367:53;;;416:1;413;406:12;367:53;448:9;442:16;467:31;492:5;467:31;:::i;:::-;567:2;552:18;;546:25;517:5;;-1:-1:-1;580:33:63;546:25;580:33;:::i;:::-;684:2;669:18;;663:25;632:7;;-1:-1:-1;697:33:63;663:25;697:33;:::i;:::-;796:2;781:18;;775:25;845:3;830:19;;824:26;749:7;;-1:-1:-1;775:25:63;-1:-1:-1;859:33:63;824:26;859:33;:::i;:::-;911:7;901:17;;;150:774;;;;;;;;:::o;929:225::-;996:9;;;1017:11;;;1014:134;;;1070:10;1065:3;1061:20;1058:1;1051:31;1105:4;1102:1;1095:15;1133:4;1130:1;1123:15;929:225;645:1385:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CLAIM_CONTRACT_6084":{"entryPoint":null,"id":6084,"parameterSlots":0,"returnSlots":0},"@DEPOSIT_REASON_CODE_6239":{"entryPoint":null,"id":6239,"parameterSlots":0,"returnSlots":0},"@POINTS_CONTRACT_6237":{"entryPoint":null,"id":6237,"parameterSlots":0,"returnSlots":0},"@REWARDER_ROLE_2027":{"entryPoint":null,"id":2027,"parameterSlots":0,"returnSlots":0},"@SCALING_FACTOR_2030":{"entryPoint":null,"id":2030,"parameterSlots":0,"returnSlots":0},"@STAKING_TOKEN_2762":{"entryPoint":null,"id":2762,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_3753":{"entryPoint":8771,"id":3753,"parameterSlots":2,"returnSlots":0},"@_computeAddReward_6228":{"entryPoint":null,"id":6228,"parameterSlots":3,"returnSlots":0},"@_computeAddReward_6291":{"entryPoint":null,"id":6291,"parameterSlots":3,"returnSlots":0},"@_computeClaim_6207":{"entryPoint":5540,"id":6207,"parameterSlots":2,"returnSlots":1},"@_computeClaim_6281":{"entryPoint":7855,"id":6281,"parameterSlots":2,"returnSlots":1},"@_computeStake_6062":{"entryPoint":8135,"id":6062,"parameterSlots":2,"returnSlots":1},"@_computeWithdraw_2949":{"entryPoint":7766,"id":2949,"parameterSlots":2,"returnSlots":1},"@_msgSender_1425":{"entryPoint":7433,"id":1425,"parameterSlots":0,"returnSlots":1},"@_msgSender_2682":{"entryPoint":4640,"id":2682,"parameterSlots":0,"returnSlots":1},"@_revert_4054":{"entryPoint":8705,"id":4054,"parameterSlots":1,"returnSlots":0},"@_stake_2311":{"entryPoint":5552,"id":2311,"parameterSlots":2,"returnSlots":0},"@_updateReward_2170":{"entryPoint":5398,"id":2170,"parameterSlots":1,"returnSlots":0},"@_withdraw_2390":{"entryPoint":4650,"id":2390,"parameterSlots":2,"returnSlots":0},"@addReward_2632":{"entryPoint":3333,"id":2632,"parameterSlots":2,"returnSlots":0},"@claim_2434":{"entryPoint":2301,"id":2434,"parameterSlots":0,"returnSlots":0},"@distributionEnd_2040":{"entryPoint":null,"id":2040,"parameterSlots":0,"returnSlots":0},"@earned_2252":{"entryPoint":1844,"id":2252,"parameterSlots":1,"returnSlots":1},"@enforceHasRole_567":{"entryPoint":5813,"id":567,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_829":{"entryPoint":5031,"id":829,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1333":{"entryPoint":null,"id":1333,"parameterSlots":0,"returnSlots":1},"@grantRole_110":{"entryPoint":2244,"id":110,"parameterSlots":2,"returnSlots":0},"@grantRole_420":{"entryPoint":5184,"id":420,"parameterSlots":4,"returnSlots":0},"@hasRole_178":{"entryPoint":4158,"id":178,"parameterSlots":2,"returnSlots":1},"@hasRole_513":{"entryPoint":null,"id":513,"parameterSlots":3,"returnSlots":1},"@isTrustedForwarder_1349":{"entryPoint":null,"id":1349,"parameterSlots":1,"returnSlots":1},"@lastTimeRewardApplicable_2190":{"entryPoint":4058,"id":2190,"parameterSlots":0,"returnSlots":1},"@lastUpdated_2034":{"entryPoint":null,"id":2034,"parameterSlots":0,"returnSlots":0},"@layout_1009":{"entryPoint":4376,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_603":{"entryPoint":5138,"id":603,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":4985,"id":861,"parameterSlots":0,"returnSlots":1},"@msgSender_1517":{"entryPoint":null,"id":1517,"parameterSlots":0,"returnSlots":1},"@onERC20Received_6030":{"entryPoint":2478,"id":6030,"parameterSlots":5,"returnSlots":1},"@owner_209":{"entryPoint":4114,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_782":{"entryPoint":null,"id":782,"parameterSlots":1,"returnSlots":1},"@recoverERC20s_1685":{"entryPoint":5788,"id":1685,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_1890":{"entryPoint":8157,"id":1890,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_3028":{"entryPoint":2860,"id":3028,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1717":{"entryPoint":4233,"id":1717,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1979":{"entryPoint":6111,"id":1979,"parameterSlots":6,"returnSlots":0},"@recoverETH_1653":{"entryPoint":4347,"id":1653,"parameterSlots":4,"returnSlots":0},"@recoverETH_1834":{"entryPoint":7261,"id":1834,"parameterSlots":4,"returnSlots":0},"@renounceRole_159":{"entryPoint":4084,"id":159,"parameterSlots":1,"returnSlots":0},"@renounceRole_492":{"entryPoint":5947,"id":492,"parameterSlots":3,"returnSlots":0},"@revokeRole_142":{"entryPoint":4274,"id":142,"parameterSlots":2,"returnSlots":0},"@revokeRole_457":{"entryPoint":6783,"id":457,"parameterSlots":4,"returnSlots":0},"@rewardPerStakePointPaid_2052":{"entryPoint":null,"id":2052,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePointStored_2038":{"entryPoint":null,"id":2038,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePoint_2224":{"entryPoint":2090,"id":2224,"parameterSlots":0,"returnSlots":1},"@rewardRate_2036":{"entryPoint":null,"id":2036,"parameterSlots":0,"returnSlots":0},"@rewards_2048":{"entryPoint":null,"id":2048,"parameterSlots":0,"returnSlots":0},"@safeTransfer_3431":{"entryPoint":8564,"id":3431,"parameterSlots":3,"returnSlots":0},"@sendValue_3853":{"entryPoint":8382,"id":3853,"parameterSlots":2,"returnSlots":0},"@stake_6041":{"entryPoint":2194,"id":6041,"parameterSlots":2,"returnSlots":0},"@staked_2044":{"entryPoint":null,"id":2044,"parameterSlots":0,"returnSlots":0},"@supportsInterface_891":{"entryPoint":1995,"id":891,"parameterSlots":1,"returnSlots":1},"@supportsInterface_997":{"entryPoint":4422,"id":997,"parameterSlots":2,"returnSlots":1},"@totalStaked_2032":{"entryPoint":null,"id":2032,"parameterSlots":0,"returnSlots":0},"@transferOwnership_226":{"entryPoint":4320,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_769":{"entryPoint":6985,"id":769,"parameterSlots":3,"returnSlots":0},"@withdraw_2920":{"entryPoint":2015,"id":2920,"parameterSlots":2,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":9366,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":9064,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":8969,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":9251,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":9435,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":9660,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10155,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9635,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9203,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8998,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":9137,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_contract$_IERC20_$3386":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$3198":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":10110,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":9601,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":9948,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$3386__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1506__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPoints_$5929__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9929,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":9909,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9839,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9820,"id":null,"parameterSlots":2,"returnSlots":1},"mod_t_uint256":{"entryPoint":10135,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":9773,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":9862,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10063,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":8935,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:15102:63","nodeType":"YulBlock","src":"0:15102:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"59:109:63","nodeType":"YulBlock","src":"59:109:63","statements":[{"body":{"nativeSrc":"146:16:63","nodeType":"YulBlock","src":"146:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"155:1:63","nodeType":"YulLiteral","src":"155:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"158:1:63","nodeType":"YulLiteral","src":"158:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"148:6:63","nodeType":"YulIdentifier","src":"148:6:63"},"nativeSrc":"148:12:63","nodeType":"YulFunctionCall","src":"148:12:63"},"nativeSrc":"148:12:63","nodeType":"YulExpressionStatement","src":"148:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:63","nodeType":"YulIdentifier","src":"82:5:63"},{"arguments":[{"name":"value","nativeSrc":"93:5:63","nodeType":"YulIdentifier","src":"93:5:63"},{"kind":"number","nativeSrc":"100:42:63","nodeType":"YulLiteral","src":"100:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"89:3:63","nodeType":"YulIdentifier","src":"89:3:63"},"nativeSrc":"89:54:63","nodeType":"YulFunctionCall","src":"89:54:63"}],"functionName":{"name":"eq","nativeSrc":"79:2:63","nodeType":"YulIdentifier","src":"79:2:63"},"nativeSrc":"79:65:63","nodeType":"YulFunctionCall","src":"79:65:63"}],"functionName":{"name":"iszero","nativeSrc":"72:6:63","nodeType":"YulIdentifier","src":"72:6:63"},"nativeSrc":"72:73:63","nodeType":"YulFunctionCall","src":"72:73:63"},"nativeSrc":"69:93:63","nodeType":"YulIf","src":"69:93:63"}]},"name":"validator_revert_address","nativeSrc":"14:154:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:63","nodeType":"YulTypedName","src":"48:5:63","type":""}],"src":"14:154:63"},{"body":{"nativeSrc":"243:177:63","nodeType":"YulBlock","src":"243:177:63","statements":[{"body":{"nativeSrc":"289:16:63","nodeType":"YulBlock","src":"289:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"298:1:63","nodeType":"YulLiteral","src":"298:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"301:1:63","nodeType":"YulLiteral","src":"301:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"291:6:63","nodeType":"YulIdentifier","src":"291:6:63"},"nativeSrc":"291:12:63","nodeType":"YulFunctionCall","src":"291:12:63"},"nativeSrc":"291:12:63","nodeType":"YulExpressionStatement","src":"291:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"264:7:63","nodeType":"YulIdentifier","src":"264:7:63"},{"name":"headStart","nativeSrc":"273:9:63","nodeType":"YulIdentifier","src":"273:9:63"}],"functionName":{"name":"sub","nativeSrc":"260:3:63","nodeType":"YulIdentifier","src":"260:3:63"},"nativeSrc":"260:23:63","nodeType":"YulFunctionCall","src":"260:23:63"},{"kind":"number","nativeSrc":"285:2:63","nodeType":"YulLiteral","src":"285:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"256:3:63","nodeType":"YulIdentifier","src":"256:3:63"},"nativeSrc":"256:32:63","nodeType":"YulFunctionCall","src":"256:32:63"},"nativeSrc":"253:52:63","nodeType":"YulIf","src":"253:52:63"},{"nativeSrc":"314:36:63","nodeType":"YulVariableDeclaration","src":"314:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"340:9:63","nodeType":"YulIdentifier","src":"340:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"327:12:63","nodeType":"YulIdentifier","src":"327:12:63"},"nativeSrc":"327:23:63","nodeType":"YulFunctionCall","src":"327:23:63"},"variables":[{"name":"value","nativeSrc":"318:5:63","nodeType":"YulTypedName","src":"318:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"384:5:63","nodeType":"YulIdentifier","src":"384:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"359:24:63","nodeType":"YulIdentifier","src":"359:24:63"},"nativeSrc":"359:31:63","nodeType":"YulFunctionCall","src":"359:31:63"},"nativeSrc":"359:31:63","nodeType":"YulExpressionStatement","src":"359:31:63"},{"nativeSrc":"399:15:63","nodeType":"YulAssignment","src":"399:15:63","value":{"name":"value","nativeSrc":"409:5:63","nodeType":"YulIdentifier","src":"409:5:63"},"variableNames":[{"name":"value0","nativeSrc":"399:6:63","nodeType":"YulIdentifier","src":"399:6:63"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"173:247:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"209:9:63","nodeType":"YulTypedName","src":"209:9:63","type":""},{"name":"dataEnd","nativeSrc":"220:7:63","nodeType":"YulTypedName","src":"220:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"232:6:63","nodeType":"YulTypedName","src":"232:6:63","type":""}],"src":"173:247:63"},{"body":{"nativeSrc":"526:76:63","nodeType":"YulBlock","src":"526:76:63","statements":[{"nativeSrc":"536:26:63","nodeType":"YulAssignment","src":"536:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"548:9:63","nodeType":"YulIdentifier","src":"548:9:63"},{"kind":"number","nativeSrc":"559:2:63","nodeType":"YulLiteral","src":"559:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"544:3:63","nodeType":"YulIdentifier","src":"544:3:63"},"nativeSrc":"544:18:63","nodeType":"YulFunctionCall","src":"544:18:63"},"variableNames":[{"name":"tail","nativeSrc":"536:4:63","nodeType":"YulIdentifier","src":"536:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"578:9:63","nodeType":"YulIdentifier","src":"578:9:63"},{"name":"value0","nativeSrc":"589:6:63","nodeType":"YulIdentifier","src":"589:6:63"}],"functionName":{"name":"mstore","nativeSrc":"571:6:63","nodeType":"YulIdentifier","src":"571:6:63"},"nativeSrc":"571:25:63","nodeType":"YulFunctionCall","src":"571:25:63"},"nativeSrc":"571:25:63","nodeType":"YulExpressionStatement","src":"571:25:63"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"425:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"495:9:63","nodeType":"YulTypedName","src":"495:9:63","type":""},{"name":"value0","nativeSrc":"506:6:63","nodeType":"YulTypedName","src":"506:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"517:4:63","nodeType":"YulTypedName","src":"517:4:63","type":""}],"src":"425:177:63"},{"body":{"nativeSrc":"676:263:63","nodeType":"YulBlock","src":"676:263:63","statements":[{"body":{"nativeSrc":"722:16:63","nodeType":"YulBlock","src":"722:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"731:1:63","nodeType":"YulLiteral","src":"731:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"734:1:63","nodeType":"YulLiteral","src":"734:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"724:6:63","nodeType":"YulIdentifier","src":"724:6:63"},"nativeSrc":"724:12:63","nodeType":"YulFunctionCall","src":"724:12:63"},"nativeSrc":"724:12:63","nodeType":"YulExpressionStatement","src":"724:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"697:7:63","nodeType":"YulIdentifier","src":"697:7:63"},{"name":"headStart","nativeSrc":"706:9:63","nodeType":"YulIdentifier","src":"706:9:63"}],"functionName":{"name":"sub","nativeSrc":"693:3:63","nodeType":"YulIdentifier","src":"693:3:63"},"nativeSrc":"693:23:63","nodeType":"YulFunctionCall","src":"693:23:63"},{"kind":"number","nativeSrc":"718:2:63","nodeType":"YulLiteral","src":"718:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"689:3:63","nodeType":"YulIdentifier","src":"689:3:63"},"nativeSrc":"689:32:63","nodeType":"YulFunctionCall","src":"689:32:63"},"nativeSrc":"686:52:63","nodeType":"YulIf","src":"686:52:63"},{"nativeSrc":"747:36:63","nodeType":"YulVariableDeclaration","src":"747:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"773:9:63","nodeType":"YulIdentifier","src":"773:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"760:12:63","nodeType":"YulIdentifier","src":"760:12:63"},"nativeSrc":"760:23:63","nodeType":"YulFunctionCall","src":"760:23:63"},"variables":[{"name":"value","nativeSrc":"751:5:63","nodeType":"YulTypedName","src":"751:5:63","type":""}]},{"body":{"nativeSrc":"893:16:63","nodeType":"YulBlock","src":"893:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"902:1:63","nodeType":"YulLiteral","src":"902:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"905:1:63","nodeType":"YulLiteral","src":"905:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"895:6:63","nodeType":"YulIdentifier","src":"895:6:63"},"nativeSrc":"895:12:63","nodeType":"YulFunctionCall","src":"895:12:63"},"nativeSrc":"895:12:63","nodeType":"YulExpressionStatement","src":"895:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"805:5:63","nodeType":"YulIdentifier","src":"805:5:63"},{"arguments":[{"name":"value","nativeSrc":"816:5:63","nodeType":"YulIdentifier","src":"816:5:63"},{"kind":"number","nativeSrc":"823:66:63","nodeType":"YulLiteral","src":"823:66:63","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"812:3:63","nodeType":"YulIdentifier","src":"812:3:63"},"nativeSrc":"812:78:63","nodeType":"YulFunctionCall","src":"812:78:63"}],"functionName":{"name":"eq","nativeSrc":"802:2:63","nodeType":"YulIdentifier","src":"802:2:63"},"nativeSrc":"802:89:63","nodeType":"YulFunctionCall","src":"802:89:63"}],"functionName":{"name":"iszero","nativeSrc":"795:6:63","nodeType":"YulIdentifier","src":"795:6:63"},"nativeSrc":"795:97:63","nodeType":"YulFunctionCall","src":"795:97:63"},"nativeSrc":"792:117:63","nodeType":"YulIf","src":"792:117:63"},{"nativeSrc":"918:15:63","nodeType":"YulAssignment","src":"918:15:63","value":{"name":"value","nativeSrc":"928:5:63","nodeType":"YulIdentifier","src":"928:5:63"},"variableNames":[{"name":"value0","nativeSrc":"918:6:63","nodeType":"YulIdentifier","src":"918:6:63"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"607:332:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"642:9:63","nodeType":"YulTypedName","src":"642:9:63","type":""},{"name":"dataEnd","nativeSrc":"653:7:63","nodeType":"YulTypedName","src":"653:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"665:6:63","nodeType":"YulTypedName","src":"665:6:63","type":""}],"src":"607:332:63"},{"body":{"nativeSrc":"1039:92:63","nodeType":"YulBlock","src":"1039:92:63","statements":[{"nativeSrc":"1049:26:63","nodeType":"YulAssignment","src":"1049:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1061:9:63","nodeType":"YulIdentifier","src":"1061:9:63"},{"kind":"number","nativeSrc":"1072:2:63","nodeType":"YulLiteral","src":"1072:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1057:3:63","nodeType":"YulIdentifier","src":"1057:3:63"},"nativeSrc":"1057:18:63","nodeType":"YulFunctionCall","src":"1057:18:63"},"variableNames":[{"name":"tail","nativeSrc":"1049:4:63","nodeType":"YulIdentifier","src":"1049:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1091:9:63","nodeType":"YulIdentifier","src":"1091:9:63"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1116:6:63","nodeType":"YulIdentifier","src":"1116:6:63"}],"functionName":{"name":"iszero","nativeSrc":"1109:6:63","nodeType":"YulIdentifier","src":"1109:6:63"},"nativeSrc":"1109:14:63","nodeType":"YulFunctionCall","src":"1109:14:63"}],"functionName":{"name":"iszero","nativeSrc":"1102:6:63","nodeType":"YulIdentifier","src":"1102:6:63"},"nativeSrc":"1102:22:63","nodeType":"YulFunctionCall","src":"1102:22:63"}],"functionName":{"name":"mstore","nativeSrc":"1084:6:63","nodeType":"YulIdentifier","src":"1084:6:63"},"nativeSrc":"1084:41:63","nodeType":"YulFunctionCall","src":"1084:41:63"},"nativeSrc":"1084:41:63","nodeType":"YulExpressionStatement","src":"1084:41:63"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"944:187:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1008:9:63","nodeType":"YulTypedName","src":"1008:9:63","type":""},{"name":"value0","nativeSrc":"1019:6:63","nodeType":"YulTypedName","src":"1019:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1030:4:63","nodeType":"YulTypedName","src":"1030:4:63","type":""}],"src":"944:187:63"},{"body":{"nativeSrc":"1252:125:63","nodeType":"YulBlock","src":"1252:125:63","statements":[{"nativeSrc":"1262:26:63","nodeType":"YulAssignment","src":"1262:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1274:9:63","nodeType":"YulIdentifier","src":"1274:9:63"},{"kind":"number","nativeSrc":"1285:2:63","nodeType":"YulLiteral","src":"1285:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1270:3:63","nodeType":"YulIdentifier","src":"1270:3:63"},"nativeSrc":"1270:18:63","nodeType":"YulFunctionCall","src":"1270:18:63"},"variableNames":[{"name":"tail","nativeSrc":"1262:4:63","nodeType":"YulIdentifier","src":"1262:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1304:9:63","nodeType":"YulIdentifier","src":"1304:9:63"},{"arguments":[{"name":"value0","nativeSrc":"1319:6:63","nodeType":"YulIdentifier","src":"1319:6:63"},{"kind":"number","nativeSrc":"1327:42:63","nodeType":"YulLiteral","src":"1327:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1315:3:63","nodeType":"YulIdentifier","src":"1315:3:63"},"nativeSrc":"1315:55:63","nodeType":"YulFunctionCall","src":"1315:55:63"}],"functionName":{"name":"mstore","nativeSrc":"1297:6:63","nodeType":"YulIdentifier","src":"1297:6:63"},"nativeSrc":"1297:74:63","nodeType":"YulFunctionCall","src":"1297:74:63"},"nativeSrc":"1297:74:63","nodeType":"YulExpressionStatement","src":"1297:74:63"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$3386__to_t_address__fromStack_reversed","nativeSrc":"1136:241:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1221:9:63","nodeType":"YulTypedName","src":"1221:9:63","type":""},{"name":"value0","nativeSrc":"1232:6:63","nodeType":"YulTypedName","src":"1232:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1243:4:63","nodeType":"YulTypedName","src":"1243:4:63","type":""}],"src":"1136:241:63"},{"body":{"nativeSrc":"1454:275:63","nodeType":"YulBlock","src":"1454:275:63","statements":[{"body":{"nativeSrc":"1503:16:63","nodeType":"YulBlock","src":"1503:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1512:1:63","nodeType":"YulLiteral","src":"1512:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1515:1:63","nodeType":"YulLiteral","src":"1515:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1505:6:63","nodeType":"YulIdentifier","src":"1505:6:63"},"nativeSrc":"1505:12:63","nodeType":"YulFunctionCall","src":"1505:12:63"},"nativeSrc":"1505:12:63","nodeType":"YulExpressionStatement","src":"1505:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1482:6:63","nodeType":"YulIdentifier","src":"1482:6:63"},{"kind":"number","nativeSrc":"1490:4:63","nodeType":"YulLiteral","src":"1490:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1478:3:63","nodeType":"YulIdentifier","src":"1478:3:63"},"nativeSrc":"1478:17:63","nodeType":"YulFunctionCall","src":"1478:17:63"},{"name":"end","nativeSrc":"1497:3:63","nodeType":"YulIdentifier","src":"1497:3:63"}],"functionName":{"name":"slt","nativeSrc":"1474:3:63","nodeType":"YulIdentifier","src":"1474:3:63"},"nativeSrc":"1474:27:63","nodeType":"YulFunctionCall","src":"1474:27:63"}],"functionName":{"name":"iszero","nativeSrc":"1467:6:63","nodeType":"YulIdentifier","src":"1467:6:63"},"nativeSrc":"1467:35:63","nodeType":"YulFunctionCall","src":"1467:35:63"},"nativeSrc":"1464:55:63","nodeType":"YulIf","src":"1464:55:63"},{"nativeSrc":"1528:30:63","nodeType":"YulAssignment","src":"1528:30:63","value":{"arguments":[{"name":"offset","nativeSrc":"1551:6:63","nodeType":"YulIdentifier","src":"1551:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"1538:12:63","nodeType":"YulIdentifier","src":"1538:12:63"},"nativeSrc":"1538:20:63","nodeType":"YulFunctionCall","src":"1538:20:63"},"variableNames":[{"name":"length","nativeSrc":"1528:6:63","nodeType":"YulIdentifier","src":"1528:6:63"}]},{"body":{"nativeSrc":"1601:16:63","nodeType":"YulBlock","src":"1601:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1610:1:63","nodeType":"YulLiteral","src":"1610:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1613:1:63","nodeType":"YulLiteral","src":"1613:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1603:6:63","nodeType":"YulIdentifier","src":"1603:6:63"},"nativeSrc":"1603:12:63","nodeType":"YulFunctionCall","src":"1603:12:63"},"nativeSrc":"1603:12:63","nodeType":"YulExpressionStatement","src":"1603:12:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1573:6:63","nodeType":"YulIdentifier","src":"1573:6:63"},{"kind":"number","nativeSrc":"1581:18:63","nodeType":"YulLiteral","src":"1581:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1570:2:63","nodeType":"YulIdentifier","src":"1570:2:63"},"nativeSrc":"1570:30:63","nodeType":"YulFunctionCall","src":"1570:30:63"},"nativeSrc":"1567:50:63","nodeType":"YulIf","src":"1567:50:63"},{"nativeSrc":"1626:29:63","nodeType":"YulAssignment","src":"1626:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"1642:6:63","nodeType":"YulIdentifier","src":"1642:6:63"},{"kind":"number","nativeSrc":"1650:4:63","nodeType":"YulLiteral","src":"1650:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1638:3:63","nodeType":"YulIdentifier","src":"1638:3:63"},"nativeSrc":"1638:17:63","nodeType":"YulFunctionCall","src":"1638:17:63"},"variableNames":[{"name":"arrayPos","nativeSrc":"1626:8:63","nodeType":"YulIdentifier","src":"1626:8:63"}]},{"body":{"nativeSrc":"1707:16:63","nodeType":"YulBlock","src":"1707:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1716:1:63","nodeType":"YulLiteral","src":"1716:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1719:1:63","nodeType":"YulLiteral","src":"1719:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1709:6:63","nodeType":"YulIdentifier","src":"1709:6:63"},"nativeSrc":"1709:12:63","nodeType":"YulFunctionCall","src":"1709:12:63"},"nativeSrc":"1709:12:63","nodeType":"YulExpressionStatement","src":"1709:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1678:6:63","nodeType":"YulIdentifier","src":"1678:6:63"},{"name":"length","nativeSrc":"1686:6:63","nodeType":"YulIdentifier","src":"1686:6:63"}],"functionName":{"name":"add","nativeSrc":"1674:3:63","nodeType":"YulIdentifier","src":"1674:3:63"},"nativeSrc":"1674:19:63","nodeType":"YulFunctionCall","src":"1674:19:63"},{"kind":"number","nativeSrc":"1695:4:63","nodeType":"YulLiteral","src":"1695:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1670:3:63","nodeType":"YulIdentifier","src":"1670:3:63"},"nativeSrc":"1670:30:63","nodeType":"YulFunctionCall","src":"1670:30:63"},{"name":"end","nativeSrc":"1702:3:63","nodeType":"YulIdentifier","src":"1702:3:63"}],"functionName":{"name":"gt","nativeSrc":"1667:2:63","nodeType":"YulIdentifier","src":"1667:2:63"},"nativeSrc":"1667:39:63","nodeType":"YulFunctionCall","src":"1667:39:63"},"nativeSrc":"1664:59:63","nodeType":"YulIf","src":"1664:59:63"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"1382:347:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1417:6:63","nodeType":"YulTypedName","src":"1417:6:63","type":""},{"name":"end","nativeSrc":"1425:3:63","nodeType":"YulTypedName","src":"1425:3:63","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1433:8:63","nodeType":"YulTypedName","src":"1433:8:63","type":""},{"name":"length","nativeSrc":"1443:6:63","nodeType":"YulTypedName","src":"1443:6:63","type":""}],"src":"1382:347:63"},{"body":{"nativeSrc":"1823:320:63","nodeType":"YulBlock","src":"1823:320:63","statements":[{"body":{"nativeSrc":"1869:16:63","nodeType":"YulBlock","src":"1869:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1878:1:63","nodeType":"YulLiteral","src":"1878:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1881:1:63","nodeType":"YulLiteral","src":"1881:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1871:6:63","nodeType":"YulIdentifier","src":"1871:6:63"},"nativeSrc":"1871:12:63","nodeType":"YulFunctionCall","src":"1871:12:63"},"nativeSrc":"1871:12:63","nodeType":"YulExpressionStatement","src":"1871:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1844:7:63","nodeType":"YulIdentifier","src":"1844:7:63"},{"name":"headStart","nativeSrc":"1853:9:63","nodeType":"YulIdentifier","src":"1853:9:63"}],"functionName":{"name":"sub","nativeSrc":"1840:3:63","nodeType":"YulIdentifier","src":"1840:3:63"},"nativeSrc":"1840:23:63","nodeType":"YulFunctionCall","src":"1840:23:63"},{"kind":"number","nativeSrc":"1865:2:63","nodeType":"YulLiteral","src":"1865:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1836:3:63","nodeType":"YulIdentifier","src":"1836:3:63"},"nativeSrc":"1836:32:63","nodeType":"YulFunctionCall","src":"1836:32:63"},"nativeSrc":"1833:52:63","nodeType":"YulIf","src":"1833:52:63"},{"nativeSrc":"1894:37:63","nodeType":"YulVariableDeclaration","src":"1894:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1921:9:63","nodeType":"YulIdentifier","src":"1921:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"1908:12:63","nodeType":"YulIdentifier","src":"1908:12:63"},"nativeSrc":"1908:23:63","nodeType":"YulFunctionCall","src":"1908:23:63"},"variables":[{"name":"offset","nativeSrc":"1898:6:63","nodeType":"YulTypedName","src":"1898:6:63","type":""}]},{"body":{"nativeSrc":"1974:16:63","nodeType":"YulBlock","src":"1974:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1983:1:63","nodeType":"YulLiteral","src":"1983:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1986:1:63","nodeType":"YulLiteral","src":"1986:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1976:6:63","nodeType":"YulIdentifier","src":"1976:6:63"},"nativeSrc":"1976:12:63","nodeType":"YulFunctionCall","src":"1976:12:63"},"nativeSrc":"1976:12:63","nodeType":"YulExpressionStatement","src":"1976:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1946:6:63","nodeType":"YulIdentifier","src":"1946:6:63"},{"kind":"number","nativeSrc":"1954:18:63","nodeType":"YulLiteral","src":"1954:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1943:2:63","nodeType":"YulIdentifier","src":"1943:2:63"},"nativeSrc":"1943:30:63","nodeType":"YulFunctionCall","src":"1943:30:63"},"nativeSrc":"1940:50:63","nodeType":"YulIf","src":"1940:50:63"},{"nativeSrc":"1999:84:63","nodeType":"YulVariableDeclaration","src":"1999:84:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2055:9:63","nodeType":"YulIdentifier","src":"2055:9:63"},{"name":"offset","nativeSrc":"2066:6:63","nodeType":"YulIdentifier","src":"2066:6:63"}],"functionName":{"name":"add","nativeSrc":"2051:3:63","nodeType":"YulIdentifier","src":"2051:3:63"},"nativeSrc":"2051:22:63","nodeType":"YulFunctionCall","src":"2051:22:63"},{"name":"dataEnd","nativeSrc":"2075:7:63","nodeType":"YulIdentifier","src":"2075:7:63"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2025:25:63","nodeType":"YulIdentifier","src":"2025:25:63"},"nativeSrc":"2025:58:63","nodeType":"YulFunctionCall","src":"2025:58:63"},"variables":[{"name":"value0_1","nativeSrc":"2003:8:63","nodeType":"YulTypedName","src":"2003:8:63","type":""},{"name":"value1_1","nativeSrc":"2013:8:63","nodeType":"YulTypedName","src":"2013:8:63","type":""}]},{"nativeSrc":"2092:18:63","nodeType":"YulAssignment","src":"2092:18:63","value":{"name":"value0_1","nativeSrc":"2102:8:63","nodeType":"YulIdentifier","src":"2102:8:63"},"variableNames":[{"name":"value0","nativeSrc":"2092:6:63","nodeType":"YulIdentifier","src":"2092:6:63"}]},{"nativeSrc":"2119:18:63","nodeType":"YulAssignment","src":"2119:18:63","value":{"name":"value1_1","nativeSrc":"2129:8:63","nodeType":"YulIdentifier","src":"2129:8:63"},"variableNames":[{"name":"value1","nativeSrc":"2119:6:63","nodeType":"YulIdentifier","src":"2119:6:63"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nativeSrc":"1734:409:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1781:9:63","nodeType":"YulTypedName","src":"1781:9:63","type":""},{"name":"dataEnd","nativeSrc":"1792:7:63","nodeType":"YulTypedName","src":"1792:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1804:6:63","nodeType":"YulTypedName","src":"1804:6:63","type":""},{"name":"value1","nativeSrc":"1812:6:63","nodeType":"YulTypedName","src":"1812:6:63","type":""}],"src":"1734:409:63"},{"body":{"nativeSrc":"2249:76:63","nodeType":"YulBlock","src":"2249:76:63","statements":[{"nativeSrc":"2259:26:63","nodeType":"YulAssignment","src":"2259:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2271:9:63","nodeType":"YulIdentifier","src":"2271:9:63"},{"kind":"number","nativeSrc":"2282:2:63","nodeType":"YulLiteral","src":"2282:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2267:3:63","nodeType":"YulIdentifier","src":"2267:3:63"},"nativeSrc":"2267:18:63","nodeType":"YulFunctionCall","src":"2267:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2259:4:63","nodeType":"YulIdentifier","src":"2259:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2301:9:63","nodeType":"YulIdentifier","src":"2301:9:63"},{"name":"value0","nativeSrc":"2312:6:63","nodeType":"YulIdentifier","src":"2312:6:63"}],"functionName":{"name":"mstore","nativeSrc":"2294:6:63","nodeType":"YulIdentifier","src":"2294:6:63"},"nativeSrc":"2294:25:63","nodeType":"YulFunctionCall","src":"2294:25:63"},"nativeSrc":"2294:25:63","nodeType":"YulExpressionStatement","src":"2294:25:63"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2148:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2218:9:63","nodeType":"YulTypedName","src":"2218:9:63","type":""},{"name":"value0","nativeSrc":"2229:6:63","nodeType":"YulTypedName","src":"2229:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2240:4:63","nodeType":"YulTypedName","src":"2240:4:63","type":""}],"src":"2148:177:63"},{"body":{"nativeSrc":"2458:125:63","nodeType":"YulBlock","src":"2458:125:63","statements":[{"nativeSrc":"2468:26:63","nodeType":"YulAssignment","src":"2468:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2480:9:63","nodeType":"YulIdentifier","src":"2480:9:63"},{"kind":"number","nativeSrc":"2491:2:63","nodeType":"YulLiteral","src":"2491:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2476:3:63","nodeType":"YulIdentifier","src":"2476:3:63"},"nativeSrc":"2476:18:63","nodeType":"YulFunctionCall","src":"2476:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2468:4:63","nodeType":"YulIdentifier","src":"2468:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2510:9:63","nodeType":"YulIdentifier","src":"2510:9:63"},{"arguments":[{"name":"value0","nativeSrc":"2525:6:63","nodeType":"YulIdentifier","src":"2525:6:63"},{"kind":"number","nativeSrc":"2533:42:63","nodeType":"YulLiteral","src":"2533:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2521:3:63","nodeType":"YulIdentifier","src":"2521:3:63"},"nativeSrc":"2521:55:63","nodeType":"YulFunctionCall","src":"2521:55:63"}],"functionName":{"name":"mstore","nativeSrc":"2503:6:63","nodeType":"YulIdentifier","src":"2503:6:63"},"nativeSrc":"2503:74:63","nodeType":"YulFunctionCall","src":"2503:74:63"},"nativeSrc":"2503:74:63","nodeType":"YulExpressionStatement","src":"2503:74:63"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1506__to_t_address__fromStack_reversed","nativeSrc":"2330:253:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2427:9:63","nodeType":"YulTypedName","src":"2427:9:63","type":""},{"name":"value0","nativeSrc":"2438:6:63","nodeType":"YulTypedName","src":"2438:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2449:4:63","nodeType":"YulTypedName","src":"2449:4:63","type":""}],"src":"2330:253:63"},{"body":{"nativeSrc":"2705:125:63","nodeType":"YulBlock","src":"2705:125:63","statements":[{"nativeSrc":"2715:26:63","nodeType":"YulAssignment","src":"2715:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2727:9:63","nodeType":"YulIdentifier","src":"2727:9:63"},{"kind":"number","nativeSrc":"2738:2:63","nodeType":"YulLiteral","src":"2738:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2723:3:63","nodeType":"YulIdentifier","src":"2723:3:63"},"nativeSrc":"2723:18:63","nodeType":"YulFunctionCall","src":"2723:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2715:4:63","nodeType":"YulIdentifier","src":"2715:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2757:9:63","nodeType":"YulIdentifier","src":"2757:9:63"},{"arguments":[{"name":"value0","nativeSrc":"2772:6:63","nodeType":"YulIdentifier","src":"2772:6:63"},{"kind":"number","nativeSrc":"2780:42:63","nodeType":"YulLiteral","src":"2780:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2768:3:63","nodeType":"YulIdentifier","src":"2768:3:63"},"nativeSrc":"2768:55:63","nodeType":"YulFunctionCall","src":"2768:55:63"}],"functionName":{"name":"mstore","nativeSrc":"2750:6:63","nodeType":"YulIdentifier","src":"2750:6:63"},"nativeSrc":"2750:74:63","nodeType":"YulFunctionCall","src":"2750:74:63"},"nativeSrc":"2750:74:63","nodeType":"YulExpressionStatement","src":"2750:74:63"}]},"name":"abi_encode_tuple_t_contract$_IPoints_$5929__to_t_address__fromStack_reversed","nativeSrc":"2588:242:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2674:9:63","nodeType":"YulTypedName","src":"2674:9:63","type":""},{"name":"value0","nativeSrc":"2685:6:63","nodeType":"YulTypedName","src":"2685:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2696:4:63","nodeType":"YulTypedName","src":"2696:4:63","type":""}],"src":"2588:242:63"},{"body":{"nativeSrc":"2922:280:63","nodeType":"YulBlock","src":"2922:280:63","statements":[{"body":{"nativeSrc":"2968:16:63","nodeType":"YulBlock","src":"2968:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2977:1:63","nodeType":"YulLiteral","src":"2977:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"2980:1:63","nodeType":"YulLiteral","src":"2980:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2970:6:63","nodeType":"YulIdentifier","src":"2970:6:63"},"nativeSrc":"2970:12:63","nodeType":"YulFunctionCall","src":"2970:12:63"},"nativeSrc":"2970:12:63","nodeType":"YulExpressionStatement","src":"2970:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2943:7:63","nodeType":"YulIdentifier","src":"2943:7:63"},{"name":"headStart","nativeSrc":"2952:9:63","nodeType":"YulIdentifier","src":"2952:9:63"}],"functionName":{"name":"sub","nativeSrc":"2939:3:63","nodeType":"YulIdentifier","src":"2939:3:63"},"nativeSrc":"2939:23:63","nodeType":"YulFunctionCall","src":"2939:23:63"},{"kind":"number","nativeSrc":"2964:2:63","nodeType":"YulLiteral","src":"2964:2:63","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2935:3:63","nodeType":"YulIdentifier","src":"2935:3:63"},"nativeSrc":"2935:32:63","nodeType":"YulFunctionCall","src":"2935:32:63"},"nativeSrc":"2932:52:63","nodeType":"YulIf","src":"2932:52:63"},{"nativeSrc":"2993:14:63","nodeType":"YulVariableDeclaration","src":"2993:14:63","value":{"kind":"number","nativeSrc":"3006:1:63","nodeType":"YulLiteral","src":"3006:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2997:5:63","nodeType":"YulTypedName","src":"2997:5:63","type":""}]},{"nativeSrc":"3016:32:63","nodeType":"YulAssignment","src":"3016:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"3038:9:63","nodeType":"YulIdentifier","src":"3038:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"3025:12:63","nodeType":"YulIdentifier","src":"3025:12:63"},"nativeSrc":"3025:23:63","nodeType":"YulFunctionCall","src":"3025:23:63"},"variableNames":[{"name":"value","nativeSrc":"3016:5:63","nodeType":"YulIdentifier","src":"3016:5:63"}]},{"nativeSrc":"3057:15:63","nodeType":"YulAssignment","src":"3057:15:63","value":{"name":"value","nativeSrc":"3067:5:63","nodeType":"YulIdentifier","src":"3067:5:63"},"variableNames":[{"name":"value0","nativeSrc":"3057:6:63","nodeType":"YulIdentifier","src":"3057:6:63"}]},{"nativeSrc":"3081:47:63","nodeType":"YulVariableDeclaration","src":"3081:47:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3113:9:63","nodeType":"YulIdentifier","src":"3113:9:63"},{"kind":"number","nativeSrc":"3124:2:63","nodeType":"YulLiteral","src":"3124:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3109:3:63","nodeType":"YulIdentifier","src":"3109:3:63"},"nativeSrc":"3109:18:63","nodeType":"YulFunctionCall","src":"3109:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3096:12:63","nodeType":"YulIdentifier","src":"3096:12:63"},"nativeSrc":"3096:32:63","nodeType":"YulFunctionCall","src":"3096:32:63"},"variables":[{"name":"value_1","nativeSrc":"3085:7:63","nodeType":"YulTypedName","src":"3085:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3162:7:63","nodeType":"YulIdentifier","src":"3162:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3137:24:63","nodeType":"YulIdentifier","src":"3137:24:63"},"nativeSrc":"3137:33:63","nodeType":"YulFunctionCall","src":"3137:33:63"},"nativeSrc":"3137:33:63","nodeType":"YulExpressionStatement","src":"3137:33:63"},{"nativeSrc":"3179:17:63","nodeType":"YulAssignment","src":"3179:17:63","value":{"name":"value_1","nativeSrc":"3189:7:63","nodeType":"YulIdentifier","src":"3189:7:63"},"variableNames":[{"name":"value1","nativeSrc":"3179:6:63","nodeType":"YulIdentifier","src":"3179:6:63"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2835:367:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2880:9:63","nodeType":"YulTypedName","src":"2880:9:63","type":""},{"name":"dataEnd","nativeSrc":"2891:7:63","nodeType":"YulTypedName","src":"2891:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2903:6:63","nodeType":"YulTypedName","src":"2903:6:63","type":""},{"name":"value1","nativeSrc":"2911:6:63","nodeType":"YulTypedName","src":"2911:6:63","type":""}],"src":"2835:367:63"},{"body":{"nativeSrc":"3347:666:63","nodeType":"YulBlock","src":"3347:666:63","statements":[{"body":{"nativeSrc":"3394:16:63","nodeType":"YulBlock","src":"3394:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3403:1:63","nodeType":"YulLiteral","src":"3403:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"3406:1:63","nodeType":"YulLiteral","src":"3406:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3396:6:63","nodeType":"YulIdentifier","src":"3396:6:63"},"nativeSrc":"3396:12:63","nodeType":"YulFunctionCall","src":"3396:12:63"},"nativeSrc":"3396:12:63","nodeType":"YulExpressionStatement","src":"3396:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3368:7:63","nodeType":"YulIdentifier","src":"3368:7:63"},{"name":"headStart","nativeSrc":"3377:9:63","nodeType":"YulIdentifier","src":"3377:9:63"}],"functionName":{"name":"sub","nativeSrc":"3364:3:63","nodeType":"YulIdentifier","src":"3364:3:63"},"nativeSrc":"3364:23:63","nodeType":"YulFunctionCall","src":"3364:23:63"},{"kind":"number","nativeSrc":"3389:3:63","nodeType":"YulLiteral","src":"3389:3:63","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3360:3:63","nodeType":"YulIdentifier","src":"3360:3:63"},"nativeSrc":"3360:33:63","nodeType":"YulFunctionCall","src":"3360:33:63"},"nativeSrc":"3357:53:63","nodeType":"YulIf","src":"3357:53:63"},{"nativeSrc":"3419:36:63","nodeType":"YulVariableDeclaration","src":"3419:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"3445:9:63","nodeType":"YulIdentifier","src":"3445:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"3432:12:63","nodeType":"YulIdentifier","src":"3432:12:63"},"nativeSrc":"3432:23:63","nodeType":"YulFunctionCall","src":"3432:23:63"},"variables":[{"name":"value","nativeSrc":"3423:5:63","nodeType":"YulTypedName","src":"3423:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3489:5:63","nodeType":"YulIdentifier","src":"3489:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3464:24:63","nodeType":"YulIdentifier","src":"3464:24:63"},"nativeSrc":"3464:31:63","nodeType":"YulFunctionCall","src":"3464:31:63"},"nativeSrc":"3464:31:63","nodeType":"YulExpressionStatement","src":"3464:31:63"},{"nativeSrc":"3504:15:63","nodeType":"YulAssignment","src":"3504:15:63","value":{"name":"value","nativeSrc":"3514:5:63","nodeType":"YulIdentifier","src":"3514:5:63"},"variableNames":[{"name":"value0","nativeSrc":"3504:6:63","nodeType":"YulIdentifier","src":"3504:6:63"}]},{"nativeSrc":"3528:47:63","nodeType":"YulVariableDeclaration","src":"3528:47:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3560:9:63","nodeType":"YulIdentifier","src":"3560:9:63"},{"kind":"number","nativeSrc":"3571:2:63","nodeType":"YulLiteral","src":"3571:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3556:3:63","nodeType":"YulIdentifier","src":"3556:3:63"},"nativeSrc":"3556:18:63","nodeType":"YulFunctionCall","src":"3556:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3543:12:63","nodeType":"YulIdentifier","src":"3543:12:63"},"nativeSrc":"3543:32:63","nodeType":"YulFunctionCall","src":"3543:32:63"},"variables":[{"name":"value_1","nativeSrc":"3532:7:63","nodeType":"YulTypedName","src":"3532:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3609:7:63","nodeType":"YulIdentifier","src":"3609:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3584:24:63","nodeType":"YulIdentifier","src":"3584:24:63"},"nativeSrc":"3584:33:63","nodeType":"YulFunctionCall","src":"3584:33:63"},"nativeSrc":"3584:33:63","nodeType":"YulExpressionStatement","src":"3584:33:63"},{"nativeSrc":"3626:17:63","nodeType":"YulAssignment","src":"3626:17:63","value":{"name":"value_1","nativeSrc":"3636:7:63","nodeType":"YulIdentifier","src":"3636:7:63"},"variableNames":[{"name":"value1","nativeSrc":"3626:6:63","nodeType":"YulIdentifier","src":"3626:6:63"}]},{"nativeSrc":"3652:16:63","nodeType":"YulVariableDeclaration","src":"3652:16:63","value":{"kind":"number","nativeSrc":"3667:1:63","nodeType":"YulLiteral","src":"3667:1:63","type":"","value":"0"},"variables":[{"name":"value_2","nativeSrc":"3656:7:63","nodeType":"YulTypedName","src":"3656:7:63","type":""}]},{"nativeSrc":"3677:43:63","nodeType":"YulAssignment","src":"3677:43:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3705:9:63","nodeType":"YulIdentifier","src":"3705:9:63"},{"kind":"number","nativeSrc":"3716:2:63","nodeType":"YulLiteral","src":"3716:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3701:3:63","nodeType":"YulIdentifier","src":"3701:3:63"},"nativeSrc":"3701:18:63","nodeType":"YulFunctionCall","src":"3701:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3688:12:63","nodeType":"YulIdentifier","src":"3688:12:63"},"nativeSrc":"3688:32:63","nodeType":"YulFunctionCall","src":"3688:32:63"},"variableNames":[{"name":"value_2","nativeSrc":"3677:7:63","nodeType":"YulIdentifier","src":"3677:7:63"}]},{"nativeSrc":"3729:17:63","nodeType":"YulAssignment","src":"3729:17:63","value":{"name":"value_2","nativeSrc":"3739:7:63","nodeType":"YulIdentifier","src":"3739:7:63"},"variableNames":[{"name":"value2","nativeSrc":"3729:6:63","nodeType":"YulIdentifier","src":"3729:6:63"}]},{"nativeSrc":"3755:46:63","nodeType":"YulVariableDeclaration","src":"3755:46:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3786:9:63","nodeType":"YulIdentifier","src":"3786:9:63"},{"kind":"number","nativeSrc":"3797:2:63","nodeType":"YulLiteral","src":"3797:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3782:3:63","nodeType":"YulIdentifier","src":"3782:3:63"},"nativeSrc":"3782:18:63","nodeType":"YulFunctionCall","src":"3782:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3769:12:63","nodeType":"YulIdentifier","src":"3769:12:63"},"nativeSrc":"3769:32:63","nodeType":"YulFunctionCall","src":"3769:32:63"},"variables":[{"name":"offset","nativeSrc":"3759:6:63","nodeType":"YulTypedName","src":"3759:6:63","type":""}]},{"body":{"nativeSrc":"3844:16:63","nodeType":"YulBlock","src":"3844:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3853:1:63","nodeType":"YulLiteral","src":"3853:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"3856:1:63","nodeType":"YulLiteral","src":"3856:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3846:6:63","nodeType":"YulIdentifier","src":"3846:6:63"},"nativeSrc":"3846:12:63","nodeType":"YulFunctionCall","src":"3846:12:63"},"nativeSrc":"3846:12:63","nodeType":"YulExpressionStatement","src":"3846:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3816:6:63","nodeType":"YulIdentifier","src":"3816:6:63"},{"kind":"number","nativeSrc":"3824:18:63","nodeType":"YulLiteral","src":"3824:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3813:2:63","nodeType":"YulIdentifier","src":"3813:2:63"},"nativeSrc":"3813:30:63","nodeType":"YulFunctionCall","src":"3813:30:63"},"nativeSrc":"3810:50:63","nodeType":"YulIf","src":"3810:50:63"},{"nativeSrc":"3869:84:63","nodeType":"YulVariableDeclaration","src":"3869:84:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3925:9:63","nodeType":"YulIdentifier","src":"3925:9:63"},{"name":"offset","nativeSrc":"3936:6:63","nodeType":"YulIdentifier","src":"3936:6:63"}],"functionName":{"name":"add","nativeSrc":"3921:3:63","nodeType":"YulIdentifier","src":"3921:3:63"},"nativeSrc":"3921:22:63","nodeType":"YulFunctionCall","src":"3921:22:63"},{"name":"dataEnd","nativeSrc":"3945:7:63","nodeType":"YulIdentifier","src":"3945:7:63"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3895:25:63","nodeType":"YulIdentifier","src":"3895:25:63"},"nativeSrc":"3895:58:63","nodeType":"YulFunctionCall","src":"3895:58:63"},"variables":[{"name":"value3_1","nativeSrc":"3873:8:63","nodeType":"YulTypedName","src":"3873:8:63","type":""},{"name":"value4_1","nativeSrc":"3883:8:63","nodeType":"YulTypedName","src":"3883:8:63","type":""}]},{"nativeSrc":"3962:18:63","nodeType":"YulAssignment","src":"3962:18:63","value":{"name":"value3_1","nativeSrc":"3972:8:63","nodeType":"YulIdentifier","src":"3972:8:63"},"variableNames":[{"name":"value3","nativeSrc":"3962:6:63","nodeType":"YulIdentifier","src":"3962:6:63"}]},{"nativeSrc":"3989:18:63","nodeType":"YulAssignment","src":"3989:18:63","value":{"name":"value4_1","nativeSrc":"3999:8:63","nodeType":"YulIdentifier","src":"3999:8:63"},"variableNames":[{"name":"value4","nativeSrc":"3989:6:63","nodeType":"YulIdentifier","src":"3989:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"3207:806:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3281:9:63","nodeType":"YulTypedName","src":"3281:9:63","type":""},{"name":"dataEnd","nativeSrc":"3292:7:63","nodeType":"YulTypedName","src":"3292:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3304:6:63","nodeType":"YulTypedName","src":"3304:6:63","type":""},{"name":"value1","nativeSrc":"3312:6:63","nodeType":"YulTypedName","src":"3312:6:63","type":""},{"name":"value2","nativeSrc":"3320:6:63","nodeType":"YulTypedName","src":"3320:6:63","type":""},{"name":"value3","nativeSrc":"3328:6:63","nodeType":"YulTypedName","src":"3328:6:63","type":""},{"name":"value4","nativeSrc":"3336:6:63","nodeType":"YulTypedName","src":"3336:6:63","type":""}],"src":"3207:806:63"},{"body":{"nativeSrc":"4117:149:63","nodeType":"YulBlock","src":"4117:149:63","statements":[{"nativeSrc":"4127:26:63","nodeType":"YulAssignment","src":"4127:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"4139:9:63","nodeType":"YulIdentifier","src":"4139:9:63"},{"kind":"number","nativeSrc":"4150:2:63","nodeType":"YulLiteral","src":"4150:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4135:3:63","nodeType":"YulIdentifier","src":"4135:3:63"},"nativeSrc":"4135:18:63","nodeType":"YulFunctionCall","src":"4135:18:63"},"variableNames":[{"name":"tail","nativeSrc":"4127:4:63","nodeType":"YulIdentifier","src":"4127:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4169:9:63","nodeType":"YulIdentifier","src":"4169:9:63"},{"arguments":[{"name":"value0","nativeSrc":"4184:6:63","nodeType":"YulIdentifier","src":"4184:6:63"},{"kind":"number","nativeSrc":"4192:66:63","nodeType":"YulLiteral","src":"4192:66:63","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4180:3:63","nodeType":"YulIdentifier","src":"4180:3:63"},"nativeSrc":"4180:79:63","nodeType":"YulFunctionCall","src":"4180:79:63"}],"functionName":{"name":"mstore","nativeSrc":"4162:6:63","nodeType":"YulIdentifier","src":"4162:6:63"},"nativeSrc":"4162:98:63","nodeType":"YulFunctionCall","src":"4162:98:63"},"nativeSrc":"4162:98:63","nodeType":"YulExpressionStatement","src":"4162:98:63"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4018:248:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4086:9:63","nodeType":"YulTypedName","src":"4086:9:63","type":""},{"name":"value0","nativeSrc":"4097:6:63","nodeType":"YulTypedName","src":"4097:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4108:4:63","nodeType":"YulTypedName","src":"4108:4:63","type":""}],"src":"4018:248:63"},{"body":{"nativeSrc":"4372:125:63","nodeType":"YulBlock","src":"4372:125:63","statements":[{"nativeSrc":"4382:26:63","nodeType":"YulAssignment","src":"4382:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"4394:9:63","nodeType":"YulIdentifier","src":"4394:9:63"},{"kind":"number","nativeSrc":"4405:2:63","nodeType":"YulLiteral","src":"4405:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4390:3:63","nodeType":"YulIdentifier","src":"4390:3:63"},"nativeSrc":"4390:18:63","nodeType":"YulFunctionCall","src":"4390:18:63"},"variableNames":[{"name":"tail","nativeSrc":"4382:4:63","nodeType":"YulIdentifier","src":"4382:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4424:9:63","nodeType":"YulIdentifier","src":"4424:9:63"},{"arguments":[{"name":"value0","nativeSrc":"4439:6:63","nodeType":"YulIdentifier","src":"4439:6:63"},{"kind":"number","nativeSrc":"4447:42:63","nodeType":"YulLiteral","src":"4447:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4435:3:63","nodeType":"YulIdentifier","src":"4435:3:63"},"nativeSrc":"4435:55:63","nodeType":"YulFunctionCall","src":"4435:55:63"}],"functionName":{"name":"mstore","nativeSrc":"4417:6:63","nodeType":"YulIdentifier","src":"4417:6:63"},"nativeSrc":"4417:74:63","nodeType":"YulFunctionCall","src":"4417:74:63"},"nativeSrc":"4417:74:63","nodeType":"YulExpressionStatement","src":"4417:74:63"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4271:226:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4341:9:63","nodeType":"YulTypedName","src":"4341:9:63","type":""},{"name":"value0","nativeSrc":"4352:6:63","nodeType":"YulTypedName","src":"4352:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4363:4:63","nodeType":"YulTypedName","src":"4363:4:63","type":""}],"src":"4271:226:63"},{"body":{"nativeSrc":"4586:283:63","nodeType":"YulBlock","src":"4586:283:63","statements":[{"body":{"nativeSrc":"4635:16:63","nodeType":"YulBlock","src":"4635:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4644:1:63","nodeType":"YulLiteral","src":"4644:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"4647:1:63","nodeType":"YulLiteral","src":"4647:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4637:6:63","nodeType":"YulIdentifier","src":"4637:6:63"},"nativeSrc":"4637:12:63","nodeType":"YulFunctionCall","src":"4637:12:63"},"nativeSrc":"4637:12:63","nodeType":"YulExpressionStatement","src":"4637:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4614:6:63","nodeType":"YulIdentifier","src":"4614:6:63"},{"kind":"number","nativeSrc":"4622:4:63","nodeType":"YulLiteral","src":"4622:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4610:3:63","nodeType":"YulIdentifier","src":"4610:3:63"},"nativeSrc":"4610:17:63","nodeType":"YulFunctionCall","src":"4610:17:63"},{"name":"end","nativeSrc":"4629:3:63","nodeType":"YulIdentifier","src":"4629:3:63"}],"functionName":{"name":"slt","nativeSrc":"4606:3:63","nodeType":"YulIdentifier","src":"4606:3:63"},"nativeSrc":"4606:27:63","nodeType":"YulFunctionCall","src":"4606:27:63"}],"functionName":{"name":"iszero","nativeSrc":"4599:6:63","nodeType":"YulIdentifier","src":"4599:6:63"},"nativeSrc":"4599:35:63","nodeType":"YulFunctionCall","src":"4599:35:63"},"nativeSrc":"4596:55:63","nodeType":"YulIf","src":"4596:55:63"},{"nativeSrc":"4660:30:63","nodeType":"YulAssignment","src":"4660:30:63","value":{"arguments":[{"name":"offset","nativeSrc":"4683:6:63","nodeType":"YulIdentifier","src":"4683:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"4670:12:63","nodeType":"YulIdentifier","src":"4670:12:63"},"nativeSrc":"4670:20:63","nodeType":"YulFunctionCall","src":"4670:20:63"},"variableNames":[{"name":"length","nativeSrc":"4660:6:63","nodeType":"YulIdentifier","src":"4660:6:63"}]},{"body":{"nativeSrc":"4733:16:63","nodeType":"YulBlock","src":"4733:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4742:1:63","nodeType":"YulLiteral","src":"4742:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"4745:1:63","nodeType":"YulLiteral","src":"4745:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4735:6:63","nodeType":"YulIdentifier","src":"4735:6:63"},"nativeSrc":"4735:12:63","nodeType":"YulFunctionCall","src":"4735:12:63"},"nativeSrc":"4735:12:63","nodeType":"YulExpressionStatement","src":"4735:12:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4705:6:63","nodeType":"YulIdentifier","src":"4705:6:63"},{"kind":"number","nativeSrc":"4713:18:63","nodeType":"YulLiteral","src":"4713:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4702:2:63","nodeType":"YulIdentifier","src":"4702:2:63"},"nativeSrc":"4702:30:63","nodeType":"YulFunctionCall","src":"4702:30:63"},"nativeSrc":"4699:50:63","nodeType":"YulIf","src":"4699:50:63"},{"nativeSrc":"4758:29:63","nodeType":"YulAssignment","src":"4758:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"4774:6:63","nodeType":"YulIdentifier","src":"4774:6:63"},{"kind":"number","nativeSrc":"4782:4:63","nodeType":"YulLiteral","src":"4782:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4770:3:63","nodeType":"YulIdentifier","src":"4770:3:63"},"nativeSrc":"4770:17:63","nodeType":"YulFunctionCall","src":"4770:17:63"},"variableNames":[{"name":"arrayPos","nativeSrc":"4758:8:63","nodeType":"YulIdentifier","src":"4758:8:63"}]},{"body":{"nativeSrc":"4847:16:63","nodeType":"YulBlock","src":"4847:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4856:1:63","nodeType":"YulLiteral","src":"4856:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"4859:1:63","nodeType":"YulLiteral","src":"4859:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4849:6:63","nodeType":"YulIdentifier","src":"4849:6:63"},"nativeSrc":"4849:12:63","nodeType":"YulFunctionCall","src":"4849:12:63"},"nativeSrc":"4849:12:63","nodeType":"YulExpressionStatement","src":"4849:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4810:6:63","nodeType":"YulIdentifier","src":"4810:6:63"},{"arguments":[{"kind":"number","nativeSrc":"4822:1:63","nodeType":"YulLiteral","src":"4822:1:63","type":"","value":"5"},{"name":"length","nativeSrc":"4825:6:63","nodeType":"YulIdentifier","src":"4825:6:63"}],"functionName":{"name":"shl","nativeSrc":"4818:3:63","nodeType":"YulIdentifier","src":"4818:3:63"},"nativeSrc":"4818:14:63","nodeType":"YulFunctionCall","src":"4818:14:63"}],"functionName":{"name":"add","nativeSrc":"4806:3:63","nodeType":"YulIdentifier","src":"4806:3:63"},"nativeSrc":"4806:27:63","nodeType":"YulFunctionCall","src":"4806:27:63"},{"kind":"number","nativeSrc":"4835:4:63","nodeType":"YulLiteral","src":"4835:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4802:3:63","nodeType":"YulIdentifier","src":"4802:3:63"},"nativeSrc":"4802:38:63","nodeType":"YulFunctionCall","src":"4802:38:63"},{"name":"end","nativeSrc":"4842:3:63","nodeType":"YulIdentifier","src":"4842:3:63"}],"functionName":{"name":"gt","nativeSrc":"4799:2:63","nodeType":"YulIdentifier","src":"4799:2:63"},"nativeSrc":"4799:47:63","nodeType":"YulFunctionCall","src":"4799:47:63"},"nativeSrc":"4796:67:63","nodeType":"YulIf","src":"4796:67:63"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4502:367:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4549:6:63","nodeType":"YulTypedName","src":"4549:6:63","type":""},{"name":"end","nativeSrc":"4557:3:63","nodeType":"YulTypedName","src":"4557:3:63","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"4565:8:63","nodeType":"YulTypedName","src":"4565:8:63","type":""},{"name":"length","nativeSrc":"4575:6:63","nodeType":"YulTypedName","src":"4575:6:63","type":""}],"src":"4502:367:63"},{"body":{"nativeSrc":"5098:890:63","nodeType":"YulBlock","src":"5098:890:63","statements":[{"body":{"nativeSrc":"5144:16:63","nodeType":"YulBlock","src":"5144:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5153:1:63","nodeType":"YulLiteral","src":"5153:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5156:1:63","nodeType":"YulLiteral","src":"5156:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5146:6:63","nodeType":"YulIdentifier","src":"5146:6:63"},"nativeSrc":"5146:12:63","nodeType":"YulFunctionCall","src":"5146:12:63"},"nativeSrc":"5146:12:63","nodeType":"YulExpressionStatement","src":"5146:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5119:7:63","nodeType":"YulIdentifier","src":"5119:7:63"},{"name":"headStart","nativeSrc":"5128:9:63","nodeType":"YulIdentifier","src":"5128:9:63"}],"functionName":{"name":"sub","nativeSrc":"5115:3:63","nodeType":"YulIdentifier","src":"5115:3:63"},"nativeSrc":"5115:23:63","nodeType":"YulFunctionCall","src":"5115:23:63"},{"kind":"number","nativeSrc":"5140:2:63","nodeType":"YulLiteral","src":"5140:2:63","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5111:3:63","nodeType":"YulIdentifier","src":"5111:3:63"},"nativeSrc":"5111:32:63","nodeType":"YulFunctionCall","src":"5111:32:63"},"nativeSrc":"5108:52:63","nodeType":"YulIf","src":"5108:52:63"},{"nativeSrc":"5169:37:63","nodeType":"YulVariableDeclaration","src":"5169:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"5196:9:63","nodeType":"YulIdentifier","src":"5196:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"5183:12:63","nodeType":"YulIdentifier","src":"5183:12:63"},"nativeSrc":"5183:23:63","nodeType":"YulFunctionCall","src":"5183:23:63"},"variables":[{"name":"offset","nativeSrc":"5173:6:63","nodeType":"YulTypedName","src":"5173:6:63","type":""}]},{"body":{"nativeSrc":"5249:16:63","nodeType":"YulBlock","src":"5249:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5258:1:63","nodeType":"YulLiteral","src":"5258:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5261:1:63","nodeType":"YulLiteral","src":"5261:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5251:6:63","nodeType":"YulIdentifier","src":"5251:6:63"},"nativeSrc":"5251:12:63","nodeType":"YulFunctionCall","src":"5251:12:63"},"nativeSrc":"5251:12:63","nodeType":"YulExpressionStatement","src":"5251:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5221:6:63","nodeType":"YulIdentifier","src":"5221:6:63"},{"kind":"number","nativeSrc":"5229:18:63","nodeType":"YulLiteral","src":"5229:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5218:2:63","nodeType":"YulIdentifier","src":"5218:2:63"},"nativeSrc":"5218:30:63","nodeType":"YulFunctionCall","src":"5218:30:63"},"nativeSrc":"5215:50:63","nodeType":"YulIf","src":"5215:50:63"},{"nativeSrc":"5274:96:63","nodeType":"YulVariableDeclaration","src":"5274:96:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5342:9:63","nodeType":"YulIdentifier","src":"5342:9:63"},{"name":"offset","nativeSrc":"5353:6:63","nodeType":"YulIdentifier","src":"5353:6:63"}],"functionName":{"name":"add","nativeSrc":"5338:3:63","nodeType":"YulIdentifier","src":"5338:3:63"},"nativeSrc":"5338:22:63","nodeType":"YulFunctionCall","src":"5338:22:63"},{"name":"dataEnd","nativeSrc":"5362:7:63","nodeType":"YulIdentifier","src":"5362:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5300:37:63","nodeType":"YulIdentifier","src":"5300:37:63"},"nativeSrc":"5300:70:63","nodeType":"YulFunctionCall","src":"5300:70:63"},"variables":[{"name":"value0_1","nativeSrc":"5278:8:63","nodeType":"YulTypedName","src":"5278:8:63","type":""},{"name":"value1_1","nativeSrc":"5288:8:63","nodeType":"YulTypedName","src":"5288:8:63","type":""}]},{"nativeSrc":"5379:18:63","nodeType":"YulAssignment","src":"5379:18:63","value":{"name":"value0_1","nativeSrc":"5389:8:63","nodeType":"YulIdentifier","src":"5389:8:63"},"variableNames":[{"name":"value0","nativeSrc":"5379:6:63","nodeType":"YulIdentifier","src":"5379:6:63"}]},{"nativeSrc":"5406:18:63","nodeType":"YulAssignment","src":"5406:18:63","value":{"name":"value1_1","nativeSrc":"5416:8:63","nodeType":"YulIdentifier","src":"5416:8:63"},"variableNames":[{"name":"value1","nativeSrc":"5406:6:63","nodeType":"YulIdentifier","src":"5406:6:63"}]},{"nativeSrc":"5433:48:63","nodeType":"YulVariableDeclaration","src":"5433:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5466:9:63","nodeType":"YulIdentifier","src":"5466:9:63"},{"kind":"number","nativeSrc":"5477:2:63","nodeType":"YulLiteral","src":"5477:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5462:3:63","nodeType":"YulIdentifier","src":"5462:3:63"},"nativeSrc":"5462:18:63","nodeType":"YulFunctionCall","src":"5462:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"5449:12:63","nodeType":"YulIdentifier","src":"5449:12:63"},"nativeSrc":"5449:32:63","nodeType":"YulFunctionCall","src":"5449:32:63"},"variables":[{"name":"offset_1","nativeSrc":"5437:8:63","nodeType":"YulTypedName","src":"5437:8:63","type":""}]},{"body":{"nativeSrc":"5526:16:63","nodeType":"YulBlock","src":"5526:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5535:1:63","nodeType":"YulLiteral","src":"5535:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5538:1:63","nodeType":"YulLiteral","src":"5538:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5528:6:63","nodeType":"YulIdentifier","src":"5528:6:63"},"nativeSrc":"5528:12:63","nodeType":"YulFunctionCall","src":"5528:12:63"},"nativeSrc":"5528:12:63","nodeType":"YulExpressionStatement","src":"5528:12:63"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5496:8:63","nodeType":"YulIdentifier","src":"5496:8:63"},{"kind":"number","nativeSrc":"5506:18:63","nodeType":"YulLiteral","src":"5506:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5493:2:63","nodeType":"YulIdentifier","src":"5493:2:63"},"nativeSrc":"5493:32:63","nodeType":"YulFunctionCall","src":"5493:32:63"},"nativeSrc":"5490:52:63","nodeType":"YulIf","src":"5490:52:63"},{"nativeSrc":"5551:98:63","nodeType":"YulVariableDeclaration","src":"5551:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5619:9:63","nodeType":"YulIdentifier","src":"5619:9:63"},{"name":"offset_1","nativeSrc":"5630:8:63","nodeType":"YulIdentifier","src":"5630:8:63"}],"functionName":{"name":"add","nativeSrc":"5615:3:63","nodeType":"YulIdentifier","src":"5615:3:63"},"nativeSrc":"5615:24:63","nodeType":"YulFunctionCall","src":"5615:24:63"},{"name":"dataEnd","nativeSrc":"5641:7:63","nodeType":"YulIdentifier","src":"5641:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5577:37:63","nodeType":"YulIdentifier","src":"5577:37:63"},"nativeSrc":"5577:72:63","nodeType":"YulFunctionCall","src":"5577:72:63"},"variables":[{"name":"value2_1","nativeSrc":"5555:8:63","nodeType":"YulTypedName","src":"5555:8:63","type":""},{"name":"value3_1","nativeSrc":"5565:8:63","nodeType":"YulTypedName","src":"5565:8:63","type":""}]},{"nativeSrc":"5658:18:63","nodeType":"YulAssignment","src":"5658:18:63","value":{"name":"value2_1","nativeSrc":"5668:8:63","nodeType":"YulIdentifier","src":"5668:8:63"},"variableNames":[{"name":"value2","nativeSrc":"5658:6:63","nodeType":"YulIdentifier","src":"5658:6:63"}]},{"nativeSrc":"5685:18:63","nodeType":"YulAssignment","src":"5685:18:63","value":{"name":"value3_1","nativeSrc":"5695:8:63","nodeType":"YulIdentifier","src":"5695:8:63"},"variableNames":[{"name":"value3","nativeSrc":"5685:6:63","nodeType":"YulIdentifier","src":"5685:6:63"}]},{"nativeSrc":"5712:48:63","nodeType":"YulVariableDeclaration","src":"5712:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5745:9:63","nodeType":"YulIdentifier","src":"5745:9:63"},{"kind":"number","nativeSrc":"5756:2:63","nodeType":"YulLiteral","src":"5756:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5741:3:63","nodeType":"YulIdentifier","src":"5741:3:63"},"nativeSrc":"5741:18:63","nodeType":"YulFunctionCall","src":"5741:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"5728:12:63","nodeType":"YulIdentifier","src":"5728:12:63"},"nativeSrc":"5728:32:63","nodeType":"YulFunctionCall","src":"5728:32:63"},"variables":[{"name":"offset_2","nativeSrc":"5716:8:63","nodeType":"YulTypedName","src":"5716:8:63","type":""}]},{"body":{"nativeSrc":"5805:16:63","nodeType":"YulBlock","src":"5805:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5814:1:63","nodeType":"YulLiteral","src":"5814:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5817:1:63","nodeType":"YulLiteral","src":"5817:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5807:6:63","nodeType":"YulIdentifier","src":"5807:6:63"},"nativeSrc":"5807:12:63","nodeType":"YulFunctionCall","src":"5807:12:63"},"nativeSrc":"5807:12:63","nodeType":"YulExpressionStatement","src":"5807:12:63"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"5775:8:63","nodeType":"YulIdentifier","src":"5775:8:63"},{"kind":"number","nativeSrc":"5785:18:63","nodeType":"YulLiteral","src":"5785:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5772:2:63","nodeType":"YulIdentifier","src":"5772:2:63"},"nativeSrc":"5772:32:63","nodeType":"YulFunctionCall","src":"5772:32:63"},"nativeSrc":"5769:52:63","nodeType":"YulIf","src":"5769:52:63"},{"nativeSrc":"5830:98:63","nodeType":"YulVariableDeclaration","src":"5830:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5898:9:63","nodeType":"YulIdentifier","src":"5898:9:63"},{"name":"offset_2","nativeSrc":"5909:8:63","nodeType":"YulIdentifier","src":"5909:8:63"}],"functionName":{"name":"add","nativeSrc":"5894:3:63","nodeType":"YulIdentifier","src":"5894:3:63"},"nativeSrc":"5894:24:63","nodeType":"YulFunctionCall","src":"5894:24:63"},{"name":"dataEnd","nativeSrc":"5920:7:63","nodeType":"YulIdentifier","src":"5920:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5856:37:63","nodeType":"YulIdentifier","src":"5856:37:63"},"nativeSrc":"5856:72:63","nodeType":"YulFunctionCall","src":"5856:72:63"},"variables":[{"name":"value4_1","nativeSrc":"5834:8:63","nodeType":"YulTypedName","src":"5834:8:63","type":""},{"name":"value5_1","nativeSrc":"5844:8:63","nodeType":"YulTypedName","src":"5844:8:63","type":""}]},{"nativeSrc":"5937:18:63","nodeType":"YulAssignment","src":"5937:18:63","value":{"name":"value4_1","nativeSrc":"5947:8:63","nodeType":"YulIdentifier","src":"5947:8:63"},"variableNames":[{"name":"value4","nativeSrc":"5937:6:63","nodeType":"YulIdentifier","src":"5937:6:63"}]},{"nativeSrc":"5964:18:63","nodeType":"YulAssignment","src":"5964:18:63","value":{"name":"value5_1","nativeSrc":"5974:8:63","nodeType":"YulIdentifier","src":"5974:8:63"},"variableNames":[{"name":"value5","nativeSrc":"5964:6:63","nodeType":"YulIdentifier","src":"5964:6:63"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4874:1114:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5024:9:63","nodeType":"YulTypedName","src":"5024:9:63","type":""},{"name":"dataEnd","nativeSrc":"5035:7:63","nodeType":"YulTypedName","src":"5035:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5047:6:63","nodeType":"YulTypedName","src":"5047:6:63","type":""},{"name":"value1","nativeSrc":"5055:6:63","nodeType":"YulTypedName","src":"5055:6:63","type":""},{"name":"value2","nativeSrc":"5063:6:63","nodeType":"YulTypedName","src":"5063:6:63","type":""},{"name":"value3","nativeSrc":"5071:6:63","nodeType":"YulTypedName","src":"5071:6:63","type":""},{"name":"value4","nativeSrc":"5079:6:63","nodeType":"YulTypedName","src":"5079:6:63","type":""},{"name":"value5","nativeSrc":"5087:6:63","nodeType":"YulTypedName","src":"5087:6:63","type":""}],"src":"4874:1114:63"},{"body":{"nativeSrc":"6080:259:63","nodeType":"YulBlock","src":"6080:259:63","statements":[{"body":{"nativeSrc":"6126:16:63","nodeType":"YulBlock","src":"6126:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6135:1:63","nodeType":"YulLiteral","src":"6135:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6138:1:63","nodeType":"YulLiteral","src":"6138:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6128:6:63","nodeType":"YulIdentifier","src":"6128:6:63"},"nativeSrc":"6128:12:63","nodeType":"YulFunctionCall","src":"6128:12:63"},"nativeSrc":"6128:12:63","nodeType":"YulExpressionStatement","src":"6128:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6101:7:63","nodeType":"YulIdentifier","src":"6101:7:63"},{"name":"headStart","nativeSrc":"6110:9:63","nodeType":"YulIdentifier","src":"6110:9:63"}],"functionName":{"name":"sub","nativeSrc":"6097:3:63","nodeType":"YulIdentifier","src":"6097:3:63"},"nativeSrc":"6097:23:63","nodeType":"YulFunctionCall","src":"6097:23:63"},{"kind":"number","nativeSrc":"6122:2:63","nodeType":"YulLiteral","src":"6122:2:63","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6093:3:63","nodeType":"YulIdentifier","src":"6093:3:63"},"nativeSrc":"6093:32:63","nodeType":"YulFunctionCall","src":"6093:32:63"},"nativeSrc":"6090:52:63","nodeType":"YulIf","src":"6090:52:63"},{"nativeSrc":"6151:14:63","nodeType":"YulVariableDeclaration","src":"6151:14:63","value":{"kind":"number","nativeSrc":"6164:1:63","nodeType":"YulLiteral","src":"6164:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"6155:5:63","nodeType":"YulTypedName","src":"6155:5:63","type":""}]},{"nativeSrc":"6174:32:63","nodeType":"YulAssignment","src":"6174:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"6196:9:63","nodeType":"YulIdentifier","src":"6196:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"6183:12:63","nodeType":"YulIdentifier","src":"6183:12:63"},"nativeSrc":"6183:23:63","nodeType":"YulFunctionCall","src":"6183:23:63"},"variableNames":[{"name":"value","nativeSrc":"6174:5:63","nodeType":"YulIdentifier","src":"6174:5:63"}]},{"nativeSrc":"6215:15:63","nodeType":"YulAssignment","src":"6215:15:63","value":{"name":"value","nativeSrc":"6225:5:63","nodeType":"YulIdentifier","src":"6225:5:63"},"variableNames":[{"name":"value0","nativeSrc":"6215:6:63","nodeType":"YulIdentifier","src":"6215:6:63"}]},{"nativeSrc":"6239:16:63","nodeType":"YulVariableDeclaration","src":"6239:16:63","value":{"kind":"number","nativeSrc":"6254:1:63","nodeType":"YulLiteral","src":"6254:1:63","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"6243:7:63","nodeType":"YulTypedName","src":"6243:7:63","type":""}]},{"nativeSrc":"6264:43:63","nodeType":"YulAssignment","src":"6264:43:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6292:9:63","nodeType":"YulIdentifier","src":"6292:9:63"},{"kind":"number","nativeSrc":"6303:2:63","nodeType":"YulLiteral","src":"6303:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6288:3:63","nodeType":"YulIdentifier","src":"6288:3:63"},"nativeSrc":"6288:18:63","nodeType":"YulFunctionCall","src":"6288:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"6275:12:63","nodeType":"YulIdentifier","src":"6275:12:63"},"nativeSrc":"6275:32:63","nodeType":"YulFunctionCall","src":"6275:32:63"},"variableNames":[{"name":"value_1","nativeSrc":"6264:7:63","nodeType":"YulIdentifier","src":"6264:7:63"}]},{"nativeSrc":"6316:17:63","nodeType":"YulAssignment","src":"6316:17:63","value":{"name":"value_1","nativeSrc":"6326:7:63","nodeType":"YulIdentifier","src":"6326:7:63"},"variableNames":[{"name":"value1","nativeSrc":"6316:6:63","nodeType":"YulIdentifier","src":"6316:6:63"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"5993:346:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6038:9:63","nodeType":"YulTypedName","src":"6038:9:63","type":""},{"name":"dataEnd","nativeSrc":"6049:7:63","nodeType":"YulTypedName","src":"6049:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6061:6:63","nodeType":"YulTypedName","src":"6061:6:63","type":""},{"name":"value1","nativeSrc":"6069:6:63","nodeType":"YulTypedName","src":"6069:6:63","type":""}],"src":"5993:346:63"},{"body":{"nativeSrc":"6414:156:63","nodeType":"YulBlock","src":"6414:156:63","statements":[{"body":{"nativeSrc":"6460:16:63","nodeType":"YulBlock","src":"6460:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6469:1:63","nodeType":"YulLiteral","src":"6469:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6472:1:63","nodeType":"YulLiteral","src":"6472:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6462:6:63","nodeType":"YulIdentifier","src":"6462:6:63"},"nativeSrc":"6462:12:63","nodeType":"YulFunctionCall","src":"6462:12:63"},"nativeSrc":"6462:12:63","nodeType":"YulExpressionStatement","src":"6462:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6435:7:63","nodeType":"YulIdentifier","src":"6435:7:63"},{"name":"headStart","nativeSrc":"6444:9:63","nodeType":"YulIdentifier","src":"6444:9:63"}],"functionName":{"name":"sub","nativeSrc":"6431:3:63","nodeType":"YulIdentifier","src":"6431:3:63"},"nativeSrc":"6431:23:63","nodeType":"YulFunctionCall","src":"6431:23:63"},{"kind":"number","nativeSrc":"6456:2:63","nodeType":"YulLiteral","src":"6456:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6427:3:63","nodeType":"YulIdentifier","src":"6427:3:63"},"nativeSrc":"6427:32:63","nodeType":"YulFunctionCall","src":"6427:32:63"},"nativeSrc":"6424:52:63","nodeType":"YulIf","src":"6424:52:63"},{"nativeSrc":"6485:14:63","nodeType":"YulVariableDeclaration","src":"6485:14:63","value":{"kind":"number","nativeSrc":"6498:1:63","nodeType":"YulLiteral","src":"6498:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"6489:5:63","nodeType":"YulTypedName","src":"6489:5:63","type":""}]},{"nativeSrc":"6508:32:63","nodeType":"YulAssignment","src":"6508:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"6530:9:63","nodeType":"YulIdentifier","src":"6530:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"6517:12:63","nodeType":"YulIdentifier","src":"6517:12:63"},"nativeSrc":"6517:23:63","nodeType":"YulFunctionCall","src":"6517:23:63"},"variableNames":[{"name":"value","nativeSrc":"6508:5:63","nodeType":"YulIdentifier","src":"6508:5:63"}]},{"nativeSrc":"6549:15:63","nodeType":"YulAssignment","src":"6549:15:63","value":{"name":"value","nativeSrc":"6559:5:63","nodeType":"YulIdentifier","src":"6559:5:63"},"variableNames":[{"name":"value0","nativeSrc":"6549:6:63","nodeType":"YulIdentifier","src":"6549:6:63"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"6344:226:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6380:9:63","nodeType":"YulTypedName","src":"6380:9:63","type":""},{"name":"dataEnd","nativeSrc":"6391:7:63","nodeType":"YulTypedName","src":"6391:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6403:6:63","nodeType":"YulTypedName","src":"6403:6:63","type":""}],"src":"6344:226:63"},{"body":{"nativeSrc":"6800:890:63","nodeType":"YulBlock","src":"6800:890:63","statements":[{"body":{"nativeSrc":"6846:16:63","nodeType":"YulBlock","src":"6846:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6855:1:63","nodeType":"YulLiteral","src":"6855:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6858:1:63","nodeType":"YulLiteral","src":"6858:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6848:6:63","nodeType":"YulIdentifier","src":"6848:6:63"},"nativeSrc":"6848:12:63","nodeType":"YulFunctionCall","src":"6848:12:63"},"nativeSrc":"6848:12:63","nodeType":"YulExpressionStatement","src":"6848:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6821:7:63","nodeType":"YulIdentifier","src":"6821:7:63"},{"name":"headStart","nativeSrc":"6830:9:63","nodeType":"YulIdentifier","src":"6830:9:63"}],"functionName":{"name":"sub","nativeSrc":"6817:3:63","nodeType":"YulIdentifier","src":"6817:3:63"},"nativeSrc":"6817:23:63","nodeType":"YulFunctionCall","src":"6817:23:63"},{"kind":"number","nativeSrc":"6842:2:63","nodeType":"YulLiteral","src":"6842:2:63","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6813:3:63","nodeType":"YulIdentifier","src":"6813:3:63"},"nativeSrc":"6813:32:63","nodeType":"YulFunctionCall","src":"6813:32:63"},"nativeSrc":"6810:52:63","nodeType":"YulIf","src":"6810:52:63"},{"nativeSrc":"6871:37:63","nodeType":"YulVariableDeclaration","src":"6871:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"6898:9:63","nodeType":"YulIdentifier","src":"6898:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"6885:12:63","nodeType":"YulIdentifier","src":"6885:12:63"},"nativeSrc":"6885:23:63","nodeType":"YulFunctionCall","src":"6885:23:63"},"variables":[{"name":"offset","nativeSrc":"6875:6:63","nodeType":"YulTypedName","src":"6875:6:63","type":""}]},{"body":{"nativeSrc":"6951:16:63","nodeType":"YulBlock","src":"6951:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6960:1:63","nodeType":"YulLiteral","src":"6960:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6963:1:63","nodeType":"YulLiteral","src":"6963:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6953:6:63","nodeType":"YulIdentifier","src":"6953:6:63"},"nativeSrc":"6953:12:63","nodeType":"YulFunctionCall","src":"6953:12:63"},"nativeSrc":"6953:12:63","nodeType":"YulExpressionStatement","src":"6953:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6923:6:63","nodeType":"YulIdentifier","src":"6923:6:63"},{"kind":"number","nativeSrc":"6931:18:63","nodeType":"YulLiteral","src":"6931:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6920:2:63","nodeType":"YulIdentifier","src":"6920:2:63"},"nativeSrc":"6920:30:63","nodeType":"YulFunctionCall","src":"6920:30:63"},"nativeSrc":"6917:50:63","nodeType":"YulIf","src":"6917:50:63"},{"nativeSrc":"6976:96:63","nodeType":"YulVariableDeclaration","src":"6976:96:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7044:9:63","nodeType":"YulIdentifier","src":"7044:9:63"},{"name":"offset","nativeSrc":"7055:6:63","nodeType":"YulIdentifier","src":"7055:6:63"}],"functionName":{"name":"add","nativeSrc":"7040:3:63","nodeType":"YulIdentifier","src":"7040:3:63"},"nativeSrc":"7040:22:63","nodeType":"YulFunctionCall","src":"7040:22:63"},{"name":"dataEnd","nativeSrc":"7064:7:63","nodeType":"YulIdentifier","src":"7064:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7002:37:63","nodeType":"YulIdentifier","src":"7002:37:63"},"nativeSrc":"7002:70:63","nodeType":"YulFunctionCall","src":"7002:70:63"},"variables":[{"name":"value0_1","nativeSrc":"6980:8:63","nodeType":"YulTypedName","src":"6980:8:63","type":""},{"name":"value1_1","nativeSrc":"6990:8:63","nodeType":"YulTypedName","src":"6990:8:63","type":""}]},{"nativeSrc":"7081:18:63","nodeType":"YulAssignment","src":"7081:18:63","value":{"name":"value0_1","nativeSrc":"7091:8:63","nodeType":"YulIdentifier","src":"7091:8:63"},"variableNames":[{"name":"value0","nativeSrc":"7081:6:63","nodeType":"YulIdentifier","src":"7081:6:63"}]},{"nativeSrc":"7108:18:63","nodeType":"YulAssignment","src":"7108:18:63","value":{"name":"value1_1","nativeSrc":"7118:8:63","nodeType":"YulIdentifier","src":"7118:8:63"},"variableNames":[{"name":"value1","nativeSrc":"7108:6:63","nodeType":"YulIdentifier","src":"7108:6:63"}]},{"nativeSrc":"7135:48:63","nodeType":"YulVariableDeclaration","src":"7135:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7168:9:63","nodeType":"YulIdentifier","src":"7168:9:63"},{"kind":"number","nativeSrc":"7179:2:63","nodeType":"YulLiteral","src":"7179:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7164:3:63","nodeType":"YulIdentifier","src":"7164:3:63"},"nativeSrc":"7164:18:63","nodeType":"YulFunctionCall","src":"7164:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"7151:12:63","nodeType":"YulIdentifier","src":"7151:12:63"},"nativeSrc":"7151:32:63","nodeType":"YulFunctionCall","src":"7151:32:63"},"variables":[{"name":"offset_1","nativeSrc":"7139:8:63","nodeType":"YulTypedName","src":"7139:8:63","type":""}]},{"body":{"nativeSrc":"7228:16:63","nodeType":"YulBlock","src":"7228:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7237:1:63","nodeType":"YulLiteral","src":"7237:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"7240:1:63","nodeType":"YulLiteral","src":"7240:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7230:6:63","nodeType":"YulIdentifier","src":"7230:6:63"},"nativeSrc":"7230:12:63","nodeType":"YulFunctionCall","src":"7230:12:63"},"nativeSrc":"7230:12:63","nodeType":"YulExpressionStatement","src":"7230:12:63"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"7198:8:63","nodeType":"YulIdentifier","src":"7198:8:63"},{"kind":"number","nativeSrc":"7208:18:63","nodeType":"YulLiteral","src":"7208:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7195:2:63","nodeType":"YulIdentifier","src":"7195:2:63"},"nativeSrc":"7195:32:63","nodeType":"YulFunctionCall","src":"7195:32:63"},"nativeSrc":"7192:52:63","nodeType":"YulIf","src":"7192:52:63"},{"nativeSrc":"7253:98:63","nodeType":"YulVariableDeclaration","src":"7253:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7321:9:63","nodeType":"YulIdentifier","src":"7321:9:63"},{"name":"offset_1","nativeSrc":"7332:8:63","nodeType":"YulIdentifier","src":"7332:8:63"}],"functionName":{"name":"add","nativeSrc":"7317:3:63","nodeType":"YulIdentifier","src":"7317:3:63"},"nativeSrc":"7317:24:63","nodeType":"YulFunctionCall","src":"7317:24:63"},{"name":"dataEnd","nativeSrc":"7343:7:63","nodeType":"YulIdentifier","src":"7343:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7279:37:63","nodeType":"YulIdentifier","src":"7279:37:63"},"nativeSrc":"7279:72:63","nodeType":"YulFunctionCall","src":"7279:72:63"},"variables":[{"name":"value2_1","nativeSrc":"7257:8:63","nodeType":"YulTypedName","src":"7257:8:63","type":""},{"name":"value3_1","nativeSrc":"7267:8:63","nodeType":"YulTypedName","src":"7267:8:63","type":""}]},{"nativeSrc":"7360:18:63","nodeType":"YulAssignment","src":"7360:18:63","value":{"name":"value2_1","nativeSrc":"7370:8:63","nodeType":"YulIdentifier","src":"7370:8:63"},"variableNames":[{"name":"value2","nativeSrc":"7360:6:63","nodeType":"YulIdentifier","src":"7360:6:63"}]},{"nativeSrc":"7387:18:63","nodeType":"YulAssignment","src":"7387:18:63","value":{"name":"value3_1","nativeSrc":"7397:8:63","nodeType":"YulIdentifier","src":"7397:8:63"},"variableNames":[{"name":"value3","nativeSrc":"7387:6:63","nodeType":"YulIdentifier","src":"7387:6:63"}]},{"nativeSrc":"7414:48:63","nodeType":"YulVariableDeclaration","src":"7414:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7447:9:63","nodeType":"YulIdentifier","src":"7447:9:63"},{"kind":"number","nativeSrc":"7458:2:63","nodeType":"YulLiteral","src":"7458:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7443:3:63","nodeType":"YulIdentifier","src":"7443:3:63"},"nativeSrc":"7443:18:63","nodeType":"YulFunctionCall","src":"7443:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"7430:12:63","nodeType":"YulIdentifier","src":"7430:12:63"},"nativeSrc":"7430:32:63","nodeType":"YulFunctionCall","src":"7430:32:63"},"variables":[{"name":"offset_2","nativeSrc":"7418:8:63","nodeType":"YulTypedName","src":"7418:8:63","type":""}]},{"body":{"nativeSrc":"7507:16:63","nodeType":"YulBlock","src":"7507:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7516:1:63","nodeType":"YulLiteral","src":"7516:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"7519:1:63","nodeType":"YulLiteral","src":"7519:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7509:6:63","nodeType":"YulIdentifier","src":"7509:6:63"},"nativeSrc":"7509:12:63","nodeType":"YulFunctionCall","src":"7509:12:63"},"nativeSrc":"7509:12:63","nodeType":"YulExpressionStatement","src":"7509:12:63"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"7477:8:63","nodeType":"YulIdentifier","src":"7477:8:63"},{"kind":"number","nativeSrc":"7487:18:63","nodeType":"YulLiteral","src":"7487:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7474:2:63","nodeType":"YulIdentifier","src":"7474:2:63"},"nativeSrc":"7474:32:63","nodeType":"YulFunctionCall","src":"7474:32:63"},"nativeSrc":"7471:52:63","nodeType":"YulIf","src":"7471:52:63"},{"nativeSrc":"7532:98:63","nodeType":"YulVariableDeclaration","src":"7532:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7600:9:63","nodeType":"YulIdentifier","src":"7600:9:63"},{"name":"offset_2","nativeSrc":"7611:8:63","nodeType":"YulIdentifier","src":"7611:8:63"}],"functionName":{"name":"add","nativeSrc":"7596:3:63","nodeType":"YulIdentifier","src":"7596:3:63"},"nativeSrc":"7596:24:63","nodeType":"YulFunctionCall","src":"7596:24:63"},{"name":"dataEnd","nativeSrc":"7622:7:63","nodeType":"YulIdentifier","src":"7622:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7558:37:63","nodeType":"YulIdentifier","src":"7558:37:63"},"nativeSrc":"7558:72:63","nodeType":"YulFunctionCall","src":"7558:72:63"},"variables":[{"name":"value4_1","nativeSrc":"7536:8:63","nodeType":"YulTypedName","src":"7536:8:63","type":""},{"name":"value5_1","nativeSrc":"7546:8:63","nodeType":"YulTypedName","src":"7546:8:63","type":""}]},{"nativeSrc":"7639:18:63","nodeType":"YulAssignment","src":"7639:18:63","value":{"name":"value4_1","nativeSrc":"7649:8:63","nodeType":"YulIdentifier","src":"7649:8:63"},"variableNames":[{"name":"value4","nativeSrc":"7639:6:63","nodeType":"YulIdentifier","src":"7639:6:63"}]},{"nativeSrc":"7666:18:63","nodeType":"YulAssignment","src":"7666:18:63","value":{"name":"value5_1","nativeSrc":"7676:8:63","nodeType":"YulIdentifier","src":"7676:8:63"},"variableNames":[{"name":"value5","nativeSrc":"7666:6:63","nodeType":"YulIdentifier","src":"7666:6:63"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6575:1115:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6726:9:63","nodeType":"YulTypedName","src":"6726:9:63","type":""},{"name":"dataEnd","nativeSrc":"6737:7:63","nodeType":"YulTypedName","src":"6737:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6749:6:63","nodeType":"YulTypedName","src":"6749:6:63","type":""},{"name":"value1","nativeSrc":"6757:6:63","nodeType":"YulTypedName","src":"6757:6:63","type":""},{"name":"value2","nativeSrc":"6765:6:63","nodeType":"YulTypedName","src":"6765:6:63","type":""},{"name":"value3","nativeSrc":"6773:6:63","nodeType":"YulTypedName","src":"6773:6:63","type":""},{"name":"value4","nativeSrc":"6781:6:63","nodeType":"YulTypedName","src":"6781:6:63","type":""},{"name":"value5","nativeSrc":"6789:6:63","nodeType":"YulTypedName","src":"6789:6:63","type":""}],"src":"6575:1115:63"},{"body":{"nativeSrc":"7860:611:63","nodeType":"YulBlock","src":"7860:611:63","statements":[{"body":{"nativeSrc":"7906:16:63","nodeType":"YulBlock","src":"7906:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7915:1:63","nodeType":"YulLiteral","src":"7915:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"7918:1:63","nodeType":"YulLiteral","src":"7918:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7908:6:63","nodeType":"YulIdentifier","src":"7908:6:63"},"nativeSrc":"7908:12:63","nodeType":"YulFunctionCall","src":"7908:12:63"},"nativeSrc":"7908:12:63","nodeType":"YulExpressionStatement","src":"7908:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7881:7:63","nodeType":"YulIdentifier","src":"7881:7:63"},{"name":"headStart","nativeSrc":"7890:9:63","nodeType":"YulIdentifier","src":"7890:9:63"}],"functionName":{"name":"sub","nativeSrc":"7877:3:63","nodeType":"YulIdentifier","src":"7877:3:63"},"nativeSrc":"7877:23:63","nodeType":"YulFunctionCall","src":"7877:23:63"},{"kind":"number","nativeSrc":"7902:2:63","nodeType":"YulLiteral","src":"7902:2:63","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7873:3:63","nodeType":"YulIdentifier","src":"7873:3:63"},"nativeSrc":"7873:32:63","nodeType":"YulFunctionCall","src":"7873:32:63"},"nativeSrc":"7870:52:63","nodeType":"YulIf","src":"7870:52:63"},{"nativeSrc":"7931:37:63","nodeType":"YulVariableDeclaration","src":"7931:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"7958:9:63","nodeType":"YulIdentifier","src":"7958:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"7945:12:63","nodeType":"YulIdentifier","src":"7945:12:63"},"nativeSrc":"7945:23:63","nodeType":"YulFunctionCall","src":"7945:23:63"},"variables":[{"name":"offset","nativeSrc":"7935:6:63","nodeType":"YulTypedName","src":"7935:6:63","type":""}]},{"body":{"nativeSrc":"8011:16:63","nodeType":"YulBlock","src":"8011:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8020:1:63","nodeType":"YulLiteral","src":"8020:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8023:1:63","nodeType":"YulLiteral","src":"8023:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8013:6:63","nodeType":"YulIdentifier","src":"8013:6:63"},"nativeSrc":"8013:12:63","nodeType":"YulFunctionCall","src":"8013:12:63"},"nativeSrc":"8013:12:63","nodeType":"YulExpressionStatement","src":"8013:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7983:6:63","nodeType":"YulIdentifier","src":"7983:6:63"},{"kind":"number","nativeSrc":"7991:18:63","nodeType":"YulLiteral","src":"7991:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7980:2:63","nodeType":"YulIdentifier","src":"7980:2:63"},"nativeSrc":"7980:30:63","nodeType":"YulFunctionCall","src":"7980:30:63"},"nativeSrc":"7977:50:63","nodeType":"YulIf","src":"7977:50:63"},{"nativeSrc":"8036:96:63","nodeType":"YulVariableDeclaration","src":"8036:96:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8104:9:63","nodeType":"YulIdentifier","src":"8104:9:63"},{"name":"offset","nativeSrc":"8115:6:63","nodeType":"YulIdentifier","src":"8115:6:63"}],"functionName":{"name":"add","nativeSrc":"8100:3:63","nodeType":"YulIdentifier","src":"8100:3:63"},"nativeSrc":"8100:22:63","nodeType":"YulFunctionCall","src":"8100:22:63"},{"name":"dataEnd","nativeSrc":"8124:7:63","nodeType":"YulIdentifier","src":"8124:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"8062:37:63","nodeType":"YulIdentifier","src":"8062:37:63"},"nativeSrc":"8062:70:63","nodeType":"YulFunctionCall","src":"8062:70:63"},"variables":[{"name":"value0_1","nativeSrc":"8040:8:63","nodeType":"YulTypedName","src":"8040:8:63","type":""},{"name":"value1_1","nativeSrc":"8050:8:63","nodeType":"YulTypedName","src":"8050:8:63","type":""}]},{"nativeSrc":"8141:18:63","nodeType":"YulAssignment","src":"8141:18:63","value":{"name":"value0_1","nativeSrc":"8151:8:63","nodeType":"YulIdentifier","src":"8151:8:63"},"variableNames":[{"name":"value0","nativeSrc":"8141:6:63","nodeType":"YulIdentifier","src":"8141:6:63"}]},{"nativeSrc":"8168:18:63","nodeType":"YulAssignment","src":"8168:18:63","value":{"name":"value1_1","nativeSrc":"8178:8:63","nodeType":"YulIdentifier","src":"8178:8:63"},"variableNames":[{"name":"value1","nativeSrc":"8168:6:63","nodeType":"YulIdentifier","src":"8168:6:63"}]},{"nativeSrc":"8195:48:63","nodeType":"YulVariableDeclaration","src":"8195:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8228:9:63","nodeType":"YulIdentifier","src":"8228:9:63"},{"kind":"number","nativeSrc":"8239:2:63","nodeType":"YulLiteral","src":"8239:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8224:3:63","nodeType":"YulIdentifier","src":"8224:3:63"},"nativeSrc":"8224:18:63","nodeType":"YulFunctionCall","src":"8224:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"8211:12:63","nodeType":"YulIdentifier","src":"8211:12:63"},"nativeSrc":"8211:32:63","nodeType":"YulFunctionCall","src":"8211:32:63"},"variables":[{"name":"offset_1","nativeSrc":"8199:8:63","nodeType":"YulTypedName","src":"8199:8:63","type":""}]},{"body":{"nativeSrc":"8288:16:63","nodeType":"YulBlock","src":"8288:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8297:1:63","nodeType":"YulLiteral","src":"8297:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8300:1:63","nodeType":"YulLiteral","src":"8300:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8290:6:63","nodeType":"YulIdentifier","src":"8290:6:63"},"nativeSrc":"8290:12:63","nodeType":"YulFunctionCall","src":"8290:12:63"},"nativeSrc":"8290:12:63","nodeType":"YulExpressionStatement","src":"8290:12:63"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"8258:8:63","nodeType":"YulIdentifier","src":"8258:8:63"},{"kind":"number","nativeSrc":"8268:18:63","nodeType":"YulLiteral","src":"8268:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8255:2:63","nodeType":"YulIdentifier","src":"8255:2:63"},"nativeSrc":"8255:32:63","nodeType":"YulFunctionCall","src":"8255:32:63"},"nativeSrc":"8252:52:63","nodeType":"YulIf","src":"8252:52:63"},{"nativeSrc":"8313:98:63","nodeType":"YulVariableDeclaration","src":"8313:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8381:9:63","nodeType":"YulIdentifier","src":"8381:9:63"},{"name":"offset_1","nativeSrc":"8392:8:63","nodeType":"YulIdentifier","src":"8392:8:63"}],"functionName":{"name":"add","nativeSrc":"8377:3:63","nodeType":"YulIdentifier","src":"8377:3:63"},"nativeSrc":"8377:24:63","nodeType":"YulFunctionCall","src":"8377:24:63"},{"name":"dataEnd","nativeSrc":"8403:7:63","nodeType":"YulIdentifier","src":"8403:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"8339:37:63","nodeType":"YulIdentifier","src":"8339:37:63"},"nativeSrc":"8339:72:63","nodeType":"YulFunctionCall","src":"8339:72:63"},"variables":[{"name":"value2_1","nativeSrc":"8317:8:63","nodeType":"YulTypedName","src":"8317:8:63","type":""},{"name":"value3_1","nativeSrc":"8327:8:63","nodeType":"YulTypedName","src":"8327:8:63","type":""}]},{"nativeSrc":"8420:18:63","nodeType":"YulAssignment","src":"8420:18:63","value":{"name":"value2_1","nativeSrc":"8430:8:63","nodeType":"YulIdentifier","src":"8430:8:63"},"variableNames":[{"name":"value2","nativeSrc":"8420:6:63","nodeType":"YulIdentifier","src":"8420:6:63"}]},{"nativeSrc":"8447:18:63","nodeType":"YulAssignment","src":"8447:18:63","value":{"name":"value3_1","nativeSrc":"8457:8:63","nodeType":"YulIdentifier","src":"8457:8:63"},"variableNames":[{"name":"value3","nativeSrc":"8447:6:63","nodeType":"YulIdentifier","src":"8447:6:63"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"7695:776:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7802:9:63","nodeType":"YulTypedName","src":"7802:9:63","type":""},{"name":"dataEnd","nativeSrc":"7813:7:63","nodeType":"YulTypedName","src":"7813:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7825:6:63","nodeType":"YulTypedName","src":"7825:6:63","type":""},{"name":"value1","nativeSrc":"7833:6:63","nodeType":"YulTypedName","src":"7833:6:63","type":""},{"name":"value2","nativeSrc":"7841:6:63","nodeType":"YulTypedName","src":"7841:6:63","type":""},{"name":"value3","nativeSrc":"7849:6:63","nodeType":"YulTypedName","src":"7849:6:63","type":""}],"src":"7695:776:63"},{"body":{"nativeSrc":"8508:152:63","nodeType":"YulBlock","src":"8508:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8525:1:63","nodeType":"YulLiteral","src":"8525:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8528:77:63","nodeType":"YulLiteral","src":"8528:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8518:6:63","nodeType":"YulIdentifier","src":"8518:6:63"},"nativeSrc":"8518:88:63","nodeType":"YulFunctionCall","src":"8518:88:63"},"nativeSrc":"8518:88:63","nodeType":"YulExpressionStatement","src":"8518:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8622:1:63","nodeType":"YulLiteral","src":"8622:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"8625:4:63","nodeType":"YulLiteral","src":"8625:4:63","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8615:6:63","nodeType":"YulIdentifier","src":"8615:6:63"},"nativeSrc":"8615:15:63","nodeType":"YulFunctionCall","src":"8615:15:63"},"nativeSrc":"8615:15:63","nodeType":"YulExpressionStatement","src":"8615:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8646:1:63","nodeType":"YulLiteral","src":"8646:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8649:4:63","nodeType":"YulLiteral","src":"8649:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8639:6:63","nodeType":"YulIdentifier","src":"8639:6:63"},"nativeSrc":"8639:15:63","nodeType":"YulFunctionCall","src":"8639:15:63"},"nativeSrc":"8639:15:63","nodeType":"YulExpressionStatement","src":"8639:15:63"}]},"name":"panic_error_0x11","nativeSrc":"8476:184:63","nodeType":"YulFunctionDefinition","src":"8476:184:63"},{"body":{"nativeSrc":"8714:79:63","nodeType":"YulBlock","src":"8714:79:63","statements":[{"nativeSrc":"8724:17:63","nodeType":"YulAssignment","src":"8724:17:63","value":{"arguments":[{"name":"x","nativeSrc":"8736:1:63","nodeType":"YulIdentifier","src":"8736:1:63"},{"name":"y","nativeSrc":"8739:1:63","nodeType":"YulIdentifier","src":"8739:1:63"}],"functionName":{"name":"sub","nativeSrc":"8732:3:63","nodeType":"YulIdentifier","src":"8732:3:63"},"nativeSrc":"8732:9:63","nodeType":"YulFunctionCall","src":"8732:9:63"},"variableNames":[{"name":"diff","nativeSrc":"8724:4:63","nodeType":"YulIdentifier","src":"8724:4:63"}]},{"body":{"nativeSrc":"8765:22:63","nodeType":"YulBlock","src":"8765:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8767:16:63","nodeType":"YulIdentifier","src":"8767:16:63"},"nativeSrc":"8767:18:63","nodeType":"YulFunctionCall","src":"8767:18:63"},"nativeSrc":"8767:18:63","nodeType":"YulExpressionStatement","src":"8767:18:63"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8756:4:63","nodeType":"YulIdentifier","src":"8756:4:63"},{"name":"x","nativeSrc":"8762:1:63","nodeType":"YulIdentifier","src":"8762:1:63"}],"functionName":{"name":"gt","nativeSrc":"8753:2:63","nodeType":"YulIdentifier","src":"8753:2:63"},"nativeSrc":"8753:11:63","nodeType":"YulFunctionCall","src":"8753:11:63"},"nativeSrc":"8750:37:63","nodeType":"YulIf","src":"8750:37:63"}]},"name":"checked_sub_t_uint256","nativeSrc":"8665:128:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8696:1:63","nodeType":"YulTypedName","src":"8696:1:63","type":""},{"name":"y","nativeSrc":"8699:1:63","nodeType":"YulTypedName","src":"8699:1:63","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8705:4:63","nodeType":"YulTypedName","src":"8705:4:63","type":""}],"src":"8665:128:63"},{"body":{"nativeSrc":"8850:116:63","nodeType":"YulBlock","src":"8850:116:63","statements":[{"nativeSrc":"8860:20:63","nodeType":"YulAssignment","src":"8860:20:63","value":{"arguments":[{"name":"x","nativeSrc":"8875:1:63","nodeType":"YulIdentifier","src":"8875:1:63"},{"name":"y","nativeSrc":"8878:1:63","nodeType":"YulIdentifier","src":"8878:1:63"}],"functionName":{"name":"mul","nativeSrc":"8871:3:63","nodeType":"YulIdentifier","src":"8871:3:63"},"nativeSrc":"8871:9:63","nodeType":"YulFunctionCall","src":"8871:9:63"},"variableNames":[{"name":"product","nativeSrc":"8860:7:63","nodeType":"YulIdentifier","src":"8860:7:63"}]},{"body":{"nativeSrc":"8938:22:63","nodeType":"YulBlock","src":"8938:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8940:16:63","nodeType":"YulIdentifier","src":"8940:16:63"},"nativeSrc":"8940:18:63","nodeType":"YulFunctionCall","src":"8940:18:63"},"nativeSrc":"8940:18:63","nodeType":"YulExpressionStatement","src":"8940:18:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"8909:1:63","nodeType":"YulIdentifier","src":"8909:1:63"}],"functionName":{"name":"iszero","nativeSrc":"8902:6:63","nodeType":"YulIdentifier","src":"8902:6:63"},"nativeSrc":"8902:9:63","nodeType":"YulFunctionCall","src":"8902:9:63"},{"arguments":[{"name":"y","nativeSrc":"8916:1:63","nodeType":"YulIdentifier","src":"8916:1:63"},{"arguments":[{"name":"product","nativeSrc":"8923:7:63","nodeType":"YulIdentifier","src":"8923:7:63"},{"name":"x","nativeSrc":"8932:1:63","nodeType":"YulIdentifier","src":"8932:1:63"}],"functionName":{"name":"div","nativeSrc":"8919:3:63","nodeType":"YulIdentifier","src":"8919:3:63"},"nativeSrc":"8919:15:63","nodeType":"YulFunctionCall","src":"8919:15:63"}],"functionName":{"name":"eq","nativeSrc":"8913:2:63","nodeType":"YulIdentifier","src":"8913:2:63"},"nativeSrc":"8913:22:63","nodeType":"YulFunctionCall","src":"8913:22:63"}],"functionName":{"name":"or","nativeSrc":"8899:2:63","nodeType":"YulIdentifier","src":"8899:2:63"},"nativeSrc":"8899:37:63","nodeType":"YulFunctionCall","src":"8899:37:63"}],"functionName":{"name":"iszero","nativeSrc":"8892:6:63","nodeType":"YulIdentifier","src":"8892:6:63"},"nativeSrc":"8892:45:63","nodeType":"YulFunctionCall","src":"8892:45:63"},"nativeSrc":"8889:71:63","nodeType":"YulIf","src":"8889:71:63"}]},"name":"checked_mul_t_uint256","nativeSrc":"8798:168:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8829:1:63","nodeType":"YulTypedName","src":"8829:1:63","type":""},{"name":"y","nativeSrc":"8832:1:63","nodeType":"YulTypedName","src":"8832:1:63","type":""}],"returnVariables":[{"name":"product","nativeSrc":"8838:7:63","nodeType":"YulTypedName","src":"8838:7:63","type":""}],"src":"8798:168:63"},{"body":{"nativeSrc":"9003:152:63","nodeType":"YulBlock","src":"9003:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9020:1:63","nodeType":"YulLiteral","src":"9020:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"9023:77:63","nodeType":"YulLiteral","src":"9023:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9013:6:63","nodeType":"YulIdentifier","src":"9013:6:63"},"nativeSrc":"9013:88:63","nodeType":"YulFunctionCall","src":"9013:88:63"},"nativeSrc":"9013:88:63","nodeType":"YulExpressionStatement","src":"9013:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9117:1:63","nodeType":"YulLiteral","src":"9117:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"9120:4:63","nodeType":"YulLiteral","src":"9120:4:63","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"9110:6:63","nodeType":"YulIdentifier","src":"9110:6:63"},"nativeSrc":"9110:15:63","nodeType":"YulFunctionCall","src":"9110:15:63"},"nativeSrc":"9110:15:63","nodeType":"YulExpressionStatement","src":"9110:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9141:1:63","nodeType":"YulLiteral","src":"9141:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"9144:4:63","nodeType":"YulLiteral","src":"9144:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9134:6:63","nodeType":"YulIdentifier","src":"9134:6:63"},"nativeSrc":"9134:15:63","nodeType":"YulFunctionCall","src":"9134:15:63"},"nativeSrc":"9134:15:63","nodeType":"YulExpressionStatement","src":"9134:15:63"}]},"name":"panic_error_0x12","nativeSrc":"8971:184:63","nodeType":"YulFunctionDefinition","src":"8971:184:63"},{"body":{"nativeSrc":"9206:74:63","nodeType":"YulBlock","src":"9206:74:63","statements":[{"body":{"nativeSrc":"9229:22:63","nodeType":"YulBlock","src":"9229:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"9231:16:63","nodeType":"YulIdentifier","src":"9231:16:63"},"nativeSrc":"9231:18:63","nodeType":"YulFunctionCall","src":"9231:18:63"},"nativeSrc":"9231:18:63","nodeType":"YulExpressionStatement","src":"9231:18:63"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"9226:1:63","nodeType":"YulIdentifier","src":"9226:1:63"}],"functionName":{"name":"iszero","nativeSrc":"9219:6:63","nodeType":"YulIdentifier","src":"9219:6:63"},"nativeSrc":"9219:9:63","nodeType":"YulFunctionCall","src":"9219:9:63"},"nativeSrc":"9216:35:63","nodeType":"YulIf","src":"9216:35:63"},{"nativeSrc":"9260:14:63","nodeType":"YulAssignment","src":"9260:14:63","value":{"arguments":[{"name":"x","nativeSrc":"9269:1:63","nodeType":"YulIdentifier","src":"9269:1:63"},{"name":"y","nativeSrc":"9272:1:63","nodeType":"YulIdentifier","src":"9272:1:63"}],"functionName":{"name":"div","nativeSrc":"9265:3:63","nodeType":"YulIdentifier","src":"9265:3:63"},"nativeSrc":"9265:9:63","nodeType":"YulFunctionCall","src":"9265:9:63"},"variableNames":[{"name":"r","nativeSrc":"9260:1:63","nodeType":"YulIdentifier","src":"9260:1:63"}]}]},"name":"checked_div_t_uint256","nativeSrc":"9160:120:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9191:1:63","nodeType":"YulTypedName","src":"9191:1:63","type":""},{"name":"y","nativeSrc":"9194:1:63","nodeType":"YulTypedName","src":"9194:1:63","type":""}],"returnVariables":[{"name":"r","nativeSrc":"9200:1:63","nodeType":"YulTypedName","src":"9200:1:63","type":""}],"src":"9160:120:63"},{"body":{"nativeSrc":"9333:77:63","nodeType":"YulBlock","src":"9333:77:63","statements":[{"nativeSrc":"9343:16:63","nodeType":"YulAssignment","src":"9343:16:63","value":{"arguments":[{"name":"x","nativeSrc":"9354:1:63","nodeType":"YulIdentifier","src":"9354:1:63"},{"name":"y","nativeSrc":"9357:1:63","nodeType":"YulIdentifier","src":"9357:1:63"}],"functionName":{"name":"add","nativeSrc":"9350:3:63","nodeType":"YulIdentifier","src":"9350:3:63"},"nativeSrc":"9350:9:63","nodeType":"YulFunctionCall","src":"9350:9:63"},"variableNames":[{"name":"sum","nativeSrc":"9343:3:63","nodeType":"YulIdentifier","src":"9343:3:63"}]},{"body":{"nativeSrc":"9382:22:63","nodeType":"YulBlock","src":"9382:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"9384:16:63","nodeType":"YulIdentifier","src":"9384:16:63"},"nativeSrc":"9384:18:63","nodeType":"YulFunctionCall","src":"9384:18:63"},"nativeSrc":"9384:18:63","nodeType":"YulExpressionStatement","src":"9384:18:63"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"9374:1:63","nodeType":"YulIdentifier","src":"9374:1:63"},{"name":"sum","nativeSrc":"9377:3:63","nodeType":"YulIdentifier","src":"9377:3:63"}],"functionName":{"name":"gt","nativeSrc":"9371:2:63","nodeType":"YulIdentifier","src":"9371:2:63"},"nativeSrc":"9371:10:63","nodeType":"YulFunctionCall","src":"9371:10:63"},"nativeSrc":"9368:36:63","nodeType":"YulIf","src":"9368:36:63"}]},"name":"checked_add_t_uint256","nativeSrc":"9285:125:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9316:1:63","nodeType":"YulTypedName","src":"9316:1:63","type":""},{"name":"y","nativeSrc":"9319:1:63","nodeType":"YulTypedName","src":"9319:1:63","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"9325:3:63","nodeType":"YulTypedName","src":"9325:3:63","type":""}],"src":"9285:125:63"},{"body":{"nativeSrc":"9562:514:63","nodeType":"YulBlock","src":"9562:514:63","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9579:9:63","nodeType":"YulIdentifier","src":"9579:9:63"},{"kind":"number","nativeSrc":"9590:2:63","nodeType":"YulLiteral","src":"9590:2:63","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"9572:6:63","nodeType":"YulIdentifier","src":"9572:6:63"},"nativeSrc":"9572:21:63","nodeType":"YulFunctionCall","src":"9572:21:63"},"nativeSrc":"9572:21:63","nodeType":"YulExpressionStatement","src":"9572:21:63"},{"nativeSrc":"9602:27:63","nodeType":"YulVariableDeclaration","src":"9602:27:63","value":{"arguments":[{"name":"value0","nativeSrc":"9622:6:63","nodeType":"YulIdentifier","src":"9622:6:63"}],"functionName":{"name":"mload","nativeSrc":"9616:5:63","nodeType":"YulIdentifier","src":"9616:5:63"},"nativeSrc":"9616:13:63","nodeType":"YulFunctionCall","src":"9616:13:63"},"variables":[{"name":"length","nativeSrc":"9606:6:63","nodeType":"YulTypedName","src":"9606:6:63","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9649:9:63","nodeType":"YulIdentifier","src":"9649:9:63"},{"kind":"number","nativeSrc":"9660:2:63","nodeType":"YulLiteral","src":"9660:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9645:3:63","nodeType":"YulIdentifier","src":"9645:3:63"},"nativeSrc":"9645:18:63","nodeType":"YulFunctionCall","src":"9645:18:63"},{"name":"length","nativeSrc":"9665:6:63","nodeType":"YulIdentifier","src":"9665:6:63"}],"functionName":{"name":"mstore","nativeSrc":"9638:6:63","nodeType":"YulIdentifier","src":"9638:6:63"},"nativeSrc":"9638:34:63","nodeType":"YulFunctionCall","src":"9638:34:63"},"nativeSrc":"9638:34:63","nodeType":"YulExpressionStatement","src":"9638:34:63"},{"nativeSrc":"9681:10:63","nodeType":"YulVariableDeclaration","src":"9681:10:63","value":{"kind":"number","nativeSrc":"9690:1:63","nodeType":"YulLiteral","src":"9690:1:63","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"9685:1:63","nodeType":"YulTypedName","src":"9685:1:63","type":""}]},{"body":{"nativeSrc":"9752:92:63","nodeType":"YulBlock","src":"9752:92:63","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9781:9:63","nodeType":"YulIdentifier","src":"9781:9:63"},{"name":"i","nativeSrc":"9792:1:63","nodeType":"YulIdentifier","src":"9792:1:63"}],"functionName":{"name":"add","nativeSrc":"9777:3:63","nodeType":"YulIdentifier","src":"9777:3:63"},"nativeSrc":"9777:17:63","nodeType":"YulFunctionCall","src":"9777:17:63"},{"kind":"number","nativeSrc":"9796:2:63","nodeType":"YulLiteral","src":"9796:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9773:3:63","nodeType":"YulIdentifier","src":"9773:3:63"},"nativeSrc":"9773:26:63","nodeType":"YulFunctionCall","src":"9773:26:63"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"9815:6:63","nodeType":"YulIdentifier","src":"9815:6:63"},{"name":"i","nativeSrc":"9823:1:63","nodeType":"YulIdentifier","src":"9823:1:63"}],"functionName":{"name":"add","nativeSrc":"9811:3:63","nodeType":"YulIdentifier","src":"9811:3:63"},"nativeSrc":"9811:14:63","nodeType":"YulFunctionCall","src":"9811:14:63"},{"kind":"number","nativeSrc":"9827:4:63","nodeType":"YulLiteral","src":"9827:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9807:3:63","nodeType":"YulIdentifier","src":"9807:3:63"},"nativeSrc":"9807:25:63","nodeType":"YulFunctionCall","src":"9807:25:63"}],"functionName":{"name":"mload","nativeSrc":"9801:5:63","nodeType":"YulIdentifier","src":"9801:5:63"},"nativeSrc":"9801:32:63","nodeType":"YulFunctionCall","src":"9801:32:63"}],"functionName":{"name":"mstore","nativeSrc":"9766:6:63","nodeType":"YulIdentifier","src":"9766:6:63"},"nativeSrc":"9766:68:63","nodeType":"YulFunctionCall","src":"9766:68:63"},"nativeSrc":"9766:68:63","nodeType":"YulExpressionStatement","src":"9766:68:63"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"9711:1:63","nodeType":"YulIdentifier","src":"9711:1:63"},{"name":"length","nativeSrc":"9714:6:63","nodeType":"YulIdentifier","src":"9714:6:63"}],"functionName":{"name":"lt","nativeSrc":"9708:2:63","nodeType":"YulIdentifier","src":"9708:2:63"},"nativeSrc":"9708:13:63","nodeType":"YulFunctionCall","src":"9708:13:63"},"nativeSrc":"9700:144:63","nodeType":"YulForLoop","post":{"nativeSrc":"9722:21:63","nodeType":"YulBlock","src":"9722:21:63","statements":[{"nativeSrc":"9724:17:63","nodeType":"YulAssignment","src":"9724:17:63","value":{"arguments":[{"name":"i","nativeSrc":"9733:1:63","nodeType":"YulIdentifier","src":"9733:1:63"},{"kind":"number","nativeSrc":"9736:4:63","nodeType":"YulLiteral","src":"9736:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9729:3:63","nodeType":"YulIdentifier","src":"9729:3:63"},"nativeSrc":"9729:12:63","nodeType":"YulFunctionCall","src":"9729:12:63"},"variableNames":[{"name":"i","nativeSrc":"9724:1:63","nodeType":"YulIdentifier","src":"9724:1:63"}]}]},"pre":{"nativeSrc":"9704:3:63","nodeType":"YulBlock","src":"9704:3:63","statements":[]},"src":"9700:144:63"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9868:9:63","nodeType":"YulIdentifier","src":"9868:9:63"},{"name":"length","nativeSrc":"9879:6:63","nodeType":"YulIdentifier","src":"9879:6:63"}],"functionName":{"name":"add","nativeSrc":"9864:3:63","nodeType":"YulIdentifier","src":"9864:3:63"},"nativeSrc":"9864:22:63","nodeType":"YulFunctionCall","src":"9864:22:63"},{"kind":"number","nativeSrc":"9888:2:63","nodeType":"YulLiteral","src":"9888:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9860:3:63","nodeType":"YulIdentifier","src":"9860:3:63"},"nativeSrc":"9860:31:63","nodeType":"YulFunctionCall","src":"9860:31:63"},{"kind":"number","nativeSrc":"9893:1:63","nodeType":"YulLiteral","src":"9893:1:63","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"9853:6:63","nodeType":"YulIdentifier","src":"9853:6:63"},"nativeSrc":"9853:42:63","nodeType":"YulFunctionCall","src":"9853:42:63"},"nativeSrc":"9853:42:63","nodeType":"YulExpressionStatement","src":"9853:42:63"},{"nativeSrc":"9904:121:63","nodeType":"YulAssignment","src":"9904:121:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9920:9:63","nodeType":"YulIdentifier","src":"9920:9:63"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"9939:6:63","nodeType":"YulIdentifier","src":"9939:6:63"},{"kind":"number","nativeSrc":"9947:2:63","nodeType":"YulLiteral","src":"9947:2:63","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"9935:3:63","nodeType":"YulIdentifier","src":"9935:3:63"},"nativeSrc":"9935:15:63","nodeType":"YulFunctionCall","src":"9935:15:63"},{"kind":"number","nativeSrc":"9952:66:63","nodeType":"YulLiteral","src":"9952:66:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"9931:3:63","nodeType":"YulIdentifier","src":"9931:3:63"},"nativeSrc":"9931:88:63","nodeType":"YulFunctionCall","src":"9931:88:63"}],"functionName":{"name":"add","nativeSrc":"9916:3:63","nodeType":"YulIdentifier","src":"9916:3:63"},"nativeSrc":"9916:104:63","nodeType":"YulFunctionCall","src":"9916:104:63"},{"kind":"number","nativeSrc":"10022:2:63","nodeType":"YulLiteral","src":"10022:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9912:3:63","nodeType":"YulIdentifier","src":"9912:3:63"},"nativeSrc":"9912:113:63","nodeType":"YulFunctionCall","src":"9912:113:63"},"variableNames":[{"name":"tail","nativeSrc":"9904:4:63","nodeType":"YulIdentifier","src":"9904:4:63"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10045:9:63","nodeType":"YulIdentifier","src":"10045:9:63"},{"kind":"number","nativeSrc":"10056:4:63","nodeType":"YulLiteral","src":"10056:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10041:3:63","nodeType":"YulIdentifier","src":"10041:3:63"},"nativeSrc":"10041:20:63","nodeType":"YulFunctionCall","src":"10041:20:63"},{"name":"value1","nativeSrc":"10063:6:63","nodeType":"YulIdentifier","src":"10063:6:63"}],"functionName":{"name":"mstore","nativeSrc":"10034:6:63","nodeType":"YulIdentifier","src":"10034:6:63"},"nativeSrc":"10034:36:63","nodeType":"YulFunctionCall","src":"10034:36:63"},"nativeSrc":"10034:36:63","nodeType":"YulExpressionStatement","src":"10034:36:63"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nativeSrc":"9415:661:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9523:9:63","nodeType":"YulTypedName","src":"9523:9:63","type":""},{"name":"value1","nativeSrc":"9534:6:63","nodeType":"YulTypedName","src":"9534:6:63","type":""},{"name":"value0","nativeSrc":"9542:6:63","nodeType":"YulTypedName","src":"9542:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9553:4:63","nodeType":"YulTypedName","src":"9553:4:63","type":""}],"src":"9415:661:63"},{"body":{"nativeSrc":"10159:177:63","nodeType":"YulBlock","src":"10159:177:63","statements":[{"body":{"nativeSrc":"10205:16:63","nodeType":"YulBlock","src":"10205:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10214:1:63","nodeType":"YulLiteral","src":"10214:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"10217:1:63","nodeType":"YulLiteral","src":"10217:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10207:6:63","nodeType":"YulIdentifier","src":"10207:6:63"},"nativeSrc":"10207:12:63","nodeType":"YulFunctionCall","src":"10207:12:63"},"nativeSrc":"10207:12:63","nodeType":"YulExpressionStatement","src":"10207:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10180:7:63","nodeType":"YulIdentifier","src":"10180:7:63"},{"name":"headStart","nativeSrc":"10189:9:63","nodeType":"YulIdentifier","src":"10189:9:63"}],"functionName":{"name":"sub","nativeSrc":"10176:3:63","nodeType":"YulIdentifier","src":"10176:3:63"},"nativeSrc":"10176:23:63","nodeType":"YulFunctionCall","src":"10176:23:63"},{"kind":"number","nativeSrc":"10201:2:63","nodeType":"YulLiteral","src":"10201:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10172:3:63","nodeType":"YulIdentifier","src":"10172:3:63"},"nativeSrc":"10172:32:63","nodeType":"YulFunctionCall","src":"10172:32:63"},"nativeSrc":"10169:52:63","nodeType":"YulIf","src":"10169:52:63"},{"nativeSrc":"10230:36:63","nodeType":"YulVariableDeclaration","src":"10230:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"10256:9:63","nodeType":"YulIdentifier","src":"10256:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"10243:12:63","nodeType":"YulIdentifier","src":"10243:12:63"},"nativeSrc":"10243:23:63","nodeType":"YulFunctionCall","src":"10243:23:63"},"variables":[{"name":"value","nativeSrc":"10234:5:63","nodeType":"YulTypedName","src":"10234:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10300:5:63","nodeType":"YulIdentifier","src":"10300:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"10275:24:63","nodeType":"YulIdentifier","src":"10275:24:63"},"nativeSrc":"10275:31:63","nodeType":"YulFunctionCall","src":"10275:31:63"},"nativeSrc":"10275:31:63","nodeType":"YulExpressionStatement","src":"10275:31:63"},{"nativeSrc":"10315:15:63","nodeType":"YulAssignment","src":"10315:15:63","value":{"name":"value","nativeSrc":"10325:5:63","nodeType":"YulIdentifier","src":"10325:5:63"},"variableNames":[{"name":"value0","nativeSrc":"10315:6:63","nodeType":"YulIdentifier","src":"10315:6:63"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"10081:255:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10125:9:63","nodeType":"YulTypedName","src":"10125:9:63","type":""},{"name":"dataEnd","nativeSrc":"10136:7:63","nodeType":"YulTypedName","src":"10136:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10148:6:63","nodeType":"YulTypedName","src":"10148:6:63","type":""}],"src":"10081:255:63"},{"body":{"nativeSrc":"10373:152:63","nodeType":"YulBlock","src":"10373:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10390:1:63","nodeType":"YulLiteral","src":"10390:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"10393:77:63","nodeType":"YulLiteral","src":"10393:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10383:6:63","nodeType":"YulIdentifier","src":"10383:6:63"},"nativeSrc":"10383:88:63","nodeType":"YulFunctionCall","src":"10383:88:63"},"nativeSrc":"10383:88:63","nodeType":"YulExpressionStatement","src":"10383:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10487:1:63","nodeType":"YulLiteral","src":"10487:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"10490:4:63","nodeType":"YulLiteral","src":"10490:4:63","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"10480:6:63","nodeType":"YulIdentifier","src":"10480:6:63"},"nativeSrc":"10480:15:63","nodeType":"YulFunctionCall","src":"10480:15:63"},"nativeSrc":"10480:15:63","nodeType":"YulExpressionStatement","src":"10480:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10511:1:63","nodeType":"YulLiteral","src":"10511:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"10514:4:63","nodeType":"YulLiteral","src":"10514:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10504:6:63","nodeType":"YulIdentifier","src":"10504:6:63"},"nativeSrc":"10504:15:63","nodeType":"YulFunctionCall","src":"10504:15:63"},"nativeSrc":"10504:15:63","nodeType":"YulExpressionStatement","src":"10504:15:63"}]},"name":"panic_error_0x32","nativeSrc":"10341:184:63","nodeType":"YulFunctionDefinition","src":"10341:184:63"},{"body":{"nativeSrc":"10615:177:63","nodeType":"YulBlock","src":"10615:177:63","statements":[{"body":{"nativeSrc":"10661:16:63","nodeType":"YulBlock","src":"10661:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10670:1:63","nodeType":"YulLiteral","src":"10670:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"10673:1:63","nodeType":"YulLiteral","src":"10673:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10663:6:63","nodeType":"YulIdentifier","src":"10663:6:63"},"nativeSrc":"10663:12:63","nodeType":"YulFunctionCall","src":"10663:12:63"},"nativeSrc":"10663:12:63","nodeType":"YulExpressionStatement","src":"10663:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10636:7:63","nodeType":"YulIdentifier","src":"10636:7:63"},{"name":"headStart","nativeSrc":"10645:9:63","nodeType":"YulIdentifier","src":"10645:9:63"}],"functionName":{"name":"sub","nativeSrc":"10632:3:63","nodeType":"YulIdentifier","src":"10632:3:63"},"nativeSrc":"10632:23:63","nodeType":"YulFunctionCall","src":"10632:23:63"},{"kind":"number","nativeSrc":"10657:2:63","nodeType":"YulLiteral","src":"10657:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10628:3:63","nodeType":"YulIdentifier","src":"10628:3:63"},"nativeSrc":"10628:32:63","nodeType":"YulFunctionCall","src":"10628:32:63"},"nativeSrc":"10625:52:63","nodeType":"YulIf","src":"10625:52:63"},{"nativeSrc":"10686:36:63","nodeType":"YulVariableDeclaration","src":"10686:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"10712:9:63","nodeType":"YulIdentifier","src":"10712:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"10699:12:63","nodeType":"YulIdentifier","src":"10699:12:63"},"nativeSrc":"10699:23:63","nodeType":"YulFunctionCall","src":"10699:23:63"},"variables":[{"name":"value","nativeSrc":"10690:5:63","nodeType":"YulTypedName","src":"10690:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10756:5:63","nodeType":"YulIdentifier","src":"10756:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"10731:24:63","nodeType":"YulIdentifier","src":"10731:24:63"},"nativeSrc":"10731:31:63","nodeType":"YulFunctionCall","src":"10731:31:63"},"nativeSrc":"10731:31:63","nodeType":"YulExpressionStatement","src":"10731:31:63"},{"nativeSrc":"10771:15:63","nodeType":"YulAssignment","src":"10771:15:63","value":{"name":"value","nativeSrc":"10781:5:63","nodeType":"YulIdentifier","src":"10781:5:63"},"variableNames":[{"name":"value0","nativeSrc":"10771:6:63","nodeType":"YulIdentifier","src":"10771:6:63"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$3386","nativeSrc":"10530:262:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10581:9:63","nodeType":"YulTypedName","src":"10581:9:63","type":""},{"name":"dataEnd","nativeSrc":"10592:7:63","nodeType":"YulTypedName","src":"10592:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10604:6:63","nodeType":"YulTypedName","src":"10604:6:63","type":""}],"src":"10530:262:63"},{"body":{"nativeSrc":"10878:103:63","nodeType":"YulBlock","src":"10878:103:63","statements":[{"body":{"nativeSrc":"10924:16:63","nodeType":"YulBlock","src":"10924:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10933:1:63","nodeType":"YulLiteral","src":"10933:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"10936:1:63","nodeType":"YulLiteral","src":"10936:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10926:6:63","nodeType":"YulIdentifier","src":"10926:6:63"},"nativeSrc":"10926:12:63","nodeType":"YulFunctionCall","src":"10926:12:63"},"nativeSrc":"10926:12:63","nodeType":"YulExpressionStatement","src":"10926:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10899:7:63","nodeType":"YulIdentifier","src":"10899:7:63"},{"name":"headStart","nativeSrc":"10908:9:63","nodeType":"YulIdentifier","src":"10908:9:63"}],"functionName":{"name":"sub","nativeSrc":"10895:3:63","nodeType":"YulIdentifier","src":"10895:3:63"},"nativeSrc":"10895:23:63","nodeType":"YulFunctionCall","src":"10895:23:63"},{"kind":"number","nativeSrc":"10920:2:63","nodeType":"YulLiteral","src":"10920:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10891:3:63","nodeType":"YulIdentifier","src":"10891:3:63"},"nativeSrc":"10891:32:63","nodeType":"YulFunctionCall","src":"10891:32:63"},"nativeSrc":"10888:52:63","nodeType":"YulIf","src":"10888:52:63"},{"nativeSrc":"10949:26:63","nodeType":"YulAssignment","src":"10949:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"10965:9:63","nodeType":"YulIdentifier","src":"10965:9:63"}],"functionName":{"name":"mload","nativeSrc":"10959:5:63","nodeType":"YulIdentifier","src":"10959:5:63"},"nativeSrc":"10959:16:63","nodeType":"YulFunctionCall","src":"10959:16:63"},"variableNames":[{"name":"value0","nativeSrc":"10949:6:63","nodeType":"YulIdentifier","src":"10949:6:63"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"10797:184:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10844:9:63","nodeType":"YulTypedName","src":"10844:9:63","type":""},{"name":"dataEnd","nativeSrc":"10855:7:63","nodeType":"YulTypedName","src":"10855:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10867:6:63","nodeType":"YulTypedName","src":"10867:6:63","type":""}],"src":"10797:184:63"},{"body":{"nativeSrc":"11115:119:63","nodeType":"YulBlock","src":"11115:119:63","statements":[{"nativeSrc":"11125:26:63","nodeType":"YulAssignment","src":"11125:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"11137:9:63","nodeType":"YulIdentifier","src":"11137:9:63"},{"kind":"number","nativeSrc":"11148:2:63","nodeType":"YulLiteral","src":"11148:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11133:3:63","nodeType":"YulIdentifier","src":"11133:3:63"},"nativeSrc":"11133:18:63","nodeType":"YulFunctionCall","src":"11133:18:63"},"variableNames":[{"name":"tail","nativeSrc":"11125:4:63","nodeType":"YulIdentifier","src":"11125:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11167:9:63","nodeType":"YulIdentifier","src":"11167:9:63"},{"name":"value0","nativeSrc":"11178:6:63","nodeType":"YulIdentifier","src":"11178:6:63"}],"functionName":{"name":"mstore","nativeSrc":"11160:6:63","nodeType":"YulIdentifier","src":"11160:6:63"},"nativeSrc":"11160:25:63","nodeType":"YulFunctionCall","src":"11160:25:63"},"nativeSrc":"11160:25:63","nodeType":"YulExpressionStatement","src":"11160:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11205:9:63","nodeType":"YulIdentifier","src":"11205:9:63"},{"kind":"number","nativeSrc":"11216:2:63","nodeType":"YulLiteral","src":"11216:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11201:3:63","nodeType":"YulIdentifier","src":"11201:3:63"},"nativeSrc":"11201:18:63","nodeType":"YulFunctionCall","src":"11201:18:63"},{"name":"value1","nativeSrc":"11221:6:63","nodeType":"YulIdentifier","src":"11221:6:63"}],"functionName":{"name":"mstore","nativeSrc":"11194:6:63","nodeType":"YulIdentifier","src":"11194:6:63"},"nativeSrc":"11194:34:63","nodeType":"YulFunctionCall","src":"11194:34:63"},"nativeSrc":"11194:34:63","nodeType":"YulExpressionStatement","src":"11194:34:63"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10986:248:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11076:9:63","nodeType":"YulTypedName","src":"11076:9:63","type":""},{"name":"value1","nativeSrc":"11087:6:63","nodeType":"YulTypedName","src":"11087:6:63","type":""},{"name":"value0","nativeSrc":"11095:6:63","nodeType":"YulTypedName","src":"11095:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11106:4:63","nodeType":"YulTypedName","src":"11106:4:63","type":""}],"src":"10986:248:63"},{"body":{"nativeSrc":"11277:74:63","nodeType":"YulBlock","src":"11277:74:63","statements":[{"body":{"nativeSrc":"11300:22:63","nodeType":"YulBlock","src":"11300:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"11302:16:63","nodeType":"YulIdentifier","src":"11302:16:63"},"nativeSrc":"11302:18:63","nodeType":"YulFunctionCall","src":"11302:18:63"},"nativeSrc":"11302:18:63","nodeType":"YulExpressionStatement","src":"11302:18:63"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"11297:1:63","nodeType":"YulIdentifier","src":"11297:1:63"}],"functionName":{"name":"iszero","nativeSrc":"11290:6:63","nodeType":"YulIdentifier","src":"11290:6:63"},"nativeSrc":"11290:9:63","nodeType":"YulFunctionCall","src":"11290:9:63"},"nativeSrc":"11287:35:63","nodeType":"YulIf","src":"11287:35:63"},{"nativeSrc":"11331:14:63","nodeType":"YulAssignment","src":"11331:14:63","value":{"arguments":[{"name":"x","nativeSrc":"11340:1:63","nodeType":"YulIdentifier","src":"11340:1:63"},{"name":"y","nativeSrc":"11343:1:63","nodeType":"YulIdentifier","src":"11343:1:63"}],"functionName":{"name":"mod","nativeSrc":"11336:3:63","nodeType":"YulIdentifier","src":"11336:3:63"},"nativeSrc":"11336:9:63","nodeType":"YulFunctionCall","src":"11336:9:63"},"variableNames":[{"name":"r","nativeSrc":"11331:1:63","nodeType":"YulIdentifier","src":"11331:1:63"}]}]},"name":"mod_t_uint256","nativeSrc":"11239:112:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11262:1:63","nodeType":"YulTypedName","src":"11262:1:63","type":""},{"name":"y","nativeSrc":"11265:1:63","nodeType":"YulTypedName","src":"11265:1:63","type":""}],"returnVariables":[{"name":"r","nativeSrc":"11271:1:63","nodeType":"YulTypedName","src":"11271:1:63","type":""}],"src":"11239:112:63"},{"body":{"nativeSrc":"11513:162:63","nodeType":"YulBlock","src":"11513:162:63","statements":[{"nativeSrc":"11523:26:63","nodeType":"YulAssignment","src":"11523:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"11535:9:63","nodeType":"YulIdentifier","src":"11535:9:63"},{"kind":"number","nativeSrc":"11546:2:63","nodeType":"YulLiteral","src":"11546:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11531:3:63","nodeType":"YulIdentifier","src":"11531:3:63"},"nativeSrc":"11531:18:63","nodeType":"YulFunctionCall","src":"11531:18:63"},"variableNames":[{"name":"tail","nativeSrc":"11523:4:63","nodeType":"YulIdentifier","src":"11523:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11565:9:63","nodeType":"YulIdentifier","src":"11565:9:63"},{"name":"value0","nativeSrc":"11576:6:63","nodeType":"YulIdentifier","src":"11576:6:63"}],"functionName":{"name":"mstore","nativeSrc":"11558:6:63","nodeType":"YulIdentifier","src":"11558:6:63"},"nativeSrc":"11558:25:63","nodeType":"YulFunctionCall","src":"11558:25:63"},"nativeSrc":"11558:25:63","nodeType":"YulExpressionStatement","src":"11558:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11603:9:63","nodeType":"YulIdentifier","src":"11603:9:63"},{"kind":"number","nativeSrc":"11614:2:63","nodeType":"YulLiteral","src":"11614:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11599:3:63","nodeType":"YulIdentifier","src":"11599:3:63"},"nativeSrc":"11599:18:63","nodeType":"YulFunctionCall","src":"11599:18:63"},{"name":"value1","nativeSrc":"11619:6:63","nodeType":"YulIdentifier","src":"11619:6:63"}],"functionName":{"name":"mstore","nativeSrc":"11592:6:63","nodeType":"YulIdentifier","src":"11592:6:63"},"nativeSrc":"11592:34:63","nodeType":"YulFunctionCall","src":"11592:34:63"},"nativeSrc":"11592:34:63","nodeType":"YulExpressionStatement","src":"11592:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11646:9:63","nodeType":"YulIdentifier","src":"11646:9:63"},{"kind":"number","nativeSrc":"11657:2:63","nodeType":"YulLiteral","src":"11657:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11642:3:63","nodeType":"YulIdentifier","src":"11642:3:63"},"nativeSrc":"11642:18:63","nodeType":"YulFunctionCall","src":"11642:18:63"},{"name":"value2","nativeSrc":"11662:6:63","nodeType":"YulIdentifier","src":"11662:6:63"}],"functionName":{"name":"mstore","nativeSrc":"11635:6:63","nodeType":"YulIdentifier","src":"11635:6:63"},"nativeSrc":"11635:34:63","nodeType":"YulFunctionCall","src":"11635:34:63"},"nativeSrc":"11635:34:63","nodeType":"YulExpressionStatement","src":"11635:34:63"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11356:319:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11466:9:63","nodeType":"YulTypedName","src":"11466:9:63","type":""},{"name":"value2","nativeSrc":"11477:6:63","nodeType":"YulTypedName","src":"11477:6:63","type":""},{"name":"value1","nativeSrc":"11485:6:63","nodeType":"YulTypedName","src":"11485:6:63","type":""},{"name":"value0","nativeSrc":"11493:6:63","nodeType":"YulTypedName","src":"11493:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11504:4:63","nodeType":"YulTypedName","src":"11504:4:63","type":""}],"src":"11356:319:63"},{"body":{"nativeSrc":"11837:211:63","nodeType":"YulBlock","src":"11837:211:63","statements":[{"nativeSrc":"11847:26:63","nodeType":"YulAssignment","src":"11847:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"11859:9:63","nodeType":"YulIdentifier","src":"11859:9:63"},{"kind":"number","nativeSrc":"11870:2:63","nodeType":"YulLiteral","src":"11870:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11855:3:63","nodeType":"YulIdentifier","src":"11855:3:63"},"nativeSrc":"11855:18:63","nodeType":"YulFunctionCall","src":"11855:18:63"},"variableNames":[{"name":"tail","nativeSrc":"11847:4:63","nodeType":"YulIdentifier","src":"11847:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11889:9:63","nodeType":"YulIdentifier","src":"11889:9:63"},{"arguments":[{"name":"value0","nativeSrc":"11904:6:63","nodeType":"YulIdentifier","src":"11904:6:63"},{"kind":"number","nativeSrc":"11912:42:63","nodeType":"YulLiteral","src":"11912:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11900:3:63","nodeType":"YulIdentifier","src":"11900:3:63"},"nativeSrc":"11900:55:63","nodeType":"YulFunctionCall","src":"11900:55:63"}],"functionName":{"name":"mstore","nativeSrc":"11882:6:63","nodeType":"YulIdentifier","src":"11882:6:63"},"nativeSrc":"11882:74:63","nodeType":"YulFunctionCall","src":"11882:74:63"},"nativeSrc":"11882:74:63","nodeType":"YulExpressionStatement","src":"11882:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11976:9:63","nodeType":"YulIdentifier","src":"11976:9:63"},{"kind":"number","nativeSrc":"11987:2:63","nodeType":"YulLiteral","src":"11987:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11972:3:63","nodeType":"YulIdentifier","src":"11972:3:63"},"nativeSrc":"11972:18:63","nodeType":"YulFunctionCall","src":"11972:18:63"},{"name":"value1","nativeSrc":"11992:6:63","nodeType":"YulIdentifier","src":"11992:6:63"}],"functionName":{"name":"mstore","nativeSrc":"11965:6:63","nodeType":"YulIdentifier","src":"11965:6:63"},"nativeSrc":"11965:34:63","nodeType":"YulFunctionCall","src":"11965:34:63"},"nativeSrc":"11965:34:63","nodeType":"YulExpressionStatement","src":"11965:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12019:9:63","nodeType":"YulIdentifier","src":"12019:9:63"},{"kind":"number","nativeSrc":"12030:2:63","nodeType":"YulLiteral","src":"12030:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12015:3:63","nodeType":"YulIdentifier","src":"12015:3:63"},"nativeSrc":"12015:18:63","nodeType":"YulFunctionCall","src":"12015:18:63"},{"name":"value2","nativeSrc":"12035:6:63","nodeType":"YulIdentifier","src":"12035:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12008:6:63","nodeType":"YulIdentifier","src":"12008:6:63"},"nativeSrc":"12008:34:63","nodeType":"YulFunctionCall","src":"12008:34:63"},"nativeSrc":"12008:34:63","nodeType":"YulExpressionStatement","src":"12008:34:63"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11680:368:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11790:9:63","nodeType":"YulTypedName","src":"11790:9:63","type":""},{"name":"value2","nativeSrc":"11801:6:63","nodeType":"YulTypedName","src":"11801:6:63","type":""},{"name":"value1","nativeSrc":"11809:6:63","nodeType":"YulTypedName","src":"11809:6:63","type":""},{"name":"value0","nativeSrc":"11817:6:63","nodeType":"YulTypedName","src":"11817:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11828:4:63","nodeType":"YulTypedName","src":"11828:4:63","type":""}],"src":"11680:368:63"},{"body":{"nativeSrc":"12210:260:63","nodeType":"YulBlock","src":"12210:260:63","statements":[{"nativeSrc":"12220:26:63","nodeType":"YulAssignment","src":"12220:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"12232:9:63","nodeType":"YulIdentifier","src":"12232:9:63"},{"kind":"number","nativeSrc":"12243:2:63","nodeType":"YulLiteral","src":"12243:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12228:3:63","nodeType":"YulIdentifier","src":"12228:3:63"},"nativeSrc":"12228:18:63","nodeType":"YulFunctionCall","src":"12228:18:63"},"variableNames":[{"name":"tail","nativeSrc":"12220:4:63","nodeType":"YulIdentifier","src":"12220:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12262:9:63","nodeType":"YulIdentifier","src":"12262:9:63"},{"name":"value0","nativeSrc":"12273:6:63","nodeType":"YulIdentifier","src":"12273:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12255:6:63","nodeType":"YulIdentifier","src":"12255:6:63"},"nativeSrc":"12255:25:63","nodeType":"YulFunctionCall","src":"12255:25:63"},"nativeSrc":"12255:25:63","nodeType":"YulExpressionStatement","src":"12255:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12300:9:63","nodeType":"YulIdentifier","src":"12300:9:63"},{"kind":"number","nativeSrc":"12311:2:63","nodeType":"YulLiteral","src":"12311:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12296:3:63","nodeType":"YulIdentifier","src":"12296:3:63"},"nativeSrc":"12296:18:63","nodeType":"YulFunctionCall","src":"12296:18:63"},{"arguments":[{"name":"value1","nativeSrc":"12320:6:63","nodeType":"YulIdentifier","src":"12320:6:63"},{"kind":"number","nativeSrc":"12328:42:63","nodeType":"YulLiteral","src":"12328:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12316:3:63","nodeType":"YulIdentifier","src":"12316:3:63"},"nativeSrc":"12316:55:63","nodeType":"YulFunctionCall","src":"12316:55:63"}],"functionName":{"name":"mstore","nativeSrc":"12289:6:63","nodeType":"YulIdentifier","src":"12289:6:63"},"nativeSrc":"12289:83:63","nodeType":"YulFunctionCall","src":"12289:83:63"},"nativeSrc":"12289:83:63","nodeType":"YulExpressionStatement","src":"12289:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12392:9:63","nodeType":"YulIdentifier","src":"12392:9:63"},{"kind":"number","nativeSrc":"12403:2:63","nodeType":"YulLiteral","src":"12403:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12388:3:63","nodeType":"YulIdentifier","src":"12388:3:63"},"nativeSrc":"12388:18:63","nodeType":"YulFunctionCall","src":"12388:18:63"},{"arguments":[{"name":"value2","nativeSrc":"12412:6:63","nodeType":"YulIdentifier","src":"12412:6:63"},{"kind":"number","nativeSrc":"12420:42:63","nodeType":"YulLiteral","src":"12420:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12408:3:63","nodeType":"YulIdentifier","src":"12408:3:63"},"nativeSrc":"12408:55:63","nodeType":"YulFunctionCall","src":"12408:55:63"}],"functionName":{"name":"mstore","nativeSrc":"12381:6:63","nodeType":"YulIdentifier","src":"12381:6:63"},"nativeSrc":"12381:83:63","nodeType":"YulFunctionCall","src":"12381:83:63"},"nativeSrc":"12381:83:63","nodeType":"YulExpressionStatement","src":"12381:83:63"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"12053:417:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12163:9:63","nodeType":"YulTypedName","src":"12163:9:63","type":""},{"name":"value2","nativeSrc":"12174:6:63","nodeType":"YulTypedName","src":"12174:6:63","type":""},{"name":"value1","nativeSrc":"12182:6:63","nodeType":"YulTypedName","src":"12182:6:63","type":""},{"name":"value0","nativeSrc":"12190:6:63","nodeType":"YulTypedName","src":"12190:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12201:4:63","nodeType":"YulTypedName","src":"12201:4:63","type":""}],"src":"12053:417:63"},{"body":{"nativeSrc":"12604:168:63","nodeType":"YulBlock","src":"12604:168:63","statements":[{"nativeSrc":"12614:26:63","nodeType":"YulAssignment","src":"12614:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"12626:9:63","nodeType":"YulIdentifier","src":"12626:9:63"},{"kind":"number","nativeSrc":"12637:2:63","nodeType":"YulLiteral","src":"12637:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12622:3:63","nodeType":"YulIdentifier","src":"12622:3:63"},"nativeSrc":"12622:18:63","nodeType":"YulFunctionCall","src":"12622:18:63"},"variableNames":[{"name":"tail","nativeSrc":"12614:4:63","nodeType":"YulIdentifier","src":"12614:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12656:9:63","nodeType":"YulIdentifier","src":"12656:9:63"},{"name":"value0","nativeSrc":"12667:6:63","nodeType":"YulIdentifier","src":"12667:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12649:6:63","nodeType":"YulIdentifier","src":"12649:6:63"},"nativeSrc":"12649:25:63","nodeType":"YulFunctionCall","src":"12649:25:63"},"nativeSrc":"12649:25:63","nodeType":"YulExpressionStatement","src":"12649:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12694:9:63","nodeType":"YulIdentifier","src":"12694:9:63"},{"kind":"number","nativeSrc":"12705:2:63","nodeType":"YulLiteral","src":"12705:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12690:3:63","nodeType":"YulIdentifier","src":"12690:3:63"},"nativeSrc":"12690:18:63","nodeType":"YulFunctionCall","src":"12690:18:63"},{"arguments":[{"name":"value1","nativeSrc":"12714:6:63","nodeType":"YulIdentifier","src":"12714:6:63"},{"kind":"number","nativeSrc":"12722:42:63","nodeType":"YulLiteral","src":"12722:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12710:3:63","nodeType":"YulIdentifier","src":"12710:3:63"},"nativeSrc":"12710:55:63","nodeType":"YulFunctionCall","src":"12710:55:63"}],"functionName":{"name":"mstore","nativeSrc":"12683:6:63","nodeType":"YulIdentifier","src":"12683:6:63"},"nativeSrc":"12683:83:63","nodeType":"YulFunctionCall","src":"12683:83:63"},"nativeSrc":"12683:83:63","nodeType":"YulExpressionStatement","src":"12683:83:63"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"12475:297:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12565:9:63","nodeType":"YulTypedName","src":"12565:9:63","type":""},{"name":"value1","nativeSrc":"12576:6:63","nodeType":"YulTypedName","src":"12576:6:63","type":""},{"name":"value0","nativeSrc":"12584:6:63","nodeType":"YulTypedName","src":"12584:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12595:4:63","nodeType":"YulTypedName","src":"12595:4:63","type":""}],"src":"12475:297:63"},{"body":{"nativeSrc":"12863:177:63","nodeType":"YulBlock","src":"12863:177:63","statements":[{"body":{"nativeSrc":"12909:16:63","nodeType":"YulBlock","src":"12909:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12918:1:63","nodeType":"YulLiteral","src":"12918:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"12921:1:63","nodeType":"YulLiteral","src":"12921:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12911:6:63","nodeType":"YulIdentifier","src":"12911:6:63"},"nativeSrc":"12911:12:63","nodeType":"YulFunctionCall","src":"12911:12:63"},"nativeSrc":"12911:12:63","nodeType":"YulExpressionStatement","src":"12911:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12884:7:63","nodeType":"YulIdentifier","src":"12884:7:63"},{"name":"headStart","nativeSrc":"12893:9:63","nodeType":"YulIdentifier","src":"12893:9:63"}],"functionName":{"name":"sub","nativeSrc":"12880:3:63","nodeType":"YulIdentifier","src":"12880:3:63"},"nativeSrc":"12880:23:63","nodeType":"YulFunctionCall","src":"12880:23:63"},{"kind":"number","nativeSrc":"12905:2:63","nodeType":"YulLiteral","src":"12905:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12876:3:63","nodeType":"YulIdentifier","src":"12876:3:63"},"nativeSrc":"12876:32:63","nodeType":"YulFunctionCall","src":"12876:32:63"},"nativeSrc":"12873:52:63","nodeType":"YulIf","src":"12873:52:63"},{"nativeSrc":"12934:36:63","nodeType":"YulVariableDeclaration","src":"12934:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"12960:9:63","nodeType":"YulIdentifier","src":"12960:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"12947:12:63","nodeType":"YulIdentifier","src":"12947:12:63"},"nativeSrc":"12947:23:63","nodeType":"YulFunctionCall","src":"12947:23:63"},"variables":[{"name":"value","nativeSrc":"12938:5:63","nodeType":"YulTypedName","src":"12938:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"13004:5:63","nodeType":"YulIdentifier","src":"13004:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12979:24:63","nodeType":"YulIdentifier","src":"12979:24:63"},"nativeSrc":"12979:31:63","nodeType":"YulFunctionCall","src":"12979:31:63"},"nativeSrc":"12979:31:63","nodeType":"YulExpressionStatement","src":"12979:31:63"},{"nativeSrc":"13019:15:63","nodeType":"YulAssignment","src":"13019:15:63","value":{"name":"value","nativeSrc":"13029:5:63","nodeType":"YulIdentifier","src":"13029:5:63"},"variableNames":[{"name":"value0","nativeSrc":"13019:6:63","nodeType":"YulIdentifier","src":"13019:6:63"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$3198","nativeSrc":"12777:263:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12829:9:63","nodeType":"YulTypedName","src":"12829:9:63","type":""},{"name":"dataEnd","nativeSrc":"12840:7:63","nodeType":"YulTypedName","src":"12840:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12852:6:63","nodeType":"YulTypedName","src":"12852:6:63","type":""}],"src":"12777:263:63"},{"body":{"nativeSrc":"13123:199:63","nodeType":"YulBlock","src":"13123:199:63","statements":[{"body":{"nativeSrc":"13169:16:63","nodeType":"YulBlock","src":"13169:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13178:1:63","nodeType":"YulLiteral","src":"13178:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"13181:1:63","nodeType":"YulLiteral","src":"13181:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13171:6:63","nodeType":"YulIdentifier","src":"13171:6:63"},"nativeSrc":"13171:12:63","nodeType":"YulFunctionCall","src":"13171:12:63"},"nativeSrc":"13171:12:63","nodeType":"YulExpressionStatement","src":"13171:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13144:7:63","nodeType":"YulIdentifier","src":"13144:7:63"},{"name":"headStart","nativeSrc":"13153:9:63","nodeType":"YulIdentifier","src":"13153:9:63"}],"functionName":{"name":"sub","nativeSrc":"13140:3:63","nodeType":"YulIdentifier","src":"13140:3:63"},"nativeSrc":"13140:23:63","nodeType":"YulFunctionCall","src":"13140:23:63"},{"kind":"number","nativeSrc":"13165:2:63","nodeType":"YulLiteral","src":"13165:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"13136:3:63","nodeType":"YulIdentifier","src":"13136:3:63"},"nativeSrc":"13136:32:63","nodeType":"YulFunctionCall","src":"13136:32:63"},"nativeSrc":"13133:52:63","nodeType":"YulIf","src":"13133:52:63"},{"nativeSrc":"13194:29:63","nodeType":"YulVariableDeclaration","src":"13194:29:63","value":{"arguments":[{"name":"headStart","nativeSrc":"13213:9:63","nodeType":"YulIdentifier","src":"13213:9:63"}],"functionName":{"name":"mload","nativeSrc":"13207:5:63","nodeType":"YulIdentifier","src":"13207:5:63"},"nativeSrc":"13207:16:63","nodeType":"YulFunctionCall","src":"13207:16:63"},"variables":[{"name":"value","nativeSrc":"13198:5:63","nodeType":"YulTypedName","src":"13198:5:63","type":""}]},{"body":{"nativeSrc":"13276:16:63","nodeType":"YulBlock","src":"13276:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13285:1:63","nodeType":"YulLiteral","src":"13285:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"13288:1:63","nodeType":"YulLiteral","src":"13288:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13278:6:63","nodeType":"YulIdentifier","src":"13278:6:63"},"nativeSrc":"13278:12:63","nodeType":"YulFunctionCall","src":"13278:12:63"},"nativeSrc":"13278:12:63","nodeType":"YulExpressionStatement","src":"13278:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13245:5:63","nodeType":"YulIdentifier","src":"13245:5:63"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13266:5:63","nodeType":"YulIdentifier","src":"13266:5:63"}],"functionName":{"name":"iszero","nativeSrc":"13259:6:63","nodeType":"YulIdentifier","src":"13259:6:63"},"nativeSrc":"13259:13:63","nodeType":"YulFunctionCall","src":"13259:13:63"}],"functionName":{"name":"iszero","nativeSrc":"13252:6:63","nodeType":"YulIdentifier","src":"13252:6:63"},"nativeSrc":"13252:21:63","nodeType":"YulFunctionCall","src":"13252:21:63"}],"functionName":{"name":"eq","nativeSrc":"13242:2:63","nodeType":"YulIdentifier","src":"13242:2:63"},"nativeSrc":"13242:32:63","nodeType":"YulFunctionCall","src":"13242:32:63"}],"functionName":{"name":"iszero","nativeSrc":"13235:6:63","nodeType":"YulIdentifier","src":"13235:6:63"},"nativeSrc":"13235:40:63","nodeType":"YulFunctionCall","src":"13235:40:63"},"nativeSrc":"13232:60:63","nodeType":"YulIf","src":"13232:60:63"},{"nativeSrc":"13301:15:63","nodeType":"YulAssignment","src":"13301:15:63","value":{"name":"value","nativeSrc":"13311:5:63","nodeType":"YulIdentifier","src":"13311:5:63"},"variableNames":[{"name":"value0","nativeSrc":"13301:6:63","nodeType":"YulIdentifier","src":"13301:6:63"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"13045:277:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13089:9:63","nodeType":"YulTypedName","src":"13089:9:63","type":""},{"name":"dataEnd","nativeSrc":"13100:7:63","nodeType":"YulTypedName","src":"13100:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13112:6:63","nodeType":"YulTypedName","src":"13112:6:63","type":""}],"src":"13045:277:63"},{"body":{"nativeSrc":"13484:260:63","nodeType":"YulBlock","src":"13484:260:63","statements":[{"nativeSrc":"13494:26:63","nodeType":"YulAssignment","src":"13494:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"13506:9:63","nodeType":"YulIdentifier","src":"13506:9:63"},{"kind":"number","nativeSrc":"13517:2:63","nodeType":"YulLiteral","src":"13517:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13502:3:63","nodeType":"YulIdentifier","src":"13502:3:63"},"nativeSrc":"13502:18:63","nodeType":"YulFunctionCall","src":"13502:18:63"},"variableNames":[{"name":"tail","nativeSrc":"13494:4:63","nodeType":"YulIdentifier","src":"13494:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13536:9:63","nodeType":"YulIdentifier","src":"13536:9:63"},{"arguments":[{"name":"value0","nativeSrc":"13551:6:63","nodeType":"YulIdentifier","src":"13551:6:63"},{"kind":"number","nativeSrc":"13559:42:63","nodeType":"YulLiteral","src":"13559:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13547:3:63","nodeType":"YulIdentifier","src":"13547:3:63"},"nativeSrc":"13547:55:63","nodeType":"YulFunctionCall","src":"13547:55:63"}],"functionName":{"name":"mstore","nativeSrc":"13529:6:63","nodeType":"YulIdentifier","src":"13529:6:63"},"nativeSrc":"13529:74:63","nodeType":"YulFunctionCall","src":"13529:74:63"},"nativeSrc":"13529:74:63","nodeType":"YulExpressionStatement","src":"13529:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13623:9:63","nodeType":"YulIdentifier","src":"13623:9:63"},{"kind":"number","nativeSrc":"13634:2:63","nodeType":"YulLiteral","src":"13634:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13619:3:63","nodeType":"YulIdentifier","src":"13619:3:63"},"nativeSrc":"13619:18:63","nodeType":"YulFunctionCall","src":"13619:18:63"},{"arguments":[{"name":"value1","nativeSrc":"13643:6:63","nodeType":"YulIdentifier","src":"13643:6:63"},{"kind":"number","nativeSrc":"13651:42:63","nodeType":"YulLiteral","src":"13651:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13639:3:63","nodeType":"YulIdentifier","src":"13639:3:63"},"nativeSrc":"13639:55:63","nodeType":"YulFunctionCall","src":"13639:55:63"}],"functionName":{"name":"mstore","nativeSrc":"13612:6:63","nodeType":"YulIdentifier","src":"13612:6:63"},"nativeSrc":"13612:83:63","nodeType":"YulFunctionCall","src":"13612:83:63"},"nativeSrc":"13612:83:63","nodeType":"YulExpressionStatement","src":"13612:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13715:9:63","nodeType":"YulIdentifier","src":"13715:9:63"},{"kind":"number","nativeSrc":"13726:2:63","nodeType":"YulLiteral","src":"13726:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13711:3:63","nodeType":"YulIdentifier","src":"13711:3:63"},"nativeSrc":"13711:18:63","nodeType":"YulFunctionCall","src":"13711:18:63"},{"name":"value2","nativeSrc":"13731:6:63","nodeType":"YulIdentifier","src":"13731:6:63"}],"functionName":{"name":"mstore","nativeSrc":"13704:6:63","nodeType":"YulIdentifier","src":"13704:6:63"},"nativeSrc":"13704:34:63","nodeType":"YulFunctionCall","src":"13704:34:63"},"nativeSrc":"13704:34:63","nodeType":"YulExpressionStatement","src":"13704:34:63"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"13327:417:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13437:9:63","nodeType":"YulTypedName","src":"13437:9:63","type":""},{"name":"value2","nativeSrc":"13448:6:63","nodeType":"YulTypedName","src":"13448:6:63","type":""},{"name":"value1","nativeSrc":"13456:6:63","nodeType":"YulTypedName","src":"13456:6:63","type":""},{"name":"value0","nativeSrc":"13464:6:63","nodeType":"YulTypedName","src":"13464:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13475:4:63","nodeType":"YulTypedName","src":"13475:4:63","type":""}],"src":"13327:417:63"},{"body":{"nativeSrc":"13906:309:63","nodeType":"YulBlock","src":"13906:309:63","statements":[{"nativeSrc":"13916:26:63","nodeType":"YulAssignment","src":"13916:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"13928:9:63","nodeType":"YulIdentifier","src":"13928:9:63"},{"kind":"number","nativeSrc":"13939:2:63","nodeType":"YulLiteral","src":"13939:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13924:3:63","nodeType":"YulIdentifier","src":"13924:3:63"},"nativeSrc":"13924:18:63","nodeType":"YulFunctionCall","src":"13924:18:63"},"variableNames":[{"name":"tail","nativeSrc":"13916:4:63","nodeType":"YulIdentifier","src":"13916:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13958:9:63","nodeType":"YulIdentifier","src":"13958:9:63"},{"arguments":[{"name":"value0","nativeSrc":"13973:6:63","nodeType":"YulIdentifier","src":"13973:6:63"},{"kind":"number","nativeSrc":"13981:42:63","nodeType":"YulLiteral","src":"13981:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13969:3:63","nodeType":"YulIdentifier","src":"13969:3:63"},"nativeSrc":"13969:55:63","nodeType":"YulFunctionCall","src":"13969:55:63"}],"functionName":{"name":"mstore","nativeSrc":"13951:6:63","nodeType":"YulIdentifier","src":"13951:6:63"},"nativeSrc":"13951:74:63","nodeType":"YulFunctionCall","src":"13951:74:63"},"nativeSrc":"13951:74:63","nodeType":"YulExpressionStatement","src":"13951:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14045:9:63","nodeType":"YulIdentifier","src":"14045:9:63"},{"kind":"number","nativeSrc":"14056:2:63","nodeType":"YulLiteral","src":"14056:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14041:3:63","nodeType":"YulIdentifier","src":"14041:3:63"},"nativeSrc":"14041:18:63","nodeType":"YulFunctionCall","src":"14041:18:63"},{"arguments":[{"name":"value1","nativeSrc":"14065:6:63","nodeType":"YulIdentifier","src":"14065:6:63"},{"kind":"number","nativeSrc":"14073:42:63","nodeType":"YulLiteral","src":"14073:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"14061:3:63","nodeType":"YulIdentifier","src":"14061:3:63"},"nativeSrc":"14061:55:63","nodeType":"YulFunctionCall","src":"14061:55:63"}],"functionName":{"name":"mstore","nativeSrc":"14034:6:63","nodeType":"YulIdentifier","src":"14034:6:63"},"nativeSrc":"14034:83:63","nodeType":"YulFunctionCall","src":"14034:83:63"},"nativeSrc":"14034:83:63","nodeType":"YulExpressionStatement","src":"14034:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14137:9:63","nodeType":"YulIdentifier","src":"14137:9:63"},{"kind":"number","nativeSrc":"14148:2:63","nodeType":"YulLiteral","src":"14148:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14133:3:63","nodeType":"YulIdentifier","src":"14133:3:63"},"nativeSrc":"14133:18:63","nodeType":"YulFunctionCall","src":"14133:18:63"},{"arguments":[{"name":"value2","nativeSrc":"14157:6:63","nodeType":"YulIdentifier","src":"14157:6:63"},{"kind":"number","nativeSrc":"14165:42:63","nodeType":"YulLiteral","src":"14165:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"14153:3:63","nodeType":"YulIdentifier","src":"14153:3:63"},"nativeSrc":"14153:55:63","nodeType":"YulFunctionCall","src":"14153:55:63"}],"functionName":{"name":"mstore","nativeSrc":"14126:6:63","nodeType":"YulIdentifier","src":"14126:6:63"},"nativeSrc":"14126:83:63","nodeType":"YulFunctionCall","src":"14126:83:63"},"nativeSrc":"14126:83:63","nodeType":"YulExpressionStatement","src":"14126:83:63"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"13749:466:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13859:9:63","nodeType":"YulTypedName","src":"13859:9:63","type":""},{"name":"value2","nativeSrc":"13870:6:63","nodeType":"YulTypedName","src":"13870:6:63","type":""},{"name":"value1","nativeSrc":"13878:6:63","nodeType":"YulTypedName","src":"13878:6:63","type":""},{"name":"value0","nativeSrc":"13886:6:63","nodeType":"YulTypedName","src":"13886:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13897:4:63","nodeType":"YulTypedName","src":"13897:4:63","type":""}],"src":"13749:466:63"},{"body":{"nativeSrc":"14377:211:63","nodeType":"YulBlock","src":"14377:211:63","statements":[{"nativeSrc":"14387:26:63","nodeType":"YulAssignment","src":"14387:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"14399:9:63","nodeType":"YulIdentifier","src":"14399:9:63"},{"kind":"number","nativeSrc":"14410:2:63","nodeType":"YulLiteral","src":"14410:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14395:3:63","nodeType":"YulIdentifier","src":"14395:3:63"},"nativeSrc":"14395:18:63","nodeType":"YulFunctionCall","src":"14395:18:63"},"variableNames":[{"name":"tail","nativeSrc":"14387:4:63","nodeType":"YulIdentifier","src":"14387:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14429:9:63","nodeType":"YulIdentifier","src":"14429:9:63"},{"arguments":[{"name":"value0","nativeSrc":"14444:6:63","nodeType":"YulIdentifier","src":"14444:6:63"},{"kind":"number","nativeSrc":"14452:42:63","nodeType":"YulLiteral","src":"14452:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"14440:3:63","nodeType":"YulIdentifier","src":"14440:3:63"},"nativeSrc":"14440:55:63","nodeType":"YulFunctionCall","src":"14440:55:63"}],"functionName":{"name":"mstore","nativeSrc":"14422:6:63","nodeType":"YulIdentifier","src":"14422:6:63"},"nativeSrc":"14422:74:63","nodeType":"YulFunctionCall","src":"14422:74:63"},"nativeSrc":"14422:74:63","nodeType":"YulExpressionStatement","src":"14422:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14516:9:63","nodeType":"YulIdentifier","src":"14516:9:63"},{"kind":"number","nativeSrc":"14527:2:63","nodeType":"YulLiteral","src":"14527:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14512:3:63","nodeType":"YulIdentifier","src":"14512:3:63"},"nativeSrc":"14512:18:63","nodeType":"YulFunctionCall","src":"14512:18:63"},{"name":"value1","nativeSrc":"14532:6:63","nodeType":"YulIdentifier","src":"14532:6:63"}],"functionName":{"name":"mstore","nativeSrc":"14505:6:63","nodeType":"YulIdentifier","src":"14505:6:63"},"nativeSrc":"14505:34:63","nodeType":"YulFunctionCall","src":"14505:34:63"},"nativeSrc":"14505:34:63","nodeType":"YulExpressionStatement","src":"14505:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14559:9:63","nodeType":"YulIdentifier","src":"14559:9:63"},{"kind":"number","nativeSrc":"14570:2:63","nodeType":"YulLiteral","src":"14570:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14555:3:63","nodeType":"YulIdentifier","src":"14555:3:63"},"nativeSrc":"14555:18:63","nodeType":"YulFunctionCall","src":"14555:18:63"},{"name":"value2","nativeSrc":"14575:6:63","nodeType":"YulIdentifier","src":"14575:6:63"}],"functionName":{"name":"mstore","nativeSrc":"14548:6:63","nodeType":"YulIdentifier","src":"14548:6:63"},"nativeSrc":"14548:34:63","nodeType":"YulFunctionCall","src":"14548:34:63"},"nativeSrc":"14548:34:63","nodeType":"YulExpressionStatement","src":"14548:34:63"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"14220:368:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14330:9:63","nodeType":"YulTypedName","src":"14330:9:63","type":""},{"name":"value2","nativeSrc":"14341:6:63","nodeType":"YulTypedName","src":"14341:6:63","type":""},{"name":"value1","nativeSrc":"14349:6:63","nodeType":"YulTypedName","src":"14349:6:63","type":""},{"name":"value0","nativeSrc":"14357:6:63","nodeType":"YulTypedName","src":"14357:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14368:4:63","nodeType":"YulTypedName","src":"14368:4:63","type":""}],"src":"14220:368:63"},{"body":{"nativeSrc":"14784:14:63","nodeType":"YulBlock","src":"14784:14:63","statements":[{"nativeSrc":"14786:10:63","nodeType":"YulAssignment","src":"14786:10:63","value":{"name":"pos","nativeSrc":"14793:3:63","nodeType":"YulIdentifier","src":"14793:3:63"},"variableNames":[{"name":"end","nativeSrc":"14786:3:63","nodeType":"YulIdentifier","src":"14786:3:63"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"14593:205:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14768:3:63","nodeType":"YulTypedName","src":"14768:3:63","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14776:3:63","nodeType":"YulTypedName","src":"14776:3:63","type":""}],"src":"14593:205:63"},{"body":{"nativeSrc":"14932:168:63","nodeType":"YulBlock","src":"14932:168:63","statements":[{"nativeSrc":"14942:26:63","nodeType":"YulAssignment","src":"14942:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"14954:9:63","nodeType":"YulIdentifier","src":"14954:9:63"},{"kind":"number","nativeSrc":"14965:2:63","nodeType":"YulLiteral","src":"14965:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14950:3:63","nodeType":"YulIdentifier","src":"14950:3:63"},"nativeSrc":"14950:18:63","nodeType":"YulFunctionCall","src":"14950:18:63"},"variableNames":[{"name":"tail","nativeSrc":"14942:4:63","nodeType":"YulIdentifier","src":"14942:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14984:9:63","nodeType":"YulIdentifier","src":"14984:9:63"},{"arguments":[{"name":"value0","nativeSrc":"14999:6:63","nodeType":"YulIdentifier","src":"14999:6:63"},{"kind":"number","nativeSrc":"15007:42:63","nodeType":"YulLiteral","src":"15007:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"14995:3:63","nodeType":"YulIdentifier","src":"14995:3:63"},"nativeSrc":"14995:55:63","nodeType":"YulFunctionCall","src":"14995:55:63"}],"functionName":{"name":"mstore","nativeSrc":"14977:6:63","nodeType":"YulIdentifier","src":"14977:6:63"},"nativeSrc":"14977:74:63","nodeType":"YulFunctionCall","src":"14977:74:63"},"nativeSrc":"14977:74:63","nodeType":"YulExpressionStatement","src":"14977:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15071:9:63","nodeType":"YulIdentifier","src":"15071:9:63"},{"kind":"number","nativeSrc":"15082:2:63","nodeType":"YulLiteral","src":"15082:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15067:3:63","nodeType":"YulIdentifier","src":"15067:3:63"},"nativeSrc":"15067:18:63","nodeType":"YulFunctionCall","src":"15067:18:63"},{"name":"value1","nativeSrc":"15087:6:63","nodeType":"YulIdentifier","src":"15087:6:63"}],"functionName":{"name":"mstore","nativeSrc":"15060:6:63","nodeType":"YulIdentifier","src":"15060:6:63"},"nativeSrc":"15060:34:63","nodeType":"YulFunctionCall","src":"15060:34:63"},"nativeSrc":"15060:34:63","nodeType":"YulExpressionStatement","src":"15060:34:63"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"14803:297:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14893:9:63","nodeType":"YulTypedName","src":"14893:9:63","type":""},{"name":"value1","nativeSrc":"14904:6:63","nodeType":"YulTypedName","src":"14904:6:63","type":""},{"name":"value0","nativeSrc":"14912:6:63","nodeType":"YulTypedName","src":"14912:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14923:4:63","nodeType":"YulTypedName","src":"14923:4:63","type":""}],"src":"14803:297:63"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$3386__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1506__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IPoints_$5929__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let length := mload(value0)\n        mstore(add(headStart, 64), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(add(headStart, i), 96), mload(add(add(value0, i), 0x20)))\n        }\n        mstore(add(add(headStart, length), 96), 0)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 96)\n        mstore(add(headStart, 0x20), value1)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$3386(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$3198(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1360":[{"length":32,"start":875},{"length":32,"start":1166},{"length":32,"start":7500},{"length":32,"start":7642}],"2762":[{"length":32,"start":658},{"length":32,"start":2504},{"length":32,"start":2874},{"length":32,"start":3121},{"length":32,"start":7816}],"6084":[{"length":32,"start":1245},{"length":32,"start":2593}],"6237":[{"length":32,"start":969},{"length":32,"start":8037}],"6239":[{"length":32,"start":826},{"length":32,"start":7996}]},"linkReferences":{},"object":"6080604052600436106102185760003560e01c80637b0a47ee1161011d5780639d696e36116100b0578063d547741f1161007f578063efa90b5411610064578063efa90b54146106de578063f2fde38b146106f4578063f7ba94bd1461071457600080fd5b8063d547741f146106a2578063ef4cadc5146106c257600080fd5b80639d696e3614610629578063c3666c361461063f578063c5c8f7701461065f578063d0b06f5d1461068c57600080fd5b80638bb9c5bf116100ec5780638bb9c5bf146105a75780638da5cb5b146105c757806391d14854146105dc57806398807d84146105fc57600080fd5b80637b0a47ee1461053257806380faa57d14610548578063817b1cd21461055d5780638580cf761461057357600080fd5b80632d1e0c02116101b05780634fc358591161017f57806362ba90961161016457806362ba9096146104cb57806373c8a958146104ff57806375c93bb91461051f57600080fd5b80634fc3585914610420578063572b6c051461047157600080fd5b80632d1e0c02146103a45780632d4c2f93146103b75780632f2ff15d146103eb5780634e71d92d1461040b57600080fd5b80630968f264116101ec5780630968f264146103065780632196e445146103285780632b4c9f161461035c5780632c9d0b801461038f57600080fd5b80628cc2621461021d57806301ffc9a7146102505780630479d644146102805780630700037d146102d9575b600080fd5b34801561022957600080fd5b5061023d610238366004612309565b610734565b6040519081526020015b60405180910390f35b34801561025c57600080fd5b5061027061026b366004612326565b6107cb565b6040519015158152602001610247565b34801561028c57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610247565b3480156102e557600080fd5b5061023d6102f4366004612309565b60076020526000908152604090205481565b34801561031257600080fd5b506103266103213660046123b1565b6107df565b005b34801561033457600080fd5b5061023d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561036857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102b4565b34801561039b57600080fd5b5061023d61082a565b6103266103b23660046123b1565b610892565b3480156103c357600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f757600080fd5b506103266104063660046123f3565b6108c4565b34801561041757600080fd5b506103266108fd565b34801561042c57600080fd5b5061044061043b366004612423565b6109ae565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610247565b34801561047d57600080fd5b5061027061048c366004612309565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b3480156104d757600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561050b57600080fd5b5061032661051a3660046124db565b610b2c565b61032661052d366004612581565b610d05565b34801561053e57600080fd5b5061023d60035481565b34801561055457600080fd5b5061023d610fda565b34801561056957600080fd5b5061023d60015481565b34801561057f57600080fd5b5061023d7f726577617264657200000000000000000000000000000000000000000000000081565b3480156105b357600080fd5b506103266105c23660046125a3565b610ff4565b3480156105d357600080fd5b506102b4611012565b3480156105e857600080fd5b506102706105f73660046123f3565b61103e565b34801561060857600080fd5b5061023d610617366004612309565b60066020526000908152604090205481565b34801561063557600080fd5b5061023d60045481565b34801561064b57600080fd5b5061032661065a3660046124db565b611089565b34801561066b57600080fd5b5061023d61067a366004612309565b60086020526000908152604090205481565b34801561069857600080fd5b5061023d60025481565b3480156106ae57600080fd5b506103266106bd3660046123f3565b6110b2565b3480156106ce57600080fd5b5061023d670de0b6b3a764000081565b3480156106ea57600080fd5b5061023d60055481565b34801561070057600080fd5b5061032661070f366004612309565b6110e0565b34801561072057600080fd5b5061032661072f3660046125bc565b6110fb565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546008909252822054670de0b6b3a76400009061077761082a565b610781919061265c565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020546107b1919061266f565b6107bb91906126b5565b6107c591906126c9565b92915050565b60006107c5826107d9611118565b90611146565b6108266107ea611220565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061122a92505050565b5050565b60015460009080820361083f57505060045490565b80670de0b6b3a7640000600354600254610857610fda565b610861919061265c565b61086b919061266f565b610875919061266f565b61087f91906126b5565b60045461088c91906126c9565b91505090565b6040517f7a404b1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108ce611220565b90506108e2816108dc611379565b906113a7565b6108f88383836108f0611412565b929190611440565b505050565b6000610907611220565b905061091281611516565b600061091d82610734565b905080156108265773ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812081905561095783836115a4565b90508273ffffffffffffffffffffffffffffffffffffffff167f4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd582846040516109a19291906126dc565b60405180910390a2505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a1f576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16148690610ac4576040517fd0411ac500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015b60405180910390fd5b506000610ad383850185612309565b9050610b008186604051602001610aec91815260200190565b6040516020818303038152906040526115b0565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b6000805b84811015610be0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868683818110610b8157610b8161274f565b9050602002016020810190610b969190612309565b73ffffffffffffffffffffffffffffffffffffffff1603610bd857838382818110610bc357610bc361274f565b9050602002013582610bd591906126c9565b91505b600101610b30565b508015610cee576001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c919061277e565b610ca6919061265c565b905080821115610cec576040517f15c38d3e0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610abb565b505b610cfc87878787878761169c565b50505050505050565b6000610d0f611220565b9050610d457f726577617264657200000000000000000000000000000000000000000000000082610d3e611412565b91906116b5565b82600003610d7f576040517f3853986500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600003610db9576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dc36000611516565b60055460009081610dd485426126c9565b9050814210610e4c576000610de986886126b5565b9050868682610e2d576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610abb565b50506003819055610e3e8688612797565b60058390559350610f759050565b818111610edb57610e5d428361265c565b94506000610e6b86886126b5565b9050868682610eaf576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610abb565b50508060036000828254610ec391906126c9565b90915550610ed390508688612797565b935050610f75565b610ee585876126b5565b86908690610f28576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610abb565b5060009050610f37428461265c565b600354610f44919061266f565b90506000610f5288836126c9565b9050610f5e87826126b5565b600355610f6b8782612797565b6005849055945050505b42600255604080518781526020810187905290810184905273ffffffffffffffffffffffffffffffffffffffff8516907f0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf89080839060600160405180910390a2505050505050565b600554600090428111610fed578061088c565b4291505090565b61100f610fff611220565b82611008611412565b919061173b565b50565b600061103961101f611379565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000611082838361104d611412565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b61109c611094611220565b6108dc611379565b6110aa8686868686866117df565b505050505050565b60006110bc611220565b90506110ca816108dc611379565b6108f88383836110d8611412565b929190611a7f565b61100f6110eb611220565b826110f4611379565b9190611b49565b611106611094611220565b61111284848484611c5d565b50505050565b6000806107c560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61265c565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611196575060006107c5565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111e7575060016107c5565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000611039611d09565b61123382611516565b600061123f8383611e56565b90508060000361127b576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205483818380821015611304576040517f2b6a775800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091526044820152606401610abb565b50505073ffffffffffffffffffffffffffffffffffffffff84166000818152600660205260409081902080548590039055838303600155517faae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e9061136b90869086906126dc565b60405180910390a250505050565b6000806107c560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61265c565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610826576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610abb565b6000806107c560017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b2361265c565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166111125760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b61151e61082a565b60045560055442101580611533575060015415155b1561154457611540610fda565b6002555b73ffffffffffffffffffffffffffffffffffffffff81161561100f5761156981610734565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083209390935560045460089091529190205550565b60606110828383611eaf565b6115b982611516565b60006115c58383611fc7565b905080600003611601576040517f040ef8ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600082825461161391906126c9565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120805483929061164d9084906126c9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167ff4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e83836040516109a19291906126dc565b6116a7611094611220565b6110aa868686868686611fdd565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108f8576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610abb565b6117468382846116b5565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b8483811415806117ef5750808214155b15611826576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015611a755760008686838181106118455761184561274f565b905060200201602081019061185a9190612309565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa1580156118e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190b91906127ab565b611959576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610abb565b86868381811061196b5761196b61274f565b90506020020160208101906119809190612309565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b868181106119ae576119ae61274f565b90506020020160208101906119c39190612309565b8888878181106119d5576119d561274f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015611a5157600080fd5b505af1158015611a65573d6000803e3d6000fd5b5050505050806001019050611829565b5050505050505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156111125760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611508565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611bb6576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610abb565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111125783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b82818114611c97576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156110aa57611d01848483818110611cb757611cb761274f565b90506020020135878784818110611cd057611cd061274f565b9050602002016020810190611ce59190612309565b73ffffffffffffffffffffffffffffffffffffffff16906120be565b600101611c9a565b600033321480611d195750601836105b15611d2357503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611e4557506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4591906127ab565b15611e4f57919050565b3391505090565b600081806020019051810190611e6c919061277e565b90506107c573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168483612174565b606081604051602001611ec491815260200190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290527f26b3293f00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8581166004840152602483018590527f000000000000000000000000000000000000000000000000000000000000000060448401529092507f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b158015611fa957600080fd5b505af1158015611fbd573d6000803e3d6000fd5b5050505092915050565b600081806020019051810190611082919061277e565b848381141580611fed5750808214155b15612024576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015611a75576120b68888838181106120445761204461274f565b90506020020160208101906120599190612309565b85858481811061206b5761206b61274f565b905060200201358888858181106120845761208461274f565b90506020020160208101906120999190612309565b73ffffffffffffffffffffffffffffffffffffffff169190612174565b600101612027565b80471015612101576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610abb565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d806000811461215c576040519150601f19603f3d011682016040523d82523d6000602084013e612161565b606091505b5091509150816111125761111281612201565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526108f8908490612243565b8051156122115780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080602060008451602086016000885af180612266576040513d6000823e3d81fd5b50506000513d9150811561227e578060011415612298565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15611112576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610abb565b73ffffffffffffffffffffffffffffffffffffffff8116811461100f57600080fd5b60006020828403121561231b57600080fd5b8135611082816122e7565b60006020828403121561233857600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461108257600080fd5b60008083601f84011261237a57600080fd5b50813567ffffffffffffffff81111561239257600080fd5b6020830191508360208285010111156123aa57600080fd5b9250929050565b600080602083850312156123c457600080fd5b823567ffffffffffffffff8111156123db57600080fd5b6123e785828601612368565b90969095509350505050565b6000806040838503121561240657600080fd5b823591506020830135612418816122e7565b809150509250929050565b60008060008060006080868803121561243b57600080fd5b8535612446816122e7565b94506020860135612456816122e7565b935060408601359250606086013567ffffffffffffffff81111561247957600080fd5b61248588828901612368565b969995985093965092949392505050565b60008083601f8401126124a857600080fd5b50813567ffffffffffffffff8111156124c057600080fd5b6020830191508360208260051b85010111156123aa57600080fd5b600080600080600080606087890312156124f457600080fd5b863567ffffffffffffffff81111561250b57600080fd5b61251789828a01612496565b909750955050602087013567ffffffffffffffff81111561253757600080fd5b61254389828a01612496565b909550935050604087013567ffffffffffffffff81111561256357600080fd5b61256f89828a01612496565b979a9699509497509295939492505050565b6000806040838503121561259457600080fd5b50508035926020909101359150565b6000602082840312156125b557600080fd5b5035919050565b600080600080604085870312156125d257600080fd5b843567ffffffffffffffff8111156125e957600080fd5b6125f587828801612496565b909550935050602085013567ffffffffffffffff81111561261557600080fd5b61262187828801612496565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156107c5576107c561262d565b80820281158282048414176107c5576107c561262d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826126c4576126c4612686565b500490565b808201808211156107c5576107c561262d565b604081526000835180604084015260005b8181101561270a57602081870181015160608684010152016126ed565b5060006060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561279057600080fd5b5051919050565b6000826127a6576127a6612686565b500690565b6000602082840312156127bd57600080fd5b8151801515811461108257600080fdfea2646970667358221220c5c6510a20b98179a7fa7e80031dc655b9f838d7f63d4be7b7dca003ccfb320b64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x218 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0x11D JUMPI DUP1 PUSH4 0x9D696E36 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xEFA90B54 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x6DE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD547741F EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x629 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x5A7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5DC JUMPI DUP1 PUSH4 0x98807D84 EQ PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x4FC35859 GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x62BA9096 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x62BA9096 EQ PUSH2 0x4CB JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x968F264 GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x2D9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x2326 JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x23B1 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x2B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x82A JUMP JUMPDEST PUSH2 0x326 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x23B1 JUMP JUMPDEST PUSH2 0x892 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0x8C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x8FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x440 PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x2423 JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x51A CALLDATASIZE PUSH1 0x4 PUSH2 0x24DB JUMP JUMPDEST PUSH2 0xB2C JUMP JUMPDEST PUSH2 0x326 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0xD05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0xFDA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x25A3 JUMP JUMPDEST PUSH2 0xFF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x1012 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x5F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0x103E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x617 CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x65A CALLDATASIZE PUSH1 0x4 PUSH2 0x24DB JUMP JUMPDEST PUSH2 0x1089 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x67A CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0x10B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x700 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x70F CALLDATASIZE PUSH1 0x4 PUSH2 0x2309 JUMP JUMPDEST PUSH2 0x10E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x25BC JUMP JUMPDEST PUSH2 0x10FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x777 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x265C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x7BB SWAP2 SWAP1 PUSH2 0x26B5 JUMP JUMPDEST PUSH2 0x7C5 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C5 DUP3 PUSH2 0x7D9 PUSH2 0x1118 JUMP JUMPDEST SWAP1 PUSH2 0x1146 JUMP JUMPDEST PUSH2 0x826 PUSH2 0x7EA PUSH2 0x1220 JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x122A SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x83F JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x857 PUSH2 0xFDA JUMP JUMPDEST PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x265C JUMP JUMPDEST PUSH2 0x86B SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x875 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x87F SWAP2 SWAP1 PUSH2 0x26B5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7A404B1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8CE PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0x8E2 DUP2 PUSH2 0x8DC PUSH2 0x1379 JUMP JUMPDEST SWAP1 PUSH2 0x13A7 JUMP JUMPDEST PUSH2 0x8F8 DUP4 DUP4 DUP4 PUSH2 0x8F0 PUSH2 0x1412 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1440 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x907 PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0x912 DUP2 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91D DUP3 PUSH2 0x734 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x826 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x957 DUP4 DUP4 PUSH2 0x15A4 JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9A1 SWAP3 SWAP2 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xA1F JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP7 SWAP1 PUSH2 0xAC4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0411AC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0xAD3 DUP4 DUP6 ADD DUP6 PUSH2 0x2309 JUMP JUMPDEST SWAP1 POP PUSH2 0xB00 DUP2 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAEC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x15B0 JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBE0 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0xB81 JUMPI PUSH2 0xB81 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB96 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD8 JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0xBC3 JUMPI PUSH2 0xBC3 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xBD5 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB30 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xCEE JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC78 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC9C SWAP2 SWAP1 PUSH2 0x277E JUMP JUMPDEST PUSH2 0xCA6 SWAP2 SWAP1 PUSH2 0x265C JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xCEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x15C38D3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP JUMPDEST PUSH2 0xCFC DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x169C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0F PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0xD45 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xD3E PUSH2 0x1412 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16B5 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xD7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xDB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDC3 PUSH1 0x0 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xDD4 DUP6 TIMESTAMP PUSH2 0x26C9 JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xE4C JUMPI PUSH1 0x0 PUSH2 0xDE9 DUP7 DUP9 PUSH2 0x26B5 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xE2D JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xE3E DUP7 DUP9 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xF75 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xEDB JUMPI PUSH2 0xE5D TIMESTAMP DUP4 PUSH2 0x265C JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xE6B DUP7 DUP9 PUSH2 0x26B5 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xEAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEC3 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xED3 SWAP1 POP DUP7 DUP9 PUSH2 0x2797 JUMP JUMPDEST SWAP4 POP POP PUSH2 0xF75 JUMP JUMPDEST PUSH2 0xEE5 DUP6 DUP8 PUSH2 0x26B5 JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xF28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xF37 TIMESTAMP DUP5 PUSH2 0x265C JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xF44 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF52 DUP9 DUP4 PUSH2 0x26C9 JUMP JUMPDEST SWAP1 POP PUSH2 0xF5E DUP8 DUP3 PUSH2 0x26B5 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xF6B DUP8 DUP3 PUSH2 0x2797 JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xFED JUMPI DUP1 PUSH2 0x88C JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x100F PUSH2 0xFFF PUSH2 0x1220 JUMP JUMPDEST DUP3 PUSH2 0x1008 PUSH2 0x1412 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x173B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1039 PUSH2 0x101F PUSH2 0x1379 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1082 DUP4 DUP4 PUSH2 0x104D PUSH2 0x1412 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x109C PUSH2 0x1094 PUSH2 0x1220 JUMP JUMPDEST PUSH2 0x8DC PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x10AA DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x17DF JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BC PUSH2 0x1220 JUMP JUMPDEST SWAP1 POP PUSH2 0x10CA DUP2 PUSH2 0x8DC PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x8F8 DUP4 DUP4 DUP4 PUSH2 0x10D8 PUSH2 0x1412 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1A7F JUMP JUMPDEST PUSH2 0x100F PUSH2 0x10EB PUSH2 0x1220 JUMP JUMPDEST DUP3 PUSH2 0x10F4 PUSH2 0x1379 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x1106 PUSH2 0x1094 PUSH2 0x1220 JUMP JUMPDEST PUSH2 0x1112 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C5D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x265C JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1196 JUMPI POP PUSH1 0x0 PUSH2 0x7C5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x11E7 JUMPI POP PUSH1 0x1 PUSH2 0x7C5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1039 PUSH2 0x1D09 JUMP JUMPDEST PUSH2 0x1233 DUP3 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x123F DUP4 DUP4 PUSH2 0x1E56 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x127B JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 DUP4 DUP1 DUP3 LT ISZERO PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B6A775800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xABB JUMP JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE DUP4 DUP4 SUB PUSH1 0x1 SSTORE MLOAD PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E SWAP1 PUSH2 0x136B SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x265C JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x265C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1112 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x151E PUSH2 0x82A JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x1533 JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1544 JUMPI PUSH2 0x1540 PUSH2 0xFDA JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x100F JUMPI PUSH2 0x1569 DUP2 PUSH2 0x734 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1082 DUP4 DUP4 PUSH2 0x1EAF JUMP JUMPDEST PUSH2 0x15B9 DUP3 PUSH2 0x1516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C5 DUP4 DUP4 PUSH2 0x1FC7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x1601 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1613 SWAP2 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x164D SWAP1 DUP5 SWAP1 PUSH2 0x26C9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x9A1 SWAP3 SWAP2 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH2 0x16A7 PUSH2 0x1094 PUSH2 0x1220 JUMP JUMPDEST PUSH2 0x10AA DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST PUSH2 0x1746 DUP4 DUP3 DUP5 PUSH2 0x16B5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x17EF JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A75 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x1845 JUMPI PUSH2 0x1845 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x185A SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x190B SWAP2 SWAP1 PUSH2 0x27AB JUMP JUMPDEST PUSH2 0x1959 JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x196B JUMPI PUSH2 0x196B PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1980 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x19AE JUMPI PUSH2 0x19AE PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19C3 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x19D5 JUMPI PUSH2 0x19D5 PUSH2 0x274F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1829 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1112 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1508 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1BB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1112 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10AA JUMPI PUSH2 0x1D01 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1CB7 JUMPI PUSH2 0x1CB7 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1CD0 JUMPI PUSH2 0x1CD0 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1CE5 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C9A JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1D19 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1D23 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1E45 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E21 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E45 SWAP2 SWAP1 PUSH2 0x27AB JUMP JUMPDEST ISZERO PUSH2 0x1E4F JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1E6C SWAP2 SWAP1 PUSH2 0x277E JUMP JUMPDEST SWAP1 POP PUSH2 0x7C5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x2174 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1EC4 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FBD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1082 SWAP2 SWAP1 PUSH2 0x277E JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1FED JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2024 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A75 JUMPI PUSH2 0x20B6 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x2044 JUMPI PUSH2 0x2044 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2059 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x206B JUMPI PUSH2 0x206B PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2084 JUMPI PUSH2 0x2084 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2099 SWAP2 SWAP1 PUSH2 0x2309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x2174 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2027 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x2101 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xABB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x215C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2161 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1112 JUMPI PUSH2 0x1112 DUP2 PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x8F8 SWAP1 DUP5 SWAP1 PUSH2 0x2243 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2211 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x2266 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x227E JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2298 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1112 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xABB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x231B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1082 DUP2 PUSH2 0x22E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1082 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x237A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E7 DUP6 DUP3 DUP7 ADD PUSH2 0x2368 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2418 DUP2 PUSH2 0x22E7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2446 DUP2 PUSH2 0x22E7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2456 DUP2 PUSH2 0x22E7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2485 DUP9 DUP3 DUP10 ADD PUSH2 0x2368 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x24A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x24F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x250B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2517 DUP10 DUP3 DUP11 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2543 DUP10 DUP3 DUP11 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x256F DUP10 DUP3 DUP11 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x25D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25F5 DUP8 DUP3 DUP9 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2621 DUP8 DUP3 DUP9 ADD PUSH2 0x2496 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x262D JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x262D JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x26C4 JUMPI PUSH2 0x26C4 PUSH2 0x2686 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x262D JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x270A JUMPI PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD MLOAD PUSH1 0x60 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x26ED JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x27A6 JUMPI PUSH2 0x27A6 PUSH2 0x2686 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1082 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xC6 MLOAD EXP KECCAK256 0xB9 DUP2 PUSH26 0xA7FA7E80031DC655B9F838D7F63D4BE7B7DCA003CCFB320B6473 PUSH16 0x6C634300081C00330000000000000000 ","sourceMap":"645:1385:60:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4968:201:34;;;;;;;;;;-1:-1:-1;4968:201:34;;;;;:::i;:::-;;:::i;:::-;;;571:25:63;;;559:2;544:18;4968:201:34;;;;;;;;542:165:14;;;;;;;;;;-1:-1:-1;542:165:14;;;;;:::i;:::-;;:::i;:::-;;;1109:14:63;;1102:22;1084:41;;1072:2;1057:18;542:165:14;944:187:63;645:37:36;;;;;;;;;;;;;;;;;;1327:42:63;1315:55;;;1297:74;;1285:2;1270:18;645:37:36;1136:241:63;2413:56:34;;;;;;;;;;-1:-1:-1;2413:56:34;;;;;:::i;:::-;;;;;;;;;;;;;;2696:165:36;;;;;;;;;;-1:-1:-1;2696:165:36;;;;;:::i;:::-;;:::i;:::-;;384:44:62;;;;;;;;;;;;;;;728:115:23;;;;;;;;;;-1:-1:-1;817:19:23;728:115;;4329:355:34;;;;;;;;;;;;;:::i;1638:110:60:-;;;;;;:::i;:::-;;:::i;338:40:62:-;;;;;;;;;;;;;;;1116:257:3;;;;;;;;;;-1:-1:-1;1116:257:3;;;;;:::i;:::-;;:::i;9192:341:34:-;;;;;;;;;;;;;:::i;1149:432:60:-;;;;;;;;;;-1:-1:-1;1149:432:60;;;;;:::i;:::-;;:::i;:::-;;;4192:66:63;4180:79;;;4162:98;;4150:2;4135:18;1149:432:60;4018:248:63;878:149:23;;;;;;;;;;-1:-1:-1;878:149:23;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;916:39:61;;;;;;;;;;;;;;;3410:721:36;;;;;;;;;;-1:-1:-1;3410:721:36;;;;;:::i;:::-;;:::i;10496:2004:34:-;;;;;;:::i;:::-;;:::i;2233:25::-;;;;;;;;;;;;;;;;3941:231;;;;;;;;;;;;;:::i;2169:26::-;;;;;;;;;;;;;;;;2061:50;;;;;;;;;;;;;;;1994:124:3;;;;;;;;;;-1:-1:-1;1994:124:3;;;;;:::i;:::-;;:::i;710:120:4:-;;;;;;;;;;;;;:::i;2159:162:3:-;;;;;;;;;;-1:-1:-1;2159:162:3;;;;;:::i;:::-;;:::i;2347:60:34:-;;;;;;;;;;-1:-1:-1;2347:60:34;;;;;:::i;:::-;;;;;;;;;;;;;;2264:40;;;;;;;;;;;;;;;;2389:290:31;;;;;;;;;;-1:-1:-1;2389:290:31;;;;;:::i;:::-;;:::i;2475:70:34:-;;;;;;;;;;-1:-1:-1;2475:70:34;;;;;:::i;:::-;;;;;;;;;;;;;;2201:26;;;;;;;;;;;;;;;;1694:259:3;;;;;;;;;;-1:-1:-1;1694:259:3;;;;;:::i;:::-;;:::i;2117:45:34:-;;;;;;;;;;;;2158:4;2117:45;;2310:30;;;;;;;;;;;;;;;;864:152:4;;;;;;;;;;-1:-1:-1;864:152:4;;;;;:::i;:::-;;:::i;1219:247:31:-;;;;;;;;;;-1:-1:-1;1219:247:31;;;;;:::i;:::-;;:::i;4968:201:34:-;5146:16;;;5022:7;5146:16;;;:7;:16;;;;;;;;;5092:23;:32;;;;;;2158:4;;5068:21;:19;:21::i;:::-;:56;;;;:::i;:::-;5049:15;;;;;;;:6;:15;;;;;;:76;;;;:::i;:::-;5048:95;;;;:::i;:::-;:114;;;;:::i;:::-;5041:121;4968:201;-1:-1:-1;;4968:201:34:o;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;2696:165:36:-;2817:37;2827:12;:10;:12::i;:::-;2841;;2817:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2817:9:36;;-1:-1:-1;;;2817:37:36:i;:::-;2696:165;;:::o;4329:355:34:-;4429:11;;4381:7;;4454:23;;;4450:86;;-1:-1:-1;;4500:25:34;;;4329:355::o;4450:86::-;4658:18;2158:4;4627:10;;4612:11;;4583:26;:24;:26::i;:::-;:40;;;;:::i;:::-;4582:55;;;;:::i;:::-;:72;;;;:::i;:::-;4581:95;;;;:::i;:::-;4552:25;;:125;;;;:::i;:::-;4545:132;;;4329:355;:::o;1638:110:60:-;1718:23;;;;;;;;;;;;;;1116:257:3;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;9192:341:34:-;9234:14;9251:12;:10;:12::i;:::-;9234:29;;9273:21;9287:6;9273:13;:21::i;:::-;9304:14;9321;9328:6;9321;:14::i;:::-;9304:31;-1:-1:-1;9349:11:34;;9345:182;;9376:15;;;9394:1;9376:15;;;:7;:15;;;;;:19;;;9434:29;9384:6;9456;9434:13;:29::i;:::-;9409:54;;9490:6;9482:34;;;9498:9;9509:6;9482:34;;;;;;;:::i;:::-;;;;;;;;9362:165;9224:309;;9192:341::o;1149:432:60:-;1272:6;1298:10;:36;1320:13;1298:36;;1290:61;;;;;;;;;;;;;;;;;1381:14;1369:26;;:8;:26;;;1421:8;1361:70;;;;;;;;1327:42:63;1315:55;;;1361:70:60;;;1297:74:63;1270:18;;1361:70:60;;;;;;;;;-1:-1:-1;1441:14:60;1458:27;;;;1469:4;1458:27;:::i;:::-;1441:44;;1495:33;1502:6;1521:5;1510:17;;;;;;571:25:63;;559:2;544:18;;425:177;1510:17:60;;;;;;;;;;;;;1495:6;:33::i;:::-;-1:-1:-1;1545:29:60;;1149:432;-1:-1:-1;;;;;;1149:432:60:o;3410:721:36:-;3550:34;3599:9;3594:169;3610:17;;;3594:169;;;3665:13;3652:26;;:6;;3659:1;3652:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:26;;;3648:105;;3728:7;;3736:1;3728:10;;;;;;;:::i;:::-;;;;;;;3698:40;;;;;:::i;:::-;;;3648:105;3629:3;;3594:169;;;-1:-1:-1;3776:31:36;;3772:297;;3886:11;;3845:38;;;;;3877:4;3845:38;;;1297:74:63;3823:19:36;;3886:11;3845:23;:13;:23;;;;1270:18:63;;3845:38:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:52;;;;:::i;:::-;3823:74;;3944:11;3915:26;:40;3911:148;;;3982:62;;;;;;;;11160:25:63;;;11201:18;;;11194:34;;;11133:18;;3982:62:36;10986:248:63;3911:148:36;3809:260;3772:297;4078:46;4098:8;;4108:6;;4116:7;;4078:19;:46::i;:::-;3540:591;3410:721;;;;;;:::o;10496:2004:34:-;10582:16;10601:12;:10;:12::i;:::-;10582:31;;10623:69;10668:13;10683:8;10623:29;:27;:29::i;:::-;:44;:69;:44;:69::i;:::-;10711:6;10721:1;10711:11;10703:43;;;;;;;;;;;;;;;;;10764:8;10776:1;10764:13;10756:41;;;;;;;;;;;;;;;;;10808:25;10830:1;10808:13;:25::i;:::-;10899:15;;10844:12;;;10952:26;10970:8;10952:15;:26;:::i;:::-;10924:54;;11012:22;10993:15;:41;10989:1353;;11089:21;11113:17;11122:8;11113:6;:17;:::i;:::-;11089:41;-1:-1:-1;11198:6:34;11206:8;11152:18;11144:72;;;;;;;;;;11160:25:63;;;;11201:18;;;11194:34;11133:18;;11144:72:34;10986:248:63;11144:72:34;-1:-1:-1;;11230:10:34;:26;;;11277:17;11286:8;11277:6;:17;:::i;:::-;11308:15;:35;;;11270:24;-1:-1:-1;10989:1353:34;;-1:-1:-1;10989:1353:34;;11399:22;11378:17;:43;11374:958;;11521:40;11546:15;11521:22;:40;:::i;:::-;11510:51;-1:-1:-1;11579:28:34;11610:17;11510:51;11610:6;:17;:::i;:::-;11579:48;-1:-1:-1;11706:6:34;11714:8;11653:25;11645:79;;;;;;;;;;11160:25:63;;;;11201:18;;;11194:34;11133:18;;11645:79:34;10986:248:63;11645:79:34;;;11756:20;11742:10;;:34;;;;;;;:::i;:::-;;;;-1:-1:-1;11801:17:34;;-1:-1:-1;11810:8:34;11801:6;:17;:::i;:::-;11794:24;;11423:410;11374:958;;;11933:17;11942:8;11933:6;:17;:::i;:::-;11983:6;;11991:8;;11925:76;;;;;;;;;;11160:25:63;;;;11201:18;;;11194:34;11133:18;;11925:76:34;10986:248:63;11925:76:34;-1:-1:-1;12019:23:34;;-1:-1:-1;12059:40:34;12084:15;12059:22;:40;:::i;:::-;12045:10;;:55;;;;:::i;:::-;12019:81;-1:-1:-1;12118:19:34;12140:24;12158:6;12019:81;12140:24;:::i;:::-;12118:46;-1:-1:-1;12195:22:34;12209:8;12118:46;12195:22;:::i;:::-;12182:10;:35;12242:22;12256:8;12242:11;:22;:::i;:::-;12282:15;:35;;;12235:29;-1:-1:-1;;;11374:958:34;12365:15;12351:11;:29;12448:45;;;11558:25:63;;;11614:2;11599:18;;11592:34;;;11642:18;;;11635:34;;;12448:45:34;;;;;;11546:2:63;11531:18;12448:45:34;;;;;;;10572:1928;;;;10496:2004;;:::o;3941:231::-;4050:15;;3998:7;;4082:15;:40;-1:-1:-1;4082:83:34;;4143:22;4082:83;;;4125:15;4075:90;;;3941:231;:::o;1994:124:3:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:13;;;;3550:118;782:41:4;775:48;;710:120;:::o;2159:162:3:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2768:13:12;2800;;;;;;;;;;;:22;;;;;;;;;;;;;;;2679:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;2389:290:31:-;2526:70;2583:12;:10;:12::i;:::-;2526:33;:31;:33::i;:70::-;2606:66;2642:8;;2652:9;;2663:8;;2606:35;:66::i;:::-;2389:290;;;;;;:::o;1694:259:3:-;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:4:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1219:247:31:-;1329:70;1386:12;:10;:12::i;1329:70::-;1409:50;1441:8;;1451:7;;1409:31;:50::i;:::-;1219:247;;;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;13000:175:34:-;13101:7;13127:41;:39;:41::i;8310:618::-;8399:21;8413:6;8399:13;:21::i;:::-;8430:19;8452:38;8469:6;8477:12;8452:16;:38::i;:::-;8430:60;;8508:11;8523:1;8508:16;8500:50;;;;;;;;;;;;;;;;;8584:14;;;8560:21;8584:14;;;:6;:14;;;;;;8591:6;8584:14;8633:11;8616:28;;;;8608:89;;;;;;;11912:42:63;11900:55;;;8608:89:34;;;11882:74:63;11972:18;;;11965:34;;;;12015:18;;;12008:34;11855:18;;8608:89:34;11680:368:63;8608:89:34;-1:-1:-1;;;8768:14:34;;;;;;;:6;:14;;;;;;;:29;;;;;;;8825:27;;;-1:-1:-1;8811:41:34;8877:44;;;;;8895:12;;8786:11;;8877:44;:::i;:::-;;;;;;;;8389:539;;8310:618;;:::o;5060:174:13:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;1327:42:63;1315:55;;4538:25:13;;;1297:74:63;1270:18;;4538:25:13;1136:241:63;4376:174:12;4417:16;;696:67;762:1;704:54;696:67;:::i;1145:251::-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1250:140;;1295:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1320:4;1295:29;;;1343:36;;12255:25:63;;;12296:18;;;12289:83;12408:55;;;12388:18;;;12381:83;;;;1343:36:12;;12243:2:63;12228:18;1343:36:12;;;;;;;;1145:251;;;;:::o;3300:488:34:-;3387:21;:19;:21::i;:::-;3359:25;:49;3441:15;;3422;:34;;;:54;;-1:-1:-1;3460:11:34;;:16;;3422:54;3418:195;;;3576:26;:24;:26::i;:::-;3562:11;:40;3418:195;3626:21;;;;3622:160;;3682:15;3689:7;3682:6;:15::i;:::-;3663:16;;;;;;;:7;:16;;;;;;;;:34;;;;3746:25;;3711:23;:32;;;;;;:60;3300:488;:::o;1906:252:61:-;2056:22;2097:54;2136:6;2144;2097:38;:54::i;6423:360:34:-;6506:21;6520:6;6506:13;:21::i;:::-;6537:19;6559:32;6573:6;6581:9;6559:13;:32::i;:::-;6537:54;;6609:11;6624:1;6609:16;6601:47;;;;;;;;;;;;;;;;;6673:11;6658;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;6694:14:34;;;;;;;:6;:14;;;;;:29;;6712:11;;6694:14;:29;;6712:11;;6694:29;:::i;:::-;;;;;;;;6745:6;6738:38;;;6753:9;6764:11;6738:38;;;;;;;:::i;1786:279:31:-;1917:70;1974:12;:10;:12::i;1917:70::-;1997:61;2032:8;;2042:6;;2050:7;;1997:34;:61::i;3640:170:12:-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;3737:66;;3775:28;;;;;;;;12649:25:63;;;12722:42;12710:55;;12690:18;;;12683:83;12622:18;;3775:28:12;12475:297:63;2282:213:12;2371:30;:1;2388:4;2394:6;2371:16;:30::i;:::-;2435:5;2411:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2455:33;;12255:25:63;;;12296:18;;;12289:83;;;12388:18;;12381:83;;;;2455:33:12;;12243:2:63;12228:18;2455:33:12;;;;;;;2282:213;;;:::o;3679:647:33:-;3827:8;3856:26;;;;;:55;;-1:-1:-1;3886:25:33;;;;3856:55;3852:94;;;3920:26;;;;;;;;;;;;;;3852:94;3961:9;3956:364;3976:6;3972:1;:10;3956:364;;;4003:21;4027:9;;4037:1;4027:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4058:76;;;;;4108:25;4058:76;;;4162:98:63;4003:36:33;;-1:-1:-1;4058:49:33;;;;;;4135:18:63;;4058:76:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4053:173;;4161:50;;;;;1327:42:63;1315:55;;4161:50:33;;;1297:74:63;1270:18;;4161:50:33;1136:241:63;4053:173:33;4239:9;;4249:1;4239:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:29;;;4277:4;4284:8;;4293:1;4284:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4297:8;;4306:1;4297:11;;;;;;;:::i;:::-;4239:70;;;;;;;;;;13559:42:63;13547:55;;;4239:70:33;;;13529:74:63;13639:55;;;;13619:18;;;13612:83;-1:-1:-1;4297:11:33;;;;;;13711:18:63;;;13704:34;13502:18;;4239:70:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3989:331;3984:3;;;;;3956:364;;;;3800:526;3679:647;;;;;;:::o;1774:252:12:-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1880:140;;;1949:5;1924:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1973:36;;12255:25:63;;;12296:18;;;12289:83;12408:55;;;12388:18;;;12381:83;;;;1973:36:12;;12243:2:63;12228:18;1973:36:12;12053:417:63;3054:369:13;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;1327:42:63;1315:55;;3237:24:13;;;1297:74:63;1270:18;;3237:24:13;1136:241:63;3201:60:13;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:13;3142:281;3054:369;;;:::o;1610:316:33:-;1731:8;1760:24;;;1756:63;;1793:26;;;;;;;;;;;;;;1756:63;1834:9;1829:91;1849:6;1845:1;:10;1829:91;;;1876:33;1898:7;;1906:1;1898:10;;;;;;;:::i;:::-;;;;;;;1876:8;;1885:1;1876:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;1857:3;;1829:91;;784:760:24;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:24;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:24;;784:760::o;1043:95::-;462:23:27;466:14;462:23;449:37;445:2;441:46;1372:19:24;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:24;;;;;:39;13969:55:63;;;1396:74:24;;;13951::63;1444:10:24;14041:18:63;;;14034:83;1464:4:24;14133:18:63;;;14126:83;1396:19:24;:39;;;;13924:18:63;;1396:74:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:24:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;2990:248:36:-;3094:19;3150:12;3139:35;;;;;;;;;;;;:::i;:::-;3125:49;-1:-1:-1;3184:47:36;:26;:13;:26;3211:6;3125:49;3184:26;:47::i;602:222:62:-;683:22;740:6;729:18;;;;;;571:25:63;;559:2;544:18;;425:177;729:18:62;;;;;;;;;;;;;;;757:60;;;:23;11900:55:63;;;757:60:62;;;11882:74:63;11972:18;;;11965:34;;;797:19:62;12015:18:63;;;12008:34;729:18:62;;-1:-1:-1;757:15:62;:23;;;;11855:18:63;;757:60:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;602:222;;;;:::o;1754:274:60:-;1845:19;2000:9;1989:32;;;;;;;;;;;;:::i;2609:378:33:-;2751:8;2780:23;;;;;:51;;-1:-1:-1;2807:24:33;;;;2780:51;2776:90;;;2840:26;;;;;;;;;;;;;;2776:90;2881:9;2876:105;2896:6;2892:1;:10;2876:105;;;2923:47;2946:8;;2955:1;2946:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2959:7;;2967:1;2959:10;;;;;;;:::i;:::-;;;;;;;2923:6;;2930:1;2923:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;2904:3;;2876:105;;1290:365:47;1399:6;1375:21;:30;1371:125;;;1428:57;;;;;1455:21;1428:57;;;11160:25:63;11201:18;;;11194:34;;;11133:18;;1428:57:47;10986:248:63;1371:125:47;1507:12;1521:23;1548:9;:14;;1570:6;1548:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1506:75;;;;1596:7;1591:58;;1619:19;1627:10;1619:7;:19::i;1219:160:46:-;1328:43;;;1343:14;14995:55:63;;1328:43:46;;;14977:74:63;15067:18;;;;15060:34;;;1328:43:46;;;;;;;;;;14950:18:63;;;;1328:43:46;;;;;;;;;;;;;;1301:71;;1321:5;;1301:19;:71::i;5559:487:47:-;5690:17;;:21;5686:354;;5887:10;5881:17;5943:15;5930:10;5926:2;5922:19;5915:44;5686:354;6010:19;;;;;;;;;;;;;;7686:720:46;7766:18;7794:19;7932:4;7929:1;7922:4;7916:11;7909:4;7903;7899:15;7896:1;7889:5;7882;7877:60;7989:7;7979:176;;8033:4;8027:11;8078:16;8075:1;8070:3;8055:40;8124:16;8119:3;8112:29;7979:176;-1:-1:-1;;8232:1:46;8226:8;8182:16;;-1:-1:-1;8258:15:46;;:68;;8310:11;8325:1;8310:16;;8258:68;;;8276:26;;;;:31;8258:68;8254:146;;;8349:40;;;;;1327:42:63;1315:55;;8349:40:46;;;1297:74:63;1270:18;;8349:40:46;1136:241:63;14:154;100:42;93:5;89:54;82:5;79:65;69:93;;158:1;155;148:12;173:247;232:6;285:2;273:9;264:7;260:23;256:32;253:52;;;301:1;298;291:12;253:52;340:9;327:23;359:31;384:5;359:31;:::i;607:332::-;665:6;718:2;706:9;697:7;693:23;689:32;686:52;;;734:1;731;724:12;686:52;773:9;760:23;823:66;816:5;812:78;805:5;802:89;792:117;;905:1;902;895:12;1382:347;1433:8;1443:6;1497:3;1490:4;1482:6;1478:17;1474:27;1464:55;;1515:1;1512;1505:12;1464:55;-1:-1:-1;1538:20:63;;1581:18;1570:30;;1567:50;;;1613:1;1610;1603:12;1567:50;1650:4;1642:6;1638:17;1626:29;;1702:3;1695:4;1686:6;1678;1674:19;1670:30;1667:39;1664:59;;;1719:1;1716;1709:12;1664:59;1382:347;;;;;:::o;1734:409::-;1804:6;1812;1865:2;1853:9;1844:7;1840:23;1836:32;1833:52;;;1881:1;1878;1871:12;1833:52;1921:9;1908:23;1954:18;1946:6;1943:30;1940:50;;;1986:1;1983;1976:12;1940:50;2025:58;2075:7;2066:6;2055:9;2051:22;2025:58;:::i;:::-;2102:8;;1999:84;;-1:-1:-1;1734:409:63;-1:-1:-1;;;;1734:409:63:o;2835:367::-;2903:6;2911;2964:2;2952:9;2943:7;2939:23;2935:32;2932:52;;;2980:1;2977;2970:12;2932:52;3025:23;;;-1:-1:-1;3124:2:63;3109:18;;3096:32;3137:33;3096:32;3137:33;:::i;:::-;3189:7;3179:17;;;2835:367;;;;;:::o;3207:806::-;3304:6;3312;3320;3328;3336;3389:3;3377:9;3368:7;3364:23;3360:33;3357:53;;;3406:1;3403;3396:12;3357:53;3445:9;3432:23;3464:31;3489:5;3464:31;:::i;:::-;3514:5;-1:-1:-1;3571:2:63;3556:18;;3543:32;3584:33;3543:32;3584:33;:::i;:::-;3636:7;-1:-1:-1;3716:2:63;3701:18;;3688:32;;-1:-1:-1;3797:2:63;3782:18;;3769:32;3824:18;3813:30;;3810:50;;;3856:1;3853;3846:12;3810:50;3895:58;3945:7;3936:6;3925:9;3921:22;3895:58;:::i;:::-;3207:806;;;;-1:-1:-1;3207:806:63;;-1:-1:-1;3972:8:63;;3869:84;3207:806;-1:-1:-1;;;3207:806:63:o;4502:367::-;4565:8;4575:6;4629:3;4622:4;4614:6;4610:17;4606:27;4596:55;;4647:1;4644;4637:12;4596:55;-1:-1:-1;4670:20:63;;4713:18;4702:30;;4699:50;;;4745:1;4742;4735:12;4699:50;4782:4;4774:6;4770:17;4758:29;;4842:3;4835:4;4825:6;4822:1;4818:14;4810:6;4806:27;4802:38;4799:47;4796:67;;;4859:1;4856;4849:12;4874:1114;5047:6;5055;5063;5071;5079;5087;5140:2;5128:9;5119:7;5115:23;5111:32;5108:52;;;5156:1;5153;5146:12;5108:52;5196:9;5183:23;5229:18;5221:6;5218:30;5215:50;;;5261:1;5258;5251:12;5215:50;5300:70;5362:7;5353:6;5342:9;5338:22;5300:70;:::i;:::-;5389:8;;-1:-1:-1;5274:96:63;-1:-1:-1;;5477:2:63;5462:18;;5449:32;5506:18;5493:32;;5490:52;;;5538:1;5535;5528:12;5490:52;5577:72;5641:7;5630:8;5619:9;5615:24;5577:72;:::i;:::-;5668:8;;-1:-1:-1;5551:98:63;-1:-1:-1;;5756:2:63;5741:18;;5728:32;5785:18;5772:32;;5769:52;;;5817:1;5814;5807:12;5769:52;5856:72;5920:7;5909:8;5898:9;5894:24;5856:72;:::i;:::-;4874:1114;;;;-1:-1:-1;4874:1114:63;;-1:-1:-1;4874:1114:63;;5947:8;;4874:1114;-1:-1:-1;;;4874:1114:63:o;5993:346::-;6061:6;6069;6122:2;6110:9;6101:7;6097:23;6093:32;6090:52;;;6138:1;6135;6128:12;6090:52;-1:-1:-1;;6183:23:63;;;6303:2;6288:18;;;6275:32;;-1:-1:-1;5993:346:63:o;6344:226::-;6403:6;6456:2;6444:9;6435:7;6431:23;6427:32;6424:52;;;6472:1;6469;6462:12;6424:52;-1:-1:-1;6517:23:63;;6344:226;-1:-1:-1;6344:226:63:o;7695:776::-;7825:6;7833;7841;7849;7902:2;7890:9;7881:7;7877:23;7873:32;7870:52;;;7918:1;7915;7908:12;7870:52;7958:9;7945:23;7991:18;7983:6;7980:30;7977:50;;;8023:1;8020;8013:12;7977:50;8062:70;8124:7;8115:6;8104:9;8100:22;8062:70;:::i;:::-;8151:8;;-1:-1:-1;8036:96:63;-1:-1:-1;;8239:2:63;8224:18;;8211:32;8268:18;8255:32;;8252:52;;;8300:1;8297;8290:12;8252:52;8339:72;8403:7;8392:8;8381:9;8377:24;8339:72;:::i;:::-;7695:776;;;;-1:-1:-1;8430:8:63;-1:-1:-1;;;;7695:776:63:o;8476:184::-;8528:77;8525:1;8518:88;8625:4;8622:1;8615:15;8649:4;8646:1;8639:15;8665:128;8732:9;;;8753:11;;;8750:37;;;8767:18;;:::i;8798:168::-;8871:9;;;8902;;8919:15;;;8913:22;;8899:37;8889:71;;8940:18;;:::i;8971:184::-;9023:77;9020:1;9013:88;9120:4;9117:1;9110:15;9144:4;9141:1;9134:15;9160:120;9200:1;9226;9216:35;;9231:18;;:::i;:::-;-1:-1:-1;9265:9:63;;9160:120::o;9285:125::-;9350:9;;;9371:10;;;9368:36;;;9384:18;;:::i;9415:661::-;9590:2;9579:9;9572:21;9553:4;9622:6;9616:13;9665:6;9660:2;9649:9;9645:18;9638:34;9690:1;9700:144;9714:6;9711:1;9708:13;9700:144;;;9827:4;9811:14;;;9807:25;;9801:32;9796:2;9777:17;;;9773:26;9766:68;9729:12;9700:144;;;9704:3;9893:1;9888:2;9879:6;9868:9;9864:22;9860:31;9853:42;10022:2;9952:66;9947:2;9939:6;9935:15;9931:88;9920:9;9916:104;9912:113;9904:121;;;10063:6;10056:4;10045:9;10041:20;10034:36;9415:661;;;;;:::o;10341:184::-;10393:77;10390:1;10383:88;10490:4;10487:1;10480:15;10514:4;10511:1;10504:15;10797:184;10867:6;10920:2;10908:9;10899:7;10895:23;10891:32;10888:52;;;10936:1;10933;10926:12;10888:52;-1:-1:-1;10959:16:63;;10797:184;-1:-1:-1;10797:184:63:o;11239:112::-;11271:1;11297;11287:35;;11302:18;;:::i;:::-;-1:-1:-1;11336:9:63;;11239:112::o;13045:277::-;13112:6;13165:2;13153:9;13144:7;13140:23;13136:32;13133:52;;;13181:1;13178;13171:12;13133:52;13213:9;13207:16;13266:5;13259:13;13252:21;13245:5;13242:32;13232:60;;13288:1;13285;13278:12"},"gasEstimates":{"creation":{"codeDepositCost":"2048600","executionCost":"infinite","totalCost":"infinite"},"external":{"CLAIM_CONTRACT()":"infinite","DEPOSIT_REASON_CODE()":"infinite","POINTS_CONTRACT()":"infinite","REWARDER_ROLE()":"296","SCALING_FACTOR()":"273","STAKING_TOKEN()":"infinite","addReward(uint256,uint256)":"infinite","claim()":"infinite","distributionEnd()":"2350","earned(address)":"infinite","forwarderRegistry()":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isTrustedForwarder(address)":"infinite","lastTimeRewardApplicable()":"2413","lastUpdated()":"2395","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","rewardPerStakePoint()":"infinite","rewardPerStakePointPaid(address)":"2579","rewardPerStakePointStored()":"2329","rewardRate()":"2330","rewards(address)":"2603","stake(bytes)":"496","staked(address)":"2601","supportsInterface(bytes4)":"infinite","totalStaked()":"2374","transferOwnership(address)":"infinite","withdraw(bytes)":"infinite"},"internal":{"_computeStake(address,bytes memory)":"infinite"}},"methodIdentifiers":{"CLAIM_CONTRACT()":"62ba9096","DEPOSIT_REASON_CODE()":"2196e445","POINTS_CONTRACT()":"2d4c2f93","REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","STAKING_TOKEN()":"0479d644","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IPoints\",\"name\":\"pointsContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverable\",\"type\":\"uint256\"}],\"name\":\"InvalidRecoveryAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"InvalidTransferOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"name\":\"NotEnoughStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyReceiverInterface\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_REASON_CODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"addReward(uint256,uint256)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\",\"params\":{\"duration\":\"The duration of the rewards distribution.\",\"reward\":\"The amount of rewards to be added.\"}},\"claim()\":{\"details\":\"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\"},\"earned(address)\":{\"params\":{\"account\":\"The address of the account to check.\"},\"returns\":{\"_0\":\"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"The minimum of the current block timestamp and the distribution end.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"rewardPerStakePoint()\":{\"returns\":{\"_0\":\"The sum of the last stored value and the new rewards since the last update\"}},\"stake(bytes)\":{\"details\":\"Reverts with {OnlyReceiverInterface}.\"},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw(bytes)\":{\"details\":\"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\",\"params\":{\"withdrawData\":\"The data to be used for withdrawing, encoded as (uint256 value)\"}}},\"title\":\"ERC20StakingPointsRewardsLimitedLinearPool\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"addReward(uint256,uint256)\":{\"notice\":\"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\"},\"claim()\":{\"notice\":\"Claims the rewards for the sender.\"},\"earned(address)\":{\"notice\":\"Returns the amount of rewards earned by the account.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns the last time rewards are applicable.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"rewardPerStakePoint()\":{\"notice\":\"Returns the current reward per stake point.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw(bytes)\":{\"notice\":\"Withdraws from the pool.\"}},\"notice\":\"This contract is used to stake ERC20 tokens and obtain Points rewards.Staking can only be done via a claim contract and the `stake` function is not available.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol\":\"ERC20StakingPointsRewardsLimitedLinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {TokenRecovery} from \\\"./../../security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ILinearPool} from \\\"./interfaces/ILinearPool.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\n/// @title Linear rewards distribution staking pool.\\n/// @notice Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.\\n/// @notice Stakes, whether fungible or non-fungible, map to an amount of \\\"stake points\\\", then used to compute the user rewards share.\\n/// @notice NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.\\n/// @notice If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.\\n/// @notice NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,\\n/// @notice the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract.\\nabstract contract LinearPool is ILinearPool, AccessControl, ReentrancyGuard, TokenRecovery, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error NotEnoughStake(address staker, uint256 stake, uint256 withdraw);\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    /// @notice Returns the last time rewards are applicable.\\n    /// @return The minimum of the current block timestamp and the distribution end.\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    /// @notice Returns the current reward per stake point.\\n    /// @return The sum of the last stored value and the new rewards since the last update\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    /// @notice Returns the amount of rewards earned by the account.\\n    /// @param account The address of the account to check.\\n    /// @return The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    /// @dev The stakeData is not used in the base implementation, but it is passed to the event for convenience.\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), stakeData);\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param staker The address of the staker.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    function _stake(address staker, bytes memory stakeData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeStake(staker, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[staker] += stakePoints;\\n        emit Staked(staker, stakeData, stakePoints);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    /// @dev The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param staker The address of the staker.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    function _withdraw(address staker, bytes memory withdrawData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeWithdraw(staker, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        uint256 currentStaked = staked[staker];\\n        require(currentStaked >= stakePoints, NotEnoughStake(staker, currentStaked, stakePoints));\\n        unchecked {\\n            // no underflow possible\\n            staked[staker] -= stakePoints;\\n            totalStaked = currentStaked - stakePoints;\\n        }\\n        emit Withdrawn(staker, withdrawData, stakePoints);\\n    }\\n\\n    /// @notice Claims the rewards for the sender.\\n    /// @dev Emits a {Claimed} event with the staker address, claimData and reward.\\n    /// @dev The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\\n    function claim() public virtual {\\n        address staker = _msgSender();\\n        _updateReward(staker);\\n        uint256 reward = earned(staker);\\n        if (reward != 0) {\\n            rewards[staker] = 0;\\n            bytes memory claimData = _computeClaim(staker, reward);\\n            emit Claimed(staker, claimData, reward);\\n        }\\n    }\\n\\n    /// @notice Adds rewards to the pool.\\n    /// @notice If there is an ongoing distribution, the new rewards are added to the current distribution:\\n    /// @notice - If the new distribution ends before the current one, the new rewards are added to the current distribution.\\n    /// @notice - If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\\n    /// @param reward The amount of rewards to be added.\\n    /// @param duration The duration of the rewards distribution.\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.\\n    /// @dev Reverts with {InvalidRewardAmount} if the reward amount is 0.\\n    /// @dev Reverts with {InvalidDuration} if the duration is 0.\\n    /// @dev Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.\\n    /// @dev Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address rewarder = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, rewarder);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(rewarder, reward, dust);\\n\\n        emit RewardAdded(rewarder, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xb233904513719b7c8ad3acc65cadf8a3f900f8bc0687f35ce8a5ecd55bab0965\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ninterface ILinearPool {\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerStakePoint() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function stake(bytes calldata stakeData) external payable;\\n\\n    function withdraw(bytes calldata withdrawData) external;\\n\\n    function claim() external;\\n\\n    function addReward(uint256 reward, uint256 duration) external payable;\\n}\\n\",\"keccak256\":\"0x7d90f50bc5a3a2700d7de92188b10b0d46b3eafc3b49f2431d0ae0cf494d05f4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"./../LinearPool.sol\\\";\\nimport {ERC20Receiver} from \\\"./../../../token/ERC20/ERC20Receiver.sol\\\";\\nimport {TokenRecoveryBase} from \\\"./../../../security/base/TokenRecoveryBase.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n/// @title ERC20StakingLinearPool\\n/// @notice A linear pool that allows staking of ERC20 tokens.\\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable STAKING_TOKEN;\\n\\n    error InvalidToken();\\n    error InvalidRecoveryAmount(uint256 requested, uint256 recoverable);\\n\\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\\n        STAKING_TOKEN = stakingToken;\\n    }\\n\\n    /// @notice Callback called when the contract receives ERC20 tokens via the IERC20SafeTransfers functions.\\n    /// @param from The address of the sender.\\n    /// @param value The amount of tokens received.\\n    /// @return bytes4 The function selector of the callback.\\n    /// @dev Reverts  with {InvalidToken} if the sender is not the staking token.\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\\n        bool requiresTransfer = false;\\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param stakeData The data to be used for staking, encoded as (uint256 value)\\n    function stake(bytes calldata stakeData) public payable virtual override {\\n        // non-reentrancy check removed\\n        bool requiresTransfer = true;\\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param stakeData The data to be used for staking, encoded as (bool requiresTransfer, bytes data) where data is (uint256 value).\\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\\n        stakePoints = abi.decode(data, (uint256));\\n        if (requiresTransfer) {\\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\\n        }\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\\n    function withdraw(bytes calldata withdrawData) public virtual override {\\n        // non-reentrancy check removed\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\\n        stakePoints = abi.decode(withdrawData, (uint256));\\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\\n    }\\n\\n    /// @inheritdoc TokenRecoveryBase\\n    /// @dev Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual override {\\n        uint256 stakingTokenRecoveryAmount;\\n        for (uint256 i; i < tokens.length; ++i) {\\n            if (tokens[i] == STAKING_TOKEN) {\\n                stakingTokenRecoveryAmount += amounts[i];\\n            }\\n        }\\n        if (stakingTokenRecoveryAmount != 0) {\\n            uint256 recoverable = STAKING_TOKEN.balanceOf(address(this)) - totalStaked;\\n            if (stakingTokenRecoveryAmount > recoverable) {\\n                revert InvalidRecoveryAmount(stakingTokenRecoveryAmount, recoverable);\\n            }\\n        }\\n        super.recoverERC20s(accounts, tokens, amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x3addc69ce91fa21ec4796bbcf56cb8d801fac10d6bddaa7d4eab0cc25709122e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ERC20StakingPointsRewardsLinearPool} from \\\"./ERC20StakingPointsRewardsLinearPool.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"./../points/interface/IPoints.sol\\\";\\n\\n/// @title ERC20StakingPointsRewardsLimitedLinearPool\\n/// @notice This contract is used to stake ERC20 tokens and obtain Points rewards.\\n/// @notice Staking can only be done via a claim contract and the `stake` function is not available.\\ncontract ERC20StakingPointsRewardsLimitedLinearPool is ERC20StakingPointsRewardsLinearPool {\\n    error InvalidTransferOperator(address operator);\\n    error OnlyReceiverInterface();\\n\\n    constructor(\\n        address claimContract,\\n        IERC20 stakingToken,\\n        IPoints pointsContract,\\n        bytes32 depositReasonCode,\\n        IForwarderRegistry forwarderRegistry\\n    ) ERC20StakingPointsRewardsLinearPool(claimContract, stakingToken, pointsContract, depositReasonCode, forwarderRegistry) {}\\n\\n    function onERC20Received(address operator, address, uint256 value, bytes calldata data) external virtual override returns (bytes4) {\\n        require(msg.sender == address(STAKING_TOKEN), InvalidToken());\\n        require(operator == CLAIM_CONTRACT, InvalidTransferOperator(operator));\\n        address staker = abi.decode(data, (address));\\n        _stake(staker, abi.encode(value));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    /// @dev Reverts with {OnlyReceiverInterface}.\\n    function stake(bytes calldata) public payable virtual override {\\n        revert OnlyReceiverInterface();\\n    }\\n\\n    function _computeStake(address, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        // The tokens were received via the receiver interface, so we don't need to transfer them.\\n        stakePoints = abi.decode(stakeData, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x0ab038fd718a53ba7cc38f95782c07746335cbeaf27011cf9e82e4691db7555c\",\"license\":\"MIT\"},\"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\\\";\\nimport {ERC20StakingLinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\\\";\\nimport {LinearPool_PointsRewards} from \\\"./reward/LinearPool_PointsRewards.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"./../points/interface/IPoints.sol\\\";\\n\\n/// @title ERC20StakingPointsRewardsLinearPool\\n/// @notice This contract is used to stake ERC20 tokens and obtain Points rewards.\\n/// @notice Staking can be done by the user or via a claim contract.\\ncontract ERC20StakingPointsRewardsLinearPool is ERC20StakingLinearPool, LinearPool_PointsRewards {\\n    address public immutable CLAIM_CONTRACT;\\n\\n    constructor(\\n        address claimContract,\\n        IERC20 stakingToken,\\n        IPoints pointsContract,\\n        bytes32 depositReasonCode,\\n        IForwarderRegistry forwarderRegistry\\n    ) ERC20StakingLinearPool(stakingToken, forwarderRegistry) LinearPool_PointsRewards(pointsContract, depositReasonCode) {\\n        CLAIM_CONTRACT = claimContract;\\n    }\\n\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external virtual override returns (bytes4) {\\n        require(msg.sender == address(STAKING_TOKEN), InvalidToken());\\n        bool requiresTransfer = false;\\n        if (operator == CLAIM_CONTRACT) {\\n            address staker = abi.decode(data, (address));\\n            _stake(staker, abi.encode(requiresTransfer, abi.encode(value)));\\n        } else {\\n            _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        }\\n        return this.onERC20Received.selector;\\n    }\\n\\n    function _computeClaim(\\n        address staker,\\n        uint256 reward\\n    ) internal virtual override(LinearPool, LinearPool_PointsRewards) returns (bytes memory claimData) {\\n        return LinearPool_PointsRewards._computeClaim(staker, reward);\\n    }\\n\\n    function _computeAddReward(address rewarder, uint256 reward, uint256 dust) internal virtual override(LinearPool, LinearPool_PointsRewards) {\\n        LinearPool_PointsRewards._computeAddReward(rewarder, reward, dust);\\n    }\\n}\\n\",\"keccak256\":\"0xe03dafff876273d1a16b2e1c18af058ee3b86e35406af92d899e0e0a68b61092\",\"license\":\"MIT\"},\"contracts/staking/reward/LinearPool_PointsRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IPoints} from \\\"./../../points/interface/IPoints.sol\\\";\\n\\n/// @title LinearPool_PointsRewards\\n/// @notice This contract is used to handle the points rewards for linear pools.\\n// solhint-disable-next-line contract-name-capwords\\nabstract contract LinearPool_PointsRewards {\\n    IPoints public immutable POINTS_CONTRACT;\\n    bytes32 public immutable DEPOSIT_REASON_CODE;\\n\\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\\n        POINTS_CONTRACT = pointsContract;\\n        DEPOSIT_REASON_CODE = depositReasonCode;\\n    }\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\\n        claimData = abi.encode(reward);\\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\\n    }\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1dee923d1418b52f7b3e2bf930d24b94e5ed7ab90f88f0cc99763cbfbaf160b7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4118,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":2032,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":2034,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":2036,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":2038,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":2040,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":2044,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":2048,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":2052,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"addReward(uint256,uint256)":{"notice":"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution."},"claim()":{"notice":"Claims the rewards for the sender."},"earned(address)":{"notice":"Returns the amount of rewards earned by the account."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"lastTimeRewardApplicable()":{"notice":"Returns the last time rewards are applicable."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"rewardPerStakePoint()":{"notice":"Returns the current reward per stake point."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw(bytes)":{"notice":"Withdraws from the pool."}},"notice":"This contract is used to stake ERC20 tokens and obtain Points rewards.Staking can only be done via a claim contract and the `stake` function is not available.","version":1}}},"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol":{"ERC20StakingPointsRewardsLinearPool":{"abi":[{"inputs":[{"internalType":"address","name":"claimContract","type":"address"},{"internalType":"contract IERC20","name":"stakingToken","type":"address"},{"internalType":"contract IPoints","name":"pointsContract","type":"address"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[{"internalType":"uint256","name":"requested","type":"uint256"},{"internalType":"uint256","name":"recoverable","type":"uint256"}],"name":"InvalidRecoveryAmount","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"withdraw","type":"uint256"}],"name":"NotEnoughStake","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"CLAIM_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEPOSIT_REASON_CODE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"stakeData","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"addReward(uint256,uint256)":{"details":"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.","params":{"duration":"The duration of the rewards distribution.","reward":"The amount of rewards to be added."}},"claim()":{"details":"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract."},"earned(address)":{"params":{"account":"The address of the account to check."},"returns":{"_0":"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"lastTimeRewardApplicable()":{"returns":{"_0":"The minimum of the current block timestamp and the distribution end."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"rewardPerStakePoint()":{"returns":{"_0":"The sum of the last stored value and the new rewards since the last update"}},"stake(bytes)":{"details":"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidStakeAmount} if the stake amount is 0.Emits a {Staked} event with the staker address, stakeData and stake points.The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.The stakeData is not used in the base implementation, but it is passed to the event for convenience.","params":{"stakeData":"The data to be used for staking, encoded as (uint256 value)"}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw(bytes)":{"details":"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.","params":{"withdrawData":"The data to be used for withdrawing, encoded as (uint256 value)"}}},"title":"ERC20StakingPointsRewardsLinearPool","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1324":{"entryPoint":null,"id":1324,"parameterSlots":1,"returnSlots":0},"@_1371":{"entryPoint":null,"id":1371,"parameterSlots":1,"returnSlots":0},"@_2122":{"entryPoint":null,"id":2122,"parameterSlots":1,"returnSlots":0},"@_2787":{"entryPoint":null,"id":2787,"parameterSlots":2,"returnSlots":0},"@_3063":{"entryPoint":null,"id":3063,"parameterSlots":0,"returnSlots":0},"@_4129":{"entryPoint":null,"id":4129,"parameterSlots":0,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@_6113":{"entryPoint":null,"id":6113,"parameterSlots":5,"returnSlots":0},"@_6256":{"entryPoint":null,"id":6256,"parameterSlots":2,"returnSlots":0},"@constructorInit_705":{"entryPoint":220,"id":705,"parameterSlots":2,"returnSlots":0},"@layout_1009":{"entryPoint":331,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":168,"id":861,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_963":{"entryPoint":377,"id":963,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IERC20_$3386t_contract$_IPoints_$5929t_bytes32t_contract$_IForwarderRegistry_$1506_fromMemory":{"entryPoint":493,"id":null,"parameterSlots":2,"returnSlots":5},"checked_sub_t_uint256":{"entryPoint":600,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":469,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1156:63","nodeType":"YulBlock","src":"0:1156:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"59:86:63","nodeType":"YulBlock","src":"59:86:63","statements":[{"body":{"nativeSrc":"123:16:63","nodeType":"YulBlock","src":"123:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:63","nodeType":"YulLiteral","src":"132:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:63","nodeType":"YulLiteral","src":"135:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:63","nodeType":"YulIdentifier","src":"125:6:63"},"nativeSrc":"125:12:63","nodeType":"YulFunctionCall","src":"125:12:63"},"nativeSrc":"125:12:63","nodeType":"YulExpressionStatement","src":"125:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:63","nodeType":"YulIdentifier","src":"82:5:63"},{"arguments":[{"name":"value","nativeSrc":"93:5:63","nodeType":"YulIdentifier","src":"93:5:63"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:63","nodeType":"YulLiteral","src":"108:3:63","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:63","nodeType":"YulLiteral","src":"113:1:63","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:63","nodeType":"YulIdentifier","src":"104:3:63"},"nativeSrc":"104:11:63","nodeType":"YulFunctionCall","src":"104:11:63"},{"kind":"number","nativeSrc":"117:1:63","nodeType":"YulLiteral","src":"117:1:63","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:63","nodeType":"YulIdentifier","src":"100:3:63"},"nativeSrc":"100:19:63","nodeType":"YulFunctionCall","src":"100:19:63"}],"functionName":{"name":"and","nativeSrc":"89:3:63","nodeType":"YulIdentifier","src":"89:3:63"},"nativeSrc":"89:31:63","nodeType":"YulFunctionCall","src":"89:31:63"}],"functionName":{"name":"eq","nativeSrc":"79:2:63","nodeType":"YulIdentifier","src":"79:2:63"},"nativeSrc":"79:42:63","nodeType":"YulFunctionCall","src":"79:42:63"}],"functionName":{"name":"iszero","nativeSrc":"72:6:63","nodeType":"YulIdentifier","src":"72:6:63"},"nativeSrc":"72:50:63","nodeType":"YulFunctionCall","src":"72:50:63"},"nativeSrc":"69:70:63","nodeType":"YulIf","src":"69:70:63"}]},"name":"validator_revert_address","nativeSrc":"14:131:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:63","nodeType":"YulTypedName","src":"48:5:63","type":""}],"src":"14:131:63"},{"body":{"nativeSrc":"357:567:63","nodeType":"YulBlock","src":"357:567:63","statements":[{"body":{"nativeSrc":"404:16:63","nodeType":"YulBlock","src":"404:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"413:1:63","nodeType":"YulLiteral","src":"413:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"416:1:63","nodeType":"YulLiteral","src":"416:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"406:6:63","nodeType":"YulIdentifier","src":"406:6:63"},"nativeSrc":"406:12:63","nodeType":"YulFunctionCall","src":"406:12:63"},"nativeSrc":"406:12:63","nodeType":"YulExpressionStatement","src":"406:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"378:7:63","nodeType":"YulIdentifier","src":"378:7:63"},{"name":"headStart","nativeSrc":"387:9:63","nodeType":"YulIdentifier","src":"387:9:63"}],"functionName":{"name":"sub","nativeSrc":"374:3:63","nodeType":"YulIdentifier","src":"374:3:63"},"nativeSrc":"374:23:63","nodeType":"YulFunctionCall","src":"374:23:63"},{"kind":"number","nativeSrc":"399:3:63","nodeType":"YulLiteral","src":"399:3:63","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"370:3:63","nodeType":"YulIdentifier","src":"370:3:63"},"nativeSrc":"370:33:63","nodeType":"YulFunctionCall","src":"370:33:63"},"nativeSrc":"367:53:63","nodeType":"YulIf","src":"367:53:63"},{"nativeSrc":"429:29:63","nodeType":"YulVariableDeclaration","src":"429:29:63","value":{"arguments":[{"name":"headStart","nativeSrc":"448:9:63","nodeType":"YulIdentifier","src":"448:9:63"}],"functionName":{"name":"mload","nativeSrc":"442:5:63","nodeType":"YulIdentifier","src":"442:5:63"},"nativeSrc":"442:16:63","nodeType":"YulFunctionCall","src":"442:16:63"},"variables":[{"name":"value","nativeSrc":"433:5:63","nodeType":"YulTypedName","src":"433:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"492:5:63","nodeType":"YulIdentifier","src":"492:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"467:24:63","nodeType":"YulIdentifier","src":"467:24:63"},"nativeSrc":"467:31:63","nodeType":"YulFunctionCall","src":"467:31:63"},"nativeSrc":"467:31:63","nodeType":"YulExpressionStatement","src":"467:31:63"},{"nativeSrc":"507:15:63","nodeType":"YulAssignment","src":"507:15:63","value":{"name":"value","nativeSrc":"517:5:63","nodeType":"YulIdentifier","src":"517:5:63"},"variableNames":[{"name":"value0","nativeSrc":"507:6:63","nodeType":"YulIdentifier","src":"507:6:63"}]},{"nativeSrc":"531:40:63","nodeType":"YulVariableDeclaration","src":"531:40:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"556:9:63","nodeType":"YulIdentifier","src":"556:9:63"},{"kind":"number","nativeSrc":"567:2:63","nodeType":"YulLiteral","src":"567:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"552:3:63","nodeType":"YulIdentifier","src":"552:3:63"},"nativeSrc":"552:18:63","nodeType":"YulFunctionCall","src":"552:18:63"}],"functionName":{"name":"mload","nativeSrc":"546:5:63","nodeType":"YulIdentifier","src":"546:5:63"},"nativeSrc":"546:25:63","nodeType":"YulFunctionCall","src":"546:25:63"},"variables":[{"name":"value_1","nativeSrc":"535:7:63","nodeType":"YulTypedName","src":"535:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"605:7:63","nodeType":"YulIdentifier","src":"605:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"580:24:63","nodeType":"YulIdentifier","src":"580:24:63"},"nativeSrc":"580:33:63","nodeType":"YulFunctionCall","src":"580:33:63"},"nativeSrc":"580:33:63","nodeType":"YulExpressionStatement","src":"580:33:63"},{"nativeSrc":"622:17:63","nodeType":"YulAssignment","src":"622:17:63","value":{"name":"value_1","nativeSrc":"632:7:63","nodeType":"YulIdentifier","src":"632:7:63"},"variableNames":[{"name":"value1","nativeSrc":"622:6:63","nodeType":"YulIdentifier","src":"622:6:63"}]},{"nativeSrc":"648:40:63","nodeType":"YulVariableDeclaration","src":"648:40:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"673:9:63","nodeType":"YulIdentifier","src":"673:9:63"},{"kind":"number","nativeSrc":"684:2:63","nodeType":"YulLiteral","src":"684:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"669:3:63","nodeType":"YulIdentifier","src":"669:3:63"},"nativeSrc":"669:18:63","nodeType":"YulFunctionCall","src":"669:18:63"}],"functionName":{"name":"mload","nativeSrc":"663:5:63","nodeType":"YulIdentifier","src":"663:5:63"},"nativeSrc":"663:25:63","nodeType":"YulFunctionCall","src":"663:25:63"},"variables":[{"name":"value_2","nativeSrc":"652:7:63","nodeType":"YulTypedName","src":"652:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"722:7:63","nodeType":"YulIdentifier","src":"722:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"697:24:63","nodeType":"YulIdentifier","src":"697:24:63"},"nativeSrc":"697:33:63","nodeType":"YulFunctionCall","src":"697:33:63"},"nativeSrc":"697:33:63","nodeType":"YulExpressionStatement","src":"697:33:63"},{"nativeSrc":"739:17:63","nodeType":"YulAssignment","src":"739:17:63","value":{"name":"value_2","nativeSrc":"749:7:63","nodeType":"YulIdentifier","src":"749:7:63"},"variableNames":[{"name":"value2","nativeSrc":"739:6:63","nodeType":"YulIdentifier","src":"739:6:63"}]},{"nativeSrc":"765:35:63","nodeType":"YulAssignment","src":"765:35:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"785:9:63","nodeType":"YulIdentifier","src":"785:9:63"},{"kind":"number","nativeSrc":"796:2:63","nodeType":"YulLiteral","src":"796:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"781:3:63","nodeType":"YulIdentifier","src":"781:3:63"},"nativeSrc":"781:18:63","nodeType":"YulFunctionCall","src":"781:18:63"}],"functionName":{"name":"mload","nativeSrc":"775:5:63","nodeType":"YulIdentifier","src":"775:5:63"},"nativeSrc":"775:25:63","nodeType":"YulFunctionCall","src":"775:25:63"},"variableNames":[{"name":"value3","nativeSrc":"765:6:63","nodeType":"YulIdentifier","src":"765:6:63"}]},{"nativeSrc":"809:41:63","nodeType":"YulVariableDeclaration","src":"809:41:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"834:9:63","nodeType":"YulIdentifier","src":"834:9:63"},{"kind":"number","nativeSrc":"845:3:63","nodeType":"YulLiteral","src":"845:3:63","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"830:3:63","nodeType":"YulIdentifier","src":"830:3:63"},"nativeSrc":"830:19:63","nodeType":"YulFunctionCall","src":"830:19:63"}],"functionName":{"name":"mload","nativeSrc":"824:5:63","nodeType":"YulIdentifier","src":"824:5:63"},"nativeSrc":"824:26:63","nodeType":"YulFunctionCall","src":"824:26:63"},"variables":[{"name":"value_3","nativeSrc":"813:7:63","nodeType":"YulTypedName","src":"813:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"884:7:63","nodeType":"YulIdentifier","src":"884:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"859:24:63","nodeType":"YulIdentifier","src":"859:24:63"},"nativeSrc":"859:33:63","nodeType":"YulFunctionCall","src":"859:33:63"},"nativeSrc":"859:33:63","nodeType":"YulExpressionStatement","src":"859:33:63"},{"nativeSrc":"901:17:63","nodeType":"YulAssignment","src":"901:17:63","value":{"name":"value_3","nativeSrc":"911:7:63","nodeType":"YulIdentifier","src":"911:7:63"},"variableNames":[{"name":"value4","nativeSrc":"901:6:63","nodeType":"YulIdentifier","src":"901:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IERC20_$3386t_contract$_IPoints_$5929t_bytes32t_contract$_IForwarderRegistry_$1506_fromMemory","nativeSrc":"150:774:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"291:9:63","nodeType":"YulTypedName","src":"291:9:63","type":""},{"name":"dataEnd","nativeSrc":"302:7:63","nodeType":"YulTypedName","src":"302:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"314:6:63","nodeType":"YulTypedName","src":"314:6:63","type":""},{"name":"value1","nativeSrc":"322:6:63","nodeType":"YulTypedName","src":"322:6:63","type":""},{"name":"value2","nativeSrc":"330:6:63","nodeType":"YulTypedName","src":"330:6:63","type":""},{"name":"value3","nativeSrc":"338:6:63","nodeType":"YulTypedName","src":"338:6:63","type":""},{"name":"value4","nativeSrc":"346:6:63","nodeType":"YulTypedName","src":"346:6:63","type":""}],"src":"150:774:63"},{"body":{"nativeSrc":"978:176:63","nodeType":"YulBlock","src":"978:176:63","statements":[{"nativeSrc":"988:17:63","nodeType":"YulAssignment","src":"988:17:63","value":{"arguments":[{"name":"x","nativeSrc":"1000:1:63","nodeType":"YulIdentifier","src":"1000:1:63"},{"name":"y","nativeSrc":"1003:1:63","nodeType":"YulIdentifier","src":"1003:1:63"}],"functionName":{"name":"sub","nativeSrc":"996:3:63","nodeType":"YulIdentifier","src":"996:3:63"},"nativeSrc":"996:9:63","nodeType":"YulFunctionCall","src":"996:9:63"},"variableNames":[{"name":"diff","nativeSrc":"988:4:63","nodeType":"YulIdentifier","src":"988:4:63"}]},{"body":{"nativeSrc":"1037:111:63","nodeType":"YulBlock","src":"1037:111:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1058:1:63","nodeType":"YulLiteral","src":"1058:1:63","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1065:3:63","nodeType":"YulLiteral","src":"1065:3:63","type":"","value":"224"},{"kind":"number","nativeSrc":"1070:10:63","nodeType":"YulLiteral","src":"1070:10:63","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1061:3:63","nodeType":"YulIdentifier","src":"1061:3:63"},"nativeSrc":"1061:20:63","nodeType":"YulFunctionCall","src":"1061:20:63"}],"functionName":{"name":"mstore","nativeSrc":"1051:6:63","nodeType":"YulIdentifier","src":"1051:6:63"},"nativeSrc":"1051:31:63","nodeType":"YulFunctionCall","src":"1051:31:63"},"nativeSrc":"1051:31:63","nodeType":"YulExpressionStatement","src":"1051:31:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1102:1:63","nodeType":"YulLiteral","src":"1102:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"1105:4:63","nodeType":"YulLiteral","src":"1105:4:63","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1095:6:63","nodeType":"YulIdentifier","src":"1095:6:63"},"nativeSrc":"1095:15:63","nodeType":"YulFunctionCall","src":"1095:15:63"},"nativeSrc":"1095:15:63","nodeType":"YulExpressionStatement","src":"1095:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1130:1:63","nodeType":"YulLiteral","src":"1130:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1133:4:63","nodeType":"YulLiteral","src":"1133:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1123:6:63","nodeType":"YulIdentifier","src":"1123:6:63"},"nativeSrc":"1123:15:63","nodeType":"YulFunctionCall","src":"1123:15:63"},"nativeSrc":"1123:15:63","nodeType":"YulExpressionStatement","src":"1123:15:63"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1020:4:63","nodeType":"YulIdentifier","src":"1020:4:63"},{"name":"x","nativeSrc":"1026:1:63","nodeType":"YulIdentifier","src":"1026:1:63"}],"functionName":{"name":"gt","nativeSrc":"1017:2:63","nodeType":"YulIdentifier","src":"1017:2:63"},"nativeSrc":"1017:11:63","nodeType":"YulFunctionCall","src":"1017:11:63"},"nativeSrc":"1014:134:63","nodeType":"YulIf","src":"1014:134:63"}]},"name":"checked_sub_t_uint256","nativeSrc":"929:225:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"960:1:63","nodeType":"YulTypedName","src":"960:1:63","type":""},{"name":"y","nativeSrc":"963:1:63","nodeType":"YulTypedName","src":"963:1:63","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"969:4:63","nodeType":"YulTypedName","src":"969:4:63","type":""}],"src":"929:225:63"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IERC20_$3386t_contract$_IPoints_$5929t_bytes32t_contract$_IForwarderRegistry_$1506_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        value3 := mload(add(headStart, 96))\n        let value_3 := mload(add(headStart, 128))\n        validator_revert_address(value_3)\n        value4 := value_3\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61012060405234801561001157600080fd5b50604051612d8b380380612d8b833981016040819052610030916101ed565b828285838080803361004a816100446100a8565b906100dc565b50600160008190556001600160a01b0390911660805261007e9250634fc3585960e01b915061007761014b565b9190610179565b506001600160a01b0390811660a05291821660c05260e05294909416610100525061027992505050565b6000806100d660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610258565b92915050565b6001600160a01b038116156101325781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6101476307f5828d60e41b600161007761014b565b5050565b6000806100d660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610258565b600160e01b6001600160e01b03198316016101a7576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146101ea57600080fd5b50565b600080600080600060a0868803121561020557600080fd5b8551610210816101d5565b6020870151909550610221816101d5565b6040870151909450610232816101d5565b60608701516080880151919450925061024a816101d5565b809150509295509295909350565b818103818111156100d657634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e05161010051612a8161030a600039600081816104dd0152610a2701526000818161033a0152611fbe0152600081816103c90152611fe7015260008181610292015281816109cc01528181610b3401528181610c2b01528181611e870152611f0101526000818161036b0152818161048e01528181611d4b0152611dd90152612a816000f3fe6080604052600436106102185760003560e01c80637b0a47ee1161011d5780639d696e36116100b0578063d547741f1161007f578063efa90b5411610064578063efa90b54146106de578063f2fde38b146106f4578063f7ba94bd1461071457600080fd5b8063d547741f146106a2578063ef4cadc5146106c257600080fd5b80639d696e3614610629578063c3666c361461063f578063c5c8f7701461065f578063d0b06f5d1461068c57600080fd5b80638bb9c5bf116100ec5780638bb9c5bf146105a75780638da5cb5b146105c757806391d14854146105dc57806398807d84146105fc57600080fd5b80637b0a47ee1461053257806380faa57d14610548578063817b1cd21461055d5780638580cf761461057357600080fd5b80632d1e0c02116101b05780634fc358591161017f57806362ba90961161016457806362ba9096146104cb57806373c8a958146104ff57806375c93bb91461051f57600080fd5b80634fc3585914610420578063572b6c051461047157600080fd5b80632d1e0c02146103a45780632d4c2f93146103b75780632f2ff15d146103eb5780634e71d92d1461040b57600080fd5b80630968f264116101ec5780630968f264146103065780632196e445146103285780632b4c9f161461035c5780632c9d0b801461038f57600080fd5b80628cc2621461021d57806301ffc9a7146102505780630479d644146102805780630700037d146102d9575b600080fd5b34801561022957600080fd5b5061023d6102383660046123af565b610734565b6040519081526020015b60405180910390f35b34801561025c57600080fd5b5061027061026b3660046123cc565b6107cb565b6040519015158152602001610247565b34801561028c57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610247565b3480156102e557600080fd5b5061023d6102f43660046123af565b60076020526000908152604090205481565b34801561031257600080fd5b50610326610321366004612457565b6107df565b005b34801561033457600080fd5b5061023d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561036857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102b4565b34801561039b57600080fd5b5061023d61082a565b6103266103b2366004612457565b610892565b3480156103c357600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f757600080fd5b50610326610406366004612499565b6108cd565b34801561041757600080fd5b50610326610901565b34801561042c57600080fd5b5061044061043b3660046124c9565b6109b2565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610247565b34801561047d57600080fd5b5061027061048c3660046123af565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b3480156104d757600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561050b57600080fd5b5061032661051a366004612581565b610b26565b61032661052d366004612627565b610d04565b34801561053e57600080fd5b5061023d60035481565b34801561055457600080fd5b5061023d610fd9565b34801561056957600080fd5b5061023d60015481565b34801561057f57600080fd5b5061023d7f726577617264657200000000000000000000000000000000000000000000000081565b3480156105b357600080fd5b506103266105c2366004612649565b610ff3565b3480156105d357600080fd5b506102b4611011565b3480156105e857600080fd5b506102706105f7366004612499565b61103d565b34801561060857600080fd5b5061023d6106173660046123af565b60066020526000908152604090205481565b34801561063557600080fd5b5061023d60045481565b34801561064b57600080fd5b5061032661065a366004612581565b611088565b34801561066b57600080fd5b5061023d61067a3660046123af565b60086020526000908152604090205481565b34801561069857600080fd5b5061023d60025481565b3480156106ae57600080fd5b506103266106bd366004612499565b6110b1565b3480156106ce57600080fd5b5061023d670de0b6b3a764000081565b3480156106ea57600080fd5b5061023d60055481565b34801561070057600080fd5b5061032661070f3660046123af565b6110df565b34801561072057600080fd5b5061032661072f366004612662565b6110fa565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546008909252822054670de0b6b3a76400009061077761082a565b6107819190612702565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020546107b19190612715565b6107bb919061275b565b6107c5919061276f565b92915050565b60006107c5826107d9611117565b90611145565b6108266107ea61121f565b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061122992505050565b5050565b60015460009080820361083f57505060045490565b80670de0b6b3a7640000600354600254610857610fd9565b6108619190612702565b61086b9190612715565b6108759190612715565b61087f919061275b565b60045461088c919061276f565b91505090565b60016108c861089f61121f565b8285856040516020016108b493929190612782565b604051602081830303815290604052611378565b505050565b60006108d761121f565b90506108eb816108e5611464565b90611492565b6108c88383836108f96114fd565b92919061152b565b600061090b61121f565b905061091681611601565b600061092182610734565b905080156108265773ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812081905561095b838361168f565b90508273ffffffffffffffffffffffffffffffffffffffff167f4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd582846040516109a5929190612846565b60405180910390a2505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a23576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610ae2576000610a86848601866123af565b9050610adc818388604051602001610aa091815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526108b49291602001612868565b50610afa565b610afa868287604051602001610aa091815260200190565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b6000805b84811015610bda577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868683818110610b7b57610b7b61288b565b9050602002016020810190610b9091906123af565b73ffffffffffffffffffffffffffffffffffffffff1603610bd257838382818110610bbd57610bbd61288b565b9050602002013582610bcf919061276f565b91505b600101610b2a565b508015610ced576001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9691906128ba565b610ca09190612702565b905080821115610ceb576040517f15c38d3e00000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044015b60405180910390fd5b505b610cfb87878787878761169b565b50505050505050565b6000610d0e61121f565b9050610d447f726577617264657200000000000000000000000000000000000000000000000082610d3d6114fd565b91906116b4565b82600003610d7e576040517f3853986500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600003610db8576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dc26000611601565b60055460009081610dd3854261276f565b9050814210610e4b576000610de8868861275b565b9050868682610e2c576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ce2565b50506003819055610e3d86886128d3565b60058390559350610f749050565b818111610eda57610e5c4283612702565b94506000610e6a868861275b565b9050868682610eae576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ce2565b50508060036000828254610ec2919061276f565b90915550610ed2905086886128d3565b935050610f74565b610ee4858761275b565b86908690610f27576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ce2565b5060009050610f364284612702565b600354610f439190612715565b90506000610f51888361276f565b9050610f5d878261275b565b600355610f6a87826128d3565b6005849055945050505b42600255604080518781526020810187905290810184905273ffffffffffffffffffffffffffffffffffffffff8516907f0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf89080839060600160405180910390a2505050505050565b600554600090428111610fec578061088c565b4291505090565b61100e610ffe61121f565b826110076114fd565b919061173a565b50565b600061103861101e611464565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000611081838361104c6114fd565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b61109b61109361121f565b6108e5611464565b6110a98686868686866117de565b505050505050565b60006110bb61121f565b90506110c9816108e5611464565b6108c88383836110d76114fd565b929190611a7e565b61100e6110ea61121f565b826110f3611464565b9190611b48565b61110561109361121f565b61111184848484611c5c565b50505050565b6000806107c560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e612702565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611195575060006107c5565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111e6575060016107c5565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000611038611d08565b61123282611601565b600061123e8383611e55565b90508060000361127a576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205483818380821015611303576040517f2b6a775800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091526044820152606401610ce2565b50505073ffffffffffffffffffffffffffffffffffffffff84166000818152600660205260409081902080548590039055838303600155517faae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e9061136a9086908690612846565b60405180910390a250505050565b61138182611601565b600061138d8383611eae565b9050806000036113c9576040517f040ef8ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160008282546113db919061276f565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120805483929061141590849061276f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167ff4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e83836040516109a5929190612846565b6000806107c560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd612702565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610826576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610ce2565b6000806107c560017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23612702565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166111115760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b61160961082a565b6004556005544210158061161e575060015415155b1561162f5761162b610fd9565b6002555b73ffffffffffffffffffffffffffffffffffffffff81161561100e5761165481610734565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083209390935560045460089091529190205550565b60606110818383611f31565b6116a661109361121f565b6110a9868686868686612049565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108c8576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610ce2565b6117458382846116b4565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b8483811415806117ee5750808214155b15611825576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015611a745760008686838181106118445761184461288b565b905060200201602081019061185991906123af565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a91906128fc565b611958576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610ce2565b86868381811061196a5761196a61288b565b905060200201602081019061197f91906123af565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b868181106119ad576119ad61288b565b90506020020160208101906119c291906123af565b8888878181106119d4576119d461288b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b5050505050806001019050611828565b5050505050505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156111115760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016115f3565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611bb5576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610ce2565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111115783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b82818114611c96576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156110a957611d00848483818110611cb657611cb661288b565b90506020020135878784818110611ccf57611ccf61288b565b9050602002016020810190611ce491906123af565b73ffffffffffffffffffffffffffffffffffffffff169061212a565b600101611c99565b600033321480611d185750601836105b15611d2257503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611e4457506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4491906128fc565b15611e4e57919050565b3391505090565b600081806020019051810190611e6b91906128ba565b90506107c573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001684836121e0565b600080600083806020019051810190611ec79190612946565b9150915080806020019051810190611edf91906128ba565b92508115611f2957611f2973ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016863086612261565b505092915050565b606081604051602001611f4691815260200190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290527f26b3293f00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8581166004840152602483018590527f000000000000000000000000000000000000000000000000000000000000000060448401529092507f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b15801561202b57600080fd5b505af115801561203f573d6000803e3d6000fd5b5050505092915050565b8483811415806120595750808214155b15612090576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015611a74576121228888838181106120b0576120b061288b565b90506020020160208101906120c591906123af565b8585848181106120d7576120d761288b565b905060200201358888858181106120f0576120f061288b565b905060200201602081019061210591906123af565b73ffffffffffffffffffffffffffffffffffffffff1691906121e0565b600101612093565b8047101561216d576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610ce2565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d80600081146121c8576040519150601f19603f3d011682016040523d82523d6000602084013e6121cd565b606091505b50915091508161111157611111816122a7565b60405173ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018390526108c891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122e9565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526111119186918216906323b872dd9060840161221a565b8051156122b75780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080602060008451602086016000885af18061230c576040513d6000823e3d81fd5b50506000513d9150811561232457806001141561233e565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15611111576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610ce2565b73ffffffffffffffffffffffffffffffffffffffff8116811461100e57600080fd5b6000602082840312156123c157600080fd5b81356110818161238d565b6000602082840312156123de57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461108157600080fd5b60008083601f84011261242057600080fd5b50813567ffffffffffffffff81111561243857600080fd5b60208301915083602082850101111561245057600080fd5b9250929050565b6000806020838503121561246a57600080fd5b823567ffffffffffffffff81111561248157600080fd5b61248d8582860161240e565b90969095509350505050565b600080604083850312156124ac57600080fd5b8235915060208301356124be8161238d565b809150509250929050565b6000806000806000608086880312156124e157600080fd5b85356124ec8161238d565b945060208601356124fc8161238d565b935060408601359250606086013567ffffffffffffffff81111561251f57600080fd5b61252b8882890161240e565b969995985093965092949392505050565b60008083601f84011261254e57600080fd5b50813567ffffffffffffffff81111561256657600080fd5b6020830191508360208260051b850101111561245057600080fd5b6000806000806000806060878903121561259a57600080fd5b863567ffffffffffffffff8111156125b157600080fd5b6125bd89828a0161253c565b909750955050602087013567ffffffffffffffff8111156125dd57600080fd5b6125e989828a0161253c565b909550935050604087013567ffffffffffffffff81111561260957600080fd5b61261589828a0161253c565b979a9699509497509295939492505050565b6000806040838503121561263a57600080fd5b50508035926020909101359150565b60006020828403121561265b57600080fd5b5035919050565b6000806000806040858703121561267857600080fd5b843567ffffffffffffffff81111561268f57600080fd5b61269b8782880161253c565b909550935050602085013567ffffffffffffffff8111156126bb57600080fd5b6126c78782880161253c565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156107c5576107c56126d3565b80820281158282048414176107c5576107c56126d3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261276a5761276a61272c565b500490565b808201808211156107c5576107c56126d3565b831515815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60005b838110156127f35781810151838201526020016127db565b50506000910152565b600081518084526128148160208601602086016127d8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600061285960408301856127fc565b90508260208301529392505050565b821515815260406020820152600061288360408301846127fc565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156128cc57600080fd5b5051919050565b6000826128e2576128e261272c565b500690565b805180151581146128f757600080fd5b919050565b60006020828403121561290e57600080fd5b611081826128e7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561295957600080fd5b612962836128e7565b9150602083015167ffffffffffffffff81111561297e57600080fd5b8301601f8101851361298f57600080fd5b805167ffffffffffffffff8111156129a9576129a9612917565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715612a1557612a15612917565b604052818152828201602001871015612a2d57600080fd5b612a3e8260208301602086016127d8565b809350505050925092905056fea264697066735822122003b4ac81c0968aa41c1f0b0a7b276a02aba47e74b035de64b3b1489c20147b2364736f6c634300081c0033","opcodes":"PUSH2 0x120 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2D8B CODESIZE SUB DUP1 PUSH2 0x2D8B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x1ED JUMP JUMPDEST DUP3 DUP3 DUP6 DUP4 DUP1 DUP1 DUP1 CALLER PUSH2 0x4A DUP2 PUSH2 0x44 PUSH2 0xA8 JUMP JUMPDEST SWAP1 PUSH2 0xDC JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x80 MSTORE PUSH2 0x7E SWAP3 POP PUSH4 0x4FC35859 PUSH1 0xE0 SHL SWAP2 POP PUSH2 0x77 PUSH2 0x14B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x179 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE SWAP2 DUP3 AND PUSH1 0xC0 MSTORE PUSH1 0xE0 MSTORE SWAP5 SWAP1 SWAP5 AND PUSH2 0x100 MSTORE POP PUSH2 0x279 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x258 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x132 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x147 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x77 PUSH2 0x14B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x258 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1A7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x210 DUP2 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x221 DUP2 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x232 DUP2 PUSH2 0x1D5 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH2 0x24A DUP2 PUSH2 0x1D5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xD6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x2A81 PUSH2 0x30A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x4DD ADD MSTORE PUSH2 0xA27 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x33A ADD MSTORE PUSH2 0x1FBE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3C9 ADD MSTORE PUSH2 0x1FE7 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x292 ADD MSTORE DUP2 DUP2 PUSH2 0x9CC ADD MSTORE DUP2 DUP2 PUSH2 0xB34 ADD MSTORE DUP2 DUP2 PUSH2 0xC2B ADD MSTORE DUP2 DUP2 PUSH2 0x1E87 ADD MSTORE PUSH2 0x1F01 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x36B ADD MSTORE DUP2 DUP2 PUSH2 0x48E ADD MSTORE DUP2 DUP2 PUSH2 0x1D4B ADD MSTORE PUSH2 0x1DD9 ADD MSTORE PUSH2 0x2A81 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x218 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0x11D JUMPI DUP1 PUSH4 0x9D696E36 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xEFA90B54 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x6DE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD547741F EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x629 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x5A7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5DC JUMPI DUP1 PUSH4 0x98807D84 EQ PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x4FC35859 GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x62BA9096 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x62BA9096 EQ PUSH2 0x4CB JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x968F264 GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x2D9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x23CC JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x2457 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x2B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x82A JUMP JUMPDEST PUSH2 0x326 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2457 JUMP JUMPDEST PUSH2 0x892 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2499 JUMP JUMPDEST PUSH2 0x8CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x901 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x440 PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x24C9 JUMP JUMPDEST PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x51A CALLDATASIZE PUSH1 0x4 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST PUSH2 0x326 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x2627 JUMP JUMPDEST PUSH2 0xD04 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0xFD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2649 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x1011 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x5F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2499 JUMP JUMPDEST PUSH2 0x103D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x617 CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x65A CALLDATASIZE PUSH1 0x4 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x1088 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x67A CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x2499 JUMP JUMPDEST PUSH2 0x10B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x700 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x70F CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH2 0x10DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x2662 JUMP JUMPDEST PUSH2 0x10FA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x777 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x2702 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x7BB SWAP2 SWAP1 PUSH2 0x275B JUMP JUMPDEST PUSH2 0x7C5 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C5 DUP3 PUSH2 0x7D9 PUSH2 0x1117 JUMP JUMPDEST SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH2 0x826 PUSH2 0x7EA PUSH2 0x121F JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1229 SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x83F JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x857 PUSH2 0xFD9 JUMP JUMPDEST PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x2702 JUMP JUMPDEST PUSH2 0x86B SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x875 SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x87F SWAP2 SWAP1 PUSH2 0x275B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x8C8 PUSH2 0x89F PUSH2 0x121F JUMP JUMPDEST DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8B4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1378 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D7 PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0x8EB DUP2 PUSH2 0x8E5 PUSH2 0x1464 JUMP JUMPDEST SWAP1 PUSH2 0x1492 JUMP JUMPDEST PUSH2 0x8C8 DUP4 DUP4 DUP4 PUSH2 0x8F9 PUSH2 0x14FD JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90B PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0x916 DUP2 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x921 DUP3 PUSH2 0x734 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x826 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x95B DUP4 DUP4 PUSH2 0x168F JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9A5 SWAP3 SWAP2 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAE2 JUMPI PUSH1 0x0 PUSH2 0xA86 DUP5 DUP7 ADD DUP7 PUSH2 0x23AF JUMP JUMPDEST SWAP1 POP PUSH2 0xADC DUP2 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAA0 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x8B4 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH2 0x2868 JUMP JUMPDEST POP PUSH2 0xAFA JUMP JUMPDEST PUSH2 0xAFA DUP7 DUP3 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAA0 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBDA JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0xB7B JUMPI PUSH2 0xB7B PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB90 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD2 JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0xBBD JUMPI PUSH2 0xBBD PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xBCF SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB2A JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xCED JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC96 SWAP2 SWAP1 PUSH2 0x28BA JUMP JUMPDEST PUSH2 0xCA0 SWAP2 SWAP1 PUSH2 0x2702 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xCEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x15C38D3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH2 0xCFB DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x169B JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0E PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0xD44 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xD3D PUSH2 0x14FD JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16B4 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xD7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xDB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDC2 PUSH1 0x0 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xDD3 DUP6 TIMESTAMP PUSH2 0x276F JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xE4B JUMPI PUSH1 0x0 PUSH2 0xDE8 DUP7 DUP9 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xE2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xE3D DUP7 DUP9 PUSH2 0x28D3 JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xF74 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xEDA JUMPI PUSH2 0xE5C TIMESTAMP DUP4 PUSH2 0x2702 JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xE6A DUP7 DUP9 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xEAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEC2 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xED2 SWAP1 POP DUP7 DUP9 PUSH2 0x28D3 JUMP JUMPDEST SWAP4 POP POP PUSH2 0xF74 JUMP JUMPDEST PUSH2 0xEE4 DUP6 DUP8 PUSH2 0x275B JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xF27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xF36 TIMESTAMP DUP5 PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xF43 SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF51 DUP9 DUP4 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0xF5D DUP8 DUP3 PUSH2 0x275B JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xF6A DUP8 DUP3 PUSH2 0x28D3 JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xFEC JUMPI DUP1 PUSH2 0x88C JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x100E PUSH2 0xFFE PUSH2 0x121F JUMP JUMPDEST DUP3 PUSH2 0x1007 PUSH2 0x14FD JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x173A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1038 PUSH2 0x101E PUSH2 0x1464 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1081 DUP4 DUP4 PUSH2 0x104C PUSH2 0x14FD JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x109B PUSH2 0x1093 PUSH2 0x121F JUMP JUMPDEST PUSH2 0x8E5 PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x10A9 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x17DE JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BB PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0x10C9 DUP2 PUSH2 0x8E5 PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x8C8 DUP4 DUP4 DUP4 PUSH2 0x10D7 PUSH2 0x14FD JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1A7E JUMP JUMPDEST PUSH2 0x100E PUSH2 0x10EA PUSH2 0x121F JUMP JUMPDEST DUP3 PUSH2 0x10F3 PUSH2 0x1464 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B48 JUMP JUMPDEST PUSH2 0x1105 PUSH2 0x1093 PUSH2 0x121F JUMP JUMPDEST PUSH2 0x1111 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C5C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1195 JUMPI POP PUSH1 0x0 PUSH2 0x7C5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x11E6 JUMPI POP PUSH1 0x1 PUSH2 0x7C5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1038 PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x1232 DUP3 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x123E DUP4 DUP4 PUSH2 0x1E55 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x127A JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 DUP4 DUP1 DUP3 LT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B6A775800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCE2 JUMP JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE DUP4 DUP4 SUB PUSH1 0x1 SSTORE MLOAD PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E SWAP1 PUSH2 0x136A SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x1381 DUP3 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x138D DUP4 DUP4 PUSH2 0x1EAE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x13C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x13DB SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1415 SWAP1 DUP5 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x9A5 SWAP3 SWAP2 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2702 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1111 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x1609 PUSH2 0x82A JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x161E JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x162F JUMPI PUSH2 0x162B PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x100E JUMPI PUSH2 0x1654 DUP2 PUSH2 0x734 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1081 DUP4 DUP4 PUSH2 0x1F31 JUMP JUMPDEST PUSH2 0x16A6 PUSH2 0x1093 PUSH2 0x121F JUMP JUMPDEST PUSH2 0x10A9 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2049 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x8C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x1745 DUP4 DUP3 DUP5 PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x17EE JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1825 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A74 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x1844 JUMPI PUSH2 0x1844 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1859 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x190A SWAP2 SWAP1 PUSH2 0x28FC JUMP JUMPDEST PUSH2 0x1958 JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x196A JUMPI PUSH2 0x196A PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x197F SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x19AD JUMPI PUSH2 0x19AD PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19C2 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x19D4 JUMPI PUSH2 0x19D4 PUSH2 0x288B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1828 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1111 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x15F3 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1BB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1111 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1C96 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10A9 JUMPI PUSH2 0x1D00 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1CB6 JUMPI PUSH2 0x1CB6 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1CCF JUMPI PUSH2 0x1CCF PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1CE4 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x212A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1D18 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1D22 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1E44 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E20 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E44 SWAP2 SWAP1 PUSH2 0x28FC JUMP JUMPDEST ISZERO PUSH2 0x1E4E JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1E6B SWAP2 SWAP1 PUSH2 0x28BA JUMP JUMPDEST SWAP1 POP PUSH2 0x7C5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x21E0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1EC7 SWAP2 SWAP1 PUSH2 0x2946 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1EDF SWAP2 SWAP1 PUSH2 0x28BA JUMP JUMPDEST SWAP3 POP DUP2 ISZERO PUSH2 0x1F29 JUMPI PUSH2 0x1F29 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP7 ADDRESS DUP7 PUSH2 0x2261 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1F46 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x202B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x203F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x2059 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2090 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A74 JUMPI PUSH2 0x2122 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x20B0 JUMPI PUSH2 0x20B0 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x20C5 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x20D7 JUMPI PUSH2 0x20D7 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x20F0 JUMPI PUSH2 0x20F0 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2105 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2093 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x216D JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x21C8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21CD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1111 JUMPI PUSH2 0x1111 DUP2 PUSH2 0x22A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x8C8 SWAP2 DUP6 SWAP2 DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x22E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1111 SWAP2 DUP7 SWAP2 DUP3 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x84 ADD PUSH2 0x221A JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x22B7 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x230C JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x2324 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x233E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1111 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x100E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1081 DUP2 PUSH2 0x238D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1081 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x246A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x248D DUP6 DUP3 DUP7 ADD PUSH2 0x240E JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24BE DUP2 PUSH2 0x238D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x24E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x24EC DUP2 PUSH2 0x238D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x24FC DUP2 PUSH2 0x238D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x251F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x252B DUP9 DUP3 DUP10 ADD PUSH2 0x240E JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x254E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x259A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25BD DUP10 DUP3 DUP11 ADD PUSH2 0x253C JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25E9 DUP10 DUP3 DUP11 ADD PUSH2 0x253C JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2615 DUP10 DUP3 DUP11 ADD PUSH2 0x253C JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x263A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x265B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x268F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x269B DUP8 DUP3 DUP9 ADD PUSH2 0x253C JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26C7 DUP8 DUP3 DUP9 ADD PUSH2 0x253C JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x26D3 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x26D3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x276A JUMPI PUSH2 0x276A PUSH2 0x272C JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x26D3 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x60 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27F3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x27DB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2814 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x27D8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2859 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x27FC JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2883 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x27FC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x28E2 JUMPI PUSH2 0x28E2 PUSH2 0x272C JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x28F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1081 DUP3 PUSH2 0x28E7 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2959 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2962 DUP4 PUSH2 0x28E7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x297E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x298F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29A9 JUMPI PUSH2 0x29A9 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2A15 JUMPI PUSH2 0x2A15 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP3 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x2A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3E DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x27D8 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB 0xB4 0xAC DUP2 0xC0 SWAP7 DUP11 LOG4 SHR 0x1F SIGNEXTEND EXP PUSH28 0x276A02ABA47E74B035DE64B3B1489C20147B2364736F6C634300081C STOP CALLER ","sourceMap":"813:1575:61:-:0;;;962:354;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1234:14;1250:17;1176:12;1190:17;;;;3236:10:34;1008:63:2;3236:10:34;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;1857:1:50;2061:7;:21;;;-1:-1:-1;;;;;622:39:24;;;;;736:96:37;;-1:-1:-1;;;;793:32:37;-1:-1:-1;736:34:37;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;;900:28:36;;::::1;;::::0;508:32:62;;;;;550:39;;1279:30:61;;;::::2;;::::0;-1:-1:-1;813:1575:61;;-1:-1:-1;;;813:1575:61;5060:174:13;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:13:o;1561:341::-;-1:-1:-1;;;;;1649:26:13;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:13;-1:-1:-1;;;;;1691:30:13;;;;;;;1740:46;;-1:-1:-1;;1740:46:13;;-1:-1:-1;;1740:46:13;1645:152;1806:89;-1:-1:-1;;;1890:4:13;1806:34;:32;:34::i;:89::-;1561:341;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:131:63:-;-1:-1:-1;;;;;89:31:63;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:774::-;314:6;322;330;338;346;399:3;387:9;378:7;374:23;370:33;367:53;;;416:1;413;406:12;367:53;448:9;442:16;467:31;492:5;467:31;:::i;:::-;567:2;552:18;;546:25;517:5;;-1:-1:-1;580:33:63;546:25;580:33;:::i;:::-;684:2;669:18;;663:25;632:7;;-1:-1:-1;697:33:63;663:25;697:33;:::i;:::-;796:2;781:18;;775:25;845:3;830:19;;824:26;749:7;;-1:-1:-1;775:25:63;-1:-1:-1;859:33:63;824:26;859:33;:::i;:::-;911:7;901:17;;;150:774;;;;;;;;:::o;929:225::-;996:9;;;1017:11;;;1014:134;;;1070:10;1065:3;1061:20;1058:1;1051:31;1105:4;1102:1;1095:15;1133:4;1130:1;1123:15;929:225;813:1575:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CLAIM_CONTRACT_6084":{"entryPoint":null,"id":6084,"parameterSlots":0,"returnSlots":0},"@DEPOSIT_REASON_CODE_6239":{"entryPoint":null,"id":6239,"parameterSlots":0,"returnSlots":0},"@POINTS_CONTRACT_6237":{"entryPoint":null,"id":6237,"parameterSlots":0,"returnSlots":0},"@REWARDER_ROLE_2027":{"entryPoint":null,"id":2027,"parameterSlots":0,"returnSlots":0},"@SCALING_FACTOR_2030":{"entryPoint":null,"id":2030,"parameterSlots":0,"returnSlots":0},"@STAKING_TOKEN_2762":{"entryPoint":null,"id":2762,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_3753":{"entryPoint":8937,"id":3753,"parameterSlots":2,"returnSlots":0},"@_computeAddReward_6228":{"entryPoint":null,"id":6228,"parameterSlots":3,"returnSlots":0},"@_computeAddReward_6291":{"entryPoint":null,"id":6291,"parameterSlots":3,"returnSlots":0},"@_computeClaim_6207":{"entryPoint":5775,"id":6207,"parameterSlots":2,"returnSlots":1},"@_computeClaim_6281":{"entryPoint":7985,"id":6281,"parameterSlots":2,"returnSlots":1},"@_computeStake_2906":{"entryPoint":7854,"id":2906,"parameterSlots":2,"returnSlots":1},"@_computeWithdraw_2949":{"entryPoint":7765,"id":2949,"parameterSlots":2,"returnSlots":1},"@_msgSender_1425":{"entryPoint":7432,"id":1425,"parameterSlots":0,"returnSlots":1},"@_msgSender_2682":{"entryPoint":4639,"id":2682,"parameterSlots":0,"returnSlots":1},"@_revert_4054":{"entryPoint":8871,"id":4054,"parameterSlots":1,"returnSlots":0},"@_stake_2311":{"entryPoint":4984,"id":2311,"parameterSlots":2,"returnSlots":0},"@_updateReward_2170":{"entryPoint":5633,"id":2170,"parameterSlots":1,"returnSlots":0},"@_withdraw_2390":{"entryPoint":4649,"id":2390,"parameterSlots":2,"returnSlots":0},"@addReward_2632":{"entryPoint":3332,"id":2632,"parameterSlots":2,"returnSlots":0},"@claim_2434":{"entryPoint":2305,"id":2434,"parameterSlots":0,"returnSlots":0},"@distributionEnd_2040":{"entryPoint":null,"id":2040,"parameterSlots":0,"returnSlots":0},"@earned_2252":{"entryPoint":1844,"id":2252,"parameterSlots":1,"returnSlots":1},"@enforceHasRole_567":{"entryPoint":5812,"id":567,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_829":{"entryPoint":5266,"id":829,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1333":{"entryPoint":null,"id":1333,"parameterSlots":0,"returnSlots":1},"@grantRole_110":{"entryPoint":2253,"id":110,"parameterSlots":2,"returnSlots":0},"@grantRole_420":{"entryPoint":5419,"id":420,"parameterSlots":4,"returnSlots":0},"@hasRole_178":{"entryPoint":4157,"id":178,"parameterSlots":2,"returnSlots":1},"@hasRole_513":{"entryPoint":null,"id":513,"parameterSlots":3,"returnSlots":1},"@isTrustedForwarder_1349":{"entryPoint":null,"id":1349,"parameterSlots":1,"returnSlots":1},"@lastTimeRewardApplicable_2190":{"entryPoint":4057,"id":2190,"parameterSlots":0,"returnSlots":1},"@lastUpdated_2034":{"entryPoint":null,"id":2034,"parameterSlots":0,"returnSlots":0},"@layout_1009":{"entryPoint":4375,"id":1009,"parameterSlots":0,"returnSlots":1},"@layout_603":{"entryPoint":5373,"id":603,"parameterSlots":0,"returnSlots":1},"@layout_861":{"entryPoint":5220,"id":861,"parameterSlots":0,"returnSlots":1},"@msgSender_1517":{"entryPoint":null,"id":1517,"parameterSlots":0,"returnSlots":1},"@onERC20Received_6188":{"entryPoint":2482,"id":6188,"parameterSlots":5,"returnSlots":1},"@owner_209":{"entryPoint":4113,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_782":{"entryPoint":null,"id":782,"parameterSlots":1,"returnSlots":1},"@recoverERC20s_1685":{"entryPoint":5787,"id":1685,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_1890":{"entryPoint":8265,"id":1890,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_3028":{"entryPoint":2854,"id":3028,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1717":{"entryPoint":4232,"id":1717,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1979":{"entryPoint":6110,"id":1979,"parameterSlots":6,"returnSlots":0},"@recoverETH_1653":{"entryPoint":4346,"id":1653,"parameterSlots":4,"returnSlots":0},"@recoverETH_1834":{"entryPoint":7260,"id":1834,"parameterSlots":4,"returnSlots":0},"@renounceRole_159":{"entryPoint":4083,"id":159,"parameterSlots":1,"returnSlots":0},"@renounceRole_492":{"entryPoint":5946,"id":492,"parameterSlots":3,"returnSlots":0},"@revokeRole_142":{"entryPoint":4273,"id":142,"parameterSlots":2,"returnSlots":0},"@revokeRole_457":{"entryPoint":6782,"id":457,"parameterSlots":4,"returnSlots":0},"@rewardPerStakePointPaid_2052":{"entryPoint":null,"id":2052,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePointStored_2038":{"entryPoint":null,"id":2038,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePoint_2224":{"entryPoint":2090,"id":2224,"parameterSlots":0,"returnSlots":1},"@rewardRate_2036":{"entryPoint":null,"id":2036,"parameterSlots":0,"returnSlots":0},"@rewards_2048":{"entryPoint":null,"id":2048,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_3458":{"entryPoint":8801,"id":3458,"parameterSlots":4,"returnSlots":0},"@safeTransfer_3431":{"entryPoint":8672,"id":3431,"parameterSlots":3,"returnSlots":0},"@sendValue_3853":{"entryPoint":8490,"id":3853,"parameterSlots":2,"returnSlots":0},"@stake_2856":{"entryPoint":2194,"id":2856,"parameterSlots":2,"returnSlots":0},"@staked_2044":{"entryPoint":null,"id":2044,"parameterSlots":0,"returnSlots":0},"@supportsInterface_891":{"entryPoint":1995,"id":891,"parameterSlots":1,"returnSlots":1},"@supportsInterface_997":{"entryPoint":4421,"id":997,"parameterSlots":2,"returnSlots":1},"@totalStaked_2032":{"entryPoint":null,"id":2032,"parameterSlots":0,"returnSlots":0},"@transferOwnership_226":{"entryPoint":4319,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_769":{"entryPoint":6984,"id":769,"parameterSlots":3,"returnSlots":0},"@withdraw_2920":{"entryPoint":2015,"id":2920,"parameterSlots":2,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":9532,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bool_fromMemory":{"entryPoint":10471,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":9230,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":9135,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":9417,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":9601,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":9826,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10492,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_boolt_bytes_memory_ptr_fromMemory":{"entryPoint":10566,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":9801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9369,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":9164,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":9303,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_contract$_IERC20_$3386":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$3198":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":10426,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":9767,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_bytes":{"entryPoint":10236,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_calldata_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10114,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10344,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":10310,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$3386__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1506__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPoints_$5929__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":10095,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":10075,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":10005,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9986,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":10200,"id":null,"parameterSlots":3,"returnSlots":0},"mod_t_uint256":{"entryPoint":10451,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":9939,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":10028,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10379,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10519,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":9101,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:17554:63","nodeType":"YulBlock","src":"0:17554:63","statements":[{"nativeSrc":"6:3:63","nodeType":"YulBlock","src":"6:3:63","statements":[]},{"body":{"nativeSrc":"59:109:63","nodeType":"YulBlock","src":"59:109:63","statements":[{"body":{"nativeSrc":"146:16:63","nodeType":"YulBlock","src":"146:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"155:1:63","nodeType":"YulLiteral","src":"155:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"158:1:63","nodeType":"YulLiteral","src":"158:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"148:6:63","nodeType":"YulIdentifier","src":"148:6:63"},"nativeSrc":"148:12:63","nodeType":"YulFunctionCall","src":"148:12:63"},"nativeSrc":"148:12:63","nodeType":"YulExpressionStatement","src":"148:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:63","nodeType":"YulIdentifier","src":"82:5:63"},{"arguments":[{"name":"value","nativeSrc":"93:5:63","nodeType":"YulIdentifier","src":"93:5:63"},{"kind":"number","nativeSrc":"100:42:63","nodeType":"YulLiteral","src":"100:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"89:3:63","nodeType":"YulIdentifier","src":"89:3:63"},"nativeSrc":"89:54:63","nodeType":"YulFunctionCall","src":"89:54:63"}],"functionName":{"name":"eq","nativeSrc":"79:2:63","nodeType":"YulIdentifier","src":"79:2:63"},"nativeSrc":"79:65:63","nodeType":"YulFunctionCall","src":"79:65:63"}],"functionName":{"name":"iszero","nativeSrc":"72:6:63","nodeType":"YulIdentifier","src":"72:6:63"},"nativeSrc":"72:73:63","nodeType":"YulFunctionCall","src":"72:73:63"},"nativeSrc":"69:93:63","nodeType":"YulIf","src":"69:93:63"}]},"name":"validator_revert_address","nativeSrc":"14:154:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:63","nodeType":"YulTypedName","src":"48:5:63","type":""}],"src":"14:154:63"},{"body":{"nativeSrc":"243:177:63","nodeType":"YulBlock","src":"243:177:63","statements":[{"body":{"nativeSrc":"289:16:63","nodeType":"YulBlock","src":"289:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"298:1:63","nodeType":"YulLiteral","src":"298:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"301:1:63","nodeType":"YulLiteral","src":"301:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"291:6:63","nodeType":"YulIdentifier","src":"291:6:63"},"nativeSrc":"291:12:63","nodeType":"YulFunctionCall","src":"291:12:63"},"nativeSrc":"291:12:63","nodeType":"YulExpressionStatement","src":"291:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"264:7:63","nodeType":"YulIdentifier","src":"264:7:63"},{"name":"headStart","nativeSrc":"273:9:63","nodeType":"YulIdentifier","src":"273:9:63"}],"functionName":{"name":"sub","nativeSrc":"260:3:63","nodeType":"YulIdentifier","src":"260:3:63"},"nativeSrc":"260:23:63","nodeType":"YulFunctionCall","src":"260:23:63"},{"kind":"number","nativeSrc":"285:2:63","nodeType":"YulLiteral","src":"285:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"256:3:63","nodeType":"YulIdentifier","src":"256:3:63"},"nativeSrc":"256:32:63","nodeType":"YulFunctionCall","src":"256:32:63"},"nativeSrc":"253:52:63","nodeType":"YulIf","src":"253:52:63"},{"nativeSrc":"314:36:63","nodeType":"YulVariableDeclaration","src":"314:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"340:9:63","nodeType":"YulIdentifier","src":"340:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"327:12:63","nodeType":"YulIdentifier","src":"327:12:63"},"nativeSrc":"327:23:63","nodeType":"YulFunctionCall","src":"327:23:63"},"variables":[{"name":"value","nativeSrc":"318:5:63","nodeType":"YulTypedName","src":"318:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"384:5:63","nodeType":"YulIdentifier","src":"384:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"359:24:63","nodeType":"YulIdentifier","src":"359:24:63"},"nativeSrc":"359:31:63","nodeType":"YulFunctionCall","src":"359:31:63"},"nativeSrc":"359:31:63","nodeType":"YulExpressionStatement","src":"359:31:63"},{"nativeSrc":"399:15:63","nodeType":"YulAssignment","src":"399:15:63","value":{"name":"value","nativeSrc":"409:5:63","nodeType":"YulIdentifier","src":"409:5:63"},"variableNames":[{"name":"value0","nativeSrc":"399:6:63","nodeType":"YulIdentifier","src":"399:6:63"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"173:247:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"209:9:63","nodeType":"YulTypedName","src":"209:9:63","type":""},{"name":"dataEnd","nativeSrc":"220:7:63","nodeType":"YulTypedName","src":"220:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"232:6:63","nodeType":"YulTypedName","src":"232:6:63","type":""}],"src":"173:247:63"},{"body":{"nativeSrc":"526:76:63","nodeType":"YulBlock","src":"526:76:63","statements":[{"nativeSrc":"536:26:63","nodeType":"YulAssignment","src":"536:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"548:9:63","nodeType":"YulIdentifier","src":"548:9:63"},{"kind":"number","nativeSrc":"559:2:63","nodeType":"YulLiteral","src":"559:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"544:3:63","nodeType":"YulIdentifier","src":"544:3:63"},"nativeSrc":"544:18:63","nodeType":"YulFunctionCall","src":"544:18:63"},"variableNames":[{"name":"tail","nativeSrc":"536:4:63","nodeType":"YulIdentifier","src":"536:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"578:9:63","nodeType":"YulIdentifier","src":"578:9:63"},{"name":"value0","nativeSrc":"589:6:63","nodeType":"YulIdentifier","src":"589:6:63"}],"functionName":{"name":"mstore","nativeSrc":"571:6:63","nodeType":"YulIdentifier","src":"571:6:63"},"nativeSrc":"571:25:63","nodeType":"YulFunctionCall","src":"571:25:63"},"nativeSrc":"571:25:63","nodeType":"YulExpressionStatement","src":"571:25:63"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"425:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"495:9:63","nodeType":"YulTypedName","src":"495:9:63","type":""},{"name":"value0","nativeSrc":"506:6:63","nodeType":"YulTypedName","src":"506:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"517:4:63","nodeType":"YulTypedName","src":"517:4:63","type":""}],"src":"425:177:63"},{"body":{"nativeSrc":"676:263:63","nodeType":"YulBlock","src":"676:263:63","statements":[{"body":{"nativeSrc":"722:16:63","nodeType":"YulBlock","src":"722:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"731:1:63","nodeType":"YulLiteral","src":"731:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"734:1:63","nodeType":"YulLiteral","src":"734:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"724:6:63","nodeType":"YulIdentifier","src":"724:6:63"},"nativeSrc":"724:12:63","nodeType":"YulFunctionCall","src":"724:12:63"},"nativeSrc":"724:12:63","nodeType":"YulExpressionStatement","src":"724:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"697:7:63","nodeType":"YulIdentifier","src":"697:7:63"},{"name":"headStart","nativeSrc":"706:9:63","nodeType":"YulIdentifier","src":"706:9:63"}],"functionName":{"name":"sub","nativeSrc":"693:3:63","nodeType":"YulIdentifier","src":"693:3:63"},"nativeSrc":"693:23:63","nodeType":"YulFunctionCall","src":"693:23:63"},{"kind":"number","nativeSrc":"718:2:63","nodeType":"YulLiteral","src":"718:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"689:3:63","nodeType":"YulIdentifier","src":"689:3:63"},"nativeSrc":"689:32:63","nodeType":"YulFunctionCall","src":"689:32:63"},"nativeSrc":"686:52:63","nodeType":"YulIf","src":"686:52:63"},{"nativeSrc":"747:36:63","nodeType":"YulVariableDeclaration","src":"747:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"773:9:63","nodeType":"YulIdentifier","src":"773:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"760:12:63","nodeType":"YulIdentifier","src":"760:12:63"},"nativeSrc":"760:23:63","nodeType":"YulFunctionCall","src":"760:23:63"},"variables":[{"name":"value","nativeSrc":"751:5:63","nodeType":"YulTypedName","src":"751:5:63","type":""}]},{"body":{"nativeSrc":"893:16:63","nodeType":"YulBlock","src":"893:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"902:1:63","nodeType":"YulLiteral","src":"902:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"905:1:63","nodeType":"YulLiteral","src":"905:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"895:6:63","nodeType":"YulIdentifier","src":"895:6:63"},"nativeSrc":"895:12:63","nodeType":"YulFunctionCall","src":"895:12:63"},"nativeSrc":"895:12:63","nodeType":"YulExpressionStatement","src":"895:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"805:5:63","nodeType":"YulIdentifier","src":"805:5:63"},{"arguments":[{"name":"value","nativeSrc":"816:5:63","nodeType":"YulIdentifier","src":"816:5:63"},{"kind":"number","nativeSrc":"823:66:63","nodeType":"YulLiteral","src":"823:66:63","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"812:3:63","nodeType":"YulIdentifier","src":"812:3:63"},"nativeSrc":"812:78:63","nodeType":"YulFunctionCall","src":"812:78:63"}],"functionName":{"name":"eq","nativeSrc":"802:2:63","nodeType":"YulIdentifier","src":"802:2:63"},"nativeSrc":"802:89:63","nodeType":"YulFunctionCall","src":"802:89:63"}],"functionName":{"name":"iszero","nativeSrc":"795:6:63","nodeType":"YulIdentifier","src":"795:6:63"},"nativeSrc":"795:97:63","nodeType":"YulFunctionCall","src":"795:97:63"},"nativeSrc":"792:117:63","nodeType":"YulIf","src":"792:117:63"},{"nativeSrc":"918:15:63","nodeType":"YulAssignment","src":"918:15:63","value":{"name":"value","nativeSrc":"928:5:63","nodeType":"YulIdentifier","src":"928:5:63"},"variableNames":[{"name":"value0","nativeSrc":"918:6:63","nodeType":"YulIdentifier","src":"918:6:63"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"607:332:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"642:9:63","nodeType":"YulTypedName","src":"642:9:63","type":""},{"name":"dataEnd","nativeSrc":"653:7:63","nodeType":"YulTypedName","src":"653:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"665:6:63","nodeType":"YulTypedName","src":"665:6:63","type":""}],"src":"607:332:63"},{"body":{"nativeSrc":"1039:92:63","nodeType":"YulBlock","src":"1039:92:63","statements":[{"nativeSrc":"1049:26:63","nodeType":"YulAssignment","src":"1049:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1061:9:63","nodeType":"YulIdentifier","src":"1061:9:63"},{"kind":"number","nativeSrc":"1072:2:63","nodeType":"YulLiteral","src":"1072:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1057:3:63","nodeType":"YulIdentifier","src":"1057:3:63"},"nativeSrc":"1057:18:63","nodeType":"YulFunctionCall","src":"1057:18:63"},"variableNames":[{"name":"tail","nativeSrc":"1049:4:63","nodeType":"YulIdentifier","src":"1049:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1091:9:63","nodeType":"YulIdentifier","src":"1091:9:63"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1116:6:63","nodeType":"YulIdentifier","src":"1116:6:63"}],"functionName":{"name":"iszero","nativeSrc":"1109:6:63","nodeType":"YulIdentifier","src":"1109:6:63"},"nativeSrc":"1109:14:63","nodeType":"YulFunctionCall","src":"1109:14:63"}],"functionName":{"name":"iszero","nativeSrc":"1102:6:63","nodeType":"YulIdentifier","src":"1102:6:63"},"nativeSrc":"1102:22:63","nodeType":"YulFunctionCall","src":"1102:22:63"}],"functionName":{"name":"mstore","nativeSrc":"1084:6:63","nodeType":"YulIdentifier","src":"1084:6:63"},"nativeSrc":"1084:41:63","nodeType":"YulFunctionCall","src":"1084:41:63"},"nativeSrc":"1084:41:63","nodeType":"YulExpressionStatement","src":"1084:41:63"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"944:187:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1008:9:63","nodeType":"YulTypedName","src":"1008:9:63","type":""},{"name":"value0","nativeSrc":"1019:6:63","nodeType":"YulTypedName","src":"1019:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1030:4:63","nodeType":"YulTypedName","src":"1030:4:63","type":""}],"src":"944:187:63"},{"body":{"nativeSrc":"1252:125:63","nodeType":"YulBlock","src":"1252:125:63","statements":[{"nativeSrc":"1262:26:63","nodeType":"YulAssignment","src":"1262:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1274:9:63","nodeType":"YulIdentifier","src":"1274:9:63"},{"kind":"number","nativeSrc":"1285:2:63","nodeType":"YulLiteral","src":"1285:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1270:3:63","nodeType":"YulIdentifier","src":"1270:3:63"},"nativeSrc":"1270:18:63","nodeType":"YulFunctionCall","src":"1270:18:63"},"variableNames":[{"name":"tail","nativeSrc":"1262:4:63","nodeType":"YulIdentifier","src":"1262:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1304:9:63","nodeType":"YulIdentifier","src":"1304:9:63"},{"arguments":[{"name":"value0","nativeSrc":"1319:6:63","nodeType":"YulIdentifier","src":"1319:6:63"},{"kind":"number","nativeSrc":"1327:42:63","nodeType":"YulLiteral","src":"1327:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1315:3:63","nodeType":"YulIdentifier","src":"1315:3:63"},"nativeSrc":"1315:55:63","nodeType":"YulFunctionCall","src":"1315:55:63"}],"functionName":{"name":"mstore","nativeSrc":"1297:6:63","nodeType":"YulIdentifier","src":"1297:6:63"},"nativeSrc":"1297:74:63","nodeType":"YulFunctionCall","src":"1297:74:63"},"nativeSrc":"1297:74:63","nodeType":"YulExpressionStatement","src":"1297:74:63"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$3386__to_t_address__fromStack_reversed","nativeSrc":"1136:241:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1221:9:63","nodeType":"YulTypedName","src":"1221:9:63","type":""},{"name":"value0","nativeSrc":"1232:6:63","nodeType":"YulTypedName","src":"1232:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1243:4:63","nodeType":"YulTypedName","src":"1243:4:63","type":""}],"src":"1136:241:63"},{"body":{"nativeSrc":"1454:275:63","nodeType":"YulBlock","src":"1454:275:63","statements":[{"body":{"nativeSrc":"1503:16:63","nodeType":"YulBlock","src":"1503:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1512:1:63","nodeType":"YulLiteral","src":"1512:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1515:1:63","nodeType":"YulLiteral","src":"1515:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1505:6:63","nodeType":"YulIdentifier","src":"1505:6:63"},"nativeSrc":"1505:12:63","nodeType":"YulFunctionCall","src":"1505:12:63"},"nativeSrc":"1505:12:63","nodeType":"YulExpressionStatement","src":"1505:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1482:6:63","nodeType":"YulIdentifier","src":"1482:6:63"},{"kind":"number","nativeSrc":"1490:4:63","nodeType":"YulLiteral","src":"1490:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1478:3:63","nodeType":"YulIdentifier","src":"1478:3:63"},"nativeSrc":"1478:17:63","nodeType":"YulFunctionCall","src":"1478:17:63"},{"name":"end","nativeSrc":"1497:3:63","nodeType":"YulIdentifier","src":"1497:3:63"}],"functionName":{"name":"slt","nativeSrc":"1474:3:63","nodeType":"YulIdentifier","src":"1474:3:63"},"nativeSrc":"1474:27:63","nodeType":"YulFunctionCall","src":"1474:27:63"}],"functionName":{"name":"iszero","nativeSrc":"1467:6:63","nodeType":"YulIdentifier","src":"1467:6:63"},"nativeSrc":"1467:35:63","nodeType":"YulFunctionCall","src":"1467:35:63"},"nativeSrc":"1464:55:63","nodeType":"YulIf","src":"1464:55:63"},{"nativeSrc":"1528:30:63","nodeType":"YulAssignment","src":"1528:30:63","value":{"arguments":[{"name":"offset","nativeSrc":"1551:6:63","nodeType":"YulIdentifier","src":"1551:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"1538:12:63","nodeType":"YulIdentifier","src":"1538:12:63"},"nativeSrc":"1538:20:63","nodeType":"YulFunctionCall","src":"1538:20:63"},"variableNames":[{"name":"length","nativeSrc":"1528:6:63","nodeType":"YulIdentifier","src":"1528:6:63"}]},{"body":{"nativeSrc":"1601:16:63","nodeType":"YulBlock","src":"1601:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1610:1:63","nodeType":"YulLiteral","src":"1610:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1613:1:63","nodeType":"YulLiteral","src":"1613:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1603:6:63","nodeType":"YulIdentifier","src":"1603:6:63"},"nativeSrc":"1603:12:63","nodeType":"YulFunctionCall","src":"1603:12:63"},"nativeSrc":"1603:12:63","nodeType":"YulExpressionStatement","src":"1603:12:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1573:6:63","nodeType":"YulIdentifier","src":"1573:6:63"},{"kind":"number","nativeSrc":"1581:18:63","nodeType":"YulLiteral","src":"1581:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1570:2:63","nodeType":"YulIdentifier","src":"1570:2:63"},"nativeSrc":"1570:30:63","nodeType":"YulFunctionCall","src":"1570:30:63"},"nativeSrc":"1567:50:63","nodeType":"YulIf","src":"1567:50:63"},{"nativeSrc":"1626:29:63","nodeType":"YulAssignment","src":"1626:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"1642:6:63","nodeType":"YulIdentifier","src":"1642:6:63"},{"kind":"number","nativeSrc":"1650:4:63","nodeType":"YulLiteral","src":"1650:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1638:3:63","nodeType":"YulIdentifier","src":"1638:3:63"},"nativeSrc":"1638:17:63","nodeType":"YulFunctionCall","src":"1638:17:63"},"variableNames":[{"name":"arrayPos","nativeSrc":"1626:8:63","nodeType":"YulIdentifier","src":"1626:8:63"}]},{"body":{"nativeSrc":"1707:16:63","nodeType":"YulBlock","src":"1707:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1716:1:63","nodeType":"YulLiteral","src":"1716:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1719:1:63","nodeType":"YulLiteral","src":"1719:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1709:6:63","nodeType":"YulIdentifier","src":"1709:6:63"},"nativeSrc":"1709:12:63","nodeType":"YulFunctionCall","src":"1709:12:63"},"nativeSrc":"1709:12:63","nodeType":"YulExpressionStatement","src":"1709:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1678:6:63","nodeType":"YulIdentifier","src":"1678:6:63"},{"name":"length","nativeSrc":"1686:6:63","nodeType":"YulIdentifier","src":"1686:6:63"}],"functionName":{"name":"add","nativeSrc":"1674:3:63","nodeType":"YulIdentifier","src":"1674:3:63"},"nativeSrc":"1674:19:63","nodeType":"YulFunctionCall","src":"1674:19:63"},{"kind":"number","nativeSrc":"1695:4:63","nodeType":"YulLiteral","src":"1695:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1670:3:63","nodeType":"YulIdentifier","src":"1670:3:63"},"nativeSrc":"1670:30:63","nodeType":"YulFunctionCall","src":"1670:30:63"},{"name":"end","nativeSrc":"1702:3:63","nodeType":"YulIdentifier","src":"1702:3:63"}],"functionName":{"name":"gt","nativeSrc":"1667:2:63","nodeType":"YulIdentifier","src":"1667:2:63"},"nativeSrc":"1667:39:63","nodeType":"YulFunctionCall","src":"1667:39:63"},"nativeSrc":"1664:59:63","nodeType":"YulIf","src":"1664:59:63"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"1382:347:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1417:6:63","nodeType":"YulTypedName","src":"1417:6:63","type":""},{"name":"end","nativeSrc":"1425:3:63","nodeType":"YulTypedName","src":"1425:3:63","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1433:8:63","nodeType":"YulTypedName","src":"1433:8:63","type":""},{"name":"length","nativeSrc":"1443:6:63","nodeType":"YulTypedName","src":"1443:6:63","type":""}],"src":"1382:347:63"},{"body":{"nativeSrc":"1823:320:63","nodeType":"YulBlock","src":"1823:320:63","statements":[{"body":{"nativeSrc":"1869:16:63","nodeType":"YulBlock","src":"1869:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1878:1:63","nodeType":"YulLiteral","src":"1878:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1881:1:63","nodeType":"YulLiteral","src":"1881:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1871:6:63","nodeType":"YulIdentifier","src":"1871:6:63"},"nativeSrc":"1871:12:63","nodeType":"YulFunctionCall","src":"1871:12:63"},"nativeSrc":"1871:12:63","nodeType":"YulExpressionStatement","src":"1871:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1844:7:63","nodeType":"YulIdentifier","src":"1844:7:63"},{"name":"headStart","nativeSrc":"1853:9:63","nodeType":"YulIdentifier","src":"1853:9:63"}],"functionName":{"name":"sub","nativeSrc":"1840:3:63","nodeType":"YulIdentifier","src":"1840:3:63"},"nativeSrc":"1840:23:63","nodeType":"YulFunctionCall","src":"1840:23:63"},{"kind":"number","nativeSrc":"1865:2:63","nodeType":"YulLiteral","src":"1865:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1836:3:63","nodeType":"YulIdentifier","src":"1836:3:63"},"nativeSrc":"1836:32:63","nodeType":"YulFunctionCall","src":"1836:32:63"},"nativeSrc":"1833:52:63","nodeType":"YulIf","src":"1833:52:63"},{"nativeSrc":"1894:37:63","nodeType":"YulVariableDeclaration","src":"1894:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"1921:9:63","nodeType":"YulIdentifier","src":"1921:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"1908:12:63","nodeType":"YulIdentifier","src":"1908:12:63"},"nativeSrc":"1908:23:63","nodeType":"YulFunctionCall","src":"1908:23:63"},"variables":[{"name":"offset","nativeSrc":"1898:6:63","nodeType":"YulTypedName","src":"1898:6:63","type":""}]},{"body":{"nativeSrc":"1974:16:63","nodeType":"YulBlock","src":"1974:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1983:1:63","nodeType":"YulLiteral","src":"1983:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"1986:1:63","nodeType":"YulLiteral","src":"1986:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1976:6:63","nodeType":"YulIdentifier","src":"1976:6:63"},"nativeSrc":"1976:12:63","nodeType":"YulFunctionCall","src":"1976:12:63"},"nativeSrc":"1976:12:63","nodeType":"YulExpressionStatement","src":"1976:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1946:6:63","nodeType":"YulIdentifier","src":"1946:6:63"},{"kind":"number","nativeSrc":"1954:18:63","nodeType":"YulLiteral","src":"1954:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1943:2:63","nodeType":"YulIdentifier","src":"1943:2:63"},"nativeSrc":"1943:30:63","nodeType":"YulFunctionCall","src":"1943:30:63"},"nativeSrc":"1940:50:63","nodeType":"YulIf","src":"1940:50:63"},{"nativeSrc":"1999:84:63","nodeType":"YulVariableDeclaration","src":"1999:84:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2055:9:63","nodeType":"YulIdentifier","src":"2055:9:63"},{"name":"offset","nativeSrc":"2066:6:63","nodeType":"YulIdentifier","src":"2066:6:63"}],"functionName":{"name":"add","nativeSrc":"2051:3:63","nodeType":"YulIdentifier","src":"2051:3:63"},"nativeSrc":"2051:22:63","nodeType":"YulFunctionCall","src":"2051:22:63"},{"name":"dataEnd","nativeSrc":"2075:7:63","nodeType":"YulIdentifier","src":"2075:7:63"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2025:25:63","nodeType":"YulIdentifier","src":"2025:25:63"},"nativeSrc":"2025:58:63","nodeType":"YulFunctionCall","src":"2025:58:63"},"variables":[{"name":"value0_1","nativeSrc":"2003:8:63","nodeType":"YulTypedName","src":"2003:8:63","type":""},{"name":"value1_1","nativeSrc":"2013:8:63","nodeType":"YulTypedName","src":"2013:8:63","type":""}]},{"nativeSrc":"2092:18:63","nodeType":"YulAssignment","src":"2092:18:63","value":{"name":"value0_1","nativeSrc":"2102:8:63","nodeType":"YulIdentifier","src":"2102:8:63"},"variableNames":[{"name":"value0","nativeSrc":"2092:6:63","nodeType":"YulIdentifier","src":"2092:6:63"}]},{"nativeSrc":"2119:18:63","nodeType":"YulAssignment","src":"2119:18:63","value":{"name":"value1_1","nativeSrc":"2129:8:63","nodeType":"YulIdentifier","src":"2129:8:63"},"variableNames":[{"name":"value1","nativeSrc":"2119:6:63","nodeType":"YulIdentifier","src":"2119:6:63"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nativeSrc":"1734:409:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1781:9:63","nodeType":"YulTypedName","src":"1781:9:63","type":""},{"name":"dataEnd","nativeSrc":"1792:7:63","nodeType":"YulTypedName","src":"1792:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1804:6:63","nodeType":"YulTypedName","src":"1804:6:63","type":""},{"name":"value1","nativeSrc":"1812:6:63","nodeType":"YulTypedName","src":"1812:6:63","type":""}],"src":"1734:409:63"},{"body":{"nativeSrc":"2249:76:63","nodeType":"YulBlock","src":"2249:76:63","statements":[{"nativeSrc":"2259:26:63","nodeType":"YulAssignment","src":"2259:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2271:9:63","nodeType":"YulIdentifier","src":"2271:9:63"},{"kind":"number","nativeSrc":"2282:2:63","nodeType":"YulLiteral","src":"2282:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2267:3:63","nodeType":"YulIdentifier","src":"2267:3:63"},"nativeSrc":"2267:18:63","nodeType":"YulFunctionCall","src":"2267:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2259:4:63","nodeType":"YulIdentifier","src":"2259:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2301:9:63","nodeType":"YulIdentifier","src":"2301:9:63"},{"name":"value0","nativeSrc":"2312:6:63","nodeType":"YulIdentifier","src":"2312:6:63"}],"functionName":{"name":"mstore","nativeSrc":"2294:6:63","nodeType":"YulIdentifier","src":"2294:6:63"},"nativeSrc":"2294:25:63","nodeType":"YulFunctionCall","src":"2294:25:63"},"nativeSrc":"2294:25:63","nodeType":"YulExpressionStatement","src":"2294:25:63"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2148:177:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2218:9:63","nodeType":"YulTypedName","src":"2218:9:63","type":""},{"name":"value0","nativeSrc":"2229:6:63","nodeType":"YulTypedName","src":"2229:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2240:4:63","nodeType":"YulTypedName","src":"2240:4:63","type":""}],"src":"2148:177:63"},{"body":{"nativeSrc":"2458:125:63","nodeType":"YulBlock","src":"2458:125:63","statements":[{"nativeSrc":"2468:26:63","nodeType":"YulAssignment","src":"2468:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2480:9:63","nodeType":"YulIdentifier","src":"2480:9:63"},{"kind":"number","nativeSrc":"2491:2:63","nodeType":"YulLiteral","src":"2491:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2476:3:63","nodeType":"YulIdentifier","src":"2476:3:63"},"nativeSrc":"2476:18:63","nodeType":"YulFunctionCall","src":"2476:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2468:4:63","nodeType":"YulIdentifier","src":"2468:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2510:9:63","nodeType":"YulIdentifier","src":"2510:9:63"},{"arguments":[{"name":"value0","nativeSrc":"2525:6:63","nodeType":"YulIdentifier","src":"2525:6:63"},{"kind":"number","nativeSrc":"2533:42:63","nodeType":"YulLiteral","src":"2533:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2521:3:63","nodeType":"YulIdentifier","src":"2521:3:63"},"nativeSrc":"2521:55:63","nodeType":"YulFunctionCall","src":"2521:55:63"}],"functionName":{"name":"mstore","nativeSrc":"2503:6:63","nodeType":"YulIdentifier","src":"2503:6:63"},"nativeSrc":"2503:74:63","nodeType":"YulFunctionCall","src":"2503:74:63"},"nativeSrc":"2503:74:63","nodeType":"YulExpressionStatement","src":"2503:74:63"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1506__to_t_address__fromStack_reversed","nativeSrc":"2330:253:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2427:9:63","nodeType":"YulTypedName","src":"2427:9:63","type":""},{"name":"value0","nativeSrc":"2438:6:63","nodeType":"YulTypedName","src":"2438:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2449:4:63","nodeType":"YulTypedName","src":"2449:4:63","type":""}],"src":"2330:253:63"},{"body":{"nativeSrc":"2705:125:63","nodeType":"YulBlock","src":"2705:125:63","statements":[{"nativeSrc":"2715:26:63","nodeType":"YulAssignment","src":"2715:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"2727:9:63","nodeType":"YulIdentifier","src":"2727:9:63"},{"kind":"number","nativeSrc":"2738:2:63","nodeType":"YulLiteral","src":"2738:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2723:3:63","nodeType":"YulIdentifier","src":"2723:3:63"},"nativeSrc":"2723:18:63","nodeType":"YulFunctionCall","src":"2723:18:63"},"variableNames":[{"name":"tail","nativeSrc":"2715:4:63","nodeType":"YulIdentifier","src":"2715:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2757:9:63","nodeType":"YulIdentifier","src":"2757:9:63"},{"arguments":[{"name":"value0","nativeSrc":"2772:6:63","nodeType":"YulIdentifier","src":"2772:6:63"},{"kind":"number","nativeSrc":"2780:42:63","nodeType":"YulLiteral","src":"2780:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2768:3:63","nodeType":"YulIdentifier","src":"2768:3:63"},"nativeSrc":"2768:55:63","nodeType":"YulFunctionCall","src":"2768:55:63"}],"functionName":{"name":"mstore","nativeSrc":"2750:6:63","nodeType":"YulIdentifier","src":"2750:6:63"},"nativeSrc":"2750:74:63","nodeType":"YulFunctionCall","src":"2750:74:63"},"nativeSrc":"2750:74:63","nodeType":"YulExpressionStatement","src":"2750:74:63"}]},"name":"abi_encode_tuple_t_contract$_IPoints_$5929__to_t_address__fromStack_reversed","nativeSrc":"2588:242:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2674:9:63","nodeType":"YulTypedName","src":"2674:9:63","type":""},{"name":"value0","nativeSrc":"2685:6:63","nodeType":"YulTypedName","src":"2685:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2696:4:63","nodeType":"YulTypedName","src":"2696:4:63","type":""}],"src":"2588:242:63"},{"body":{"nativeSrc":"2922:280:63","nodeType":"YulBlock","src":"2922:280:63","statements":[{"body":{"nativeSrc":"2968:16:63","nodeType":"YulBlock","src":"2968:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2977:1:63","nodeType":"YulLiteral","src":"2977:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"2980:1:63","nodeType":"YulLiteral","src":"2980:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2970:6:63","nodeType":"YulIdentifier","src":"2970:6:63"},"nativeSrc":"2970:12:63","nodeType":"YulFunctionCall","src":"2970:12:63"},"nativeSrc":"2970:12:63","nodeType":"YulExpressionStatement","src":"2970:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2943:7:63","nodeType":"YulIdentifier","src":"2943:7:63"},{"name":"headStart","nativeSrc":"2952:9:63","nodeType":"YulIdentifier","src":"2952:9:63"}],"functionName":{"name":"sub","nativeSrc":"2939:3:63","nodeType":"YulIdentifier","src":"2939:3:63"},"nativeSrc":"2939:23:63","nodeType":"YulFunctionCall","src":"2939:23:63"},{"kind":"number","nativeSrc":"2964:2:63","nodeType":"YulLiteral","src":"2964:2:63","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2935:3:63","nodeType":"YulIdentifier","src":"2935:3:63"},"nativeSrc":"2935:32:63","nodeType":"YulFunctionCall","src":"2935:32:63"},"nativeSrc":"2932:52:63","nodeType":"YulIf","src":"2932:52:63"},{"nativeSrc":"2993:14:63","nodeType":"YulVariableDeclaration","src":"2993:14:63","value":{"kind":"number","nativeSrc":"3006:1:63","nodeType":"YulLiteral","src":"3006:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2997:5:63","nodeType":"YulTypedName","src":"2997:5:63","type":""}]},{"nativeSrc":"3016:32:63","nodeType":"YulAssignment","src":"3016:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"3038:9:63","nodeType":"YulIdentifier","src":"3038:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"3025:12:63","nodeType":"YulIdentifier","src":"3025:12:63"},"nativeSrc":"3025:23:63","nodeType":"YulFunctionCall","src":"3025:23:63"},"variableNames":[{"name":"value","nativeSrc":"3016:5:63","nodeType":"YulIdentifier","src":"3016:5:63"}]},{"nativeSrc":"3057:15:63","nodeType":"YulAssignment","src":"3057:15:63","value":{"name":"value","nativeSrc":"3067:5:63","nodeType":"YulIdentifier","src":"3067:5:63"},"variableNames":[{"name":"value0","nativeSrc":"3057:6:63","nodeType":"YulIdentifier","src":"3057:6:63"}]},{"nativeSrc":"3081:47:63","nodeType":"YulVariableDeclaration","src":"3081:47:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3113:9:63","nodeType":"YulIdentifier","src":"3113:9:63"},{"kind":"number","nativeSrc":"3124:2:63","nodeType":"YulLiteral","src":"3124:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3109:3:63","nodeType":"YulIdentifier","src":"3109:3:63"},"nativeSrc":"3109:18:63","nodeType":"YulFunctionCall","src":"3109:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3096:12:63","nodeType":"YulIdentifier","src":"3096:12:63"},"nativeSrc":"3096:32:63","nodeType":"YulFunctionCall","src":"3096:32:63"},"variables":[{"name":"value_1","nativeSrc":"3085:7:63","nodeType":"YulTypedName","src":"3085:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3162:7:63","nodeType":"YulIdentifier","src":"3162:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3137:24:63","nodeType":"YulIdentifier","src":"3137:24:63"},"nativeSrc":"3137:33:63","nodeType":"YulFunctionCall","src":"3137:33:63"},"nativeSrc":"3137:33:63","nodeType":"YulExpressionStatement","src":"3137:33:63"},{"nativeSrc":"3179:17:63","nodeType":"YulAssignment","src":"3179:17:63","value":{"name":"value_1","nativeSrc":"3189:7:63","nodeType":"YulIdentifier","src":"3189:7:63"},"variableNames":[{"name":"value1","nativeSrc":"3179:6:63","nodeType":"YulIdentifier","src":"3179:6:63"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2835:367:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2880:9:63","nodeType":"YulTypedName","src":"2880:9:63","type":""},{"name":"dataEnd","nativeSrc":"2891:7:63","nodeType":"YulTypedName","src":"2891:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2903:6:63","nodeType":"YulTypedName","src":"2903:6:63","type":""},{"name":"value1","nativeSrc":"2911:6:63","nodeType":"YulTypedName","src":"2911:6:63","type":""}],"src":"2835:367:63"},{"body":{"nativeSrc":"3347:666:63","nodeType":"YulBlock","src":"3347:666:63","statements":[{"body":{"nativeSrc":"3394:16:63","nodeType":"YulBlock","src":"3394:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3403:1:63","nodeType":"YulLiteral","src":"3403:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"3406:1:63","nodeType":"YulLiteral","src":"3406:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3396:6:63","nodeType":"YulIdentifier","src":"3396:6:63"},"nativeSrc":"3396:12:63","nodeType":"YulFunctionCall","src":"3396:12:63"},"nativeSrc":"3396:12:63","nodeType":"YulExpressionStatement","src":"3396:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3368:7:63","nodeType":"YulIdentifier","src":"3368:7:63"},{"name":"headStart","nativeSrc":"3377:9:63","nodeType":"YulIdentifier","src":"3377:9:63"}],"functionName":{"name":"sub","nativeSrc":"3364:3:63","nodeType":"YulIdentifier","src":"3364:3:63"},"nativeSrc":"3364:23:63","nodeType":"YulFunctionCall","src":"3364:23:63"},{"kind":"number","nativeSrc":"3389:3:63","nodeType":"YulLiteral","src":"3389:3:63","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3360:3:63","nodeType":"YulIdentifier","src":"3360:3:63"},"nativeSrc":"3360:33:63","nodeType":"YulFunctionCall","src":"3360:33:63"},"nativeSrc":"3357:53:63","nodeType":"YulIf","src":"3357:53:63"},{"nativeSrc":"3419:36:63","nodeType":"YulVariableDeclaration","src":"3419:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"3445:9:63","nodeType":"YulIdentifier","src":"3445:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"3432:12:63","nodeType":"YulIdentifier","src":"3432:12:63"},"nativeSrc":"3432:23:63","nodeType":"YulFunctionCall","src":"3432:23:63"},"variables":[{"name":"value","nativeSrc":"3423:5:63","nodeType":"YulTypedName","src":"3423:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3489:5:63","nodeType":"YulIdentifier","src":"3489:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3464:24:63","nodeType":"YulIdentifier","src":"3464:24:63"},"nativeSrc":"3464:31:63","nodeType":"YulFunctionCall","src":"3464:31:63"},"nativeSrc":"3464:31:63","nodeType":"YulExpressionStatement","src":"3464:31:63"},{"nativeSrc":"3504:15:63","nodeType":"YulAssignment","src":"3504:15:63","value":{"name":"value","nativeSrc":"3514:5:63","nodeType":"YulIdentifier","src":"3514:5:63"},"variableNames":[{"name":"value0","nativeSrc":"3504:6:63","nodeType":"YulIdentifier","src":"3504:6:63"}]},{"nativeSrc":"3528:47:63","nodeType":"YulVariableDeclaration","src":"3528:47:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3560:9:63","nodeType":"YulIdentifier","src":"3560:9:63"},{"kind":"number","nativeSrc":"3571:2:63","nodeType":"YulLiteral","src":"3571:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3556:3:63","nodeType":"YulIdentifier","src":"3556:3:63"},"nativeSrc":"3556:18:63","nodeType":"YulFunctionCall","src":"3556:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3543:12:63","nodeType":"YulIdentifier","src":"3543:12:63"},"nativeSrc":"3543:32:63","nodeType":"YulFunctionCall","src":"3543:32:63"},"variables":[{"name":"value_1","nativeSrc":"3532:7:63","nodeType":"YulTypedName","src":"3532:7:63","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3609:7:63","nodeType":"YulIdentifier","src":"3609:7:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3584:24:63","nodeType":"YulIdentifier","src":"3584:24:63"},"nativeSrc":"3584:33:63","nodeType":"YulFunctionCall","src":"3584:33:63"},"nativeSrc":"3584:33:63","nodeType":"YulExpressionStatement","src":"3584:33:63"},{"nativeSrc":"3626:17:63","nodeType":"YulAssignment","src":"3626:17:63","value":{"name":"value_1","nativeSrc":"3636:7:63","nodeType":"YulIdentifier","src":"3636:7:63"},"variableNames":[{"name":"value1","nativeSrc":"3626:6:63","nodeType":"YulIdentifier","src":"3626:6:63"}]},{"nativeSrc":"3652:16:63","nodeType":"YulVariableDeclaration","src":"3652:16:63","value":{"kind":"number","nativeSrc":"3667:1:63","nodeType":"YulLiteral","src":"3667:1:63","type":"","value":"0"},"variables":[{"name":"value_2","nativeSrc":"3656:7:63","nodeType":"YulTypedName","src":"3656:7:63","type":""}]},{"nativeSrc":"3677:43:63","nodeType":"YulAssignment","src":"3677:43:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3705:9:63","nodeType":"YulIdentifier","src":"3705:9:63"},{"kind":"number","nativeSrc":"3716:2:63","nodeType":"YulLiteral","src":"3716:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3701:3:63","nodeType":"YulIdentifier","src":"3701:3:63"},"nativeSrc":"3701:18:63","nodeType":"YulFunctionCall","src":"3701:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3688:12:63","nodeType":"YulIdentifier","src":"3688:12:63"},"nativeSrc":"3688:32:63","nodeType":"YulFunctionCall","src":"3688:32:63"},"variableNames":[{"name":"value_2","nativeSrc":"3677:7:63","nodeType":"YulIdentifier","src":"3677:7:63"}]},{"nativeSrc":"3729:17:63","nodeType":"YulAssignment","src":"3729:17:63","value":{"name":"value_2","nativeSrc":"3739:7:63","nodeType":"YulIdentifier","src":"3739:7:63"},"variableNames":[{"name":"value2","nativeSrc":"3729:6:63","nodeType":"YulIdentifier","src":"3729:6:63"}]},{"nativeSrc":"3755:46:63","nodeType":"YulVariableDeclaration","src":"3755:46:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3786:9:63","nodeType":"YulIdentifier","src":"3786:9:63"},{"kind":"number","nativeSrc":"3797:2:63","nodeType":"YulLiteral","src":"3797:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3782:3:63","nodeType":"YulIdentifier","src":"3782:3:63"},"nativeSrc":"3782:18:63","nodeType":"YulFunctionCall","src":"3782:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"3769:12:63","nodeType":"YulIdentifier","src":"3769:12:63"},"nativeSrc":"3769:32:63","nodeType":"YulFunctionCall","src":"3769:32:63"},"variables":[{"name":"offset","nativeSrc":"3759:6:63","nodeType":"YulTypedName","src":"3759:6:63","type":""}]},{"body":{"nativeSrc":"3844:16:63","nodeType":"YulBlock","src":"3844:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3853:1:63","nodeType":"YulLiteral","src":"3853:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"3856:1:63","nodeType":"YulLiteral","src":"3856:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3846:6:63","nodeType":"YulIdentifier","src":"3846:6:63"},"nativeSrc":"3846:12:63","nodeType":"YulFunctionCall","src":"3846:12:63"},"nativeSrc":"3846:12:63","nodeType":"YulExpressionStatement","src":"3846:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3816:6:63","nodeType":"YulIdentifier","src":"3816:6:63"},{"kind":"number","nativeSrc":"3824:18:63","nodeType":"YulLiteral","src":"3824:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3813:2:63","nodeType":"YulIdentifier","src":"3813:2:63"},"nativeSrc":"3813:30:63","nodeType":"YulFunctionCall","src":"3813:30:63"},"nativeSrc":"3810:50:63","nodeType":"YulIf","src":"3810:50:63"},{"nativeSrc":"3869:84:63","nodeType":"YulVariableDeclaration","src":"3869:84:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3925:9:63","nodeType":"YulIdentifier","src":"3925:9:63"},{"name":"offset","nativeSrc":"3936:6:63","nodeType":"YulIdentifier","src":"3936:6:63"}],"functionName":{"name":"add","nativeSrc":"3921:3:63","nodeType":"YulIdentifier","src":"3921:3:63"},"nativeSrc":"3921:22:63","nodeType":"YulFunctionCall","src":"3921:22:63"},{"name":"dataEnd","nativeSrc":"3945:7:63","nodeType":"YulIdentifier","src":"3945:7:63"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3895:25:63","nodeType":"YulIdentifier","src":"3895:25:63"},"nativeSrc":"3895:58:63","nodeType":"YulFunctionCall","src":"3895:58:63"},"variables":[{"name":"value3_1","nativeSrc":"3873:8:63","nodeType":"YulTypedName","src":"3873:8:63","type":""},{"name":"value4_1","nativeSrc":"3883:8:63","nodeType":"YulTypedName","src":"3883:8:63","type":""}]},{"nativeSrc":"3962:18:63","nodeType":"YulAssignment","src":"3962:18:63","value":{"name":"value3_1","nativeSrc":"3972:8:63","nodeType":"YulIdentifier","src":"3972:8:63"},"variableNames":[{"name":"value3","nativeSrc":"3962:6:63","nodeType":"YulIdentifier","src":"3962:6:63"}]},{"nativeSrc":"3989:18:63","nodeType":"YulAssignment","src":"3989:18:63","value":{"name":"value4_1","nativeSrc":"3999:8:63","nodeType":"YulIdentifier","src":"3999:8:63"},"variableNames":[{"name":"value4","nativeSrc":"3989:6:63","nodeType":"YulIdentifier","src":"3989:6:63"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"3207:806:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3281:9:63","nodeType":"YulTypedName","src":"3281:9:63","type":""},{"name":"dataEnd","nativeSrc":"3292:7:63","nodeType":"YulTypedName","src":"3292:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3304:6:63","nodeType":"YulTypedName","src":"3304:6:63","type":""},{"name":"value1","nativeSrc":"3312:6:63","nodeType":"YulTypedName","src":"3312:6:63","type":""},{"name":"value2","nativeSrc":"3320:6:63","nodeType":"YulTypedName","src":"3320:6:63","type":""},{"name":"value3","nativeSrc":"3328:6:63","nodeType":"YulTypedName","src":"3328:6:63","type":""},{"name":"value4","nativeSrc":"3336:6:63","nodeType":"YulTypedName","src":"3336:6:63","type":""}],"src":"3207:806:63"},{"body":{"nativeSrc":"4117:149:63","nodeType":"YulBlock","src":"4117:149:63","statements":[{"nativeSrc":"4127:26:63","nodeType":"YulAssignment","src":"4127:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"4139:9:63","nodeType":"YulIdentifier","src":"4139:9:63"},{"kind":"number","nativeSrc":"4150:2:63","nodeType":"YulLiteral","src":"4150:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4135:3:63","nodeType":"YulIdentifier","src":"4135:3:63"},"nativeSrc":"4135:18:63","nodeType":"YulFunctionCall","src":"4135:18:63"},"variableNames":[{"name":"tail","nativeSrc":"4127:4:63","nodeType":"YulIdentifier","src":"4127:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4169:9:63","nodeType":"YulIdentifier","src":"4169:9:63"},{"arguments":[{"name":"value0","nativeSrc":"4184:6:63","nodeType":"YulIdentifier","src":"4184:6:63"},{"kind":"number","nativeSrc":"4192:66:63","nodeType":"YulLiteral","src":"4192:66:63","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4180:3:63","nodeType":"YulIdentifier","src":"4180:3:63"},"nativeSrc":"4180:79:63","nodeType":"YulFunctionCall","src":"4180:79:63"}],"functionName":{"name":"mstore","nativeSrc":"4162:6:63","nodeType":"YulIdentifier","src":"4162:6:63"},"nativeSrc":"4162:98:63","nodeType":"YulFunctionCall","src":"4162:98:63"},"nativeSrc":"4162:98:63","nodeType":"YulExpressionStatement","src":"4162:98:63"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4018:248:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4086:9:63","nodeType":"YulTypedName","src":"4086:9:63","type":""},{"name":"value0","nativeSrc":"4097:6:63","nodeType":"YulTypedName","src":"4097:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4108:4:63","nodeType":"YulTypedName","src":"4108:4:63","type":""}],"src":"4018:248:63"},{"body":{"nativeSrc":"4372:125:63","nodeType":"YulBlock","src":"4372:125:63","statements":[{"nativeSrc":"4382:26:63","nodeType":"YulAssignment","src":"4382:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"4394:9:63","nodeType":"YulIdentifier","src":"4394:9:63"},{"kind":"number","nativeSrc":"4405:2:63","nodeType":"YulLiteral","src":"4405:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4390:3:63","nodeType":"YulIdentifier","src":"4390:3:63"},"nativeSrc":"4390:18:63","nodeType":"YulFunctionCall","src":"4390:18:63"},"variableNames":[{"name":"tail","nativeSrc":"4382:4:63","nodeType":"YulIdentifier","src":"4382:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4424:9:63","nodeType":"YulIdentifier","src":"4424:9:63"},{"arguments":[{"name":"value0","nativeSrc":"4439:6:63","nodeType":"YulIdentifier","src":"4439:6:63"},{"kind":"number","nativeSrc":"4447:42:63","nodeType":"YulLiteral","src":"4447:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4435:3:63","nodeType":"YulIdentifier","src":"4435:3:63"},"nativeSrc":"4435:55:63","nodeType":"YulFunctionCall","src":"4435:55:63"}],"functionName":{"name":"mstore","nativeSrc":"4417:6:63","nodeType":"YulIdentifier","src":"4417:6:63"},"nativeSrc":"4417:74:63","nodeType":"YulFunctionCall","src":"4417:74:63"},"nativeSrc":"4417:74:63","nodeType":"YulExpressionStatement","src":"4417:74:63"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4271:226:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4341:9:63","nodeType":"YulTypedName","src":"4341:9:63","type":""},{"name":"value0","nativeSrc":"4352:6:63","nodeType":"YulTypedName","src":"4352:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4363:4:63","nodeType":"YulTypedName","src":"4363:4:63","type":""}],"src":"4271:226:63"},{"body":{"nativeSrc":"4586:283:63","nodeType":"YulBlock","src":"4586:283:63","statements":[{"body":{"nativeSrc":"4635:16:63","nodeType":"YulBlock","src":"4635:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4644:1:63","nodeType":"YulLiteral","src":"4644:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"4647:1:63","nodeType":"YulLiteral","src":"4647:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4637:6:63","nodeType":"YulIdentifier","src":"4637:6:63"},"nativeSrc":"4637:12:63","nodeType":"YulFunctionCall","src":"4637:12:63"},"nativeSrc":"4637:12:63","nodeType":"YulExpressionStatement","src":"4637:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4614:6:63","nodeType":"YulIdentifier","src":"4614:6:63"},{"kind":"number","nativeSrc":"4622:4:63","nodeType":"YulLiteral","src":"4622:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4610:3:63","nodeType":"YulIdentifier","src":"4610:3:63"},"nativeSrc":"4610:17:63","nodeType":"YulFunctionCall","src":"4610:17:63"},{"name":"end","nativeSrc":"4629:3:63","nodeType":"YulIdentifier","src":"4629:3:63"}],"functionName":{"name":"slt","nativeSrc":"4606:3:63","nodeType":"YulIdentifier","src":"4606:3:63"},"nativeSrc":"4606:27:63","nodeType":"YulFunctionCall","src":"4606:27:63"}],"functionName":{"name":"iszero","nativeSrc":"4599:6:63","nodeType":"YulIdentifier","src":"4599:6:63"},"nativeSrc":"4599:35:63","nodeType":"YulFunctionCall","src":"4599:35:63"},"nativeSrc":"4596:55:63","nodeType":"YulIf","src":"4596:55:63"},{"nativeSrc":"4660:30:63","nodeType":"YulAssignment","src":"4660:30:63","value":{"arguments":[{"name":"offset","nativeSrc":"4683:6:63","nodeType":"YulIdentifier","src":"4683:6:63"}],"functionName":{"name":"calldataload","nativeSrc":"4670:12:63","nodeType":"YulIdentifier","src":"4670:12:63"},"nativeSrc":"4670:20:63","nodeType":"YulFunctionCall","src":"4670:20:63"},"variableNames":[{"name":"length","nativeSrc":"4660:6:63","nodeType":"YulIdentifier","src":"4660:6:63"}]},{"body":{"nativeSrc":"4733:16:63","nodeType":"YulBlock","src":"4733:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4742:1:63","nodeType":"YulLiteral","src":"4742:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"4745:1:63","nodeType":"YulLiteral","src":"4745:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4735:6:63","nodeType":"YulIdentifier","src":"4735:6:63"},"nativeSrc":"4735:12:63","nodeType":"YulFunctionCall","src":"4735:12:63"},"nativeSrc":"4735:12:63","nodeType":"YulExpressionStatement","src":"4735:12:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4705:6:63","nodeType":"YulIdentifier","src":"4705:6:63"},{"kind":"number","nativeSrc":"4713:18:63","nodeType":"YulLiteral","src":"4713:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4702:2:63","nodeType":"YulIdentifier","src":"4702:2:63"},"nativeSrc":"4702:30:63","nodeType":"YulFunctionCall","src":"4702:30:63"},"nativeSrc":"4699:50:63","nodeType":"YulIf","src":"4699:50:63"},{"nativeSrc":"4758:29:63","nodeType":"YulAssignment","src":"4758:29:63","value":{"arguments":[{"name":"offset","nativeSrc":"4774:6:63","nodeType":"YulIdentifier","src":"4774:6:63"},{"kind":"number","nativeSrc":"4782:4:63","nodeType":"YulLiteral","src":"4782:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4770:3:63","nodeType":"YulIdentifier","src":"4770:3:63"},"nativeSrc":"4770:17:63","nodeType":"YulFunctionCall","src":"4770:17:63"},"variableNames":[{"name":"arrayPos","nativeSrc":"4758:8:63","nodeType":"YulIdentifier","src":"4758:8:63"}]},{"body":{"nativeSrc":"4847:16:63","nodeType":"YulBlock","src":"4847:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4856:1:63","nodeType":"YulLiteral","src":"4856:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"4859:1:63","nodeType":"YulLiteral","src":"4859:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4849:6:63","nodeType":"YulIdentifier","src":"4849:6:63"},"nativeSrc":"4849:12:63","nodeType":"YulFunctionCall","src":"4849:12:63"},"nativeSrc":"4849:12:63","nodeType":"YulExpressionStatement","src":"4849:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4810:6:63","nodeType":"YulIdentifier","src":"4810:6:63"},{"arguments":[{"kind":"number","nativeSrc":"4822:1:63","nodeType":"YulLiteral","src":"4822:1:63","type":"","value":"5"},{"name":"length","nativeSrc":"4825:6:63","nodeType":"YulIdentifier","src":"4825:6:63"}],"functionName":{"name":"shl","nativeSrc":"4818:3:63","nodeType":"YulIdentifier","src":"4818:3:63"},"nativeSrc":"4818:14:63","nodeType":"YulFunctionCall","src":"4818:14:63"}],"functionName":{"name":"add","nativeSrc":"4806:3:63","nodeType":"YulIdentifier","src":"4806:3:63"},"nativeSrc":"4806:27:63","nodeType":"YulFunctionCall","src":"4806:27:63"},{"kind":"number","nativeSrc":"4835:4:63","nodeType":"YulLiteral","src":"4835:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4802:3:63","nodeType":"YulIdentifier","src":"4802:3:63"},"nativeSrc":"4802:38:63","nodeType":"YulFunctionCall","src":"4802:38:63"},{"name":"end","nativeSrc":"4842:3:63","nodeType":"YulIdentifier","src":"4842:3:63"}],"functionName":{"name":"gt","nativeSrc":"4799:2:63","nodeType":"YulIdentifier","src":"4799:2:63"},"nativeSrc":"4799:47:63","nodeType":"YulFunctionCall","src":"4799:47:63"},"nativeSrc":"4796:67:63","nodeType":"YulIf","src":"4796:67:63"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4502:367:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4549:6:63","nodeType":"YulTypedName","src":"4549:6:63","type":""},{"name":"end","nativeSrc":"4557:3:63","nodeType":"YulTypedName","src":"4557:3:63","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"4565:8:63","nodeType":"YulTypedName","src":"4565:8:63","type":""},{"name":"length","nativeSrc":"4575:6:63","nodeType":"YulTypedName","src":"4575:6:63","type":""}],"src":"4502:367:63"},{"body":{"nativeSrc":"5098:890:63","nodeType":"YulBlock","src":"5098:890:63","statements":[{"body":{"nativeSrc":"5144:16:63","nodeType":"YulBlock","src":"5144:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5153:1:63","nodeType":"YulLiteral","src":"5153:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5156:1:63","nodeType":"YulLiteral","src":"5156:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5146:6:63","nodeType":"YulIdentifier","src":"5146:6:63"},"nativeSrc":"5146:12:63","nodeType":"YulFunctionCall","src":"5146:12:63"},"nativeSrc":"5146:12:63","nodeType":"YulExpressionStatement","src":"5146:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5119:7:63","nodeType":"YulIdentifier","src":"5119:7:63"},{"name":"headStart","nativeSrc":"5128:9:63","nodeType":"YulIdentifier","src":"5128:9:63"}],"functionName":{"name":"sub","nativeSrc":"5115:3:63","nodeType":"YulIdentifier","src":"5115:3:63"},"nativeSrc":"5115:23:63","nodeType":"YulFunctionCall","src":"5115:23:63"},{"kind":"number","nativeSrc":"5140:2:63","nodeType":"YulLiteral","src":"5140:2:63","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5111:3:63","nodeType":"YulIdentifier","src":"5111:3:63"},"nativeSrc":"5111:32:63","nodeType":"YulFunctionCall","src":"5111:32:63"},"nativeSrc":"5108:52:63","nodeType":"YulIf","src":"5108:52:63"},{"nativeSrc":"5169:37:63","nodeType":"YulVariableDeclaration","src":"5169:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"5196:9:63","nodeType":"YulIdentifier","src":"5196:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"5183:12:63","nodeType":"YulIdentifier","src":"5183:12:63"},"nativeSrc":"5183:23:63","nodeType":"YulFunctionCall","src":"5183:23:63"},"variables":[{"name":"offset","nativeSrc":"5173:6:63","nodeType":"YulTypedName","src":"5173:6:63","type":""}]},{"body":{"nativeSrc":"5249:16:63","nodeType":"YulBlock","src":"5249:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5258:1:63","nodeType":"YulLiteral","src":"5258:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5261:1:63","nodeType":"YulLiteral","src":"5261:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5251:6:63","nodeType":"YulIdentifier","src":"5251:6:63"},"nativeSrc":"5251:12:63","nodeType":"YulFunctionCall","src":"5251:12:63"},"nativeSrc":"5251:12:63","nodeType":"YulExpressionStatement","src":"5251:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5221:6:63","nodeType":"YulIdentifier","src":"5221:6:63"},{"kind":"number","nativeSrc":"5229:18:63","nodeType":"YulLiteral","src":"5229:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5218:2:63","nodeType":"YulIdentifier","src":"5218:2:63"},"nativeSrc":"5218:30:63","nodeType":"YulFunctionCall","src":"5218:30:63"},"nativeSrc":"5215:50:63","nodeType":"YulIf","src":"5215:50:63"},{"nativeSrc":"5274:96:63","nodeType":"YulVariableDeclaration","src":"5274:96:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5342:9:63","nodeType":"YulIdentifier","src":"5342:9:63"},{"name":"offset","nativeSrc":"5353:6:63","nodeType":"YulIdentifier","src":"5353:6:63"}],"functionName":{"name":"add","nativeSrc":"5338:3:63","nodeType":"YulIdentifier","src":"5338:3:63"},"nativeSrc":"5338:22:63","nodeType":"YulFunctionCall","src":"5338:22:63"},{"name":"dataEnd","nativeSrc":"5362:7:63","nodeType":"YulIdentifier","src":"5362:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5300:37:63","nodeType":"YulIdentifier","src":"5300:37:63"},"nativeSrc":"5300:70:63","nodeType":"YulFunctionCall","src":"5300:70:63"},"variables":[{"name":"value0_1","nativeSrc":"5278:8:63","nodeType":"YulTypedName","src":"5278:8:63","type":""},{"name":"value1_1","nativeSrc":"5288:8:63","nodeType":"YulTypedName","src":"5288:8:63","type":""}]},{"nativeSrc":"5379:18:63","nodeType":"YulAssignment","src":"5379:18:63","value":{"name":"value0_1","nativeSrc":"5389:8:63","nodeType":"YulIdentifier","src":"5389:8:63"},"variableNames":[{"name":"value0","nativeSrc":"5379:6:63","nodeType":"YulIdentifier","src":"5379:6:63"}]},{"nativeSrc":"5406:18:63","nodeType":"YulAssignment","src":"5406:18:63","value":{"name":"value1_1","nativeSrc":"5416:8:63","nodeType":"YulIdentifier","src":"5416:8:63"},"variableNames":[{"name":"value1","nativeSrc":"5406:6:63","nodeType":"YulIdentifier","src":"5406:6:63"}]},{"nativeSrc":"5433:48:63","nodeType":"YulVariableDeclaration","src":"5433:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5466:9:63","nodeType":"YulIdentifier","src":"5466:9:63"},{"kind":"number","nativeSrc":"5477:2:63","nodeType":"YulLiteral","src":"5477:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5462:3:63","nodeType":"YulIdentifier","src":"5462:3:63"},"nativeSrc":"5462:18:63","nodeType":"YulFunctionCall","src":"5462:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"5449:12:63","nodeType":"YulIdentifier","src":"5449:12:63"},"nativeSrc":"5449:32:63","nodeType":"YulFunctionCall","src":"5449:32:63"},"variables":[{"name":"offset_1","nativeSrc":"5437:8:63","nodeType":"YulTypedName","src":"5437:8:63","type":""}]},{"body":{"nativeSrc":"5526:16:63","nodeType":"YulBlock","src":"5526:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5535:1:63","nodeType":"YulLiteral","src":"5535:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5538:1:63","nodeType":"YulLiteral","src":"5538:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5528:6:63","nodeType":"YulIdentifier","src":"5528:6:63"},"nativeSrc":"5528:12:63","nodeType":"YulFunctionCall","src":"5528:12:63"},"nativeSrc":"5528:12:63","nodeType":"YulExpressionStatement","src":"5528:12:63"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5496:8:63","nodeType":"YulIdentifier","src":"5496:8:63"},{"kind":"number","nativeSrc":"5506:18:63","nodeType":"YulLiteral","src":"5506:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5493:2:63","nodeType":"YulIdentifier","src":"5493:2:63"},"nativeSrc":"5493:32:63","nodeType":"YulFunctionCall","src":"5493:32:63"},"nativeSrc":"5490:52:63","nodeType":"YulIf","src":"5490:52:63"},{"nativeSrc":"5551:98:63","nodeType":"YulVariableDeclaration","src":"5551:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5619:9:63","nodeType":"YulIdentifier","src":"5619:9:63"},{"name":"offset_1","nativeSrc":"5630:8:63","nodeType":"YulIdentifier","src":"5630:8:63"}],"functionName":{"name":"add","nativeSrc":"5615:3:63","nodeType":"YulIdentifier","src":"5615:3:63"},"nativeSrc":"5615:24:63","nodeType":"YulFunctionCall","src":"5615:24:63"},{"name":"dataEnd","nativeSrc":"5641:7:63","nodeType":"YulIdentifier","src":"5641:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5577:37:63","nodeType":"YulIdentifier","src":"5577:37:63"},"nativeSrc":"5577:72:63","nodeType":"YulFunctionCall","src":"5577:72:63"},"variables":[{"name":"value2_1","nativeSrc":"5555:8:63","nodeType":"YulTypedName","src":"5555:8:63","type":""},{"name":"value3_1","nativeSrc":"5565:8:63","nodeType":"YulTypedName","src":"5565:8:63","type":""}]},{"nativeSrc":"5658:18:63","nodeType":"YulAssignment","src":"5658:18:63","value":{"name":"value2_1","nativeSrc":"5668:8:63","nodeType":"YulIdentifier","src":"5668:8:63"},"variableNames":[{"name":"value2","nativeSrc":"5658:6:63","nodeType":"YulIdentifier","src":"5658:6:63"}]},{"nativeSrc":"5685:18:63","nodeType":"YulAssignment","src":"5685:18:63","value":{"name":"value3_1","nativeSrc":"5695:8:63","nodeType":"YulIdentifier","src":"5695:8:63"},"variableNames":[{"name":"value3","nativeSrc":"5685:6:63","nodeType":"YulIdentifier","src":"5685:6:63"}]},{"nativeSrc":"5712:48:63","nodeType":"YulVariableDeclaration","src":"5712:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5745:9:63","nodeType":"YulIdentifier","src":"5745:9:63"},{"kind":"number","nativeSrc":"5756:2:63","nodeType":"YulLiteral","src":"5756:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5741:3:63","nodeType":"YulIdentifier","src":"5741:3:63"},"nativeSrc":"5741:18:63","nodeType":"YulFunctionCall","src":"5741:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"5728:12:63","nodeType":"YulIdentifier","src":"5728:12:63"},"nativeSrc":"5728:32:63","nodeType":"YulFunctionCall","src":"5728:32:63"},"variables":[{"name":"offset_2","nativeSrc":"5716:8:63","nodeType":"YulTypedName","src":"5716:8:63","type":""}]},{"body":{"nativeSrc":"5805:16:63","nodeType":"YulBlock","src":"5805:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5814:1:63","nodeType":"YulLiteral","src":"5814:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"5817:1:63","nodeType":"YulLiteral","src":"5817:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5807:6:63","nodeType":"YulIdentifier","src":"5807:6:63"},"nativeSrc":"5807:12:63","nodeType":"YulFunctionCall","src":"5807:12:63"},"nativeSrc":"5807:12:63","nodeType":"YulExpressionStatement","src":"5807:12:63"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"5775:8:63","nodeType":"YulIdentifier","src":"5775:8:63"},{"kind":"number","nativeSrc":"5785:18:63","nodeType":"YulLiteral","src":"5785:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5772:2:63","nodeType":"YulIdentifier","src":"5772:2:63"},"nativeSrc":"5772:32:63","nodeType":"YulFunctionCall","src":"5772:32:63"},"nativeSrc":"5769:52:63","nodeType":"YulIf","src":"5769:52:63"},{"nativeSrc":"5830:98:63","nodeType":"YulVariableDeclaration","src":"5830:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5898:9:63","nodeType":"YulIdentifier","src":"5898:9:63"},{"name":"offset_2","nativeSrc":"5909:8:63","nodeType":"YulIdentifier","src":"5909:8:63"}],"functionName":{"name":"add","nativeSrc":"5894:3:63","nodeType":"YulIdentifier","src":"5894:3:63"},"nativeSrc":"5894:24:63","nodeType":"YulFunctionCall","src":"5894:24:63"},{"name":"dataEnd","nativeSrc":"5920:7:63","nodeType":"YulIdentifier","src":"5920:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5856:37:63","nodeType":"YulIdentifier","src":"5856:37:63"},"nativeSrc":"5856:72:63","nodeType":"YulFunctionCall","src":"5856:72:63"},"variables":[{"name":"value4_1","nativeSrc":"5834:8:63","nodeType":"YulTypedName","src":"5834:8:63","type":""},{"name":"value5_1","nativeSrc":"5844:8:63","nodeType":"YulTypedName","src":"5844:8:63","type":""}]},{"nativeSrc":"5937:18:63","nodeType":"YulAssignment","src":"5937:18:63","value":{"name":"value4_1","nativeSrc":"5947:8:63","nodeType":"YulIdentifier","src":"5947:8:63"},"variableNames":[{"name":"value4","nativeSrc":"5937:6:63","nodeType":"YulIdentifier","src":"5937:6:63"}]},{"nativeSrc":"5964:18:63","nodeType":"YulAssignment","src":"5964:18:63","value":{"name":"value5_1","nativeSrc":"5974:8:63","nodeType":"YulIdentifier","src":"5974:8:63"},"variableNames":[{"name":"value5","nativeSrc":"5964:6:63","nodeType":"YulIdentifier","src":"5964:6:63"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4874:1114:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5024:9:63","nodeType":"YulTypedName","src":"5024:9:63","type":""},{"name":"dataEnd","nativeSrc":"5035:7:63","nodeType":"YulTypedName","src":"5035:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5047:6:63","nodeType":"YulTypedName","src":"5047:6:63","type":""},{"name":"value1","nativeSrc":"5055:6:63","nodeType":"YulTypedName","src":"5055:6:63","type":""},{"name":"value2","nativeSrc":"5063:6:63","nodeType":"YulTypedName","src":"5063:6:63","type":""},{"name":"value3","nativeSrc":"5071:6:63","nodeType":"YulTypedName","src":"5071:6:63","type":""},{"name":"value4","nativeSrc":"5079:6:63","nodeType":"YulTypedName","src":"5079:6:63","type":""},{"name":"value5","nativeSrc":"5087:6:63","nodeType":"YulTypedName","src":"5087:6:63","type":""}],"src":"4874:1114:63"},{"body":{"nativeSrc":"6080:259:63","nodeType":"YulBlock","src":"6080:259:63","statements":[{"body":{"nativeSrc":"6126:16:63","nodeType":"YulBlock","src":"6126:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6135:1:63","nodeType":"YulLiteral","src":"6135:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6138:1:63","nodeType":"YulLiteral","src":"6138:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6128:6:63","nodeType":"YulIdentifier","src":"6128:6:63"},"nativeSrc":"6128:12:63","nodeType":"YulFunctionCall","src":"6128:12:63"},"nativeSrc":"6128:12:63","nodeType":"YulExpressionStatement","src":"6128:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6101:7:63","nodeType":"YulIdentifier","src":"6101:7:63"},{"name":"headStart","nativeSrc":"6110:9:63","nodeType":"YulIdentifier","src":"6110:9:63"}],"functionName":{"name":"sub","nativeSrc":"6097:3:63","nodeType":"YulIdentifier","src":"6097:3:63"},"nativeSrc":"6097:23:63","nodeType":"YulFunctionCall","src":"6097:23:63"},{"kind":"number","nativeSrc":"6122:2:63","nodeType":"YulLiteral","src":"6122:2:63","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6093:3:63","nodeType":"YulIdentifier","src":"6093:3:63"},"nativeSrc":"6093:32:63","nodeType":"YulFunctionCall","src":"6093:32:63"},"nativeSrc":"6090:52:63","nodeType":"YulIf","src":"6090:52:63"},{"nativeSrc":"6151:14:63","nodeType":"YulVariableDeclaration","src":"6151:14:63","value":{"kind":"number","nativeSrc":"6164:1:63","nodeType":"YulLiteral","src":"6164:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"6155:5:63","nodeType":"YulTypedName","src":"6155:5:63","type":""}]},{"nativeSrc":"6174:32:63","nodeType":"YulAssignment","src":"6174:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"6196:9:63","nodeType":"YulIdentifier","src":"6196:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"6183:12:63","nodeType":"YulIdentifier","src":"6183:12:63"},"nativeSrc":"6183:23:63","nodeType":"YulFunctionCall","src":"6183:23:63"},"variableNames":[{"name":"value","nativeSrc":"6174:5:63","nodeType":"YulIdentifier","src":"6174:5:63"}]},{"nativeSrc":"6215:15:63","nodeType":"YulAssignment","src":"6215:15:63","value":{"name":"value","nativeSrc":"6225:5:63","nodeType":"YulIdentifier","src":"6225:5:63"},"variableNames":[{"name":"value0","nativeSrc":"6215:6:63","nodeType":"YulIdentifier","src":"6215:6:63"}]},{"nativeSrc":"6239:16:63","nodeType":"YulVariableDeclaration","src":"6239:16:63","value":{"kind":"number","nativeSrc":"6254:1:63","nodeType":"YulLiteral","src":"6254:1:63","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"6243:7:63","nodeType":"YulTypedName","src":"6243:7:63","type":""}]},{"nativeSrc":"6264:43:63","nodeType":"YulAssignment","src":"6264:43:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6292:9:63","nodeType":"YulIdentifier","src":"6292:9:63"},{"kind":"number","nativeSrc":"6303:2:63","nodeType":"YulLiteral","src":"6303:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6288:3:63","nodeType":"YulIdentifier","src":"6288:3:63"},"nativeSrc":"6288:18:63","nodeType":"YulFunctionCall","src":"6288:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"6275:12:63","nodeType":"YulIdentifier","src":"6275:12:63"},"nativeSrc":"6275:32:63","nodeType":"YulFunctionCall","src":"6275:32:63"},"variableNames":[{"name":"value_1","nativeSrc":"6264:7:63","nodeType":"YulIdentifier","src":"6264:7:63"}]},{"nativeSrc":"6316:17:63","nodeType":"YulAssignment","src":"6316:17:63","value":{"name":"value_1","nativeSrc":"6326:7:63","nodeType":"YulIdentifier","src":"6326:7:63"},"variableNames":[{"name":"value1","nativeSrc":"6316:6:63","nodeType":"YulIdentifier","src":"6316:6:63"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"5993:346:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6038:9:63","nodeType":"YulTypedName","src":"6038:9:63","type":""},{"name":"dataEnd","nativeSrc":"6049:7:63","nodeType":"YulTypedName","src":"6049:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6061:6:63","nodeType":"YulTypedName","src":"6061:6:63","type":""},{"name":"value1","nativeSrc":"6069:6:63","nodeType":"YulTypedName","src":"6069:6:63","type":""}],"src":"5993:346:63"},{"body":{"nativeSrc":"6414:156:63","nodeType":"YulBlock","src":"6414:156:63","statements":[{"body":{"nativeSrc":"6460:16:63","nodeType":"YulBlock","src":"6460:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6469:1:63","nodeType":"YulLiteral","src":"6469:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6472:1:63","nodeType":"YulLiteral","src":"6472:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6462:6:63","nodeType":"YulIdentifier","src":"6462:6:63"},"nativeSrc":"6462:12:63","nodeType":"YulFunctionCall","src":"6462:12:63"},"nativeSrc":"6462:12:63","nodeType":"YulExpressionStatement","src":"6462:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6435:7:63","nodeType":"YulIdentifier","src":"6435:7:63"},{"name":"headStart","nativeSrc":"6444:9:63","nodeType":"YulIdentifier","src":"6444:9:63"}],"functionName":{"name":"sub","nativeSrc":"6431:3:63","nodeType":"YulIdentifier","src":"6431:3:63"},"nativeSrc":"6431:23:63","nodeType":"YulFunctionCall","src":"6431:23:63"},{"kind":"number","nativeSrc":"6456:2:63","nodeType":"YulLiteral","src":"6456:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6427:3:63","nodeType":"YulIdentifier","src":"6427:3:63"},"nativeSrc":"6427:32:63","nodeType":"YulFunctionCall","src":"6427:32:63"},"nativeSrc":"6424:52:63","nodeType":"YulIf","src":"6424:52:63"},{"nativeSrc":"6485:14:63","nodeType":"YulVariableDeclaration","src":"6485:14:63","value":{"kind":"number","nativeSrc":"6498:1:63","nodeType":"YulLiteral","src":"6498:1:63","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"6489:5:63","nodeType":"YulTypedName","src":"6489:5:63","type":""}]},{"nativeSrc":"6508:32:63","nodeType":"YulAssignment","src":"6508:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"6530:9:63","nodeType":"YulIdentifier","src":"6530:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"6517:12:63","nodeType":"YulIdentifier","src":"6517:12:63"},"nativeSrc":"6517:23:63","nodeType":"YulFunctionCall","src":"6517:23:63"},"variableNames":[{"name":"value","nativeSrc":"6508:5:63","nodeType":"YulIdentifier","src":"6508:5:63"}]},{"nativeSrc":"6549:15:63","nodeType":"YulAssignment","src":"6549:15:63","value":{"name":"value","nativeSrc":"6559:5:63","nodeType":"YulIdentifier","src":"6559:5:63"},"variableNames":[{"name":"value0","nativeSrc":"6549:6:63","nodeType":"YulIdentifier","src":"6549:6:63"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"6344:226:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6380:9:63","nodeType":"YulTypedName","src":"6380:9:63","type":""},{"name":"dataEnd","nativeSrc":"6391:7:63","nodeType":"YulTypedName","src":"6391:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6403:6:63","nodeType":"YulTypedName","src":"6403:6:63","type":""}],"src":"6344:226:63"},{"body":{"nativeSrc":"6800:890:63","nodeType":"YulBlock","src":"6800:890:63","statements":[{"body":{"nativeSrc":"6846:16:63","nodeType":"YulBlock","src":"6846:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6855:1:63","nodeType":"YulLiteral","src":"6855:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6858:1:63","nodeType":"YulLiteral","src":"6858:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6848:6:63","nodeType":"YulIdentifier","src":"6848:6:63"},"nativeSrc":"6848:12:63","nodeType":"YulFunctionCall","src":"6848:12:63"},"nativeSrc":"6848:12:63","nodeType":"YulExpressionStatement","src":"6848:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6821:7:63","nodeType":"YulIdentifier","src":"6821:7:63"},{"name":"headStart","nativeSrc":"6830:9:63","nodeType":"YulIdentifier","src":"6830:9:63"}],"functionName":{"name":"sub","nativeSrc":"6817:3:63","nodeType":"YulIdentifier","src":"6817:3:63"},"nativeSrc":"6817:23:63","nodeType":"YulFunctionCall","src":"6817:23:63"},{"kind":"number","nativeSrc":"6842:2:63","nodeType":"YulLiteral","src":"6842:2:63","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6813:3:63","nodeType":"YulIdentifier","src":"6813:3:63"},"nativeSrc":"6813:32:63","nodeType":"YulFunctionCall","src":"6813:32:63"},"nativeSrc":"6810:52:63","nodeType":"YulIf","src":"6810:52:63"},{"nativeSrc":"6871:37:63","nodeType":"YulVariableDeclaration","src":"6871:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"6898:9:63","nodeType":"YulIdentifier","src":"6898:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"6885:12:63","nodeType":"YulIdentifier","src":"6885:12:63"},"nativeSrc":"6885:23:63","nodeType":"YulFunctionCall","src":"6885:23:63"},"variables":[{"name":"offset","nativeSrc":"6875:6:63","nodeType":"YulTypedName","src":"6875:6:63","type":""}]},{"body":{"nativeSrc":"6951:16:63","nodeType":"YulBlock","src":"6951:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6960:1:63","nodeType":"YulLiteral","src":"6960:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"6963:1:63","nodeType":"YulLiteral","src":"6963:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6953:6:63","nodeType":"YulIdentifier","src":"6953:6:63"},"nativeSrc":"6953:12:63","nodeType":"YulFunctionCall","src":"6953:12:63"},"nativeSrc":"6953:12:63","nodeType":"YulExpressionStatement","src":"6953:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6923:6:63","nodeType":"YulIdentifier","src":"6923:6:63"},{"kind":"number","nativeSrc":"6931:18:63","nodeType":"YulLiteral","src":"6931:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6920:2:63","nodeType":"YulIdentifier","src":"6920:2:63"},"nativeSrc":"6920:30:63","nodeType":"YulFunctionCall","src":"6920:30:63"},"nativeSrc":"6917:50:63","nodeType":"YulIf","src":"6917:50:63"},{"nativeSrc":"6976:96:63","nodeType":"YulVariableDeclaration","src":"6976:96:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7044:9:63","nodeType":"YulIdentifier","src":"7044:9:63"},{"name":"offset","nativeSrc":"7055:6:63","nodeType":"YulIdentifier","src":"7055:6:63"}],"functionName":{"name":"add","nativeSrc":"7040:3:63","nodeType":"YulIdentifier","src":"7040:3:63"},"nativeSrc":"7040:22:63","nodeType":"YulFunctionCall","src":"7040:22:63"},{"name":"dataEnd","nativeSrc":"7064:7:63","nodeType":"YulIdentifier","src":"7064:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7002:37:63","nodeType":"YulIdentifier","src":"7002:37:63"},"nativeSrc":"7002:70:63","nodeType":"YulFunctionCall","src":"7002:70:63"},"variables":[{"name":"value0_1","nativeSrc":"6980:8:63","nodeType":"YulTypedName","src":"6980:8:63","type":""},{"name":"value1_1","nativeSrc":"6990:8:63","nodeType":"YulTypedName","src":"6990:8:63","type":""}]},{"nativeSrc":"7081:18:63","nodeType":"YulAssignment","src":"7081:18:63","value":{"name":"value0_1","nativeSrc":"7091:8:63","nodeType":"YulIdentifier","src":"7091:8:63"},"variableNames":[{"name":"value0","nativeSrc":"7081:6:63","nodeType":"YulIdentifier","src":"7081:6:63"}]},{"nativeSrc":"7108:18:63","nodeType":"YulAssignment","src":"7108:18:63","value":{"name":"value1_1","nativeSrc":"7118:8:63","nodeType":"YulIdentifier","src":"7118:8:63"},"variableNames":[{"name":"value1","nativeSrc":"7108:6:63","nodeType":"YulIdentifier","src":"7108:6:63"}]},{"nativeSrc":"7135:48:63","nodeType":"YulVariableDeclaration","src":"7135:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7168:9:63","nodeType":"YulIdentifier","src":"7168:9:63"},{"kind":"number","nativeSrc":"7179:2:63","nodeType":"YulLiteral","src":"7179:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7164:3:63","nodeType":"YulIdentifier","src":"7164:3:63"},"nativeSrc":"7164:18:63","nodeType":"YulFunctionCall","src":"7164:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"7151:12:63","nodeType":"YulIdentifier","src":"7151:12:63"},"nativeSrc":"7151:32:63","nodeType":"YulFunctionCall","src":"7151:32:63"},"variables":[{"name":"offset_1","nativeSrc":"7139:8:63","nodeType":"YulTypedName","src":"7139:8:63","type":""}]},{"body":{"nativeSrc":"7228:16:63","nodeType":"YulBlock","src":"7228:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7237:1:63","nodeType":"YulLiteral","src":"7237:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"7240:1:63","nodeType":"YulLiteral","src":"7240:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7230:6:63","nodeType":"YulIdentifier","src":"7230:6:63"},"nativeSrc":"7230:12:63","nodeType":"YulFunctionCall","src":"7230:12:63"},"nativeSrc":"7230:12:63","nodeType":"YulExpressionStatement","src":"7230:12:63"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"7198:8:63","nodeType":"YulIdentifier","src":"7198:8:63"},{"kind":"number","nativeSrc":"7208:18:63","nodeType":"YulLiteral","src":"7208:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7195:2:63","nodeType":"YulIdentifier","src":"7195:2:63"},"nativeSrc":"7195:32:63","nodeType":"YulFunctionCall","src":"7195:32:63"},"nativeSrc":"7192:52:63","nodeType":"YulIf","src":"7192:52:63"},{"nativeSrc":"7253:98:63","nodeType":"YulVariableDeclaration","src":"7253:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7321:9:63","nodeType":"YulIdentifier","src":"7321:9:63"},{"name":"offset_1","nativeSrc":"7332:8:63","nodeType":"YulIdentifier","src":"7332:8:63"}],"functionName":{"name":"add","nativeSrc":"7317:3:63","nodeType":"YulIdentifier","src":"7317:3:63"},"nativeSrc":"7317:24:63","nodeType":"YulFunctionCall","src":"7317:24:63"},{"name":"dataEnd","nativeSrc":"7343:7:63","nodeType":"YulIdentifier","src":"7343:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7279:37:63","nodeType":"YulIdentifier","src":"7279:37:63"},"nativeSrc":"7279:72:63","nodeType":"YulFunctionCall","src":"7279:72:63"},"variables":[{"name":"value2_1","nativeSrc":"7257:8:63","nodeType":"YulTypedName","src":"7257:8:63","type":""},{"name":"value3_1","nativeSrc":"7267:8:63","nodeType":"YulTypedName","src":"7267:8:63","type":""}]},{"nativeSrc":"7360:18:63","nodeType":"YulAssignment","src":"7360:18:63","value":{"name":"value2_1","nativeSrc":"7370:8:63","nodeType":"YulIdentifier","src":"7370:8:63"},"variableNames":[{"name":"value2","nativeSrc":"7360:6:63","nodeType":"YulIdentifier","src":"7360:6:63"}]},{"nativeSrc":"7387:18:63","nodeType":"YulAssignment","src":"7387:18:63","value":{"name":"value3_1","nativeSrc":"7397:8:63","nodeType":"YulIdentifier","src":"7397:8:63"},"variableNames":[{"name":"value3","nativeSrc":"7387:6:63","nodeType":"YulIdentifier","src":"7387:6:63"}]},{"nativeSrc":"7414:48:63","nodeType":"YulVariableDeclaration","src":"7414:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7447:9:63","nodeType":"YulIdentifier","src":"7447:9:63"},{"kind":"number","nativeSrc":"7458:2:63","nodeType":"YulLiteral","src":"7458:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7443:3:63","nodeType":"YulIdentifier","src":"7443:3:63"},"nativeSrc":"7443:18:63","nodeType":"YulFunctionCall","src":"7443:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"7430:12:63","nodeType":"YulIdentifier","src":"7430:12:63"},"nativeSrc":"7430:32:63","nodeType":"YulFunctionCall","src":"7430:32:63"},"variables":[{"name":"offset_2","nativeSrc":"7418:8:63","nodeType":"YulTypedName","src":"7418:8:63","type":""}]},{"body":{"nativeSrc":"7507:16:63","nodeType":"YulBlock","src":"7507:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7516:1:63","nodeType":"YulLiteral","src":"7516:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"7519:1:63","nodeType":"YulLiteral","src":"7519:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7509:6:63","nodeType":"YulIdentifier","src":"7509:6:63"},"nativeSrc":"7509:12:63","nodeType":"YulFunctionCall","src":"7509:12:63"},"nativeSrc":"7509:12:63","nodeType":"YulExpressionStatement","src":"7509:12:63"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"7477:8:63","nodeType":"YulIdentifier","src":"7477:8:63"},{"kind":"number","nativeSrc":"7487:18:63","nodeType":"YulLiteral","src":"7487:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7474:2:63","nodeType":"YulIdentifier","src":"7474:2:63"},"nativeSrc":"7474:32:63","nodeType":"YulFunctionCall","src":"7474:32:63"},"nativeSrc":"7471:52:63","nodeType":"YulIf","src":"7471:52:63"},{"nativeSrc":"7532:98:63","nodeType":"YulVariableDeclaration","src":"7532:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7600:9:63","nodeType":"YulIdentifier","src":"7600:9:63"},{"name":"offset_2","nativeSrc":"7611:8:63","nodeType":"YulIdentifier","src":"7611:8:63"}],"functionName":{"name":"add","nativeSrc":"7596:3:63","nodeType":"YulIdentifier","src":"7596:3:63"},"nativeSrc":"7596:24:63","nodeType":"YulFunctionCall","src":"7596:24:63"},{"name":"dataEnd","nativeSrc":"7622:7:63","nodeType":"YulIdentifier","src":"7622:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7558:37:63","nodeType":"YulIdentifier","src":"7558:37:63"},"nativeSrc":"7558:72:63","nodeType":"YulFunctionCall","src":"7558:72:63"},"variables":[{"name":"value4_1","nativeSrc":"7536:8:63","nodeType":"YulTypedName","src":"7536:8:63","type":""},{"name":"value5_1","nativeSrc":"7546:8:63","nodeType":"YulTypedName","src":"7546:8:63","type":""}]},{"nativeSrc":"7639:18:63","nodeType":"YulAssignment","src":"7639:18:63","value":{"name":"value4_1","nativeSrc":"7649:8:63","nodeType":"YulIdentifier","src":"7649:8:63"},"variableNames":[{"name":"value4","nativeSrc":"7639:6:63","nodeType":"YulIdentifier","src":"7639:6:63"}]},{"nativeSrc":"7666:18:63","nodeType":"YulAssignment","src":"7666:18:63","value":{"name":"value5_1","nativeSrc":"7676:8:63","nodeType":"YulIdentifier","src":"7676:8:63"},"variableNames":[{"name":"value5","nativeSrc":"7666:6:63","nodeType":"YulIdentifier","src":"7666:6:63"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6575:1115:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6726:9:63","nodeType":"YulTypedName","src":"6726:9:63","type":""},{"name":"dataEnd","nativeSrc":"6737:7:63","nodeType":"YulTypedName","src":"6737:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6749:6:63","nodeType":"YulTypedName","src":"6749:6:63","type":""},{"name":"value1","nativeSrc":"6757:6:63","nodeType":"YulTypedName","src":"6757:6:63","type":""},{"name":"value2","nativeSrc":"6765:6:63","nodeType":"YulTypedName","src":"6765:6:63","type":""},{"name":"value3","nativeSrc":"6773:6:63","nodeType":"YulTypedName","src":"6773:6:63","type":""},{"name":"value4","nativeSrc":"6781:6:63","nodeType":"YulTypedName","src":"6781:6:63","type":""},{"name":"value5","nativeSrc":"6789:6:63","nodeType":"YulTypedName","src":"6789:6:63","type":""}],"src":"6575:1115:63"},{"body":{"nativeSrc":"7860:611:63","nodeType":"YulBlock","src":"7860:611:63","statements":[{"body":{"nativeSrc":"7906:16:63","nodeType":"YulBlock","src":"7906:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7915:1:63","nodeType":"YulLiteral","src":"7915:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"7918:1:63","nodeType":"YulLiteral","src":"7918:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7908:6:63","nodeType":"YulIdentifier","src":"7908:6:63"},"nativeSrc":"7908:12:63","nodeType":"YulFunctionCall","src":"7908:12:63"},"nativeSrc":"7908:12:63","nodeType":"YulExpressionStatement","src":"7908:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7881:7:63","nodeType":"YulIdentifier","src":"7881:7:63"},{"name":"headStart","nativeSrc":"7890:9:63","nodeType":"YulIdentifier","src":"7890:9:63"}],"functionName":{"name":"sub","nativeSrc":"7877:3:63","nodeType":"YulIdentifier","src":"7877:3:63"},"nativeSrc":"7877:23:63","nodeType":"YulFunctionCall","src":"7877:23:63"},{"kind":"number","nativeSrc":"7902:2:63","nodeType":"YulLiteral","src":"7902:2:63","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7873:3:63","nodeType":"YulIdentifier","src":"7873:3:63"},"nativeSrc":"7873:32:63","nodeType":"YulFunctionCall","src":"7873:32:63"},"nativeSrc":"7870:52:63","nodeType":"YulIf","src":"7870:52:63"},{"nativeSrc":"7931:37:63","nodeType":"YulVariableDeclaration","src":"7931:37:63","value":{"arguments":[{"name":"headStart","nativeSrc":"7958:9:63","nodeType":"YulIdentifier","src":"7958:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"7945:12:63","nodeType":"YulIdentifier","src":"7945:12:63"},"nativeSrc":"7945:23:63","nodeType":"YulFunctionCall","src":"7945:23:63"},"variables":[{"name":"offset","nativeSrc":"7935:6:63","nodeType":"YulTypedName","src":"7935:6:63","type":""}]},{"body":{"nativeSrc":"8011:16:63","nodeType":"YulBlock","src":"8011:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8020:1:63","nodeType":"YulLiteral","src":"8020:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8023:1:63","nodeType":"YulLiteral","src":"8023:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8013:6:63","nodeType":"YulIdentifier","src":"8013:6:63"},"nativeSrc":"8013:12:63","nodeType":"YulFunctionCall","src":"8013:12:63"},"nativeSrc":"8013:12:63","nodeType":"YulExpressionStatement","src":"8013:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7983:6:63","nodeType":"YulIdentifier","src":"7983:6:63"},{"kind":"number","nativeSrc":"7991:18:63","nodeType":"YulLiteral","src":"7991:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7980:2:63","nodeType":"YulIdentifier","src":"7980:2:63"},"nativeSrc":"7980:30:63","nodeType":"YulFunctionCall","src":"7980:30:63"},"nativeSrc":"7977:50:63","nodeType":"YulIf","src":"7977:50:63"},{"nativeSrc":"8036:96:63","nodeType":"YulVariableDeclaration","src":"8036:96:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8104:9:63","nodeType":"YulIdentifier","src":"8104:9:63"},{"name":"offset","nativeSrc":"8115:6:63","nodeType":"YulIdentifier","src":"8115:6:63"}],"functionName":{"name":"add","nativeSrc":"8100:3:63","nodeType":"YulIdentifier","src":"8100:3:63"},"nativeSrc":"8100:22:63","nodeType":"YulFunctionCall","src":"8100:22:63"},{"name":"dataEnd","nativeSrc":"8124:7:63","nodeType":"YulIdentifier","src":"8124:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"8062:37:63","nodeType":"YulIdentifier","src":"8062:37:63"},"nativeSrc":"8062:70:63","nodeType":"YulFunctionCall","src":"8062:70:63"},"variables":[{"name":"value0_1","nativeSrc":"8040:8:63","nodeType":"YulTypedName","src":"8040:8:63","type":""},{"name":"value1_1","nativeSrc":"8050:8:63","nodeType":"YulTypedName","src":"8050:8:63","type":""}]},{"nativeSrc":"8141:18:63","nodeType":"YulAssignment","src":"8141:18:63","value":{"name":"value0_1","nativeSrc":"8151:8:63","nodeType":"YulIdentifier","src":"8151:8:63"},"variableNames":[{"name":"value0","nativeSrc":"8141:6:63","nodeType":"YulIdentifier","src":"8141:6:63"}]},{"nativeSrc":"8168:18:63","nodeType":"YulAssignment","src":"8168:18:63","value":{"name":"value1_1","nativeSrc":"8178:8:63","nodeType":"YulIdentifier","src":"8178:8:63"},"variableNames":[{"name":"value1","nativeSrc":"8168:6:63","nodeType":"YulIdentifier","src":"8168:6:63"}]},{"nativeSrc":"8195:48:63","nodeType":"YulVariableDeclaration","src":"8195:48:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8228:9:63","nodeType":"YulIdentifier","src":"8228:9:63"},{"kind":"number","nativeSrc":"8239:2:63","nodeType":"YulLiteral","src":"8239:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8224:3:63","nodeType":"YulIdentifier","src":"8224:3:63"},"nativeSrc":"8224:18:63","nodeType":"YulFunctionCall","src":"8224:18:63"}],"functionName":{"name":"calldataload","nativeSrc":"8211:12:63","nodeType":"YulIdentifier","src":"8211:12:63"},"nativeSrc":"8211:32:63","nodeType":"YulFunctionCall","src":"8211:32:63"},"variables":[{"name":"offset_1","nativeSrc":"8199:8:63","nodeType":"YulTypedName","src":"8199:8:63","type":""}]},{"body":{"nativeSrc":"8288:16:63","nodeType":"YulBlock","src":"8288:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8297:1:63","nodeType":"YulLiteral","src":"8297:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8300:1:63","nodeType":"YulLiteral","src":"8300:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8290:6:63","nodeType":"YulIdentifier","src":"8290:6:63"},"nativeSrc":"8290:12:63","nodeType":"YulFunctionCall","src":"8290:12:63"},"nativeSrc":"8290:12:63","nodeType":"YulExpressionStatement","src":"8290:12:63"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"8258:8:63","nodeType":"YulIdentifier","src":"8258:8:63"},{"kind":"number","nativeSrc":"8268:18:63","nodeType":"YulLiteral","src":"8268:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8255:2:63","nodeType":"YulIdentifier","src":"8255:2:63"},"nativeSrc":"8255:32:63","nodeType":"YulFunctionCall","src":"8255:32:63"},"nativeSrc":"8252:52:63","nodeType":"YulIf","src":"8252:52:63"},{"nativeSrc":"8313:98:63","nodeType":"YulVariableDeclaration","src":"8313:98:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8381:9:63","nodeType":"YulIdentifier","src":"8381:9:63"},{"name":"offset_1","nativeSrc":"8392:8:63","nodeType":"YulIdentifier","src":"8392:8:63"}],"functionName":{"name":"add","nativeSrc":"8377:3:63","nodeType":"YulIdentifier","src":"8377:3:63"},"nativeSrc":"8377:24:63","nodeType":"YulFunctionCall","src":"8377:24:63"},{"name":"dataEnd","nativeSrc":"8403:7:63","nodeType":"YulIdentifier","src":"8403:7:63"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"8339:37:63","nodeType":"YulIdentifier","src":"8339:37:63"},"nativeSrc":"8339:72:63","nodeType":"YulFunctionCall","src":"8339:72:63"},"variables":[{"name":"value2_1","nativeSrc":"8317:8:63","nodeType":"YulTypedName","src":"8317:8:63","type":""},{"name":"value3_1","nativeSrc":"8327:8:63","nodeType":"YulTypedName","src":"8327:8:63","type":""}]},{"nativeSrc":"8420:18:63","nodeType":"YulAssignment","src":"8420:18:63","value":{"name":"value2_1","nativeSrc":"8430:8:63","nodeType":"YulIdentifier","src":"8430:8:63"},"variableNames":[{"name":"value2","nativeSrc":"8420:6:63","nodeType":"YulIdentifier","src":"8420:6:63"}]},{"nativeSrc":"8447:18:63","nodeType":"YulAssignment","src":"8447:18:63","value":{"name":"value3_1","nativeSrc":"8457:8:63","nodeType":"YulIdentifier","src":"8457:8:63"},"variableNames":[{"name":"value3","nativeSrc":"8447:6:63","nodeType":"YulIdentifier","src":"8447:6:63"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"7695:776:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7802:9:63","nodeType":"YulTypedName","src":"7802:9:63","type":""},{"name":"dataEnd","nativeSrc":"7813:7:63","nodeType":"YulTypedName","src":"7813:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7825:6:63","nodeType":"YulTypedName","src":"7825:6:63","type":""},{"name":"value1","nativeSrc":"7833:6:63","nodeType":"YulTypedName","src":"7833:6:63","type":""},{"name":"value2","nativeSrc":"7841:6:63","nodeType":"YulTypedName","src":"7841:6:63","type":""},{"name":"value3","nativeSrc":"7849:6:63","nodeType":"YulTypedName","src":"7849:6:63","type":""}],"src":"7695:776:63"},{"body":{"nativeSrc":"8508:152:63","nodeType":"YulBlock","src":"8508:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8525:1:63","nodeType":"YulLiteral","src":"8525:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8528:77:63","nodeType":"YulLiteral","src":"8528:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8518:6:63","nodeType":"YulIdentifier","src":"8518:6:63"},"nativeSrc":"8518:88:63","nodeType":"YulFunctionCall","src":"8518:88:63"},"nativeSrc":"8518:88:63","nodeType":"YulExpressionStatement","src":"8518:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8622:1:63","nodeType":"YulLiteral","src":"8622:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"8625:4:63","nodeType":"YulLiteral","src":"8625:4:63","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8615:6:63","nodeType":"YulIdentifier","src":"8615:6:63"},"nativeSrc":"8615:15:63","nodeType":"YulFunctionCall","src":"8615:15:63"},"nativeSrc":"8615:15:63","nodeType":"YulExpressionStatement","src":"8615:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8646:1:63","nodeType":"YulLiteral","src":"8646:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"8649:4:63","nodeType":"YulLiteral","src":"8649:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8639:6:63","nodeType":"YulIdentifier","src":"8639:6:63"},"nativeSrc":"8639:15:63","nodeType":"YulFunctionCall","src":"8639:15:63"},"nativeSrc":"8639:15:63","nodeType":"YulExpressionStatement","src":"8639:15:63"}]},"name":"panic_error_0x11","nativeSrc":"8476:184:63","nodeType":"YulFunctionDefinition","src":"8476:184:63"},{"body":{"nativeSrc":"8714:79:63","nodeType":"YulBlock","src":"8714:79:63","statements":[{"nativeSrc":"8724:17:63","nodeType":"YulAssignment","src":"8724:17:63","value":{"arguments":[{"name":"x","nativeSrc":"8736:1:63","nodeType":"YulIdentifier","src":"8736:1:63"},{"name":"y","nativeSrc":"8739:1:63","nodeType":"YulIdentifier","src":"8739:1:63"}],"functionName":{"name":"sub","nativeSrc":"8732:3:63","nodeType":"YulIdentifier","src":"8732:3:63"},"nativeSrc":"8732:9:63","nodeType":"YulFunctionCall","src":"8732:9:63"},"variableNames":[{"name":"diff","nativeSrc":"8724:4:63","nodeType":"YulIdentifier","src":"8724:4:63"}]},{"body":{"nativeSrc":"8765:22:63","nodeType":"YulBlock","src":"8765:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8767:16:63","nodeType":"YulIdentifier","src":"8767:16:63"},"nativeSrc":"8767:18:63","nodeType":"YulFunctionCall","src":"8767:18:63"},"nativeSrc":"8767:18:63","nodeType":"YulExpressionStatement","src":"8767:18:63"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8756:4:63","nodeType":"YulIdentifier","src":"8756:4:63"},{"name":"x","nativeSrc":"8762:1:63","nodeType":"YulIdentifier","src":"8762:1:63"}],"functionName":{"name":"gt","nativeSrc":"8753:2:63","nodeType":"YulIdentifier","src":"8753:2:63"},"nativeSrc":"8753:11:63","nodeType":"YulFunctionCall","src":"8753:11:63"},"nativeSrc":"8750:37:63","nodeType":"YulIf","src":"8750:37:63"}]},"name":"checked_sub_t_uint256","nativeSrc":"8665:128:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8696:1:63","nodeType":"YulTypedName","src":"8696:1:63","type":""},{"name":"y","nativeSrc":"8699:1:63","nodeType":"YulTypedName","src":"8699:1:63","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8705:4:63","nodeType":"YulTypedName","src":"8705:4:63","type":""}],"src":"8665:128:63"},{"body":{"nativeSrc":"8850:116:63","nodeType":"YulBlock","src":"8850:116:63","statements":[{"nativeSrc":"8860:20:63","nodeType":"YulAssignment","src":"8860:20:63","value":{"arguments":[{"name":"x","nativeSrc":"8875:1:63","nodeType":"YulIdentifier","src":"8875:1:63"},{"name":"y","nativeSrc":"8878:1:63","nodeType":"YulIdentifier","src":"8878:1:63"}],"functionName":{"name":"mul","nativeSrc":"8871:3:63","nodeType":"YulIdentifier","src":"8871:3:63"},"nativeSrc":"8871:9:63","nodeType":"YulFunctionCall","src":"8871:9:63"},"variableNames":[{"name":"product","nativeSrc":"8860:7:63","nodeType":"YulIdentifier","src":"8860:7:63"}]},{"body":{"nativeSrc":"8938:22:63","nodeType":"YulBlock","src":"8938:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8940:16:63","nodeType":"YulIdentifier","src":"8940:16:63"},"nativeSrc":"8940:18:63","nodeType":"YulFunctionCall","src":"8940:18:63"},"nativeSrc":"8940:18:63","nodeType":"YulExpressionStatement","src":"8940:18:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"8909:1:63","nodeType":"YulIdentifier","src":"8909:1:63"}],"functionName":{"name":"iszero","nativeSrc":"8902:6:63","nodeType":"YulIdentifier","src":"8902:6:63"},"nativeSrc":"8902:9:63","nodeType":"YulFunctionCall","src":"8902:9:63"},{"arguments":[{"name":"y","nativeSrc":"8916:1:63","nodeType":"YulIdentifier","src":"8916:1:63"},{"arguments":[{"name":"product","nativeSrc":"8923:7:63","nodeType":"YulIdentifier","src":"8923:7:63"},{"name":"x","nativeSrc":"8932:1:63","nodeType":"YulIdentifier","src":"8932:1:63"}],"functionName":{"name":"div","nativeSrc":"8919:3:63","nodeType":"YulIdentifier","src":"8919:3:63"},"nativeSrc":"8919:15:63","nodeType":"YulFunctionCall","src":"8919:15:63"}],"functionName":{"name":"eq","nativeSrc":"8913:2:63","nodeType":"YulIdentifier","src":"8913:2:63"},"nativeSrc":"8913:22:63","nodeType":"YulFunctionCall","src":"8913:22:63"}],"functionName":{"name":"or","nativeSrc":"8899:2:63","nodeType":"YulIdentifier","src":"8899:2:63"},"nativeSrc":"8899:37:63","nodeType":"YulFunctionCall","src":"8899:37:63"}],"functionName":{"name":"iszero","nativeSrc":"8892:6:63","nodeType":"YulIdentifier","src":"8892:6:63"},"nativeSrc":"8892:45:63","nodeType":"YulFunctionCall","src":"8892:45:63"},"nativeSrc":"8889:71:63","nodeType":"YulIf","src":"8889:71:63"}]},"name":"checked_mul_t_uint256","nativeSrc":"8798:168:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8829:1:63","nodeType":"YulTypedName","src":"8829:1:63","type":""},{"name":"y","nativeSrc":"8832:1:63","nodeType":"YulTypedName","src":"8832:1:63","type":""}],"returnVariables":[{"name":"product","nativeSrc":"8838:7:63","nodeType":"YulTypedName","src":"8838:7:63","type":""}],"src":"8798:168:63"},{"body":{"nativeSrc":"9003:152:63","nodeType":"YulBlock","src":"9003:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9020:1:63","nodeType":"YulLiteral","src":"9020:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"9023:77:63","nodeType":"YulLiteral","src":"9023:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9013:6:63","nodeType":"YulIdentifier","src":"9013:6:63"},"nativeSrc":"9013:88:63","nodeType":"YulFunctionCall","src":"9013:88:63"},"nativeSrc":"9013:88:63","nodeType":"YulExpressionStatement","src":"9013:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9117:1:63","nodeType":"YulLiteral","src":"9117:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"9120:4:63","nodeType":"YulLiteral","src":"9120:4:63","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"9110:6:63","nodeType":"YulIdentifier","src":"9110:6:63"},"nativeSrc":"9110:15:63","nodeType":"YulFunctionCall","src":"9110:15:63"},"nativeSrc":"9110:15:63","nodeType":"YulExpressionStatement","src":"9110:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9141:1:63","nodeType":"YulLiteral","src":"9141:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"9144:4:63","nodeType":"YulLiteral","src":"9144:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9134:6:63","nodeType":"YulIdentifier","src":"9134:6:63"},"nativeSrc":"9134:15:63","nodeType":"YulFunctionCall","src":"9134:15:63"},"nativeSrc":"9134:15:63","nodeType":"YulExpressionStatement","src":"9134:15:63"}]},"name":"panic_error_0x12","nativeSrc":"8971:184:63","nodeType":"YulFunctionDefinition","src":"8971:184:63"},{"body":{"nativeSrc":"9206:74:63","nodeType":"YulBlock","src":"9206:74:63","statements":[{"body":{"nativeSrc":"9229:22:63","nodeType":"YulBlock","src":"9229:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"9231:16:63","nodeType":"YulIdentifier","src":"9231:16:63"},"nativeSrc":"9231:18:63","nodeType":"YulFunctionCall","src":"9231:18:63"},"nativeSrc":"9231:18:63","nodeType":"YulExpressionStatement","src":"9231:18:63"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"9226:1:63","nodeType":"YulIdentifier","src":"9226:1:63"}],"functionName":{"name":"iszero","nativeSrc":"9219:6:63","nodeType":"YulIdentifier","src":"9219:6:63"},"nativeSrc":"9219:9:63","nodeType":"YulFunctionCall","src":"9219:9:63"},"nativeSrc":"9216:35:63","nodeType":"YulIf","src":"9216:35:63"},{"nativeSrc":"9260:14:63","nodeType":"YulAssignment","src":"9260:14:63","value":{"arguments":[{"name":"x","nativeSrc":"9269:1:63","nodeType":"YulIdentifier","src":"9269:1:63"},{"name":"y","nativeSrc":"9272:1:63","nodeType":"YulIdentifier","src":"9272:1:63"}],"functionName":{"name":"div","nativeSrc":"9265:3:63","nodeType":"YulIdentifier","src":"9265:3:63"},"nativeSrc":"9265:9:63","nodeType":"YulFunctionCall","src":"9265:9:63"},"variableNames":[{"name":"r","nativeSrc":"9260:1:63","nodeType":"YulIdentifier","src":"9260:1:63"}]}]},"name":"checked_div_t_uint256","nativeSrc":"9160:120:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9191:1:63","nodeType":"YulTypedName","src":"9191:1:63","type":""},{"name":"y","nativeSrc":"9194:1:63","nodeType":"YulTypedName","src":"9194:1:63","type":""}],"returnVariables":[{"name":"r","nativeSrc":"9200:1:63","nodeType":"YulTypedName","src":"9200:1:63","type":""}],"src":"9160:120:63"},{"body":{"nativeSrc":"9333:77:63","nodeType":"YulBlock","src":"9333:77:63","statements":[{"nativeSrc":"9343:16:63","nodeType":"YulAssignment","src":"9343:16:63","value":{"arguments":[{"name":"x","nativeSrc":"9354:1:63","nodeType":"YulIdentifier","src":"9354:1:63"},{"name":"y","nativeSrc":"9357:1:63","nodeType":"YulIdentifier","src":"9357:1:63"}],"functionName":{"name":"add","nativeSrc":"9350:3:63","nodeType":"YulIdentifier","src":"9350:3:63"},"nativeSrc":"9350:9:63","nodeType":"YulFunctionCall","src":"9350:9:63"},"variableNames":[{"name":"sum","nativeSrc":"9343:3:63","nodeType":"YulIdentifier","src":"9343:3:63"}]},{"body":{"nativeSrc":"9382:22:63","nodeType":"YulBlock","src":"9382:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"9384:16:63","nodeType":"YulIdentifier","src":"9384:16:63"},"nativeSrc":"9384:18:63","nodeType":"YulFunctionCall","src":"9384:18:63"},"nativeSrc":"9384:18:63","nodeType":"YulExpressionStatement","src":"9384:18:63"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"9374:1:63","nodeType":"YulIdentifier","src":"9374:1:63"},{"name":"sum","nativeSrc":"9377:3:63","nodeType":"YulIdentifier","src":"9377:3:63"}],"functionName":{"name":"gt","nativeSrc":"9371:2:63","nodeType":"YulIdentifier","src":"9371:2:63"},"nativeSrc":"9371:10:63","nodeType":"YulFunctionCall","src":"9371:10:63"},"nativeSrc":"9368:36:63","nodeType":"YulIf","src":"9368:36:63"}]},"name":"checked_add_t_uint256","nativeSrc":"9285:125:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9316:1:63","nodeType":"YulTypedName","src":"9316:1:63","type":""},{"name":"y","nativeSrc":"9319:1:63","nodeType":"YulTypedName","src":"9319:1:63","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"9325:3:63","nodeType":"YulTypedName","src":"9325:3:63","type":""}],"src":"9285:125:63"},{"body":{"nativeSrc":"9566:377:63","nodeType":"YulBlock","src":"9566:377:63","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9583:9:63","nodeType":"YulIdentifier","src":"9583:9:63"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"9608:6:63","nodeType":"YulIdentifier","src":"9608:6:63"}],"functionName":{"name":"iszero","nativeSrc":"9601:6:63","nodeType":"YulIdentifier","src":"9601:6:63"},"nativeSrc":"9601:14:63","nodeType":"YulFunctionCall","src":"9601:14:63"}],"functionName":{"name":"iszero","nativeSrc":"9594:6:63","nodeType":"YulIdentifier","src":"9594:6:63"},"nativeSrc":"9594:22:63","nodeType":"YulFunctionCall","src":"9594:22:63"}],"functionName":{"name":"mstore","nativeSrc":"9576:6:63","nodeType":"YulIdentifier","src":"9576:6:63"},"nativeSrc":"9576:41:63","nodeType":"YulFunctionCall","src":"9576:41:63"},"nativeSrc":"9576:41:63","nodeType":"YulExpressionStatement","src":"9576:41:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9637:9:63","nodeType":"YulIdentifier","src":"9637:9:63"},{"kind":"number","nativeSrc":"9648:2:63","nodeType":"YulLiteral","src":"9648:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9633:3:63","nodeType":"YulIdentifier","src":"9633:3:63"},"nativeSrc":"9633:18:63","nodeType":"YulFunctionCall","src":"9633:18:63"},{"kind":"number","nativeSrc":"9653:2:63","nodeType":"YulLiteral","src":"9653:2:63","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"9626:6:63","nodeType":"YulIdentifier","src":"9626:6:63"},"nativeSrc":"9626:30:63","nodeType":"YulFunctionCall","src":"9626:30:63"},"nativeSrc":"9626:30:63","nodeType":"YulExpressionStatement","src":"9626:30:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9676:9:63","nodeType":"YulIdentifier","src":"9676:9:63"},{"kind":"number","nativeSrc":"9687:2:63","nodeType":"YulLiteral","src":"9687:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9672:3:63","nodeType":"YulIdentifier","src":"9672:3:63"},"nativeSrc":"9672:18:63","nodeType":"YulFunctionCall","src":"9672:18:63"},{"name":"value2","nativeSrc":"9692:6:63","nodeType":"YulIdentifier","src":"9692:6:63"}],"functionName":{"name":"mstore","nativeSrc":"9665:6:63","nodeType":"YulIdentifier","src":"9665:6:63"},"nativeSrc":"9665:34:63","nodeType":"YulFunctionCall","src":"9665:34:63"},"nativeSrc":"9665:34:63","nodeType":"YulExpressionStatement","src":"9665:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9725:9:63","nodeType":"YulIdentifier","src":"9725:9:63"},{"kind":"number","nativeSrc":"9736:2:63","nodeType":"YulLiteral","src":"9736:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9721:3:63","nodeType":"YulIdentifier","src":"9721:3:63"},"nativeSrc":"9721:18:63","nodeType":"YulFunctionCall","src":"9721:18:63"},{"name":"value1","nativeSrc":"9741:6:63","nodeType":"YulIdentifier","src":"9741:6:63"},{"name":"value2","nativeSrc":"9749:6:63","nodeType":"YulIdentifier","src":"9749:6:63"}],"functionName":{"name":"calldatacopy","nativeSrc":"9708:12:63","nodeType":"YulIdentifier","src":"9708:12:63"},"nativeSrc":"9708:48:63","nodeType":"YulFunctionCall","src":"9708:48:63"},"nativeSrc":"9708:48:63","nodeType":"YulExpressionStatement","src":"9708:48:63"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9780:9:63","nodeType":"YulIdentifier","src":"9780:9:63"},{"name":"value2","nativeSrc":"9791:6:63","nodeType":"YulIdentifier","src":"9791:6:63"}],"functionName":{"name":"add","nativeSrc":"9776:3:63","nodeType":"YulIdentifier","src":"9776:3:63"},"nativeSrc":"9776:22:63","nodeType":"YulFunctionCall","src":"9776:22:63"},{"kind":"number","nativeSrc":"9800:2:63","nodeType":"YulLiteral","src":"9800:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9772:3:63","nodeType":"YulIdentifier","src":"9772:3:63"},"nativeSrc":"9772:31:63","nodeType":"YulFunctionCall","src":"9772:31:63"},{"kind":"number","nativeSrc":"9805:1:63","nodeType":"YulLiteral","src":"9805:1:63","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"9765:6:63","nodeType":"YulIdentifier","src":"9765:6:63"},"nativeSrc":"9765:42:63","nodeType":"YulFunctionCall","src":"9765:42:63"},"nativeSrc":"9765:42:63","nodeType":"YulExpressionStatement","src":"9765:42:63"},{"nativeSrc":"9816:121:63","nodeType":"YulAssignment","src":"9816:121:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9832:9:63","nodeType":"YulIdentifier","src":"9832:9:63"},{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"9851:6:63","nodeType":"YulIdentifier","src":"9851:6:63"},{"kind":"number","nativeSrc":"9859:2:63","nodeType":"YulLiteral","src":"9859:2:63","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"9847:3:63","nodeType":"YulIdentifier","src":"9847:3:63"},"nativeSrc":"9847:15:63","nodeType":"YulFunctionCall","src":"9847:15:63"},{"kind":"number","nativeSrc":"9864:66:63","nodeType":"YulLiteral","src":"9864:66:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"9843:3:63","nodeType":"YulIdentifier","src":"9843:3:63"},"nativeSrc":"9843:88:63","nodeType":"YulFunctionCall","src":"9843:88:63"}],"functionName":{"name":"add","nativeSrc":"9828:3:63","nodeType":"YulIdentifier","src":"9828:3:63"},"nativeSrc":"9828:104:63","nodeType":"YulFunctionCall","src":"9828:104:63"},{"kind":"number","nativeSrc":"9934:2:63","nodeType":"YulLiteral","src":"9934:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9824:3:63","nodeType":"YulIdentifier","src":"9824:3:63"},"nativeSrc":"9824:113:63","nodeType":"YulFunctionCall","src":"9824:113:63"},"variableNames":[{"name":"tail","nativeSrc":"9816:4:63","nodeType":"YulIdentifier","src":"9816:4:63"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_calldata_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"9415:528:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9519:9:63","nodeType":"YulTypedName","src":"9519:9:63","type":""},{"name":"value2","nativeSrc":"9530:6:63","nodeType":"YulTypedName","src":"9530:6:63","type":""},{"name":"value1","nativeSrc":"9538:6:63","nodeType":"YulTypedName","src":"9538:6:63","type":""},{"name":"value0","nativeSrc":"9546:6:63","nodeType":"YulTypedName","src":"9546:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9557:4:63","nodeType":"YulTypedName","src":"9557:4:63","type":""}],"src":"9415:528:63"},{"body":{"nativeSrc":"10014:184:63","nodeType":"YulBlock","src":"10014:184:63","statements":[{"nativeSrc":"10024:10:63","nodeType":"YulVariableDeclaration","src":"10024:10:63","value":{"kind":"number","nativeSrc":"10033:1:63","nodeType":"YulLiteral","src":"10033:1:63","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"10028:1:63","nodeType":"YulTypedName","src":"10028:1:63","type":""}]},{"body":{"nativeSrc":"10093:63:63","nodeType":"YulBlock","src":"10093:63:63","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"10118:3:63","nodeType":"YulIdentifier","src":"10118:3:63"},{"name":"i","nativeSrc":"10123:1:63","nodeType":"YulIdentifier","src":"10123:1:63"}],"functionName":{"name":"add","nativeSrc":"10114:3:63","nodeType":"YulIdentifier","src":"10114:3:63"},"nativeSrc":"10114:11:63","nodeType":"YulFunctionCall","src":"10114:11:63"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"10137:3:63","nodeType":"YulIdentifier","src":"10137:3:63"},{"name":"i","nativeSrc":"10142:1:63","nodeType":"YulIdentifier","src":"10142:1:63"}],"functionName":{"name":"add","nativeSrc":"10133:3:63","nodeType":"YulIdentifier","src":"10133:3:63"},"nativeSrc":"10133:11:63","nodeType":"YulFunctionCall","src":"10133:11:63"}],"functionName":{"name":"mload","nativeSrc":"10127:5:63","nodeType":"YulIdentifier","src":"10127:5:63"},"nativeSrc":"10127:18:63","nodeType":"YulFunctionCall","src":"10127:18:63"}],"functionName":{"name":"mstore","nativeSrc":"10107:6:63","nodeType":"YulIdentifier","src":"10107:6:63"},"nativeSrc":"10107:39:63","nodeType":"YulFunctionCall","src":"10107:39:63"},"nativeSrc":"10107:39:63","nodeType":"YulExpressionStatement","src":"10107:39:63"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"10054:1:63","nodeType":"YulIdentifier","src":"10054:1:63"},{"name":"length","nativeSrc":"10057:6:63","nodeType":"YulIdentifier","src":"10057:6:63"}],"functionName":{"name":"lt","nativeSrc":"10051:2:63","nodeType":"YulIdentifier","src":"10051:2:63"},"nativeSrc":"10051:13:63","nodeType":"YulFunctionCall","src":"10051:13:63"},"nativeSrc":"10043:113:63","nodeType":"YulForLoop","post":{"nativeSrc":"10065:19:63","nodeType":"YulBlock","src":"10065:19:63","statements":[{"nativeSrc":"10067:15:63","nodeType":"YulAssignment","src":"10067:15:63","value":{"arguments":[{"name":"i","nativeSrc":"10076:1:63","nodeType":"YulIdentifier","src":"10076:1:63"},{"kind":"number","nativeSrc":"10079:2:63","nodeType":"YulLiteral","src":"10079:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10072:3:63","nodeType":"YulIdentifier","src":"10072:3:63"},"nativeSrc":"10072:10:63","nodeType":"YulFunctionCall","src":"10072:10:63"},"variableNames":[{"name":"i","nativeSrc":"10067:1:63","nodeType":"YulIdentifier","src":"10067:1:63"}]}]},"pre":{"nativeSrc":"10047:3:63","nodeType":"YulBlock","src":"10047:3:63","statements":[]},"src":"10043:113:63"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"10176:3:63","nodeType":"YulIdentifier","src":"10176:3:63"},{"name":"length","nativeSrc":"10181:6:63","nodeType":"YulIdentifier","src":"10181:6:63"}],"functionName":{"name":"add","nativeSrc":"10172:3:63","nodeType":"YulIdentifier","src":"10172:3:63"},"nativeSrc":"10172:16:63","nodeType":"YulFunctionCall","src":"10172:16:63"},{"kind":"number","nativeSrc":"10190:1:63","nodeType":"YulLiteral","src":"10190:1:63","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"10165:6:63","nodeType":"YulIdentifier","src":"10165:6:63"},"nativeSrc":"10165:27:63","nodeType":"YulFunctionCall","src":"10165:27:63"},"nativeSrc":"10165:27:63","nodeType":"YulExpressionStatement","src":"10165:27:63"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"9948:250:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"9992:3:63","nodeType":"YulTypedName","src":"9992:3:63","type":""},{"name":"dst","nativeSrc":"9997:3:63","nodeType":"YulTypedName","src":"9997:3:63","type":""},{"name":"length","nativeSrc":"10002:6:63","nodeType":"YulTypedName","src":"10002:6:63","type":""}],"src":"9948:250:63"},{"body":{"nativeSrc":"10252:280:63","nodeType":"YulBlock","src":"10252:280:63","statements":[{"nativeSrc":"10262:26:63","nodeType":"YulVariableDeclaration","src":"10262:26:63","value":{"arguments":[{"name":"value","nativeSrc":"10282:5:63","nodeType":"YulIdentifier","src":"10282:5:63"}],"functionName":{"name":"mload","nativeSrc":"10276:5:63","nodeType":"YulIdentifier","src":"10276:5:63"},"nativeSrc":"10276:12:63","nodeType":"YulFunctionCall","src":"10276:12:63"},"variables":[{"name":"length","nativeSrc":"10266:6:63","nodeType":"YulTypedName","src":"10266:6:63","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"10304:3:63","nodeType":"YulIdentifier","src":"10304:3:63"},{"name":"length","nativeSrc":"10309:6:63","nodeType":"YulIdentifier","src":"10309:6:63"}],"functionName":{"name":"mstore","nativeSrc":"10297:6:63","nodeType":"YulIdentifier","src":"10297:6:63"},"nativeSrc":"10297:19:63","nodeType":"YulFunctionCall","src":"10297:19:63"},"nativeSrc":"10297:19:63","nodeType":"YulExpressionStatement","src":"10297:19:63"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10364:5:63","nodeType":"YulIdentifier","src":"10364:5:63"},{"kind":"number","nativeSrc":"10371:4:63","nodeType":"YulLiteral","src":"10371:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10360:3:63","nodeType":"YulIdentifier","src":"10360:3:63"},"nativeSrc":"10360:16:63","nodeType":"YulFunctionCall","src":"10360:16:63"},{"arguments":[{"name":"pos","nativeSrc":"10382:3:63","nodeType":"YulIdentifier","src":"10382:3:63"},{"kind":"number","nativeSrc":"10387:4:63","nodeType":"YulLiteral","src":"10387:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10378:3:63","nodeType":"YulIdentifier","src":"10378:3:63"},"nativeSrc":"10378:14:63","nodeType":"YulFunctionCall","src":"10378:14:63"},{"name":"length","nativeSrc":"10394:6:63","nodeType":"YulIdentifier","src":"10394:6:63"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"10325:34:63","nodeType":"YulIdentifier","src":"10325:34:63"},"nativeSrc":"10325:76:63","nodeType":"YulFunctionCall","src":"10325:76:63"},"nativeSrc":"10325:76:63","nodeType":"YulExpressionStatement","src":"10325:76:63"},{"nativeSrc":"10410:116:63","nodeType":"YulAssignment","src":"10410:116:63","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10425:3:63","nodeType":"YulIdentifier","src":"10425:3:63"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"10438:6:63","nodeType":"YulIdentifier","src":"10438:6:63"},{"kind":"number","nativeSrc":"10446:2:63","nodeType":"YulLiteral","src":"10446:2:63","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"10434:3:63","nodeType":"YulIdentifier","src":"10434:3:63"},"nativeSrc":"10434:15:63","nodeType":"YulFunctionCall","src":"10434:15:63"},{"kind":"number","nativeSrc":"10451:66:63","nodeType":"YulLiteral","src":"10451:66:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"10430:3:63","nodeType":"YulIdentifier","src":"10430:3:63"},"nativeSrc":"10430:88:63","nodeType":"YulFunctionCall","src":"10430:88:63"}],"functionName":{"name":"add","nativeSrc":"10421:3:63","nodeType":"YulIdentifier","src":"10421:3:63"},"nativeSrc":"10421:98:63","nodeType":"YulFunctionCall","src":"10421:98:63"},{"kind":"number","nativeSrc":"10521:4:63","nodeType":"YulLiteral","src":"10521:4:63","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10417:3:63","nodeType":"YulIdentifier","src":"10417:3:63"},"nativeSrc":"10417:109:63","nodeType":"YulFunctionCall","src":"10417:109:63"},"variableNames":[{"name":"end","nativeSrc":"10410:3:63","nodeType":"YulIdentifier","src":"10410:3:63"}]}]},"name":"abi_encode_bytes","nativeSrc":"10203:329:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10229:5:63","nodeType":"YulTypedName","src":"10229:5:63","type":""},{"name":"pos","nativeSrc":"10236:3:63","nodeType":"YulTypedName","src":"10236:3:63","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10244:3:63","nodeType":"YulTypedName","src":"10244:3:63","type":""}],"src":"10203:329:63"},{"body":{"nativeSrc":"10684:141:63","nodeType":"YulBlock","src":"10684:141:63","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10701:9:63","nodeType":"YulIdentifier","src":"10701:9:63"},{"kind":"number","nativeSrc":"10712:2:63","nodeType":"YulLiteral","src":"10712:2:63","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"10694:6:63","nodeType":"YulIdentifier","src":"10694:6:63"},"nativeSrc":"10694:21:63","nodeType":"YulFunctionCall","src":"10694:21:63"},"nativeSrc":"10694:21:63","nodeType":"YulExpressionStatement","src":"10694:21:63"},{"nativeSrc":"10724:52:63","nodeType":"YulAssignment","src":"10724:52:63","value":{"arguments":[{"name":"value0","nativeSrc":"10749:6:63","nodeType":"YulIdentifier","src":"10749:6:63"},{"arguments":[{"name":"headStart","nativeSrc":"10761:9:63","nodeType":"YulIdentifier","src":"10761:9:63"},{"kind":"number","nativeSrc":"10772:2:63","nodeType":"YulLiteral","src":"10772:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10757:3:63","nodeType":"YulIdentifier","src":"10757:3:63"},"nativeSrc":"10757:18:63","nodeType":"YulFunctionCall","src":"10757:18:63"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"10732:16:63","nodeType":"YulIdentifier","src":"10732:16:63"},"nativeSrc":"10732:44:63","nodeType":"YulFunctionCall","src":"10732:44:63"},"variableNames":[{"name":"tail","nativeSrc":"10724:4:63","nodeType":"YulIdentifier","src":"10724:4:63"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10796:9:63","nodeType":"YulIdentifier","src":"10796:9:63"},{"kind":"number","nativeSrc":"10807:2:63","nodeType":"YulLiteral","src":"10807:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10792:3:63","nodeType":"YulIdentifier","src":"10792:3:63"},"nativeSrc":"10792:18:63","nodeType":"YulFunctionCall","src":"10792:18:63"},{"name":"value1","nativeSrc":"10812:6:63","nodeType":"YulIdentifier","src":"10812:6:63"}],"functionName":{"name":"mstore","nativeSrc":"10785:6:63","nodeType":"YulIdentifier","src":"10785:6:63"},"nativeSrc":"10785:34:63","nodeType":"YulFunctionCall","src":"10785:34:63"},"nativeSrc":"10785:34:63","nodeType":"YulExpressionStatement","src":"10785:34:63"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nativeSrc":"10537:288:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10645:9:63","nodeType":"YulTypedName","src":"10645:9:63","type":""},{"name":"value1","nativeSrc":"10656:6:63","nodeType":"YulTypedName","src":"10656:6:63","type":""},{"name":"value0","nativeSrc":"10664:6:63","nodeType":"YulTypedName","src":"10664:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10675:4:63","nodeType":"YulTypedName","src":"10675:4:63","type":""}],"src":"10537:288:63"},{"body":{"nativeSrc":"10908:177:63","nodeType":"YulBlock","src":"10908:177:63","statements":[{"body":{"nativeSrc":"10954:16:63","nodeType":"YulBlock","src":"10954:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10963:1:63","nodeType":"YulLiteral","src":"10963:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"10966:1:63","nodeType":"YulLiteral","src":"10966:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10956:6:63","nodeType":"YulIdentifier","src":"10956:6:63"},"nativeSrc":"10956:12:63","nodeType":"YulFunctionCall","src":"10956:12:63"},"nativeSrc":"10956:12:63","nodeType":"YulExpressionStatement","src":"10956:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10929:7:63","nodeType":"YulIdentifier","src":"10929:7:63"},{"name":"headStart","nativeSrc":"10938:9:63","nodeType":"YulIdentifier","src":"10938:9:63"}],"functionName":{"name":"sub","nativeSrc":"10925:3:63","nodeType":"YulIdentifier","src":"10925:3:63"},"nativeSrc":"10925:23:63","nodeType":"YulFunctionCall","src":"10925:23:63"},{"kind":"number","nativeSrc":"10950:2:63","nodeType":"YulLiteral","src":"10950:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10921:3:63","nodeType":"YulIdentifier","src":"10921:3:63"},"nativeSrc":"10921:32:63","nodeType":"YulFunctionCall","src":"10921:32:63"},"nativeSrc":"10918:52:63","nodeType":"YulIf","src":"10918:52:63"},{"nativeSrc":"10979:36:63","nodeType":"YulVariableDeclaration","src":"10979:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"11005:9:63","nodeType":"YulIdentifier","src":"11005:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"10992:12:63","nodeType":"YulIdentifier","src":"10992:12:63"},"nativeSrc":"10992:23:63","nodeType":"YulFunctionCall","src":"10992:23:63"},"variables":[{"name":"value","nativeSrc":"10983:5:63","nodeType":"YulTypedName","src":"10983:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11049:5:63","nodeType":"YulIdentifier","src":"11049:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11024:24:63","nodeType":"YulIdentifier","src":"11024:24:63"},"nativeSrc":"11024:31:63","nodeType":"YulFunctionCall","src":"11024:31:63"},"nativeSrc":"11024:31:63","nodeType":"YulExpressionStatement","src":"11024:31:63"},{"nativeSrc":"11064:15:63","nodeType":"YulAssignment","src":"11064:15:63","value":{"name":"value","nativeSrc":"11074:5:63","nodeType":"YulIdentifier","src":"11074:5:63"},"variableNames":[{"name":"value0","nativeSrc":"11064:6:63","nodeType":"YulIdentifier","src":"11064:6:63"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"10830:255:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10874:9:63","nodeType":"YulTypedName","src":"10874:9:63","type":""},{"name":"dataEnd","nativeSrc":"10885:7:63","nodeType":"YulTypedName","src":"10885:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10897:6:63","nodeType":"YulTypedName","src":"10897:6:63","type":""}],"src":"10830:255:63"},{"body":{"nativeSrc":"11231:157:63","nodeType":"YulBlock","src":"11231:157:63","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11248:9:63","nodeType":"YulIdentifier","src":"11248:9:63"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"11273:6:63","nodeType":"YulIdentifier","src":"11273:6:63"}],"functionName":{"name":"iszero","nativeSrc":"11266:6:63","nodeType":"YulIdentifier","src":"11266:6:63"},"nativeSrc":"11266:14:63","nodeType":"YulFunctionCall","src":"11266:14:63"}],"functionName":{"name":"iszero","nativeSrc":"11259:6:63","nodeType":"YulIdentifier","src":"11259:6:63"},"nativeSrc":"11259:22:63","nodeType":"YulFunctionCall","src":"11259:22:63"}],"functionName":{"name":"mstore","nativeSrc":"11241:6:63","nodeType":"YulIdentifier","src":"11241:6:63"},"nativeSrc":"11241:41:63","nodeType":"YulFunctionCall","src":"11241:41:63"},"nativeSrc":"11241:41:63","nodeType":"YulExpressionStatement","src":"11241:41:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11302:9:63","nodeType":"YulIdentifier","src":"11302:9:63"},{"kind":"number","nativeSrc":"11313:2:63","nodeType":"YulLiteral","src":"11313:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11298:3:63","nodeType":"YulIdentifier","src":"11298:3:63"},"nativeSrc":"11298:18:63","nodeType":"YulFunctionCall","src":"11298:18:63"},{"kind":"number","nativeSrc":"11318:2:63","nodeType":"YulLiteral","src":"11318:2:63","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"11291:6:63","nodeType":"YulIdentifier","src":"11291:6:63"},"nativeSrc":"11291:30:63","nodeType":"YulFunctionCall","src":"11291:30:63"},"nativeSrc":"11291:30:63","nodeType":"YulExpressionStatement","src":"11291:30:63"},{"nativeSrc":"11330:52:63","nodeType":"YulAssignment","src":"11330:52:63","value":{"arguments":[{"name":"value1","nativeSrc":"11355:6:63","nodeType":"YulIdentifier","src":"11355:6:63"},{"arguments":[{"name":"headStart","nativeSrc":"11367:9:63","nodeType":"YulIdentifier","src":"11367:9:63"},{"kind":"number","nativeSrc":"11378:2:63","nodeType":"YulLiteral","src":"11378:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11363:3:63","nodeType":"YulIdentifier","src":"11363:3:63"},"nativeSrc":"11363:18:63","nodeType":"YulFunctionCall","src":"11363:18:63"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"11338:16:63","nodeType":"YulIdentifier","src":"11338:16:63"},"nativeSrc":"11338:44:63","nodeType":"YulFunctionCall","src":"11338:44:63"},"variableNames":[{"name":"tail","nativeSrc":"11330:4:63","nodeType":"YulIdentifier","src":"11330:4:63"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"11090:298:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11192:9:63","nodeType":"YulTypedName","src":"11192:9:63","type":""},{"name":"value1","nativeSrc":"11203:6:63","nodeType":"YulTypedName","src":"11203:6:63","type":""},{"name":"value0","nativeSrc":"11211:6:63","nodeType":"YulTypedName","src":"11211:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11222:4:63","nodeType":"YulTypedName","src":"11222:4:63","type":""}],"src":"11090:298:63"},{"body":{"nativeSrc":"11425:152:63","nodeType":"YulBlock","src":"11425:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11442:1:63","nodeType":"YulLiteral","src":"11442:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"11445:77:63","nodeType":"YulLiteral","src":"11445:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11435:6:63","nodeType":"YulIdentifier","src":"11435:6:63"},"nativeSrc":"11435:88:63","nodeType":"YulFunctionCall","src":"11435:88:63"},"nativeSrc":"11435:88:63","nodeType":"YulExpressionStatement","src":"11435:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11539:1:63","nodeType":"YulLiteral","src":"11539:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"11542:4:63","nodeType":"YulLiteral","src":"11542:4:63","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"11532:6:63","nodeType":"YulIdentifier","src":"11532:6:63"},"nativeSrc":"11532:15:63","nodeType":"YulFunctionCall","src":"11532:15:63"},"nativeSrc":"11532:15:63","nodeType":"YulExpressionStatement","src":"11532:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11563:1:63","nodeType":"YulLiteral","src":"11563:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"11566:4:63","nodeType":"YulLiteral","src":"11566:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11556:6:63","nodeType":"YulIdentifier","src":"11556:6:63"},"nativeSrc":"11556:15:63","nodeType":"YulFunctionCall","src":"11556:15:63"},"nativeSrc":"11556:15:63","nodeType":"YulExpressionStatement","src":"11556:15:63"}]},"name":"panic_error_0x32","nativeSrc":"11393:184:63","nodeType":"YulFunctionDefinition","src":"11393:184:63"},{"body":{"nativeSrc":"11667:177:63","nodeType":"YulBlock","src":"11667:177:63","statements":[{"body":{"nativeSrc":"11713:16:63","nodeType":"YulBlock","src":"11713:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11722:1:63","nodeType":"YulLiteral","src":"11722:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"11725:1:63","nodeType":"YulLiteral","src":"11725:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11715:6:63","nodeType":"YulIdentifier","src":"11715:6:63"},"nativeSrc":"11715:12:63","nodeType":"YulFunctionCall","src":"11715:12:63"},"nativeSrc":"11715:12:63","nodeType":"YulExpressionStatement","src":"11715:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11688:7:63","nodeType":"YulIdentifier","src":"11688:7:63"},{"name":"headStart","nativeSrc":"11697:9:63","nodeType":"YulIdentifier","src":"11697:9:63"}],"functionName":{"name":"sub","nativeSrc":"11684:3:63","nodeType":"YulIdentifier","src":"11684:3:63"},"nativeSrc":"11684:23:63","nodeType":"YulFunctionCall","src":"11684:23:63"},{"kind":"number","nativeSrc":"11709:2:63","nodeType":"YulLiteral","src":"11709:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11680:3:63","nodeType":"YulIdentifier","src":"11680:3:63"},"nativeSrc":"11680:32:63","nodeType":"YulFunctionCall","src":"11680:32:63"},"nativeSrc":"11677:52:63","nodeType":"YulIf","src":"11677:52:63"},{"nativeSrc":"11738:36:63","nodeType":"YulVariableDeclaration","src":"11738:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"11764:9:63","nodeType":"YulIdentifier","src":"11764:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"11751:12:63","nodeType":"YulIdentifier","src":"11751:12:63"},"nativeSrc":"11751:23:63","nodeType":"YulFunctionCall","src":"11751:23:63"},"variables":[{"name":"value","nativeSrc":"11742:5:63","nodeType":"YulTypedName","src":"11742:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11808:5:63","nodeType":"YulIdentifier","src":"11808:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11783:24:63","nodeType":"YulIdentifier","src":"11783:24:63"},"nativeSrc":"11783:31:63","nodeType":"YulFunctionCall","src":"11783:31:63"},"nativeSrc":"11783:31:63","nodeType":"YulExpressionStatement","src":"11783:31:63"},{"nativeSrc":"11823:15:63","nodeType":"YulAssignment","src":"11823:15:63","value":{"name":"value","nativeSrc":"11833:5:63","nodeType":"YulIdentifier","src":"11833:5:63"},"variableNames":[{"name":"value0","nativeSrc":"11823:6:63","nodeType":"YulIdentifier","src":"11823:6:63"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$3386","nativeSrc":"11582:262:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11633:9:63","nodeType":"YulTypedName","src":"11633:9:63","type":""},{"name":"dataEnd","nativeSrc":"11644:7:63","nodeType":"YulTypedName","src":"11644:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11656:6:63","nodeType":"YulTypedName","src":"11656:6:63","type":""}],"src":"11582:262:63"},{"body":{"nativeSrc":"11930:103:63","nodeType":"YulBlock","src":"11930:103:63","statements":[{"body":{"nativeSrc":"11976:16:63","nodeType":"YulBlock","src":"11976:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11985:1:63","nodeType":"YulLiteral","src":"11985:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"11988:1:63","nodeType":"YulLiteral","src":"11988:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11978:6:63","nodeType":"YulIdentifier","src":"11978:6:63"},"nativeSrc":"11978:12:63","nodeType":"YulFunctionCall","src":"11978:12:63"},"nativeSrc":"11978:12:63","nodeType":"YulExpressionStatement","src":"11978:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11951:7:63","nodeType":"YulIdentifier","src":"11951:7:63"},{"name":"headStart","nativeSrc":"11960:9:63","nodeType":"YulIdentifier","src":"11960:9:63"}],"functionName":{"name":"sub","nativeSrc":"11947:3:63","nodeType":"YulIdentifier","src":"11947:3:63"},"nativeSrc":"11947:23:63","nodeType":"YulFunctionCall","src":"11947:23:63"},{"kind":"number","nativeSrc":"11972:2:63","nodeType":"YulLiteral","src":"11972:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11943:3:63","nodeType":"YulIdentifier","src":"11943:3:63"},"nativeSrc":"11943:32:63","nodeType":"YulFunctionCall","src":"11943:32:63"},"nativeSrc":"11940:52:63","nodeType":"YulIf","src":"11940:52:63"},{"nativeSrc":"12001:26:63","nodeType":"YulAssignment","src":"12001:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"12017:9:63","nodeType":"YulIdentifier","src":"12017:9:63"}],"functionName":{"name":"mload","nativeSrc":"12011:5:63","nodeType":"YulIdentifier","src":"12011:5:63"},"nativeSrc":"12011:16:63","nodeType":"YulFunctionCall","src":"12011:16:63"},"variableNames":[{"name":"value0","nativeSrc":"12001:6:63","nodeType":"YulIdentifier","src":"12001:6:63"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"11849:184:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11896:9:63","nodeType":"YulTypedName","src":"11896:9:63","type":""},{"name":"dataEnd","nativeSrc":"11907:7:63","nodeType":"YulTypedName","src":"11907:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11919:6:63","nodeType":"YulTypedName","src":"11919:6:63","type":""}],"src":"11849:184:63"},{"body":{"nativeSrc":"12167:119:63","nodeType":"YulBlock","src":"12167:119:63","statements":[{"nativeSrc":"12177:26:63","nodeType":"YulAssignment","src":"12177:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"12189:9:63","nodeType":"YulIdentifier","src":"12189:9:63"},{"kind":"number","nativeSrc":"12200:2:63","nodeType":"YulLiteral","src":"12200:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12185:3:63","nodeType":"YulIdentifier","src":"12185:3:63"},"nativeSrc":"12185:18:63","nodeType":"YulFunctionCall","src":"12185:18:63"},"variableNames":[{"name":"tail","nativeSrc":"12177:4:63","nodeType":"YulIdentifier","src":"12177:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12219:9:63","nodeType":"YulIdentifier","src":"12219:9:63"},{"name":"value0","nativeSrc":"12230:6:63","nodeType":"YulIdentifier","src":"12230:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12212:6:63","nodeType":"YulIdentifier","src":"12212:6:63"},"nativeSrc":"12212:25:63","nodeType":"YulFunctionCall","src":"12212:25:63"},"nativeSrc":"12212:25:63","nodeType":"YulExpressionStatement","src":"12212:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12257:9:63","nodeType":"YulIdentifier","src":"12257:9:63"},{"kind":"number","nativeSrc":"12268:2:63","nodeType":"YulLiteral","src":"12268:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12253:3:63","nodeType":"YulIdentifier","src":"12253:3:63"},"nativeSrc":"12253:18:63","nodeType":"YulFunctionCall","src":"12253:18:63"},{"name":"value1","nativeSrc":"12273:6:63","nodeType":"YulIdentifier","src":"12273:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12246:6:63","nodeType":"YulIdentifier","src":"12246:6:63"},"nativeSrc":"12246:34:63","nodeType":"YulFunctionCall","src":"12246:34:63"},"nativeSrc":"12246:34:63","nodeType":"YulExpressionStatement","src":"12246:34:63"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"12038:248:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12128:9:63","nodeType":"YulTypedName","src":"12128:9:63","type":""},{"name":"value1","nativeSrc":"12139:6:63","nodeType":"YulTypedName","src":"12139:6:63","type":""},{"name":"value0","nativeSrc":"12147:6:63","nodeType":"YulTypedName","src":"12147:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12158:4:63","nodeType":"YulTypedName","src":"12158:4:63","type":""}],"src":"12038:248:63"},{"body":{"nativeSrc":"12329:74:63","nodeType":"YulBlock","src":"12329:74:63","statements":[{"body":{"nativeSrc":"12352:22:63","nodeType":"YulBlock","src":"12352:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"12354:16:63","nodeType":"YulIdentifier","src":"12354:16:63"},"nativeSrc":"12354:18:63","nodeType":"YulFunctionCall","src":"12354:18:63"},"nativeSrc":"12354:18:63","nodeType":"YulExpressionStatement","src":"12354:18:63"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"12349:1:63","nodeType":"YulIdentifier","src":"12349:1:63"}],"functionName":{"name":"iszero","nativeSrc":"12342:6:63","nodeType":"YulIdentifier","src":"12342:6:63"},"nativeSrc":"12342:9:63","nodeType":"YulFunctionCall","src":"12342:9:63"},"nativeSrc":"12339:35:63","nodeType":"YulIf","src":"12339:35:63"},{"nativeSrc":"12383:14:63","nodeType":"YulAssignment","src":"12383:14:63","value":{"arguments":[{"name":"x","nativeSrc":"12392:1:63","nodeType":"YulIdentifier","src":"12392:1:63"},{"name":"y","nativeSrc":"12395:1:63","nodeType":"YulIdentifier","src":"12395:1:63"}],"functionName":{"name":"mod","nativeSrc":"12388:3:63","nodeType":"YulIdentifier","src":"12388:3:63"},"nativeSrc":"12388:9:63","nodeType":"YulFunctionCall","src":"12388:9:63"},"variableNames":[{"name":"r","nativeSrc":"12383:1:63","nodeType":"YulIdentifier","src":"12383:1:63"}]}]},"name":"mod_t_uint256","nativeSrc":"12291:112:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"12314:1:63","nodeType":"YulTypedName","src":"12314:1:63","type":""},{"name":"y","nativeSrc":"12317:1:63","nodeType":"YulTypedName","src":"12317:1:63","type":""}],"returnVariables":[{"name":"r","nativeSrc":"12323:1:63","nodeType":"YulTypedName","src":"12323:1:63","type":""}],"src":"12291:112:63"},{"body":{"nativeSrc":"12565:162:63","nodeType":"YulBlock","src":"12565:162:63","statements":[{"nativeSrc":"12575:26:63","nodeType":"YulAssignment","src":"12575:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"12587:9:63","nodeType":"YulIdentifier","src":"12587:9:63"},{"kind":"number","nativeSrc":"12598:2:63","nodeType":"YulLiteral","src":"12598:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12583:3:63","nodeType":"YulIdentifier","src":"12583:3:63"},"nativeSrc":"12583:18:63","nodeType":"YulFunctionCall","src":"12583:18:63"},"variableNames":[{"name":"tail","nativeSrc":"12575:4:63","nodeType":"YulIdentifier","src":"12575:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12617:9:63","nodeType":"YulIdentifier","src":"12617:9:63"},{"name":"value0","nativeSrc":"12628:6:63","nodeType":"YulIdentifier","src":"12628:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12610:6:63","nodeType":"YulIdentifier","src":"12610:6:63"},"nativeSrc":"12610:25:63","nodeType":"YulFunctionCall","src":"12610:25:63"},"nativeSrc":"12610:25:63","nodeType":"YulExpressionStatement","src":"12610:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12655:9:63","nodeType":"YulIdentifier","src":"12655:9:63"},{"kind":"number","nativeSrc":"12666:2:63","nodeType":"YulLiteral","src":"12666:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12651:3:63","nodeType":"YulIdentifier","src":"12651:3:63"},"nativeSrc":"12651:18:63","nodeType":"YulFunctionCall","src":"12651:18:63"},{"name":"value1","nativeSrc":"12671:6:63","nodeType":"YulIdentifier","src":"12671:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12644:6:63","nodeType":"YulIdentifier","src":"12644:6:63"},"nativeSrc":"12644:34:63","nodeType":"YulFunctionCall","src":"12644:34:63"},"nativeSrc":"12644:34:63","nodeType":"YulExpressionStatement","src":"12644:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12698:9:63","nodeType":"YulIdentifier","src":"12698:9:63"},{"kind":"number","nativeSrc":"12709:2:63","nodeType":"YulLiteral","src":"12709:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12694:3:63","nodeType":"YulIdentifier","src":"12694:3:63"},"nativeSrc":"12694:18:63","nodeType":"YulFunctionCall","src":"12694:18:63"},{"name":"value2","nativeSrc":"12714:6:63","nodeType":"YulIdentifier","src":"12714:6:63"}],"functionName":{"name":"mstore","nativeSrc":"12687:6:63","nodeType":"YulIdentifier","src":"12687:6:63"},"nativeSrc":"12687:34:63","nodeType":"YulFunctionCall","src":"12687:34:63"},"nativeSrc":"12687:34:63","nodeType":"YulExpressionStatement","src":"12687:34:63"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"12408:319:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12518:9:63","nodeType":"YulTypedName","src":"12518:9:63","type":""},{"name":"value2","nativeSrc":"12529:6:63","nodeType":"YulTypedName","src":"12529:6:63","type":""},{"name":"value1","nativeSrc":"12537:6:63","nodeType":"YulTypedName","src":"12537:6:63","type":""},{"name":"value0","nativeSrc":"12545:6:63","nodeType":"YulTypedName","src":"12545:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12556:4:63","nodeType":"YulTypedName","src":"12556:4:63","type":""}],"src":"12408:319:63"},{"body":{"nativeSrc":"12889:211:63","nodeType":"YulBlock","src":"12889:211:63","statements":[{"nativeSrc":"12899:26:63","nodeType":"YulAssignment","src":"12899:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"12911:9:63","nodeType":"YulIdentifier","src":"12911:9:63"},{"kind":"number","nativeSrc":"12922:2:63","nodeType":"YulLiteral","src":"12922:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12907:3:63","nodeType":"YulIdentifier","src":"12907:3:63"},"nativeSrc":"12907:18:63","nodeType":"YulFunctionCall","src":"12907:18:63"},"variableNames":[{"name":"tail","nativeSrc":"12899:4:63","nodeType":"YulIdentifier","src":"12899:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12941:9:63","nodeType":"YulIdentifier","src":"12941:9:63"},{"arguments":[{"name":"value0","nativeSrc":"12956:6:63","nodeType":"YulIdentifier","src":"12956:6:63"},{"kind":"number","nativeSrc":"12964:42:63","nodeType":"YulLiteral","src":"12964:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12952:3:63","nodeType":"YulIdentifier","src":"12952:3:63"},"nativeSrc":"12952:55:63","nodeType":"YulFunctionCall","src":"12952:55:63"}],"functionName":{"name":"mstore","nativeSrc":"12934:6:63","nodeType":"YulIdentifier","src":"12934:6:63"},"nativeSrc":"12934:74:63","nodeType":"YulFunctionCall","src":"12934:74:63"},"nativeSrc":"12934:74:63","nodeType":"YulExpressionStatement","src":"12934:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13028:9:63","nodeType":"YulIdentifier","src":"13028:9:63"},{"kind":"number","nativeSrc":"13039:2:63","nodeType":"YulLiteral","src":"13039:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13024:3:63","nodeType":"YulIdentifier","src":"13024:3:63"},"nativeSrc":"13024:18:63","nodeType":"YulFunctionCall","src":"13024:18:63"},{"name":"value1","nativeSrc":"13044:6:63","nodeType":"YulIdentifier","src":"13044:6:63"}],"functionName":{"name":"mstore","nativeSrc":"13017:6:63","nodeType":"YulIdentifier","src":"13017:6:63"},"nativeSrc":"13017:34:63","nodeType":"YulFunctionCall","src":"13017:34:63"},"nativeSrc":"13017:34:63","nodeType":"YulExpressionStatement","src":"13017:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13071:9:63","nodeType":"YulIdentifier","src":"13071:9:63"},{"kind":"number","nativeSrc":"13082:2:63","nodeType":"YulLiteral","src":"13082:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13067:3:63","nodeType":"YulIdentifier","src":"13067:3:63"},"nativeSrc":"13067:18:63","nodeType":"YulFunctionCall","src":"13067:18:63"},{"name":"value2","nativeSrc":"13087:6:63","nodeType":"YulIdentifier","src":"13087:6:63"}],"functionName":{"name":"mstore","nativeSrc":"13060:6:63","nodeType":"YulIdentifier","src":"13060:6:63"},"nativeSrc":"13060:34:63","nodeType":"YulFunctionCall","src":"13060:34:63"},"nativeSrc":"13060:34:63","nodeType":"YulExpressionStatement","src":"13060:34:63"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"12732:368:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12842:9:63","nodeType":"YulTypedName","src":"12842:9:63","type":""},{"name":"value2","nativeSrc":"12853:6:63","nodeType":"YulTypedName","src":"12853:6:63","type":""},{"name":"value1","nativeSrc":"12861:6:63","nodeType":"YulTypedName","src":"12861:6:63","type":""},{"name":"value0","nativeSrc":"12869:6:63","nodeType":"YulTypedName","src":"12869:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12880:4:63","nodeType":"YulTypedName","src":"12880:4:63","type":""}],"src":"12732:368:63"},{"body":{"nativeSrc":"13262:260:63","nodeType":"YulBlock","src":"13262:260:63","statements":[{"nativeSrc":"13272:26:63","nodeType":"YulAssignment","src":"13272:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"13284:9:63","nodeType":"YulIdentifier","src":"13284:9:63"},{"kind":"number","nativeSrc":"13295:2:63","nodeType":"YulLiteral","src":"13295:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13280:3:63","nodeType":"YulIdentifier","src":"13280:3:63"},"nativeSrc":"13280:18:63","nodeType":"YulFunctionCall","src":"13280:18:63"},"variableNames":[{"name":"tail","nativeSrc":"13272:4:63","nodeType":"YulIdentifier","src":"13272:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13314:9:63","nodeType":"YulIdentifier","src":"13314:9:63"},{"name":"value0","nativeSrc":"13325:6:63","nodeType":"YulIdentifier","src":"13325:6:63"}],"functionName":{"name":"mstore","nativeSrc":"13307:6:63","nodeType":"YulIdentifier","src":"13307:6:63"},"nativeSrc":"13307:25:63","nodeType":"YulFunctionCall","src":"13307:25:63"},"nativeSrc":"13307:25:63","nodeType":"YulExpressionStatement","src":"13307:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13352:9:63","nodeType":"YulIdentifier","src":"13352:9:63"},{"kind":"number","nativeSrc":"13363:2:63","nodeType":"YulLiteral","src":"13363:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13348:3:63","nodeType":"YulIdentifier","src":"13348:3:63"},"nativeSrc":"13348:18:63","nodeType":"YulFunctionCall","src":"13348:18:63"},{"arguments":[{"name":"value1","nativeSrc":"13372:6:63","nodeType":"YulIdentifier","src":"13372:6:63"},{"kind":"number","nativeSrc":"13380:42:63","nodeType":"YulLiteral","src":"13380:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13368:3:63","nodeType":"YulIdentifier","src":"13368:3:63"},"nativeSrc":"13368:55:63","nodeType":"YulFunctionCall","src":"13368:55:63"}],"functionName":{"name":"mstore","nativeSrc":"13341:6:63","nodeType":"YulIdentifier","src":"13341:6:63"},"nativeSrc":"13341:83:63","nodeType":"YulFunctionCall","src":"13341:83:63"},"nativeSrc":"13341:83:63","nodeType":"YulExpressionStatement","src":"13341:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13444:9:63","nodeType":"YulIdentifier","src":"13444:9:63"},{"kind":"number","nativeSrc":"13455:2:63","nodeType":"YulLiteral","src":"13455:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13440:3:63","nodeType":"YulIdentifier","src":"13440:3:63"},"nativeSrc":"13440:18:63","nodeType":"YulFunctionCall","src":"13440:18:63"},{"arguments":[{"name":"value2","nativeSrc":"13464:6:63","nodeType":"YulIdentifier","src":"13464:6:63"},{"kind":"number","nativeSrc":"13472:42:63","nodeType":"YulLiteral","src":"13472:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13460:3:63","nodeType":"YulIdentifier","src":"13460:3:63"},"nativeSrc":"13460:55:63","nodeType":"YulFunctionCall","src":"13460:55:63"}],"functionName":{"name":"mstore","nativeSrc":"13433:6:63","nodeType":"YulIdentifier","src":"13433:6:63"},"nativeSrc":"13433:83:63","nodeType":"YulFunctionCall","src":"13433:83:63"},"nativeSrc":"13433:83:63","nodeType":"YulExpressionStatement","src":"13433:83:63"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"13105:417:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13215:9:63","nodeType":"YulTypedName","src":"13215:9:63","type":""},{"name":"value2","nativeSrc":"13226:6:63","nodeType":"YulTypedName","src":"13226:6:63","type":""},{"name":"value1","nativeSrc":"13234:6:63","nodeType":"YulTypedName","src":"13234:6:63","type":""},{"name":"value0","nativeSrc":"13242:6:63","nodeType":"YulTypedName","src":"13242:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13253:4:63","nodeType":"YulTypedName","src":"13253:4:63","type":""}],"src":"13105:417:63"},{"body":{"nativeSrc":"13656:168:63","nodeType":"YulBlock","src":"13656:168:63","statements":[{"nativeSrc":"13666:26:63","nodeType":"YulAssignment","src":"13666:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"13678:9:63","nodeType":"YulIdentifier","src":"13678:9:63"},{"kind":"number","nativeSrc":"13689:2:63","nodeType":"YulLiteral","src":"13689:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13674:3:63","nodeType":"YulIdentifier","src":"13674:3:63"},"nativeSrc":"13674:18:63","nodeType":"YulFunctionCall","src":"13674:18:63"},"variableNames":[{"name":"tail","nativeSrc":"13666:4:63","nodeType":"YulIdentifier","src":"13666:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13708:9:63","nodeType":"YulIdentifier","src":"13708:9:63"},{"name":"value0","nativeSrc":"13719:6:63","nodeType":"YulIdentifier","src":"13719:6:63"}],"functionName":{"name":"mstore","nativeSrc":"13701:6:63","nodeType":"YulIdentifier","src":"13701:6:63"},"nativeSrc":"13701:25:63","nodeType":"YulFunctionCall","src":"13701:25:63"},"nativeSrc":"13701:25:63","nodeType":"YulExpressionStatement","src":"13701:25:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13746:9:63","nodeType":"YulIdentifier","src":"13746:9:63"},{"kind":"number","nativeSrc":"13757:2:63","nodeType":"YulLiteral","src":"13757:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13742:3:63","nodeType":"YulIdentifier","src":"13742:3:63"},"nativeSrc":"13742:18:63","nodeType":"YulFunctionCall","src":"13742:18:63"},{"arguments":[{"name":"value1","nativeSrc":"13766:6:63","nodeType":"YulIdentifier","src":"13766:6:63"},{"kind":"number","nativeSrc":"13774:42:63","nodeType":"YulLiteral","src":"13774:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13762:3:63","nodeType":"YulIdentifier","src":"13762:3:63"},"nativeSrc":"13762:55:63","nodeType":"YulFunctionCall","src":"13762:55:63"}],"functionName":{"name":"mstore","nativeSrc":"13735:6:63","nodeType":"YulIdentifier","src":"13735:6:63"},"nativeSrc":"13735:83:63","nodeType":"YulFunctionCall","src":"13735:83:63"},"nativeSrc":"13735:83:63","nodeType":"YulExpressionStatement","src":"13735:83:63"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"13527:297:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13617:9:63","nodeType":"YulTypedName","src":"13617:9:63","type":""},{"name":"value1","nativeSrc":"13628:6:63","nodeType":"YulTypedName","src":"13628:6:63","type":""},{"name":"value0","nativeSrc":"13636:6:63","nodeType":"YulTypedName","src":"13636:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13647:4:63","nodeType":"YulTypedName","src":"13647:4:63","type":""}],"src":"13527:297:63"},{"body":{"nativeSrc":"13915:177:63","nodeType":"YulBlock","src":"13915:177:63","statements":[{"body":{"nativeSrc":"13961:16:63","nodeType":"YulBlock","src":"13961:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13970:1:63","nodeType":"YulLiteral","src":"13970:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"13973:1:63","nodeType":"YulLiteral","src":"13973:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13963:6:63","nodeType":"YulIdentifier","src":"13963:6:63"},"nativeSrc":"13963:12:63","nodeType":"YulFunctionCall","src":"13963:12:63"},"nativeSrc":"13963:12:63","nodeType":"YulExpressionStatement","src":"13963:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13936:7:63","nodeType":"YulIdentifier","src":"13936:7:63"},{"name":"headStart","nativeSrc":"13945:9:63","nodeType":"YulIdentifier","src":"13945:9:63"}],"functionName":{"name":"sub","nativeSrc":"13932:3:63","nodeType":"YulIdentifier","src":"13932:3:63"},"nativeSrc":"13932:23:63","nodeType":"YulFunctionCall","src":"13932:23:63"},{"kind":"number","nativeSrc":"13957:2:63","nodeType":"YulLiteral","src":"13957:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"13928:3:63","nodeType":"YulIdentifier","src":"13928:3:63"},"nativeSrc":"13928:32:63","nodeType":"YulFunctionCall","src":"13928:32:63"},"nativeSrc":"13925:52:63","nodeType":"YulIf","src":"13925:52:63"},{"nativeSrc":"13986:36:63","nodeType":"YulVariableDeclaration","src":"13986:36:63","value":{"arguments":[{"name":"headStart","nativeSrc":"14012:9:63","nodeType":"YulIdentifier","src":"14012:9:63"}],"functionName":{"name":"calldataload","nativeSrc":"13999:12:63","nodeType":"YulIdentifier","src":"13999:12:63"},"nativeSrc":"13999:23:63","nodeType":"YulFunctionCall","src":"13999:23:63"},"variables":[{"name":"value","nativeSrc":"13990:5:63","nodeType":"YulTypedName","src":"13990:5:63","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"14056:5:63","nodeType":"YulIdentifier","src":"14056:5:63"}],"functionName":{"name":"validator_revert_address","nativeSrc":"14031:24:63","nodeType":"YulIdentifier","src":"14031:24:63"},"nativeSrc":"14031:31:63","nodeType":"YulFunctionCall","src":"14031:31:63"},"nativeSrc":"14031:31:63","nodeType":"YulExpressionStatement","src":"14031:31:63"},{"nativeSrc":"14071:15:63","nodeType":"YulAssignment","src":"14071:15:63","value":{"name":"value","nativeSrc":"14081:5:63","nodeType":"YulIdentifier","src":"14081:5:63"},"variableNames":[{"name":"value0","nativeSrc":"14071:6:63","nodeType":"YulIdentifier","src":"14071:6:63"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$3198","nativeSrc":"13829:263:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13881:9:63","nodeType":"YulTypedName","src":"13881:9:63","type":""},{"name":"dataEnd","nativeSrc":"13892:7:63","nodeType":"YulTypedName","src":"13892:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13904:6:63","nodeType":"YulTypedName","src":"13904:6:63","type":""}],"src":"13829:263:63"},{"body":{"nativeSrc":"14154:107:63","nodeType":"YulBlock","src":"14154:107:63","statements":[{"nativeSrc":"14164:22:63","nodeType":"YulAssignment","src":"14164:22:63","value":{"arguments":[{"name":"offset","nativeSrc":"14179:6:63","nodeType":"YulIdentifier","src":"14179:6:63"}],"functionName":{"name":"mload","nativeSrc":"14173:5:63","nodeType":"YulIdentifier","src":"14173:5:63"},"nativeSrc":"14173:13:63","nodeType":"YulFunctionCall","src":"14173:13:63"},"variableNames":[{"name":"value","nativeSrc":"14164:5:63","nodeType":"YulIdentifier","src":"14164:5:63"}]},{"body":{"nativeSrc":"14239:16:63","nodeType":"YulBlock","src":"14239:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14248:1:63","nodeType":"YulLiteral","src":"14248:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"14251:1:63","nodeType":"YulLiteral","src":"14251:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14241:6:63","nodeType":"YulIdentifier","src":"14241:6:63"},"nativeSrc":"14241:12:63","nodeType":"YulFunctionCall","src":"14241:12:63"},"nativeSrc":"14241:12:63","nodeType":"YulExpressionStatement","src":"14241:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14208:5:63","nodeType":"YulIdentifier","src":"14208:5:63"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14229:5:63","nodeType":"YulIdentifier","src":"14229:5:63"}],"functionName":{"name":"iszero","nativeSrc":"14222:6:63","nodeType":"YulIdentifier","src":"14222:6:63"},"nativeSrc":"14222:13:63","nodeType":"YulFunctionCall","src":"14222:13:63"}],"functionName":{"name":"iszero","nativeSrc":"14215:6:63","nodeType":"YulIdentifier","src":"14215:6:63"},"nativeSrc":"14215:21:63","nodeType":"YulFunctionCall","src":"14215:21:63"}],"functionName":{"name":"eq","nativeSrc":"14205:2:63","nodeType":"YulIdentifier","src":"14205:2:63"},"nativeSrc":"14205:32:63","nodeType":"YulFunctionCall","src":"14205:32:63"}],"functionName":{"name":"iszero","nativeSrc":"14198:6:63","nodeType":"YulIdentifier","src":"14198:6:63"},"nativeSrc":"14198:40:63","nodeType":"YulFunctionCall","src":"14198:40:63"},"nativeSrc":"14195:60:63","nodeType":"YulIf","src":"14195:60:63"}]},"name":"abi_decode_bool_fromMemory","nativeSrc":"14097:164:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"14133:6:63","nodeType":"YulTypedName","src":"14133:6:63","type":""}],"returnVariables":[{"name":"value","nativeSrc":"14144:5:63","nodeType":"YulTypedName","src":"14144:5:63","type":""}],"src":"14097:164:63"},{"body":{"nativeSrc":"14344:124:63","nodeType":"YulBlock","src":"14344:124:63","statements":[{"body":{"nativeSrc":"14390:16:63","nodeType":"YulBlock","src":"14390:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14399:1:63","nodeType":"YulLiteral","src":"14399:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"14402:1:63","nodeType":"YulLiteral","src":"14402:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14392:6:63","nodeType":"YulIdentifier","src":"14392:6:63"},"nativeSrc":"14392:12:63","nodeType":"YulFunctionCall","src":"14392:12:63"},"nativeSrc":"14392:12:63","nodeType":"YulExpressionStatement","src":"14392:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14365:7:63","nodeType":"YulIdentifier","src":"14365:7:63"},{"name":"headStart","nativeSrc":"14374:9:63","nodeType":"YulIdentifier","src":"14374:9:63"}],"functionName":{"name":"sub","nativeSrc":"14361:3:63","nodeType":"YulIdentifier","src":"14361:3:63"},"nativeSrc":"14361:23:63","nodeType":"YulFunctionCall","src":"14361:23:63"},{"kind":"number","nativeSrc":"14386:2:63","nodeType":"YulLiteral","src":"14386:2:63","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"14357:3:63","nodeType":"YulIdentifier","src":"14357:3:63"},"nativeSrc":"14357:32:63","nodeType":"YulFunctionCall","src":"14357:32:63"},"nativeSrc":"14354:52:63","nodeType":"YulIf","src":"14354:52:63"},{"nativeSrc":"14415:47:63","nodeType":"YulAssignment","src":"14415:47:63","value":{"arguments":[{"name":"headStart","nativeSrc":"14452:9:63","nodeType":"YulIdentifier","src":"14452:9:63"}],"functionName":{"name":"abi_decode_bool_fromMemory","nativeSrc":"14425:26:63","nodeType":"YulIdentifier","src":"14425:26:63"},"nativeSrc":"14425:37:63","nodeType":"YulFunctionCall","src":"14425:37:63"},"variableNames":[{"name":"value0","nativeSrc":"14415:6:63","nodeType":"YulIdentifier","src":"14415:6:63"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"14266:202:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14310:9:63","nodeType":"YulTypedName","src":"14310:9:63","type":""},{"name":"dataEnd","nativeSrc":"14321:7:63","nodeType":"YulTypedName","src":"14321:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"14333:6:63","nodeType":"YulTypedName","src":"14333:6:63","type":""}],"src":"14266:202:63"},{"body":{"nativeSrc":"14630:260:63","nodeType":"YulBlock","src":"14630:260:63","statements":[{"nativeSrc":"14640:26:63","nodeType":"YulAssignment","src":"14640:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"14652:9:63","nodeType":"YulIdentifier","src":"14652:9:63"},{"kind":"number","nativeSrc":"14663:2:63","nodeType":"YulLiteral","src":"14663:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14648:3:63","nodeType":"YulIdentifier","src":"14648:3:63"},"nativeSrc":"14648:18:63","nodeType":"YulFunctionCall","src":"14648:18:63"},"variableNames":[{"name":"tail","nativeSrc":"14640:4:63","nodeType":"YulIdentifier","src":"14640:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14682:9:63","nodeType":"YulIdentifier","src":"14682:9:63"},{"arguments":[{"name":"value0","nativeSrc":"14697:6:63","nodeType":"YulIdentifier","src":"14697:6:63"},{"kind":"number","nativeSrc":"14705:42:63","nodeType":"YulLiteral","src":"14705:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"14693:3:63","nodeType":"YulIdentifier","src":"14693:3:63"},"nativeSrc":"14693:55:63","nodeType":"YulFunctionCall","src":"14693:55:63"}],"functionName":{"name":"mstore","nativeSrc":"14675:6:63","nodeType":"YulIdentifier","src":"14675:6:63"},"nativeSrc":"14675:74:63","nodeType":"YulFunctionCall","src":"14675:74:63"},"nativeSrc":"14675:74:63","nodeType":"YulExpressionStatement","src":"14675:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14769:9:63","nodeType":"YulIdentifier","src":"14769:9:63"},{"kind":"number","nativeSrc":"14780:2:63","nodeType":"YulLiteral","src":"14780:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14765:3:63","nodeType":"YulIdentifier","src":"14765:3:63"},"nativeSrc":"14765:18:63","nodeType":"YulFunctionCall","src":"14765:18:63"},{"arguments":[{"name":"value1","nativeSrc":"14789:6:63","nodeType":"YulIdentifier","src":"14789:6:63"},{"kind":"number","nativeSrc":"14797:42:63","nodeType":"YulLiteral","src":"14797:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"14785:3:63","nodeType":"YulIdentifier","src":"14785:3:63"},"nativeSrc":"14785:55:63","nodeType":"YulFunctionCall","src":"14785:55:63"}],"functionName":{"name":"mstore","nativeSrc":"14758:6:63","nodeType":"YulIdentifier","src":"14758:6:63"},"nativeSrc":"14758:83:63","nodeType":"YulFunctionCall","src":"14758:83:63"},"nativeSrc":"14758:83:63","nodeType":"YulExpressionStatement","src":"14758:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14861:9:63","nodeType":"YulIdentifier","src":"14861:9:63"},{"kind":"number","nativeSrc":"14872:2:63","nodeType":"YulLiteral","src":"14872:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14857:3:63","nodeType":"YulIdentifier","src":"14857:3:63"},"nativeSrc":"14857:18:63","nodeType":"YulFunctionCall","src":"14857:18:63"},{"name":"value2","nativeSrc":"14877:6:63","nodeType":"YulIdentifier","src":"14877:6:63"}],"functionName":{"name":"mstore","nativeSrc":"14850:6:63","nodeType":"YulIdentifier","src":"14850:6:63"},"nativeSrc":"14850:34:63","nodeType":"YulFunctionCall","src":"14850:34:63"},"nativeSrc":"14850:34:63","nodeType":"YulExpressionStatement","src":"14850:34:63"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"14473:417:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14583:9:63","nodeType":"YulTypedName","src":"14583:9:63","type":""},{"name":"value2","nativeSrc":"14594:6:63","nodeType":"YulTypedName","src":"14594:6:63","type":""},{"name":"value1","nativeSrc":"14602:6:63","nodeType":"YulTypedName","src":"14602:6:63","type":""},{"name":"value0","nativeSrc":"14610:6:63","nodeType":"YulTypedName","src":"14610:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14621:4:63","nodeType":"YulTypedName","src":"14621:4:63","type":""}],"src":"14473:417:63"},{"body":{"nativeSrc":"15052:309:63","nodeType":"YulBlock","src":"15052:309:63","statements":[{"nativeSrc":"15062:26:63","nodeType":"YulAssignment","src":"15062:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"15074:9:63","nodeType":"YulIdentifier","src":"15074:9:63"},{"kind":"number","nativeSrc":"15085:2:63","nodeType":"YulLiteral","src":"15085:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15070:3:63","nodeType":"YulIdentifier","src":"15070:3:63"},"nativeSrc":"15070:18:63","nodeType":"YulFunctionCall","src":"15070:18:63"},"variableNames":[{"name":"tail","nativeSrc":"15062:4:63","nodeType":"YulIdentifier","src":"15062:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15104:9:63","nodeType":"YulIdentifier","src":"15104:9:63"},{"arguments":[{"name":"value0","nativeSrc":"15119:6:63","nodeType":"YulIdentifier","src":"15119:6:63"},{"kind":"number","nativeSrc":"15127:42:63","nodeType":"YulLiteral","src":"15127:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"15115:3:63","nodeType":"YulIdentifier","src":"15115:3:63"},"nativeSrc":"15115:55:63","nodeType":"YulFunctionCall","src":"15115:55:63"}],"functionName":{"name":"mstore","nativeSrc":"15097:6:63","nodeType":"YulIdentifier","src":"15097:6:63"},"nativeSrc":"15097:74:63","nodeType":"YulFunctionCall","src":"15097:74:63"},"nativeSrc":"15097:74:63","nodeType":"YulExpressionStatement","src":"15097:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15191:9:63","nodeType":"YulIdentifier","src":"15191:9:63"},{"kind":"number","nativeSrc":"15202:2:63","nodeType":"YulLiteral","src":"15202:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15187:3:63","nodeType":"YulIdentifier","src":"15187:3:63"},"nativeSrc":"15187:18:63","nodeType":"YulFunctionCall","src":"15187:18:63"},{"arguments":[{"name":"value1","nativeSrc":"15211:6:63","nodeType":"YulIdentifier","src":"15211:6:63"},{"kind":"number","nativeSrc":"15219:42:63","nodeType":"YulLiteral","src":"15219:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"15207:3:63","nodeType":"YulIdentifier","src":"15207:3:63"},"nativeSrc":"15207:55:63","nodeType":"YulFunctionCall","src":"15207:55:63"}],"functionName":{"name":"mstore","nativeSrc":"15180:6:63","nodeType":"YulIdentifier","src":"15180:6:63"},"nativeSrc":"15180:83:63","nodeType":"YulFunctionCall","src":"15180:83:63"},"nativeSrc":"15180:83:63","nodeType":"YulExpressionStatement","src":"15180:83:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15283:9:63","nodeType":"YulIdentifier","src":"15283:9:63"},{"kind":"number","nativeSrc":"15294:2:63","nodeType":"YulLiteral","src":"15294:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15279:3:63","nodeType":"YulIdentifier","src":"15279:3:63"},"nativeSrc":"15279:18:63","nodeType":"YulFunctionCall","src":"15279:18:63"},{"arguments":[{"name":"value2","nativeSrc":"15303:6:63","nodeType":"YulIdentifier","src":"15303:6:63"},{"kind":"number","nativeSrc":"15311:42:63","nodeType":"YulLiteral","src":"15311:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"15299:3:63","nodeType":"YulIdentifier","src":"15299:3:63"},"nativeSrc":"15299:55:63","nodeType":"YulFunctionCall","src":"15299:55:63"}],"functionName":{"name":"mstore","nativeSrc":"15272:6:63","nodeType":"YulIdentifier","src":"15272:6:63"},"nativeSrc":"15272:83:63","nodeType":"YulFunctionCall","src":"15272:83:63"},"nativeSrc":"15272:83:63","nodeType":"YulExpressionStatement","src":"15272:83:63"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"14895:466:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15005:9:63","nodeType":"YulTypedName","src":"15005:9:63","type":""},{"name":"value2","nativeSrc":"15016:6:63","nodeType":"YulTypedName","src":"15016:6:63","type":""},{"name":"value1","nativeSrc":"15024:6:63","nodeType":"YulTypedName","src":"15024:6:63","type":""},{"name":"value0","nativeSrc":"15032:6:63","nodeType":"YulTypedName","src":"15032:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15043:4:63","nodeType":"YulTypedName","src":"15043:4:63","type":""}],"src":"14895:466:63"},{"body":{"nativeSrc":"15398:152:63","nodeType":"YulBlock","src":"15398:152:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15415:1:63","nodeType":"YulLiteral","src":"15415:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"15418:77:63","nodeType":"YulLiteral","src":"15418:77:63","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"15408:6:63","nodeType":"YulIdentifier","src":"15408:6:63"},"nativeSrc":"15408:88:63","nodeType":"YulFunctionCall","src":"15408:88:63"},"nativeSrc":"15408:88:63","nodeType":"YulExpressionStatement","src":"15408:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15512:1:63","nodeType":"YulLiteral","src":"15512:1:63","type":"","value":"4"},{"kind":"number","nativeSrc":"15515:4:63","nodeType":"YulLiteral","src":"15515:4:63","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"15505:6:63","nodeType":"YulIdentifier","src":"15505:6:63"},"nativeSrc":"15505:15:63","nodeType":"YulFunctionCall","src":"15505:15:63"},"nativeSrc":"15505:15:63","nodeType":"YulExpressionStatement","src":"15505:15:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15536:1:63","nodeType":"YulLiteral","src":"15536:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"15539:4:63","nodeType":"YulLiteral","src":"15539:4:63","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"15529:6:63","nodeType":"YulIdentifier","src":"15529:6:63"},"nativeSrc":"15529:15:63","nodeType":"YulFunctionCall","src":"15529:15:63"},"nativeSrc":"15529:15:63","nodeType":"YulExpressionStatement","src":"15529:15:63"}]},"name":"panic_error_0x41","nativeSrc":"15366:184:63","nodeType":"YulFunctionDefinition","src":"15366:184:63"},{"body":{"nativeSrc":"15659:1008:63","nodeType":"YulBlock","src":"15659:1008:63","statements":[{"body":{"nativeSrc":"15705:16:63","nodeType":"YulBlock","src":"15705:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15714:1:63","nodeType":"YulLiteral","src":"15714:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"15717:1:63","nodeType":"YulLiteral","src":"15717:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15707:6:63","nodeType":"YulIdentifier","src":"15707:6:63"},"nativeSrc":"15707:12:63","nodeType":"YulFunctionCall","src":"15707:12:63"},"nativeSrc":"15707:12:63","nodeType":"YulExpressionStatement","src":"15707:12:63"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"15680:7:63","nodeType":"YulIdentifier","src":"15680:7:63"},{"name":"headStart","nativeSrc":"15689:9:63","nodeType":"YulIdentifier","src":"15689:9:63"}],"functionName":{"name":"sub","nativeSrc":"15676:3:63","nodeType":"YulIdentifier","src":"15676:3:63"},"nativeSrc":"15676:23:63","nodeType":"YulFunctionCall","src":"15676:23:63"},{"kind":"number","nativeSrc":"15701:2:63","nodeType":"YulLiteral","src":"15701:2:63","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"15672:3:63","nodeType":"YulIdentifier","src":"15672:3:63"},"nativeSrc":"15672:32:63","nodeType":"YulFunctionCall","src":"15672:32:63"},"nativeSrc":"15669:52:63","nodeType":"YulIf","src":"15669:52:63"},{"nativeSrc":"15730:47:63","nodeType":"YulAssignment","src":"15730:47:63","value":{"arguments":[{"name":"headStart","nativeSrc":"15767:9:63","nodeType":"YulIdentifier","src":"15767:9:63"}],"functionName":{"name":"abi_decode_bool_fromMemory","nativeSrc":"15740:26:63","nodeType":"YulIdentifier","src":"15740:26:63"},"nativeSrc":"15740:37:63","nodeType":"YulFunctionCall","src":"15740:37:63"},"variableNames":[{"name":"value0","nativeSrc":"15730:6:63","nodeType":"YulIdentifier","src":"15730:6:63"}]},{"nativeSrc":"15786:39:63","nodeType":"YulVariableDeclaration","src":"15786:39:63","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15810:9:63","nodeType":"YulIdentifier","src":"15810:9:63"},{"kind":"number","nativeSrc":"15821:2:63","nodeType":"YulLiteral","src":"15821:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15806:3:63","nodeType":"YulIdentifier","src":"15806:3:63"},"nativeSrc":"15806:18:63","nodeType":"YulFunctionCall","src":"15806:18:63"}],"functionName":{"name":"mload","nativeSrc":"15800:5:63","nodeType":"YulIdentifier","src":"15800:5:63"},"nativeSrc":"15800:25:63","nodeType":"YulFunctionCall","src":"15800:25:63"},"variables":[{"name":"offset","nativeSrc":"15790:6:63","nodeType":"YulTypedName","src":"15790:6:63","type":""}]},{"body":{"nativeSrc":"15868:16:63","nodeType":"YulBlock","src":"15868:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15877:1:63","nodeType":"YulLiteral","src":"15877:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"15880:1:63","nodeType":"YulLiteral","src":"15880:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15870:6:63","nodeType":"YulIdentifier","src":"15870:6:63"},"nativeSrc":"15870:12:63","nodeType":"YulFunctionCall","src":"15870:12:63"},"nativeSrc":"15870:12:63","nodeType":"YulExpressionStatement","src":"15870:12:63"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"15840:6:63","nodeType":"YulIdentifier","src":"15840:6:63"},{"kind":"number","nativeSrc":"15848:18:63","nodeType":"YulLiteral","src":"15848:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"15837:2:63","nodeType":"YulIdentifier","src":"15837:2:63"},"nativeSrc":"15837:30:63","nodeType":"YulFunctionCall","src":"15837:30:63"},"nativeSrc":"15834:50:63","nodeType":"YulIf","src":"15834:50:63"},{"nativeSrc":"15893:32:63","nodeType":"YulVariableDeclaration","src":"15893:32:63","value":{"arguments":[{"name":"headStart","nativeSrc":"15907:9:63","nodeType":"YulIdentifier","src":"15907:9:63"},{"name":"offset","nativeSrc":"15918:6:63","nodeType":"YulIdentifier","src":"15918:6:63"}],"functionName":{"name":"add","nativeSrc":"15903:3:63","nodeType":"YulIdentifier","src":"15903:3:63"},"nativeSrc":"15903:22:63","nodeType":"YulFunctionCall","src":"15903:22:63"},"variables":[{"name":"_1","nativeSrc":"15897:2:63","nodeType":"YulTypedName","src":"15897:2:63","type":""}]},{"body":{"nativeSrc":"15973:16:63","nodeType":"YulBlock","src":"15973:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15982:1:63","nodeType":"YulLiteral","src":"15982:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"15985:1:63","nodeType":"YulLiteral","src":"15985:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15975:6:63","nodeType":"YulIdentifier","src":"15975:6:63"},"nativeSrc":"15975:12:63","nodeType":"YulFunctionCall","src":"15975:12:63"},"nativeSrc":"15975:12:63","nodeType":"YulExpressionStatement","src":"15975:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"15952:2:63","nodeType":"YulIdentifier","src":"15952:2:63"},{"kind":"number","nativeSrc":"15956:4:63","nodeType":"YulLiteral","src":"15956:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"15948:3:63","nodeType":"YulIdentifier","src":"15948:3:63"},"nativeSrc":"15948:13:63","nodeType":"YulFunctionCall","src":"15948:13:63"},{"name":"dataEnd","nativeSrc":"15963:7:63","nodeType":"YulIdentifier","src":"15963:7:63"}],"functionName":{"name":"slt","nativeSrc":"15944:3:63","nodeType":"YulIdentifier","src":"15944:3:63"},"nativeSrc":"15944:27:63","nodeType":"YulFunctionCall","src":"15944:27:63"}],"functionName":{"name":"iszero","nativeSrc":"15937:6:63","nodeType":"YulIdentifier","src":"15937:6:63"},"nativeSrc":"15937:35:63","nodeType":"YulFunctionCall","src":"15937:35:63"},"nativeSrc":"15934:55:63","nodeType":"YulIf","src":"15934:55:63"},{"nativeSrc":"15998:23:63","nodeType":"YulVariableDeclaration","src":"15998:23:63","value":{"arguments":[{"name":"_1","nativeSrc":"16018:2:63","nodeType":"YulIdentifier","src":"16018:2:63"}],"functionName":{"name":"mload","nativeSrc":"16012:5:63","nodeType":"YulIdentifier","src":"16012:5:63"},"nativeSrc":"16012:9:63","nodeType":"YulFunctionCall","src":"16012:9:63"},"variables":[{"name":"length","nativeSrc":"16002:6:63","nodeType":"YulTypedName","src":"16002:6:63","type":""}]},{"body":{"nativeSrc":"16064:22:63","nodeType":"YulBlock","src":"16064:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"16066:16:63","nodeType":"YulIdentifier","src":"16066:16:63"},"nativeSrc":"16066:18:63","nodeType":"YulFunctionCall","src":"16066:18:63"},"nativeSrc":"16066:18:63","nodeType":"YulExpressionStatement","src":"16066:18:63"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"16036:6:63","nodeType":"YulIdentifier","src":"16036:6:63"},{"kind":"number","nativeSrc":"16044:18:63","nodeType":"YulLiteral","src":"16044:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"16033:2:63","nodeType":"YulIdentifier","src":"16033:2:63"},"nativeSrc":"16033:30:63","nodeType":"YulFunctionCall","src":"16033:30:63"},"nativeSrc":"16030:56:63","nodeType":"YulIf","src":"16030:56:63"},{"nativeSrc":"16095:23:63","nodeType":"YulVariableDeclaration","src":"16095:23:63","value":{"arguments":[{"kind":"number","nativeSrc":"16115:2:63","nodeType":"YulLiteral","src":"16115:2:63","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"16109:5:63","nodeType":"YulIdentifier","src":"16109:5:63"},"nativeSrc":"16109:9:63","nodeType":"YulFunctionCall","src":"16109:9:63"},"variables":[{"name":"memPtr","nativeSrc":"16099:6:63","nodeType":"YulTypedName","src":"16099:6:63","type":""}]},{"nativeSrc":"16127:203:63","nodeType":"YulVariableDeclaration","src":"16127:203:63","value":{"arguments":[{"name":"memPtr","nativeSrc":"16149:6:63","nodeType":"YulIdentifier","src":"16149:6:63"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nativeSrc":"16173:6:63","nodeType":"YulIdentifier","src":"16173:6:63"},{"kind":"number","nativeSrc":"16181:4:63","nodeType":"YulLiteral","src":"16181:4:63","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"16169:3:63","nodeType":"YulIdentifier","src":"16169:3:63"},"nativeSrc":"16169:17:63","nodeType":"YulFunctionCall","src":"16169:17:63"},{"kind":"number","nativeSrc":"16188:66:63","nodeType":"YulLiteral","src":"16188:66:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"16165:3:63","nodeType":"YulIdentifier","src":"16165:3:63"},"nativeSrc":"16165:90:63","nodeType":"YulFunctionCall","src":"16165:90:63"},{"kind":"number","nativeSrc":"16257:2:63","nodeType":"YulLiteral","src":"16257:2:63","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"16161:3:63","nodeType":"YulIdentifier","src":"16161:3:63"},"nativeSrc":"16161:99:63","nodeType":"YulFunctionCall","src":"16161:99:63"},{"kind":"number","nativeSrc":"16262:66:63","nodeType":"YulLiteral","src":"16262:66:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"16157:3:63","nodeType":"YulIdentifier","src":"16157:3:63"},"nativeSrc":"16157:172:63","nodeType":"YulFunctionCall","src":"16157:172:63"}],"functionName":{"name":"add","nativeSrc":"16145:3:63","nodeType":"YulIdentifier","src":"16145:3:63"},"nativeSrc":"16145:185:63","nodeType":"YulFunctionCall","src":"16145:185:63"},"variables":[{"name":"newFreePtr","nativeSrc":"16131:10:63","nodeType":"YulTypedName","src":"16131:10:63","type":""}]},{"body":{"nativeSrc":"16405:22:63","nodeType":"YulBlock","src":"16405:22:63","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"16407:16:63","nodeType":"YulIdentifier","src":"16407:16:63"},"nativeSrc":"16407:18:63","nodeType":"YulFunctionCall","src":"16407:18:63"},"nativeSrc":"16407:18:63","nodeType":"YulExpressionStatement","src":"16407:18:63"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"16348:10:63","nodeType":"YulIdentifier","src":"16348:10:63"},{"kind":"number","nativeSrc":"16360:18:63","nodeType":"YulLiteral","src":"16360:18:63","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"16345:2:63","nodeType":"YulIdentifier","src":"16345:2:63"},"nativeSrc":"16345:34:63","nodeType":"YulFunctionCall","src":"16345:34:63"},{"arguments":[{"name":"newFreePtr","nativeSrc":"16384:10:63","nodeType":"YulIdentifier","src":"16384:10:63"},{"name":"memPtr","nativeSrc":"16396:6:63","nodeType":"YulIdentifier","src":"16396:6:63"}],"functionName":{"name":"lt","nativeSrc":"16381:2:63","nodeType":"YulIdentifier","src":"16381:2:63"},"nativeSrc":"16381:22:63","nodeType":"YulFunctionCall","src":"16381:22:63"}],"functionName":{"name":"or","nativeSrc":"16342:2:63","nodeType":"YulIdentifier","src":"16342:2:63"},"nativeSrc":"16342:62:63","nodeType":"YulFunctionCall","src":"16342:62:63"},"nativeSrc":"16339:88:63","nodeType":"YulIf","src":"16339:88:63"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"16443:2:63","nodeType":"YulLiteral","src":"16443:2:63","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"16447:10:63","nodeType":"YulIdentifier","src":"16447:10:63"}],"functionName":{"name":"mstore","nativeSrc":"16436:6:63","nodeType":"YulIdentifier","src":"16436:6:63"},"nativeSrc":"16436:22:63","nodeType":"YulFunctionCall","src":"16436:22:63"},"nativeSrc":"16436:22:63","nodeType":"YulExpressionStatement","src":"16436:22:63"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"16474:6:63","nodeType":"YulIdentifier","src":"16474:6:63"},{"name":"length","nativeSrc":"16482:6:63","nodeType":"YulIdentifier","src":"16482:6:63"}],"functionName":{"name":"mstore","nativeSrc":"16467:6:63","nodeType":"YulIdentifier","src":"16467:6:63"},"nativeSrc":"16467:22:63","nodeType":"YulFunctionCall","src":"16467:22:63"},"nativeSrc":"16467:22:63","nodeType":"YulExpressionStatement","src":"16467:22:63"},{"body":{"nativeSrc":"16539:16:63","nodeType":"YulBlock","src":"16539:16:63","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16548:1:63","nodeType":"YulLiteral","src":"16548:1:63","type":"","value":"0"},{"kind":"number","nativeSrc":"16551:1:63","nodeType":"YulLiteral","src":"16551:1:63","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16541:6:63","nodeType":"YulIdentifier","src":"16541:6:63"},"nativeSrc":"16541:12:63","nodeType":"YulFunctionCall","src":"16541:12:63"},"nativeSrc":"16541:12:63","nodeType":"YulExpressionStatement","src":"16541:12:63"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"16512:2:63","nodeType":"YulIdentifier","src":"16512:2:63"},{"name":"length","nativeSrc":"16516:6:63","nodeType":"YulIdentifier","src":"16516:6:63"}],"functionName":{"name":"add","nativeSrc":"16508:3:63","nodeType":"YulIdentifier","src":"16508:3:63"},"nativeSrc":"16508:15:63","nodeType":"YulFunctionCall","src":"16508:15:63"},{"kind":"number","nativeSrc":"16525:2:63","nodeType":"YulLiteral","src":"16525:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16504:3:63","nodeType":"YulIdentifier","src":"16504:3:63"},"nativeSrc":"16504:24:63","nodeType":"YulFunctionCall","src":"16504:24:63"},{"name":"dataEnd","nativeSrc":"16530:7:63","nodeType":"YulIdentifier","src":"16530:7:63"}],"functionName":{"name":"gt","nativeSrc":"16501:2:63","nodeType":"YulIdentifier","src":"16501:2:63"},"nativeSrc":"16501:37:63","nodeType":"YulFunctionCall","src":"16501:37:63"},"nativeSrc":"16498:57:63","nodeType":"YulIf","src":"16498:57:63"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"16603:2:63","nodeType":"YulIdentifier","src":"16603:2:63"},{"kind":"number","nativeSrc":"16607:2:63","nodeType":"YulLiteral","src":"16607:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16599:3:63","nodeType":"YulIdentifier","src":"16599:3:63"},"nativeSrc":"16599:11:63","nodeType":"YulFunctionCall","src":"16599:11:63"},{"arguments":[{"name":"memPtr","nativeSrc":"16616:6:63","nodeType":"YulIdentifier","src":"16616:6:63"},{"kind":"number","nativeSrc":"16624:2:63","nodeType":"YulLiteral","src":"16624:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16612:3:63","nodeType":"YulIdentifier","src":"16612:3:63"},"nativeSrc":"16612:15:63","nodeType":"YulFunctionCall","src":"16612:15:63"},{"name":"length","nativeSrc":"16629:6:63","nodeType":"YulIdentifier","src":"16629:6:63"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"16564:34:63","nodeType":"YulIdentifier","src":"16564:34:63"},"nativeSrc":"16564:72:63","nodeType":"YulFunctionCall","src":"16564:72:63"},"nativeSrc":"16564:72:63","nodeType":"YulExpressionStatement","src":"16564:72:63"},{"nativeSrc":"16645:16:63","nodeType":"YulAssignment","src":"16645:16:63","value":{"name":"memPtr","nativeSrc":"16655:6:63","nodeType":"YulIdentifier","src":"16655:6:63"},"variableNames":[{"name":"value1","nativeSrc":"16645:6:63","nodeType":"YulIdentifier","src":"16645:6:63"}]}]},"name":"abi_decode_tuple_t_boolt_bytes_memory_ptr_fromMemory","nativeSrc":"15555:1112:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15617:9:63","nodeType":"YulTypedName","src":"15617:9:63","type":""},{"name":"dataEnd","nativeSrc":"15628:7:63","nodeType":"YulTypedName","src":"15628:7:63","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"15640:6:63","nodeType":"YulTypedName","src":"15640:6:63","type":""},{"name":"value1","nativeSrc":"15648:6:63","nodeType":"YulTypedName","src":"15648:6:63","type":""}],"src":"15555:1112:63"},{"body":{"nativeSrc":"16829:211:63","nodeType":"YulBlock","src":"16829:211:63","statements":[{"nativeSrc":"16839:26:63","nodeType":"YulAssignment","src":"16839:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"16851:9:63","nodeType":"YulIdentifier","src":"16851:9:63"},{"kind":"number","nativeSrc":"16862:2:63","nodeType":"YulLiteral","src":"16862:2:63","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16847:3:63","nodeType":"YulIdentifier","src":"16847:3:63"},"nativeSrc":"16847:18:63","nodeType":"YulFunctionCall","src":"16847:18:63"},"variableNames":[{"name":"tail","nativeSrc":"16839:4:63","nodeType":"YulIdentifier","src":"16839:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16881:9:63","nodeType":"YulIdentifier","src":"16881:9:63"},{"arguments":[{"name":"value0","nativeSrc":"16896:6:63","nodeType":"YulIdentifier","src":"16896:6:63"},{"kind":"number","nativeSrc":"16904:42:63","nodeType":"YulLiteral","src":"16904:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16892:3:63","nodeType":"YulIdentifier","src":"16892:3:63"},"nativeSrc":"16892:55:63","nodeType":"YulFunctionCall","src":"16892:55:63"}],"functionName":{"name":"mstore","nativeSrc":"16874:6:63","nodeType":"YulIdentifier","src":"16874:6:63"},"nativeSrc":"16874:74:63","nodeType":"YulFunctionCall","src":"16874:74:63"},"nativeSrc":"16874:74:63","nodeType":"YulExpressionStatement","src":"16874:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16968:9:63","nodeType":"YulIdentifier","src":"16968:9:63"},{"kind":"number","nativeSrc":"16979:2:63","nodeType":"YulLiteral","src":"16979:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16964:3:63","nodeType":"YulIdentifier","src":"16964:3:63"},"nativeSrc":"16964:18:63","nodeType":"YulFunctionCall","src":"16964:18:63"},{"name":"value1","nativeSrc":"16984:6:63","nodeType":"YulIdentifier","src":"16984:6:63"}],"functionName":{"name":"mstore","nativeSrc":"16957:6:63","nodeType":"YulIdentifier","src":"16957:6:63"},"nativeSrc":"16957:34:63","nodeType":"YulFunctionCall","src":"16957:34:63"},"nativeSrc":"16957:34:63","nodeType":"YulExpressionStatement","src":"16957:34:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17011:9:63","nodeType":"YulIdentifier","src":"17011:9:63"},{"kind":"number","nativeSrc":"17022:2:63","nodeType":"YulLiteral","src":"17022:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17007:3:63","nodeType":"YulIdentifier","src":"17007:3:63"},"nativeSrc":"17007:18:63","nodeType":"YulFunctionCall","src":"17007:18:63"},{"name":"value2","nativeSrc":"17027:6:63","nodeType":"YulIdentifier","src":"17027:6:63"}],"functionName":{"name":"mstore","nativeSrc":"17000:6:63","nodeType":"YulIdentifier","src":"17000:6:63"},"nativeSrc":"17000:34:63","nodeType":"YulFunctionCall","src":"17000:34:63"},"nativeSrc":"17000:34:63","nodeType":"YulExpressionStatement","src":"17000:34:63"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"16672:368:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16782:9:63","nodeType":"YulTypedName","src":"16782:9:63","type":""},{"name":"value2","nativeSrc":"16793:6:63","nodeType":"YulTypedName","src":"16793:6:63","type":""},{"name":"value1","nativeSrc":"16801:6:63","nodeType":"YulTypedName","src":"16801:6:63","type":""},{"name":"value0","nativeSrc":"16809:6:63","nodeType":"YulTypedName","src":"16809:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16820:4:63","nodeType":"YulTypedName","src":"16820:4:63","type":""}],"src":"16672:368:63"},{"body":{"nativeSrc":"17236:14:63","nodeType":"YulBlock","src":"17236:14:63","statements":[{"nativeSrc":"17238:10:63","nodeType":"YulAssignment","src":"17238:10:63","value":{"name":"pos","nativeSrc":"17245:3:63","nodeType":"YulIdentifier","src":"17245:3:63"},"variableNames":[{"name":"end","nativeSrc":"17238:3:63","nodeType":"YulIdentifier","src":"17238:3:63"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"17045:205:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17220:3:63","nodeType":"YulTypedName","src":"17220:3:63","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17228:3:63","nodeType":"YulTypedName","src":"17228:3:63","type":""}],"src":"17045:205:63"},{"body":{"nativeSrc":"17384:168:63","nodeType":"YulBlock","src":"17384:168:63","statements":[{"nativeSrc":"17394:26:63","nodeType":"YulAssignment","src":"17394:26:63","value":{"arguments":[{"name":"headStart","nativeSrc":"17406:9:63","nodeType":"YulIdentifier","src":"17406:9:63"},{"kind":"number","nativeSrc":"17417:2:63","nodeType":"YulLiteral","src":"17417:2:63","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17402:3:63","nodeType":"YulIdentifier","src":"17402:3:63"},"nativeSrc":"17402:18:63","nodeType":"YulFunctionCall","src":"17402:18:63"},"variableNames":[{"name":"tail","nativeSrc":"17394:4:63","nodeType":"YulIdentifier","src":"17394:4:63"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17436:9:63","nodeType":"YulIdentifier","src":"17436:9:63"},{"arguments":[{"name":"value0","nativeSrc":"17451:6:63","nodeType":"YulIdentifier","src":"17451:6:63"},{"kind":"number","nativeSrc":"17459:42:63","nodeType":"YulLiteral","src":"17459:42:63","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"17447:3:63","nodeType":"YulIdentifier","src":"17447:3:63"},"nativeSrc":"17447:55:63","nodeType":"YulFunctionCall","src":"17447:55:63"}],"functionName":{"name":"mstore","nativeSrc":"17429:6:63","nodeType":"YulIdentifier","src":"17429:6:63"},"nativeSrc":"17429:74:63","nodeType":"YulFunctionCall","src":"17429:74:63"},"nativeSrc":"17429:74:63","nodeType":"YulExpressionStatement","src":"17429:74:63"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17523:9:63","nodeType":"YulIdentifier","src":"17523:9:63"},{"kind":"number","nativeSrc":"17534:2:63","nodeType":"YulLiteral","src":"17534:2:63","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17519:3:63","nodeType":"YulIdentifier","src":"17519:3:63"},"nativeSrc":"17519:18:63","nodeType":"YulFunctionCall","src":"17519:18:63"},{"name":"value1","nativeSrc":"17539:6:63","nodeType":"YulIdentifier","src":"17539:6:63"}],"functionName":{"name":"mstore","nativeSrc":"17512:6:63","nodeType":"YulIdentifier","src":"17512:6:63"},"nativeSrc":"17512:34:63","nodeType":"YulFunctionCall","src":"17512:34:63"},"nativeSrc":"17512:34:63","nodeType":"YulExpressionStatement","src":"17512:34:63"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"17255:297:63","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17345:9:63","nodeType":"YulTypedName","src":"17345:9:63","type":""},{"name":"value1","nativeSrc":"17356:6:63","nodeType":"YulTypedName","src":"17356:6:63","type":""},{"name":"value0","nativeSrc":"17364:6:63","nodeType":"YulTypedName","src":"17364:6:63","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17375:4:63","nodeType":"YulTypedName","src":"17375:4:63","type":""}],"src":"17255:297:63"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$3386__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1506__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IPoints_$5929__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3386_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3198_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bool_t_bytes_calldata_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 64)\n        mstore(add(headStart, 64), value2)\n        calldatacopy(add(headStart, 96), value1, value2)\n        mstore(add(add(headStart, value2), 96), 0)\n        tail := add(add(headStart, and(add(value2, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 96)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$3386(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$3198(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_boolt_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n        let offset := mload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := mload(_1)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, length)\n        if gt(add(add(_1, length), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_1, 32), add(memPtr, 32), length)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":63,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1360":[{"length":32,"start":875},{"length":32,"start":1166},{"length":32,"start":7499},{"length":32,"start":7641}],"2762":[{"length":32,"start":658},{"length":32,"start":2508},{"length":32,"start":2868},{"length":32,"start":3115},{"length":32,"start":7815},{"length":32,"start":7937}],"6084":[{"length":32,"start":1245},{"length":32,"start":2599}],"6237":[{"length":32,"start":969},{"length":32,"start":8167}],"6239":[{"length":32,"start":826},{"length":32,"start":8126}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x218 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0x11D JUMPI DUP1 PUSH4 0x9D696E36 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xEFA90B54 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x6DE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD547741F EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x629 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x5A7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5DC JUMPI DUP1 PUSH4 0x98807D84 EQ PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x4FC35859 GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x62BA9096 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x62BA9096 EQ PUSH2 0x4CB JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x968F264 GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x2D9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x23CC JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x2457 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x2B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x82A JUMP JUMPDEST PUSH2 0x326 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2457 JUMP JUMPDEST PUSH2 0x892 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2499 JUMP JUMPDEST PUSH2 0x8CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x901 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x440 PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x24C9 JUMP JUMPDEST PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x51A CALLDATASIZE PUSH1 0x4 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST PUSH2 0x326 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x2627 JUMP JUMPDEST PUSH2 0xD04 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0xFD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2649 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x1011 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x270 PUSH2 0x5F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2499 JUMP JUMPDEST PUSH2 0x103D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x617 CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x65A CALLDATASIZE PUSH1 0x4 PUSH2 0x2581 JUMP JUMPDEST PUSH2 0x1088 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x67A CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x2499 JUMP JUMPDEST PUSH2 0x10B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x700 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x70F CALLDATASIZE PUSH1 0x4 PUSH2 0x23AF JUMP JUMPDEST PUSH2 0x10DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x2662 JUMP JUMPDEST PUSH2 0x10FA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x777 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x2702 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x7BB SWAP2 SWAP1 PUSH2 0x275B JUMP JUMPDEST PUSH2 0x7C5 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C5 DUP3 PUSH2 0x7D9 PUSH2 0x1117 JUMP JUMPDEST SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH2 0x826 PUSH2 0x7EA PUSH2 0x121F JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1229 SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x83F JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x857 PUSH2 0xFD9 JUMP JUMPDEST PUSH2 0x861 SWAP2 SWAP1 PUSH2 0x2702 JUMP JUMPDEST PUSH2 0x86B SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x875 SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x87F SWAP2 SWAP1 PUSH2 0x275B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x8C8 PUSH2 0x89F PUSH2 0x121F JUMP JUMPDEST DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8B4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1378 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D7 PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0x8EB DUP2 PUSH2 0x8E5 PUSH2 0x1464 JUMP JUMPDEST SWAP1 PUSH2 0x1492 JUMP JUMPDEST PUSH2 0x8C8 DUP4 DUP4 DUP4 PUSH2 0x8F9 PUSH2 0x14FD JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90B PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0x916 DUP2 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x921 DUP3 PUSH2 0x734 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x826 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x95B DUP4 DUP4 PUSH2 0x168F JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9A5 SWAP3 SWAP2 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAE2 JUMPI PUSH1 0x0 PUSH2 0xA86 DUP5 DUP7 ADD DUP7 PUSH2 0x23AF JUMP JUMPDEST SWAP1 POP PUSH2 0xADC DUP2 DUP4 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAA0 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x8B4 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH2 0x2868 JUMP JUMPDEST POP PUSH2 0xAFA JUMP JUMPDEST PUSH2 0xAFA DUP7 DUP3 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAA0 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBDA JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0xB7B JUMPI PUSH2 0xB7B PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB90 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD2 JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0xBBD JUMPI PUSH2 0xBBD PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xBCF SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB2A JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xCED JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC96 SWAP2 SWAP1 PUSH2 0x28BA JUMP JUMPDEST PUSH2 0xCA0 SWAP2 SWAP1 PUSH2 0x2702 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xCEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x15C38D3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH2 0xCFB DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x169B JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0E PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0xD44 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xD3D PUSH2 0x14FD JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16B4 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xD7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xDB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDC2 PUSH1 0x0 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xDD3 DUP6 TIMESTAMP PUSH2 0x276F JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xE4B JUMPI PUSH1 0x0 PUSH2 0xDE8 DUP7 DUP9 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xE2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xE3D DUP7 DUP9 PUSH2 0x28D3 JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xF74 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xEDA JUMPI PUSH2 0xE5C TIMESTAMP DUP4 PUSH2 0x2702 JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xE6A DUP7 DUP9 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xEAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEC2 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xED2 SWAP1 POP DUP7 DUP9 PUSH2 0x28D3 JUMP JUMPDEST SWAP4 POP POP PUSH2 0xF74 JUMP JUMPDEST PUSH2 0xEE4 DUP6 DUP8 PUSH2 0x275B JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xF27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xF36 TIMESTAMP DUP5 PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xF43 SWAP2 SWAP1 PUSH2 0x2715 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF51 DUP9 DUP4 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0xF5D DUP8 DUP3 PUSH2 0x275B JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xF6A DUP8 DUP3 PUSH2 0x28D3 JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xFEC JUMPI DUP1 PUSH2 0x88C JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x100E PUSH2 0xFFE PUSH2 0x121F JUMP JUMPDEST DUP3 PUSH2 0x1007 PUSH2 0x14FD JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x173A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1038 PUSH2 0x101E PUSH2 0x1464 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1081 DUP4 DUP4 PUSH2 0x104C PUSH2 0x14FD JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x109B PUSH2 0x1093 PUSH2 0x121F JUMP JUMPDEST PUSH2 0x8E5 PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x10A9 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x17DE JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BB PUSH2 0x121F JUMP JUMPDEST SWAP1 POP PUSH2 0x10C9 DUP2 PUSH2 0x8E5 PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x8C8 DUP4 DUP4 DUP4 PUSH2 0x10D7 PUSH2 0x14FD JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1A7E JUMP JUMPDEST PUSH2 0x100E PUSH2 0x10EA PUSH2 0x121F JUMP JUMPDEST DUP3 PUSH2 0x10F3 PUSH2 0x1464 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B48 JUMP JUMPDEST PUSH2 0x1105 PUSH2 0x1093 PUSH2 0x121F JUMP JUMPDEST PUSH2 0x1111 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C5C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1195 JUMPI POP PUSH1 0x0 PUSH2 0x7C5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x11E6 JUMPI POP PUSH1 0x1 PUSH2 0x7C5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1038 PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x1232 DUP3 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x123E DUP4 DUP4 PUSH2 0x1E55 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x127A JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 DUP4 DUP1 DUP3 LT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B6A775800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCE2 JUMP JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE DUP4 DUP4 SUB PUSH1 0x1 SSTORE MLOAD PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E SWAP1 PUSH2 0x136A SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x1381 DUP3 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x138D DUP4 DUP4 PUSH2 0x1EAE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x13C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x13DB SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1415 SWAP1 DUP5 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x9A5 SWAP3 SWAP2 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2702 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1111 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x1609 PUSH2 0x82A JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x161E JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x162F JUMPI PUSH2 0x162B PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x100E JUMPI PUSH2 0x1654 DUP2 PUSH2 0x734 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1081 DUP4 DUP4 PUSH2 0x1F31 JUMP JUMPDEST PUSH2 0x16A6 PUSH2 0x1093 PUSH2 0x121F JUMP JUMPDEST PUSH2 0x10A9 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2049 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x8C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH2 0x1745 DUP4 DUP3 DUP5 PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x17EE JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1825 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A74 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x1844 JUMPI PUSH2 0x1844 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1859 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x190A SWAP2 SWAP1 PUSH2 0x28FC JUMP JUMPDEST PUSH2 0x1958 JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x196A JUMPI PUSH2 0x196A PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x197F SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x19AD JUMPI PUSH2 0x19AD PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19C2 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x19D4 JUMPI PUSH2 0x19D4 PUSH2 0x288B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1828 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1111 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x15F3 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1BB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1111 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1C96 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10A9 JUMPI PUSH2 0x1D00 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1CB6 JUMPI PUSH2 0x1CB6 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1CCF JUMPI PUSH2 0x1CCF PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1CE4 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x212A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1D18 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1D22 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1E44 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E20 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E44 SWAP2 SWAP1 PUSH2 0x28FC JUMP JUMPDEST ISZERO PUSH2 0x1E4E JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1E6B SWAP2 SWAP1 PUSH2 0x28BA JUMP JUMPDEST SWAP1 POP PUSH2 0x7C5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x21E0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1EC7 SWAP2 SWAP1 PUSH2 0x2946 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1EDF SWAP2 SWAP1 PUSH2 0x28BA JUMP JUMPDEST SWAP3 POP DUP2 ISZERO PUSH2 0x1F29 JUMPI PUSH2 0x1F29 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP7 ADDRESS DUP7 PUSH2 0x2261 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1F46 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x202B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x203F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x2059 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2090 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A74 JUMPI PUSH2 0x2122 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x20B0 JUMPI PUSH2 0x20B0 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x20C5 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x20D7 JUMPI PUSH2 0x20D7 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x20F0 JUMPI PUSH2 0x20F0 PUSH2 0x288B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2105 SWAP2 SWAP1 PUSH2 0x23AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x21E0 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2093 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x216D JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x21C8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21CD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1111 JUMPI PUSH2 0x1111 DUP2 PUSH2 0x22A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x8C8 SWAP2 DUP6 SWAP2 DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x22E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1111 SWAP2 DUP7 SWAP2 DUP3 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x84 ADD PUSH2 0x221A JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x22B7 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x230C JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x2324 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x233E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1111 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x100E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1081 DUP2 PUSH2 0x238D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1081 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x246A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x248D DUP6 DUP3 DUP7 ADD PUSH2 0x240E JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24BE DUP2 PUSH2 0x238D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x24E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x24EC DUP2 PUSH2 0x238D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x24FC DUP2 PUSH2 0x238D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x251F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x252B DUP9 DUP3 DUP10 ADD PUSH2 0x240E JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x254E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x259A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25BD DUP10 DUP3 DUP11 ADD PUSH2 0x253C JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25E9 DUP10 DUP3 DUP11 ADD PUSH2 0x253C JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2615 DUP10 DUP3 DUP11 ADD PUSH2 0x253C JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x263A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x265B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x268F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x269B DUP8 DUP3 DUP9 ADD PUSH2 0x253C JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26C7 DUP8 DUP3 DUP9 ADD PUSH2 0x253C JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x26D3 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x26D3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x276A JUMPI PUSH2 0x276A PUSH2 0x272C JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C5 PUSH2 0x26D3 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x60 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x27F3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x27DB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2814 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x27D8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2859 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x27FC JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2883 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x27FC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x28E2 JUMPI PUSH2 0x28E2 PUSH2 0x272C JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x28F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1081 DUP3 PUSH2 0x28E7 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2959 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2962 DUP4 PUSH2 0x28E7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x297E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x298F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29A9 JUMPI PUSH2 0x29A9 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2A15 JUMPI PUSH2 0x2A15 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP3 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x2A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3E DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x27D8 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB 0xB4 0xAC DUP2 0xC0 SWAP7 DUP11 LOG4 SHR 0x1F SIGNEXTEND EXP PUSH28 0x276A02ABA47E74B035DE64B3B1489C20147B2364736F6C634300081C STOP CALLER ","sourceMap":"813:1575:61:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4968:201:34;;;;;;;;;;-1:-1:-1;4968:201:34;;;;;:::i;:::-;;:::i;:::-;;;571:25:63;;;559:2;544:18;4968:201:34;;;;;;;;542:165:14;;;;;;;;;;-1:-1:-1;542:165:14;;;;;:::i;:::-;;:::i;:::-;;;1109:14:63;;1102:22;1084:41;;1072:2;1057:18;542:165:14;944:187:63;645:37:36;;;;;;;;;;;;;;;;;;1327:42:63;1315:55;;;1297:74;;1285:2;1270:18;645:37:36;1136:241:63;2413:56:34;;;;;;;;;;-1:-1:-1;2413:56:34;;;;;:::i;:::-;;;;;;;;;;;;;;2696:165:36;;;;;;;;;;-1:-1:-1;2696:165:36;;;;;:::i;:::-;;:::i;:::-;;384:44:62;;;;;;;;;;;;;;;728:115:23;;;;;;;;;;-1:-1:-1;817:19:23;728:115;;4329:355:34;;;;;;;;;;;;;:::i;1775:229:36:-;;;;;;:::i;:::-;;:::i;338:40:62:-;;;;;;;;;;;;;;;1116:257:3;;;;;;;;;;-1:-1:-1;1116:257:3;;;;;:::i;:::-;;:::i;9192:341:34:-;;;;;;;;;;;;;:::i;1322:578:61:-;;;;;;;;;;-1:-1:-1;1322:578:61;;;;;:::i;:::-;;:::i;:::-;;;4192:66:63;4180:79;;;4162:98;;4150:2;4135:18;1322:578:61;4018:248:63;878:149:23;;;;;;;;;;-1:-1:-1;878:149:23;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;916:39:61;;;;;;;;;;;;;;;3410:721:36;;;;;;;;;;-1:-1:-1;3410:721:36;;;;;:::i;:::-;;:::i;10496:2004:34:-;;;;;;:::i;:::-;;:::i;2233:25::-;;;;;;;;;;;;;;;;3941:231;;;;;;;;;;;;;:::i;2169:26::-;;;;;;;;;;;;;;;;2061:50;;;;;;;;;;;;;;;1994:124:3;;;;;;;;;;-1:-1:-1;1994:124:3;;;;;:::i;:::-;;:::i;710:120:4:-;;;;;;;;;;;;;:::i;2159:162:3:-;;;;;;;;;;-1:-1:-1;2159:162:3;;;;;:::i;:::-;;:::i;2347:60:34:-;;;;;;;;;;-1:-1:-1;2347:60:34;;;;;:::i;:::-;;;;;;;;;;;;;;2264:40;;;;;;;;;;;;;;;;2389:290:31;;;;;;;;;;-1:-1:-1;2389:290:31;;;;;:::i;:::-;;:::i;2475:70:34:-;;;;;;;;;;-1:-1:-1;2475:70:34;;;;;:::i;:::-;;;;;;;;;;;;;;2201:26;;;;;;;;;;;;;;;;1694:259:3;;;;;;;;;;-1:-1:-1;1694:259:3;;;;;:::i;:::-;;:::i;2117:45:34:-;;;;;;;;;;;;2158:4;2117:45;;2310:30;;;;;;;;;;;;;;;;864:152:4;;;;;;;;;;-1:-1:-1;864:152:4;;;;;:::i;:::-;;:::i;1219:247:31:-;;;;;;;;;;-1:-1:-1;1219:247:31;;;;;:::i;:::-;;:::i;4968:201:34:-;5146:16;;;5022:7;5146:16;;;:7;:16;;;;;;;;;5092:23;:32;;;;;;2158:4;;5068:21;:19;:21::i;:::-;:56;;;;:::i;:::-;5049:15;;;;;;;:6;:15;;;;;;:76;;;;:::i;:::-;5048:95;;;;:::i;:::-;:114;;;;:::i;:::-;5041:121;4968:201;-1:-1:-1;;4968:201:34:o;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;2696:165:36:-;2817:37;2827:12;:10;:12::i;:::-;2841;;2817:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2817:9:36;;-1:-1:-1;;;2817:37:36:i;:::-;2696:165;;:::o;4329:355:34:-;4429:11;;4381:7;;4454:23;;;4450:86;;-1:-1:-1;;4500:25:34;;;4329:355::o;4450:86::-;4658:18;2158:4;4627:10;;4612:11;;4583:26;:24;:26::i;:::-;:40;;;;:::i;:::-;4582:55;;;;:::i;:::-;:72;;;;:::i;:::-;4581:95;;;;:::i;:::-;4552:25;;:125;;;;:::i;:::-;4545:132;;;4329:355;:::o;1775:229:36:-;1922:4;1936:61;1943:12;:10;:12::i;:::-;1968:16;1986:9;;1957:39;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1936:6;:61::i;:::-;1848:156;1775:229;;:::o;1116:257:3:-;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;9192:341:34:-;9234:14;9251:12;:10;:12::i;:::-;9234:29;;9273:21;9287:6;9273:13;:21::i;:::-;9304:14;9321;9328:6;9321;:14::i;:::-;9304:31;-1:-1:-1;9349:11:34;;9345:182;;9376:15;;;9394:1;9376:15;;;:7;:15;;;;;:19;;;9434:29;9384:6;9456;9434:13;:29::i;:::-;9409:54;;9490:6;9482:34;;;9498:9;9509:6;9482:34;;;;;;;:::i;:::-;;;;;;;;9362:165;9224:309;;9192:341::o;1322:578:61:-;1450:6;1476:10;:36;1498:13;1476:36;;1468:61;;;;;;;;;;;;;;;;;1539:21;1594:14;1582:26;;:8;:26;;;1578:270;;1624:14;1641:27;;;;1652:4;1641:27;:::i;:::-;1624:44;;1682:63;1689:6;1708:16;1737:5;1726:17;;;;;;571:25:63;;559:2;544:18;;425:177;1726:17:61;;;;;;;;;;;;;;;1697:47;;;1726:17;1697:47;;:::i;1682:63::-;1610:146;1578:270;;;1776:61;1783:4;1800:16;1829:5;1818:17;;;;;;571:25:63;;559:2;544:18;;425:177;1776:61:61;-1:-1:-1;1864:29:61;;1322:578;-1:-1:-1;;;;;;1322:578:61:o;3410:721:36:-;3550:34;3599:9;3594:169;3610:17;;;3594:169;;;3665:13;3652:26;;:6;;3659:1;3652:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:26;;;3648:105;;3728:7;;3736:1;3728:10;;;;;;;:::i;:::-;;;;;;;3698:40;;;;;:::i;:::-;;;3648:105;3629:3;;3594:169;;;-1:-1:-1;3776:31:36;;3772:297;;3886:11;;3845:38;;;;;3877:4;3845:38;;;1297:74:63;3823:19:36;;3886:11;3845:23;:13;:23;;;;1270:18:63;;3845:38:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:52;;;;:::i;:::-;3823:74;;3944:11;3915:26;:40;3911:148;;;3982:62;;;;;;;;12212:25:63;;;12253:18;;;12246:34;;;12185:18;;3982:62:36;;;;;;;;3911:148;3809:260;3772:297;4078:46;4098:8;;4108:6;;4116:7;;4078:19;:46::i;:::-;3540:591;3410:721;;;;;;:::o;10496:2004:34:-;10582:16;10601:12;:10;:12::i;:::-;10582:31;;10623:69;10668:13;10683:8;10623:29;:27;:29::i;:::-;:44;:69;:44;:69::i;:::-;10711:6;10721:1;10711:11;10703:43;;;;;;;;;;;;;;;;;10764:8;10776:1;10764:13;10756:41;;;;;;;;;;;;;;;;;10808:25;10830:1;10808:13;:25::i;:::-;10899:15;;10844:12;;;10952:26;10970:8;10952:15;:26;:::i;:::-;10924:54;;11012:22;10993:15;:41;10989:1353;;11089:21;11113:17;11122:8;11113:6;:17;:::i;:::-;11089:41;-1:-1:-1;11198:6:34;11206:8;11152:18;11144:72;;;;;;;;;;12212:25:63;;;;12253:18;;;12246:34;12185:18;;11144:72:34;12038:248:63;11144:72:34;-1:-1:-1;;11230:10:34;:26;;;11277:17;11286:8;11277:6;:17;:::i;:::-;11308:15;:35;;;11270:24;-1:-1:-1;10989:1353:34;;-1:-1:-1;10989:1353:34;;11399:22;11378:17;:43;11374:958;;11521:40;11546:15;11521:22;:40;:::i;:::-;11510:51;-1:-1:-1;11579:28:34;11610:17;11510:51;11610:6;:17;:::i;:::-;11579:48;-1:-1:-1;11706:6:34;11714:8;11653:25;11645:79;;;;;;;;;;12212:25:63;;;;12253:18;;;12246:34;12185:18;;11645:79:34;12038:248:63;11645:79:34;;;11756:20;11742:10;;:34;;;;;;;:::i;:::-;;;;-1:-1:-1;11801:17:34;;-1:-1:-1;11810:8:34;11801:6;:17;:::i;:::-;11794:24;;11423:410;11374:958;;;11933:17;11942:8;11933:6;:17;:::i;:::-;11983:6;;11991:8;;11925:76;;;;;;;;;;12212:25:63;;;;12253:18;;;12246:34;12185:18;;11925:76:34;12038:248:63;11925:76:34;-1:-1:-1;12019:23:34;;-1:-1:-1;12059:40:34;12084:15;12059:22;:40;:::i;:::-;12045:10;;:55;;;;:::i;:::-;12019:81;-1:-1:-1;12118:19:34;12140:24;12158:6;12019:81;12140:24;:::i;:::-;12118:46;-1:-1:-1;12195:22:34;12209:8;12118:46;12195:22;:::i;:::-;12182:10;:35;12242:22;12256:8;12242:11;:22;:::i;:::-;12282:15;:35;;;12235:29;-1:-1:-1;;;11374:958:34;12365:15;12351:11;:29;12448:45;;;12610:25:63;;;12666:2;12651:18;;12644:34;;;12694:18;;;12687:34;;;12448:45:34;;;;;;12598:2:63;12583:18;12448:45:34;;;;;;;10572:1928;;;;10496:2004;;:::o;3941:231::-;4050:15;;3998:7;;4082:15;:40;-1:-1:-1;4082:83:34;;4143:22;4082:83;;;4125:15;4075:90;;;3941:231;:::o;1994:124:3:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:13;;;;3550:118;782:41:4;775:48;;710:120;:::o;2159:162:3:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2768:13:12;2800;;;;;;;;;;;:22;;;;;;;;;;;;;;;2679:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;2389:290:31:-;2526:70;2583:12;:10;:12::i;:::-;2526:33;:31;:33::i;:70::-;2606:66;2642:8;;2652:9;;2663:8;;2606:35;:66::i;:::-;2389:290;;;;;;:::o;1694:259:3:-;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:4:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1219:247:31:-;1329:70;1386:12;:10;:12::i;1329:70::-;1409:50;1441:8;;1451:7;;1409:31;:50::i;:::-;1219:247;;;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;13000:175:34:-;13101:7;13127:41;:39;:41::i;8310:618::-;8399:21;8413:6;8399:13;:21::i;:::-;8430:19;8452:38;8469:6;8477:12;8452:16;:38::i;:::-;8430:60;;8508:11;8523:1;8508:16;8500:50;;;;;;;;;;;;;;;;;8584:14;;;8560:21;8584:14;;;:6;:14;;;;;;8591:6;8584:14;8633:11;8616:28;;;;8608:89;;;;;;;12964:42:63;12952:55;;;8608:89:34;;;12934:74:63;13024:18;;;13017:34;;;;13067:18;;;13060:34;12907:18;;8608:89:34;12732:368:63;8608:89:34;-1:-1:-1;;;8768:14:34;;;;;;;:6;:14;;;;;;;:29;;;;;;;8825:27;;;-1:-1:-1;8811:41:34;8877:44;;;;;8895:12;;8786:11;;8877:44;:::i;:::-;;;;;;;;8389:539;;8310:618;;:::o;6423:360::-;6506:21;6520:6;6506:13;:21::i;:::-;6537:19;6559:32;6573:6;6581:9;6559:13;:32::i;:::-;6537:54;;6609:11;6624:1;6609:16;6601:47;;;;;;;;;;;;;;;;;6673:11;6658;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;6694:14:34;;;;;;;:6;:14;;;;;:29;;6712:11;;6694:14;:29;;6712:11;;6694:29;:::i;:::-;;;;;;;;6745:6;6738:38;;;6753:9;6764:11;6738:38;;;;;;;:::i;5060:174:13:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;1327:42:63;1315:55;;4538:25:13;;;1297:74:63;1270:18;;4538:25:13;1136:241:63;4376:174:12;4417:16;;696:67;762:1;704:54;696:67;:::i;1145:251::-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1250:140;;1295:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1320:4;1295:29;;;1343:36;;13307:25:63;;;13348:18;;;13341:83;13460:55;;;13440:18;;;13433:83;;;;1343:36:12;;13295:2:63;13280:18;1343:36:12;;;;;;;;1145:251;;;;:::o;3300:488:34:-;3387:21;:19;:21::i;:::-;3359:25;:49;3441:15;;3422;:34;;;:54;;-1:-1:-1;3460:11:34;;:16;;3422:54;3418:195;;;3576:26;:24;:26::i;:::-;3562:11;:40;3418:195;3626:21;;;;3622:160;;3682:15;3689:7;3682:6;:15::i;:::-;3663:16;;;;;;;:7;:16;;;;;;;;:34;;;;3746:25;;3711:23;:32;;;;;;:60;3300:488;:::o;1906:252:61:-;2056:22;2097:54;2136:6;2144;2097:38;:54::i;1786:279:31:-;1917:70;1974:12;:10;:12::i;1917:70::-;1997:61;2032:8;;2042:6;;2050:7;;1997:34;:61::i;3640:170:12:-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;3737:66;;3775:28;;;;;;;;13701:25:63;;;13774:42;13762:55;;13742:18;;;13735:83;13674:18;;3775:28:12;13527:297:63;2282:213:12;2371:30;:1;2388:4;2394:6;2371:16;:30::i;:::-;2435:5;2411:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2455:33;;13307:25:63;;;13348:18;;;13341:83;;;13440:18;;13433:83;;;;2455:33:12;;13295:2:63;13280:18;2455:33:12;;;;;;;2282:213;;;:::o;3679:647:33:-;3827:8;3856:26;;;;;:55;;-1:-1:-1;3886:25:33;;;;3856:55;3852:94;;;3920:26;;;;;;;;;;;;;;3852:94;3961:9;3956:364;3976:6;3972:1;:10;3956:364;;;4003:21;4027:9;;4037:1;4027:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4058:76;;;;;4108:25;4058:76;;;4162:98:63;4003:36:33;;-1:-1:-1;4058:49:33;;;;;;4135:18:63;;4058:76:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4053:173;;4161:50;;;;;1327:42:63;1315:55;;4161:50:33;;;1297:74:63;1270:18;;4161:50:33;1136:241:63;4053:173:33;4239:9;;4249:1;4239:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:29;;;4277:4;4284:8;;4293:1;4284:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4297:8;;4306:1;4297:11;;;;;;;:::i;:::-;4239:70;;;;;;;;;;14705:42:63;14693:55;;;4239:70:33;;;14675:74:63;14785:55;;;;14765:18;;;14758:83;-1:-1:-1;4297:11:33;;;;;;14857:18:63;;;14850:34;14648:18;;4239:70:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3989:331;3984:3;;;;;3956:364;;;;3800:526;3679:647;;;;;;:::o;1774:252:12:-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1880:140;;;1949:5;1924:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1973:36;;13307:25:63;;;13348:18;;;13341:83;13460:55;;;13440:18;;;13433:83;;;;1973:36:12;;13295:2:63;13280:18;1973:36:12;13105:417:63;3054:369:13;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;1327:42:63;1315:55;;3237:24:13;;;1297:74:63;1270:18;;3237:24:13;1136:241:63;3201:60:13;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:13;3142:281;3054:369;;;:::o;1610:316:33:-;1731:8;1760:24;;;1756:63;;1793:26;;;;;;;;;;;;;;1756:63;1834:9;1829:91;1849:6;1845:1;:10;1829:91;;;1876:33;1898:7;;1906:1;1898:10;;;;;;;:::i;:::-;;;;;;;1876:8;;1885:1;1876:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;1857:3;;1829:91;;784:760:24;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:24;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:24;;784:760::o;1043:95::-;462:23:27;466:14;462:23;449:37;445:2;441:46;1372:19:24;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:24;;;;;:39;15115:55:63;;;1396:74:24;;;15097::63;1444:10:24;15187:18:63;;;15180:83;1464:4:24;15279:18:63;;;15272:83;1396:19:24;:39;;;;15070:18:63;;1396:74:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:24:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;2990:248:36:-;3094:19;3150:12;3139:35;;;;;;;;;;;;:::i;:::-;3125:49;-1:-1:-1;3184:47:36;:26;:13;:26;3211:6;3125:49;3184:26;:47::i;2177:390::-;2275:19;2307:21;2330:17;2362:9;2351:36;;;;;;;;;;;;:::i;:::-;2306:81;;;;2422:4;2411:27;;;;;;;;;;;;:::i;:::-;2397:41;;2452:16;2448:113;;;2484:66;:30;:13;:30;2515:6;2531:4;2538:11;2484:30;:66::i;:::-;2296:271;;2177:390;;;;:::o;602:222:62:-;683:22;740:6;729:18;;;;;;571:25:63;;559:2;544:18;;425:177;729:18:62;;;;;;;;;;;;;;;757:60;;;:23;12952:55:63;;;757:60:62;;;12934:74:63;13024:18;;;13017:34;;;797:19:62;13067:18:63;;;13060:34;729:18:62;;-1:-1:-1;757:15:62;:23;;;;12907:18:63;;757:60:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;602:222;;;;:::o;2609:378:33:-;2751:8;2780:23;;;;;:51;;-1:-1:-1;2807:24:33;;;;2780:51;2776:90;;;2840:26;;;;;;;;;;;;;;2776:90;2881:9;2876:105;2896:6;2892:1;:10;2876:105;;;2923:47;2946:8;;2955:1;2946:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2959:7;;2967:1;2959:10;;;;;;;:::i;:::-;;;;;;;2923:6;;2930:1;2923:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;2904:3;;2876:105;;1290:365:47;1399:6;1375:21;:30;1371:125;;;1428:57;;;;;1455:21;1428:57;;;12212:25:63;12253:18;;;12246:34;;;12185:18;;1428:57:47;12038:248:63;1371:125:47;1507:12;1521:23;1548:9;:14;;1570:6;1548:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1506:75;;;;1596:7;1591:58;;1619:19;1627:10;1619:7;:19::i;1219:160:46:-;1328:43;;1343:14;17447:55:63;;;1328:43:46;;;17429:74:63;17519:18;;;17512:34;;;1301:71:46;;1321:5;;1343:14;;;;;17402:18:63;;1328:43:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1301:19;:71::i;1618:188::-;1745:53;;1760:18;14693:55:63;;;1745:53:46;;;14675:74:63;14785:55;;;14765:18;;;14758:83;14857:18;;;14850:34;;;1718:81:46;;1738:5;;1760:18;;;;;14648::63;;1745:53:46;14473:417:63;5559:487:47;5690:17;;:21;5686:354;;5887:10;5881:17;5943:15;5930:10;5926:2;5922:19;5915:44;5686:354;6010:19;;;;;;;;;;;;;;7686:720:46;7766:18;7794:19;7932:4;7929:1;7922:4;7916:11;7909:4;7903;7899:15;7896:1;7889:5;7882;7877:60;7989:7;7979:176;;8033:4;8027:11;8078:16;8075:1;8070:3;8055:40;8124:16;8119:3;8112:29;7979:176;-1:-1:-1;;8232:1:46;8226:8;8182:16;;-1:-1:-1;8258:15:46;;:68;;8310:11;8325:1;8310:16;;8258:68;;;8276:26;;;;:31;8258:68;8254:146;;;8349:40;;;;;1327:42:63;1315:55;;8349:40:46;;;1297:74:63;1270:18;;8349:40:46;1136:241:63;14:154;100:42;93:5;89:54;82:5;79:65;69:93;;158:1;155;148:12;173:247;232:6;285:2;273:9;264:7;260:23;256:32;253:52;;;301:1;298;291:12;253:52;340:9;327:23;359:31;384:5;359:31;:::i;607:332::-;665:6;718:2;706:9;697:7;693:23;689:32;686:52;;;734:1;731;724:12;686:52;773:9;760:23;823:66;816:5;812:78;805:5;802:89;792:117;;905:1;902;895:12;1382:347;1433:8;1443:6;1497:3;1490:4;1482:6;1478:17;1474:27;1464:55;;1515:1;1512;1505:12;1464:55;-1:-1:-1;1538:20:63;;1581:18;1570:30;;1567:50;;;1613:1;1610;1603:12;1567:50;1650:4;1642:6;1638:17;1626:29;;1702:3;1695:4;1686:6;1678;1674:19;1670:30;1667:39;1664:59;;;1719:1;1716;1709:12;1664:59;1382:347;;;;;:::o;1734:409::-;1804:6;1812;1865:2;1853:9;1844:7;1840:23;1836:32;1833:52;;;1881:1;1878;1871:12;1833:52;1921:9;1908:23;1954:18;1946:6;1943:30;1940:50;;;1986:1;1983;1976:12;1940:50;2025:58;2075:7;2066:6;2055:9;2051:22;2025:58;:::i;:::-;2102:8;;1999:84;;-1:-1:-1;1734:409:63;-1:-1:-1;;;;1734:409:63:o;2835:367::-;2903:6;2911;2964:2;2952:9;2943:7;2939:23;2935:32;2932:52;;;2980:1;2977;2970:12;2932:52;3025:23;;;-1:-1:-1;3124:2:63;3109:18;;3096:32;3137:33;3096:32;3137:33;:::i;:::-;3189:7;3179:17;;;2835:367;;;;;:::o;3207:806::-;3304:6;3312;3320;3328;3336;3389:3;3377:9;3368:7;3364:23;3360:33;3357:53;;;3406:1;3403;3396:12;3357:53;3445:9;3432:23;3464:31;3489:5;3464:31;:::i;:::-;3514:5;-1:-1:-1;3571:2:63;3556:18;;3543:32;3584:33;3543:32;3584:33;:::i;:::-;3636:7;-1:-1:-1;3716:2:63;3701:18;;3688:32;;-1:-1:-1;3797:2:63;3782:18;;3769:32;3824:18;3813:30;;3810:50;;;3856:1;3853;3846:12;3810:50;3895:58;3945:7;3936:6;3925:9;3921:22;3895:58;:::i;:::-;3207:806;;;;-1:-1:-1;3207:806:63;;-1:-1:-1;3972:8:63;;3869:84;3207:806;-1:-1:-1;;;3207:806:63:o;4502:367::-;4565:8;4575:6;4629:3;4622:4;4614:6;4610:17;4606:27;4596:55;;4647:1;4644;4637:12;4596:55;-1:-1:-1;4670:20:63;;4713:18;4702:30;;4699:50;;;4745:1;4742;4735:12;4699:50;4782:4;4774:6;4770:17;4758:29;;4842:3;4835:4;4825:6;4822:1;4818:14;4810:6;4806:27;4802:38;4799:47;4796:67;;;4859:1;4856;4849:12;4874:1114;5047:6;5055;5063;5071;5079;5087;5140:2;5128:9;5119:7;5115:23;5111:32;5108:52;;;5156:1;5153;5146:12;5108:52;5196:9;5183:23;5229:18;5221:6;5218:30;5215:50;;;5261:1;5258;5251:12;5215:50;5300:70;5362:7;5353:6;5342:9;5338:22;5300:70;:::i;:::-;5389:8;;-1:-1:-1;5274:96:63;-1:-1:-1;;5477:2:63;5462:18;;5449:32;5506:18;5493:32;;5490:52;;;5538:1;5535;5528:12;5490:52;5577:72;5641:7;5630:8;5619:9;5615:24;5577:72;:::i;:::-;5668:8;;-1:-1:-1;5551:98:63;-1:-1:-1;;5756:2:63;5741:18;;5728:32;5785:18;5772:32;;5769:52;;;5817:1;5814;5807:12;5769:52;5856:72;5920:7;5909:8;5898:9;5894:24;5856:72;:::i;:::-;4874:1114;;;;-1:-1:-1;4874:1114:63;;-1:-1:-1;4874:1114:63;;5947:8;;4874:1114;-1:-1:-1;;;4874:1114:63:o;5993:346::-;6061:6;6069;6122:2;6110:9;6101:7;6097:23;6093:32;6090:52;;;6138:1;6135;6128:12;6090:52;-1:-1:-1;;6183:23:63;;;6303:2;6288:18;;;6275:32;;-1:-1:-1;5993:346:63:o;6344:226::-;6403:6;6456:2;6444:9;6435:7;6431:23;6427:32;6424:52;;;6472:1;6469;6462:12;6424:52;-1:-1:-1;6517:23:63;;6344:226;-1:-1:-1;6344:226:63:o;7695:776::-;7825:6;7833;7841;7849;7902:2;7890:9;7881:7;7877:23;7873:32;7870:52;;;7918:1;7915;7908:12;7870:52;7958:9;7945:23;7991:18;7983:6;7980:30;7977:50;;;8023:1;8020;8013:12;7977:50;8062:70;8124:7;8115:6;8104:9;8100:22;8062:70;:::i;:::-;8151:8;;-1:-1:-1;8036:96:63;-1:-1:-1;;8239:2:63;8224:18;;8211:32;8268:18;8255:32;;8252:52;;;8300:1;8297;8290:12;8252:52;8339:72;8403:7;8392:8;8381:9;8377:24;8339:72;:::i;:::-;7695:776;;;;-1:-1:-1;8430:8:63;-1:-1:-1;;;;7695:776:63:o;8476:184::-;8528:77;8525:1;8518:88;8625:4;8622:1;8615:15;8649:4;8646:1;8639:15;8665:128;8732:9;;;8753:11;;;8750:37;;;8767:18;;:::i;8798:168::-;8871:9;;;8902;;8919:15;;;8913:22;;8899:37;8889:71;;8940:18;;:::i;8971:184::-;9023:77;9020:1;9013:88;9120:4;9117:1;9110:15;9144:4;9141:1;9134:15;9160:120;9200:1;9226;9216:35;;9231:18;;:::i;:::-;-1:-1:-1;9265:9:63;;9160:120::o;9285:125::-;9350:9;;;9371:10;;;9368:36;;;9384:18;;:::i;9415:528::-;9608:6;9601:14;9594:22;9583:9;9576:41;9653:2;9648;9637:9;9633:18;9626:30;9692:6;9687:2;9676:9;9672:18;9665:34;9749:6;9741;9736:2;9725:9;9721:18;9708:48;9805:1;9776:22;;;9800:2;9772:31;;;9765:42;;;;9859:2;9847:15;;;9864:66;9843:88;9828:104;9824:113;;9415:528;-1:-1:-1;;9415:528:63:o;9948:250::-;10033:1;10043:113;10057:6;10054:1;10051:13;10043:113;;;10133:11;;;10127:18;10114:11;;;10107:39;10079:2;10072:10;10043:113;;;-1:-1:-1;;10190:1:63;10172:16;;10165:27;9948:250::o;10203:329::-;10244:3;10282:5;10276:12;10309:6;10304:3;10297:19;10325:76;10394:6;10387:4;10382:3;10378:14;10371:4;10364:5;10360:16;10325:76;:::i;:::-;10446:2;10434:15;10451:66;10430:88;10421:98;;;;10521:4;10417:109;;10203:329;-1:-1:-1;;10203:329:63:o;10537:288::-;10712:2;10701:9;10694:21;10675:4;10732:44;10772:2;10761:9;10757:18;10749:6;10732:44;:::i;:::-;10724:52;;10812:6;10807:2;10796:9;10792:18;10785:34;10537:288;;;;;:::o;11090:298::-;11273:6;11266:14;11259:22;11248:9;11241:41;11318:2;11313;11302:9;11298:18;11291:30;11222:4;11338:44;11378:2;11367:9;11363:18;11355:6;11338:44;:::i;:::-;11330:52;11090:298;-1:-1:-1;;;;11090:298:63:o;11393:184::-;11445:77;11442:1;11435:88;11542:4;11539:1;11532:15;11566:4;11563:1;11556:15;11849:184;11919:6;11972:2;11960:9;11951:7;11947:23;11943:32;11940:52;;;11988:1;11985;11978:12;11940:52;-1:-1:-1;12011:16:63;;11849:184;-1:-1:-1;11849:184:63:o;12291:112::-;12323:1;12349;12339:35;;12354:18;;:::i;:::-;-1:-1:-1;12388:9:63;;12291:112::o;14097:164::-;14173:13;;14222;;14215:21;14205:32;;14195:60;;14251:1;14248;14241:12;14195:60;14097:164;;;:::o;14266:202::-;14333:6;14386:2;14374:9;14365:7;14361:23;14357:32;14354:52;;;14402:1;14399;14392:12;14354:52;14425:37;14452:9;14425:37;:::i;15366:184::-;15418:77;15415:1;15408:88;15515:4;15512:1;15505:15;15539:4;15536:1;15529:15;15555:1112;15640:6;15648;15701:2;15689:9;15680:7;15676:23;15672:32;15669:52;;;15717:1;15714;15707:12;15669:52;15740:37;15767:9;15740:37;:::i;:::-;15730:47;;15821:2;15810:9;15806:18;15800:25;15848:18;15840:6;15837:30;15834:50;;;15880:1;15877;15870:12;15834:50;15903:22;;15956:4;15948:13;;15944:27;-1:-1:-1;15934:55:63;;15985:1;15982;15975:12;15934:55;16018:2;16012:9;16044:18;16036:6;16033:30;16030:56;;;16066:18;;:::i;:::-;16115:2;16109:9;16262:66;16257:2;16188:66;16181:4;16173:6;16169:17;16165:90;16161:99;16157:172;16149:6;16145:185;16396:6;16384:10;16381:22;16360:18;16348:10;16345:34;16342:62;16339:88;;;16407:18;;:::i;:::-;16443:2;16436:22;16467;;;16508:15;;;16525:2;16504:24;16501:37;-1:-1:-1;16498:57:63;;;16551:1;16548;16541:12;16498:57;16564:72;16629:6;16624:2;16616:6;16612:15;16607:2;16603;16599:11;16564:72;:::i;:::-;16655:6;16645:16;;;;;15555:1112;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2176200","executionCost":"infinite","totalCost":"infinite"},"external":{"CLAIM_CONTRACT()":"infinite","DEPOSIT_REASON_CODE()":"infinite","POINTS_CONTRACT()":"infinite","REWARDER_ROLE()":"296","SCALING_FACTOR()":"273","STAKING_TOKEN()":"infinite","addReward(uint256,uint256)":"infinite","claim()":"infinite","distributionEnd()":"2350","earned(address)":"infinite","forwarderRegistry()":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isTrustedForwarder(address)":"infinite","lastTimeRewardApplicable()":"2413","lastUpdated()":"2395","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","rewardPerStakePoint()":"infinite","rewardPerStakePointPaid(address)":"2579","rewardPerStakePointStored()":"2329","rewardRate()":"2330","rewards(address)":"2603","stake(bytes)":"infinite","staked(address)":"2601","supportsInterface(bytes4)":"infinite","totalStaked()":"2374","transferOwnership(address)":"infinite","withdraw(bytes)":"infinite"},"internal":{"_computeAddReward(address,uint256,uint256)":"infinite","_computeClaim(address,uint256)":"infinite"}},"methodIdentifiers":{"CLAIM_CONTRACT()":"62ba9096","DEPOSIT_REASON_CODE()":"2196e445","POINTS_CONTRACT()":"2d4c2f93","REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","STAKING_TOKEN()":"0479d644","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IPoints\",\"name\":\"pointsContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverable\",\"type\":\"uint256\"}],\"name\":\"InvalidRecoveryAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"name\":\"NotEnoughStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_REASON_CODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"addReward(uint256,uint256)\":{\"details\":\"Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.Reverts with {InvalidRewardAmount} if the reward amount is 0.Reverts with {InvalidDuration} if the duration is 0.Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\",\"params\":{\"duration\":\"The duration of the rewards distribution.\",\"reward\":\"The amount of rewards to be added.\"}},\"claim()\":{\"details\":\"Emits a {Claimed} event with the staker address, claimData and reward.The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\"},\"earned(address)\":{\"params\":{\"account\":\"The address of the account to check.\"},\"returns\":{\"_0\":\"The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"The minimum of the current block timestamp and the distribution end.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"rewardPerStakePoint()\":{\"returns\":{\"_0\":\"The sum of the last stored value and the new rewards since the last update\"}},\"stake(bytes)\":{\"details\":\"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidStakeAmount} if the stake amount is 0.Emits a {Staked} event with the staker address, stakeData and stake points.The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.The stakeData is not used in the base implementation, but it is passed to the event for convenience.\",\"params\":{\"stakeData\":\"The data to be used for staking, encoded as (uint256 value)\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw(bytes)\":{\"details\":\"Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.Emits a {Withdrawn} event with the staker address, withdrawData and stake points.The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\",\"params\":{\"withdrawData\":\"The data to be used for withdrawing, encoded as (uint256 value)\"}}},\"title\":\"ERC20StakingPointsRewardsLinearPool\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"addReward(uint256,uint256)\":{\"notice\":\"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\"},\"claim()\":{\"notice\":\"Claims the rewards for the sender.\"},\"earned(address)\":{\"notice\":\"Returns the amount of rewards earned by the account.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns the last time rewards are applicable.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"rewardPerStakePoint()\":{\"notice\":\"Returns the current reward per stake point.\"},\"stake(bytes)\":{\"notice\":\"Stakes to the pool.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw(bytes)\":{\"notice\":\"Withdraws from the pool.\"}},\"notice\":\"This contract is used to stake ERC20 tokens and obtain Points rewards.Staking can be done by the user or via a claim contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol\":\"ERC20StakingPointsRewardsLinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {TokenRecovery} from \\\"./../../security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ILinearPool} from \\\"./interfaces/ILinearPool.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\n/// @title Linear rewards distribution staking pool.\\n/// @notice Implements the base logic for linear reward pools, while the nature of the staking and rewards is left to the deriving contracts.\\n/// @notice Stakes, whether fungible or non-fungible, map to an amount of \\\"stake points\\\", then used to compute the user rewards share.\\n/// @notice NB: Reentrancy guards are used to protect the stake and withdraw functions, the implementation being unknown.\\n/// @notice If the deriving contract's implementation does not present reentrancy elements, the guards can be dropped.\\n/// @notice NB: This contract inherits TokenRecovery functions. In the likely event that the deriving contract does keep tokens in stake,\\n/// @notice the corresponding functions must be overriden to prevent recovering tokens legitimately staked in the contract.\\nabstract contract LinearPool is ILinearPool, AccessControl, ReentrancyGuard, TokenRecovery, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error NotEnoughStake(address staker, uint256 stake, uint256 withdraw);\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    /// @notice Returns the last time rewards are applicable.\\n    /// @return The minimum of the current block timestamp and the distribution end.\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    /// @notice Returns the current reward per stake point.\\n    /// @return The sum of the last stored value and the new rewards since the last update\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    /// @notice Returns the amount of rewards earned by the account.\\n    /// @param account The address of the account to check.\\n    /// @return The account's stake points times the difference between the current reward per stake point and the last paid reward per stake point.\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    /// @dev The stakeData is not used in the base implementation, but it is passed to the event for convenience.\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), stakeData);\\n    }\\n\\n    /// @notice Stakes to the pool.\\n    /// @param staker The address of the staker.\\n    /// @param stakeData The data to be used for the stake (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidStakeAmount} if the stake amount is 0.\\n    /// @dev Emits a {Staked} event with the staker address, stakeData and stake points.\\n    /// @dev The stakeData is passed to the _computeStake function, which must be implemented in the deriving contract.\\n    function _stake(address staker, bytes memory stakeData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeStake(staker, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[staker] += stakePoints;\\n        emit Staked(staker, stakeData, stakePoints);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {ReentrancyGuardReentrantCall} if the function is re-entered.\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    /// @dev The withdrawData is not used in the base implementation, but it is passed to the event for convenience.\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    /// @notice Withdraws from the pool.\\n    /// @param staker The address of the staker.\\n    /// @param withdrawData The data to be used for the withdraw (encoding freely determined by the deriving contracts).\\n    /// @dev Reverts with {InvalidWithdrawAmount} if the withdraw amount is 0.\\n    /// @dev Reverts with {NotEnoughStake} if the staker does not have enough stake points to withdraw.\\n    /// @dev Emits a {Withdrawn} event with the staker address, withdrawData and stake points.\\n    /// @dev The withdrawData is passed to the _computeWithdraw function, which must be implemented in the deriving contract.\\n    function _withdraw(address staker, bytes memory withdrawData) internal virtual {\\n        _updateReward(staker);\\n        uint256 stakePoints = _computeWithdraw(staker, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        uint256 currentStaked = staked[staker];\\n        require(currentStaked >= stakePoints, NotEnoughStake(staker, currentStaked, stakePoints));\\n        unchecked {\\n            // no underflow possible\\n            staked[staker] -= stakePoints;\\n            totalStaked = currentStaked - stakePoints;\\n        }\\n        emit Withdrawn(staker, withdrawData, stakePoints);\\n    }\\n\\n    /// @notice Claims the rewards for the sender.\\n    /// @dev Emits a {Claimed} event with the staker address, claimData and reward.\\n    /// @dev The claimData is generated by the _computeClaim function, which must be implemented in the deriving contract.\\n    function claim() public virtual {\\n        address staker = _msgSender();\\n        _updateReward(staker);\\n        uint256 reward = earned(staker);\\n        if (reward != 0) {\\n            rewards[staker] = 0;\\n            bytes memory claimData = _computeClaim(staker, reward);\\n            emit Claimed(staker, claimData, reward);\\n        }\\n    }\\n\\n    /// @notice Adds rewards to the pool.\\n    /// @notice If there is an ongoing distribution, the new rewards are added to the current distribution:\\n    /// @notice - If the new distribution ends before the current one, the new rewards are added to the current distribution.\\n    /// @notice - If the new distribution ends after the current one, the remaining rewards are added to the new distribution.\\n    /// @param reward The amount of rewards to be added.\\n    /// @param duration The duration of the rewards distribution.\\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the REWARDER_ROLE.\\n    /// @dev Reverts with {InvalidRewardAmount} if the reward amount is 0.\\n    /// @dev Reverts with {InvalidDuration} if the duration is 0.\\n    /// @dev Reverts with {RewardTooSmallForDuration} if the reward is too small for the duration.\\n    /// @dev Emits a {RewardAdded} event with the rewarder address, reward amount, duration and dust.\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address rewarder = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, rewarder);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(rewarder, reward, dust);\\n\\n        emit RewardAdded(rewarder, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xb233904513719b7c8ad3acc65cadf8a3f900f8bc0687f35ce8a5ecd55bab0965\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/interfaces/ILinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ninterface ILinearPool {\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerStakePoint() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function stake(bytes calldata stakeData) external payable;\\n\\n    function withdraw(bytes calldata withdrawData) external;\\n\\n    function claim() external;\\n\\n    function addReward(uint256 reward, uint256 duration) external payable;\\n}\\n\",\"keccak256\":\"0x7d90f50bc5a3a2700d7de92188b10b0d46b3eafc3b49f2431d0ae0cf494d05f4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"./../LinearPool.sol\\\";\\nimport {ERC20Receiver} from \\\"./../../../token/ERC20/ERC20Receiver.sol\\\";\\nimport {TokenRecoveryBase} from \\\"./../../../security/base/TokenRecoveryBase.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n/// @title ERC20StakingLinearPool\\n/// @notice A linear pool that allows staking of ERC20 tokens.\\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable STAKING_TOKEN;\\n\\n    error InvalidToken();\\n    error InvalidRecoveryAmount(uint256 requested, uint256 recoverable);\\n\\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\\n        STAKING_TOKEN = stakingToken;\\n    }\\n\\n    /// @notice Callback called when the contract receives ERC20 tokens via the IERC20SafeTransfers functions.\\n    /// @param from The address of the sender.\\n    /// @param value The amount of tokens received.\\n    /// @return bytes4 The function selector of the callback.\\n    /// @dev Reverts  with {InvalidToken} if the sender is not the staking token.\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\\n        bool requiresTransfer = false;\\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param stakeData The data to be used for staking, encoded as (uint256 value)\\n    function stake(bytes calldata stakeData) public payable virtual override {\\n        // non-reentrancy check removed\\n        bool requiresTransfer = true;\\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param stakeData The data to be used for staking, encoded as (bool requiresTransfer, bytes data) where data is (uint256 value).\\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\\n        stakePoints = abi.decode(data, (uint256));\\n        if (requiresTransfer) {\\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\\n        }\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\\n    function withdraw(bytes calldata withdrawData) public virtual override {\\n        // non-reentrancy check removed\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    /// @inheritdoc LinearPool\\n    /// @param withdrawData The data to be used for withdrawing, encoded as (uint256 value)\\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\\n        stakePoints = abi.decode(withdrawData, (uint256));\\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\\n    }\\n\\n    /// @inheritdoc TokenRecoveryBase\\n    /// @dev Reverts with {InvalidRecoveryAmount} if recovering some STAKING_TOKEN in greater quatity than what is recoverable.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual override {\\n        uint256 stakingTokenRecoveryAmount;\\n        for (uint256 i; i < tokens.length; ++i) {\\n            if (tokens[i] == STAKING_TOKEN) {\\n                stakingTokenRecoveryAmount += amounts[i];\\n            }\\n        }\\n        if (stakingTokenRecoveryAmount != 0) {\\n            uint256 recoverable = STAKING_TOKEN.balanceOf(address(this)) - totalStaked;\\n            if (stakingTokenRecoveryAmount > recoverable) {\\n                revert InvalidRecoveryAmount(stakingTokenRecoveryAmount, recoverable);\\n            }\\n        }\\n        super.recoverERC20s(accounts, tokens, amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x3addc69ce91fa21ec4796bbcf56cb8d801fac10d6bddaa7d4eab0cc25709122e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\\\";\\nimport {ERC20StakingLinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\\\";\\nimport {LinearPool_PointsRewards} from \\\"./reward/LinearPool_PointsRewards.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"./../points/interface/IPoints.sol\\\";\\n\\n/// @title ERC20StakingPointsRewardsLinearPool\\n/// @notice This contract is used to stake ERC20 tokens and obtain Points rewards.\\n/// @notice Staking can be done by the user or via a claim contract.\\ncontract ERC20StakingPointsRewardsLinearPool is ERC20StakingLinearPool, LinearPool_PointsRewards {\\n    address public immutable CLAIM_CONTRACT;\\n\\n    constructor(\\n        address claimContract,\\n        IERC20 stakingToken,\\n        IPoints pointsContract,\\n        bytes32 depositReasonCode,\\n        IForwarderRegistry forwarderRegistry\\n    ) ERC20StakingLinearPool(stakingToken, forwarderRegistry) LinearPool_PointsRewards(pointsContract, depositReasonCode) {\\n        CLAIM_CONTRACT = claimContract;\\n    }\\n\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external virtual override returns (bytes4) {\\n        require(msg.sender == address(STAKING_TOKEN), InvalidToken());\\n        bool requiresTransfer = false;\\n        if (operator == CLAIM_CONTRACT) {\\n            address staker = abi.decode(data, (address));\\n            _stake(staker, abi.encode(requiresTransfer, abi.encode(value)));\\n        } else {\\n            _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        }\\n        return this.onERC20Received.selector;\\n    }\\n\\n    function _computeClaim(\\n        address staker,\\n        uint256 reward\\n    ) internal virtual override(LinearPool, LinearPool_PointsRewards) returns (bytes memory claimData) {\\n        return LinearPool_PointsRewards._computeClaim(staker, reward);\\n    }\\n\\n    function _computeAddReward(address rewarder, uint256 reward, uint256 dust) internal virtual override(LinearPool, LinearPool_PointsRewards) {\\n        LinearPool_PointsRewards._computeAddReward(rewarder, reward, dust);\\n    }\\n}\\n\",\"keccak256\":\"0xe03dafff876273d1a16b2e1c18af058ee3b86e35406af92d899e0e0a68b61092\",\"license\":\"MIT\"},\"contracts/staking/reward/LinearPool_PointsRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IPoints} from \\\"./../../points/interface/IPoints.sol\\\";\\n\\n/// @title LinearPool_PointsRewards\\n/// @notice This contract is used to handle the points rewards for linear pools.\\n// solhint-disable-next-line contract-name-capwords\\nabstract contract LinearPool_PointsRewards {\\n    IPoints public immutable POINTS_CONTRACT;\\n    bytes32 public immutable DEPOSIT_REASON_CODE;\\n\\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\\n        POINTS_CONTRACT = pointsContract;\\n        DEPOSIT_REASON_CODE = depositReasonCode;\\n    }\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\\n        claimData = abi.encode(reward);\\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\\n    }\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1dee923d1418b52f7b3e2bf930d24b94e5ed7ab90f88f0cc99763cbfbaf160b7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4118,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":2032,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":2034,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":2036,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":2038,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":2040,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":2044,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":2048,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":2052,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"addReward(uint256,uint256)":{"notice":"Adds rewards to the pool.If there is an ongoing distribution, the new rewards are added to the current distribution:- If the new distribution ends before the current one, the new rewards are added to the current distribution.- If the new distribution ends after the current one, the remaining rewards are added to the new distribution."},"claim()":{"notice":"Claims the rewards for the sender."},"earned(address)":{"notice":"Returns the amount of rewards earned by the account."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"lastTimeRewardApplicable()":{"notice":"Returns the last time rewards are applicable."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"rewardPerStakePoint()":{"notice":"Returns the current reward per stake point."},"stake(bytes)":{"notice":"Stakes to the pool."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw(bytes)":{"notice":"Withdraws from the pool."}},"notice":"This contract is used to stake ERC20 tokens and obtain Points rewards.Staking can be done by the user or via a claim contract.","version":1}}},"contracts/staking/reward/LinearPool_PointsRewards.sol":{"LinearPool_PointsRewards":{"abi":[{"inputs":[],"name":"DEPOSIT_REASON_CODE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"LinearPool_PointsRewards","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEPOSIT_REASON_CODE()":"2196e445","POINTS_CONTRACT()":"2d4c2f93"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEPOSIT_REASON_CODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"LinearPool_PointsRewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is used to handle the points rewards for linear pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/reward/LinearPool_PointsRewards.sol\":\"LinearPool_PointsRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/reward/LinearPool_PointsRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IPoints} from \\\"./../../points/interface/IPoints.sol\\\";\\n\\n/// @title LinearPool_PointsRewards\\n/// @notice This contract is used to handle the points rewards for linear pools.\\n// solhint-disable-next-line contract-name-capwords\\nabstract contract LinearPool_PointsRewards {\\n    IPoints public immutable POINTS_CONTRACT;\\n    bytes32 public immutable DEPOSIT_REASON_CODE;\\n\\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\\n        POINTS_CONTRACT = pointsContract;\\n        DEPOSIT_REASON_CODE = depositReasonCode;\\n    }\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\\n        claimData = abi.encode(reward);\\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\\n    }\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1dee923d1418b52f7b3e2bf930d24b94e5ed7ab90f88f0cc99763cbfbaf160b7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"This contract is used to handle the points rewards for linear pools.","version":1}}}}}}