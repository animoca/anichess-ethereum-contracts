{"id":"b6c85fc469f41baeb8b9558d758a0133","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 {\n    /// @notice Safely transfers some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param from Current token owner.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to transfer.\n    /// @param value Amount of token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely transfers a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to transfer.\n    /// @param values Amounts of tokens to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n\n    /// @notice Enables or disables an operator's approval.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator Address of the operator.\n    /// @param approved True to approve the operator, false to revoke its approval.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Retrieves the approval status of an operator for a given owner.\n    /// @param owner Address of the authorisation giver.\n    /// @param operator Address of the operator.\n    /// @return approved True if the operator is approved, false if not.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\n\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\n    /// @param owner The account to retrieve the balance of.\n    /// @param id The identifier to retrieve the balance of.\n    /// @return balance The balance of `id` owned by account `owner`.\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\n\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\n    /// @dev Reverts if `owners` and `ids` have different lengths.\n    /// @param owners The addresses of the token holders\n    /// @param ids The identifiers to retrieve the balance of.\n    /// @return balances The balances of `ids` owned by accounts `owners`.\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {IERC1155} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\";\nimport {ERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Anichess ERC1155 Merkle Claim Contract\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n * @dev entitled to the rewards without revealing the entire list of recipients.\n */\ncontract AnichessOrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    uint256 public immutable INITIAL_TIME;\n    uint256 public immutable CYCLE_DURATION; // time of each cycle\n    uint256 public immutable MAX_CYCLE;\n\n    uint256[] public tiers; // ascending order\n    uint256[] public tierRewards;\n\n    mapping(uint256 => uint256) totalAshByCycle;\n    mapping(uint256 => mapping(address => uint256)) public userAshByCycle;\n    // mapping(uint256 => mapping(address => bool)) public claimStatusByCycle;\n\n    /// @notice The IERC1155Burnable erc1155 contracts.\n    mapping(address => bool) public tokens;\n    /// @notice The token weights.\n    mapping(address => mapping(uint256 => uint256)) tokenWeights;\n\n    /// @notice Event emitted when tokens are burnt.\n    event TokensBurnt(\n        address indexed burner,\n        address indexed token,\n        uint256 cycle,\n        uint256 timestamp,\n        uint256[] ids,\n        uint256[] values,\n        uint256 totalAsh\n    );\n\n    event Claimed(address indexed claimer, uint256 indexed cycle, uint256 amount);\n\n    /// @notice Error thrown when the token ID is invalid.\n    error InvalidTokenId(address token, uint256 tokenId);\n\n    /// @notice Error thrown when the array lengths are inconsistent.\n    error InconsistentArrays();\n\n    /// @notice Error thrown when the tiers are incorrect.\n    error IncorrectTiers();\n\n    /// @notice Error thrown when the token is not approved.\n    error InvalidToken();\n\n    /// @notice Error throw when the function is not implemented.\n    error NotImplemented();\n\n    /// @notice Error thrown when the cycle is invalid.\n    error InvalidCycle(uint256 cycle);\n\n    // error AlreadyClaimed();\n\n    /**\n     * @notice Constructor for the ERC1155TokenBurn contract.\n     * @param initialTime The initial time of the contract.\n     * @param cycleDuration The duration of each cycle.\n     * @param maxCycle The maximum cycle.\n     * @param _tokens The list of IERC1155Burnable tokens to be approved.\n     * @param tokenIds The list of token IDs for each token.\n     * @param weights The list of weights for each token ID.\n     * @param _tiers The list of tiers.\n     * @param _tierRewards The list of rewards for each tier.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        IERC1155Burnable[] memory _tokens,\n        uint256[][] memory tokenIds,\n        uint256[][] memory weights,\n        uint256[] memory _tiers,\n        uint256[] memory _tierRewards,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        INITIAL_TIME = initialTime;\n        CYCLE_DURATION = cycleDuration;\n        MAX_CYCLE = maxCycle;\n\n        _setApprovedTokens(_tokens, tokenIds, weights);\n        _setTiers(_tiers, _tierRewards);\n    }\n\n    /**\n     * @notice Set the approved tokens.\n     * @param _tokens The list of IERC1155Burnable tokens to be approved.\n     * @param tokenIds The list of token IDs for each token.\n     * @param weights The list of weights for each token ID.\n     */\n    function _setApprovedTokens(IERC1155Burnable[] memory _tokens, uint256[][] memory tokenIds, uint256[][] memory weights) internal {\n        if (_tokens.length != tokenIds.length || _tokens.length != weights.length) {\n            revert InconsistentArrays();\n        }\n\n        // set the approved tokens\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            tokens[address(_tokens[i])] = true;\n\n            if (tokenIds[i].length != weights[i].length) {\n                revert InconsistentArrays();\n            }\n\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\n                tokenWeights[address(_tokens[i])][tokenIds[i][j]] = weights[i][j];\n            }\n        }\n    }\n\n    /**\n     * @notice Set the tiers and rewards.\n     * @param _tiers The list of tiers.\n     * @param _tierRewards The list of rewards for each tier.\n     */\n    function _setTiers(uint256[] memory _tiers, uint256[] memory _tierRewards) internal {\n        if (_tiers.length != _tierRewards.length) {\n            revert InconsistentArrays();\n        }\n\n        if (_tiers.length == 0) {\n            revert IncorrectTiers();\n        }\n\n        // check if tiers are in increasing order\n        for (uint256 i = 1; i < _tiers.length; i++) {\n            if (_tiers[i] < _tiers[i - 1]) {\n                revert IncorrectTiers();\n            }\n        }\n        tiers = _tiers;\n        tierRewards = _tierRewards;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    function _currentCycle() internal view returns (uint256) {\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\n    }\n\n\n    function getCycleReward(uint256 cycle) public view returns (uint256) {\n        if (cycle > _currentCycle() || cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        uint256 prevTotalAsh = cycle == 0 ? 0 : totalAshByCycle[cycle - 1];\n\n        for (uint256 i = 1; i <= tiers.length; i++) {\n            if (prevTotalAsh < tiers[i]) {\n                return tierRewards[i - 1];\n            }\n        }\n        return tierRewards[tiers.length - 1];\n    }\n\n    function getUserReward(uint256 cycle, address wallet) external view returns (uint256) {\n        if (cycle > _currentCycle() || cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n        uint256 cycleReward = getCycleReward(cycle);\n        uint256 userAsh = userAshByCycle[cycle][wallet];\n        return (userAsh * cycleReward) / totalAshByCycle[cycle];\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\n        revert NotImplemented();\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata\n    ) external override returns (bytes4) {\n        if (!tokens[msg.sender]) {\n            revert InvalidToken();\n        }\n\n        uint256 currentCycle = _currentCycle();\n        if (currentCycle > MAX_CYCLE) {\n            revert InvalidCycle(currentCycle);\n        }\n\n        uint256 totalAsh = 0;\n\n        // calculate total burned\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 weight = tokenWeights[msg.sender][ids[i]];\n            if (weight == 0) {\n                revert InvalidTokenId(msg.sender, ids[i]);\n            }\n            totalAsh += (values[i] * weight);\n        }\n\n        // update the user status\n        userAshByCycle[currentCycle][from] += totalAsh;\n        // update the pool status\n        totalAshByCycle[currentCycle] += totalAsh;\n\n        IERC1155Burnable(msg.sender).batchBurnFrom(from, ids, values);\n        emit TokensBurnt(from, msg.sender, currentCycle, block.timestamp, ids, values, totalAsh);\n\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    // function setApprovedTokens(IERC1155Burnable[] calldata tokens, bool[] calldata enabled) external {\n    //     ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n    //     if (tokens.length != enabled.length) {\n    //         revert InconsistentArrays();\n    //     }\n    //     for (uint256 i = 0; i < tokens.length; i++) {\n    //         tokens[address(tokens[i])] = enabled[i];\n    //     }\n    // }\n\n    // function setTokensWeight(address[] calldata tokens, uint256[][] calldata tokenIds, uint256[][] calldata weights) external {\n    //     ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n    //     if (tokens.length != tokenIds.length || tokens.length != weights.length) {\n    //         revert InconsistentArrays();\n    //     }\n\n    //     for (uint256 i = 0; i < tokens.length; i++) {\n    //         if (!tokens[tokens[i]]) {\n    //             revert InvalidToken();\n    //         }\n    //         if (tokenIds[i].length != weights[i].length) {\n    //             revert InconsistentArrays();\n    //         }\n\n    //         for (uint256 j = 0; j < tokenIds[i].length; j++) {\n    //             tokenWeights[tokens[i]][tokenIds[i][j]] = weights[i][j];\n    //         }\n    //     }\n    // }\n\n    // function claim(uint256 cycle) external {\n    //     uint256 currentCycle = _currentCycle();\n    //     if (cycle >= currentCycle) {\n    //         revert InvalidCycle(cycle);\n    //     }\n    //     if (claimStatusByCycle[cycle][_msgSender()]) {\n    //         revert AlreadyClaimed();\n    //     }\n\n    //     // calcualte the claim amount\n    //     PoolStatus memory poolStatus = poolStatusByCycle[cycle];\n    //     uint256 cycleReward = getCycleReward(cycle);\n    //     uint256 walletBurned = userAshByCycle[cycle][_msgSender()];\n    //     uint256 claimAmount = (walletBurned * cycleReward) / poolStatus.totalAsh;\n\n    //     // update the status\n    //     claimStatusByCycle[cycle][_msgSender()] = true;\n    //     poolStatusByCycle[cycle].totalClaimed = poolStatus.totalClaimed + claimAmount;\n\n    //     emit Claimed(_msgSender(), cycle, claimAmount);\n    // }\n}\n"},"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {IERC1155} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Anichess ERC1155 Merkle Claim Contract\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n * @dev entitled to the rewards without revealing the entire list of recipients.\n */\ncontract ERC1155TokenBurn is ForwarderRegistryContext, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    uint256 initial_time;\n    uint256 interval_length; // time of each cycle\n\n    // function\n    // current_interval = block.timestamp - initial_time / interval_length;\n\n    struct PoolStatus {\n        uint256 totalBurned;\n        uint256 totalClaimed;\n    }\n\n    mapping(address => mapping(uint256 => uint256)) tokenWeight;\n    mapping(uint256 => PoolStatus) intervalPoolStatus;\n\n    /// @notice The IERC1155Burnable erc1155 contract.\n    mapping(address => bool) public isApprovedTokens;\n\n    /// @notice Event emitted when tokens are burnt.\n    event TokensBurnt(address indexed burner, uint256 indexed timestamp, address indexed token, uint256[] ids, uint256[] values);\n\n    /// @notice Error thrown when the epoch ID does not exist.\n    error EpochIdNotExists(bytes32 epochId);\n\n    error InconsistentArrays();\n\n    error TokenNotApproved();\n\n    error WalletNotApproved();\n\n    /**\n     * @notice Constructor for the ERC1155TokenBurn contract.\n     * @param tokens The IERC1155Burnable erc1155 contract.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(\n        IERC1155Burnable[] memory tokens,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            isApprovedTokens[address(tokens[i])] = true;\n        }\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    function setApprovedTokens(IERC1155Burnable[] calldata tokens, bool[] calldata enabled) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (tokens.length != enabled.length) {\n            revert InconsistentArrays();\n        }\n        for (uint256 i = 0; i < tokens.length; i++) {\n            isApprovedTokens[address(tokens[i])] = enabled[i];\n        }\n    }\n\n    /**\n     * @notice Burns the token from sender\n     * @param ids The token ids to burn.\n     * @param values The amount of tokens to burn.\n     */\n    function burn(address[] calldata tokens, uint256[][] calldata ids, uint256[][] calldata values) external {\n        if (tokens.length != ids.length || tokens.length != values.length) {\n            revert InconsistentArrays();\n        }\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (!isApprovedTokens[tokens[i]]) {\n                revert TokenNotApproved();\n            }\n            if (ids[i].length != values[i].length) {\n                revert InconsistentArrays();\n            }\n\n            IERC1155Burnable(tokens[i]).batchBurnFrom(_msgSender(), ids[i], values[i]);\n            emit TokensBurnt(_msgSender(), block.timestamp, tokens[i], ids[i], values[i]);\n        }\n    }\n\n    /**\n     * @notice Burns the token from a wallet.\n     * @param from The wallet to burn the tokens from.\n     * @param ids The token ids to burn.\n     * @param values The amount of tokens to burn.\n     */\n    function burnFor(address[] calldata from, address[] calldata tokens, uint256[][] calldata ids, uint256[][] calldata values) external {\n        if (from.length != tokens.length || from.length != ids.length || from.length != values.length) {\n            revert InconsistentArrays();\n        }\n\n        for (uint256 i = 0; i < from.length; i++) {\n            if (!isApprovedTokens[tokens[i]]) {\n                revert TokenNotApproved();\n            }\n            if (ids[i].length != values[i].length) {\n                revert InconsistentArrays();\n            }\n\n            if (!IERC1155(address(tokens[i])).isApprovedForAll(from[i], _msgSender())) {\n                revert WalletNotApproved();\n            }\n\n            IERC1155Burnable(tokens[i]).batchBurnFrom(from[i], ids[i], values[i]);\n            emit TokensBurnt(from[i], block.timestamp, tokens[i], ids[i], values[i]);\n        }\n    }\n}\n"},"contracts/burn/AnichessOrbsBurnPoolSimpleSingle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {IERC1155} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Anichess ERC1155 Merkle Claim Contract\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n * @dev entitled to the rewards without revealing the entire list of recipients.\n */\ncontract ERC1155TokenBurn is ForwarderRegistryContext, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice The IERC1155Burnable erc1155 contract.\n    IERC1155Burnable public immutable TOKEN;\n\n    /// @notice Event emitted when tokens are burnt.\n    event TokensBurnt(address indexed burner, uint256 indexed timestamp, uint256[] ids, uint256[] values);\n\n    /// @notice Error thrown when the epoch ID does not exist.\n    error EpochIdNotExists(bytes32 epochId);\n\n    error InconsistentArrays();\n\n    error NotApproved();\n\n    /**\n     * @notice Constructor for the ERC1155TokenBurn contract.\n     * @param token The IERC1155Burnable erc1155 contract.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(\n        IERC1155Burnable token,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        TOKEN = token;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Burns the token from sender\n     * @param ids The token ids to burn.\n     * @param values The amount of tokens to burn.\n     */\n    function burn(uint256[] calldata ids, uint256[] calldata values) external {\n        if (ids.length != values.length) {\n            revert InconsistentArrays();\n        }\n\n        TOKEN.batchBurnFrom(_msgSender(), ids, values);\n        emit TokensBurnt(_msgSender(), block.timestamp, ids, values);\n    }\n\n    /**\n     * @notice Burns the token from a wallet.\n     * @param from The wallet to burn the tokens from.\n     * @param ids The token ids to burn.\n     * @param values The amount of tokens to burn.\n     */\n    function burnFor(address from, uint256[] calldata ids, uint256[] calldata values) external {\n        if (ids.length != values.length) {\n            revert InconsistentArrays();\n        }\n\n        if (!IERC1155(address(TOKEN)).isApprovedForAll(from, _msgSender())) {\n            revert(\"ERC1155: burn caller is not approved\");\n        }\n\n        TOKEN.batchBurnFrom(from, ids, values);\n        emit TokensBurnt(from, block.timestamp, ids, values);\n    }\n}\n"},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Anichess ERC1155 Merkle Claim Contract\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n * @dev entitled to the rewards without revealing the entire list of recipients.\n */\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using MerkleProof for bytes32[];\n\n    /// @notice The claim window struct.\n    struct ClaimWindow {\n        bytes32 merkleRoot;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    /// @notice The ERC1155Mintable reward contract.\n    IERC1155Mintable public immutable REWARD_CONTRACT;\n\n    /// @notice The token id to be claimed.\n    uint256 public immutable TOKEN_ID;\n\n    /// @notice The total number of tokens that can be minted in this contract.\n    uint256 public immutable MINT_SUPPLY;\n\n    /// @notice The total number of tokens that have been claimed.\n    uint256 public noOfTokensClaimed;\n\n    /// @notice Mapping from the epoch ID to the claim window.\n    mapping(bytes32 => ClaimWindow) public claimWindows;\n\n    /// @notice Mapping from leafhash to the claim status.\n    mapping(bytes32 => bool) public claimStatus;\n\n    /// @notice Event emitted when a payout is claimed.\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256 id, uint256 value);\n\n    /// @notice Event emitted when a claim window is set.\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\n\n    /// @notice Error thrown when the payout has already been claimed.\n    error AlreadyClaimed(bytes32 epochId, address recipient);\n\n    /// @notice Error thrown when the proof provided for the claim is invalid.\n    error InvalidProof(bytes32 epochId, address recipient);\n\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\n\n    /// @notice Error thrown when the number of tokens claimed exceeds the mint supply.\n    error ExceededMintSupply();\n\n    /// @notice Error thrown when the epoch ID already exists.\n    error EpochIdAlreadyExists(bytes32 epochId);\n\n    /// @notice Error thrown when the epoch ID does not exist.\n    error EpochIdNotExists(bytes32 epochId);\n\n    /**\n     * @notice Constructor for the AnichessERC1155MerkleClaim contract.\n     * @param tokenId The token id to be claimed.\n     * @param mintSupply The total number of tokens that can be minted in this contract.\n     * @param rewardContract The ERC1155Mintable reward contract interface.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(\n        uint256 tokenId,\n        uint256 mintSupply,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        TOKEN_ID = tokenId;\n        MINT_SUPPLY = mintSupply;\n        REWARD_CONTRACT = rewardContract;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Sets the merkle root for a specific epoch with start and end time.\n     * @dev Reverts if the _msgSender() is not the owner.\n     * @dev Reverts if the epoch ID has already been set.\n     * @dev Emits a SetEpochMerkleRoot event.\n     * @param epochId The epoch ID for the claim.\n     * @param merkleRoot The Merkle root of the claim.\n     * @param startTime The start time of the claim window.\n     * @param endTime The end time of the claim window.\n     */\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\n            revert EpochIdAlreadyExists(epochId);\n        }\n\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\n\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\n    }\n\n    /**\n     * @notice Claims the payout for a specific epoch.\n     * @param epochId The epoch ID for the claim.\n     * @param proof The Merkle proof for the claim.\n     * @param recipient The recipient of the payout.\n     * @dev Throws if the claim window has not been set.\n     * @dev Throws if the claim window is closed or has not yet opened.\n     * @dev Throws if the proof provided for the claim is invalid.\n     * @dev Throws if the payout has already been claimed.\n     * @dev Throws if the number of tokens claimed exceeds the mint supply.\n     */\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient) external {\n        ClaimWindow storage claimWindow = claimWindows[epochId];\n        if (claimWindow.merkleRoot == bytes32(0)) {\n            revert EpochIdNotExists(epochId);\n        }\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\n            revert OutOfClaimWindow(epochId, block.timestamp);\n        }\n\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient));\n        if (!proof.verify(claimWindow.merkleRoot, leaf)) revert InvalidProof(epochId, recipient);\n\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient);\n\n        uint256 updatedNoOfTokensClaimed = noOfTokensClaimed + 1;\n        if (updatedNoOfTokensClaimed > MINT_SUPPLY) {\n            revert ExceededMintSupply();\n        }\n\n        noOfTokensClaimed = updatedNoOfTokensClaimed;\n        claimStatus[leaf] = true;\n\n        REWARD_CONTRACT.safeMint(recipient, TOKEN_ID, 1, \"\");\n\n        emit PayoutClaimed(epochId, recipient, TOKEN_ID, 1);\n    }\n}\n"},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {AnichessERC1155MerkleClaim} from \"../../merkleClaim/AnichessERC1155MerkleClaim.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\ncontract AnichessERC1155MerkleClaimMock is AnichessERC1155MerkleClaim {\n    constructor(\n        uint256 tokenId,\n        uint256 mintSupply,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) AnichessERC1155MerkleClaim(tokenId, mintSupply, rewardContract, forwarderRegistry) {}\n\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"InterfaceDetection":[414]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":385,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":415,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,414,431,80,1368,126],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"632:31:0"},"referencedDeclaration":157,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,419],"usedEvents":[110]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[1368],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"IERC173":[126]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":127,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":385,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":1369,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":126,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,1368,126],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"644:31:1"},"referencedDeclaration":157,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[125],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":304,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[119],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":291,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[110]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotTargetContractOwner":[101]},"id":102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":101,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":101,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":101,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[110]},"id":111,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":103,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"anonymous":false,"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"58:155:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":110,"name":"OwnershipTransferred","nameLocation":"219:20:4","nodeType":"EventDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:4","nodeType":"VariableDeclaration","scope":110,"src":"240:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:4","nodeType":"VariableDeclaration","scope":110,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:4"},"src":"213:84:4"}],"src":"32:269:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":112,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"58:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":126,"linearizedBaseContracts":[126],"name":"IERC173","nameLocation":"250:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"264:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:5","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:5","nodeType":"VariableDeclaration","scope":119,"src":"638:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:5"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":126,"src":"611:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"671:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:5","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"806:2:5"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:5","nodeType":"VariableDeclaration","scope":125,"src":"832:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:5"},"scope":126,"src":"792:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":127,"src":"240:617:5","usedErrors":[],"usedEvents":[]}],"src":"32:826:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[1346],"ContractOwnershipStorage":[384],"IERC173":[126],"InterfaceDetectionStorage":[532],"NotContractOwner":[94],"NotTargetContractOwner":[101],"OwnershipTransferred":[110],"ProxyInitialization":[812],"TargetIsNotAContract":[87]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":102,"src":"58:97:6","symbolAliases":[{"foreign":{"id":129,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":130,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":132,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":111,"src":"217:66:6","symbolAliases":[{"foreign":{"id":134,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"225:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":127,"src":"284:52:6","symbolAliases":[{"foreign":{"id":136,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"292:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":1347,"src":"337:66:6","symbolAliases":[{"foreign":{"id":138,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"345:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":813,"src":"404:84:6","symbolAliases":[{"foreign":{"id":140,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"412:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":533,"src":"489:104:6","symbolAliases":[{"foreign":{"id":142,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"497:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":384,"linearizedBaseContracts":[384],"name":"ContractOwnershipStorage","nameLocation":"603:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":146,"libraryName":{"id":144,"name":"Address","nameLocations":["640:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1346,"src":"640:7:6"},"nodeType":"UsingForDirective","src":"634:26:6","typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":150,"libraryName":{"id":147,"name":"ContractOwnershipStorage","nameLocations":["671:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"671:24:6"},"nodeType":"UsingForDirective","src":"665:67:6","typeName":{"id":149,"nodeType":"UserDefinedTypeName","pathNode":{"id":148,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:6","725:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"700:31:6"},"referencedDeclaration":157,"src":"700:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":154,"libraryName":{"id":151,"name":"InterfaceDetectionStorage","nameLocations":["743:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"743:25:6"},"nodeType":"UsingForDirective","src":"737:69:6","typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:6","799:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"773:32:6"},"referencedDeclaration":442,"src":"773:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":157,"members":[{"constant":false,"id":156,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:6","nodeType":"VariableDeclaration","scope":157,"src":"836:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:6","nodeType":"StructDefinition","scope":384,"src":"812:52:6","visibility":"public"},{"constant":true,"id":170,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:6","nodeType":"VariableDeclaration","scope":384,"src":"870:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:6","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":183,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:6","nodeType":"VariableDeclaration","scope":384,"src":"1004:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:6","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1641:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1655:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:6","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"nodeType":"IfStatement","src":"1651:152:6","trueBody":{"id":212,"nodeType":"Block","src":"1683:120:6","statements":[{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1697:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"1697:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":201,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1715:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":203,"nodeType":"ExpressionStatement","src":"1697:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:6","typeDescriptions":{}}},"id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":209,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1779:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":204,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1746:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"EmitStatement","src":"1741:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":220,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1874:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}],"id":219,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$126","typeString":"type(contract IERC173)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":214,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1812:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"1812:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"1812:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"ExpressionStatement","src":"1812:89:6"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1139:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:6","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"s","nameLocation":"1607:1:6","nodeType":"VariableDeclaration","scope":227,"src":"1592:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Layout","nameLocations":["1592:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1592:6:6"},"referencedDeclaration":157,"src":"1592:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:6","nodeType":"VariableDeclaration","scope":227,"src":"1610:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:6"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1641:0:6"},"scope":384,"src":"1567:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2573:112:6","statements":[{"expression":{"arguments":[{"id":239,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2612:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":236,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"2583:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$812_$","typeString":"type(library ProxyInitialization)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":811,"src":"2583:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"2583:54:6"},{"expression":{"arguments":[{"id":246,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2665:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":243,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2647:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2647:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":248,"nodeType":"ExpressionStatement","src":"2647:31:6"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1914:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:6","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"s","nameLocation":"2539:1:6","nodeType":"VariableDeclaration","scope":250,"src":"2524:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":230,"nodeType":"UserDefinedTypeName","pathNode":{"id":229,"name":"Layout","nameLocations":["2524:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2524:6:6"},"referencedDeclaration":157,"src":"2524:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:6","nodeType":"VariableDeclaration","scope":250,"src":"2542:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:6"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"2573:0:6"},"scope":384,"src":"2505:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"3148:281:6","statements":[{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:6","nodeType":"VariableDeclaration","scope":290,"src":"3158:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":265,"initialValue":{"expression":{"id":263,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3182:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3182:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3211:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":267,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3221:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":273,"nodeType":"IfStatement","src":"3207:60:6","trueBody":{"errorCall":{"arguments":[{"id":270,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3260:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":269,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3243:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":272,"nodeType":"RevertStatement","src":"3236:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3281:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":275,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3298:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"3277:146:6","trueBody":{"id":288,"nodeType":"Block","src":"3308:115:6","statements":[{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":277,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3322:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3322:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":280,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3340:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":282,"nodeType":"ExpressionStatement","src":"3322:26:6"},{"eventCall":{"arguments":[{"id":284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3388:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":285,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3403:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":283,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"3367:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"EmitStatement","src":"3362:50:6"}]}}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2691:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:6","nodeType":"FunctionDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"s","nameLocation":"3102:1:6","nodeType":"VariableDeclaration","scope":291,"src":"3087:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"Layout","nameLocations":["3087:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3087:6:6"},"referencedDeclaration":157,"src":"3087:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"sender","nameLocation":"3113:6:6","nodeType":"VariableDeclaration","scope":291,"src":"3105:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:6","nodeType":"VariableDeclaration","scope":291,"src":"3121:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:6"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"3148:0:6"},"scope":384,"src":"3060:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":303,"nodeType":"Block","src":"3635:39:6","statements":[{"expression":{"expression":{"id":300,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3652:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3652:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":299,"id":302,"nodeType":"Return","src":"3645:22:6"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"3435:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:6","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"s","nameLocation":"3586:1:6","nodeType":"VariableDeclaration","scope":304,"src":"3571:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":294,"nodeType":"UserDefinedTypeName","pathNode":{"id":293,"name":"Layout","nameLocations":["3571:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3571:6:6"},"referencedDeclaration":157,"src":"3571:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:6"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:6","nodeType":"VariableDeclaration","scope":304,"src":"3612:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:6"},"scope":384,"src":"3556:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":331,"nodeType":"Block","src":"4070:153:6","statements":[{"condition":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":314,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4085:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1034,"src":"4085:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":322,"nodeType":"IfStatement","src":"4080:77:6","trueBody":{"errorCall":{"arguments":[{"id":319,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4142:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":318,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4121:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"RevertStatement","src":"4114:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4182:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":323,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4174:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$126","typeString":"contract IERC173"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4174:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":328,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"4209:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":313,"id":330,"nodeType":"Return","src":"4167:49:6"}]},"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"3680:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:6","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:6","nodeType":"VariableDeclaration","scope":332,"src":"3977:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"4009:7:6","nodeType":"VariableDeclaration","scope":332,"src":"4001:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:6"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:6","nodeType":"VariableDeclaration","scope":332,"src":"4041:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:6"},"scope":384,"src":"3946:277:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"4494:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4508:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":342,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"4519:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"4519:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":349,"nodeType":"IfStatement","src":"4504:64:6","trueBody":{"errorCall":{"arguments":[{"id":346,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4560:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":345,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4543:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"RevertStatement","src":"4536:32:6"}}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4229:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:6","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"s","nameLocation":"4460:1:6","nodeType":"VariableDeclaration","scope":351,"src":"4445:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"Layout","nameLocations":["4445:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4445:6:6"},"referencedDeclaration":157,"src":"4445:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"account","nameLocation":"4471:7:6","nodeType":"VariableDeclaration","scope":351,"src":"4463:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:6"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4494:0:6"},"scope":384,"src":"4413:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"4935:124:6","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:6","subExpression":{"arguments":[{"id":360,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4972:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"4988:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4950:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":369,"nodeType":"IfStatement","src":"4945:107:6","trueBody":{"errorCall":{"arguments":[{"id":365,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"5028:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":366,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"5044:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"5005:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":368,"nodeType":"RevertStatement","src":"4998:54:6"}}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"4581:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:6","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:6","nodeType":"VariableDeclaration","scope":371,"src":"4880:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"account","nameLocation":"4912:7:6","nodeType":"VariableDeclaration","scope":371,"src":"4904:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:6"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"4935:0:6"},"scope":384,"src":"4842:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"5124:115:6","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"position","nameLocation":"5142:8:6","nodeType":"VariableDeclaration","scope":382,"src":"5134:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":380,"initialValue":{"id":379,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"5153:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:6"},{"AST":{"nativeSrc":"5191:42:6","nodeType":"YulBlock","src":"5191:42:6","statements":[{"nativeSrc":"5205:18:6","nodeType":"YulAssignment","src":"5205:18:6","value":{"name":"position","nativeSrc":"5215:8:6","nodeType":"YulIdentifier","src":"5215:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:6","nodeType":"YulIdentifier","src":"5205:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":378,"isOffset":false,"isSlot":false,"src":"5215:8:6","valueSize":1},{"declaration":375,"isOffset":false,"isSlot":true,"src":"5205:6:6","suffix":"slot","valueSize":1}],"id":381,"nodeType":"InlineAssembly","src":"5182:51:6"}]},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:6","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"5080:2:6"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"s","nameLocation":"5121:1:6","nodeType":"VariableDeclaration","scope":383,"src":"5106:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":374,"nodeType":"UserDefinedTypeName","pathNode":{"id":373,"name":"Layout","nameLocations":["5106:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"5106:6:6"},"referencedDeclaration":157,"src":"5106:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:6"},"scope":384,"src":"5065:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":385,"src":"595:4646:6","usedErrors":[],"usedEvents":[]}],"src":"32:5210:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[431],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":432,"src":"58:49:7","symbolAliases":[{"foreign":{"id":387,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":533,"src":"108:84:7","symbolAliases":[{"foreign":{"id":389,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":392,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":431,"src":"425:7:7"},"id":393,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":414,"linearizedBaseContracts":[414,431],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":397,"libraryName":{"id":394,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":396,"nodeType":"UserDefinedTypeName","pathNode":{"id":395,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"475:32:7"},"referencedDeclaration":442,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[430],"body":{"id":412,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":409,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":405,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":519,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":404,"id":411,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":413,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":413,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":399,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":414,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[419]},"id":420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":419,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[431]},"id":432,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":421,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":431,"linearizedBaseContracts":[431],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":430,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":430,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":424,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":430,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":427,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":431,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":432,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[431],"IllegalInterfaceId":[419],"InterfaceDetectionStorage":[532]},"id":533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":433,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":420,"src":"58:76:10","symbolAliases":[{"foreign":{"id":434,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":432,"src":"135:52:10","symbolAliases":[{"foreign":{"id":436,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":532,"linearizedBaseContracts":[532],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":442,"members":[{"constant":false,"id":441,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":442,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":438,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":532,"src":"229:74:10","visibility":"public"},{"constant":true,"id":455,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":532,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":448,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":458,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":532,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":456,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":469,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":470,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":475,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":480,"indexExpression":{"id":478,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":481,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":485,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":485,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":461,"nodeType":"UserDefinedTypeName","pathNode":{"id":460,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"804:6:10"},"referencedDeclaration":442,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":485,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":463,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":485,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":465,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":532,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":497,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":502,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":501,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":495,"id":500,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":505,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}],"id":504,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$431","typeString":"type(contract IERC165)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":511,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":495,"id":510,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":513,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":516,"indexExpression":{"id":515,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":495,"id":517,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":519,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":488,"nodeType":"UserDefinedTypeName","pathNode":{"id":487,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1386:6:10"},"referencedDeclaration":442,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":519,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":490,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":519,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":532,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":530,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":530,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":528,"initialValue":{"id":527,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":526,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":523,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":529,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":531,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":522,"nodeType":"UserDefinedTypeName","pathNode":{"id":521,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1746:6:10"},"referencedDeclaration":442,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":532,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":533,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC2771":[713],"IForwarderRegistry":[727]},"id":582,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":534,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":728,"src":"58:71:11","symbolAliases":[{"foreign":{"id":535,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":538,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":714,"src":"130:51:11","symbolAliases":[{"foreign":{"id":537,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"138:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":702,"src":"182:85:11","symbolAliases":[{"foreign":{"id":539,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"190:28:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":542,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"575:28:11"},"id":543,"nodeType":"InheritanceSpecifier","src":"575:28:11"},{"baseName":{"id":544,"name":"IERC2771","nameLocations":["605:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"605:8:11"},"id":545,"nodeType":"InheritanceSpecifier","src":"605:8:11"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"269:260:11","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":581,"linearizedBaseContracts":[581,713,701],"name":"ForwarderRegistryContext","nameLocation":"547:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":554,"nodeType":"Block","src":"720:2:11","statements":[]},"id":555,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":551,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"700:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":552,"kind":"baseConstructorSpecifier","modifierName":{"id":550,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"671:28:11"},"nodeType":"ModifierInvocation","src":"671:48:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:11","nodeType":"VariableDeclaration","scope":555,"src":"632:37:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":547,"nodeType":"UserDefinedTypeName","pathNode":{"id":546,"name":"IForwarderRegistry","nameLocations":["632:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"632:18:11"},"referencedDeclaration":727,"src":"632:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:11"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"720:0:11"},"scope":581,"src":"620:102:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":563,"nodeType":"Block","src":"800:43:11","statements":[{"expression":{"id":561,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"817:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":560,"id":562,"nodeType":"Return","src":"810:26:11"}]},"functionSelector":"2b4c9f16","id":564,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:11","nodeType":"FunctionDefinition","parameters":{"id":556,"nodeType":"ParameterList","parameters":[],"src":"754:2:11"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":564,"src":"780:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":558,"nodeType":"UserDefinedTypeName","pathNode":{"id":557,"name":"IForwarderRegistry","nameLocations":["780:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"780:18:11"},"referencedDeclaration":727,"src":"780:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:11"},"scope":581,"src":"728:115:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[712],"body":{"id":579,"nodeType":"Block","src":"962:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":572,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"979:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":575,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1000:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:11","typeDescriptions":{}}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":571,"id":578,"nodeType":"Return","src":"972:48:11"}]},"documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"849:24:11","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":580,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:11","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":567,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:11","nodeType":"VariableDeclaration","scope":580,"src":"906:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":566,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:11"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":580,"src":"956:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":569,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:11"},"scope":581,"src":"878:149:11","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":582,"src":"529:500:11","usedErrors":[],"usedEvents":[]}],"src":"32:998:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[756],"ForwarderRegistryContextBase":[701],"IForwarderRegistry":[727]},"id":702,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":583,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":585,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":728,"src":"58:74:12","symbolAliases":[{"foreign":{"id":584,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":587,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":757,"src":"133:67:12","symbolAliases":[{"foreign":{"id":586,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"141:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"202:243:12","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":701,"linearizedBaseContracts":[701],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":591,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:12","nodeType":"VariableDeclaration","scope":701,"src":"498:57:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":590,"nodeType":"UserDefinedTypeName","pathNode":{"id":589,"name":"IForwarderRegistry","nameLocations":["498:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"498:18:12"},"referencedDeclaration":727,"src":"498:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"612:56:12","statements":[{"expression":{"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":597,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"622:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":598,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"644:17:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"src":"622:39:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":600,"nodeType":"ExpressionStatement","src":"622:39:12"}]},"id":602,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:12","nodeType":"VariableDeclaration","scope":602,"src":"574:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":593,"nodeType":"UserDefinedTypeName","pathNode":{"id":592,"name":"IForwarderRegistry","nameLocations":["574:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"574:18:12"},"referencedDeclaration":727,"src":"574:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:12"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[],"src":"612:0:12"},"scope":701,"src":"562:106:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":651,"nodeType":"Block","src":"846:683:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":608,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":610,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":613,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:12","memberName":"data","nodeType":"MemberAccess","src":"1074:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:12","memberName":"length","nodeType":"MemberAccess","src":"1074:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":623,"nodeType":"IfStatement","src":"1043:95:12","trueBody":{"id":622,"nodeType":"Block","src":"1096:42:12","statements":[{"expression":{"expression":{"id":619,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":621,"nodeType":"Return","src":"1110:17:12"}]}},{"assignments":[625],"declarations":[{"constant":false,"id":625,"mutability":"mutable","name":"sender","nameLocation":"1156:6:12","nodeType":"VariableDeclaration","scope":651,"src":"1148:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":629,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":626,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"1165:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"1165:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":630,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":634,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1372:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:12","typeDescriptions":{}}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":639,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1436:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":637,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1396:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"1396:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":647,"nodeType":"IfStatement","src":"1346:149:12","trueBody":{"id":646,"nodeType":"Block","src":"1457:38:12","statements":[{"expression":{"id":644,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1478:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":645,"nodeType":"Return","src":"1471:13:12"}]}},{"expression":{"expression":{"id":648,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":650,"nodeType":"Return","src":"1505:17:12"}]},"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"674:105:12","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":652,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:12","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"803:2:12"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":652,"src":"837:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:12"},"scope":701,"src":"784:745:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":699,"nodeType":"Block","src":"1710:668:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":658,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":660,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:12","memberName":"data","nodeType":"MemberAccess","src":"1938:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:12","memberName":"length","nodeType":"MemberAccess","src":"1938:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":673,"nodeType":"IfStatement","src":"1907:93:12","trueBody":{"id":672,"nodeType":"Block","src":"1960:40:12","statements":[{"expression":{"expression":{"id":669,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:12","memberName":"data","nodeType":"MemberAccess","src":"1981:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":671,"nodeType":"Return","src":"1974:15:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":674,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":678,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2183:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:12","typeDescriptions":{}}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":683,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2247:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"2247:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":681,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2207:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"2207:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":695,"nodeType":"IfStatement","src":"2157:189:12","trueBody":{"id":694,"nodeType":"Block","src":"2289:57:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":690,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2310:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:12","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":755,"src":"2310:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":693,"nodeType":"Return","src":"2303:32:12"}]}},{"expression":{"expression":{"id":696,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:12","memberName":"data","nodeType":"MemberAccess","src":"2363:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":698,"nodeType":"Return","src":"2356:15:12"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"1535:103:12","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":700,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:12","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"1660:2:12"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":700,"src":"1694:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":655,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:12"},"scope":701,"src":"1643:735:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":702,"src":"445:1935:12","usedErrors":[],"usedEvents":[]}],"src":"32:2349:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[713]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":703,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"58:110:13","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":713,"linearizedBaseContracts":[713],"name":"IERC2771","nameLocation":"178:8:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"193:171:13","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":712,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:13","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":707,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:13","nodeType":"VariableDeclaration","scope":712,"src":"397:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:13"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:13","nodeType":"VariableDeclaration","scope":712,"src":"439:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":709,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:13"},"scope":713,"src":"369:86:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":714,"src":"168:289:13","usedErrors":[],"usedEvents":[]}],"src":"32:426:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[727]},"id":728,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"58:143:14","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":727,"linearizedBaseContracts":[727],"name":"IForwarderRegistry","nameLocation":"211:18:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"236:314:14","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:14","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"sender","nameLocation":"592:6:14","nodeType":"VariableDeclaration","scope":726,"src":"584:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":718,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:14","nodeType":"VariableDeclaration","scope":726,"src":"600:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":720,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:14"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:14","nodeType":"VariableDeclaration","scope":726,"src":"642:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:14"},"scope":727,"src":"555:104:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":728,"src":"201:460:14","usedErrors":[],"usedEvents":[]}],"src":"32:630:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[756]},"id":757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":729,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"58:144:15","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":756,"linearizedBaseContracts":[756],"name":"ERC2771Calldata","nameLocation":"210:15:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":737,"nodeType":"Block","src":"398:105:15","statements":[{"AST":{"nativeSrc":"417:80:15","nodeType":"YulBlock","src":"417:80:15","statements":[{"nativeSrc":"431:56:15","nodeType":"YulAssignment","src":"431:56:15","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:15","nodeType":"YulLiteral","src":"445:2:15","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:15","nodeType":"YulIdentifier","src":"466:12:15"},"nativeSrc":"466:14:15","nodeType":"YulFunctionCall","src":"466:14:15"},{"kind":"number","nativeSrc":"482:2:15","nodeType":"YulLiteral","src":"482:2:15","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:15","nodeType":"YulIdentifier","src":"462:3:15"},"nativeSrc":"462:23:15","nodeType":"YulFunctionCall","src":"462:23:15"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:15","nodeType":"YulIdentifier","src":"449:12:15"},"nativeSrc":"449:37:15","nodeType":"YulFunctionCall","src":"449:37:15"}],"functionName":{"name":"shr","nativeSrc":"441:3:15","nodeType":"YulIdentifier","src":"441:3:15"},"nativeSrc":"441:46:15","nodeType":"YulFunctionCall","src":"441:46:15"},"variableNames":[{"name":"sender","nativeSrc":"431:6:15","nodeType":"YulIdentifier","src":"431:6:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":734,"isOffset":false,"isSlot":false,"src":"431:6:15","valueSize":1}],"id":736,"nodeType":"InlineAssembly","src":"408:89:15"}]},"documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"232:101:15","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":738,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:15","nodeType":"FunctionDefinition","parameters":{"id":732,"nodeType":"ParameterList","parameters":[],"src":"356:2:15"},"returnParameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"sender","nameLocation":"390:6:15","nodeType":"VariableDeclaration","scope":738,"src":"382:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:15"},"scope":756,"src":"338:165:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":754,"nodeType":"Block","src":"679:89:15","statements":[{"id":753,"nodeType":"UncheckedBlock","src":"689:73:15","statements":[{"expression":{"baseExpression":{"expression":{"id":744,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:15","memberName":"data","nodeType":"MemberAccess","src":"720:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":746,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:15","memberName":"data","nodeType":"MemberAccess","src":"730:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:15","memberName":"length","nodeType":"MemberAccess","src":"730:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":743,"id":752,"nodeType":"Return","src":"713:38:15"}]}]},"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"509:102:15","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:15","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[],"src":"632:2:15"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"data","nameLocation":"673:4:15","nodeType":"VariableDeclaration","scope":755,"src":"658:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":741,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:15"},"scope":756,"src":"616:152:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":757,"src":"202:568:15","usedErrors":[],"usedEvents":[]}],"src":"32:739:15"},"id":15},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765]},"id":766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":758,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"58:179:16","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":765,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:16","nodeType":"ErrorDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:16","nodeType":"VariableDeclaration","scope":765,"src":"277:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":760,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:16","nodeType":"VariableDeclaration","scope":765,"src":"299:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:16"},"src":"237:80:16"}],"src":"32:286:16"},"id":16},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765],"ProxyInitialization":[812],"StorageSlot":[1428]},"id":813,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":767,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":766,"src":"58:92:17","symbolAliases":[{"foreign":{"id":768,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"66:33:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":1429,"src":"151:74:17","symbolAliases":[{"foreign":{"id":770,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"159:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"227:92:17","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":812,"linearizedBaseContracts":[812],"name":"ProxyInitialization","nameLocation":"327:19:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":810,"nodeType":"Block","src":"735:294:17","statements":[{"assignments":[784],"declarations":[{"constant":false,"id":784,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:17","nodeType":"VariableDeclaration","scope":810,"src":"745:46:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1383_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":783,"nodeType":"UserDefinedTypeName","pathNode":{"id":782,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:17","757:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1383,"src":"745:23:17"},"referencedDeclaration":1383,"src":"745:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1383_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":789,"initialValue":{"arguments":[{"id":787,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"821:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":785,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"794:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1428_$","typeString":"type(library StorageSlot)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:17","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"794:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$1383_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1383_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:17"},{"assignments":[791],"declarations":[{"constant":false,"id":791,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:17","nodeType":"VariableDeclaration","scope":810,"src":"843:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":794,"initialValue":{"expression":{"id":792,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"866:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1383_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1382,"src":"866:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"900:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":796,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":803,"nodeType":"IfStatement","src":"896:88:17","trueBody":{"errorCall":{"arguments":[{"id":799,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"964:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":800,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":798,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"930:33:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":802,"nodeType":"RevertStatement","src":"923:61:17"}},{"expression":{"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":804,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"994:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1383_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":806,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1382,"src":"994:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":807,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"1017:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":809,"nodeType":"ExpressionStatement","src":"994:28:17"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"353:314:17","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:17","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:17","nodeType":"VariableDeclaration","scope":811,"src":"690:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"phase","nameLocation":"719:5:17","nodeType":"VariableDeclaration","scope":811,"src":"711:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:17"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[],"src":"735:0:17"},"scope":812,"src":"672:357:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":813,"src":"319:712:17","usedErrors":[],"usedEvents":[]}],"src":"32:1000:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[847],"IERC1155TokenReceiver":[1016],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":848,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":814,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./interfaces/IERC1155TokenReceiver.sol","id":816,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":1017,"src":"58:77:18","symbolAliases":[{"foreign":{"id":815,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"66:21:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":818,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":533,"src":"136:104:18","symbolAliases":[{"foreign":{"id":817,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"144:25:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":820,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":415,"src":"241:80:18","symbolAliases":[{"foreign":{"id":819,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"249:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":822,"name":"IERC1155TokenReceiver","nameLocations":["541:21:18"],"nodeType":"IdentifierPath","referencedDeclaration":1016,"src":"541:21:18"},"id":823,"nodeType":"InheritanceSpecifier","src":"541:21:18"},{"baseName":{"id":824,"name":"InterfaceDetection","nameLocations":["564:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"564:18:18"},"id":825,"nodeType":"InheritanceSpecifier","src":"564:18:18"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"323:176:18","text":"@title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":847,"linearizedBaseContracts":[847,414,431,1016],"name":"ERC1155TokenReceiver","nameLocation":"517:20:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":829,"libraryName":{"id":826,"name":"InterfaceDetectionStorage","nameLocations":["595:25:18"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"595:25:18"},"nodeType":"UsingForDirective","src":"589:69:18","typeName":{"id":828,"nodeType":"UserDefinedTypeName","pathNode":{"id":827,"name":"InterfaceDetectionStorage.Layout","nameLocations":["625:25:18","651:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"625:32:18"},"referencedDeclaration":442,"src":"625:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":845,"nodeType":"Block","src":"770:120:18","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":839,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"842:21:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1016_$","typeString":"type(contract IERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1016_$","typeString":"type(contract IERC1155TokenReceiver)"}],"id":838,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"837:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155TokenReceiver_$1016","typeString":"type(contract IERC1155TokenReceiver)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:11:18","memberName":"interfaceId","nodeType":"MemberAccess","src":"837:39:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"878:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":833,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"780:25:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"780:32:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"815:21:18","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"780:56:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":844,"nodeType":"ExpressionStatement","src":"780:103:18"}]},"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"664:87:18","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"id":846,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[],"src":"767:2:18"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[],"src":"770:0:18"},"scope":847,"src":"756:134:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":848,"src":"499:393:18","usedErrors":[419],"usedEvents":[]}],"src":"32:861:18"},"id":18},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","exportedSymbols":{"IERC1155":[922]},"id":923,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":849,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"58:195:19","text":"@title ERC1155 Multi Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26."},"fullyImplemented":false,"id":922,"linearizedBaseContracts":[922],"name":"IERC1155","nameLocation":"263:8:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"278:689:19","text":"@notice Safely transfers some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits a {TransferSingle} event.\n @param from Current token owner.\n @param to Address of the new token owner.\n @param id Identifier of the token to transfer.\n @param value Amount of token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"f242432a","id":864,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"981:16:19","nodeType":"FunctionDefinition","parameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"from","nameLocation":"1006:4:19","nodeType":"VariableDeclaration","scope":864,"src":"998:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"998:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"to","nameLocation":"1020:2:19","nodeType":"VariableDeclaration","scope":864,"src":"1012:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":854,"name":"address","nodeType":"ElementaryTypeName","src":"1012:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"id","nameLocation":"1032:2:19","nodeType":"VariableDeclaration","scope":864,"src":"1024:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"1024:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"value","nameLocation":"1044:5:19","nodeType":"VariableDeclaration","scope":864,"src":"1036:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"1036:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":861,"mutability":"mutable","name":"data","nameLocation":"1066:4:19","nodeType":"VariableDeclaration","scope":864,"src":"1051:19:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":860,"name":"bytes","nodeType":"ElementaryTypeName","src":"1051:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"997:74:19"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[],"src":"1080:0:19"},"scope":922,"src":"972:109:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"1087:784:19","text":"@notice Safely transfers a batch of tokens.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n @dev Emits a {TransferBatch} event.\n @param from Current tokens owner.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to transfer.\n @param values Amounts of tokens to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"2eb2c2d6","id":880,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"1885:21:19","nodeType":"FunctionDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"from","nameLocation":"1915:4:19","nodeType":"VariableDeclaration","scope":880,"src":"1907:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":866,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":869,"mutability":"mutable","name":"to","nameLocation":"1929:2:19","nodeType":"VariableDeclaration","scope":880,"src":"1921:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"1921:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"ids","nameLocation":"1952:3:19","nodeType":"VariableDeclaration","scope":880,"src":"1933:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":870,"name":"uint256","nodeType":"ElementaryTypeName","src":"1933:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":871,"nodeType":"ArrayTypeName","src":"1933:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"values","nameLocation":"1976:6:19","nodeType":"VariableDeclaration","scope":880,"src":"1957:25:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":873,"name":"uint256","nodeType":"ElementaryTypeName","src":"1957:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":874,"nodeType":"ArrayTypeName","src":"1957:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"data","nameLocation":"1999:4:19","nodeType":"VariableDeclaration","scope":880,"src":"1984:19:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":876,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1906:98:19"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"2013:0:19"},"scope":922,"src":"1876:138:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"2020:234:19","text":"@notice Enables or disables an operator's approval.\n @dev Emits an {ApprovalForAll} event.\n @param operator Address of the operator.\n @param approved True to approve the operator, false to revoke its approval."},"functionSelector":"a22cb465","id":888,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2268:17:19","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"operator","nameLocation":"2294:8:19","nodeType":"VariableDeclaration","scope":888,"src":"2286:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"2286:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"approved","nameLocation":"2309:8:19","nodeType":"VariableDeclaration","scope":888,"src":"2304:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":884,"name":"bool","nodeType":"ElementaryTypeName","src":"2304:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2285:33:19"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[],"src":"2327:0:19"},"scope":922,"src":"2259:69:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"2334:254:19","text":"@notice Retrieves the approval status of an operator for a given owner.\n @param owner Address of the authorisation giver.\n @param operator Address of the operator.\n @return approved True if the operator is approved, false if not."},"functionSelector":"e985e9c5","id":898,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2602:16:19","nodeType":"FunctionDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"owner","nameLocation":"2627:5:19","nodeType":"VariableDeclaration","scope":898,"src":"2619:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"2619:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"operator","nameLocation":"2642:8:19","nodeType":"VariableDeclaration","scope":898,"src":"2634:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":892,"name":"address","nodeType":"ElementaryTypeName","src":"2634:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2618:33:19"},"returnParameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"approved","nameLocation":"2680:8:19","nodeType":"VariableDeclaration","scope":898,"src":"2675:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2674:15:19"},"scope":922,"src":"2593:97:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":899,"nodeType":"StructuredDocumentation","src":"2696:259:19","text":"@notice Retrieves the balance of `id` owned by account `owner`.\n @param owner The account to retrieve the balance of.\n @param id The identifier to retrieve the balance of.\n @return balance The balance of `id` owned by account `owner`."},"functionSelector":"00fdd58e","id":908,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2969:9:19","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":901,"mutability":"mutable","name":"owner","nameLocation":"2987:5:19","nodeType":"VariableDeclaration","scope":908,"src":"2979:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":900,"name":"address","nodeType":"ElementaryTypeName","src":"2979:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"id","nameLocation":"3002:2:19","nodeType":"VariableDeclaration","scope":908,"src":"2994:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"2994:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2978:27:19"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"balance","nameLocation":"3037:7:19","nodeType":"VariableDeclaration","scope":908,"src":"3029:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"3029:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3028:17:19"},"scope":922,"src":"2960:86:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"3052:333:19","text":"@notice Retrieves the balances of `ids` owned by accounts `owners`.\n @dev Reverts if `owners` and `ids` have different lengths.\n @param owners The addresses of the token holders\n @param ids The identifiers to retrieve the balance of.\n @return balances The balances of `ids` owned by accounts `owners`."},"functionSelector":"4e1273f4","id":921,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"3399:14:19","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"mutability":"mutable","name":"owners","nameLocation":"3433:6:19","nodeType":"VariableDeclaration","scope":921,"src":"3414:25:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"3414:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":911,"nodeType":"ArrayTypeName","src":"3414:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"ids","nameLocation":"3460:3:19","nodeType":"VariableDeclaration","scope":921,"src":"3441:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"3441:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":914,"nodeType":"ArrayTypeName","src":"3441:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3413:51:19"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"balances","nameLocation":"3505:8:19","nodeType":"VariableDeclaration","scope":921,"src":"3488:25:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":917,"name":"uint256","nodeType":"ElementaryTypeName","src":"3488:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":918,"nodeType":"ArrayTypeName","src":"3488:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3487:27:19"},"scope":922,"src":"3390:125:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":923,"src":"253:3264:19","usedErrors":[],"usedEvents":[]}],"src":"32:3486:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[948]},"id":949,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":924,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":925,"nodeType":"StructuredDocumentation","src":"59:196:20","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1."},"fullyImplemented":false,"id":948,"linearizedBaseContracts":[948],"name":"IERC1155Burnable","nameLocation":"265:16:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"288:391:20","text":"@notice Burns some token.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"functionSelector":"124d91e5","id":935,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"693:8:20","nodeType":"FunctionDefinition","parameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"from","nameLocation":"710:4:20","nodeType":"VariableDeclaration","scope":935,"src":"702:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":927,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":930,"mutability":"mutable","name":"id","nameLocation":"724:2:20","nodeType":"VariableDeclaration","scope":935,"src":"716:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":932,"mutability":"mutable","name":"value","nameLocation":"736:5:20","nodeType":"VariableDeclaration","scope":935,"src":"728:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":931,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:41:20"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[],"src":"751:0:20"},"scope":948,"src":"684:68:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"758:478:20","text":"@notice Burns multiple tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"functionSelector":"80534934","id":947,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1250:13:20","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"from","nameLocation":"1272:4:20","nodeType":"VariableDeclaration","scope":947,"src":"1264:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":941,"mutability":"mutable","name":"ids","nameLocation":"1297:3:20","nodeType":"VariableDeclaration","scope":947,"src":"1278:22:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":940,"nodeType":"ArrayTypeName","src":"1278:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"values","nameLocation":"1321:6:20","nodeType":"VariableDeclaration","scope":947,"src":"1302:25:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1302:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":943,"nodeType":"ArrayTypeName","src":"1302:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1263:65:20"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"1337:0:20"},"scope":948,"src":"1241:97:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":949,"src":"255:1085:20","usedErrors":[],"usedEvents":[]}],"src":"33:1308:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[978]},"id":979,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":950,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"59:196:21","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x5190c92c."},"fullyImplemented":false,"id":978,"linearizedBaseContracts":[978],"name":"IERC1155Mintable","nameLocation":"265:16:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"288:550:21","text":"@notice Safely mints some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"5cfa9297","id":963,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"852:8:21","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"to","nameLocation":"869:2:21","nodeType":"VariableDeclaration","scope":963,"src":"861:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":956,"mutability":"mutable","name":"id","nameLocation":"881:2:21","nodeType":"VariableDeclaration","scope":963,"src":"873:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"873:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"value","nameLocation":"893:5:21","nodeType":"VariableDeclaration","scope":963,"src":"885:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":957,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":960,"mutability":"mutable","name":"data","nameLocation":"915:4:21","nodeType":"VariableDeclaration","scope":963,"src":"900:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":959,"name":"bytes","nodeType":"ElementaryTypeName","src":"900:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"860:60:21"},"returnParameters":{"id":962,"nodeType":"ParameterList","parameters":[],"src":"929:0:21"},"scope":978,"src":"843:87:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":964,"nodeType":"StructuredDocumentation","src":"936:644:21","text":"@notice Safely mints a batch of tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"0d6a5bbb","id":977,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1594:13:21","nodeType":"FunctionDefinition","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":966,"mutability":"mutable","name":"to","nameLocation":"1616:2:21","nodeType":"VariableDeclaration","scope":977,"src":"1608:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":965,"name":"address","nodeType":"ElementaryTypeName","src":"1608:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"ids","nameLocation":"1639:3:21","nodeType":"VariableDeclaration","scope":977,"src":"1620:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":967,"name":"uint256","nodeType":"ElementaryTypeName","src":"1620:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":968,"nodeType":"ArrayTypeName","src":"1620:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"values","nameLocation":"1663:6:21","nodeType":"VariableDeclaration","scope":977,"src":"1644:25:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":970,"name":"uint256","nodeType":"ElementaryTypeName","src":"1644:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":971,"nodeType":"ArrayTypeName","src":"1644:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":974,"mutability":"mutable","name":"data","nameLocation":"1686:4:21","nodeType":"VariableDeclaration","scope":977,"src":"1671:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"1671:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1607:84:21"},"returnParameters":{"id":976,"nodeType":"ParameterList","parameters":[],"src":"1700:0:21"},"scope":978,"src":"1585:116:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":979,"src":"255:1448:21","usedErrors":[],"usedEvents":[]}],"src":"33:1671:21"},"id":21},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[1016]},"id":1017,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":980,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"58:284:22","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":1016,"linearizedBaseContracts":[1016],"name":"IERC1155TokenReceiver","nameLocation":"352:21:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":982,"nodeType":"StructuredDocumentation","src":"380:914:22","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":997,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1308:17:22","nodeType":"FunctionDefinition","parameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":984,"mutability":"mutable","name":"operator","nameLocation":"1334:8:22","nodeType":"VariableDeclaration","scope":997,"src":"1326:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":983,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":986,"mutability":"mutable","name":"from","nameLocation":"1352:4:22","nodeType":"VariableDeclaration","scope":997,"src":"1344:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":985,"name":"address","nodeType":"ElementaryTypeName","src":"1344:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"id","nameLocation":"1366:2:22","nodeType":"VariableDeclaration","scope":997,"src":"1358:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":987,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":990,"mutability":"mutable","name":"value","nameLocation":"1378:5:22","nodeType":"VariableDeclaration","scope":997,"src":"1370:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":989,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"data","nameLocation":"1400:4:22","nodeType":"VariableDeclaration","scope":997,"src":"1385:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":991,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1325:80:22"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"magicValue","nameLocation":"1431:10:22","nodeType":"VariableDeclaration","scope":997,"src":"1424:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":994,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1423:19:22"},"scope":1016,"src":"1299:144:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"1449:1062:22","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":1015,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2525:22:22","nodeType":"FunctionDefinition","parameters":{"id":1011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"operator","nameLocation":"2565:8:22","nodeType":"VariableDeclaration","scope":1015,"src":"2557:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"from","nameLocation":"2591:4:22","nodeType":"VariableDeclaration","scope":1015,"src":"2583:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"ids","nameLocation":"2624:3:22","nodeType":"VariableDeclaration","scope":1015,"src":"2605:22:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"2605:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1004,"nodeType":"ArrayTypeName","src":"2605:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1008,"mutability":"mutable","name":"values","nameLocation":"2656:6:22","nodeType":"VariableDeclaration","scope":1015,"src":"2637:25:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1007,"nodeType":"ArrayTypeName","src":"2637:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1010,"mutability":"mutable","name":"data","nameLocation":"2687:4:22","nodeType":"VariableDeclaration","scope":1015,"src":"2672:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1009,"name":"bytes","nodeType":"ElementaryTypeName","src":"2672:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2547:150:22"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"magicValue","nameLocation":"2723:10:22","nodeType":"VariableDeclaration","scope":1015,"src":"2716:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1012,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2716:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2715:19:22"},"scope":1016,"src":"2516:219:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1017,"src":"342:2395:22","usedErrors":[],"usedEvents":[]}],"src":"32:2706:22"},"id":22},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1346]},"id":1347,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1018,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"126:67:23","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1346,"linearizedBaseContracts":[1346],"name":"Address","nameLocation":"202:7:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":1033,"nodeType":"Block","src":"1241:254:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1027,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"1465:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:23","memberName":"code","nodeType":"MemberAccess","src":"1465:12:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:23","memberName":"length","nodeType":"MemberAccess","src":"1465:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1026,"id":1032,"nodeType":"Return","src":"1458:30:23"}]},"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"216:954:23","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1034,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:23","nodeType":"FunctionDefinition","parameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"account","nameLocation":"1203:7:23","nodeType":"VariableDeclaration","scope":1034,"src":"1195:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1021,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:23"},"returnParameters":{"id":1026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1025,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1034,"src":"1235:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1024,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:23"},"scope":1346,"src":"1175:320:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1067,"nodeType":"Block","src":"2483:241:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1045,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1346","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1346","typeString":"library Address"}],"id":1044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1043,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:23","typeDescriptions":{}}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:23","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1048,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2526:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1042,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1052,"nodeType":"ExpressionStatement","src":"2493:73:23"},{"assignments":[1054,null],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"success","nameLocation":"2583:7:23","nodeType":"VariableDeclaration","scope":1067,"src":"2578:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1053,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1061,"initialValue":{"arguments":[{"hexValue":"","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1055,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"2596:9:23","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:23","memberName":"call","nodeType":"MemberAccess","src":"2596:14:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1057,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2618:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:23"},{"expression":{"arguments":[{"id":1063,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"2647:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1062,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1066,"nodeType":"ExpressionStatement","src":"2639:78:23"}]},"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"1501:906:23","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1068,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:23","nodeType":"FunctionDefinition","parameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:23","nodeType":"VariableDeclaration","scope":1068,"src":"2431:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"amount","nameLocation":"2466:6:23","nodeType":"VariableDeclaration","scope":1068,"src":"2458:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:23"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"2483:0:23"},"scope":1346,"src":"2412:312:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1085,"nodeType":"Block","src":"3555:96:23","statements":[{"expression":{"arguments":[{"id":1079,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"3594:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1080,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"3602:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1078,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1126,1170],"referencedDeclaration":1170,"src":"3572:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1077,"id":1084,"nodeType":"Return","src":"3565:79:23"}]},"documentation":{"id":1069,"nodeType":"StructuredDocumentation","src":"2730:731:23","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1086,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:23","nodeType":"FunctionDefinition","parameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1071,"mutability":"mutable","name":"target","nameLocation":"3496:6:23","nodeType":"VariableDeclaration","scope":1086,"src":"3488:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1073,"mutability":"mutable","name":"data","nameLocation":"3517:4:23","nodeType":"VariableDeclaration","scope":1086,"src":"3504:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1072,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:23"},"returnParameters":{"id":1077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1086,"src":"3541:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1075,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:23"},"scope":1346,"src":"3466:185:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1105,"nodeType":"Block","src":"4020:76:23","statements":[{"expression":{"arguments":[{"id":1099,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"4059:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1100,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"4067:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1102,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"4076:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1098,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1126,1170],"referencedDeclaration":1170,"src":"4037:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1097,"id":1104,"nodeType":"Return","src":"4030:59:23"}]},"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"3657:211:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1106,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:23","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"target","nameLocation":"3912:6:23","nodeType":"VariableDeclaration","scope":1106,"src":"3904:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1088,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"data","nameLocation":"3941:4:23","nodeType":"VariableDeclaration","scope":1106,"src":"3928:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1090,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:23","nodeType":"VariableDeclaration","scope":1106,"src":"3955:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1092,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:23"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1106,"src":"4006:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1095,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:23"},"scope":1346,"src":"3873:223:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1125,"nodeType":"Block","src":"4601:111:23","statements":[{"expression":{"arguments":[{"id":1119,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"4640:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1120,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"4648:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"4654:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1118,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1126,1170],"referencedDeclaration":1170,"src":"4618:21:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1117,"id":1124,"nodeType":"Return","src":"4611:94:23"}]},"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"4102:351:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1126,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:23","nodeType":"FunctionDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"target","nameLocation":"4506:6:23","nodeType":"VariableDeclaration","scope":1126,"src":"4498:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"data","nameLocation":"4535:4:23","nodeType":"VariableDeclaration","scope":1126,"src":"4522:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1110,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"value","nameLocation":"4557:5:23","nodeType":"VariableDeclaration","scope":1126,"src":"4549:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:23"},"returnParameters":{"id":1117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1126,"src":"4587:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1115,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:23"},"scope":1346,"src":"4458:254:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1169,"nodeType":"Block","src":"5139:267:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1143,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1346","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1346","typeString":"library Address"}],"id":1142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:23","typeDescriptions":{}}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:23","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"5182:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1140,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1150,"nodeType":"ExpressionStatement","src":"5149:81:23"},{"assignments":[1152,1154],"declarations":[{"constant":false,"id":1152,"mutability":"mutable","name":"success","nameLocation":"5246:7:23","nodeType":"VariableDeclaration","scope":1169,"src":"5241:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1151,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1154,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:23","nodeType":"VariableDeclaration","scope":1169,"src":"5255:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1153,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1161,"initialValue":{"arguments":[{"id":1159,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"5308:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1155,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5282:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:23","memberName":"call","nodeType":"MemberAccess","src":"5282:11:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"5301:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:23"},{"expression":{"arguments":[{"id":1163,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5357:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1164,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"5365:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1165,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"5374:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1166,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"5386:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1162,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"5330:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1139,"id":1168,"nodeType":"Return","src":"5323:76:23"}]},"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"4718:237:23","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1170,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:23","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"target","nameLocation":"5008:6:23","nodeType":"VariableDeclaration","scope":1170,"src":"5000:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"data","nameLocation":"5037:4:23","nodeType":"VariableDeclaration","scope":1170,"src":"5024:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1130,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"value","nameLocation":"5059:5:23","nodeType":"VariableDeclaration","scope":1170,"src":"5051:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:23","nodeType":"VariableDeclaration","scope":1170,"src":"5074:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1134,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:23"},"returnParameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1170,"src":"5125:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1137,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:23"},"scope":1346,"src":"4960:446:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1186,"nodeType":"Block","src":"5683:97:23","statements":[{"expression":{"arguments":[{"id":1181,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"5719:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1182,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"5727:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1180,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1187,1216],"referencedDeclaration":1216,"src":"5700:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1179,"id":1185,"nodeType":"Return","src":"5693:80:23"}]},"documentation":{"id":1171,"nodeType":"StructuredDocumentation","src":"5412:166:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1187,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:23","nodeType":"FunctionDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"target","nameLocation":"5619:6:23","nodeType":"VariableDeclaration","scope":1187,"src":"5611:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1175,"mutability":"mutable","name":"data","nameLocation":"5640:4:23","nodeType":"VariableDeclaration","scope":1187,"src":"5627:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1174,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:23"},"returnParameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1187,"src":"5669:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1177,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:23"},"scope":1346,"src":"5583:197:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1215,"nodeType":"Block","src":"6122:168:23","statements":[{"assignments":[1200,1202],"declarations":[{"constant":false,"id":1200,"mutability":"mutable","name":"success","nameLocation":"6138:7:23","nodeType":"VariableDeclaration","scope":1215,"src":"6133:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1199,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:23","nodeType":"VariableDeclaration","scope":1215,"src":"6147:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1201,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1207,"initialValue":{"arguments":[{"id":1205,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"6192:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1203,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"6174:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:23","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:23","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:23"},{"expression":{"arguments":[{"id":1209,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"6241:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1210,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"6249:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1211,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"6258:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1212,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"6270:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1208,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"6214:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1198,"id":1214,"nodeType":"Return","src":"6207:76:23"}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"5786:173:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1216,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:23","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"target","nameLocation":"6009:6:23","nodeType":"VariableDeclaration","scope":1216,"src":"6001:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"data","nameLocation":"6038:4:23","nodeType":"VariableDeclaration","scope":1216,"src":"6025:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1191,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:23","nodeType":"VariableDeclaration","scope":1216,"src":"6052:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1193,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:23"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1216,"src":"6108:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1196,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:23"},"scope":1346,"src":"5964:326:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1232,"nodeType":"Block","src":"6566:101:23","statements":[{"expression":{"arguments":[{"id":1227,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"6604:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1228,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"6612:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1226,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1233,1262],"referencedDeclaration":1262,"src":"6583:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1225,"id":1231,"nodeType":"Return","src":"6576:84:23"}]},"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"6296:168:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1233,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:23","nodeType":"FunctionDefinition","parameters":{"id":1222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"target","nameLocation":"6507:6:23","nodeType":"VariableDeclaration","scope":1233,"src":"6499:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"data","nameLocation":"6528:4:23","nodeType":"VariableDeclaration","scope":1233,"src":"6515:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1220,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:23"},"returnParameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1233,"src":"6552:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1223,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:23"},"scope":1346,"src":"6469:198:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1261,"nodeType":"Block","src":"7008:170:23","statements":[{"assignments":[1246,1248],"declarations":[{"constant":false,"id":1246,"mutability":"mutable","name":"success","nameLocation":"7024:7:23","nodeType":"VariableDeclaration","scope":1261,"src":"7019:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1245,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:23","nodeType":"VariableDeclaration","scope":1261,"src":"7033:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1247,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1253,"initialValue":{"arguments":[{"id":1251,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"7080:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1249,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"7060:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:23","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:23","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:23"},{"expression":{"arguments":[{"id":1255,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"7129:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1256,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"7137:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1257,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"7146:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1258,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"7158:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1254,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"7102:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1244,"id":1260,"nodeType":"Return","src":"7095:76:23"}]},"documentation":{"id":1234,"nodeType":"StructuredDocumentation","src":"6673:175:23","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1262,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:23","nodeType":"FunctionDefinition","parameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"target","nameLocation":"6900:6:23","nodeType":"VariableDeclaration","scope":1262,"src":"6892:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1235,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1238,"mutability":"mutable","name":"data","nameLocation":"6929:4:23","nodeType":"VariableDeclaration","scope":1262,"src":"6916:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1237,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:23","nodeType":"VariableDeclaration","scope":1262,"src":"6943:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1239,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:23"},"returnParameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1262,"src":"6994:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1242,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:23"},"scope":1346,"src":"6853:325:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1300,"nodeType":"Block","src":"7660:434:23","statements":[{"condition":{"id":1276,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"7674:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1298,"nodeType":"Block","src":"8030:58:23","statements":[{"expression":{"arguments":[{"id":1294,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"8052:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1295,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"8064:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1293,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"8044:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1297,"nodeType":"ExpressionStatement","src":"8044:33:23"}]},"id":1299,"nodeType":"IfStatement","src":"7670:418:23","trueBody":{"id":1292,"nodeType":"Block","src":"7683:341:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1277,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"7701:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:23","memberName":"length","nodeType":"MemberAccess","src":"7701:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1289,"nodeType":"IfStatement","src":"7697:286:23","trueBody":{"id":1288,"nodeType":"Block","src":"7725:258:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":1283,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"7927:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1282,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"7916:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1281,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1287,"nodeType":"ExpressionStatement","src":"7908:60:23"}]}},{"expression":{"id":1290,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"8003:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1275,"id":1291,"nodeType":"Return","src":"7996:17:23"}]}}]},"documentation":{"id":1263,"nodeType":"StructuredDocumentation","src":"7184:277:23","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1301,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:23","nodeType":"FunctionDefinition","parameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"target","nameLocation":"7519:6:23","nodeType":"VariableDeclaration","scope":1301,"src":"7511:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1264,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"success","nameLocation":"7540:7:23","nodeType":"VariableDeclaration","scope":1301,"src":"7535:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1266,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:23","nodeType":"VariableDeclaration","scope":1301,"src":"7557:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1268,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1271,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:23","nodeType":"VariableDeclaration","scope":1301,"src":"7590:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1270,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:23"},"returnParameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1301,"src":"7646:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1273,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:23"},"scope":1346,"src":"7466:628:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1324,"nodeType":"Block","src":"8475:135:23","statements":[{"condition":{"id":1313,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"8489:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1322,"nodeType":"Block","src":"8546:58:23","statements":[{"expression":{"arguments":[{"id":1318,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"8568:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1319,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"8580:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1317,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"8560:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1321,"nodeType":"ExpressionStatement","src":"8560:33:23"}]},"id":1323,"nodeType":"IfStatement","src":"8485:119:23","trueBody":{"id":1316,"nodeType":"Block","src":"8498:42:23","statements":[{"expression":{"id":1314,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"8519:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1312,"id":1315,"nodeType":"Return","src":"8512:17:23"}]}}]},"documentation":{"id":1302,"nodeType":"StructuredDocumentation","src":"8100:210:23","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1325,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:23","nodeType":"FunctionDefinition","parameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"success","nameLocation":"8355:7:23","nodeType":"VariableDeclaration","scope":1325,"src":"8350:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1303,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1306,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:23","nodeType":"VariableDeclaration","scope":1325,"src":"8372:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1305,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1308,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:23","nodeType":"VariableDeclaration","scope":1325,"src":"8405:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1307,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:23"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1325,"src":"8461:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1310,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:23"},"scope":1346,"src":"8315:295:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1344,"nodeType":"Block","src":"8699:457:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1332,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"8775:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:23","memberName":"length","nodeType":"MemberAccess","src":"8775:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1342,"nodeType":"Block","src":"9105:45:23","statements":[{"expression":{"arguments":[{"id":1339,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"9126:12:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1338,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:23","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1341,"nodeType":"ExpressionStatement","src":"9119:20:23"}]},"id":1343,"nodeType":"IfStatement","src":"8771:379:23","trueBody":{"id":1337,"nodeType":"Block","src":"8798:301:23","statements":[{"AST":{"nativeSrc":"8956:133:23","nodeType":"YulBlock","src":"8956:133:23","statements":[{"nativeSrc":"8974:40:23","nodeType":"YulVariableDeclaration","src":"8974:40:23","value":{"arguments":[{"name":"returndata","nativeSrc":"9003:10:23","nodeType":"YulIdentifier","src":"9003:10:23"}],"functionName":{"name":"mload","nativeSrc":"8997:5:23","nodeType":"YulIdentifier","src":"8997:5:23"},"nativeSrc":"8997:17:23","nodeType":"YulFunctionCall","src":"8997:17:23"},"variables":[{"name":"returndata_size","nativeSrc":"8978:15:23","nodeType":"YulTypedName","src":"8978:15:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9042:2:23","nodeType":"YulLiteral","src":"9042:2:23","type":"","value":"32"},{"name":"returndata","nativeSrc":"9046:10:23","nodeType":"YulIdentifier","src":"9046:10:23"}],"functionName":{"name":"add","nativeSrc":"9038:3:23","nodeType":"YulIdentifier","src":"9038:3:23"},"nativeSrc":"9038:19:23","nodeType":"YulFunctionCall","src":"9038:19:23"},{"name":"returndata_size","nativeSrc":"9059:15:23","nodeType":"YulIdentifier","src":"9059:15:23"}],"functionName":{"name":"revert","nativeSrc":"9031:6:23","nodeType":"YulIdentifier","src":"9031:6:23"},"nativeSrc":"9031:44:23","nodeType":"YulFunctionCall","src":"9031:44:23"},"nativeSrc":"9031:44:23","nodeType":"YulExpressionStatement","src":"9031:44:23"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1327,"isOffset":false,"isSlot":false,"src":"9003:10:23","valueSize":1},{"declaration":1327,"isOffset":false,"isSlot":false,"src":"9046:10:23","valueSize":1}],"id":1336,"nodeType":"InlineAssembly","src":"8947:142:23"}]}}]},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:23","nodeType":"FunctionDefinition","parameters":{"id":1330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1327,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:23","nodeType":"VariableDeclaration","scope":1345,"src":"8633:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1326,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1329,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:23","nodeType":"VariableDeclaration","scope":1345,"src":"8658:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1328,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:23"},"returnParameters":{"id":1331,"nodeType":"ParameterList","parameters":[],"src":"8699:0:23"},"scope":1346,"src":"8616:540:23","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1347,"src":"194:8964:23","usedErrors":[],"usedEvents":[]}],"src":"101:9058:23"},"id":23},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1368]},"id":1369,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1348,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:24"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"111:496:24","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1368,"linearizedBaseContracts":[1368],"name":"Context","nameLocation":"626:7:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":1357,"nodeType":"Block","src":"702:34:24","statements":[{"expression":{"expression":{"id":1354,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:24","memberName":"sender","nodeType":"MemberAccess","src":"719:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1353,"id":1356,"nodeType":"Return","src":"712:17:24"}]},"id":1358,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:24","nodeType":"FunctionDefinition","parameters":{"id":1350,"nodeType":"ParameterList","parameters":[],"src":"659:2:24"},"returnParameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1358,"src":"693:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1351,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:24"},"scope":1368,"src":"640:96:24","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1366,"nodeType":"Block","src":"809:32:24","statements":[{"expression":{"expression":{"id":1363,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:24","memberName":"data","nodeType":"MemberAccess","src":"826:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1362,"id":1365,"nodeType":"Return","src":"819:15:24"}]},"id":1367,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:24","nodeType":"FunctionDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[],"src":"759:2:24"},"returnParameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1367,"src":"793:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1360,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:24"},"scope":1368,"src":"742:99:24","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1369,"src":"608:235:24","usedErrors":[],"usedEvents":[]}],"src":"86:758:24"},"id":24},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1428]},"id":1429,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1370,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1371,"nodeType":"StructuredDocumentation","src":"130:1148:25","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":1428,"linearizedBaseContracts":[1428],"name":"StorageSlot","nameLocation":"1287:11:25","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1374,"members":[{"constant":false,"id":1373,"mutability":"mutable","name":"value","nameLocation":"1342:5:25","nodeType":"VariableDeclaration","scope":1374,"src":"1334:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1372,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:25","nodeType":"StructDefinition","scope":1428,"src":"1305:49:25","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1377,"members":[{"constant":false,"id":1376,"mutability":"mutable","name":"value","nameLocation":"1394:5:25","nodeType":"VariableDeclaration","scope":1377,"src":"1389:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1375,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:25","nodeType":"StructDefinition","scope":1428,"src":"1360:46:25","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1380,"members":[{"constant":false,"id":1379,"mutability":"mutable","name":"value","nameLocation":"1449:5:25","nodeType":"VariableDeclaration","scope":1380,"src":"1441:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:25","nodeType":"StructDefinition","scope":1428,"src":"1412:49:25","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1383,"members":[{"constant":false,"id":1382,"mutability":"mutable","name":"value","nameLocation":"1504:5:25","nodeType":"VariableDeclaration","scope":1383,"src":"1496:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1381,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:25","nodeType":"StructDefinition","scope":1428,"src":"1467:49:25","visibility":"public"},{"body":{"id":1393,"nodeType":"Block","src":"1698:106:25","statements":[{"AST":{"nativeSrc":"1760:38:25","nodeType":"YulBlock","src":"1760:38:25","statements":[{"nativeSrc":"1774:14:25","nodeType":"YulAssignment","src":"1774:14:25","value":{"name":"slot","nativeSrc":"1784:4:25","nodeType":"YulIdentifier","src":"1784:4:25"},"variableNames":[{"name":"r.slot","nativeSrc":"1774:6:25","nodeType":"YulIdentifier","src":"1774:6:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1390,"isOffset":false,"isSlot":true,"src":"1774:6:25","suffix":"slot","valueSize":1},{"declaration":1386,"isOffset":false,"isSlot":false,"src":"1784:4:25","valueSize":1}],"id":1392,"nodeType":"InlineAssembly","src":"1751:47:25"}]},"documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"1522:87:25","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1394,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:25","nodeType":"FunctionDefinition","parameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"slot","nameLocation":"1646:4:25","nodeType":"VariableDeclaration","scope":1394,"src":"1638:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:25"},"returnParameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"mutability":"mutable","name":"r","nameLocation":"1695:1:25","nodeType":"VariableDeclaration","scope":1394,"src":"1675:21:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1374_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1389,"nodeType":"UserDefinedTypeName","pathNode":{"id":1388,"name":"AddressSlot","nameLocations":["1675:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":1374,"src":"1675:11:25"},"referencedDeclaration":1374,"src":"1675:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1374_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:25"},"scope":1428,"src":"1614:190:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1404,"nodeType":"Block","src":"1986:106:25","statements":[{"AST":{"nativeSrc":"2048:38:25","nodeType":"YulBlock","src":"2048:38:25","statements":[{"nativeSrc":"2062:14:25","nodeType":"YulAssignment","src":"2062:14:25","value":{"name":"slot","nativeSrc":"2072:4:25","nodeType":"YulIdentifier","src":"2072:4:25"},"variableNames":[{"name":"r.slot","nativeSrc":"2062:6:25","nodeType":"YulIdentifier","src":"2062:6:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1401,"isOffset":false,"isSlot":true,"src":"2062:6:25","suffix":"slot","valueSize":1},{"declaration":1397,"isOffset":false,"isSlot":false,"src":"2072:4:25","valueSize":1}],"id":1403,"nodeType":"InlineAssembly","src":"2039:47:25"}]},"documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"1810:87:25","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1405,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:25","nodeType":"FunctionDefinition","parameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"slot","nameLocation":"1934:4:25","nodeType":"VariableDeclaration","scope":1405,"src":"1926:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:25"},"returnParameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"r","nameLocation":"1983:1:25","nodeType":"VariableDeclaration","scope":1405,"src":"1963:21:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1377_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1400,"nodeType":"UserDefinedTypeName","pathNode":{"id":1399,"name":"BooleanSlot","nameLocations":["1963:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"1963:11:25"},"referencedDeclaration":1377,"src":"1963:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1377_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:25"},"scope":1428,"src":"1902:190:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1415,"nodeType":"Block","src":"2274:106:25","statements":[{"AST":{"nativeSrc":"2336:38:25","nodeType":"YulBlock","src":"2336:38:25","statements":[{"nativeSrc":"2350:14:25","nodeType":"YulAssignment","src":"2350:14:25","value":{"name":"slot","nativeSrc":"2360:4:25","nodeType":"YulIdentifier","src":"2360:4:25"},"variableNames":[{"name":"r.slot","nativeSrc":"2350:6:25","nodeType":"YulIdentifier","src":"2350:6:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1412,"isOffset":false,"isSlot":true,"src":"2350:6:25","suffix":"slot","valueSize":1},{"declaration":1408,"isOffset":false,"isSlot":false,"src":"2360:4:25","valueSize":1}],"id":1414,"nodeType":"InlineAssembly","src":"2327:47:25"}]},"documentation":{"id":1406,"nodeType":"StructuredDocumentation","src":"2098:87:25","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1416,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:25","nodeType":"FunctionDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"slot","nameLocation":"2222:4:25","nodeType":"VariableDeclaration","scope":1416,"src":"2214:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:25"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"r","nameLocation":"2271:1:25","nodeType":"VariableDeclaration","scope":1416,"src":"2251:21:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1380_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1411,"nodeType":"UserDefinedTypeName","pathNode":{"id":1410,"name":"Bytes32Slot","nameLocations":["2251:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":1380,"src":"2251:11:25"},"referencedDeclaration":1380,"src":"2251:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1380_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:25"},"scope":1428,"src":"2190:190:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1426,"nodeType":"Block","src":"2562:106:25","statements":[{"AST":{"nativeSrc":"2624:38:25","nodeType":"YulBlock","src":"2624:38:25","statements":[{"nativeSrc":"2638:14:25","nodeType":"YulAssignment","src":"2638:14:25","value":{"name":"slot","nativeSrc":"2648:4:25","nodeType":"YulIdentifier","src":"2648:4:25"},"variableNames":[{"name":"r.slot","nativeSrc":"2638:6:25","nodeType":"YulIdentifier","src":"2638:6:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1423,"isOffset":false,"isSlot":true,"src":"2638:6:25","suffix":"slot","valueSize":1},{"declaration":1419,"isOffset":false,"isSlot":false,"src":"2648:4:25","valueSize":1}],"id":1425,"nodeType":"InlineAssembly","src":"2615:47:25"}]},"documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"2386:87:25","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1427,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:25","nodeType":"FunctionDefinition","parameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"slot","nameLocation":"2510:4:25","nodeType":"VariableDeclaration","scope":1427,"src":"2502:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1418,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:25"},"returnParameters":{"id":1424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"r","nameLocation":"2559:1:25","nodeType":"VariableDeclaration","scope":1427,"src":"2539:21:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1383_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1422,"nodeType":"UserDefinedTypeName","pathNode":{"id":1421,"name":"Uint256Slot","nameLocations":["2539:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":1383,"src":"2539:11:25"},"referencedDeclaration":1383,"src":"2539:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1383_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:25"},"scope":1428,"src":"2478:190:25","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1429,"src":"1279:1391:25","usedErrors":[],"usedEvents":[]}],"src":"105:2566:25"},"id":25},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[1930]},"id":1931,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1430,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"143:658:26","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":1930,"linearizedBaseContracts":[1930],"name":"MerkleProof","nameLocation":"810:11:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":1451,"nodeType":"Block","src":"1283:57:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1445,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"1313:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1446,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"1320:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1444,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1300:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1448,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"1329:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1443,"id":1450,"nodeType":"Return","src":"1293:40:26"}]},"documentation":{"id":1432,"nodeType":"StructuredDocumentation","src":"828:323:26","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":1452,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:26","nodeType":"FunctionDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"proof","nameLocation":"1198:5:26","nodeType":"VariableDeclaration","scope":1452,"src":"1181:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1433,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1434,"nodeType":"ArrayTypeName","src":"1181:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"root","nameLocation":"1221:4:26","nodeType":"VariableDeclaration","scope":1452,"src":"1213:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1439,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:26","nodeType":"VariableDeclaration","scope":1452,"src":"1235:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:26"},"returnParameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1452,"src":"1277:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1441,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:26"},"scope":1930,"src":"1156:184:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1472,"nodeType":"Block","src":"1578:65:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1466,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"1616:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1467,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"1623:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1465,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"1595:20:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1469,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"1632:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1464,"id":1471,"nodeType":"Return","src":"1588:48:26"}]},"documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"1346:90:26","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":1473,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:26","nodeType":"FunctionDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"proof","nameLocation":"1493:5:26","nodeType":"VariableDeclaration","scope":1473,"src":"1474:24:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1455,"nodeType":"ArrayTypeName","src":"1474:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"root","nameLocation":"1516:4:26","nodeType":"VariableDeclaration","scope":1473,"src":"1508:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:26","nodeType":"VariableDeclaration","scope":1473,"src":"1530:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:26"},"returnParameters":{"id":1464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1473,"src":"1572:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1462,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:26"},"scope":1930,"src":"1441:202:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1512,"nodeType":"Block","src":"2086:198:26","statements":[{"assignments":[1485],"declarations":[{"constant":false,"id":1485,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:26","nodeType":"VariableDeclaration","scope":1512,"src":"2096:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1487,"initialValue":{"id":1486,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"2119:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:26"},{"body":{"id":1508,"nodeType":"Block","src":"2176:73:26","statements":[{"expression":{"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1499,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"2190:12:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1501,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"2215:12:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1502,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"2229:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1504,"indexExpression":{"id":1503,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"2235:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1500,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"2205:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1507,"nodeType":"ExpressionStatement","src":"2190:48:26"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1492,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"2153:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1493,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"2157:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:26","memberName":"length","nodeType":"MemberAccess","src":"2157:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1509,"initializationExpression":{"assignments":[1489],"declarations":[{"constant":false,"id":1489,"mutability":"mutable","name":"i","nameLocation":"2146:1:26","nodeType":"VariableDeclaration","scope":1509,"src":"2138:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1488,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1491,"initialValue":{"hexValue":"30","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:26","subExpression":{"id":1496,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"2171:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1498,"nodeType":"ExpressionStatement","src":"2171:3:26"},"nodeType":"ForStatement","src":"2133:116:26"},{"expression":{"id":1510,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"2265:12:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1483,"id":1511,"nodeType":"Return","src":"2258:19:26"}]},"documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"1649:340:26","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":1513,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:26","nodeType":"FunctionDefinition","parameters":{"id":1480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1477,"mutability":"mutable","name":"proof","nameLocation":"2033:5:26","nodeType":"VariableDeclaration","scope":1513,"src":"2016:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1476,"nodeType":"ArrayTypeName","src":"2016:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1479,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:26","nodeType":"VariableDeclaration","scope":1513,"src":"2040:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1478,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:26"},"returnParameters":{"id":1483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1513,"src":"2077:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:26"},"scope":1930,"src":"1994:290:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1552,"nodeType":"Block","src":"2493:198:26","statements":[{"assignments":[1525],"declarations":[{"constant":false,"id":1525,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:26","nodeType":"VariableDeclaration","scope":1552,"src":"2503:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1527,"initialValue":{"id":1526,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"2526:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:26"},{"body":{"id":1548,"nodeType":"Block","src":"2583:73:26","statements":[{"expression":{"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1539,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"2597:12:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1541,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"2622:12:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1542,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"2636:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1544,"indexExpression":{"id":1543,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"2642:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1540,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"2612:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1547,"nodeType":"ExpressionStatement","src":"2597:48:26"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"2560:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1533,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"2564:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:26","memberName":"length","nodeType":"MemberAccess","src":"2564:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1549,"initializationExpression":{"assignments":[1529],"declarations":[{"constant":false,"id":1529,"mutability":"mutable","name":"i","nameLocation":"2553:1:26","nodeType":"VariableDeclaration","scope":1549,"src":"2545:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1528,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1531,"initialValue":{"hexValue":"30","id":1530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:26","subExpression":{"id":1536,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"2578:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1538,"nodeType":"ExpressionStatement","src":"2578:3:26"},"nodeType":"ForStatement","src":"2540:116:26"},{"expression":{"id":1550,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"2672:12:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1523,"id":1551,"nodeType":"Return","src":"2665:19:26"}]},"documentation":{"id":1514,"nodeType":"StructuredDocumentation","src":"2290:96:26","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":1553,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:26","nodeType":"FunctionDefinition","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1517,"mutability":"mutable","name":"proof","nameLocation":"2440:5:26","nodeType":"VariableDeclaration","scope":1553,"src":"2421:24:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1516,"nodeType":"ArrayTypeName","src":"2421:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1519,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:26","nodeType":"VariableDeclaration","scope":1553,"src":"2447:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:26"},"returnParameters":{"id":1523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1553,"src":"2484:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:26"},"scope":1930,"src":"2391:300:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1578,"nodeType":"Block","src":"3234:76:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1571,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"3269:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1572,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3276:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1573,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"3288:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1570,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"3251:17:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1575,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"3299:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1569,"id":1577,"nodeType":"Return","src":"3244:59:26"}]},"documentation":{"id":1554,"nodeType":"StructuredDocumentation","src":"2697:350:26","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1579,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:26","nodeType":"FunctionDefinition","parameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"proof","nameLocation":"3104:5:26","nodeType":"VariableDeclaration","scope":1579,"src":"3087:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1556,"nodeType":"ArrayTypeName","src":"3087:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1560,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:26","nodeType":"VariableDeclaration","scope":1579,"src":"3119:24:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1558,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1559,"nodeType":"ArrayTypeName","src":"3119:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1562,"mutability":"mutable","name":"root","nameLocation":"3161:4:26","nodeType":"VariableDeclaration","scope":1579,"src":"3153:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1565,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:26","nodeType":"VariableDeclaration","scope":1579,"src":"3175:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1564,"nodeType":"ArrayTypeName","src":"3175:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:26"},"returnParameters":{"id":1569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"3228:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1567,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:26"},"scope":1930,"src":"3052:258:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1604,"nodeType":"Block","src":"3715:84:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1597,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"3758:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1598,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"3765:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1599,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"3777:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1596,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"3732:25:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1601,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"3788:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1595,"id":1603,"nodeType":"Return","src":"3725:67:26"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"3316:200:26","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1605,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:26","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"proof","nameLocation":"3583:5:26","nodeType":"VariableDeclaration","scope":1605,"src":"3564:24:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1581,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1582,"nodeType":"ArrayTypeName","src":"3564:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:26","nodeType":"VariableDeclaration","scope":1605,"src":"3598:26:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1584,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1585,"nodeType":"ArrayTypeName","src":"3598:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1588,"mutability":"mutable","name":"root","nameLocation":"3642:4:26","nodeType":"VariableDeclaration","scope":1605,"src":"3634:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1591,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:26","nodeType":"VariableDeclaration","scope":1605,"src":"3656:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1590,"nodeType":"ArrayTypeName","src":"3656:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:26"},"returnParameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1605,"src":"3709:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1593,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:26"},"scope":1930,"src":"3521:278:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1749,"nodeType":"Block","src":"4753:1860:26","statements":[{"assignments":[1621],"declarations":[{"constant":false,"id":1621,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:26","nodeType":"VariableDeclaration","scope":1749,"src":"5136:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1620,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1624,"initialValue":{"expression":{"id":1622,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"5156:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:26","memberName":"length","nodeType":"MemberAccess","src":"5156:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:26"},{"assignments":[1626],"declarations":[{"constant":false,"id":1626,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:26","nodeType":"VariableDeclaration","scope":1749,"src":"5179:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1625,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1629,"initialValue":{"expression":{"id":1627,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"5201:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:26","memberName":"length","nodeType":"MemberAccess","src":"5201:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1631,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"5270:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1632,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"5282:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:26","memberName":"length","nodeType":"MemberAccess","src":"5282:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1637,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"5302:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1630,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1641,"nodeType":"ExpressionStatement","src":"5262:87:26"},{"assignments":[1646],"declarations":[{"constant":false,"id":1646,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:26","nodeType":"VariableDeclaration","scope":1749,"src":"5594:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1645,"nodeType":"ArrayTypeName","src":"5594:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1652,"initialValue":{"arguments":[{"id":1650,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"5634:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1648,"nodeType":"ArrayTypeName","src":"5624:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:26"},{"assignments":[1654],"declarations":[{"constant":false,"id":1654,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:26","nodeType":"VariableDeclaration","scope":1749,"src":"5656:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1656,"initialValue":{"hexValue":"30","id":1655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:26"},{"assignments":[1658],"declarations":[{"constant":false,"id":1658,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:26","nodeType":"VariableDeclaration","scope":1749,"src":"5685:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1657,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1660,"initialValue":{"hexValue":"30","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:26"},{"assignments":[1662],"declarations":[{"constant":false,"id":1662,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:26","nodeType":"VariableDeclaration","scope":1749,"src":"5714:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1661,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1664,"initialValue":{"hexValue":"30","id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:26"},{"body":{"id":1722,"nodeType":"Block","src":"6151:258:26","statements":[{"assignments":[1676],"declarations":[{"constant":false,"id":1676,"mutability":"mutable","name":"a","nameLocation":"6173:1:26","nodeType":"VariableDeclaration","scope":1722,"src":"6165:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1689,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1677,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"6177:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1678,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"6187:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1684,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"6219:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1687,"indexExpression":{"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:26","subExpression":{"id":1685,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"6226:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:26","trueExpression":{"baseExpression":{"id":1680,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"6199:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1683,"indexExpression":{"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:26","subExpression":{"id":1681,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"6206:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:26"},{"assignments":[1691],"declarations":[{"constant":false,"id":1691,"mutability":"mutable","name":"b","nameLocation":"6258:1:26","nodeType":"VariableDeclaration","scope":1722,"src":"6250:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1690,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1712,"initialValue":{"condition":{"baseExpression":{"id":1692,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"6262:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1694,"indexExpression":{"id":1693,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"6273:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1707,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"6340:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1710,"indexExpression":{"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:26","subExpression":{"id":1708,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"6346:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:26","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1695,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"6278:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1696,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"6288:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1702,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"6320:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1705,"indexExpression":{"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:26","subExpression":{"id":1703,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"6327:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:26","trueExpression":{"baseExpression":{"id":1698,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"6300:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1701,"indexExpression":{"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:26","subExpression":{"id":1699,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"6307:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:26"},{"expression":{"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1713,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"6371:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1715,"indexExpression":{"id":1714,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"6378:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1717,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"6393:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1718,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"6396:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1716,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"6383:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1721,"nodeType":"ExpressionStatement","src":"6371:27:26"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1669,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"6129:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1670,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6133:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1723,"initializationExpression":{"assignments":[1666],"declarations":[{"constant":false,"id":1666,"mutability":"mutable","name":"i","nameLocation":"6122:1:26","nodeType":"VariableDeclaration","scope":1723,"src":"6114:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1665,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1668,"initialValue":{"hexValue":"30","id":1667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:26","subExpression":{"id":1672,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"6146:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1674,"nodeType":"ExpressionStatement","src":"6146:3:26"},"nodeType":"ForStatement","src":"6109:300:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1724,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6423:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1734,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"6505:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1746,"nodeType":"Block","src":"6567:40:26","statements":[{"expression":{"baseExpression":{"id":1742,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"6588:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1744,"indexExpression":{"hexValue":"30","id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1619,"id":1745,"nodeType":"Return","src":"6581:15:26"}]},"id":1747,"nodeType":"IfStatement","src":"6501:106:26","trueBody":{"id":1741,"nodeType":"Block","src":"6520:41:26","statements":[{"expression":{"baseExpression":{"id":1737,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"6541:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1739,"indexExpression":{"hexValue":"30","id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1619,"id":1740,"nodeType":"Return","src":"6534:16:26"}]}},"id":1748,"nodeType":"IfStatement","src":"6419:188:26","trueBody":{"id":1733,"nodeType":"Block","src":"6440:55:26","statements":[{"expression":{"baseExpression":{"id":1727,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"6461:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1731,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1728,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6468:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1619,"id":1732,"nodeType":"Return","src":"6454:30:26"}]}}]},"documentation":{"id":1606,"nodeType":"StructuredDocumentation","src":"3805:768:26","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":1750,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:26","nodeType":"FunctionDefinition","parameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"proof","nameLocation":"4631:5:26","nodeType":"VariableDeclaration","scope":1750,"src":"4614:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1608,"nodeType":"ArrayTypeName","src":"4614:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:26","nodeType":"VariableDeclaration","scope":1750,"src":"4646:24:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1610,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1611,"nodeType":"ArrayTypeName","src":"4646:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:26","nodeType":"VariableDeclaration","scope":1750,"src":"4680:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1614,"nodeType":"ArrayTypeName","src":"4680:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:26"},"returnParameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:26","nodeType":"VariableDeclaration","scope":1750,"src":"4733:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:26"},"scope":1930,"src":"4578:2035:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1894,"nodeType":"Block","src":"7013:1860:26","statements":[{"assignments":[1766],"declarations":[{"constant":false,"id":1766,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:26","nodeType":"VariableDeclaration","scope":1894,"src":"7396:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1769,"initialValue":{"expression":{"id":1767,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"7416:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:26","memberName":"length","nodeType":"MemberAccess","src":"7416:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:26"},{"assignments":[1771],"declarations":[{"constant":false,"id":1771,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:26","nodeType":"VariableDeclaration","scope":1894,"src":"7439:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1770,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1774,"initialValue":{"expression":{"id":1772,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"7461:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:26","memberName":"length","nodeType":"MemberAccess","src":"7461:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1776,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"7530:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1777,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"7542:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:26","memberName":"length","nodeType":"MemberAccess","src":"7542:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1782,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"7562:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1775,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1786,"nodeType":"ExpressionStatement","src":"7522:87:26"},{"assignments":[1791],"declarations":[{"constant":false,"id":1791,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:26","nodeType":"VariableDeclaration","scope":1894,"src":"7854:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1790,"nodeType":"ArrayTypeName","src":"7854:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1797,"initialValue":{"arguments":[{"id":1795,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"7894:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1793,"nodeType":"ArrayTypeName","src":"7884:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:26"},{"assignments":[1799],"declarations":[{"constant":false,"id":1799,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:26","nodeType":"VariableDeclaration","scope":1894,"src":"7916:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1798,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1801,"initialValue":{"hexValue":"30","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:26"},{"assignments":[1803],"declarations":[{"constant":false,"id":1803,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:26","nodeType":"VariableDeclaration","scope":1894,"src":"7945:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1805,"initialValue":{"hexValue":"30","id":1804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:26"},{"assignments":[1807],"declarations":[{"constant":false,"id":1807,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:26","nodeType":"VariableDeclaration","scope":1894,"src":"7974:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1806,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1809,"initialValue":{"hexValue":"30","id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:26"},{"body":{"id":1867,"nodeType":"Block","src":"8411:258:26","statements":[{"assignments":[1821],"declarations":[{"constant":false,"id":1821,"mutability":"mutable","name":"a","nameLocation":"8433:1:26","nodeType":"VariableDeclaration","scope":1867,"src":"8425:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1834,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1822,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8437:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1823,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"8447:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1829,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"8479:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1832,"indexExpression":{"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:26","subExpression":{"id":1830,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"8486:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:26","trueExpression":{"baseExpression":{"id":1825,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"8459:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1828,"indexExpression":{"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:26","subExpression":{"id":1826,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8466:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:26"},{"assignments":[1836],"declarations":[{"constant":false,"id":1836,"mutability":"mutable","name":"b","nameLocation":"8518:1:26","nodeType":"VariableDeclaration","scope":1867,"src":"8510:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1835,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1857,"initialValue":{"condition":{"baseExpression":{"id":1837,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"8522:10:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1839,"indexExpression":{"id":1838,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"8533:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1852,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8600:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1855,"indexExpression":{"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:26","subExpression":{"id":1853,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"8606:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:26","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1840,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8538:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1841,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"8548:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1847,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"8580:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1850,"indexExpression":{"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:26","subExpression":{"id":1848,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"8587:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:26","trueExpression":{"baseExpression":{"id":1843,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"8560:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1846,"indexExpression":{"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:26","subExpression":{"id":1844,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8567:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:26"},{"expression":{"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1858,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"8631:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1860,"indexExpression":{"id":1859,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"8638:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1862,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"8653:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1863,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"8656:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1861,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"8643:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1866,"nodeType":"ExpressionStatement","src":"8631:27:26"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1814,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"8389:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1815,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"8393:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1868,"initializationExpression":{"assignments":[1811],"declarations":[{"constant":false,"id":1811,"mutability":"mutable","name":"i","nameLocation":"8382:1:26","nodeType":"VariableDeclaration","scope":1868,"src":"8374:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1813,"initialValue":{"hexValue":"30","id":1812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:26","subExpression":{"id":1817,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"8406:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1819,"nodeType":"ExpressionStatement","src":"8406:3:26"},"nodeType":"ForStatement","src":"8369:300:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1869,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"8683:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1879,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"8765:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1891,"nodeType":"Block","src":"8827:40:26","statements":[{"expression":{"baseExpression":{"id":1887,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8848:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1889,"indexExpression":{"hexValue":"30","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1764,"id":1890,"nodeType":"Return","src":"8841:15:26"}]},"id":1892,"nodeType":"IfStatement","src":"8761:106:26","trueBody":{"id":1886,"nodeType":"Block","src":"8780:41:26","statements":[{"expression":{"baseExpression":{"id":1882,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"8801:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1884,"indexExpression":{"hexValue":"30","id":1883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1764,"id":1885,"nodeType":"Return","src":"8794:16:26"}]}},"id":1893,"nodeType":"IfStatement","src":"8679:188:26","trueBody":{"id":1878,"nodeType":"Block","src":"8700:55:26","statements":[{"expression":{"baseExpression":{"id":1872,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"8721:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1876,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"8728:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1764,"id":1877,"nodeType":"Return","src":"8714:30:26"}]}}]},"documentation":{"id":1751,"nodeType":"StructuredDocumentation","src":"6619:202:26","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1895,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:26","nodeType":"FunctionDefinition","parameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"proof","nameLocation":"6889:5:26","nodeType":"VariableDeclaration","scope":1895,"src":"6870:24:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1753,"nodeType":"ArrayTypeName","src":"6870:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1757,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:26","nodeType":"VariableDeclaration","scope":1895,"src":"6904:26:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1755,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1756,"nodeType":"ArrayTypeName","src":"6904:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:26","nodeType":"VariableDeclaration","scope":1895,"src":"6940:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1758,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1759,"nodeType":"ArrayTypeName","src":"6940:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:26"},"returnParameters":{"id":1764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1763,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:26","nodeType":"VariableDeclaration","scope":1895,"src":"6993:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1762,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:26"},"scope":1930,"src":"6826:2047:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1917,"nodeType":"Block","src":"8951:75:26","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1904,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"8968:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1905,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"8972:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1912,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"9014:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1913,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"9017:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1911,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"8999:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:26","trueExpression":{"arguments":[{"id":1908,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"8991:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1909,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"8994:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1907,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"8976:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1903,"id":1916,"nodeType":"Return","src":"8961:58:26"}]},"id":1918,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:26","nodeType":"FunctionDefinition","parameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"mutability":"mutable","name":"a","nameLocation":"8906:1:26","nodeType":"VariableDeclaration","scope":1918,"src":"8898:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1896,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1899,"mutability":"mutable","name":"b","nameLocation":"8917:1:26","nodeType":"VariableDeclaration","scope":1918,"src":"8909:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1898,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:26"},"returnParameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1918,"src":"8942:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:26"},"scope":1930,"src":"8879:147:26","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1928,"nodeType":"Block","src":"9115:178:26","statements":[{"AST":{"nativeSrc":"9177:110:26","nodeType":"YulBlock","src":"9177:110:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:26","nodeType":"YulLiteral","src":"9198:4:26","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:26","nodeType":"YulIdentifier","src":"9204:1:26"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:26","nodeType":"YulIdentifier","src":"9191:6:26"},"nativeSrc":"9191:15:26","nodeType":"YulFunctionCall","src":"9191:15:26"},"nativeSrc":"9191:15:26","nodeType":"YulExpressionStatement","src":"9191:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:26","nodeType":"YulLiteral","src":"9226:4:26","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:26","nodeType":"YulIdentifier","src":"9232:1:26"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:26","nodeType":"YulIdentifier","src":"9219:6:26"},"nativeSrc":"9219:15:26","nodeType":"YulFunctionCall","src":"9219:15:26"},"nativeSrc":"9219:15:26","nodeType":"YulExpressionStatement","src":"9219:15:26"},{"nativeSrc":"9247:30:26","nodeType":"YulAssignment","src":"9247:30:26","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:26","nodeType":"YulLiteral","src":"9266:4:26","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:26","nodeType":"YulLiteral","src":"9272:4:26","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:26","nodeType":"YulIdentifier","src":"9256:9:26"},"nativeSrc":"9256:21:26","nodeType":"YulFunctionCall","src":"9256:21:26"},"variableNames":[{"name":"value","nativeSrc":"9247:5:26","nodeType":"YulIdentifier","src":"9247:5:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1920,"isOffset":false,"isSlot":false,"src":"9204:1:26","valueSize":1},{"declaration":1922,"isOffset":false,"isSlot":false,"src":"9232:1:26","valueSize":1},{"declaration":1925,"isOffset":false,"isSlot":false,"src":"9247:5:26","valueSize":1}],"id":1927,"nodeType":"InlineAssembly","src":"9168:119:26"}]},"id":1929,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:26","nodeType":"FunctionDefinition","parameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"a","nameLocation":"9064:1:26","nodeType":"VariableDeclaration","scope":1929,"src":"9056:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"b","nameLocation":"9075:1:26","nodeType":"VariableDeclaration","scope":1929,"src":"9067:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:26"},"returnParameters":{"id":1926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1925,"mutability":"mutable","name":"value","nameLocation":"9108:5:26","nodeType":"VariableDeclaration","scope":1929,"src":"9100:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1924,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:26"},"scope":1930,"src":"9032:261:26","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1931,"src":"802:8493:26","usedErrors":[],"usedEvents":[]}],"src":"118:9178:26"},"id":26},"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol":{"ast":{"absolutePath":"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol","exportedSymbols":{"AnichessOrbsBurnPool":[2591],"Context":[1368],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ERC1155TokenReceiver":[847],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155":[922],"IERC1155Burnable":[948],"IForwarderRegistry":[727]},"id":2592,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1932,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","id":1934,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":923,"src":"57:101:27","symbolAliases":[{"foreign":{"id":1933,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"65:8:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","id":1936,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":848,"src":"159:114:27","symbolAliases":[{"foreign":{"id":1935,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"167:20:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":1938,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":949,"src":"274:117:27","symbolAliases":[{"foreign":{"id":1937,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"282:16:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":1940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":582,"src":"392:115:27","symbolAliases":[{"foreign":{"id":1939,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"400:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":1942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":33,"src":"508:101:27","symbolAliases":[{"foreign":{"id":1941,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"516:17:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":1944,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":385,"src":"610:125:27","symbolAliases":[{"foreign":{"id":1943,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"618:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":1946,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":702,"src":"736:128:27","symbolAliases":[{"foreign":{"id":1945,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"744:28:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":1948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":728,"src":"865:114:27","symbolAliases":[{"foreign":{"id":1947,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"873:18:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1950,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2592,"sourceUnit":1369,"src":"980:66:27","symbolAliases":[{"foreign":{"id":1949,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"988:7:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1952,"name":"ForwarderRegistryContext","nameLocations":["1325:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1325:24:27"},"id":1953,"nodeType":"InheritanceSpecifier","src":"1325:24:27"},{"baseName":{"id":1954,"name":"ERC1155TokenReceiver","nameLocations":["1351:20:27"],"nodeType":"IdentifierPath","referencedDeclaration":847,"src":"1351:20:27"},"id":1955,"nodeType":"InheritanceSpecifier","src":"1351:20:27"},{"baseName":{"id":1956,"name":"ContractOwnership","nameLocations":["1373:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1373:17:27"},"id":1957,"nodeType":"InheritanceSpecifier","src":"1373:17:27"}],"canonicalName":"AnichessOrbsBurnPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"1048:243:27","text":" @title Anichess ERC1155 Merkle Claim Contract\n @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n @dev entitled to the rewards without revealing the entire list of recipients."},"fullyImplemented":true,"id":2591,"linearizedBaseContracts":[2591,32,847,414,431,80,1368,126,1016,581,713,701],"name":"AnichessOrbsBurnPool","nameLocation":"1301:20:27","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1961,"libraryName":{"id":1958,"name":"ContractOwnershipStorage","nameLocations":["1403:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1403:24:27"},"nodeType":"UsingForDirective","src":"1397:67:27","typeName":{"id":1960,"nodeType":"UserDefinedTypeName","pathNode":{"id":1959,"name":"ContractOwnershipStorage.Layout","nameLocations":["1432:24:27","1457:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1432:31:27"},"referencedDeclaration":157,"src":"1432:31:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"functionSelector":"491bde66","id":1963,"mutability":"immutable","name":"INITIAL_TIME","nameLocation":"1495:12:27","nodeType":"VariableDeclaration","scope":2591,"src":"1470:37:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"1470:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"cd421fbf","id":1965,"mutability":"immutable","name":"CYCLE_DURATION","nameLocation":"1538:14:27","nodeType":"VariableDeclaration","scope":2591,"src":"1513:39:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"1513:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"043063bc","id":1967,"mutability":"immutable","name":"MAX_CYCLE","nameLocation":"1605:9:27","nodeType":"VariableDeclaration","scope":2591,"src":"1580:34:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1966,"name":"uint256","nodeType":"ElementaryTypeName","src":"1580:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"039af9eb","id":1970,"mutability":"mutable","name":"tiers","nameLocation":"1638:5:27","nodeType":"VariableDeclaration","scope":2591,"src":"1621:22:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1969,"nodeType":"ArrayTypeName","src":"1621:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"public"},{"constant":false,"functionSelector":"556c448d","id":1973,"mutability":"mutable","name":"tierRewards","nameLocation":"1685:11:27","nodeType":"VariableDeclaration","scope":2591,"src":"1668:28:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"1668:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1972,"nodeType":"ArrayTypeName","src":"1668:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"public"},{"constant":false,"id":1977,"mutability":"mutable","name":"totalAshByCycle","nameLocation":"1731:15:27","nodeType":"VariableDeclaration","scope":2591,"src":"1703:43:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1976,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1974,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1703:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1975,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"functionSelector":"fa9fdc6a","id":1983,"mutability":"mutable","name":"userAshByCycle","nameLocation":"1807:14:27","nodeType":"VariableDeclaration","scope":2591,"src":"1752:69:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":1982,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1978,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1752:47:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1981,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"1779:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1771:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1980,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"documentation":{"id":1984,"nodeType":"StructuredDocumentation","src":"1907:51:27","text":"@notice The IERC1155Burnable erc1155 contracts."},"functionSelector":"e4860339","id":1988,"mutability":"mutable","name":"tokens","nameLocation":"1995:6:27","nodeType":"VariableDeclaration","scope":2591,"src":"1963:38:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":1987,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1985,"name":"address","nodeType":"ElementaryTypeName","src":"1971:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1963:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1986,"name":"bool","nodeType":"ElementaryTypeName","src":"1982:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1989,"nodeType":"StructuredDocumentation","src":"2007:30:27","text":"@notice The token weights."},"id":1995,"mutability":"mutable","name":"tokenWeights","nameLocation":"2090:12:27","nodeType":"VariableDeclaration","scope":2591,"src":"2042:60:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":1994,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"2050:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2042:47:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1993,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"2069:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2061:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1992,"name":"uint256","nodeType":"ElementaryTypeName","src":"2080:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"anonymous":false,"documentation":{"id":1996,"nodeType":"StructuredDocumentation","src":"2109:48:27","text":"@notice Event emitted when tokens are burnt."},"eventSelector":"dbbe1cdf876fa73ee022a259cac764db805dcc10f143a583201b8c5e97c2573d","id":2014,"name":"TokensBurnt","nameLocation":"2168:11:27","nodeType":"EventDefinition","parameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1998,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"2205:6:27","nodeType":"VariableDeclaration","scope":2014,"src":"2189:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1997,"name":"address","nodeType":"ElementaryTypeName","src":"2189:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2000,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2237:5:27","nodeType":"VariableDeclaration","scope":2014,"src":"2221:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1999,"name":"address","nodeType":"ElementaryTypeName","src":"2221:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2002,"indexed":false,"mutability":"mutable","name":"cycle","nameLocation":"2260:5:27","nodeType":"VariableDeclaration","scope":2014,"src":"2252:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"2252:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2004,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"2283:9:27","nodeType":"VariableDeclaration","scope":2014,"src":"2275:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2003,"name":"uint256","nodeType":"ElementaryTypeName","src":"2275:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2007,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"2312:3:27","nodeType":"VariableDeclaration","scope":2014,"src":"2302:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"2302:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2006,"nodeType":"ArrayTypeName","src":"2302:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2010,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"2335:6:27","nodeType":"VariableDeclaration","scope":2014,"src":"2325:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"2325:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2009,"nodeType":"ArrayTypeName","src":"2325:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2012,"indexed":false,"mutability":"mutable","name":"totalAsh","nameLocation":"2359:8:27","nodeType":"VariableDeclaration","scope":2014,"src":"2351:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2011,"name":"uint256","nodeType":"ElementaryTypeName","src":"2351:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2179:194:27"},"src":"2162:212:27"},{"anonymous":false,"eventSelector":"987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a","id":2022,"name":"Claimed","nameLocation":"2386:7:27","nodeType":"EventDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2016,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"2410:7:27","nodeType":"VariableDeclaration","scope":2022,"src":"2394:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2015,"name":"address","nodeType":"ElementaryTypeName","src":"2394:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2018,"indexed":true,"mutability":"mutable","name":"cycle","nameLocation":"2435:5:27","nodeType":"VariableDeclaration","scope":2022,"src":"2419:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2017,"name":"uint256","nodeType":"ElementaryTypeName","src":"2419:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2020,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2450:6:27","nodeType":"VariableDeclaration","scope":2022,"src":"2442:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"2442:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2393:64:27"},"src":"2380:78:27"},{"documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"2464:54:27","text":"@notice Error thrown when the token ID is invalid."},"errorSelector":"1912ea51","id":2029,"name":"InvalidTokenId","nameLocation":"2529:14:27","nodeType":"ErrorDefinition","parameters":{"id":2028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2025,"mutability":"mutable","name":"token","nameLocation":"2552:5:27","nodeType":"VariableDeclaration","scope":2029,"src":"2544:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2024,"name":"address","nodeType":"ElementaryTypeName","src":"2544:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2027,"mutability":"mutable","name":"tokenId","nameLocation":"2567:7:27","nodeType":"VariableDeclaration","scope":2029,"src":"2559:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"2559:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2543:32:27"},"src":"2523:53:27"},{"documentation":{"id":2030,"nodeType":"StructuredDocumentation","src":"2582:65:27","text":"@notice Error thrown when the array lengths are inconsistent."},"errorSelector":"35e83ac3","id":2032,"name":"InconsistentArrays","nameLocation":"2658:18:27","nodeType":"ErrorDefinition","parameters":{"id":2031,"nodeType":"ParameterList","parameters":[],"src":"2676:2:27"},"src":"2652:27:27"},{"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"2685:54:27","text":"@notice Error thrown when the tiers are incorrect."},"errorSelector":"7bd3bbea","id":2035,"name":"IncorrectTiers","nameLocation":"2750:14:27","nodeType":"ErrorDefinition","parameters":{"id":2034,"nodeType":"ParameterList","parameters":[],"src":"2764:2:27"},"src":"2744:23:27"},{"documentation":{"id":2036,"nodeType":"StructuredDocumentation","src":"2773:56:27","text":"@notice Error thrown when the token is not approved."},"errorSelector":"c1ab6dc1","id":2038,"name":"InvalidToken","nameLocation":"2840:12:27","nodeType":"ErrorDefinition","parameters":{"id":2037,"nodeType":"ParameterList","parameters":[],"src":"2852:2:27"},"src":"2834:21:27"},{"documentation":{"id":2039,"nodeType":"StructuredDocumentation","src":"2861:61:27","text":"@notice Error throw when the function is not implemented."},"errorSelector":"d6234725","id":2041,"name":"NotImplemented","nameLocation":"2933:14:27","nodeType":"ErrorDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[],"src":"2947:2:27"},"src":"2927:23:27"},{"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"2956:51:27","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"764e560f","id":2046,"name":"InvalidCycle","nameLocation":"3018:12:27","nodeType":"ErrorDefinition","parameters":{"id":2045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"cycle","nameLocation":"3039:5:27","nodeType":"VariableDeclaration","scope":2046,"src":"3031:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2043,"name":"uint256","nodeType":"ElementaryTypeName","src":"3031:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3030:15:27"},"src":"3012:34:27"},{"body":{"id":2107,"nodeType":"Block","src":"4095:211:27","statements":[{"expression":{"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2084,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"4105:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2085,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"4120:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4105:26:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2087,"nodeType":"ExpressionStatement","src":"4105:26:27"},{"expression":{"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2088,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"4141:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2089,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"4158:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4141:30:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2091,"nodeType":"ExpressionStatement","src":"4141:30:27"},{"expression":{"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2092,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"4181:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2093,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"4193:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4181:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2095,"nodeType":"ExpressionStatement","src":"4181:20:27"},{"expression":{"arguments":[{"id":2097,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"4231:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},{"id":2098,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"4240:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},{"id":2099,"name":"weights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"4250:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"},{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"},{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}],"id":2096,"name":"_setApprovedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"4212:18:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr_$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$_t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (contract IERC1155Burnable[] memory,uint256[] memory[] memory,uint256[] memory[] memory)"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4212:46:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2101,"nodeType":"ExpressionStatement","src":"4212:46:27"},{"expression":{"arguments":[{"id":2103,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"4278:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2104,"name":"_tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"4286:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":2102,"name":"_setTiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"4268:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256[] memory,uint256[] memory)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4268:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2106,"nodeType":"ExpressionStatement","src":"4268:31:27"}]},"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"3084:594:27","text":" @notice Constructor for the ERC1155TokenBurn contract.\n @param initialTime The initial time of the contract.\n @param cycleDuration The duration of each cycle.\n @param maxCycle The maximum cycle.\n @param _tokens The list of IERC1155Burnable tokens to be approved.\n @param tokenIds The list of token IDs for each token.\n @param weights The list of weights for each token ID.\n @param _tiers The list of tiers.\n @param _tierRewards The list of rewards for each tier.\n @param forwarderRegistry The forwarder registry contract."},"id":2108,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2077,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"4046:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":2078,"kind":"baseConstructorSpecifier","modifierName":{"id":2076,"name":"ForwarderRegistryContext","nameLocations":["4021:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"4021:24:27"},"nodeType":"ModifierInvocation","src":"4021:43:27"},{"arguments":[{"expression":{"id":2080,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4083:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4087:6:27","memberName":"sender","nodeType":"MemberAccess","src":"4083:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2082,"kind":"baseConstructorSpecifier","modifierName":{"id":2079,"name":"ContractOwnership","nameLocations":["4065:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"4065:17:27"},"nodeType":"ModifierInvocation","src":"4065:29:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"mutability":"mutable","name":"initialTime","nameLocation":"3712:11:27","nodeType":"VariableDeclaration","scope":2108,"src":"3704:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"3704:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2051,"mutability":"mutable","name":"cycleDuration","nameLocation":"3741:13:27","nodeType":"VariableDeclaration","scope":2108,"src":"3733:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"3733:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2053,"mutability":"mutable","name":"maxCycle","nameLocation":"3772:8:27","nodeType":"VariableDeclaration","scope":2108,"src":"3764:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2052,"name":"uint256","nodeType":"ElementaryTypeName","src":"3764:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"_tokens","nameLocation":"3816:7:27","nodeType":"VariableDeclaration","scope":2108,"src":"3790:33:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[]"},"typeName":{"baseType":{"id":2055,"nodeType":"UserDefinedTypeName","pathNode":{"id":2054,"name":"IERC1155Burnable","nameLocations":["3790:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"3790:16:27"},"referencedDeclaration":948,"src":"3790:16:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2056,"nodeType":"ArrayTypeName","src":"3790:18:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_storage_ptr","typeString":"contract IERC1155Burnable[]"}},"visibility":"internal"},{"constant":false,"id":2061,"mutability":"mutable","name":"tokenIds","nameLocation":"3852:8:27","nodeType":"VariableDeclaration","scope":2108,"src":"3833:27:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2058,"name":"uint256","nodeType":"ElementaryTypeName","src":"3833:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2059,"nodeType":"ArrayTypeName","src":"3833:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2060,"nodeType":"ArrayTypeName","src":"3833:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"weights","nameLocation":"3889:7:27","nodeType":"VariableDeclaration","scope":2108,"src":"3870:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"3870:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2063,"nodeType":"ArrayTypeName","src":"3870:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2064,"nodeType":"ArrayTypeName","src":"3870:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"},{"constant":false,"id":2068,"mutability":"mutable","name":"_tiers","nameLocation":"3923:6:27","nodeType":"VariableDeclaration","scope":2108,"src":"3906:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"3906:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2067,"nodeType":"ArrayTypeName","src":"3906:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2071,"mutability":"mutable","name":"_tierRewards","nameLocation":"3956:12:27","nodeType":"VariableDeclaration","scope":2108,"src":"3939:29:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2069,"name":"uint256","nodeType":"ElementaryTypeName","src":"3939:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2070,"nodeType":"ArrayTypeName","src":"3939:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2074,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"3997:17:27","nodeType":"VariableDeclaration","scope":2108,"src":"3978:36:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":2073,"nodeType":"UserDefinedTypeName","pathNode":{"id":2072,"name":"IForwarderRegistry","nameLocations":["3978:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"3978:18:27"},"referencedDeclaration":727,"src":"3978:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"3694:326:27"},"returnParameters":{"id":2083,"nodeType":"ParameterList","parameters":[],"src":"4095:0:27"},"scope":2591,"src":"3683:623:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2214,"nodeType":"Block","src":"4693:572:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2124,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"4707:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4715:6:27","memberName":"length","nodeType":"MemberAccess","src":"4707:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2126,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"4725:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4734:6:27","memberName":"length","nodeType":"MemberAccess","src":"4725:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4707:33:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2129,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"4744:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4752:6:27","memberName":"length","nodeType":"MemberAccess","src":"4744:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2131,"name":"weights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"4762:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4770:6:27","memberName":"length","nodeType":"MemberAccess","src":"4762:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4744:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4707:69:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2139,"nodeType":"IfStatement","src":"4703:127:27","trueBody":{"id":2138,"nodeType":"Block","src":"4778:52:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2135,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"4799:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4799:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2137,"nodeType":"RevertStatement","src":"4792:27:27"}]}},{"body":{"id":2212,"nodeType":"Block","src":"4920:339:27","statements":[{"expression":{"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2151,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"4934:6:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2158,"indexExpression":{"arguments":[{"baseExpression":{"id":2154,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"4949:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},"id":2156,"indexExpression":{"id":2155,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"4957:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4949:10:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":2153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4941:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2152,"name":"address","nodeType":"ElementaryTypeName","src":"4941:7:27","typeDescriptions":{}}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4941:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4934:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4964:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4934:34:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2161,"nodeType":"ExpressionStatement","src":"4934:34:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2162,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"4987:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},"id":2164,"indexExpression":{"id":2163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"4996:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4987:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4999:6:27","memberName":"length","nodeType":"MemberAccess","src":"4987:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"baseExpression":{"id":2166,"name":"weights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"5009:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},"id":2168,"indexExpression":{"id":2167,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"5017:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5009:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5020:6:27","memberName":"length","nodeType":"MemberAccess","src":"5009:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4987:39:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2175,"nodeType":"IfStatement","src":"4983:105:27","trueBody":{"id":2174,"nodeType":"Block","src":"5028:60:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2171,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5053:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5053:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2173,"nodeType":"RevertStatement","src":"5046:27:27"}]}},{"body":{"id":2210,"nodeType":"Block","src":"5151:98:27","statements":[{"expression":{"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2189,"name":"tokenWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"5169:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2201,"indexExpression":{"arguments":[{"baseExpression":{"id":2192,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"5190:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},"id":2194,"indexExpression":{"id":2193,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"5198:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5190:10:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":2191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5182:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2190,"name":"address","nodeType":"ElementaryTypeName","src":"5182:7:27","typeDescriptions":{}}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5182:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5169:33:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2202,"indexExpression":{"baseExpression":{"baseExpression":{"id":2196,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"5203:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},"id":2198,"indexExpression":{"id":2197,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"5212:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5203:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2200,"indexExpression":{"id":2199,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"5215:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5203:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5169:49:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":2203,"name":"weights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"5221:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},"id":2205,"indexExpression":{"id":2204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"5229:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5221:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2207,"indexExpression":{"id":2206,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"5232:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5221:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5169:65:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2209,"nodeType":"ExpressionStatement","src":"5169:65:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"5122:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":2181,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"5126:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[] memory[] memory"}},"id":2183,"indexExpression":{"id":2182,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"5135:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5126:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5138:6:27","memberName":"length","nodeType":"MemberAccess","src":"5126:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5122:22:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2211,"initializationExpression":{"assignments":[2177],"declarations":[{"constant":false,"id":2177,"mutability":"mutable","name":"j","nameLocation":"5115:1:27","nodeType":"VariableDeclaration","scope":2211,"src":"5107:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2176,"name":"uint256","nodeType":"ElementaryTypeName","src":"5107:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2179,"initialValue":{"hexValue":"30","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5119:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5107:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5146:3:27","subExpression":{"id":2186,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"5146:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2188,"nodeType":"ExpressionStatement","src":"5146:3:27"},"nodeType":"ForStatement","src":"5102:147:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2144,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"4895:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2145,"name":"_tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"4899:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4907:6:27","memberName":"length","nodeType":"MemberAccess","src":"4899:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4895:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2213,"initializationExpression":{"assignments":[2141],"declarations":[{"constant":false,"id":2141,"mutability":"mutable","name":"i","nameLocation":"4888:1:27","nodeType":"VariableDeclaration","scope":2213,"src":"4880:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2140,"name":"uint256","nodeType":"ElementaryTypeName","src":"4880:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2143,"initialValue":{"hexValue":"30","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4892:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4880:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4915:3:27","subExpression":{"id":2148,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"4915:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2150,"nodeType":"ExpressionStatement","src":"4915:3:27"},"nodeType":"ForStatement","src":"4875:384:27"}]},"documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"4312:247:27","text":" @notice Set the approved tokens.\n @param _tokens The list of IERC1155Burnable tokens to be approved.\n @param tokenIds The list of token IDs for each token.\n @param weights The list of weights for each token ID."},"id":2215,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovedTokens","nameLocation":"4573:18:27","nodeType":"FunctionDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"_tokens","nameLocation":"4618:7:27","nodeType":"VariableDeclaration","scope":2215,"src":"4592:33:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[]"},"typeName":{"baseType":{"id":2111,"nodeType":"UserDefinedTypeName","pathNode":{"id":2110,"name":"IERC1155Burnable","nameLocations":["4592:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"4592:16:27"},"referencedDeclaration":948,"src":"4592:16:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2112,"nodeType":"ArrayTypeName","src":"4592:18:27","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_storage_ptr","typeString":"contract IERC1155Burnable[]"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"tokenIds","nameLocation":"4646:8:27","nodeType":"VariableDeclaration","scope":2215,"src":"4627:27:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"4627:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2115,"nodeType":"ArrayTypeName","src":"4627:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2116,"nodeType":"ArrayTypeName","src":"4627:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"},{"constant":false,"id":2121,"mutability":"mutable","name":"weights","nameLocation":"4675:7:27","nodeType":"VariableDeclaration","scope":2215,"src":"4656:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4656:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2119,"nodeType":"ArrayTypeName","src":"4656:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2120,"nodeType":"ArrayTypeName","src":"4656:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"}],"src":"4591:92:27"},"returnParameters":{"id":2123,"nodeType":"ParameterList","parameters":[],"src":"4693:0:27"},"scope":2591,"src":"4564:701:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2279,"nodeType":"Block","src":"5515:467:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2225,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"5529:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5536:6:27","memberName":"length","nodeType":"MemberAccess","src":"5529:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2227,"name":"_tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"5546:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5559:6:27","memberName":"length","nodeType":"MemberAccess","src":"5546:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5529:36:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2234,"nodeType":"IfStatement","src":"5525:94:27","trueBody":{"id":2233,"nodeType":"Block","src":"5567:52:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2230,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5588:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5588:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2232,"nodeType":"RevertStatement","src":"5581:27:27"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2235,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"5633:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5640:6:27","memberName":"length","nodeType":"MemberAccess","src":"5633:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5650:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5633:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2243,"nodeType":"IfStatement","src":"5629:72:27","trueBody":{"id":2242,"nodeType":"Block","src":"5653:48:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2239,"name":"IncorrectTiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"5674:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5674:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2241,"nodeType":"RevertStatement","src":"5667:23:27"}]}},{"body":{"id":2269,"nodeType":"Block","src":"5805:111:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2255,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"5823:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2257,"indexExpression":{"id":2256,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"5830:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5823:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":2258,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"5835:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2262,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2259,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"5842:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5846:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5842:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5835:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2268,"nodeType":"IfStatement","src":"5819:87:27","trueBody":{"id":2267,"nodeType":"Block","src":"5850:56:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2264,"name":"IncorrectTiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"5875:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5875:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2266,"nodeType":"RevertStatement","src":"5868:23:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2248,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"5781:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2249,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"5785:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5792:6:27","memberName":"length","nodeType":"MemberAccess","src":"5785:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5781:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2270,"initializationExpression":{"assignments":[2245],"declarations":[{"constant":false,"id":2245,"mutability":"mutable","name":"i","nameLocation":"5774:1:27","nodeType":"VariableDeclaration","scope":2270,"src":"5766:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2244,"name":"uint256","nodeType":"ElementaryTypeName","src":"5766:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2247,"initialValue":{"hexValue":"31","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5778:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"5766:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5800:3:27","subExpression":{"id":2252,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"5800:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2254,"nodeType":"ExpressionStatement","src":"5800:3:27"},"nodeType":"ForStatement","src":"5761:155:27"},{"expression":{"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2271,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"5925:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2272,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"5933:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"5925:14:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2274,"nodeType":"ExpressionStatement","src":"5925:14:27"},{"expression":{"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2275,"name":"tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"5949:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2276,"name":"_tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"5963:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"5949:26:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2278,"nodeType":"ExpressionStatement","src":"5949:26:27"}]},"documentation":{"id":2216,"nodeType":"StructuredDocumentation","src":"5271:155:27","text":" @notice Set the tiers and rewards.\n @param _tiers The list of tiers.\n @param _tierRewards The list of rewards for each tier."},"id":2280,"implemented":true,"kind":"function","modifiers":[],"name":"_setTiers","nameLocation":"5440:9:27","nodeType":"FunctionDefinition","parameters":{"id":2223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2219,"mutability":"mutable","name":"_tiers","nameLocation":"5467:6:27","nodeType":"VariableDeclaration","scope":2280,"src":"5450:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2217,"name":"uint256","nodeType":"ElementaryTypeName","src":"5450:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2218,"nodeType":"ArrayTypeName","src":"5450:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2222,"mutability":"mutable","name":"_tierRewards","nameLocation":"5492:12:27","nodeType":"VariableDeclaration","scope":2280,"src":"5475:29:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2220,"name":"uint256","nodeType":"ElementaryTypeName","src":"5475:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2221,"nodeType":"ArrayTypeName","src":"5475:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5449:56:27"},"returnParameters":{"id":2224,"nodeType":"ParameterList","parameters":[],"src":"5515:0:27"},"scope":2591,"src":"5431:551:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[652,1358],"body":{"id":2293,"nodeType":"Block","src":"6147:65:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2289,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"6164:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6193:10:27","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"6164:39:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6164:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2288,"id":2292,"nodeType":"Return","src":"6157:48:27"}]},"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"5988:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2294,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"6046:10:27","nodeType":"FunctionDefinition","overrides":{"id":2285,"nodeType":"OverrideSpecifier","overrides":[{"id":2283,"name":"Context","nameLocations":["6090:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"6090:7:27"},{"id":2284,"name":"ForwarderRegistryContextBase","nameLocations":["6099:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"6099:28:27"}],"src":"6081:47:27"},"parameters":{"id":2282,"nodeType":"ParameterList","parameters":[],"src":"6056:2:27"},"returnParameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2294,"src":"6138:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2286,"name":"address","nodeType":"ElementaryTypeName","src":"6138:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6137:9:27"},"scope":2591,"src":"6037:175:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1367],"body":{"id":2307,"nodeType":"Block","src":"6382:63:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2303,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"6399:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6428:8:27","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"6399:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6399:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2302,"id":2306,"nodeType":"Return","src":"6392:46:27"}]},"documentation":{"id":2295,"nodeType":"StructuredDocumentation","src":"6218:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2308,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"6276:8:27","nodeType":"FunctionDefinition","overrides":{"id":2299,"nodeType":"OverrideSpecifier","overrides":[{"id":2297,"name":"Context","nameLocations":["6318:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"6318:7:27"},{"id":2298,"name":"ForwarderRegistryContextBase","nameLocations":["6327:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"6327:28:27"}],"src":"6309:47:27"},"parameters":{"id":2296,"nodeType":"ParameterList","parameters":[],"src":"6284:2:27"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2308,"src":"6366:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2300,"name":"bytes","nodeType":"ElementaryTypeName","src":"6366:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6365:16:27"},"scope":2591,"src":"6267:178:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2321,"nodeType":"Block","src":"6508:73:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2313,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6526:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6532:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"6526:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2315,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"6544:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6526:30:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6525:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2318,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"6560:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6525:49:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2312,"id":2320,"nodeType":"Return","src":"6518:56:27"}]},"id":2322,"implemented":true,"kind":"function","modifiers":[],"name":"_currentCycle","nameLocation":"6460:13:27","nodeType":"FunctionDefinition","parameters":{"id":2309,"nodeType":"ParameterList","parameters":[],"src":"6473:2:27"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2322,"src":"6499:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2310,"name":"uint256","nodeType":"ElementaryTypeName","src":"6499:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6498:9:27"},"scope":2591,"src":"6451:130:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2389,"nodeType":"Block","src":"6657:405:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"6671:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2330,"name":"_currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2322,"src":"6679:13:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6679:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6671:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2333,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"6698:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2334,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"6706:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6698:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6671:44:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2342,"nodeType":"IfStatement","src":"6667:101:27","trueBody":{"id":2341,"nodeType":"Block","src":"6717:51:27","statements":[{"errorCall":{"arguments":[{"id":2338,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"6751:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2337,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"6738:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6738:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2340,"nodeType":"RevertStatement","src":"6731:26:27"}]}},{"assignments":[2344],"declarations":[{"constant":false,"id":2344,"mutability":"mutable","name":"prevTotalAsh","nameLocation":"6786:12:27","nodeType":"VariableDeclaration","scope":2389,"src":"6778:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2343,"name":"uint256","nodeType":"ElementaryTypeName","src":"6778:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2355,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2345,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"6801:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6810:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6801:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2349,"name":"totalAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1977,"src":"6818:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2353,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2350,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"6834:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6842:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6834:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6818:26:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6801:43:27","trueExpression":{"hexValue":"30","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6814:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6778:66:27"},{"body":{"id":2380,"nodeType":"Block","src":"6899:111:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2367,"name":"prevTotalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"6917:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":2368,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"6932:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2370,"indexExpression":{"id":2369,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"6938:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6932:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6917:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2379,"nodeType":"IfStatement","src":"6913:87:27","trueBody":{"id":2378,"nodeType":"Block","src":"6942:58:27","statements":[{"expression":{"baseExpression":{"id":2372,"name":"tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"6967:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2376,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"6979:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6983:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6979:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6967:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2328,"id":2377,"nodeType":"Return","src":"6960:25:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2360,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"6875:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2361,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"6880:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6886:6:27","memberName":"length","nodeType":"MemberAccess","src":"6880:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6875:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2381,"initializationExpression":{"assignments":[2357],"declarations":[{"constant":false,"id":2357,"mutability":"mutable","name":"i","nameLocation":"6868:1:27","nodeType":"VariableDeclaration","scope":2381,"src":"6860:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"6860:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2359,"initialValue":{"hexValue":"31","id":2358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6872:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"6860:13:27"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6894:3:27","subExpression":{"id":2364,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"6894:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"6894:3:27"},"nodeType":"ForStatement","src":"6855:155:27"},{"expression":{"baseExpression":{"id":2382,"name":"tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"7026:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2387,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2383,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"7038:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7044:6:27","memberName":"length","nodeType":"MemberAccess","src":"7038:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7053:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7038:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7026:29:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2328,"id":2388,"nodeType":"Return","src":"7019:36:27"}]},"functionSelector":"04585ac7","id":2390,"implemented":true,"kind":"function","modifiers":[],"name":"getCycleReward","nameLocation":"6597:14:27","nodeType":"FunctionDefinition","parameters":{"id":2325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2324,"mutability":"mutable","name":"cycle","nameLocation":"6620:5:27","nodeType":"VariableDeclaration","scope":2390,"src":"6612:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2323,"name":"uint256","nodeType":"ElementaryTypeName","src":"6612:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6611:15:27"},"returnParameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2390,"src":"6648:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2326,"name":"uint256","nodeType":"ElementaryTypeName","src":"6648:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6647:9:27"},"scope":2591,"src":"6588:474:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2436,"nodeType":"Block","src":"7154:292:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2399,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"7168:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2400,"name":"_currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2322,"src":"7176:13:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7176:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7168:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"7195:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2404,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"7203:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7195:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7168:44:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2412,"nodeType":"IfStatement","src":"7164:101:27","trueBody":{"id":2411,"nodeType":"Block","src":"7214:51:27","statements":[{"errorCall":{"arguments":[{"id":2408,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"7248:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2407,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7235:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7235:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2410,"nodeType":"RevertStatement","src":"7228:26:27"}]}},{"assignments":[2414],"declarations":[{"constant":false,"id":2414,"mutability":"mutable","name":"cycleReward","nameLocation":"7282:11:27","nodeType":"VariableDeclaration","scope":2436,"src":"7274:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2413,"name":"uint256","nodeType":"ElementaryTypeName","src":"7274:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2418,"initialValue":{"arguments":[{"id":2416,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"7311:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2415,"name":"getCycleReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"7296:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7296:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7274:43:27"},{"assignments":[2420],"declarations":[{"constant":false,"id":2420,"mutability":"mutable","name":"userAsh","nameLocation":"7335:7:27","nodeType":"VariableDeclaration","scope":2436,"src":"7327:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2419,"name":"uint256","nodeType":"ElementaryTypeName","src":"7327:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2426,"initialValue":{"baseExpression":{"baseExpression":{"id":2421,"name":"userAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"7345:14:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2423,"indexExpression":{"id":2422,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"7360:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7345:21:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2425,"indexExpression":{"id":2424,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"7367:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7345:29:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7327:47:27"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2427,"name":"userAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"7392:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2428,"name":"cycleReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"7402:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2430,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7391:23:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"baseExpression":{"id":2431,"name":"totalAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1977,"src":"7417:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2433,"indexExpression":{"id":2432,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"7433:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7417:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7391:48:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2398,"id":2435,"nodeType":"Return","src":"7384:55:27"}]},"functionSelector":"2099920e","id":2437,"implemented":true,"kind":"function","modifiers":[],"name":"getUserReward","nameLocation":"7077:13:27","nodeType":"FunctionDefinition","parameters":{"id":2395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"cycle","nameLocation":"7099:5:27","nodeType":"VariableDeclaration","scope":2437,"src":"7091:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2391,"name":"uint256","nodeType":"ElementaryTypeName","src":"7091:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2394,"mutability":"mutable","name":"wallet","nameLocation":"7114:6:27","nodeType":"VariableDeclaration","scope":2437,"src":"7106:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2393,"name":"address","nodeType":"ElementaryTypeName","src":"7106:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7090:31:27"},"returnParameters":{"id":2398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2437,"src":"7145:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"7145:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7144:9:27"},"scope":2591,"src":"7068:378:27","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[997],"body":{"id":2456,"nodeType":"Block","src":"7571:40:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2453,"name":"NotImplemented","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7588:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7588:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2455,"nodeType":"RevertStatement","src":"7581:23:27"}]},"functionSelector":"f23a6e61","id":2457,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"7461:17:27","nodeType":"FunctionDefinition","overrides":{"id":2449,"nodeType":"OverrideSpecifier","overrides":[],"src":"7545:8:27"},"parameters":{"id":2448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"7479:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2438,"name":"address","nodeType":"ElementaryTypeName","src":"7479:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"7488:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2440,"name":"address","nodeType":"ElementaryTypeName","src":"7488:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"7497:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2442,"name":"uint256","nodeType":"ElementaryTypeName","src":"7497:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"7506:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"7506:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"7515:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2446,"name":"bytes","nodeType":"ElementaryTypeName","src":"7515:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7478:52:27"},"returnParameters":{"id":2452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"7563:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2450,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7563:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7562:8:27"},"scope":2591,"src":"7452:159:27","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[1015],"body":{"id":2589,"nodeType":"Block","src":"7820:973:27","statements":[{"condition":{"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7834:19:27","subExpression":{"baseExpression":{"id":2475,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"7835:6:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2478,"indexExpression":{"expression":{"id":2476,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7842:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7846:6:27","memberName":"sender","nodeType":"MemberAccess","src":"7842:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7835:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2484,"nodeType":"IfStatement","src":"7830:71:27","trueBody":{"id":2483,"nodeType":"Block","src":"7855:46:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2480,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"7876:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7876:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2482,"nodeType":"RevertStatement","src":"7869:21:27"}]}},{"assignments":[2486],"declarations":[{"constant":false,"id":2486,"mutability":"mutable","name":"currentCycle","nameLocation":"7919:12:27","nodeType":"VariableDeclaration","scope":2589,"src":"7911:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2485,"name":"uint256","nodeType":"ElementaryTypeName","src":"7911:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2489,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2487,"name":"_currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2322,"src":"7934:13:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7934:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7911:38:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2490,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"7963:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2491,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"7978:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7963:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2498,"nodeType":"IfStatement","src":"7959:88:27","trueBody":{"id":2497,"nodeType":"Block","src":"7989:58:27","statements":[{"errorCall":{"arguments":[{"id":2494,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"8023:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2493,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"8010:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8010:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2496,"nodeType":"RevertStatement","src":"8003:33:27"}]}},{"assignments":[2500],"declarations":[{"constant":false,"id":2500,"mutability":"mutable","name":"totalAsh","nameLocation":"8065:8:27","nodeType":"VariableDeclaration","scope":2589,"src":"8057:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2499,"name":"uint256","nodeType":"ElementaryTypeName","src":"8057:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2502,"initialValue":{"hexValue":"30","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8076:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8057:20:27"},{"body":{"id":2547,"nodeType":"Block","src":"8163:224:27","statements":[{"assignments":[2515],"declarations":[{"constant":false,"id":2515,"mutability":"mutable","name":"weight","nameLocation":"8185:6:27","nodeType":"VariableDeclaration","scope":2547,"src":"8177:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2514,"name":"uint256","nodeType":"ElementaryTypeName","src":"8177:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2524,"initialValue":{"baseExpression":{"baseExpression":{"id":2516,"name":"tokenWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"8194:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2519,"indexExpression":{"expression":{"id":2517,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8207:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8211:6:27","memberName":"sender","nodeType":"MemberAccess","src":"8207:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8194:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2523,"indexExpression":{"baseExpression":{"id":2520,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"8219:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2522,"indexExpression":{"id":2521,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"8223:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8219:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8194:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8177:49:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2525,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"8244:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8254:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8244:11:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2537,"nodeType":"IfStatement","src":"8240:91:27","trueBody":{"id":2536,"nodeType":"Block","src":"8257:74:27","statements":[{"errorCall":{"arguments":[{"expression":{"id":2529,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8297:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8301:6:27","memberName":"sender","nodeType":"MemberAccess","src":"8297:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2531,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"8309:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2533,"indexExpression":{"id":2532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"8313:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8309:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2528,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"8282:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8282:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2535,"nodeType":"RevertStatement","src":"8275:41:27"}]}},{"expression":{"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2538,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"8344:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2539,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"8357:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2541,"indexExpression":{"id":2540,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"8364:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8357:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2542,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"8369:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8357:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2544,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8356:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8344:32:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2546,"nodeType":"ExpressionStatement","src":"8344:32:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2507,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"8142:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2508,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"8146:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8150:6:27","memberName":"length","nodeType":"MemberAccess","src":"8146:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8142:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2548,"initializationExpression":{"assignments":[2504],"declarations":[{"constant":false,"id":2504,"mutability":"mutable","name":"i","nameLocation":"8135:1:27","nodeType":"VariableDeclaration","scope":2548,"src":"8127:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2503,"name":"uint256","nodeType":"ElementaryTypeName","src":"8127:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2506,"initialValue":{"hexValue":"30","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8139:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8127:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8158:3:27","subExpression":{"id":2511,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"8158:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2513,"nodeType":"ExpressionStatement","src":"8158:3:27"},"nodeType":"ForStatement","src":"8122:265:27"},{"expression":{"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2549,"name":"userAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"8431:14:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2552,"indexExpression":{"id":2550,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"8446:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8431:28:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2553,"indexExpression":{"id":2551,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"8460:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8431:34:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2554,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"8469:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8431:46:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2556,"nodeType":"ExpressionStatement","src":"8431:46:27"},{"expression":{"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2557,"name":"totalAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1977,"src":"8521:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2559,"indexExpression":{"id":2558,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"8537:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8521:29:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2560,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"8554:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8521:41:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2562,"nodeType":"ExpressionStatement","src":"8521:41:27"},{"expression":{"arguments":[{"id":2568,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"8616:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2569,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"8622:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2570,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"8627:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"expression":{"id":2564,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8590:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8594:6:27","memberName":"sender","nodeType":"MemberAccess","src":"8590:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2563,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"8573:16:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$948_$","typeString":"type(contract IERC1155Burnable)"}},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8573:28:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8602:13:27","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":947,"src":"8573:42:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8573:61:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2572,"nodeType":"ExpressionStatement","src":"8573:61:27"},{"eventCall":{"arguments":[{"id":2574,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"8661:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2575,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8667:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8671:6:27","memberName":"sender","nodeType":"MemberAccess","src":"8667:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2577,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"8679:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2578,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8693:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8699:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"8693:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2580,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"8710:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2581,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"8715:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2582,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"8723:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2573,"name":"TokensBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"8649:11:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256,uint256[] memory,uint256[] memory,uint256)"}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8649:83:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2584,"nodeType":"EmitStatement","src":"8644:88:27"},{"expression":{"expression":{"expression":{"id":2585,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8750:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_AnichessOrbsBurnPool_$2591","typeString":"contract AnichessOrbsBurnPool"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8755:22:27","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2590,"src":"8750:27:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8778:8:27","memberName":"selector","nodeType":"MemberAccess","src":"8750:36:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2474,"id":2588,"nodeType":"Return","src":"8743:43:27"}]},"functionSelector":"bc197c81","id":2590,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"7626:22:27","nodeType":"FunctionDefinition","overrides":{"id":2471,"nodeType":"OverrideSpecifier","overrides":[],"src":"7794:8:27"},"parameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2590,"src":"7658:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2458,"name":"address","nodeType":"ElementaryTypeName","src":"7658:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"from","nameLocation":"7683:4:27","nodeType":"VariableDeclaration","scope":2590,"src":"7675:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2460,"name":"address","nodeType":"ElementaryTypeName","src":"7675:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"ids","nameLocation":"7716:3:27","nodeType":"VariableDeclaration","scope":2590,"src":"7697:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"7697:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2463,"nodeType":"ArrayTypeName","src":"7697:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2467,"mutability":"mutable","name":"values","nameLocation":"7748:6:27","nodeType":"VariableDeclaration","scope":2590,"src":"7729:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2465,"name":"uint256","nodeType":"ElementaryTypeName","src":"7729:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2466,"nodeType":"ArrayTypeName","src":"7729:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2590,"src":"7764:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2468,"name":"bytes","nodeType":"ElementaryTypeName","src":"7764:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7648:136:27"},"returnParameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2590,"src":"7812:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2472,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7812:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7811:8:27"},"scope":2591,"src":"7617:1176:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2592,"src":"1292:9641:27","usedErrors":[94,419,2029,2032,2035,2038,2041,2046],"usedEvents":[110,2014,2022]}],"src":"32:10902:27"},"id":27},"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol":{"ast":{"absolutePath":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol","exportedSymbols":{"Context":[1368],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ERC1155TokenBurn":[3033],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155":[922],"IERC1155Burnable":[948],"IForwarderRegistry":[727]},"id":3034,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2593,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","id":2595,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":923,"src":"57:101:28","symbolAliases":[{"foreign":{"id":2594,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"65:8:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":2597,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":949,"src":"159:117:28","symbolAliases":[{"foreign":{"id":2596,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"167:16:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2599,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":582,"src":"277:115:28","symbolAliases":[{"foreign":{"id":2598,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"285:24:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":33,"src":"393:101:28","symbolAliases":[{"foreign":{"id":2600,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"401:17:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2603,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":385,"src":"495:125:28","symbolAliases":[{"foreign":{"id":2602,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"503:24:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2605,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":702,"src":"621:128:28","symbolAliases":[{"foreign":{"id":2604,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"629:28:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":728,"src":"750:114:28","symbolAliases":[{"foreign":{"id":2606,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"758:18:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3034,"sourceUnit":1369,"src":"865:66:28","symbolAliases":[{"foreign":{"id":2608,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"873:7:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2611,"name":"ForwarderRegistryContext","nameLocations":["1206:24:28"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1206:24:28"},"id":2612,"nodeType":"InheritanceSpecifier","src":"1206:24:28"},{"baseName":{"id":2613,"name":"ContractOwnership","nameLocations":["1232:17:28"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1232:17:28"},"id":2614,"nodeType":"InheritanceSpecifier","src":"1232:17:28"}],"canonicalName":"ERC1155TokenBurn","contractDependencies":[],"contractKind":"contract","documentation":{"id":2610,"nodeType":"StructuredDocumentation","src":"933:243:28","text":" @title Anichess ERC1155 Merkle Claim Contract\n @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n @dev entitled to the rewards without revealing the entire list of recipients."},"fullyImplemented":true,"id":3033,"linearizedBaseContracts":[3033,32,414,431,80,1368,126,581,713,701],"name":"ERC1155TokenBurn","nameLocation":"1186:16:28","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2618,"libraryName":{"id":2615,"name":"ContractOwnershipStorage","nameLocations":["1262:24:28"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1262:24:28"},"nodeType":"UsingForDirective","src":"1256:67:28","typeName":{"id":2617,"nodeType":"UserDefinedTypeName","pathNode":{"id":2616,"name":"ContractOwnershipStorage.Layout","nameLocations":["1291:24:28","1316:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1291:31:28"},"referencedDeclaration":157,"src":"1291:31:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"id":2620,"mutability":"mutable","name":"initial_time","nameLocation":"1337:12:28","nodeType":"VariableDeclaration","scope":3033,"src":"1329:20:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1329:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2622,"mutability":"mutable","name":"interval_length","nameLocation":"1363:15:28","nodeType":"VariableDeclaration","scope":3033,"src":"1355:23:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"ERC1155TokenBurn.PoolStatus","id":2627,"members":[{"constant":false,"id":2624,"mutability":"mutable","name":"totalBurned","nameLocation":"1536:11:28","nodeType":"VariableDeclaration","scope":2627,"src":"1528:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2623,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2626,"mutability":"mutable","name":"totalClaimed","nameLocation":"1565:12:28","nodeType":"VariableDeclaration","scope":2627,"src":"1557:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2625,"name":"uint256","nodeType":"ElementaryTypeName","src":"1557:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PoolStatus","nameLocation":"1507:10:28","nodeType":"StructDefinition","scope":3033,"src":"1500:84:28","visibility":"public"},{"constant":false,"id":2633,"mutability":"mutable","name":"tokenWeight","nameLocation":"1638:11:28","nodeType":"VariableDeclaration","scope":3033,"src":"1590:59:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":2632,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2628,"name":"address","nodeType":"ElementaryTypeName","src":"1598:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1590:47:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2631,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2629,"name":"uint256","nodeType":"ElementaryTypeName","src":"1617:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1609:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2630,"name":"uint256","nodeType":"ElementaryTypeName","src":"1628:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"constant":false,"id":2638,"mutability":"mutable","name":"intervalPoolStatus","nameLocation":"1686:18:28","nodeType":"VariableDeclaration","scope":3033,"src":"1655:49:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_PoolStatus_$2627_storage_$","typeString":"mapping(uint256 => struct ERC1155TokenBurn.PoolStatus)"},"typeName":{"id":2637,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2634,"name":"uint256","nodeType":"ElementaryTypeName","src":"1663:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1655:30:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_PoolStatus_$2627_storage_$","typeString":"mapping(uint256 => struct ERC1155TokenBurn.PoolStatus)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2636,"nodeType":"UserDefinedTypeName","pathNode":{"id":2635,"name":"PoolStatus","nameLocations":["1674:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":2627,"src":"1674:10:28"},"referencedDeclaration":2627,"src":"1674:10:28","typeDescriptions":{"typeIdentifier":"t_struct$_PoolStatus_$2627_storage_ptr","typeString":"struct ERC1155TokenBurn.PoolStatus"}}},"visibility":"internal"},{"constant":false,"documentation":{"id":2639,"nodeType":"StructuredDocumentation","src":"1711:50:28","text":"@notice The IERC1155Burnable erc1155 contract."},"functionSelector":"0a0a3325","id":2643,"mutability":"mutable","name":"isApprovedTokens","nameLocation":"1798:16:28","nodeType":"VariableDeclaration","scope":3033,"src":"1766:48:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":2642,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2640,"name":"address","nodeType":"ElementaryTypeName","src":"1774:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1766:24:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2641,"name":"bool","nodeType":"ElementaryTypeName","src":"1785:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":2644,"nodeType":"StructuredDocumentation","src":"1821:48:28","text":"@notice Event emitted when tokens are burnt."},"eventSelector":"695b30a33e54e34d55c7836e092fa38db4283a5b243d2a8cfd4180ee227b2c0d","id":2658,"name":"TokensBurnt","nameLocation":"1880:11:28","nodeType":"EventDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2646,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"1908:6:28","nodeType":"VariableDeclaration","scope":2658,"src":"1892:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2645,"name":"address","nodeType":"ElementaryTypeName","src":"1892:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2648,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"1932:9:28","nodeType":"VariableDeclaration","scope":2658,"src":"1916:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2647,"name":"uint256","nodeType":"ElementaryTypeName","src":"1916:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2650,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"1959:5:28","nodeType":"VariableDeclaration","scope":2658,"src":"1943:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2649,"name":"address","nodeType":"ElementaryTypeName","src":"1943:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2653,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1976:3:28","nodeType":"VariableDeclaration","scope":2658,"src":"1966:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2651,"name":"uint256","nodeType":"ElementaryTypeName","src":"1966:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2652,"nodeType":"ArrayTypeName","src":"1966:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2656,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1991:6:28","nodeType":"VariableDeclaration","scope":2658,"src":"1981:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2654,"name":"uint256","nodeType":"ElementaryTypeName","src":"1981:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2655,"nodeType":"ArrayTypeName","src":"1981:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1891:107:28"},"src":"1874:125:28"},{"documentation":{"id":2659,"nodeType":"StructuredDocumentation","src":"2005:58:28","text":"@notice Error thrown when the epoch ID does not exist."},"errorSelector":"84f229dc","id":2663,"name":"EpochIdNotExists","nameLocation":"2074:16:28","nodeType":"ErrorDefinition","parameters":{"id":2662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2661,"mutability":"mutable","name":"epochId","nameLocation":"2099:7:28","nodeType":"VariableDeclaration","scope":2663,"src":"2091:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2091:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2090:17:28"},"src":"2068:40:28"},{"errorSelector":"35e83ac3","id":2665,"name":"InconsistentArrays","nameLocation":"2120:18:28","nodeType":"ErrorDefinition","parameters":{"id":2664,"nodeType":"ParameterList","parameters":[],"src":"2138:2:28"},"src":"2114:27:28"},{"errorSelector":"32da96a3","id":2667,"name":"TokenNotApproved","nameLocation":"2153:16:28","nodeType":"ErrorDefinition","parameters":{"id":2666,"nodeType":"ParameterList","parameters":[],"src":"2169:2:28"},"src":"2147:25:28"},{"errorSelector":"729d8528","id":2669,"name":"WalletNotApproved","nameLocation":"2184:17:28","nodeType":"ErrorDefinition","parameters":{"id":2668,"nodeType":"ParameterList","parameters":[],"src":"2201:2:28"},"src":"2178:26:28"},{"body":{"id":2711,"nodeType":"Block","src":"2593:128:28","statements":[{"body":{"id":2709,"nodeType":"Block","src":"2647:68:28","statements":[{"expression":{"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2698,"name":"isApprovedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"2661:16:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2705,"indexExpression":{"arguments":[{"baseExpression":{"id":2701,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"2686:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},"id":2703,"indexExpression":{"id":2702,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"2693:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2686:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":2700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2678:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2699,"name":"address","nodeType":"ElementaryTypeName","src":"2678:7:28","typeDescriptions":{}}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2678:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2661:36:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2700:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2661:43:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2708,"nodeType":"ExpressionStatement","src":"2661:43:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2691,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"2623:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2692,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"2627:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[] memory"}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2634:6:28","memberName":"length","nodeType":"MemberAccess","src":"2627:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2623:17:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2710,"initializationExpression":{"assignments":[2688],"declarations":[{"constant":false,"id":2688,"mutability":"mutable","name":"i","nameLocation":"2616:1:28","nodeType":"VariableDeclaration","scope":2710,"src":"2608:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2687,"name":"uint256","nodeType":"ElementaryTypeName","src":"2608:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2690,"initialValue":{"hexValue":"30","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2620:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2608:13:28"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2642:3:28","subExpression":{"id":2695,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"2642:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2697,"nodeType":"ExpressionStatement","src":"2642:3:28"},"nodeType":"ForStatement","src":"2603:112:28"}]},"documentation":{"id":2670,"nodeType":"StructuredDocumentation","src":"2210:198:28","text":" @notice Constructor for the ERC1155TokenBurn contract.\n @param tokens The IERC1155Burnable erc1155 contract.\n @param forwarderRegistry The forwarder registry contract."},"id":2712,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2680,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"2544:17:28","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":2681,"kind":"baseConstructorSpecifier","modifierName":{"id":2679,"name":"ForwarderRegistryContext","nameLocations":["2519:24:28"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"2519:24:28"},"nodeType":"ModifierInvocation","src":"2519:43:28"},{"arguments":[{"expression":{"id":2683,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2581:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2585:6:28","memberName":"sender","nodeType":"MemberAccess","src":"2581:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2685,"kind":"baseConstructorSpecifier","modifierName":{"id":2682,"name":"ContractOwnership","nameLocations":["2563:17:28"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"2563:17:28"},"nodeType":"ModifierInvocation","src":"2563:29:28"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2674,"mutability":"mutable","name":"tokens","nameLocation":"2460:6:28","nodeType":"VariableDeclaration","scope":2712,"src":"2434:32:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptr","typeString":"contract IERC1155Burnable[]"},"typeName":{"baseType":{"id":2672,"nodeType":"UserDefinedTypeName","pathNode":{"id":2671,"name":"IERC1155Burnable","nameLocations":["2434:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"2434:16:28"},"referencedDeclaration":948,"src":"2434:16:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2673,"nodeType":"ArrayTypeName","src":"2434:18:28","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_storage_ptr","typeString":"contract IERC1155Burnable[]"}},"visibility":"internal"},{"constant":false,"id":2677,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2495:17:28","nodeType":"VariableDeclaration","scope":2712,"src":"2476:36:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":2676,"nodeType":"UserDefinedTypeName","pathNode":{"id":2675,"name":"IForwarderRegistry","nameLocations":["2476:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"2476:18:28"},"referencedDeclaration":727,"src":"2476:18:28","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"2424:94:28"},"returnParameters":{"id":2686,"nodeType":"ParameterList","parameters":[],"src":"2593:0:28"},"scope":3033,"src":"2413:308:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652,1358],"body":{"id":2725,"nodeType":"Block","src":"2886:65:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2721,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2903:28:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2932:10:28","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"2903:39:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2903:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2720,"id":2724,"nodeType":"Return","src":"2896:48:28"}]},"documentation":{"id":2713,"nodeType":"StructuredDocumentation","src":"2727:44:28","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2726,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"2785:10:28","nodeType":"FunctionDefinition","overrides":{"id":2717,"nodeType":"OverrideSpecifier","overrides":[{"id":2715,"name":"Context","nameLocations":["2829:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"2829:7:28"},{"id":2716,"name":"ForwarderRegistryContextBase","nameLocations":["2838:28:28"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"2838:28:28"}],"src":"2820:47:28"},"parameters":{"id":2714,"nodeType":"ParameterList","parameters":[],"src":"2795:2:28"},"returnParameters":{"id":2720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2726,"src":"2877:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2718,"name":"address","nodeType":"ElementaryTypeName","src":"2877:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:9:28"},"scope":3033,"src":"2776:175:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1367],"body":{"id":2739,"nodeType":"Block","src":"3121:63:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2735,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"3138:28:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3167:8:28","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"3138:37:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2734,"id":2738,"nodeType":"Return","src":"3131:46:28"}]},"documentation":{"id":2727,"nodeType":"StructuredDocumentation","src":"2957:44:28","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2740,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"3015:8:28","nodeType":"FunctionDefinition","overrides":{"id":2731,"nodeType":"OverrideSpecifier","overrides":[{"id":2729,"name":"Context","nameLocations":["3057:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"3057:7:28"},{"id":2730,"name":"ForwarderRegistryContextBase","nameLocations":["3066:28:28"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"3066:28:28"}],"src":"3048:47:28"},"parameters":{"id":2728,"nodeType":"ParameterList","parameters":[],"src":"3023:2:28"},"returnParameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2740,"src":"3105:14:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2732,"name":"bytes","nodeType":"ElementaryTypeName","src":"3105:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3104:16:28"},"scope":3033,"src":"3006:178:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2795,"nodeType":"Block","src":"3287:312:28","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2755,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2726],"referencedDeclaration":2726,"src":"3354:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3354:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2750,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"3297:24:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3322:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"3297:31:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3297:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2754,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3331:22:28","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"3297:56:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3297:70:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2758,"nodeType":"ExpressionStatement","src":"3297:70:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2759,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3381:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_calldata_ptr","typeString":"contract IERC1155Burnable[] calldata"}},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3388:6:28","memberName":"length","nodeType":"MemberAccess","src":"3381:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2761,"name":"enabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"3398:7:28","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3406:6:28","memberName":"length","nodeType":"MemberAccess","src":"3398:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3381:31:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2768,"nodeType":"IfStatement","src":"3377:89:28","trueBody":{"id":2767,"nodeType":"Block","src":"3414:52:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2764,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"3435:18:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3435:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2766,"nodeType":"RevertStatement","src":"3428:27:28"}]}},{"body":{"id":2793,"nodeType":"Block","src":"3519:74:28","statements":[{"expression":{"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2780,"name":"isApprovedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"3533:16:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2787,"indexExpression":{"arguments":[{"baseExpression":{"id":2783,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3558:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_calldata_ptr","typeString":"contract IERC1155Burnable[] calldata"}},"id":2785,"indexExpression":{"id":2784,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"3565:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3558:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":2782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3550:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2781,"name":"address","nodeType":"ElementaryTypeName","src":"3550:7:28","typeDescriptions":{}}},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3550:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3533:36:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2788,"name":"enabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"3572:7:28","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2790,"indexExpression":{"id":2789,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"3580:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3572:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3533:49:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2792,"nodeType":"ExpressionStatement","src":"3533:49:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2773,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"3495:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2774,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3499:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_calldata_ptr","typeString":"contract IERC1155Burnable[] calldata"}},"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3506:6:28","memberName":"length","nodeType":"MemberAccess","src":"3499:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3495:17:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2794,"initializationExpression":{"assignments":[2770],"declarations":[{"constant":false,"id":2770,"mutability":"mutable","name":"i","nameLocation":"3488:1:28","nodeType":"VariableDeclaration","scope":2794,"src":"3480:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2769,"name":"uint256","nodeType":"ElementaryTypeName","src":"3480:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2772,"initialValue":{"hexValue":"30","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3492:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3480:13:28"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3514:3:28","subExpression":{"id":2777,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"3514:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2779,"nodeType":"ExpressionStatement","src":"3514:3:28"},"nodeType":"ForStatement","src":"3475:118:28"}]},"functionSelector":"92463bed","id":2796,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovedTokens","nameLocation":"3199:17:28","nodeType":"FunctionDefinition","parameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2744,"mutability":"mutable","name":"tokens","nameLocation":"3245:6:28","nodeType":"VariableDeclaration","scope":2796,"src":"3217:34:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_calldata_ptr","typeString":"contract IERC1155Burnable[]"},"typeName":{"baseType":{"id":2742,"nodeType":"UserDefinedTypeName","pathNode":{"id":2741,"name":"IERC1155Burnable","nameLocations":["3217:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"3217:16:28"},"referencedDeclaration":948,"src":"3217:16:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2743,"nodeType":"ArrayTypeName","src":"3217:18:28","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC1155Burnable_$948_$dyn_storage_ptr","typeString":"contract IERC1155Burnable[]"}},"visibility":"internal"},{"constant":false,"id":2747,"mutability":"mutable","name":"enabled","nameLocation":"3269:7:28","nodeType":"VariableDeclaration","scope":2796,"src":"3253:23:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2745,"name":"bool","nodeType":"ElementaryTypeName","src":"3253:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2746,"nodeType":"ArrayTypeName","src":"3253:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"3216:61:28"},"returnParameters":{"id":2749,"nodeType":"ParameterList","parameters":[],"src":"3287:0:28"},"scope":3033,"src":"3190:409:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2897,"nodeType":"Block","src":"3861:597:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2811,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"3875:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3882:6:28","memberName":"length","nodeType":"MemberAccess","src":"3875:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2813,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"3892:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3896:6:28","memberName":"length","nodeType":"MemberAccess","src":"3892:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3875:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2816,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"3906:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3913:6:28","memberName":"length","nodeType":"MemberAccess","src":"3906:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2818,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"3923:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3930:6:28","memberName":"length","nodeType":"MemberAccess","src":"3923:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3906:30:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3875:61:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2826,"nodeType":"IfStatement","src":"3871:119:28","trueBody":{"id":2825,"nodeType":"Block","src":"3938:52:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2822,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"3959:18:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3959:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2824,"nodeType":"RevertStatement","src":"3952:27:28"}]}},{"body":{"id":2895,"nodeType":"Block","src":"4044:408:28","statements":[{"condition":{"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4062:28:28","subExpression":{"baseExpression":{"id":2838,"name":"isApprovedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"4063:16:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2842,"indexExpression":{"baseExpression":{"id":2839,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"4080:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2841,"indexExpression":{"id":2840,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4087:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4080:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4063:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2848,"nodeType":"IfStatement","src":"4058:92:28","trueBody":{"id":2847,"nodeType":"Block","src":"4092:58:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2844,"name":"TokenNotApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"4117:16:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4117:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2846,"nodeType":"RevertStatement","src":"4110:25:28"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2849,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"4167:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2851,"indexExpression":{"id":2850,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4171:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4167:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4174:6:28","memberName":"length","nodeType":"MemberAccess","src":"4167:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"baseExpression":{"id":2853,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"4184:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2855,"indexExpression":{"id":2854,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4191:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4184:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4194:6:28","memberName":"length","nodeType":"MemberAccess","src":"4184:16:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4167:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2862,"nodeType":"IfStatement","src":"4163:99:28","trueBody":{"id":2861,"nodeType":"Block","src":"4202:60:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2858,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"4227:18:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4227:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2860,"nodeType":"RevertStatement","src":"4220:27:28"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2869,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2726],"referencedDeclaration":2726,"src":"4318:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4318:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2871,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"4332:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2873,"indexExpression":{"id":2872,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4336:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4332:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"baseExpression":{"id":2874,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"4340:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2876,"indexExpression":{"id":2875,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4347:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4340:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"baseExpression":{"id":2864,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"4293:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2866,"indexExpression":{"id":2865,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4300:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4293:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2863,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"4276:16:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$948_$","typeString":"type(contract IERC1155Burnable)"}},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:27:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4304:13:28","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":947,"src":"4276:41:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:74:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2878,"nodeType":"ExpressionStatement","src":"4276:74:28"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2880,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2726],"referencedDeclaration":2726,"src":"4381:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4381:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2882,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4395:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4401:9:28","memberName":"timestamp","nodeType":"MemberAccess","src":"4395:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2884,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"4412:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2886,"indexExpression":{"id":2885,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4419:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4412:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2887,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"4423:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2889,"indexExpression":{"id":2888,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4427:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4423:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"baseExpression":{"id":2890,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"4431:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2892,"indexExpression":{"id":2891,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4438:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4431:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":2879,"name":"TokensBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2658,"src":"4369:11:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256,address,uint256[] memory,uint256[] memory)"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4369:72:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2894,"nodeType":"EmitStatement","src":"4364:77:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2831,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4020:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2832,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"4024:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4031:6:28","memberName":"length","nodeType":"MemberAccess","src":"4024:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4020:17:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2896,"initializationExpression":{"assignments":[2828],"declarations":[{"constant":false,"id":2828,"mutability":"mutable","name":"i","nameLocation":"4013:1:28","nodeType":"VariableDeclaration","scope":2896,"src":"4005:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2827,"name":"uint256","nodeType":"ElementaryTypeName","src":"4005:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2830,"initialValue":{"hexValue":"30","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4017:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4005:13:28"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4039:3:28","subExpression":{"id":2835,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"4039:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2837,"nodeType":"ExpressionStatement","src":"4039:3:28"},"nodeType":"ForStatement","src":"4000:452:28"}]},"documentation":{"id":2797,"nodeType":"StructuredDocumentation","src":"3605:146:28","text":" @notice Burns the token from sender\n @param ids The token ids to burn.\n @param values The amount of tokens to burn."},"functionSelector":"0458935e","id":2898,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"3765:4:28","nodeType":"FunctionDefinition","parameters":{"id":2809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"tokens","nameLocation":"3789:6:28","nodeType":"VariableDeclaration","scope":2898,"src":"3770:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2798,"name":"address","nodeType":"ElementaryTypeName","src":"3770:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2799,"nodeType":"ArrayTypeName","src":"3770:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2804,"mutability":"mutable","name":"ids","nameLocation":"3818:3:28","nodeType":"VariableDeclaration","scope":2898,"src":"3797:24:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2801,"name":"uint256","nodeType":"ElementaryTypeName","src":"3797:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2802,"nodeType":"ArrayTypeName","src":"3797:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2803,"nodeType":"ArrayTypeName","src":"3797:11:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"},{"constant":false,"id":2808,"mutability":"mutable","name":"values","nameLocation":"3844:6:28","nodeType":"VariableDeclaration","scope":2898,"src":"3823:27:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2805,"name":"uint256","nodeType":"ElementaryTypeName","src":"3823:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2806,"nodeType":"ArrayTypeName","src":"3823:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2807,"nodeType":"ArrayTypeName","src":"3823:11:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"}],"src":"3769:82:28"},"returnParameters":{"id":2810,"nodeType":"ParameterList","parameters":[],"src":"3861:0:28"},"scope":3033,"src":"3756:702:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3031,"nodeType":"Block","src":"4806:761:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2916,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"4820:4:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4825:6:28","memberName":"length","nodeType":"MemberAccess","src":"4820:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2918,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"4835:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4842:6:28","memberName":"length","nodeType":"MemberAccess","src":"4835:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4820:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2921,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"4852:4:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4857:6:28","memberName":"length","nodeType":"MemberAccess","src":"4852:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2923,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"4867:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4871:6:28","memberName":"length","nodeType":"MemberAccess","src":"4867:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4852:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4820:57:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2927,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"4881:4:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4886:6:28","memberName":"length","nodeType":"MemberAccess","src":"4881:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2929,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"4896:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4903:6:28","memberName":"length","nodeType":"MemberAccess","src":"4896:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4881:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4820:89:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2937,"nodeType":"IfStatement","src":"4816:147:28","trueBody":{"id":2936,"nodeType":"Block","src":"4911:52:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2933,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"4932:18:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4932:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2935,"nodeType":"RevertStatement","src":"4925:27:28"}]}},{"body":{"id":3029,"nodeType":"Block","src":"5015:546:28","statements":[{"condition":{"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5033:28:28","subExpression":{"baseExpression":{"id":2949,"name":"isApprovedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"5034:16:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2953,"indexExpression":{"baseExpression":{"id":2950,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"5051:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2952,"indexExpression":{"id":2951,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5058:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5051:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5034:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2959,"nodeType":"IfStatement","src":"5029:92:28","trueBody":{"id":2958,"nodeType":"Block","src":"5063:58:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2955,"name":"TokenNotApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"5088:16:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5088:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2957,"nodeType":"RevertStatement","src":"5081:25:28"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2960,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"5138:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2962,"indexExpression":{"id":2961,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5142:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5138:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5145:6:28","memberName":"length","nodeType":"MemberAccess","src":"5138:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"baseExpression":{"id":2964,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"5155:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":2966,"indexExpression":{"id":2965,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5162:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5155:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5165:6:28","memberName":"length","nodeType":"MemberAccess","src":"5155:16:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5138:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2973,"nodeType":"IfStatement","src":"5134:99:28","trueBody":{"id":2972,"nodeType":"Block","src":"5173:60:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2969,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"5198:18:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5198:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2971,"nodeType":"RevertStatement","src":"5191:27:28"}]}},{"condition":{"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5251:69:28","subExpression":{"arguments":[{"baseExpression":{"id":2983,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"5298:4:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2985,"indexExpression":{"id":2984,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5303:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5298:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2986,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2726],"referencedDeclaration":2726,"src":"5307:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5307:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":2977,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"5269:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2979,"indexExpression":{"id":2978,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5276:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5269:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5261:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2975,"name":"address","nodeType":"ElementaryTypeName","src":"5261:7:28","typeDescriptions":{}}},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5261:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2974,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"5252:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$922_$","typeString":"type(contract IERC1155)"}},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5252:28:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$922","typeString":"contract IERC1155"}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5281:16:28","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":898,"src":"5252:45:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5252:68:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2994,"nodeType":"IfStatement","src":"5247:134:28","trueBody":{"id":2993,"nodeType":"Block","src":"5322:59:28","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2990,"name":"WalletNotApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"5347:17:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5347:19:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2992,"nodeType":"RevertStatement","src":"5340:26:28"}]}},{"expression":{"arguments":[{"baseExpression":{"id":3001,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"5437:4:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3003,"indexExpression":{"id":3002,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5442:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5437:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3004,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"5446:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3006,"indexExpression":{"id":3005,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5450:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5446:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"baseExpression":{"id":3007,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"5454:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3009,"indexExpression":{"id":3008,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5461:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5454:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"baseExpression":{"id":2996,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"5412:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2998,"indexExpression":{"id":2997,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5419:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5412:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2995,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"5395:16:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$948_$","typeString":"type(contract IERC1155Burnable)"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5395:27:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5423:13:28","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":947,"src":"5395:41:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5395:69:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3011,"nodeType":"ExpressionStatement","src":"5395:69:28"},{"eventCall":{"arguments":[{"baseExpression":{"id":3013,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"5495:4:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3015,"indexExpression":{"id":3014,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5500:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5495:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3016,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5504:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5510:9:28","memberName":"timestamp","nodeType":"MemberAccess","src":"5504:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":3018,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"5521:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3020,"indexExpression":{"id":3019,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5528:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5521:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3021,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"5532:3:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3023,"indexExpression":{"id":3022,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5536:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5532:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"baseExpression":{"id":3024,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"5540:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3026,"indexExpression":{"id":3025,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5547:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5540:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":3012,"name":"TokensBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2658,"src":"5483:11:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256,address,uint256[] memory,uint256[] memory)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5483:67:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3028,"nodeType":"EmitStatement","src":"5478:72:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2942,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"4993:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2943,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"4997:4:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5002:6:28","memberName":"length","nodeType":"MemberAccess","src":"4997:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4993:15:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3030,"initializationExpression":{"assignments":[2939],"declarations":[{"constant":false,"id":2939,"mutability":"mutable","name":"i","nameLocation":"4986:1:28","nodeType":"VariableDeclaration","scope":3030,"src":"4978:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2938,"name":"uint256","nodeType":"ElementaryTypeName","src":"4978:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2941,"initialValue":{"hexValue":"30","id":2940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4990:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4978:13:28"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5010:3:28","subExpression":{"id":2946,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5010:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2948,"nodeType":"ExpressionStatement","src":"5010:3:28"},"nodeType":"ForStatement","src":"4973:588:28"}]},"documentation":{"id":2899,"nodeType":"StructuredDocumentation","src":"4464:204:28","text":" @notice Burns the token from a wallet.\n @param from The wallet to burn the tokens from.\n @param ids The token ids to burn.\n @param values The amount of tokens to burn."},"functionSelector":"f0a71104","id":3032,"implemented":true,"kind":"function","modifiers":[],"name":"burnFor","nameLocation":"4682:7:28","nodeType":"FunctionDefinition","parameters":{"id":2914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2902,"mutability":"mutable","name":"from","nameLocation":"4709:4:28","nodeType":"VariableDeclaration","scope":3032,"src":"4690:23:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2900,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2901,"nodeType":"ArrayTypeName","src":"4690:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2905,"mutability":"mutable","name":"tokens","nameLocation":"4734:6:28","nodeType":"VariableDeclaration","scope":3032,"src":"4715:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2903,"name":"address","nodeType":"ElementaryTypeName","src":"4715:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2904,"nodeType":"ArrayTypeName","src":"4715:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2909,"mutability":"mutable","name":"ids","nameLocation":"4763:3:28","nodeType":"VariableDeclaration","scope":3032,"src":"4742:24:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2906,"name":"uint256","nodeType":"ElementaryTypeName","src":"4742:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2907,"nodeType":"ArrayTypeName","src":"4742:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2908,"nodeType":"ArrayTypeName","src":"4742:11:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"},{"constant":false,"id":2913,"mutability":"mutable","name":"values","nameLocation":"4789:6:28","nodeType":"VariableDeclaration","scope":3032,"src":"4768:27:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":2910,"name":"uint256","nodeType":"ElementaryTypeName","src":"4768:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2911,"nodeType":"ArrayTypeName","src":"4768:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":2912,"nodeType":"ArrayTypeName","src":"4768:11:28","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"}],"src":"4689:107:28"},"returnParameters":{"id":2915,"nodeType":"ParameterList","parameters":[],"src":"4806:0:28"},"scope":3033,"src":"4673:894:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3034,"src":"1177:4392:28","usedErrors":[94,419,2663,2665,2667,2669],"usedEvents":[110,2658]}],"src":"32:5538:28"},"id":28},"contracts/burn/AnichessOrbsBurnPoolSimpleSingle.sol":{"ast":{"absolutePath":"contracts/burn/AnichessOrbsBurnPoolSimpleSingle.sol","exportedSymbols":{"Context":[1368],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ERC1155TokenBurn":[3233],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155":[922],"IERC1155Burnable":[948],"IForwarderRegistry":[727]},"id":3234,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3035,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:29"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","id":3037,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":923,"src":"57:101:29","symbolAliases":[{"foreign":{"id":3036,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"65:8:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":3039,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":949,"src":"159:117:29","symbolAliases":[{"foreign":{"id":3038,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"167:16:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":3041,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":582,"src":"277:115:29","symbolAliases":[{"foreign":{"id":3040,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"285:24:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":3043,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":33,"src":"393:101:29","symbolAliases":[{"foreign":{"id":3042,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"401:17:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":3045,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":385,"src":"495:125:29","symbolAliases":[{"foreign":{"id":3044,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"503:24:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":3047,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":702,"src":"621:128:29","symbolAliases":[{"foreign":{"id":3046,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"629:28:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":3049,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":728,"src":"750:114:29","symbolAliases":[{"foreign":{"id":3048,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"758:18:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":3051,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3234,"sourceUnit":1369,"src":"865:66:29","symbolAliases":[{"foreign":{"id":3050,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"873:7:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3053,"name":"ForwarderRegistryContext","nameLocations":["1206:24:29"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1206:24:29"},"id":3054,"nodeType":"InheritanceSpecifier","src":"1206:24:29"},{"baseName":{"id":3055,"name":"ContractOwnership","nameLocations":["1232:17:29"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1232:17:29"},"id":3056,"nodeType":"InheritanceSpecifier","src":"1232:17:29"}],"canonicalName":"ERC1155TokenBurn","contractDependencies":[],"contractKind":"contract","documentation":{"id":3052,"nodeType":"StructuredDocumentation","src":"933:243:29","text":" @title Anichess ERC1155 Merkle Claim Contract\n @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n @dev entitled to the rewards without revealing the entire list of recipients."},"fullyImplemented":true,"id":3233,"linearizedBaseContracts":[3233,32,414,431,80,1368,126,581,713,701],"name":"ERC1155TokenBurn","nameLocation":"1186:16:29","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3060,"libraryName":{"id":3057,"name":"ContractOwnershipStorage","nameLocations":["1262:24:29"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1262:24:29"},"nodeType":"UsingForDirective","src":"1256:67:29","typeName":{"id":3059,"nodeType":"UserDefinedTypeName","pathNode":{"id":3058,"name":"ContractOwnershipStorage.Layout","nameLocations":["1291:24:29","1316:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1291:31:29"},"referencedDeclaration":157,"src":"1291:31:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"documentation":{"id":3061,"nodeType":"StructuredDocumentation","src":"1329:50:29","text":"@notice The IERC1155Burnable erc1155 contract."},"functionSelector":"82bfefc8","id":3064,"mutability":"immutable","name":"TOKEN","nameLocation":"1418:5:29","nodeType":"VariableDeclaration","scope":3233,"src":"1384:39:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"},"typeName":{"id":3063,"nodeType":"UserDefinedTypeName","pathNode":{"id":3062,"name":"IERC1155Burnable","nameLocations":["1384:16:29"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"1384:16:29"},"referencedDeclaration":948,"src":"1384:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"anonymous":false,"documentation":{"id":3065,"nodeType":"StructuredDocumentation","src":"1430:48:29","text":"@notice Event emitted when tokens are burnt."},"eventSelector":"674e56473ddb0f588fb74339bd1423aa4224362e7323ddca32ab17328eb8003f","id":3077,"name":"TokensBurnt","nameLocation":"1489:11:29","nodeType":"EventDefinition","parameters":{"id":3076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3067,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"1517:6:29","nodeType":"VariableDeclaration","scope":3077,"src":"1501:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3066,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3069,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"1541:9:29","nodeType":"VariableDeclaration","scope":3077,"src":"1525:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"1525:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3072,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1562:3:29","nodeType":"VariableDeclaration","scope":3077,"src":"1552:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3070,"name":"uint256","nodeType":"ElementaryTypeName","src":"1552:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3071,"nodeType":"ArrayTypeName","src":"1552:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3075,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1577:6:29","nodeType":"VariableDeclaration","scope":3077,"src":"1567:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3073,"name":"uint256","nodeType":"ElementaryTypeName","src":"1567:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3074,"nodeType":"ArrayTypeName","src":"1567:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1500:84:29"},"src":"1483:102:29"},{"documentation":{"id":3078,"nodeType":"StructuredDocumentation","src":"1591:58:29","text":"@notice Error thrown when the epoch ID does not exist."},"errorSelector":"84f229dc","id":3082,"name":"EpochIdNotExists","nameLocation":"1660:16:29","nodeType":"ErrorDefinition","parameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3080,"mutability":"mutable","name":"epochId","nameLocation":"1685:7:29","nodeType":"VariableDeclaration","scope":3082,"src":"1677:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3079,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1677:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1676:17:29"},"src":"1654:40:29"},{"errorSelector":"35e83ac3","id":3084,"name":"InconsistentArrays","nameLocation":"1706:18:29","nodeType":"ErrorDefinition","parameters":{"id":3083,"nodeType":"ParameterList","parameters":[],"src":"1724:2:29"},"src":"1700:27:29"},{"errorSelector":"c19f17a9","id":3086,"name":"NotApproved","nameLocation":"1739:11:29","nodeType":"ErrorDefinition","parameters":{"id":3085,"nodeType":"ParameterList","parameters":[],"src":"1750:2:29"},"src":"1733:20:29"},{"body":{"id":3107,"nodeType":"Block","src":"2131:30:29","statements":[{"expression":{"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3103,"name":"TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"2141:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3104,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3090,"src":"2149:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"src":"2141:13:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":3106,"nodeType":"ExpressionStatement","src":"2141:13:29"}]},"documentation":{"id":3087,"nodeType":"StructuredDocumentation","src":"1759:197:29","text":" @notice Constructor for the ERC1155TokenBurn contract.\n @param token The IERC1155Burnable erc1155 contract.\n @param forwarderRegistry The forwarder registry contract."},"id":3108,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3096,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2082:17:29","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":3097,"kind":"baseConstructorSpecifier","modifierName":{"id":3095,"name":"ForwarderRegistryContext","nameLocations":["2057:24:29"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"2057:24:29"},"nodeType":"ModifierInvocation","src":"2057:43:29"},{"arguments":[{"expression":{"id":3099,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2119:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2123:6:29","memberName":"sender","nodeType":"MemberAccess","src":"2119:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3101,"kind":"baseConstructorSpecifier","modifierName":{"id":3098,"name":"ContractOwnership","nameLocations":["2101:17:29"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"2101:17:29"},"nodeType":"ModifierInvocation","src":"2101:29:29"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3090,"mutability":"mutable","name":"token","nameLocation":"1999:5:29","nodeType":"VariableDeclaration","scope":3108,"src":"1982:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"},"typeName":{"id":3089,"nodeType":"UserDefinedTypeName","pathNode":{"id":3088,"name":"IERC1155Burnable","nameLocations":["1982:16:29"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"1982:16:29"},"referencedDeclaration":948,"src":"1982:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":3093,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2033:17:29","nodeType":"VariableDeclaration","scope":3108,"src":"2014:36:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":3092,"nodeType":"UserDefinedTypeName","pathNode":{"id":3091,"name":"IForwarderRegistry","nameLocations":["2014:18:29"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"2014:18:29"},"referencedDeclaration":727,"src":"2014:18:29","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"1972:84:29"},"returnParameters":{"id":3102,"nodeType":"ParameterList","parameters":[],"src":"2131:0:29"},"scope":3233,"src":"1961:200:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652,1358],"body":{"id":3121,"nodeType":"Block","src":"2326:65:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3117,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2343:28:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2372:10:29","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"2343:39:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2343:41:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3116,"id":3120,"nodeType":"Return","src":"2336:48:29"}]},"documentation":{"id":3109,"nodeType":"StructuredDocumentation","src":"2167:44:29","text":"@inheritdoc ForwarderRegistryContextBase"},"id":3122,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"2225:10:29","nodeType":"FunctionDefinition","overrides":{"id":3113,"nodeType":"OverrideSpecifier","overrides":[{"id":3111,"name":"Context","nameLocations":["2269:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"2269:7:29"},{"id":3112,"name":"ForwarderRegistryContextBase","nameLocations":["2278:28:29"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"2278:28:29"}],"src":"2260:47:29"},"parameters":{"id":3110,"nodeType":"ParameterList","parameters":[],"src":"2235:2:29"},"returnParameters":{"id":3116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3122,"src":"2317:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3114,"name":"address","nodeType":"ElementaryTypeName","src":"2317:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2316:9:29"},"scope":3233,"src":"2216:175:29","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1367],"body":{"id":3135,"nodeType":"Block","src":"2561:63:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3131,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2578:28:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2607:8:29","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"2578:37:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2578:39:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3130,"id":3134,"nodeType":"Return","src":"2571:46:29"}]},"documentation":{"id":3123,"nodeType":"StructuredDocumentation","src":"2397:44:29","text":"@inheritdoc ForwarderRegistryContextBase"},"id":3136,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"2455:8:29","nodeType":"FunctionDefinition","overrides":{"id":3127,"nodeType":"OverrideSpecifier","overrides":[{"id":3125,"name":"Context","nameLocations":["2497:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"2497:7:29"},{"id":3126,"name":"ForwarderRegistryContextBase","nameLocations":["2506:28:29"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"2506:28:29"}],"src":"2488:47:29"},"parameters":{"id":3124,"nodeType":"ParameterList","parameters":[],"src":"2463:2:29"},"returnParameters":{"id":3130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3136,"src":"2545:14:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3128,"name":"bytes","nodeType":"ElementaryTypeName","src":"2545:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2544:16:29"},"scope":3233,"src":"2446:178:29","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3174,"nodeType":"Block","src":"2855:228:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3146,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"2869:3:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2873:6:29","memberName":"length","nodeType":"MemberAccess","src":"2869:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3148,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"2883:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2890:6:29","memberName":"length","nodeType":"MemberAccess","src":"2883:13:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2869:27:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3155,"nodeType":"IfStatement","src":"2865:85:29","trueBody":{"id":3154,"nodeType":"Block","src":"2898:52:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3151,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"2919:18:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2919:20:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3153,"nodeType":"RevertStatement","src":"2912:27:29"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3159,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[3122],"referencedDeclaration":3122,"src":"2980:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2980:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3161,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"2994:3:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":3162,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"2999:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":3156,"name":"TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"2960:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2966:13:29","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":947,"src":"2960:19:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2960:46:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3164,"nodeType":"ExpressionStatement","src":"2960:46:29"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3166,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[3122],"referencedDeclaration":3122,"src":"3033:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3033:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3168,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3047:5:29","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:9:29","memberName":"timestamp","nodeType":"MemberAccess","src":"3047:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3170,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"3064:3:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":3171,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"3069:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":3165,"name":"TokensBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"3021:11:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256[] memory,uint256[] memory)"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3021:55:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3173,"nodeType":"EmitStatement","src":"3016:60:29"}]},"documentation":{"id":3137,"nodeType":"StructuredDocumentation","src":"2630:146:29","text":" @notice Burns the token from sender\n @param ids The token ids to burn.\n @param values The amount of tokens to burn."},"functionSelector":"e4cbb46e","id":3175,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"2790:4:29","nodeType":"FunctionDefinition","parameters":{"id":3144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3140,"mutability":"mutable","name":"ids","nameLocation":"2814:3:29","nodeType":"VariableDeclaration","scope":3175,"src":"2795:22:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3138,"name":"uint256","nodeType":"ElementaryTypeName","src":"2795:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3139,"nodeType":"ArrayTypeName","src":"2795:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3143,"mutability":"mutable","name":"values","nameLocation":"2838:6:29","nodeType":"VariableDeclaration","scope":3175,"src":"2819:25:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3141,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3142,"nodeType":"ArrayTypeName","src":"2819:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2794:51:29"},"returnParameters":{"id":3145,"nodeType":"ParameterList","parameters":[],"src":"2855:0:29"},"scope":3233,"src":"2781:302:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3231,"nodeType":"Block","src":"3389:361:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3187,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"3403:3:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:6:29","memberName":"length","nodeType":"MemberAccess","src":"3403:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3189,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"3417:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3424:6:29","memberName":"length","nodeType":"MemberAccess","src":"3417:13:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3403:27:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3196,"nodeType":"IfStatement","src":"3399:85:29","trueBody":{"id":3195,"nodeType":"Block","src":"3432:52:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3192,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"3453:18:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3453:20:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3194,"nodeType":"RevertStatement","src":"3446:27:29"}]}},{"condition":{"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3498:62:29","subExpression":{"arguments":[{"id":3204,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"3541:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3205,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[3122],"referencedDeclaration":3122,"src":"3547:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3547:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":3200,"name":"TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"3516:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":3199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3508:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3198,"name":"address","nodeType":"ElementaryTypeName","src":"3508:7:29","typeDescriptions":{}}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3508:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3197,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"3499:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$922_$","typeString":"type(contract IERC1155)"}},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3499:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$922","typeString":"contract IERC1155"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3524:16:29","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":898,"src":"3499:41:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3499:61:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3214,"nodeType":"IfStatement","src":"3494:139:29","trueBody":{"id":3213,"nodeType":"Block","src":"3562:71:29","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a206275726e2063616c6c6572206973206e6f7420617070726f766564","id":3210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3583:38:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_12669bb8fa5986d3fd494c47774708cf75572e0072244adbabca7fc66547bec5","typeString":"literal_string \"ERC1155: burn caller is not approved\""},"value":"ERC1155: burn caller is not approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_12669bb8fa5986d3fd494c47774708cf75572e0072244adbabca7fc66547bec5","typeString":"literal_string \"ERC1155: burn caller is not approved\""}],"id":3209,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3576:6:29","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3576:46:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3212,"nodeType":"ExpressionStatement","src":"3576:46:29"}]}},{"expression":{"arguments":[{"id":3218,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"3663:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3219,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"3669:3:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":3220,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"3674:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":3215,"name":"TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"3643:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3649:13:29","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":947,"src":"3643:19:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3643:38:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3222,"nodeType":"ExpressionStatement","src":"3643:38:29"},{"eventCall":{"arguments":[{"id":3224,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"3708:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3225,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3714:5:29","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3720:9:29","memberName":"timestamp","nodeType":"MemberAccess","src":"3714:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3227,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"3731:3:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":3228,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"3736:6:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":3223,"name":"TokensBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"3696:11:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256[] memory,uint256[] memory)"}},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3696:47:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3230,"nodeType":"EmitStatement","src":"3691:52:29"}]},"documentation":{"id":3176,"nodeType":"StructuredDocumentation","src":"3089:204:29","text":" @notice Burns the token from a wallet.\n @param from The wallet to burn the tokens from.\n @param ids The token ids to burn.\n @param values The amount of tokens to burn."},"functionSelector":"9d33fe57","id":3232,"implemented":true,"kind":"function","modifiers":[],"name":"burnFor","nameLocation":"3307:7:29","nodeType":"FunctionDefinition","parameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3178,"mutability":"mutable","name":"from","nameLocation":"3323:4:29","nodeType":"VariableDeclaration","scope":3232,"src":"3315:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3177,"name":"address","nodeType":"ElementaryTypeName","src":"3315:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"ids","nameLocation":"3348:3:29","nodeType":"VariableDeclaration","scope":3232,"src":"3329:22:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3179,"name":"uint256","nodeType":"ElementaryTypeName","src":"3329:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3180,"nodeType":"ArrayTypeName","src":"3329:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3184,"mutability":"mutable","name":"values","nameLocation":"3372:6:29","nodeType":"VariableDeclaration","scope":3232,"src":"3353:25:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3182,"name":"uint256","nodeType":"ElementaryTypeName","src":"3353:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3183,"nodeType":"ArrayTypeName","src":"3353:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3314:65:29"},"returnParameters":{"id":3186,"nodeType":"ParameterList","parameters":[],"src":"3389:0:29"},"scope":3233,"src":"3298:452:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3234,"src":"1177:2575:29","usedErrors":[94,419,3082,3084,3086],"usedEvents":[110,3077]}],"src":"32:3721:29"},"id":29},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"ast":{"absolutePath":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol","exportedSymbols":{"AnichessERC1155MerkleClaim":[3592],"Context":[1368],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155Mintable":[978],"IForwarderRegistry":[727],"MerkleProof":[1930]},"id":3593,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3235,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:30"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":3237,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":1931,"src":"57:87:30","symbolAliases":[{"foreign":{"id":3236,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"65:11:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":3239,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":979,"src":"145:117:30","symbolAliases":[{"foreign":{"id":3238,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"153:16:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":3241,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":582,"src":"263:115:30","symbolAliases":[{"foreign":{"id":3240,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"271:24:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":3243,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":33,"src":"379:101:30","symbolAliases":[{"foreign":{"id":3242,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"387:17:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":3245,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":385,"src":"481:125:30","symbolAliases":[{"foreign":{"id":3244,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"489:24:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":3247,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":702,"src":"607:128:30","symbolAliases":[{"foreign":{"id":3246,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"615:28:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":3249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":728,"src":"736:114:30","symbolAliases":[{"foreign":{"id":3248,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"744:18:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":3251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3593,"sourceUnit":1369,"src":"851:66:30","symbolAliases":[{"foreign":{"id":3250,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"859:7:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3253,"name":"ForwarderRegistryContext","nameLocations":["1202:24:30"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1202:24:30"},"id":3254,"nodeType":"InheritanceSpecifier","src":"1202:24:30"},{"baseName":{"id":3255,"name":"ContractOwnership","nameLocations":["1228:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1228:17:30"},"id":3256,"nodeType":"InheritanceSpecifier","src":"1228:17:30"}],"canonicalName":"AnichessERC1155MerkleClaim","contractDependencies":[],"contractKind":"contract","documentation":{"id":3252,"nodeType":"StructuredDocumentation","src":"919:243:30","text":" @title Anichess ERC1155 Merkle Claim Contract\n @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n @dev entitled to the rewards without revealing the entire list of recipients."},"fullyImplemented":true,"id":3592,"linearizedBaseContracts":[3592,32,414,431,80,1368,126,581,713,701],"name":"AnichessERC1155MerkleClaim","nameLocation":"1172:26:30","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3260,"libraryName":{"id":3257,"name":"ContractOwnershipStorage","nameLocations":["1258:24:30"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1258:24:30"},"nodeType":"UsingForDirective","src":"1252:67:30","typeName":{"id":3259,"nodeType":"UserDefinedTypeName","pathNode":{"id":3258,"name":"ContractOwnershipStorage.Layout","nameLocations":["1287:24:30","1312:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1287:31:30"},"referencedDeclaration":157,"src":"1287:31:30","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":3264,"libraryName":{"id":3261,"name":"MerkleProof","nameLocations":["1330:11:30"],"nodeType":"IdentifierPath","referencedDeclaration":1930,"src":"1330:11:30"},"nodeType":"UsingForDirective","src":"1324:32:30","typeName":{"baseType":{"id":3262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1346:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3263,"nodeType":"ArrayTypeName","src":"1346:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"canonicalName":"AnichessERC1155MerkleClaim.ClaimWindow","documentation":{"id":3265,"nodeType":"StructuredDocumentation","src":"1362:36:30","text":"@notice The claim window struct."},"id":3272,"members":[{"constant":false,"id":3267,"mutability":"mutable","name":"merkleRoot","nameLocation":"1440:10:30","nodeType":"VariableDeclaration","scope":3272,"src":"1432:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1432:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3269,"mutability":"mutable","name":"startTime","nameLocation":"1468:9:30","nodeType":"VariableDeclaration","scope":3272,"src":"1460:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1460:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3271,"mutability":"mutable","name":"endTime","nameLocation":"1495:7:30","nodeType":"VariableDeclaration","scope":3272,"src":"1487:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1487:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ClaimWindow","nameLocation":"1410:11:30","nodeType":"StructDefinition","scope":3592,"src":"1403:106:30","visibility":"public"},{"constant":false,"documentation":{"id":3273,"nodeType":"StructuredDocumentation","src":"1515:48:30","text":"@notice The ERC1155Mintable reward contract."},"functionSelector":"3a5af339","id":3276,"mutability":"immutable","name":"REWARD_CONTRACT","nameLocation":"1602:15:30","nodeType":"VariableDeclaration","scope":3592,"src":"1568:49:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"},"typeName":{"id":3275,"nodeType":"UserDefinedTypeName","pathNode":{"id":3274,"name":"IERC1155Mintable","nameLocations":["1568:16:30"],"nodeType":"IdentifierPath","referencedDeclaration":978,"src":"1568:16:30"},"referencedDeclaration":978,"src":"1568:16:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},"visibility":"public"},{"constant":false,"documentation":{"id":3277,"nodeType":"StructuredDocumentation","src":"1624:39:30","text":"@notice The token id to be claimed."},"functionSelector":"89a89002","id":3279,"mutability":"immutable","name":"TOKEN_ID","nameLocation":"1693:8:30","nodeType":"VariableDeclaration","scope":3592,"src":"1668:33:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3278,"name":"uint256","nodeType":"ElementaryTypeName","src":"1668:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":3280,"nodeType":"StructuredDocumentation","src":"1708:75:30","text":"@notice The total number of tokens that can be minted in this contract."},"functionSelector":"9dfbcde8","id":3282,"mutability":"immutable","name":"MINT_SUPPLY","nameLocation":"1813:11:30","nodeType":"VariableDeclaration","scope":3592,"src":"1788:36:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3281,"name":"uint256","nodeType":"ElementaryTypeName","src":"1788:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":3283,"nodeType":"StructuredDocumentation","src":"1831:62:30","text":"@notice The total number of tokens that have been claimed."},"functionSelector":"ba65912e","id":3285,"mutability":"mutable","name":"noOfTokensClaimed","nameLocation":"1913:17:30","nodeType":"VariableDeclaration","scope":3592,"src":"1898:32:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3284,"name":"uint256","nodeType":"ElementaryTypeName","src":"1898:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":3286,"nodeType":"StructuredDocumentation","src":"1937:58:30","text":"@notice Mapping from the epoch ID to the claim window."},"functionSelector":"dc45def6","id":3291,"mutability":"mutable","name":"claimWindows","nameLocation":"2039:12:30","nodeType":"VariableDeclaration","scope":3592,"src":"2000:51:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$3272_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)"},"typeName":{"id":3290,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2008:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2000:31:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$3272_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3289,"nodeType":"UserDefinedTypeName","pathNode":{"id":3288,"name":"ClaimWindow","nameLocations":["2019:11:30"],"nodeType":"IdentifierPath","referencedDeclaration":3272,"src":"2019:11:30"},"referencedDeclaration":3272,"src":"2019:11:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow"}}},"visibility":"public"},{"constant":false,"documentation":{"id":3292,"nodeType":"StructuredDocumentation","src":"2058:54:30","text":"@notice Mapping from leafhash to the claim status."},"functionSelector":"e3a0ce09","id":3296,"mutability":"mutable","name":"claimStatus","nameLocation":"2149:11:30","nodeType":"VariableDeclaration","scope":3592,"src":"2117:43:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":3295,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2125:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2117:24:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3294,"name":"bool","nodeType":"ElementaryTypeName","src":"2136:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":3297,"nodeType":"StructuredDocumentation","src":"2167:51:30","text":"@notice Event emitted when a payout is claimed."},"eventSelector":"a68c079189004e3175c636199e3e4d2aae420ce461ed29f670552b3eba9d2a03","id":3307,"name":"PayoutClaimed","nameLocation":"2229:13:30","nodeType":"EventDefinition","parameters":{"id":3306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3299,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"2259:7:30","nodeType":"VariableDeclaration","scope":3307,"src":"2243:23:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2243:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3301,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2284:9:30","nodeType":"VariableDeclaration","scope":3307,"src":"2268:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3300,"name":"address","nodeType":"ElementaryTypeName","src":"2268:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3303,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"2303:2:30","nodeType":"VariableDeclaration","scope":3307,"src":"2295:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3302,"name":"uint256","nodeType":"ElementaryTypeName","src":"2295:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3305,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2315:5:30","nodeType":"VariableDeclaration","scope":3307,"src":"2307:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3304,"name":"uint256","nodeType":"ElementaryTypeName","src":"2307:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:79:30"},"src":"2223:99:30"},{"anonymous":false,"documentation":{"id":3308,"nodeType":"StructuredDocumentation","src":"2328:53:30","text":"@notice Event emitted when a claim window is set."},"eventSelector":"91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da","id":3318,"name":"SetEpochMerkleRoot","nameLocation":"2392:18:30","nodeType":"EventDefinition","parameters":{"id":3317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3310,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"2427:7:30","nodeType":"VariableDeclaration","scope":3318,"src":"2411:23:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3309,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2411:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3312,"indexed":true,"mutability":"mutable","name":"merkleRoot","nameLocation":"2452:10:30","nodeType":"VariableDeclaration","scope":3318,"src":"2436:26:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2436:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3314,"indexed":false,"mutability":"mutable","name":"startTime","nameLocation":"2472:9:30","nodeType":"VariableDeclaration","scope":3318,"src":"2464:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3313,"name":"uint256","nodeType":"ElementaryTypeName","src":"2464:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3316,"indexed":false,"mutability":"mutable","name":"endTime","nameLocation":"2491:7:30","nodeType":"VariableDeclaration","scope":3318,"src":"2483:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3315,"name":"uint256","nodeType":"ElementaryTypeName","src":"2483:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2410:89:30"},"src":"2386:114:30"},{"documentation":{"id":3319,"nodeType":"StructuredDocumentation","src":"2506:66:30","text":"@notice Error thrown when the payout has already been claimed."},"errorSelector":"a8ca238e","id":3325,"name":"AlreadyClaimed","nameLocation":"2583:14:30","nodeType":"ErrorDefinition","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3321,"mutability":"mutable","name":"epochId","nameLocation":"2606:7:30","nodeType":"VariableDeclaration","scope":3325,"src":"2598:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2598:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3323,"mutability":"mutable","name":"recipient","nameLocation":"2623:9:30","nodeType":"VariableDeclaration","scope":3325,"src":"2615:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3322,"name":"address","nodeType":"ElementaryTypeName","src":"2615:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2597:36:30"},"src":"2577:57:30"},{"documentation":{"id":3326,"nodeType":"StructuredDocumentation","src":"2640:74:30","text":"@notice Error thrown when the proof provided for the claim is invalid."},"errorSelector":"a04a37c0","id":3332,"name":"InvalidProof","nameLocation":"2725:12:30","nodeType":"ErrorDefinition","parameters":{"id":3331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3328,"mutability":"mutable","name":"epochId","nameLocation":"2746:7:30","nodeType":"VariableDeclaration","scope":3332,"src":"2738:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2738:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3330,"mutability":"mutable","name":"recipient","nameLocation":"2763:9:30","nodeType":"VariableDeclaration","scope":3332,"src":"2755:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3329,"name":"address","nodeType":"ElementaryTypeName","src":"2755:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2737:36:30"},"src":"2719:55:30"},{"documentation":{"id":3333,"nodeType":"StructuredDocumentation","src":"2780:79:30","text":"@notice Error thrown when the claim window is closed or has not yet opened."},"errorSelector":"dbeb4f4d","id":3339,"name":"OutOfClaimWindow","nameLocation":"2870:16:30","nodeType":"ErrorDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"mutability":"mutable","name":"epochId","nameLocation":"2895:7:30","nodeType":"VariableDeclaration","scope":3339,"src":"2887:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2887:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3337,"mutability":"mutable","name":"currentTime","nameLocation":"2912:11:30","nodeType":"VariableDeclaration","scope":3339,"src":"2904:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"2904:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2886:38:30"},"src":"2864:61:30"},{"documentation":{"id":3340,"nodeType":"StructuredDocumentation","src":"2931:83:30","text":"@notice Error thrown when the number of tokens claimed exceeds the mint supply."},"errorSelector":"192d1755","id":3342,"name":"ExceededMintSupply","nameLocation":"3025:18:30","nodeType":"ErrorDefinition","parameters":{"id":3341,"nodeType":"ParameterList","parameters":[],"src":"3043:2:30"},"src":"3019:27:30"},{"documentation":{"id":3343,"nodeType":"StructuredDocumentation","src":"3052:58:30","text":"@notice Error thrown when the epoch ID already exists."},"errorSelector":"ed10979d","id":3347,"name":"EpochIdAlreadyExists","nameLocation":"3121:20:30","nodeType":"ErrorDefinition","parameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"epochId","nameLocation":"3150:7:30","nodeType":"VariableDeclaration","scope":3347,"src":"3142:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3142:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3141:17:30"},"src":"3115:44:30"},{"documentation":{"id":3348,"nodeType":"StructuredDocumentation","src":"3165:58:30","text":"@notice Error thrown when the epoch ID does not exist."},"errorSelector":"84f229dc","id":3352,"name":"EpochIdNotExists","nameLocation":"3234:16:30","nodeType":"ErrorDefinition","parameters":{"id":3351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3350,"mutability":"mutable","name":"epochId","nameLocation":"3259:7:30","nodeType":"VariableDeclaration","scope":3352,"src":"3251:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3251:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3250:17:30"},"src":"3228:40:30"},{"body":{"id":3385,"nodeType":"Block","src":"3874:111:30","statements":[{"expression":{"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3373,"name":"TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"3884:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3374,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3355,"src":"3895:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3884:18:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3376,"nodeType":"ExpressionStatement","src":"3884:18:30"},{"expression":{"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3377,"name":"MINT_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"3912:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3378,"name":"mintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3357,"src":"3926:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3912:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3380,"nodeType":"ExpressionStatement","src":"3912:24:30"},{"expression":{"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3381,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"3946:15:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3382,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"3964:14:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},"src":"3946:32:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},"id":3384,"nodeType":"ExpressionStatement","src":"3946:32:30"}]},"documentation":{"id":3353,"nodeType":"StructuredDocumentation","src":"3274:363:30","text":" @notice Constructor for the AnichessERC1155MerkleClaim contract.\n @param tokenId The token id to be claimed.\n @param mintSupply The total number of tokens that can be minted in this contract.\n @param rewardContract The ERC1155Mintable reward contract interface.\n @param forwarderRegistry The forwarder registry contract."},"id":3386,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3366,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"3825:17:30","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":3367,"kind":"baseConstructorSpecifier","modifierName":{"id":3365,"name":"ForwarderRegistryContext","nameLocations":["3800:24:30"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"3800:24:30"},"nodeType":"ModifierInvocation","src":"3800:43:30"},{"arguments":[{"expression":{"id":3369,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3862:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3866:6:30","memberName":"sender","nodeType":"MemberAccess","src":"3862:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3371,"kind":"baseConstructorSpecifier","modifierName":{"id":3368,"name":"ContractOwnership","nameLocations":["3844:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"3844:17:30"},"nodeType":"ModifierInvocation","src":"3844:29:30"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3355,"mutability":"mutable","name":"tokenId","nameLocation":"3671:7:30","nodeType":"VariableDeclaration","scope":3386,"src":"3663:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3354,"name":"uint256","nodeType":"ElementaryTypeName","src":"3663:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3357,"mutability":"mutable","name":"mintSupply","nameLocation":"3696:10:30","nodeType":"VariableDeclaration","scope":3386,"src":"3688:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3356,"name":"uint256","nodeType":"ElementaryTypeName","src":"3688:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3360,"mutability":"mutable","name":"rewardContract","nameLocation":"3733:14:30","nodeType":"VariableDeclaration","scope":3386,"src":"3716:31:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"},"typeName":{"id":3359,"nodeType":"UserDefinedTypeName","pathNode":{"id":3358,"name":"IERC1155Mintable","nameLocations":["3716:16:30"],"nodeType":"IdentifierPath","referencedDeclaration":978,"src":"3716:16:30"},"referencedDeclaration":978,"src":"3716:16:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":3363,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"3776:17:30","nodeType":"VariableDeclaration","scope":3386,"src":"3757:36:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":3362,"nodeType":"UserDefinedTypeName","pathNode":{"id":3361,"name":"IForwarderRegistry","nameLocations":["3757:18:30"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"3757:18:30"},"referencedDeclaration":727,"src":"3757:18:30","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"3653:146:30"},"returnParameters":{"id":3372,"nodeType":"ParameterList","parameters":[],"src":"3874:0:30"},"scope":3592,"src":"3642:343:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652,1358],"body":{"id":3399,"nodeType":"Block","src":"4150:65:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3395,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4167:28:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4196:10:30","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"4167:39:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4167:41:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3394,"id":3398,"nodeType":"Return","src":"4160:48:30"}]},"documentation":{"id":3387,"nodeType":"StructuredDocumentation","src":"3991:44:30","text":"@inheritdoc ForwarderRegistryContextBase"},"id":3400,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"4049:10:30","nodeType":"FunctionDefinition","overrides":{"id":3391,"nodeType":"OverrideSpecifier","overrides":[{"id":3389,"name":"Context","nameLocations":["4093:7:30"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"4093:7:30"},{"id":3390,"name":"ForwarderRegistryContextBase","nameLocations":["4102:28:30"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"4102:28:30"}],"src":"4084:47:30"},"parameters":{"id":3388,"nodeType":"ParameterList","parameters":[],"src":"4059:2:30"},"returnParameters":{"id":3394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3400,"src":"4141:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3392,"name":"address","nodeType":"ElementaryTypeName","src":"4141:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4140:9:30"},"scope":3592,"src":"4040:175:30","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1367],"body":{"id":3413,"nodeType":"Block","src":"4385:63:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3409,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4402:28:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4431:8:30","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"4402:37:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4402:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3408,"id":3412,"nodeType":"Return","src":"4395:46:30"}]},"documentation":{"id":3401,"nodeType":"StructuredDocumentation","src":"4221:44:30","text":"@inheritdoc ForwarderRegistryContextBase"},"id":3414,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"4279:8:30","nodeType":"FunctionDefinition","overrides":{"id":3405,"nodeType":"OverrideSpecifier","overrides":[{"id":3403,"name":"Context","nameLocations":["4321:7:30"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"4321:7:30"},{"id":3404,"name":"ForwarderRegistryContextBase","nameLocations":["4330:28:30"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"4330:28:30"}],"src":"4312:47:30"},"parameters":{"id":3402,"nodeType":"ParameterList","parameters":[],"src":"4287:2:30"},"returnParameters":{"id":3408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3414,"src":"4369:14:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3406,"name":"bytes","nodeType":"ElementaryTypeName","src":"4369:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4368:16:30"},"scope":3592,"src":"4270:178:30","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3467,"nodeType":"Block","src":"5045:363:30","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3431,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[3400],"referencedDeclaration":3400,"src":"5112:10:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:12:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3426,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"5055:24:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5080:6:30","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"5055:31:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5055:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":3430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5089:22:30","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"5055:56:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5055:70:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3434,"nodeType":"ExpressionStatement","src":"5055:70:30"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3435,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"5140:12:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$3272_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow storage ref)"}},"id":3437,"indexExpression":{"id":3436,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"5153:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5140:21:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"id":3438,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5162:10:30","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":3267,"src":"5140:32:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5184:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5176:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5176:7:30","typeDescriptions":{}}},"id":3442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5176:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5140:46:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3449,"nodeType":"IfStatement","src":"5136:113:30","trueBody":{"id":3448,"nodeType":"Block","src":"5188:61:30","statements":[{"errorCall":{"arguments":[{"id":3445,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"5230:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3444,"name":"EpochIdAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"5209:20:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:29:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3447,"nodeType":"RevertStatement","src":"5202:36:30"}]}},{"expression":{"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3450,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"5259:12:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$3272_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow storage ref)"}},"id":3452,"indexExpression":{"id":3451,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"5272:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5259:21:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3454,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"5295:10:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3455,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"5307:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3456,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"5318:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3453,"name":"ClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"5283:11:30","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ClaimWindow_$3272_storage_ptr_$","typeString":"type(struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer)"}},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5283:43:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_memory_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow memory"}},"src":"5259:67:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"id":3459,"nodeType":"ExpressionStatement","src":"5259:67:30"},{"eventCall":{"arguments":[{"id":3461,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"5361:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3462,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"5370:10:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3463,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"5382:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3464,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"5393:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3460,"name":"SetEpochMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"5342:18:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256,uint256)"}},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:59:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3466,"nodeType":"EmitStatement","src":"5337:64:30"}]},"documentation":{"id":3415,"nodeType":"StructuredDocumentation","src":"4454:476:30","text":" @notice Sets the merkle root for a specific epoch with start and end time.\n @dev Reverts if the _msgSender() is not the owner.\n @dev Reverts if the epoch ID has already been set.\n @dev Emits a SetEpochMerkleRoot event.\n @param epochId The epoch ID for the claim.\n @param merkleRoot The Merkle root of the claim.\n @param startTime The start time of the claim window.\n @param endTime The end time of the claim window."},"functionSelector":"0328a8fc","id":3468,"implemented":true,"kind":"function","modifiers":[],"name":"setEpochMerkleRoot","nameLocation":"4944:18:30","nodeType":"FunctionDefinition","parameters":{"id":3424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3417,"mutability":"mutable","name":"epochId","nameLocation":"4971:7:30","nodeType":"VariableDeclaration","scope":3468,"src":"4963:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4963:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3419,"mutability":"mutable","name":"merkleRoot","nameLocation":"4988:10:30","nodeType":"VariableDeclaration","scope":3468,"src":"4980:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3418,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4980:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3421,"mutability":"mutable","name":"startTime","nameLocation":"5008:9:30","nodeType":"VariableDeclaration","scope":3468,"src":"5000:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3420,"name":"uint256","nodeType":"ElementaryTypeName","src":"5000:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3423,"mutability":"mutable","name":"endTime","nameLocation":"5027:7:30","nodeType":"VariableDeclaration","scope":3468,"src":"5019:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3422,"name":"uint256","nodeType":"ElementaryTypeName","src":"5019:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4962:73:30"},"returnParameters":{"id":3425,"nodeType":"ParameterList","parameters":[],"src":"5045:0:30"},"scope":3592,"src":"4935:473:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3590,"nodeType":"Block","src":"6057:981:30","statements":[{"assignments":[3481],"declarations":[{"constant":false,"id":3481,"mutability":"mutable","name":"claimWindow","nameLocation":"6087:11:30","nodeType":"VariableDeclaration","scope":3590,"src":"6067:31:30","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow"},"typeName":{"id":3480,"nodeType":"UserDefinedTypeName","pathNode":{"id":3479,"name":"ClaimWindow","nameLocations":["6067:11:30"],"nodeType":"IdentifierPath","referencedDeclaration":3272,"src":"6067:11:30"},"referencedDeclaration":3272,"src":"6067:11:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow"}},"visibility":"internal"}],"id":3485,"initialValue":{"baseExpression":{"id":3482,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"6101:12:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$3272_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow storage ref)"}},"id":3484,"indexExpression":{"id":3483,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"6114:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6101:21:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6067:55:30"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3486,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"6136:11:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":3487,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6148:10:30","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":3267,"src":"6136:22:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6170:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6162:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6162:7:30","typeDescriptions":{}}},"id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6136:36:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3498,"nodeType":"IfStatement","src":"6132:99:30","trueBody":{"id":3497,"nodeType":"Block","src":"6174:57:30","statements":[{"errorCall":{"arguments":[{"id":3494,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"6212:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3493,"name":"EpochIdNotExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"6195:16:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6195:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3496,"nodeType":"RevertStatement","src":"6188:32:30"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3499,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6244:5:30","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6250:9:30","memberName":"timestamp","nodeType":"MemberAccess","src":"6244:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3501,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"6262:11:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":3502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6274:9:30","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":3269,"src":"6262:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6244:39:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3504,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6287:5:30","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6293:9:30","memberName":"timestamp","nodeType":"MemberAccess","src":"6287:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3506,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"6305:11:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":3507,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6317:7:30","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":3271,"src":"6305:19:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6287:37:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6244:80:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3517,"nodeType":"IfStatement","src":"6240:160:30","trueBody":{"id":3516,"nodeType":"Block","src":"6326:74:30","statements":[{"errorCall":{"arguments":[{"id":3511,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"6364:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3512,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6373:5:30","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6379:9:30","memberName":"timestamp","nodeType":"MemberAccess","src":"6373:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3510,"name":"OutOfClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"6347:16:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256) pure"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6347:42:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3515,"nodeType":"RevertStatement","src":"6340:49:30"}]}},{"assignments":[3519],"declarations":[{"constant":false,"id":3519,"mutability":"mutable","name":"leaf","nameLocation":"6418:4:30","nodeType":"VariableDeclaration","scope":3590,"src":"6410:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6410:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3527,"initialValue":{"arguments":[{"arguments":[{"id":3523,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"6452:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3524,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"6461:9:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3521,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6435:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6439:12:30","memberName":"encodePacked","nodeType":"MemberAccess","src":"6435:16:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6435:36:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3520,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6425:9:30","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6425:47:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6410:62:30"},{"condition":{"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6486:43:30","subExpression":{"arguments":[{"expression":{"id":3530,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"6500:11:30","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$3272_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":3531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6512:10:30","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":3267,"src":"6500:22:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3532,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"6524:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3528,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"6487:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6493:6:30","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":1452,"src":"6487:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6487:42:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3540,"nodeType":"IfStatement","src":"6482:88:30","trueBody":{"errorCall":{"arguments":[{"id":3536,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"6551:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3537,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"6560:9:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3535,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"6538:12:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6538:32:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3539,"nodeType":"RevertStatement","src":"6531:39:30"}},{"condition":{"baseExpression":{"id":3541,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"6585:11:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3543,"indexExpression":{"id":3542,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"6597:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6585:17:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3549,"nodeType":"IfStatement","src":"6581:64:30","trueBody":{"errorCall":{"arguments":[{"id":3545,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"6626:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3546,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"6635:9:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3544,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"6611:14:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6611:34:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3548,"nodeType":"RevertStatement","src":"6604:41:30"}},{"assignments":[3551],"declarations":[{"constant":false,"id":3551,"mutability":"mutable","name":"updatedNoOfTokensClaimed","nameLocation":"6664:24:30","nodeType":"VariableDeclaration","scope":3590,"src":"6656:32:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3550,"name":"uint256","nodeType":"ElementaryTypeName","src":"6656:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3555,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3552,"name":"noOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"6691:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6711:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6691:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6656:56:30"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3556,"name":"updatedNoOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"6726:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3557,"name":"MINT_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"6753:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6726:38:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3563,"nodeType":"IfStatement","src":"6722:96:30","trueBody":{"id":3562,"nodeType":"Block","src":"6766:52:30","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3559,"name":"ExceededMintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"6787:18:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6787:20:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3561,"nodeType":"RevertStatement","src":"6780:27:30"}]}},{"expression":{"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3564,"name":"noOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"6828:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3565,"name":"updatedNoOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"6848:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6828:44:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3567,"nodeType":"ExpressionStatement","src":"6828:44:30"},{"expression":{"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3568,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"6882:11:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3570,"indexExpression":{"id":3569,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"6894:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6882:17:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6902:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6882:24:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3573,"nodeType":"ExpressionStatement","src":"6882:24:30"},{"expression":{"arguments":[{"id":3577,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"6942:9:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3578,"name":"TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"6953:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6963:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6966:2:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3574,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"6917:15:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6933:8:30","memberName":"safeMint","nodeType":"MemberAccess","referencedDeclaration":963,"src":"6917:24:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory) external"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6917:52:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3582,"nodeType":"ExpressionStatement","src":"6917:52:30"},{"eventCall":{"arguments":[{"id":3584,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"6999:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3585,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"7008:9:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3586,"name":"TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"7019:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7029:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3583,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"6985:13:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256)"}},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6985:46:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3589,"nodeType":"EmitStatement","src":"6980:51:30"}]},"documentation":{"id":3469,"nodeType":"StructuredDocumentation","src":"5414:552:30","text":" @notice Claims the payout for a specific epoch.\n @param epochId The epoch ID for the claim.\n @param proof The Merkle proof for the claim.\n @param recipient The recipient of the payout.\n @dev Throws if the claim window has not been set.\n @dev Throws if the claim window is closed or has not yet opened.\n @dev Throws if the proof provided for the claim is invalid.\n @dev Throws if the payout has already been claimed.\n @dev Throws if the number of tokens claimed exceeds the mint supply."},"functionSelector":"eb02625c","id":3591,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"5980:5:30","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"epochId","nameLocation":"5994:7:30","nodeType":"VariableDeclaration","scope":3591,"src":"5986:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5986:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3474,"mutability":"mutable","name":"proof","nameLocation":"6022:5:30","nodeType":"VariableDeclaration","scope":3591,"src":"6003:24:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6003:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3473,"nodeType":"ArrayTypeName","src":"6003:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3476,"mutability":"mutable","name":"recipient","nameLocation":"6037:9:30","nodeType":"VariableDeclaration","scope":3591,"src":"6029:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3475,"name":"address","nodeType":"ElementaryTypeName","src":"6029:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5985:62:30"},"returnParameters":{"id":3478,"nodeType":"ParameterList","parameters":[],"src":"6057:0:30"},"scope":3592,"src":"5971:1067:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3593,"src":"1163:5877:30","usedErrors":[94,419,3325,3332,3339,3342,3347,3352],"usedEvents":[110,3307,3318]}],"src":"32:7009:30"},"id":30},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"ast":{"absolutePath":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol","exportedSymbols":{"AnichessERC1155MerkleClaim":[3592],"AnichessERC1155MerkleClaimMock":[3642],"IERC1155Mintable":[978],"IForwarderRegistry":[727]},"id":3643,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3594,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:31"},{"absolutePath":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol","file":"../../merkleClaim/AnichessERC1155MerkleClaim.sol","id":3596,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3643,"sourceUnit":3593,"src":"57:92:31","symbolAliases":[{"foreign":{"id":3595,"name":"AnichessERC1155MerkleClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"65:26:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":3598,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3643,"sourceUnit":979,"src":"150:117:31","symbolAliases":[{"foreign":{"id":3597,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"158:16:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":3600,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3643,"sourceUnit":728,"src":"268:114:31","symbolAliases":[{"foreign":{"id":3599,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"276:18:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3601,"name":"AnichessERC1155MerkleClaim","nameLocations":["427:26:31"],"nodeType":"IdentifierPath","referencedDeclaration":3592,"src":"427:26:31"},"id":3602,"nodeType":"InheritanceSpecifier","src":"427:26:31"}],"canonicalName":"AnichessERC1155MerkleClaimMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3642,"linearizedBaseContracts":[3642,3592,32,414,431,80,1368,126,581,713,701],"name":"AnichessERC1155MerkleClaimMock","nameLocation":"393:30:31","nodeType":"ContractDefinition","nodes":[{"body":{"id":3621,"nodeType":"Block","src":"701:2:31","statements":[]},"id":3622,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3615,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"645:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3616,"name":"mintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"654:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3617,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"666:14:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},{"id":3618,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"682:17:31","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":3619,"kind":"baseConstructorSpecifier","modifierName":{"id":3614,"name":"AnichessERC1155MerkleClaim","nameLocations":["618:26:31"],"nodeType":"IdentifierPath","referencedDeclaration":3592,"src":"618:26:31"},"nodeType":"ModifierInvocation","src":"618:82:31"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"tokenId","nameLocation":"489:7:31","nodeType":"VariableDeclaration","scope":3622,"src":"481:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3603,"name":"uint256","nodeType":"ElementaryTypeName","src":"481:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3606,"mutability":"mutable","name":"mintSupply","nameLocation":"514:10:31","nodeType":"VariableDeclaration","scope":3622,"src":"506:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3605,"name":"uint256","nodeType":"ElementaryTypeName","src":"506:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3609,"mutability":"mutable","name":"rewardContract","nameLocation":"551:14:31","nodeType":"VariableDeclaration","scope":3622,"src":"534:31:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"},"typeName":{"id":3608,"nodeType":"UserDefinedTypeName","pathNode":{"id":3607,"name":"IERC1155Mintable","nameLocations":["534:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":978,"src":"534:16:31"},"referencedDeclaration":978,"src":"534:16:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$978","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"594:17:31","nodeType":"VariableDeclaration","scope":3622,"src":"575:36:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":3611,"nodeType":"UserDefinedTypeName","pathNode":{"id":3610,"name":"IForwarderRegistry","nameLocations":["575:18:31"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"575:18:31"},"referencedDeclaration":727,"src":"575:18:31","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"471:146:31"},"returnParameters":{"id":3620,"nodeType":"ParameterList","parameters":[],"src":"701:0:31"},"scope":3642,"src":"460:243:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3630,"nodeType":"Block","src":"764:36:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3627,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[3400],"referencedDeclaration":3400,"src":"781:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"781:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3626,"id":3629,"nodeType":"Return","src":"774:19:31"}]},"functionSelector":"d1a91ff2","id":3631,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"718:11:31","nodeType":"FunctionDefinition","parameters":{"id":3623,"nodeType":"ParameterList","parameters":[],"src":"729:2:31"},"returnParameters":{"id":3626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3631,"src":"755:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3624,"name":"address","nodeType":"ElementaryTypeName","src":"755:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"754:9:31"},"scope":3642,"src":"709:91:31","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3640,"nodeType":"Block","src":"976:34:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3637,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[3414],"referencedDeclaration":3414,"src":"993:8:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"993:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3636,"id":3639,"nodeType":"Return","src":"986:17:31"}]},"documentation":{"id":3632,"nodeType":"StructuredDocumentation","src":"806:105:31","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":3641,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"925:9:31","nodeType":"FunctionDefinition","parameters":{"id":3633,"nodeType":"ParameterList","parameters":[],"src":"934:2:31"},"returnParameters":{"id":3636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3641,"src":"960:14:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3634,"name":"bytes","nodeType":"ElementaryTypeName","src":"960:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"959:16:31"},"scope":3642,"src":"916:94:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3643,"src":"384:628:31","usedErrors":[94,419,3325,3332,3339,3342,3347,3352],"usedEvents":[110,3307,3318]}],"src":"32:981:31"},"id":31}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b13c77d5d723f1567ec2c343e72e4fd60e29fe9ad5ee1fec718aafd9b6edf36464736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 EXTCODECOPY PUSH24 0xD5D723F1567EC2C343E72E4FD60E29FE9AD5EE1FEC718AAF 0xD9 0xB6 0xED RETURN PUSH5 0x64736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"595:4646:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b13c77d5d723f1567ec2c343e72e4fd60e29fe9ad5ee1fec718aafd9b6edf36464736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 EXTCODECOPY PUSH24 0xD5D723F1567EC2C343E72E4FD60E29FE9AD5EE1FEC718AAF 0xD9 0xB6 0xED RETURN PUSH5 0x64736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"595:4646:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bcc96a031a8498034a490bda487dd350ca42425dd4f0ccb72f1b662e903d1f464736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xCC SWAP7 LOG0 BALANCE 0xA8 0x49 DUP1 CALLVALUE LOG4 SWAP1 0xBD LOG4 DUP8 0xDD CALLDATALOAD 0xC LOG4 0x24 0x25 0xDD 0x4F 0xC 0xCB PUSH19 0xF1B662E903D1F464736F6C6343000816003300 ","sourceMap":"319:712:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bcc96a031a8498034a490bda487dd350ca42425dd4f0ccb72f1b662e903d1f464736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xCC SWAP7 LOG0 BALANCE 0xA8 0x49 DUP1 CALLVALUE LOG4 SWAP1 0xBD LOG4 DUP8 0xDD CALLDATALOAD 0xC LOG4 0x24 0x25 0xDD 0x4F 0xC 0xCB PUSH19 0xF1B662E903D1F464736F6C6343000816003300 ","sourceMap":"319:712:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard, Token Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard, Token Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"IERC1155":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.","kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"id":"The identifier to retrieve the balance of.","owner":"The account to retrieve the balance of."},"returns":{"balance":"The balance of `id` owned by account `owner`."}},"balanceOfBatch(address[],uint256[])":{"details":"Reverts if `owners` and `ids` have different lengths.","params":{"ids":"The identifiers to retrieve the balance of.","owners":"The addresses of the token holders"},"returns":{"balances":"The balances of `ids` owned by accounts `owners`."}},"isApprovedForAll(address,address)":{"params":{"operator":"Address of the operator.","owner":"Address of the authorisation giver."},"returns":{"approved":"True if the operator is approved, false if not."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current tokens owner.","ids":"Identifiers of the tokens to transfer.","to":"Address of the new tokens owner.","values":"Amounts of tokens to transfer."}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current token owner.","id":"Identifier of the token to transfer.","to":"Address of the new token owner.","value":"Amount of token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Emits an {ApprovalForAll} event.","params":{"approved":"True to approve the operator, false to revoke its approval.","operator":"Address of the operator."}}},"title":"ERC1155 Multi Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"The identifier to retrieve the balance of.\",\"owner\":\"The account to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of `id` owned by account `owner`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `ids` have different lengths.\",\"params\":{\"ids\":\"The identifiers to retrieve the balance of.\",\"owners\":\"The addresses of the token holders\"},\"returns\":{\"balances\":\"The balances of `ids` owned by accounts `owners`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address of the operator.\",\"owner\":\"Address of the authorisation giver.\"},\"returns\":{\"approved\":\"True if the operator is approved, false if not.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current tokens owner.\",\"ids\":\"Identifiers of the tokens to transfer.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to transfer.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current token owner.\",\"id\":\"Identifier of the token to transfer.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to approve the operator, false to revoke its approval.\",\"operator\":\"Address of the operator.\"}}},\"title\":\"ERC1155 Multi Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Retrieves the balance of `id` owned by account `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Retrieves the balances of `ids` owned by accounts `owners`.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely transfers a batch of tokens.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Safely transfers some token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enables or disables an operator's approval.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xc73c79ec8b1acdaccb4bbdab1f460043ddb27f3b5300389f6ec672bf0f1c7ae6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Retrieves the balance of `id` owned by account `owner`."},"balanceOfBatch(address[],uint256[])":{"notice":"Retrieves the balances of `ids` owned by accounts `owners`."},"isApprovedForAll(address,address)":{"notice":"Retrieves the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Safely transfers a batch of tokens."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Safely transfers some token."},"setApprovalForAll(address,bool)":{"notice":"Enables or disables an operator's approval."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051c3bd954adc78f97c5b4be7e00d0208fe9121878f04fb17007d046f690ea89264736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xC3 0xBD SWAP6 0x4A 0xDC PUSH25 0xF97C5B4BE7E00D0208FE9121878F04FB17007D046F690EA892 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"194:8964:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051c3bd954adc78f97c5b4be7e00d0208fe9121878f04fb17007d046f690ea89264736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xC3 0xBD SWAP6 0x4A 0xDC PUSH25 0xF97C5B4BE7E00D0208FE9121878F04FB17007D046F690EA892 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"194:8964:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207720f09bef43f0fe1672e1082b5229042829d38e1b4590cebc377e2b29697f4c64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x20F09BEF43F0FE1672E1082B5229042829D38E1B4590CEBC CALLDATACOPY PUSH31 0x2B29697F4C64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1279:1391:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207720f09bef43f0fe1672e1082b5229042829d38e1b4590cebc377e2b29697f4c64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x20F09BEF43F0FE1672E1082B5229042829D38E1B4590CEBC CALLDATACOPY PUSH31 0x2B29697F4C64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1279:1391:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:26:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol":{"AnichessOrbsBurnPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"contract IERC1155Burnable[]","name":"_tokens","type":"address[]"},{"internalType":"uint256[][]","name":"tokenIds","type":"uint256[][]"},{"internalType":"uint256[][]","name":"weights","type":"uint256[][]"},{"internalType":"uint256[]","name":"_tiers","type":"uint256[]"},{"internalType":"uint256[]","name":"_tierRewards","type":"uint256[]"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrays","type":"error"},{"inputs":[],"name":"IncorrectTiers","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"NotImplemented","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"claimer","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"}],"name":"TokensBurnt","type":"event"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"getCycleReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"},{"internalType":"address","name":"wallet","type":"address"}],"name":"getUserReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tierRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tiers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshByCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"params":{"_tierRewards":"The list of rewards for each tier.","_tiers":"The list of tiers.","_tokens":"The list of IERC1155Burnable tokens to be approved.","cycleDuration":"The duration of each cycle.","forwarderRegistry":"The forwarder registry contract.","initialTime":"The initial time of the contract.","maxCycle":"The maximum cycle.","tokenIds":"The list of token IDs for each token.","weights":"The list of weights for each token ID."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Anichess ERC1155 Merkle Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2108":{"entryPoint":null,"id":2108,"parameterSlots":9,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@_846":{"entryPoint":null,"id":846,"parameterSlots":0,"returnSlots":0},"@_setApprovedTokens_2215":{"entryPoint":487,"id":2215,"parameterSlots":3,"returnSlots":0},"@_setTiers_2280":{"entryPoint":998,"id":2280,"parameterSlots":2,"returnSlots":0},"@constructorInit_227":{"entryPoint":372,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":324,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":177,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":231,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_array_array_uint256_dyn_dyn_fromMemory":{"entryPoint":1712,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_contract_IERC1155Burnable_dyn_fromMemory":{"entryPoint":1480,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn_fromMemory":{"entryPoint":1610,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_contract_IForwarderRegistry_fromMemory":{"entryPoint":1849,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_uint256t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptrt_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptrt_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":1867,"id":null,"parameterSlots":2,"returnSlots":9},"allocate_memory":{"entryPoint":1366,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_contract_IERC1155Burnable_dyn":{"entryPoint":1417,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2142,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":2176,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1344,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_IERC1155Burnable":{"entryPoint":1455,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:5495:32","nodeType":"YulBlock","src":"0:5495:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"46:95:32","nodeType":"YulBlock","src":"46:95:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:32","nodeType":"YulLiteral","src":"63:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:32","nodeType":"YulLiteral","src":"70:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:32","nodeType":"YulLiteral","src":"75:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:32","nodeType":"YulIdentifier","src":"66:3:32"},"nativeSrc":"66:20:32","nodeType":"YulFunctionCall","src":"66:20:32"}],"functionName":{"name":"mstore","nativeSrc":"56:6:32","nodeType":"YulIdentifier","src":"56:6:32"},"nativeSrc":"56:31:32","nodeType":"YulFunctionCall","src":"56:31:32"},"nativeSrc":"56:31:32","nodeType":"YulExpressionStatement","src":"56:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:32","nodeType":"YulLiteral","src":"103:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:32","nodeType":"YulLiteral","src":"106:4:32","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:32","nodeType":"YulIdentifier","src":"96:6:32"},"nativeSrc":"96:15:32","nodeType":"YulFunctionCall","src":"96:15:32"},"nativeSrc":"96:15:32","nodeType":"YulExpressionStatement","src":"96:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:32","nodeType":"YulLiteral","src":"127:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:32","nodeType":"YulLiteral","src":"130:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:32","nodeType":"YulIdentifier","src":"120:6:32"},"nativeSrc":"120:15:32","nodeType":"YulFunctionCall","src":"120:15:32"},"nativeSrc":"120:15:32","nodeType":"YulExpressionStatement","src":"120:15:32"}]},"name":"panic_error_0x41","nativeSrc":"14:127:32","nodeType":"YulFunctionDefinition","src":"14:127:32"},{"body":{"nativeSrc":"191:230:32","nodeType":"YulBlock","src":"191:230:32","statements":[{"nativeSrc":"201:19:32","nodeType":"YulAssignment","src":"201:19:32","value":{"arguments":[{"kind":"number","nativeSrc":"217:2:32","nodeType":"YulLiteral","src":"217:2:32","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"211:5:32","nodeType":"YulIdentifier","src":"211:5:32"},"nativeSrc":"211:9:32","nodeType":"YulFunctionCall","src":"211:9:32"},"variableNames":[{"name":"memPtr","nativeSrc":"201:6:32","nodeType":"YulIdentifier","src":"201:6:32"}]},{"nativeSrc":"229:58:32","nodeType":"YulVariableDeclaration","src":"229:58:32","value":{"arguments":[{"name":"memPtr","nativeSrc":"251:6:32","nodeType":"YulIdentifier","src":"251:6:32"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"267:4:32","nodeType":"YulIdentifier","src":"267:4:32"},{"kind":"number","nativeSrc":"273:2:32","nodeType":"YulLiteral","src":"273:2:32","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"263:3:32","nodeType":"YulIdentifier","src":"263:3:32"},"nativeSrc":"263:13:32","nodeType":"YulFunctionCall","src":"263:13:32"},{"arguments":[{"kind":"number","nativeSrc":"282:2:32","nodeType":"YulLiteral","src":"282:2:32","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"278:3:32","nodeType":"YulIdentifier","src":"278:3:32"},"nativeSrc":"278:7:32","nodeType":"YulFunctionCall","src":"278:7:32"}],"functionName":{"name":"and","nativeSrc":"259:3:32","nodeType":"YulIdentifier","src":"259:3:32"},"nativeSrc":"259:27:32","nodeType":"YulFunctionCall","src":"259:27:32"}],"functionName":{"name":"add","nativeSrc":"247:3:32","nodeType":"YulIdentifier","src":"247:3:32"},"nativeSrc":"247:40:32","nodeType":"YulFunctionCall","src":"247:40:32"},"variables":[{"name":"newFreePtr","nativeSrc":"233:10:32","nodeType":"YulTypedName","src":"233:10:32","type":""}]},{"body":{"nativeSrc":"362:22:32","nodeType":"YulBlock","src":"362:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"364:16:32","nodeType":"YulIdentifier","src":"364:16:32"},"nativeSrc":"364:18:32","nodeType":"YulFunctionCall","src":"364:18:32"},"nativeSrc":"364:18:32","nodeType":"YulExpressionStatement","src":"364:18:32"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"305:10:32","nodeType":"YulIdentifier","src":"305:10:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"325:2:32","nodeType":"YulLiteral","src":"325:2:32","type":"","value":"64"},{"kind":"number","nativeSrc":"329:1:32","nodeType":"YulLiteral","src":"329:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"321:3:32","nodeType":"YulIdentifier","src":"321:3:32"},"nativeSrc":"321:10:32","nodeType":"YulFunctionCall","src":"321:10:32"},{"kind":"number","nativeSrc":"333:1:32","nodeType":"YulLiteral","src":"333:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"317:3:32","nodeType":"YulIdentifier","src":"317:3:32"},"nativeSrc":"317:18:32","nodeType":"YulFunctionCall","src":"317:18:32"}],"functionName":{"name":"gt","nativeSrc":"302:2:32","nodeType":"YulIdentifier","src":"302:2:32"},"nativeSrc":"302:34:32","nodeType":"YulFunctionCall","src":"302:34:32"},{"arguments":[{"name":"newFreePtr","nativeSrc":"341:10:32","nodeType":"YulIdentifier","src":"341:10:32"},{"name":"memPtr","nativeSrc":"353:6:32","nodeType":"YulIdentifier","src":"353:6:32"}],"functionName":{"name":"lt","nativeSrc":"338:2:32","nodeType":"YulIdentifier","src":"338:2:32"},"nativeSrc":"338:22:32","nodeType":"YulFunctionCall","src":"338:22:32"}],"functionName":{"name":"or","nativeSrc":"299:2:32","nodeType":"YulIdentifier","src":"299:2:32"},"nativeSrc":"299:62:32","nodeType":"YulFunctionCall","src":"299:62:32"},"nativeSrc":"296:88:32","nodeType":"YulIf","src":"296:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"400:2:32","nodeType":"YulLiteral","src":"400:2:32","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"404:10:32","nodeType":"YulIdentifier","src":"404:10:32"}],"functionName":{"name":"mstore","nativeSrc":"393:6:32","nodeType":"YulIdentifier","src":"393:6:32"},"nativeSrc":"393:22:32","nodeType":"YulFunctionCall","src":"393:22:32"},"nativeSrc":"393:22:32","nodeType":"YulExpressionStatement","src":"393:22:32"}]},"name":"allocate_memory","nativeSrc":"146:275:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"171:4:32","nodeType":"YulTypedName","src":"171:4:32","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"180:6:32","nodeType":"YulTypedName","src":"180:6:32","type":""}],"src":"146:275:32"},{"body":{"nativeSrc":"513:114:32","nodeType":"YulBlock","src":"513:114:32","statements":[{"body":{"nativeSrc":"557:22:32","nodeType":"YulBlock","src":"557:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"559:16:32","nodeType":"YulIdentifier","src":"559:16:32"},"nativeSrc":"559:18:32","nodeType":"YulFunctionCall","src":"559:18:32"},"nativeSrc":"559:18:32","nodeType":"YulExpressionStatement","src":"559:18:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"529:6:32","nodeType":"YulIdentifier","src":"529:6:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"545:2:32","nodeType":"YulLiteral","src":"545:2:32","type":"","value":"64"},{"kind":"number","nativeSrc":"549:1:32","nodeType":"YulLiteral","src":"549:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"541:3:32","nodeType":"YulIdentifier","src":"541:3:32"},"nativeSrc":"541:10:32","nodeType":"YulFunctionCall","src":"541:10:32"},{"kind":"number","nativeSrc":"553:1:32","nodeType":"YulLiteral","src":"553:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"537:3:32","nodeType":"YulIdentifier","src":"537:3:32"},"nativeSrc":"537:18:32","nodeType":"YulFunctionCall","src":"537:18:32"}],"functionName":{"name":"gt","nativeSrc":"526:2:32","nodeType":"YulIdentifier","src":"526:2:32"},"nativeSrc":"526:30:32","nodeType":"YulFunctionCall","src":"526:30:32"},"nativeSrc":"523:56:32","nodeType":"YulIf","src":"523:56:32"},{"nativeSrc":"588:33:32","nodeType":"YulAssignment","src":"588:33:32","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"604:1:32","nodeType":"YulLiteral","src":"604:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"607:6:32","nodeType":"YulIdentifier","src":"607:6:32"}],"functionName":{"name":"shl","nativeSrc":"600:3:32","nodeType":"YulIdentifier","src":"600:3:32"},"nativeSrc":"600:14:32","nodeType":"YulFunctionCall","src":"600:14:32"},{"kind":"number","nativeSrc":"616:4:32","nodeType":"YulLiteral","src":"616:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"596:3:32","nodeType":"YulIdentifier","src":"596:3:32"},"nativeSrc":"596:25:32","nodeType":"YulFunctionCall","src":"596:25:32"},"variableNames":[{"name":"size","nativeSrc":"588:4:32","nodeType":"YulIdentifier","src":"588:4:32"}]}]},"name":"array_allocation_size_array_contract_IERC1155Burnable_dyn","nativeSrc":"426:201:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"493:6:32","nodeType":"YulTypedName","src":"493:6:32","type":""}],"returnVariables":[{"name":"size","nativeSrc":"504:4:32","nodeType":"YulTypedName","src":"504:4:32","type":""}],"src":"426:201:32"},{"body":{"nativeSrc":"695:86:32","nodeType":"YulBlock","src":"695:86:32","statements":[{"body":{"nativeSrc":"759:16:32","nodeType":"YulBlock","src":"759:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"768:1:32","nodeType":"YulLiteral","src":"768:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"771:1:32","nodeType":"YulLiteral","src":"771:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"761:6:32","nodeType":"YulIdentifier","src":"761:6:32"},"nativeSrc":"761:12:32","nodeType":"YulFunctionCall","src":"761:12:32"},"nativeSrc":"761:12:32","nodeType":"YulExpressionStatement","src":"761:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"718:5:32","nodeType":"YulIdentifier","src":"718:5:32"},{"arguments":[{"name":"value","nativeSrc":"729:5:32","nodeType":"YulIdentifier","src":"729:5:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"744:3:32","nodeType":"YulLiteral","src":"744:3:32","type":"","value":"160"},{"kind":"number","nativeSrc":"749:1:32","nodeType":"YulLiteral","src":"749:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"740:3:32","nodeType":"YulIdentifier","src":"740:3:32"},"nativeSrc":"740:11:32","nodeType":"YulFunctionCall","src":"740:11:32"},{"kind":"number","nativeSrc":"753:1:32","nodeType":"YulLiteral","src":"753:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"736:3:32","nodeType":"YulIdentifier","src":"736:3:32"},"nativeSrc":"736:19:32","nodeType":"YulFunctionCall","src":"736:19:32"}],"functionName":{"name":"and","nativeSrc":"725:3:32","nodeType":"YulIdentifier","src":"725:3:32"},"nativeSrc":"725:31:32","nodeType":"YulFunctionCall","src":"725:31:32"}],"functionName":{"name":"eq","nativeSrc":"715:2:32","nodeType":"YulIdentifier","src":"715:2:32"},"nativeSrc":"715:42:32","nodeType":"YulFunctionCall","src":"715:42:32"}],"functionName":{"name":"iszero","nativeSrc":"708:6:32","nodeType":"YulIdentifier","src":"708:6:32"},"nativeSrc":"708:50:32","nodeType":"YulFunctionCall","src":"708:50:32"},"nativeSrc":"705:70:32","nodeType":"YulIf","src":"705:70:32"}]},"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"632:149:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"684:5:32","nodeType":"YulTypedName","src":"684:5:32","type":""}],"src":"632:149:32"},{"body":{"nativeSrc":"879:701:32","nodeType":"YulBlock","src":"879:701:32","statements":[{"body":{"nativeSrc":"928:16:32","nodeType":"YulBlock","src":"928:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"937:1:32","nodeType":"YulLiteral","src":"937:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"940:1:32","nodeType":"YulLiteral","src":"940:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"930:6:32","nodeType":"YulIdentifier","src":"930:6:32"},"nativeSrc":"930:12:32","nodeType":"YulFunctionCall","src":"930:12:32"},"nativeSrc":"930:12:32","nodeType":"YulExpressionStatement","src":"930:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"907:6:32","nodeType":"YulIdentifier","src":"907:6:32"},{"kind":"number","nativeSrc":"915:4:32","nodeType":"YulLiteral","src":"915:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"903:3:32","nodeType":"YulIdentifier","src":"903:3:32"},"nativeSrc":"903:17:32","nodeType":"YulFunctionCall","src":"903:17:32"},{"name":"end","nativeSrc":"922:3:32","nodeType":"YulIdentifier","src":"922:3:32"}],"functionName":{"name":"slt","nativeSrc":"899:3:32","nodeType":"YulIdentifier","src":"899:3:32"},"nativeSrc":"899:27:32","nodeType":"YulFunctionCall","src":"899:27:32"}],"functionName":{"name":"iszero","nativeSrc":"892:6:32","nodeType":"YulIdentifier","src":"892:6:32"},"nativeSrc":"892:35:32","nodeType":"YulFunctionCall","src":"892:35:32"},"nativeSrc":"889:55:32","nodeType":"YulIf","src":"889:55:32"},{"nativeSrc":"953:23:32","nodeType":"YulVariableDeclaration","src":"953:23:32","value":{"arguments":[{"name":"offset","nativeSrc":"969:6:32","nodeType":"YulIdentifier","src":"969:6:32"}],"functionName":{"name":"mload","nativeSrc":"963:5:32","nodeType":"YulIdentifier","src":"963:5:32"},"nativeSrc":"963:13:32","nodeType":"YulFunctionCall","src":"963:13:32"},"variables":[{"name":"_1","nativeSrc":"957:2:32","nodeType":"YulTypedName","src":"957:2:32","type":""}]},{"nativeSrc":"985:14:32","nodeType":"YulVariableDeclaration","src":"985:14:32","value":{"kind":"number","nativeSrc":"995:4:32","nodeType":"YulLiteral","src":"995:4:32","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"989:2:32","nodeType":"YulTypedName","src":"989:2:32","type":""}]},{"nativeSrc":"1008:89:32","nodeType":"YulVariableDeclaration","src":"1008:89:32","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1093:2:32","nodeType":"YulIdentifier","src":"1093:2:32"}],"functionName":{"name":"array_allocation_size_array_contract_IERC1155Burnable_dyn","nativeSrc":"1035:57:32","nodeType":"YulIdentifier","src":"1035:57:32"},"nativeSrc":"1035:61:32","nodeType":"YulFunctionCall","src":"1035:61:32"}],"functionName":{"name":"allocate_memory","nativeSrc":"1019:15:32","nodeType":"YulIdentifier","src":"1019:15:32"},"nativeSrc":"1019:78:32","nodeType":"YulFunctionCall","src":"1019:78:32"},"variables":[{"name":"dst","nativeSrc":"1012:3:32","nodeType":"YulTypedName","src":"1012:3:32","type":""}]},{"nativeSrc":"1106:16:32","nodeType":"YulVariableDeclaration","src":"1106:16:32","value":{"name":"dst","nativeSrc":"1119:3:32","nodeType":"YulIdentifier","src":"1119:3:32"},"variables":[{"name":"dst_1","nativeSrc":"1110:5:32","nodeType":"YulTypedName","src":"1110:5:32","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"1138:3:32","nodeType":"YulIdentifier","src":"1138:3:32"},{"name":"_1","nativeSrc":"1143:2:32","nodeType":"YulIdentifier","src":"1143:2:32"}],"functionName":{"name":"mstore","nativeSrc":"1131:6:32","nodeType":"YulIdentifier","src":"1131:6:32"},"nativeSrc":"1131:15:32","nodeType":"YulFunctionCall","src":"1131:15:32"},"nativeSrc":"1131:15:32","nodeType":"YulExpressionStatement","src":"1131:15:32"},{"nativeSrc":"1155:21:32","nodeType":"YulAssignment","src":"1155:21:32","value":{"arguments":[{"name":"dst","nativeSrc":"1166:3:32","nodeType":"YulIdentifier","src":"1166:3:32"},{"kind":"number","nativeSrc":"1171:4:32","nodeType":"YulLiteral","src":"1171:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1162:3:32","nodeType":"YulIdentifier","src":"1162:3:32"},"nativeSrc":"1162:14:32","nodeType":"YulFunctionCall","src":"1162:14:32"},"variableNames":[{"name":"dst","nativeSrc":"1155:3:32","nodeType":"YulIdentifier","src":"1155:3:32"}]},{"nativeSrc":"1185:48:32","nodeType":"YulVariableDeclaration","src":"1185:48:32","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1207:6:32","nodeType":"YulIdentifier","src":"1207:6:32"},{"arguments":[{"kind":"number","nativeSrc":"1219:1:32","nodeType":"YulLiteral","src":"1219:1:32","type":"","value":"5"},{"name":"_1","nativeSrc":"1222:2:32","nodeType":"YulIdentifier","src":"1222:2:32"}],"functionName":{"name":"shl","nativeSrc":"1215:3:32","nodeType":"YulIdentifier","src":"1215:3:32"},"nativeSrc":"1215:10:32","nodeType":"YulFunctionCall","src":"1215:10:32"}],"functionName":{"name":"add","nativeSrc":"1203:3:32","nodeType":"YulIdentifier","src":"1203:3:32"},"nativeSrc":"1203:23:32","nodeType":"YulFunctionCall","src":"1203:23:32"},{"kind":"number","nativeSrc":"1228:4:32","nodeType":"YulLiteral","src":"1228:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1199:3:32","nodeType":"YulIdentifier","src":"1199:3:32"},"nativeSrc":"1199:34:32","nodeType":"YulFunctionCall","src":"1199:34:32"},"variables":[{"name":"srcEnd","nativeSrc":"1189:6:32","nodeType":"YulTypedName","src":"1189:6:32","type":""}]},{"body":{"nativeSrc":"1261:16:32","nodeType":"YulBlock","src":"1261:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1270:1:32","nodeType":"YulLiteral","src":"1270:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1273:1:32","nodeType":"YulLiteral","src":"1273:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1263:6:32","nodeType":"YulIdentifier","src":"1263:6:32"},"nativeSrc":"1263:12:32","nodeType":"YulFunctionCall","src":"1263:12:32"},"nativeSrc":"1263:12:32","nodeType":"YulExpressionStatement","src":"1263:12:32"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"1248:6:32","nodeType":"YulIdentifier","src":"1248:6:32"},{"name":"end","nativeSrc":"1256:3:32","nodeType":"YulIdentifier","src":"1256:3:32"}],"functionName":{"name":"gt","nativeSrc":"1245:2:32","nodeType":"YulIdentifier","src":"1245:2:32"},"nativeSrc":"1245:15:32","nodeType":"YulFunctionCall","src":"1245:15:32"},"nativeSrc":"1242:35:32","nodeType":"YulIf","src":"1242:35:32"},{"nativeSrc":"1286:28:32","nodeType":"YulVariableDeclaration","src":"1286:28:32","value":{"arguments":[{"name":"offset","nativeSrc":"1301:6:32","nodeType":"YulIdentifier","src":"1301:6:32"},{"kind":"number","nativeSrc":"1309:4:32","nodeType":"YulLiteral","src":"1309:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1297:3:32","nodeType":"YulIdentifier","src":"1297:3:32"},"nativeSrc":"1297:17:32","nodeType":"YulFunctionCall","src":"1297:17:32"},"variables":[{"name":"src","nativeSrc":"1290:3:32","nodeType":"YulTypedName","src":"1290:3:32","type":""}]},{"body":{"nativeSrc":"1379:172:32","nodeType":"YulBlock","src":"1379:172:32","statements":[{"nativeSrc":"1393:23:32","nodeType":"YulVariableDeclaration","src":"1393:23:32","value":{"arguments":[{"name":"src","nativeSrc":"1412:3:32","nodeType":"YulIdentifier","src":"1412:3:32"}],"functionName":{"name":"mload","nativeSrc":"1406:5:32","nodeType":"YulIdentifier","src":"1406:5:32"},"nativeSrc":"1406:10:32","nodeType":"YulFunctionCall","src":"1406:10:32"},"variables":[{"name":"value","nativeSrc":"1397:5:32","nodeType":"YulTypedName","src":"1397:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1472:5:32","nodeType":"YulIdentifier","src":"1472:5:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"1429:42:32","nodeType":"YulIdentifier","src":"1429:42:32"},"nativeSrc":"1429:49:32","nodeType":"YulFunctionCall","src":"1429:49:32"},"nativeSrc":"1429:49:32","nodeType":"YulExpressionStatement","src":"1429:49:32"},{"expression":{"arguments":[{"name":"dst","nativeSrc":"1498:3:32","nodeType":"YulIdentifier","src":"1498:3:32"},{"name":"value","nativeSrc":"1503:5:32","nodeType":"YulIdentifier","src":"1503:5:32"}],"functionName":{"name":"mstore","nativeSrc":"1491:6:32","nodeType":"YulIdentifier","src":"1491:6:32"},"nativeSrc":"1491:18:32","nodeType":"YulFunctionCall","src":"1491:18:32"},"nativeSrc":"1491:18:32","nodeType":"YulExpressionStatement","src":"1491:18:32"},{"nativeSrc":"1522:19:32","nodeType":"YulAssignment","src":"1522:19:32","value":{"arguments":[{"name":"dst","nativeSrc":"1533:3:32","nodeType":"YulIdentifier","src":"1533:3:32"},{"name":"_2","nativeSrc":"1538:2:32","nodeType":"YulIdentifier","src":"1538:2:32"}],"functionName":{"name":"add","nativeSrc":"1529:3:32","nodeType":"YulIdentifier","src":"1529:3:32"},"nativeSrc":"1529:12:32","nodeType":"YulFunctionCall","src":"1529:12:32"},"variableNames":[{"name":"dst","nativeSrc":"1522:3:32","nodeType":"YulIdentifier","src":"1522:3:32"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"1334:3:32","nodeType":"YulIdentifier","src":"1334:3:32"},{"name":"srcEnd","nativeSrc":"1339:6:32","nodeType":"YulIdentifier","src":"1339:6:32"}],"functionName":{"name":"lt","nativeSrc":"1331:2:32","nodeType":"YulIdentifier","src":"1331:2:32"},"nativeSrc":"1331:15:32","nodeType":"YulFunctionCall","src":"1331:15:32"},"nativeSrc":"1323:228:32","nodeType":"YulForLoop","post":{"nativeSrc":"1347:23:32","nodeType":"YulBlock","src":"1347:23:32","statements":[{"nativeSrc":"1349:19:32","nodeType":"YulAssignment","src":"1349:19:32","value":{"arguments":[{"name":"src","nativeSrc":"1360:3:32","nodeType":"YulIdentifier","src":"1360:3:32"},{"name":"_2","nativeSrc":"1365:2:32","nodeType":"YulIdentifier","src":"1365:2:32"}],"functionName":{"name":"add","nativeSrc":"1356:3:32","nodeType":"YulIdentifier","src":"1356:3:32"},"nativeSrc":"1356:12:32","nodeType":"YulFunctionCall","src":"1356:12:32"},"variableNames":[{"name":"src","nativeSrc":"1349:3:32","nodeType":"YulIdentifier","src":"1349:3:32"}]}]},"pre":{"nativeSrc":"1327:3:32","nodeType":"YulBlock","src":"1327:3:32","statements":[]},"src":"1323:228:32"},{"nativeSrc":"1560:14:32","nodeType":"YulAssignment","src":"1560:14:32","value":{"name":"dst_1","nativeSrc":"1569:5:32","nodeType":"YulIdentifier","src":"1569:5:32"},"variableNames":[{"name":"array","nativeSrc":"1560:5:32","nodeType":"YulIdentifier","src":"1560:5:32"}]}]},"name":"abi_decode_array_contract_IERC1155Burnable_dyn_fromMemory","nativeSrc":"786:794:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"853:6:32","nodeType":"YulTypedName","src":"853:6:32","type":""},{"name":"end","nativeSrc":"861:3:32","nodeType":"YulTypedName","src":"861:3:32","type":""}],"returnVariables":[{"name":"array","nativeSrc":"869:5:32","nodeType":"YulTypedName","src":"869:5:32","type":""}],"src":"786:794:32"},{"body":{"nativeSrc":"1660:608:32","nodeType":"YulBlock","src":"1660:608:32","statements":[{"body":{"nativeSrc":"1709:16:32","nodeType":"YulBlock","src":"1709:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1718:1:32","nodeType":"YulLiteral","src":"1718:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1721:1:32","nodeType":"YulLiteral","src":"1721:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1711:6:32","nodeType":"YulIdentifier","src":"1711:6:32"},"nativeSrc":"1711:12:32","nodeType":"YulFunctionCall","src":"1711:12:32"},"nativeSrc":"1711:12:32","nodeType":"YulExpressionStatement","src":"1711:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1688:6:32","nodeType":"YulIdentifier","src":"1688:6:32"},{"kind":"number","nativeSrc":"1696:4:32","nodeType":"YulLiteral","src":"1696:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1684:3:32","nodeType":"YulIdentifier","src":"1684:3:32"},"nativeSrc":"1684:17:32","nodeType":"YulFunctionCall","src":"1684:17:32"},{"name":"end","nativeSrc":"1703:3:32","nodeType":"YulIdentifier","src":"1703:3:32"}],"functionName":{"name":"slt","nativeSrc":"1680:3:32","nodeType":"YulIdentifier","src":"1680:3:32"},"nativeSrc":"1680:27:32","nodeType":"YulFunctionCall","src":"1680:27:32"}],"functionName":{"name":"iszero","nativeSrc":"1673:6:32","nodeType":"YulIdentifier","src":"1673:6:32"},"nativeSrc":"1673:35:32","nodeType":"YulFunctionCall","src":"1673:35:32"},"nativeSrc":"1670:55:32","nodeType":"YulIf","src":"1670:55:32"},{"nativeSrc":"1734:23:32","nodeType":"YulVariableDeclaration","src":"1734:23:32","value":{"arguments":[{"name":"offset","nativeSrc":"1750:6:32","nodeType":"YulIdentifier","src":"1750:6:32"}],"functionName":{"name":"mload","nativeSrc":"1744:5:32","nodeType":"YulIdentifier","src":"1744:5:32"},"nativeSrc":"1744:13:32","nodeType":"YulFunctionCall","src":"1744:13:32"},"variables":[{"name":"_1","nativeSrc":"1738:2:32","nodeType":"YulTypedName","src":"1738:2:32","type":""}]},{"nativeSrc":"1766:14:32","nodeType":"YulVariableDeclaration","src":"1766:14:32","value":{"kind":"number","nativeSrc":"1776:4:32","nodeType":"YulLiteral","src":"1776:4:32","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"1770:2:32","nodeType":"YulTypedName","src":"1770:2:32","type":""}]},{"nativeSrc":"1789:89:32","nodeType":"YulVariableDeclaration","src":"1789:89:32","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1874:2:32","nodeType":"YulIdentifier","src":"1874:2:32"}],"functionName":{"name":"array_allocation_size_array_contract_IERC1155Burnable_dyn","nativeSrc":"1816:57:32","nodeType":"YulIdentifier","src":"1816:57:32"},"nativeSrc":"1816:61:32","nodeType":"YulFunctionCall","src":"1816:61:32"}],"functionName":{"name":"allocate_memory","nativeSrc":"1800:15:32","nodeType":"YulIdentifier","src":"1800:15:32"},"nativeSrc":"1800:78:32","nodeType":"YulFunctionCall","src":"1800:78:32"},"variables":[{"name":"dst","nativeSrc":"1793:3:32","nodeType":"YulTypedName","src":"1793:3:32","type":""}]},{"nativeSrc":"1887:16:32","nodeType":"YulVariableDeclaration","src":"1887:16:32","value":{"name":"dst","nativeSrc":"1900:3:32","nodeType":"YulIdentifier","src":"1900:3:32"},"variables":[{"name":"dst_1","nativeSrc":"1891:5:32","nodeType":"YulTypedName","src":"1891:5:32","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"1919:3:32","nodeType":"YulIdentifier","src":"1919:3:32"},{"name":"_1","nativeSrc":"1924:2:32","nodeType":"YulIdentifier","src":"1924:2:32"}],"functionName":{"name":"mstore","nativeSrc":"1912:6:32","nodeType":"YulIdentifier","src":"1912:6:32"},"nativeSrc":"1912:15:32","nodeType":"YulFunctionCall","src":"1912:15:32"},"nativeSrc":"1912:15:32","nodeType":"YulExpressionStatement","src":"1912:15:32"},{"nativeSrc":"1936:21:32","nodeType":"YulAssignment","src":"1936:21:32","value":{"arguments":[{"name":"dst","nativeSrc":"1947:3:32","nodeType":"YulIdentifier","src":"1947:3:32"},{"kind":"number","nativeSrc":"1952:4:32","nodeType":"YulLiteral","src":"1952:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1943:3:32","nodeType":"YulIdentifier","src":"1943:3:32"},"nativeSrc":"1943:14:32","nodeType":"YulFunctionCall","src":"1943:14:32"},"variableNames":[{"name":"dst","nativeSrc":"1936:3:32","nodeType":"YulIdentifier","src":"1936:3:32"}]},{"nativeSrc":"1966:48:32","nodeType":"YulVariableDeclaration","src":"1966:48:32","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1988:6:32","nodeType":"YulIdentifier","src":"1988:6:32"},{"arguments":[{"kind":"number","nativeSrc":"2000:1:32","nodeType":"YulLiteral","src":"2000:1:32","type":"","value":"5"},{"name":"_1","nativeSrc":"2003:2:32","nodeType":"YulIdentifier","src":"2003:2:32"}],"functionName":{"name":"shl","nativeSrc":"1996:3:32","nodeType":"YulIdentifier","src":"1996:3:32"},"nativeSrc":"1996:10:32","nodeType":"YulFunctionCall","src":"1996:10:32"}],"functionName":{"name":"add","nativeSrc":"1984:3:32","nodeType":"YulIdentifier","src":"1984:3:32"},"nativeSrc":"1984:23:32","nodeType":"YulFunctionCall","src":"1984:23:32"},{"kind":"number","nativeSrc":"2009:4:32","nodeType":"YulLiteral","src":"2009:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1980:3:32","nodeType":"YulIdentifier","src":"1980:3:32"},"nativeSrc":"1980:34:32","nodeType":"YulFunctionCall","src":"1980:34:32"},"variables":[{"name":"srcEnd","nativeSrc":"1970:6:32","nodeType":"YulTypedName","src":"1970:6:32","type":""}]},{"body":{"nativeSrc":"2042:16:32","nodeType":"YulBlock","src":"2042:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2051:1:32","nodeType":"YulLiteral","src":"2051:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2054:1:32","nodeType":"YulLiteral","src":"2054:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2044:6:32","nodeType":"YulIdentifier","src":"2044:6:32"},"nativeSrc":"2044:12:32","nodeType":"YulFunctionCall","src":"2044:12:32"},"nativeSrc":"2044:12:32","nodeType":"YulExpressionStatement","src":"2044:12:32"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"2029:6:32","nodeType":"YulIdentifier","src":"2029:6:32"},{"name":"end","nativeSrc":"2037:3:32","nodeType":"YulIdentifier","src":"2037:3:32"}],"functionName":{"name":"gt","nativeSrc":"2026:2:32","nodeType":"YulIdentifier","src":"2026:2:32"},"nativeSrc":"2026:15:32","nodeType":"YulFunctionCall","src":"2026:15:32"},"nativeSrc":"2023:35:32","nodeType":"YulIf","src":"2023:35:32"},{"nativeSrc":"2067:28:32","nodeType":"YulVariableDeclaration","src":"2067:28:32","value":{"arguments":[{"name":"offset","nativeSrc":"2082:6:32","nodeType":"YulIdentifier","src":"2082:6:32"},{"kind":"number","nativeSrc":"2090:4:32","nodeType":"YulLiteral","src":"2090:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2078:3:32","nodeType":"YulIdentifier","src":"2078:3:32"},"nativeSrc":"2078:17:32","nodeType":"YulFunctionCall","src":"2078:17:32"},"variables":[{"name":"src","nativeSrc":"2071:3:32","nodeType":"YulTypedName","src":"2071:3:32","type":""}]},{"body":{"nativeSrc":"2160:79:32","nodeType":"YulBlock","src":"2160:79:32","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"2181:3:32","nodeType":"YulIdentifier","src":"2181:3:32"},{"arguments":[{"name":"src","nativeSrc":"2192:3:32","nodeType":"YulIdentifier","src":"2192:3:32"}],"functionName":{"name":"mload","nativeSrc":"2186:5:32","nodeType":"YulIdentifier","src":"2186:5:32"},"nativeSrc":"2186:10:32","nodeType":"YulFunctionCall","src":"2186:10:32"}],"functionName":{"name":"mstore","nativeSrc":"2174:6:32","nodeType":"YulIdentifier","src":"2174:6:32"},"nativeSrc":"2174:23:32","nodeType":"YulFunctionCall","src":"2174:23:32"},"nativeSrc":"2174:23:32","nodeType":"YulExpressionStatement","src":"2174:23:32"},{"nativeSrc":"2210:19:32","nodeType":"YulAssignment","src":"2210:19:32","value":{"arguments":[{"name":"dst","nativeSrc":"2221:3:32","nodeType":"YulIdentifier","src":"2221:3:32"},{"name":"_2","nativeSrc":"2226:2:32","nodeType":"YulIdentifier","src":"2226:2:32"}],"functionName":{"name":"add","nativeSrc":"2217:3:32","nodeType":"YulIdentifier","src":"2217:3:32"},"nativeSrc":"2217:12:32","nodeType":"YulFunctionCall","src":"2217:12:32"},"variableNames":[{"name":"dst","nativeSrc":"2210:3:32","nodeType":"YulIdentifier","src":"2210:3:32"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"2115:3:32","nodeType":"YulIdentifier","src":"2115:3:32"},{"name":"srcEnd","nativeSrc":"2120:6:32","nodeType":"YulIdentifier","src":"2120:6:32"}],"functionName":{"name":"lt","nativeSrc":"2112:2:32","nodeType":"YulIdentifier","src":"2112:2:32"},"nativeSrc":"2112:15:32","nodeType":"YulFunctionCall","src":"2112:15:32"},"nativeSrc":"2104:135:32","nodeType":"YulForLoop","post":{"nativeSrc":"2128:23:32","nodeType":"YulBlock","src":"2128:23:32","statements":[{"nativeSrc":"2130:19:32","nodeType":"YulAssignment","src":"2130:19:32","value":{"arguments":[{"name":"src","nativeSrc":"2141:3:32","nodeType":"YulIdentifier","src":"2141:3:32"},{"name":"_2","nativeSrc":"2146:2:32","nodeType":"YulIdentifier","src":"2146:2:32"}],"functionName":{"name":"add","nativeSrc":"2137:3:32","nodeType":"YulIdentifier","src":"2137:3:32"},"nativeSrc":"2137:12:32","nodeType":"YulFunctionCall","src":"2137:12:32"},"variableNames":[{"name":"src","nativeSrc":"2130:3:32","nodeType":"YulIdentifier","src":"2130:3:32"}]}]},"pre":{"nativeSrc":"2108:3:32","nodeType":"YulBlock","src":"2108:3:32","statements":[]},"src":"2104:135:32"},{"nativeSrc":"2248:14:32","nodeType":"YulAssignment","src":"2248:14:32","value":{"name":"dst_1","nativeSrc":"2257:5:32","nodeType":"YulIdentifier","src":"2257:5:32"},"variableNames":[{"name":"array","nativeSrc":"2248:5:32","nodeType":"YulIdentifier","src":"2248:5:32"}]}]},"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"1585:683:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1634:6:32","nodeType":"YulTypedName","src":"1634:6:32","type":""},{"name":"end","nativeSrc":"1642:3:32","nodeType":"YulTypedName","src":"1642:3:32","type":""}],"returnVariables":[{"name":"array","nativeSrc":"1650:5:32","nodeType":"YulTypedName","src":"1650:5:32","type":""}],"src":"1585:683:32"},{"body":{"nativeSrc":"2358:851:32","nodeType":"YulBlock","src":"2358:851:32","statements":[{"body":{"nativeSrc":"2407:16:32","nodeType":"YulBlock","src":"2407:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2416:1:32","nodeType":"YulLiteral","src":"2416:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2419:1:32","nodeType":"YulLiteral","src":"2419:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2409:6:32","nodeType":"YulIdentifier","src":"2409:6:32"},"nativeSrc":"2409:12:32","nodeType":"YulFunctionCall","src":"2409:12:32"},"nativeSrc":"2409:12:32","nodeType":"YulExpressionStatement","src":"2409:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2386:6:32","nodeType":"YulIdentifier","src":"2386:6:32"},{"kind":"number","nativeSrc":"2394:4:32","nodeType":"YulLiteral","src":"2394:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2382:3:32","nodeType":"YulIdentifier","src":"2382:3:32"},"nativeSrc":"2382:17:32","nodeType":"YulFunctionCall","src":"2382:17:32"},{"name":"end","nativeSrc":"2401:3:32","nodeType":"YulIdentifier","src":"2401:3:32"}],"functionName":{"name":"slt","nativeSrc":"2378:3:32","nodeType":"YulIdentifier","src":"2378:3:32"},"nativeSrc":"2378:27:32","nodeType":"YulFunctionCall","src":"2378:27:32"}],"functionName":{"name":"iszero","nativeSrc":"2371:6:32","nodeType":"YulIdentifier","src":"2371:6:32"},"nativeSrc":"2371:35:32","nodeType":"YulFunctionCall","src":"2371:35:32"},"nativeSrc":"2368:55:32","nodeType":"YulIf","src":"2368:55:32"},{"nativeSrc":"2432:23:32","nodeType":"YulVariableDeclaration","src":"2432:23:32","value":{"arguments":[{"name":"offset","nativeSrc":"2448:6:32","nodeType":"YulIdentifier","src":"2448:6:32"}],"functionName":{"name":"mload","nativeSrc":"2442:5:32","nodeType":"YulIdentifier","src":"2442:5:32"},"nativeSrc":"2442:13:32","nodeType":"YulFunctionCall","src":"2442:13:32"},"variables":[{"name":"_1","nativeSrc":"2436:2:32","nodeType":"YulTypedName","src":"2436:2:32","type":""}]},{"nativeSrc":"2464:14:32","nodeType":"YulVariableDeclaration","src":"2464:14:32","value":{"kind":"number","nativeSrc":"2474:4:32","nodeType":"YulLiteral","src":"2474:4:32","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"2468:2:32","nodeType":"YulTypedName","src":"2468:2:32","type":""}]},{"nativeSrc":"2487:89:32","nodeType":"YulVariableDeclaration","src":"2487:89:32","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"2572:2:32","nodeType":"YulIdentifier","src":"2572:2:32"}],"functionName":{"name":"array_allocation_size_array_contract_IERC1155Burnable_dyn","nativeSrc":"2514:57:32","nodeType":"YulIdentifier","src":"2514:57:32"},"nativeSrc":"2514:61:32","nodeType":"YulFunctionCall","src":"2514:61:32"}],"functionName":{"name":"allocate_memory","nativeSrc":"2498:15:32","nodeType":"YulIdentifier","src":"2498:15:32"},"nativeSrc":"2498:78:32","nodeType":"YulFunctionCall","src":"2498:78:32"},"variables":[{"name":"dst","nativeSrc":"2491:3:32","nodeType":"YulTypedName","src":"2491:3:32","type":""}]},{"nativeSrc":"2585:16:32","nodeType":"YulVariableDeclaration","src":"2585:16:32","value":{"name":"dst","nativeSrc":"2598:3:32","nodeType":"YulIdentifier","src":"2598:3:32"},"variables":[{"name":"dst_1","nativeSrc":"2589:5:32","nodeType":"YulTypedName","src":"2589:5:32","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"2617:3:32","nodeType":"YulIdentifier","src":"2617:3:32"},{"name":"_1","nativeSrc":"2622:2:32","nodeType":"YulIdentifier","src":"2622:2:32"}],"functionName":{"name":"mstore","nativeSrc":"2610:6:32","nodeType":"YulIdentifier","src":"2610:6:32"},"nativeSrc":"2610:15:32","nodeType":"YulFunctionCall","src":"2610:15:32"},"nativeSrc":"2610:15:32","nodeType":"YulExpressionStatement","src":"2610:15:32"},{"nativeSrc":"2634:19:32","nodeType":"YulAssignment","src":"2634:19:32","value":{"arguments":[{"name":"dst","nativeSrc":"2645:3:32","nodeType":"YulIdentifier","src":"2645:3:32"},{"name":"_2","nativeSrc":"2650:2:32","nodeType":"YulIdentifier","src":"2650:2:32"}],"functionName":{"name":"add","nativeSrc":"2641:3:32","nodeType":"YulIdentifier","src":"2641:3:32"},"nativeSrc":"2641:12:32","nodeType":"YulFunctionCall","src":"2641:12:32"},"variableNames":[{"name":"dst","nativeSrc":"2634:3:32","nodeType":"YulIdentifier","src":"2634:3:32"}]},{"nativeSrc":"2662:46:32","nodeType":"YulVariableDeclaration","src":"2662:46:32","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2684:6:32","nodeType":"YulIdentifier","src":"2684:6:32"},{"arguments":[{"kind":"number","nativeSrc":"2696:1:32","nodeType":"YulLiteral","src":"2696:1:32","type":"","value":"5"},{"name":"_1","nativeSrc":"2699:2:32","nodeType":"YulIdentifier","src":"2699:2:32"}],"functionName":{"name":"shl","nativeSrc":"2692:3:32","nodeType":"YulIdentifier","src":"2692:3:32"},"nativeSrc":"2692:10:32","nodeType":"YulFunctionCall","src":"2692:10:32"}],"functionName":{"name":"add","nativeSrc":"2680:3:32","nodeType":"YulIdentifier","src":"2680:3:32"},"nativeSrc":"2680:23:32","nodeType":"YulFunctionCall","src":"2680:23:32"},{"name":"_2","nativeSrc":"2705:2:32","nodeType":"YulIdentifier","src":"2705:2:32"}],"functionName":{"name":"add","nativeSrc":"2676:3:32","nodeType":"YulIdentifier","src":"2676:3:32"},"nativeSrc":"2676:32:32","nodeType":"YulFunctionCall","src":"2676:32:32"},"variables":[{"name":"srcEnd","nativeSrc":"2666:6:32","nodeType":"YulTypedName","src":"2666:6:32","type":""}]},{"body":{"nativeSrc":"2736:16:32","nodeType":"YulBlock","src":"2736:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2745:1:32","nodeType":"YulLiteral","src":"2745:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2748:1:32","nodeType":"YulLiteral","src":"2748:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2738:6:32","nodeType":"YulIdentifier","src":"2738:6:32"},"nativeSrc":"2738:12:32","nodeType":"YulFunctionCall","src":"2738:12:32"},"nativeSrc":"2738:12:32","nodeType":"YulExpressionStatement","src":"2738:12:32"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"2723:6:32","nodeType":"YulIdentifier","src":"2723:6:32"},{"name":"end","nativeSrc":"2731:3:32","nodeType":"YulIdentifier","src":"2731:3:32"}],"functionName":{"name":"gt","nativeSrc":"2720:2:32","nodeType":"YulIdentifier","src":"2720:2:32"},"nativeSrc":"2720:15:32","nodeType":"YulFunctionCall","src":"2720:15:32"},"nativeSrc":"2717:35:32","nodeType":"YulIf","src":"2717:35:32"},{"nativeSrc":"2761:26:32","nodeType":"YulVariableDeclaration","src":"2761:26:32","value":{"arguments":[{"name":"offset","nativeSrc":"2776:6:32","nodeType":"YulIdentifier","src":"2776:6:32"},{"name":"_2","nativeSrc":"2784:2:32","nodeType":"YulIdentifier","src":"2784:2:32"}],"functionName":{"name":"add","nativeSrc":"2772:3:32","nodeType":"YulIdentifier","src":"2772:3:32"},"nativeSrc":"2772:15:32","nodeType":"YulFunctionCall","src":"2772:15:32"},"variables":[{"name":"src","nativeSrc":"2765:3:32","nodeType":"YulTypedName","src":"2765:3:32","type":""}]},{"body":{"nativeSrc":"2852:328:32","nodeType":"YulBlock","src":"2852:328:32","statements":[{"nativeSrc":"2866:29:32","nodeType":"YulVariableDeclaration","src":"2866:29:32","value":{"arguments":[{"name":"src","nativeSrc":"2891:3:32","nodeType":"YulIdentifier","src":"2891:3:32"}],"functionName":{"name":"mload","nativeSrc":"2885:5:32","nodeType":"YulIdentifier","src":"2885:5:32"},"nativeSrc":"2885:10:32","nodeType":"YulFunctionCall","src":"2885:10:32"},"variables":[{"name":"innerOffset","nativeSrc":"2870:11:32","nodeType":"YulTypedName","src":"2870:11:32","type":""}]},{"body":{"nativeSrc":"2959:74:32","nodeType":"YulBlock","src":"2959:74:32","statements":[{"nativeSrc":"2977:11:32","nodeType":"YulVariableDeclaration","src":"2977:11:32","value":{"kind":"number","nativeSrc":"2987:1:32","nodeType":"YulLiteral","src":"2987:1:32","type":"","value":"0"},"variables":[{"name":"_3","nativeSrc":"2981:2:32","nodeType":"YulTypedName","src":"2981:2:32","type":""}]},{"expression":{"arguments":[{"name":"_3","nativeSrc":"3012:2:32","nodeType":"YulIdentifier","src":"3012:2:32"},{"name":"_3","nativeSrc":"3016:2:32","nodeType":"YulIdentifier","src":"3016:2:32"}],"functionName":{"name":"revert","nativeSrc":"3005:6:32","nodeType":"YulIdentifier","src":"3005:6:32"},"nativeSrc":"3005:14:32","nodeType":"YulFunctionCall","src":"3005:14:32"},"nativeSrc":"3005:14:32","nodeType":"YulExpressionStatement","src":"3005:14:32"}]},"condition":{"arguments":[{"name":"innerOffset","nativeSrc":"2914:11:32","nodeType":"YulIdentifier","src":"2914:11:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2935:2:32","nodeType":"YulLiteral","src":"2935:2:32","type":"","value":"64"},{"kind":"number","nativeSrc":"2939:1:32","nodeType":"YulLiteral","src":"2939:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"2931:3:32","nodeType":"YulIdentifier","src":"2931:3:32"},"nativeSrc":"2931:10:32","nodeType":"YulFunctionCall","src":"2931:10:32"},{"kind":"number","nativeSrc":"2943:1:32","nodeType":"YulLiteral","src":"2943:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2927:3:32","nodeType":"YulIdentifier","src":"2927:3:32"},"nativeSrc":"2927:18:32","nodeType":"YulFunctionCall","src":"2927:18:32"}],"functionName":{"name":"gt","nativeSrc":"2911:2:32","nodeType":"YulIdentifier","src":"2911:2:32"},"nativeSrc":"2911:35:32","nodeType":"YulFunctionCall","src":"2911:35:32"},"nativeSrc":"2908:125:32","nodeType":"YulIf","src":"2908:125:32"},{"expression":{"arguments":[{"name":"dst","nativeSrc":"3053:3:32","nodeType":"YulIdentifier","src":"3053:3:32"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3106:6:32","nodeType":"YulIdentifier","src":"3106:6:32"},{"name":"innerOffset","nativeSrc":"3114:11:32","nodeType":"YulIdentifier","src":"3114:11:32"}],"functionName":{"name":"add","nativeSrc":"3102:3:32","nodeType":"YulIdentifier","src":"3102:3:32"},"nativeSrc":"3102:24:32","nodeType":"YulFunctionCall","src":"3102:24:32"},{"name":"_2","nativeSrc":"3128:2:32","nodeType":"YulIdentifier","src":"3128:2:32"}],"functionName":{"name":"add","nativeSrc":"3098:3:32","nodeType":"YulIdentifier","src":"3098:3:32"},"nativeSrc":"3098:33:32","nodeType":"YulFunctionCall","src":"3098:33:32"},{"name":"end","nativeSrc":"3133:3:32","nodeType":"YulIdentifier","src":"3133:3:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"3058:39:32","nodeType":"YulIdentifier","src":"3058:39:32"},"nativeSrc":"3058:79:32","nodeType":"YulFunctionCall","src":"3058:79:32"}],"functionName":{"name":"mstore","nativeSrc":"3046:6:32","nodeType":"YulIdentifier","src":"3046:6:32"},"nativeSrc":"3046:92:32","nodeType":"YulFunctionCall","src":"3046:92:32"},"nativeSrc":"3046:92:32","nodeType":"YulExpressionStatement","src":"3046:92:32"},{"nativeSrc":"3151:19:32","nodeType":"YulAssignment","src":"3151:19:32","value":{"arguments":[{"name":"dst","nativeSrc":"3162:3:32","nodeType":"YulIdentifier","src":"3162:3:32"},{"name":"_2","nativeSrc":"3167:2:32","nodeType":"YulIdentifier","src":"3167:2:32"}],"functionName":{"name":"add","nativeSrc":"3158:3:32","nodeType":"YulIdentifier","src":"3158:3:32"},"nativeSrc":"3158:12:32","nodeType":"YulFunctionCall","src":"3158:12:32"},"variableNames":[{"name":"dst","nativeSrc":"3151:3:32","nodeType":"YulIdentifier","src":"3151:3:32"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"2807:3:32","nodeType":"YulIdentifier","src":"2807:3:32"},{"name":"srcEnd","nativeSrc":"2812:6:32","nodeType":"YulIdentifier","src":"2812:6:32"}],"functionName":{"name":"lt","nativeSrc":"2804:2:32","nodeType":"YulIdentifier","src":"2804:2:32"},"nativeSrc":"2804:15:32","nodeType":"YulFunctionCall","src":"2804:15:32"},"nativeSrc":"2796:384:32","nodeType":"YulForLoop","post":{"nativeSrc":"2820:23:32","nodeType":"YulBlock","src":"2820:23:32","statements":[{"nativeSrc":"2822:19:32","nodeType":"YulAssignment","src":"2822:19:32","value":{"arguments":[{"name":"src","nativeSrc":"2833:3:32","nodeType":"YulIdentifier","src":"2833:3:32"},{"name":"_2","nativeSrc":"2838:2:32","nodeType":"YulIdentifier","src":"2838:2:32"}],"functionName":{"name":"add","nativeSrc":"2829:3:32","nodeType":"YulIdentifier","src":"2829:3:32"},"nativeSrc":"2829:12:32","nodeType":"YulFunctionCall","src":"2829:12:32"},"variableNames":[{"name":"src","nativeSrc":"2822:3:32","nodeType":"YulIdentifier","src":"2822:3:32"}]}]},"pre":{"nativeSrc":"2800:3:32","nodeType":"YulBlock","src":"2800:3:32","statements":[]},"src":"2796:384:32"},{"nativeSrc":"3189:14:32","nodeType":"YulAssignment","src":"3189:14:32","value":{"name":"dst_1","nativeSrc":"3198:5:32","nodeType":"YulIdentifier","src":"3198:5:32"},"variableNames":[{"name":"array","nativeSrc":"3189:5:32","nodeType":"YulIdentifier","src":"3189:5:32"}]}]},"name":"abi_decode_array_array_uint256_dyn_dyn_fromMemory","nativeSrc":"2273:936:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2332:6:32","nodeType":"YulTypedName","src":"2332:6:32","type":""},{"name":"end","nativeSrc":"2340:3:32","nodeType":"YulTypedName","src":"2340:3:32","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2348:5:32","nodeType":"YulTypedName","src":"2348:5:32","type":""}],"src":"2273:936:32"},{"body":{"nativeSrc":"3294:96:32","nodeType":"YulBlock","src":"3294:96:32","statements":[{"nativeSrc":"3304:22:32","nodeType":"YulAssignment","src":"3304:22:32","value":{"arguments":[{"name":"offset","nativeSrc":"3319:6:32","nodeType":"YulIdentifier","src":"3319:6:32"}],"functionName":{"name":"mload","nativeSrc":"3313:5:32","nodeType":"YulIdentifier","src":"3313:5:32"},"nativeSrc":"3313:13:32","nodeType":"YulFunctionCall","src":"3313:13:32"},"variableNames":[{"name":"value","nativeSrc":"3304:5:32","nodeType":"YulIdentifier","src":"3304:5:32"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3378:5:32","nodeType":"YulIdentifier","src":"3378:5:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"3335:42:32","nodeType":"YulIdentifier","src":"3335:42:32"},"nativeSrc":"3335:49:32","nodeType":"YulFunctionCall","src":"3335:49:32"},"nativeSrc":"3335:49:32","nodeType":"YulExpressionStatement","src":"3335:49:32"}]},"name":"abi_decode_contract_IForwarderRegistry_fromMemory","nativeSrc":"3214:176:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3273:6:32","nodeType":"YulTypedName","src":"3273:6:32","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3284:5:32","nodeType":"YulTypedName","src":"3284:5:32","type":""}],"src":"3214:176:32"},{"body":{"nativeSrc":"3837:1294:32","nodeType":"YulBlock","src":"3837:1294:32","statements":[{"body":{"nativeSrc":"3884:16:32","nodeType":"YulBlock","src":"3884:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3893:1:32","nodeType":"YulLiteral","src":"3893:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3896:1:32","nodeType":"YulLiteral","src":"3896:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3886:6:32","nodeType":"YulIdentifier","src":"3886:6:32"},"nativeSrc":"3886:12:32","nodeType":"YulFunctionCall","src":"3886:12:32"},"nativeSrc":"3886:12:32","nodeType":"YulExpressionStatement","src":"3886:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3858:7:32","nodeType":"YulIdentifier","src":"3858:7:32"},{"name":"headStart","nativeSrc":"3867:9:32","nodeType":"YulIdentifier","src":"3867:9:32"}],"functionName":{"name":"sub","nativeSrc":"3854:3:32","nodeType":"YulIdentifier","src":"3854:3:32"},"nativeSrc":"3854:23:32","nodeType":"YulFunctionCall","src":"3854:23:32"},{"kind":"number","nativeSrc":"3879:3:32","nodeType":"YulLiteral","src":"3879:3:32","type":"","value":"288"}],"functionName":{"name":"slt","nativeSrc":"3850:3:32","nodeType":"YulIdentifier","src":"3850:3:32"},"nativeSrc":"3850:33:32","nodeType":"YulFunctionCall","src":"3850:33:32"},"nativeSrc":"3847:53:32","nodeType":"YulIf","src":"3847:53:32"},{"nativeSrc":"3909:26:32","nodeType":"YulAssignment","src":"3909:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3925:9:32","nodeType":"YulIdentifier","src":"3925:9:32"}],"functionName":{"name":"mload","nativeSrc":"3919:5:32","nodeType":"YulIdentifier","src":"3919:5:32"},"nativeSrc":"3919:16:32","nodeType":"YulFunctionCall","src":"3919:16:32"},"variableNames":[{"name":"value0","nativeSrc":"3909:6:32","nodeType":"YulIdentifier","src":"3909:6:32"}]},{"nativeSrc":"3944:35:32","nodeType":"YulAssignment","src":"3944:35:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3964:9:32","nodeType":"YulIdentifier","src":"3964:9:32"},{"kind":"number","nativeSrc":"3975:2:32","nodeType":"YulLiteral","src":"3975:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3960:3:32","nodeType":"YulIdentifier","src":"3960:3:32"},"nativeSrc":"3960:18:32","nodeType":"YulFunctionCall","src":"3960:18:32"}],"functionName":{"name":"mload","nativeSrc":"3954:5:32","nodeType":"YulIdentifier","src":"3954:5:32"},"nativeSrc":"3954:25:32","nodeType":"YulFunctionCall","src":"3954:25:32"},"variableNames":[{"name":"value1","nativeSrc":"3944:6:32","nodeType":"YulIdentifier","src":"3944:6:32"}]},{"nativeSrc":"3988:35:32","nodeType":"YulAssignment","src":"3988:35:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4008:9:32","nodeType":"YulIdentifier","src":"4008:9:32"},{"kind":"number","nativeSrc":"4019:2:32","nodeType":"YulLiteral","src":"4019:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4004:3:32","nodeType":"YulIdentifier","src":"4004:3:32"},"nativeSrc":"4004:18:32","nodeType":"YulFunctionCall","src":"4004:18:32"}],"functionName":{"name":"mload","nativeSrc":"3998:5:32","nodeType":"YulIdentifier","src":"3998:5:32"},"nativeSrc":"3998:25:32","nodeType":"YulFunctionCall","src":"3998:25:32"},"variableNames":[{"name":"value2","nativeSrc":"3988:6:32","nodeType":"YulIdentifier","src":"3988:6:32"}]},{"nativeSrc":"4032:39:32","nodeType":"YulVariableDeclaration","src":"4032:39:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4056:9:32","nodeType":"YulIdentifier","src":"4056:9:32"},{"kind":"number","nativeSrc":"4067:2:32","nodeType":"YulLiteral","src":"4067:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4052:3:32","nodeType":"YulIdentifier","src":"4052:3:32"},"nativeSrc":"4052:18:32","nodeType":"YulFunctionCall","src":"4052:18:32"}],"functionName":{"name":"mload","nativeSrc":"4046:5:32","nodeType":"YulIdentifier","src":"4046:5:32"},"nativeSrc":"4046:25:32","nodeType":"YulFunctionCall","src":"4046:25:32"},"variables":[{"name":"offset","nativeSrc":"4036:6:32","nodeType":"YulTypedName","src":"4036:6:32","type":""}]},{"nativeSrc":"4080:28:32","nodeType":"YulVariableDeclaration","src":"4080:28:32","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4098:2:32","nodeType":"YulLiteral","src":"4098:2:32","type":"","value":"64"},{"kind":"number","nativeSrc":"4102:1:32","nodeType":"YulLiteral","src":"4102:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4094:3:32","nodeType":"YulIdentifier","src":"4094:3:32"},"nativeSrc":"4094:10:32","nodeType":"YulFunctionCall","src":"4094:10:32"},{"kind":"number","nativeSrc":"4106:1:32","nodeType":"YulLiteral","src":"4106:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4090:3:32","nodeType":"YulIdentifier","src":"4090:3:32"},"nativeSrc":"4090:18:32","nodeType":"YulFunctionCall","src":"4090:18:32"},"variables":[{"name":"_1","nativeSrc":"4084:2:32","nodeType":"YulTypedName","src":"4084:2:32","type":""}]},{"body":{"nativeSrc":"4135:16:32","nodeType":"YulBlock","src":"4135:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4144:1:32","nodeType":"YulLiteral","src":"4144:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4147:1:32","nodeType":"YulLiteral","src":"4147:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4137:6:32","nodeType":"YulIdentifier","src":"4137:6:32"},"nativeSrc":"4137:12:32","nodeType":"YulFunctionCall","src":"4137:12:32"},"nativeSrc":"4137:12:32","nodeType":"YulExpressionStatement","src":"4137:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4123:6:32","nodeType":"YulIdentifier","src":"4123:6:32"},{"name":"_1","nativeSrc":"4131:2:32","nodeType":"YulIdentifier","src":"4131:2:32"}],"functionName":{"name":"gt","nativeSrc":"4120:2:32","nodeType":"YulIdentifier","src":"4120:2:32"},"nativeSrc":"4120:14:32","nodeType":"YulFunctionCall","src":"4120:14:32"},"nativeSrc":"4117:34:32","nodeType":"YulIf","src":"4117:34:32"},{"nativeSrc":"4160:100:32","nodeType":"YulAssignment","src":"4160:100:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4232:9:32","nodeType":"YulIdentifier","src":"4232:9:32"},{"name":"offset","nativeSrc":"4243:6:32","nodeType":"YulIdentifier","src":"4243:6:32"}],"functionName":{"name":"add","nativeSrc":"4228:3:32","nodeType":"YulIdentifier","src":"4228:3:32"},"nativeSrc":"4228:22:32","nodeType":"YulFunctionCall","src":"4228:22:32"},{"name":"dataEnd","nativeSrc":"4252:7:32","nodeType":"YulIdentifier","src":"4252:7:32"}],"functionName":{"name":"abi_decode_array_contract_IERC1155Burnable_dyn_fromMemory","nativeSrc":"4170:57:32","nodeType":"YulIdentifier","src":"4170:57:32"},"nativeSrc":"4170:90:32","nodeType":"YulFunctionCall","src":"4170:90:32"},"variableNames":[{"name":"value3","nativeSrc":"4160:6:32","nodeType":"YulIdentifier","src":"4160:6:32"}]},{"nativeSrc":"4269:42:32","nodeType":"YulVariableDeclaration","src":"4269:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4295:9:32","nodeType":"YulIdentifier","src":"4295:9:32"},{"kind":"number","nativeSrc":"4306:3:32","nodeType":"YulLiteral","src":"4306:3:32","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4291:3:32","nodeType":"YulIdentifier","src":"4291:3:32"},"nativeSrc":"4291:19:32","nodeType":"YulFunctionCall","src":"4291:19:32"}],"functionName":{"name":"mload","nativeSrc":"4285:5:32","nodeType":"YulIdentifier","src":"4285:5:32"},"nativeSrc":"4285:26:32","nodeType":"YulFunctionCall","src":"4285:26:32"},"variables":[{"name":"offset_1","nativeSrc":"4273:8:32","nodeType":"YulTypedName","src":"4273:8:32","type":""}]},{"body":{"nativeSrc":"4340:16:32","nodeType":"YulBlock","src":"4340:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4349:1:32","nodeType":"YulLiteral","src":"4349:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4352:1:32","nodeType":"YulLiteral","src":"4352:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4342:6:32","nodeType":"YulIdentifier","src":"4342:6:32"},"nativeSrc":"4342:12:32","nodeType":"YulFunctionCall","src":"4342:12:32"},"nativeSrc":"4342:12:32","nodeType":"YulExpressionStatement","src":"4342:12:32"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4326:8:32","nodeType":"YulIdentifier","src":"4326:8:32"},{"name":"_1","nativeSrc":"4336:2:32","nodeType":"YulIdentifier","src":"4336:2:32"}],"functionName":{"name":"gt","nativeSrc":"4323:2:32","nodeType":"YulIdentifier","src":"4323:2:32"},"nativeSrc":"4323:16:32","nodeType":"YulFunctionCall","src":"4323:16:32"},"nativeSrc":"4320:36:32","nodeType":"YulIf","src":"4320:36:32"},{"nativeSrc":"4365:94:32","nodeType":"YulAssignment","src":"4365:94:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4429:9:32","nodeType":"YulIdentifier","src":"4429:9:32"},{"name":"offset_1","nativeSrc":"4440:8:32","nodeType":"YulIdentifier","src":"4440:8:32"}],"functionName":{"name":"add","nativeSrc":"4425:3:32","nodeType":"YulIdentifier","src":"4425:3:32"},"nativeSrc":"4425:24:32","nodeType":"YulFunctionCall","src":"4425:24:32"},{"name":"dataEnd","nativeSrc":"4451:7:32","nodeType":"YulIdentifier","src":"4451:7:32"}],"functionName":{"name":"abi_decode_array_array_uint256_dyn_dyn_fromMemory","nativeSrc":"4375:49:32","nodeType":"YulIdentifier","src":"4375:49:32"},"nativeSrc":"4375:84:32","nodeType":"YulFunctionCall","src":"4375:84:32"},"variableNames":[{"name":"value4","nativeSrc":"4365:6:32","nodeType":"YulIdentifier","src":"4365:6:32"}]},{"nativeSrc":"4468:42:32","nodeType":"YulVariableDeclaration","src":"4468:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4494:9:32","nodeType":"YulIdentifier","src":"4494:9:32"},{"kind":"number","nativeSrc":"4505:3:32","nodeType":"YulLiteral","src":"4505:3:32","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4490:3:32","nodeType":"YulIdentifier","src":"4490:3:32"},"nativeSrc":"4490:19:32","nodeType":"YulFunctionCall","src":"4490:19:32"}],"functionName":{"name":"mload","nativeSrc":"4484:5:32","nodeType":"YulIdentifier","src":"4484:5:32"},"nativeSrc":"4484:26:32","nodeType":"YulFunctionCall","src":"4484:26:32"},"variables":[{"name":"offset_2","nativeSrc":"4472:8:32","nodeType":"YulTypedName","src":"4472:8:32","type":""}]},{"body":{"nativeSrc":"4539:16:32","nodeType":"YulBlock","src":"4539:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4548:1:32","nodeType":"YulLiteral","src":"4548:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4551:1:32","nodeType":"YulLiteral","src":"4551:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4541:6:32","nodeType":"YulIdentifier","src":"4541:6:32"},"nativeSrc":"4541:12:32","nodeType":"YulFunctionCall","src":"4541:12:32"},"nativeSrc":"4541:12:32","nodeType":"YulExpressionStatement","src":"4541:12:32"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4525:8:32","nodeType":"YulIdentifier","src":"4525:8:32"},{"name":"_1","nativeSrc":"4535:2:32","nodeType":"YulIdentifier","src":"4535:2:32"}],"functionName":{"name":"gt","nativeSrc":"4522:2:32","nodeType":"YulIdentifier","src":"4522:2:32"},"nativeSrc":"4522:16:32","nodeType":"YulFunctionCall","src":"4522:16:32"},"nativeSrc":"4519:36:32","nodeType":"YulIf","src":"4519:36:32"},{"nativeSrc":"4564:94:32","nodeType":"YulAssignment","src":"4564:94:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4628:9:32","nodeType":"YulIdentifier","src":"4628:9:32"},{"name":"offset_2","nativeSrc":"4639:8:32","nodeType":"YulIdentifier","src":"4639:8:32"}],"functionName":{"name":"add","nativeSrc":"4624:3:32","nodeType":"YulIdentifier","src":"4624:3:32"},"nativeSrc":"4624:24:32","nodeType":"YulFunctionCall","src":"4624:24:32"},{"name":"dataEnd","nativeSrc":"4650:7:32","nodeType":"YulIdentifier","src":"4650:7:32"}],"functionName":{"name":"abi_decode_array_array_uint256_dyn_dyn_fromMemory","nativeSrc":"4574:49:32","nodeType":"YulIdentifier","src":"4574:49:32"},"nativeSrc":"4574:84:32","nodeType":"YulFunctionCall","src":"4574:84:32"},"variableNames":[{"name":"value5","nativeSrc":"4564:6:32","nodeType":"YulIdentifier","src":"4564:6:32"}]},{"nativeSrc":"4667:42:32","nodeType":"YulVariableDeclaration","src":"4667:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4693:9:32","nodeType":"YulIdentifier","src":"4693:9:32"},{"kind":"number","nativeSrc":"4704:3:32","nodeType":"YulLiteral","src":"4704:3:32","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"4689:3:32","nodeType":"YulIdentifier","src":"4689:3:32"},"nativeSrc":"4689:19:32","nodeType":"YulFunctionCall","src":"4689:19:32"}],"functionName":{"name":"mload","nativeSrc":"4683:5:32","nodeType":"YulIdentifier","src":"4683:5:32"},"nativeSrc":"4683:26:32","nodeType":"YulFunctionCall","src":"4683:26:32"},"variables":[{"name":"offset_3","nativeSrc":"4671:8:32","nodeType":"YulTypedName","src":"4671:8:32","type":""}]},{"body":{"nativeSrc":"4738:16:32","nodeType":"YulBlock","src":"4738:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4747:1:32","nodeType":"YulLiteral","src":"4747:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4750:1:32","nodeType":"YulLiteral","src":"4750:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4740:6:32","nodeType":"YulIdentifier","src":"4740:6:32"},"nativeSrc":"4740:12:32","nodeType":"YulFunctionCall","src":"4740:12:32"},"nativeSrc":"4740:12:32","nodeType":"YulExpressionStatement","src":"4740:12:32"}]},"condition":{"arguments":[{"name":"offset_3","nativeSrc":"4724:8:32","nodeType":"YulIdentifier","src":"4724:8:32"},{"name":"_1","nativeSrc":"4734:2:32","nodeType":"YulIdentifier","src":"4734:2:32"}],"functionName":{"name":"gt","nativeSrc":"4721:2:32","nodeType":"YulIdentifier","src":"4721:2:32"},"nativeSrc":"4721:16:32","nodeType":"YulFunctionCall","src":"4721:16:32"},"nativeSrc":"4718:36:32","nodeType":"YulIf","src":"4718:36:32"},{"nativeSrc":"4763:84:32","nodeType":"YulAssignment","src":"4763:84:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4817:9:32","nodeType":"YulIdentifier","src":"4817:9:32"},{"name":"offset_3","nativeSrc":"4828:8:32","nodeType":"YulIdentifier","src":"4828:8:32"}],"functionName":{"name":"add","nativeSrc":"4813:3:32","nodeType":"YulIdentifier","src":"4813:3:32"},"nativeSrc":"4813:24:32","nodeType":"YulFunctionCall","src":"4813:24:32"},{"name":"dataEnd","nativeSrc":"4839:7:32","nodeType":"YulIdentifier","src":"4839:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"4773:39:32","nodeType":"YulIdentifier","src":"4773:39:32"},"nativeSrc":"4773:74:32","nodeType":"YulFunctionCall","src":"4773:74:32"},"variableNames":[{"name":"value6","nativeSrc":"4763:6:32","nodeType":"YulIdentifier","src":"4763:6:32"}]},{"nativeSrc":"4856:42:32","nodeType":"YulVariableDeclaration","src":"4856:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4882:9:32","nodeType":"YulIdentifier","src":"4882:9:32"},{"kind":"number","nativeSrc":"4893:3:32","nodeType":"YulLiteral","src":"4893:3:32","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"4878:3:32","nodeType":"YulIdentifier","src":"4878:3:32"},"nativeSrc":"4878:19:32","nodeType":"YulFunctionCall","src":"4878:19:32"}],"functionName":{"name":"mload","nativeSrc":"4872:5:32","nodeType":"YulIdentifier","src":"4872:5:32"},"nativeSrc":"4872:26:32","nodeType":"YulFunctionCall","src":"4872:26:32"},"variables":[{"name":"offset_4","nativeSrc":"4860:8:32","nodeType":"YulTypedName","src":"4860:8:32","type":""}]},{"body":{"nativeSrc":"4927:16:32","nodeType":"YulBlock","src":"4927:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4936:1:32","nodeType":"YulLiteral","src":"4936:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4939:1:32","nodeType":"YulLiteral","src":"4939:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4929:6:32","nodeType":"YulIdentifier","src":"4929:6:32"},"nativeSrc":"4929:12:32","nodeType":"YulFunctionCall","src":"4929:12:32"},"nativeSrc":"4929:12:32","nodeType":"YulExpressionStatement","src":"4929:12:32"}]},"condition":{"arguments":[{"name":"offset_4","nativeSrc":"4913:8:32","nodeType":"YulIdentifier","src":"4913:8:32"},{"name":"_1","nativeSrc":"4923:2:32","nodeType":"YulIdentifier","src":"4923:2:32"}],"functionName":{"name":"gt","nativeSrc":"4910:2:32","nodeType":"YulIdentifier","src":"4910:2:32"},"nativeSrc":"4910:16:32","nodeType":"YulFunctionCall","src":"4910:16:32"},"nativeSrc":"4907:36:32","nodeType":"YulIf","src":"4907:36:32"},{"nativeSrc":"4952:84:32","nodeType":"YulAssignment","src":"4952:84:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5006:9:32","nodeType":"YulIdentifier","src":"5006:9:32"},{"name":"offset_4","nativeSrc":"5017:8:32","nodeType":"YulIdentifier","src":"5017:8:32"}],"functionName":{"name":"add","nativeSrc":"5002:3:32","nodeType":"YulIdentifier","src":"5002:3:32"},"nativeSrc":"5002:24:32","nodeType":"YulFunctionCall","src":"5002:24:32"},{"name":"dataEnd","nativeSrc":"5028:7:32","nodeType":"YulIdentifier","src":"5028:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nativeSrc":"4962:39:32","nodeType":"YulIdentifier","src":"4962:39:32"},"nativeSrc":"4962:74:32","nodeType":"YulFunctionCall","src":"4962:74:32"},"variableNames":[{"name":"value7","nativeSrc":"4952:6:32","nodeType":"YulIdentifier","src":"4952:6:32"}]},{"nativeSrc":"5045:80:32","nodeType":"YulAssignment","src":"5045:80:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5109:9:32","nodeType":"YulIdentifier","src":"5109:9:32"},{"kind":"number","nativeSrc":"5120:3:32","nodeType":"YulLiteral","src":"5120:3:32","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"5105:3:32","nodeType":"YulIdentifier","src":"5105:3:32"},"nativeSrc":"5105:19:32","nodeType":"YulFunctionCall","src":"5105:19:32"}],"functionName":{"name":"abi_decode_contract_IForwarderRegistry_fromMemory","nativeSrc":"5055:49:32","nodeType":"YulIdentifier","src":"5055:49:32"},"nativeSrc":"5055:70:32","nodeType":"YulFunctionCall","src":"5055:70:32"},"variableNames":[{"name":"value8","nativeSrc":"5045:6:32","nodeType":"YulIdentifier","src":"5045:6:32"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptrt_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptrt_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"3395:1736:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3739:9:32","nodeType":"YulTypedName","src":"3739:9:32","type":""},{"name":"dataEnd","nativeSrc":"3750:7:32","nodeType":"YulTypedName","src":"3750:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3762:6:32","nodeType":"YulTypedName","src":"3762:6:32","type":""},{"name":"value1","nativeSrc":"3770:6:32","nodeType":"YulTypedName","src":"3770:6:32","type":""},{"name":"value2","nativeSrc":"3778:6:32","nodeType":"YulTypedName","src":"3778:6:32","type":""},{"name":"value3","nativeSrc":"3786:6:32","nodeType":"YulTypedName","src":"3786:6:32","type":""},{"name":"value4","nativeSrc":"3794:6:32","nodeType":"YulTypedName","src":"3794:6:32","type":""},{"name":"value5","nativeSrc":"3802:6:32","nodeType":"YulTypedName","src":"3802:6:32","type":""},{"name":"value6","nativeSrc":"3810:6:32","nodeType":"YulTypedName","src":"3810:6:32","type":""},{"name":"value7","nativeSrc":"3818:6:32","nodeType":"YulTypedName","src":"3818:6:32","type":""},{"name":"value8","nativeSrc":"3826:6:32","nodeType":"YulTypedName","src":"3826:6:32","type":""}],"src":"3395:1736:32"},{"body":{"nativeSrc":"5185:176:32","nodeType":"YulBlock","src":"5185:176:32","statements":[{"nativeSrc":"5195:17:32","nodeType":"YulAssignment","src":"5195:17:32","value":{"arguments":[{"name":"x","nativeSrc":"5207:1:32","nodeType":"YulIdentifier","src":"5207:1:32"},{"name":"y","nativeSrc":"5210:1:32","nodeType":"YulIdentifier","src":"5210:1:32"}],"functionName":{"name":"sub","nativeSrc":"5203:3:32","nodeType":"YulIdentifier","src":"5203:3:32"},"nativeSrc":"5203:9:32","nodeType":"YulFunctionCall","src":"5203:9:32"},"variableNames":[{"name":"diff","nativeSrc":"5195:4:32","nodeType":"YulIdentifier","src":"5195:4:32"}]},{"body":{"nativeSrc":"5244:111:32","nodeType":"YulBlock","src":"5244:111:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5265:1:32","nodeType":"YulLiteral","src":"5265:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"5272:3:32","nodeType":"YulLiteral","src":"5272:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"5277:10:32","nodeType":"YulLiteral","src":"5277:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"5268:3:32","nodeType":"YulIdentifier","src":"5268:3:32"},"nativeSrc":"5268:20:32","nodeType":"YulFunctionCall","src":"5268:20:32"}],"functionName":{"name":"mstore","nativeSrc":"5258:6:32","nodeType":"YulIdentifier","src":"5258:6:32"},"nativeSrc":"5258:31:32","nodeType":"YulFunctionCall","src":"5258:31:32"},"nativeSrc":"5258:31:32","nodeType":"YulExpressionStatement","src":"5258:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5309:1:32","nodeType":"YulLiteral","src":"5309:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"5312:4:32","nodeType":"YulLiteral","src":"5312:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5302:6:32","nodeType":"YulIdentifier","src":"5302:6:32"},"nativeSrc":"5302:15:32","nodeType":"YulFunctionCall","src":"5302:15:32"},"nativeSrc":"5302:15:32","nodeType":"YulExpressionStatement","src":"5302:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5337:1:32","nodeType":"YulLiteral","src":"5337:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5340:4:32","nodeType":"YulLiteral","src":"5340:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5330:6:32","nodeType":"YulIdentifier","src":"5330:6:32"},"nativeSrc":"5330:15:32","nodeType":"YulFunctionCall","src":"5330:15:32"},"nativeSrc":"5330:15:32","nodeType":"YulExpressionStatement","src":"5330:15:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5227:4:32","nodeType":"YulIdentifier","src":"5227:4:32"},{"name":"x","nativeSrc":"5233:1:32","nodeType":"YulIdentifier","src":"5233:1:32"}],"functionName":{"name":"gt","nativeSrc":"5224:2:32","nodeType":"YulIdentifier","src":"5224:2:32"},"nativeSrc":"5224:11:32","nodeType":"YulFunctionCall","src":"5224:11:32"},"nativeSrc":"5221:134:32","nodeType":"YulIf","src":"5221:134:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"5136:225:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5167:1:32","nodeType":"YulTypedName","src":"5167:1:32","type":""},{"name":"y","nativeSrc":"5170:1:32","nodeType":"YulTypedName","src":"5170:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5176:4:32","nodeType":"YulTypedName","src":"5176:4:32","type":""}],"src":"5136:225:32"},{"body":{"nativeSrc":"5398:95:32","nodeType":"YulBlock","src":"5398:95:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5415:1:32","nodeType":"YulLiteral","src":"5415:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"5422:3:32","nodeType":"YulLiteral","src":"5422:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"5427:10:32","nodeType":"YulLiteral","src":"5427:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"5418:3:32","nodeType":"YulIdentifier","src":"5418:3:32"},"nativeSrc":"5418:20:32","nodeType":"YulFunctionCall","src":"5418:20:32"}],"functionName":{"name":"mstore","nativeSrc":"5408:6:32","nodeType":"YulIdentifier","src":"5408:6:32"},"nativeSrc":"5408:31:32","nodeType":"YulFunctionCall","src":"5408:31:32"},"nativeSrc":"5408:31:32","nodeType":"YulExpressionStatement","src":"5408:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5455:1:32","nodeType":"YulLiteral","src":"5455:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"5458:4:32","nodeType":"YulLiteral","src":"5458:4:32","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5448:6:32","nodeType":"YulIdentifier","src":"5448:6:32"},"nativeSrc":"5448:15:32","nodeType":"YulFunctionCall","src":"5448:15:32"},"nativeSrc":"5448:15:32","nodeType":"YulExpressionStatement","src":"5448:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5479:1:32","nodeType":"YulLiteral","src":"5479:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5482:4:32","nodeType":"YulLiteral","src":"5482:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5472:6:32","nodeType":"YulIdentifier","src":"5472:6:32"},"nativeSrc":"5472:15:32","nodeType":"YulFunctionCall","src":"5472:15:32"},"nativeSrc":"5472:15:32","nodeType":"YulExpressionStatement","src":"5472:15:32"}]},"name":"panic_error_0x32","nativeSrc":"5366:127:32","nodeType":"YulFunctionDefinition","src":"5366:127:32"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_contract_IERC1155Burnable_dyn(length) -> size\n    {\n        if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function validator_revert_contract_IERC1155Burnable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_array_contract_IERC1155Burnable_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_IERC1155Burnable_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, shl(5, _1)), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := mload(src)\n            validator_revert_contract_IERC1155Burnable(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_IERC1155Burnable_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, shl(5, _1)), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_array_uint256_dyn_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_IERC1155Burnable_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, sub(shl(64, 1), 1))\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_array_uint256_dyn_fromMemory(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_contract_IForwarderRegistry_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_contract_IERC1155Burnable(value)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptrt_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptrt_array$_t_array$_t_uint256_$dyn_memory_ptr_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        let offset := mload(add(headStart, 96))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value3 := abi_decode_array_contract_IERC1155Burnable_dyn_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 128))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value4 := abi_decode_array_array_uint256_dyn_dyn_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 160))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value5 := abi_decode_array_array_uint256_dyn_dyn_fromMemory(add(headStart, offset_2), dataEnd)\n        let offset_3 := mload(add(headStart, 192))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value6 := abi_decode_array_uint256_dyn_fromMemory(add(headStart, offset_3), dataEnd)\n        let offset_4 := mload(add(headStart, 224))\n        if gt(offset_4, _1) { revert(0, 0) }\n        value7 := abi_decode_array_uint256_dyn_fromMemory(add(headStart, offset_4), dataEnd)\n        value8 := abi_decode_contract_IForwarderRegistry_fromMemory(add(headStart, 256))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101006040523480156200001257600080fd5b5060405162001b3a38038062001b3a83398101604081905262000035916200074b565b6001600160a01b0381166080523362000063630271189760e51b60016200005b620000b1565b9190620000e7565b62000079816200007262000144565b9062000174565b5060a089905260c088905260e087905262000096868686620001e7565b620000a28383620003e6565b50505050505050505062000896565b600080620000e160017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6200085e565b92915050565b600160e01b6001600160e01b031983160162000116576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b600080620000e160017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6200085e565b6001600160a01b03811615620001cb5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001e36307f5828d60e41b60016200005b620000b1565b5050565b81518351141580620001fb57508051835114155b156200021a576040516335e83ac360e01b815260040160405180910390fd5b60005b8351811015620003e05760016004600086848151811062000242576200024262000880565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555081818151811062000296576200029662000880565b602002602001015151838281518110620002b457620002b462000880565b60200260200101515114620002dc576040516335e83ac360e01b815260040160405180910390fd5b60005b838281518110620002f457620002f462000880565b602002602001015151811015620003d6578282815181106200031a576200031a62000880565b6020026020010151818151811062000336576200033662000880565b60200260200101516005600087858151811062000357576200035762000880565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086858151811062000396576200039662000880565b60200260200101518481518110620003b257620003b262000880565b602090810291909101810151825281019190915260400160002055600101620002df565b506001016200021d565b50505050565b805182511462000409576040516335e83ac360e01b815260040160405180910390fd5b81516000036200042c57604051633de9ddf560e11b815260040160405180910390fd5b60015b8251811015620004a85782620004476001836200085e565b815181106200045a576200045a62000880565b602002602001015183828151811062000477576200047762000880565b602002602001015110156200049f57604051633de9ddf560e11b815260040160405180910390fd5b6001016200042f565b508151620004be906000906020850190620004d9565b508051620004d4906001906020840190620004d9565b505050565b82805482825590600052602060002090810192821562000517579160200282015b8281111562000517578251825591602001919060010190620004fa565b506200052592915062000529565b5090565b5b808211156200052557600081556001016200052a565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000581576200058162000540565b604052919050565b60006001600160401b03821115620005a557620005a562000540565b5060051b60200190565b6001600160a01b0381168114620005c557600080fd5b50565b600082601f830112620005da57600080fd5b81516020620005f3620005ed8362000589565b62000556565b8083825260208201915060208460051b8701019350868411156200061657600080fd5b602086015b848110156200063f5780516200063181620005af565b83529183019183016200061b565b509695505050505050565b600082601f8301126200065c57600080fd5b815160206200066f620005ed8362000589565b8083825260208201915060208460051b8701019350868411156200069257600080fd5b602086015b848110156200063f578051835291830191830162000697565b600082601f830112620006c257600080fd5b81516020620006d5620005ed8362000589565b82815260059290921b84018101918181019086841115620006f557600080fd5b8286015b848110156200063f5780516001600160401b038111156200071a5760008081fd5b6200072a8986838b01016200064a565b845250918301918301620006f9565b80516200074681620005af565b919050565b60008060008060008060008060006101208a8c0312156200076b57600080fd5b895160208b015160408c015160608d0151929b5090995097506001600160401b03808211156200079a57600080fd5b620007a88d838e01620005c8565b975060808c0151915080821115620007bf57600080fd5b620007cd8d838e01620006b0565b965060a08c0151915080821115620007e457600080fd5b620007f28d838e01620006b0565b955060c08c01519150808211156200080957600080fd5b620008178d838e016200064a565b945060e08c01519150808211156200082e57600080fd5b506200083d8c828d016200064a565b9250506200084f6101008b0162000739565b90509295985092959850929598565b81810381811115620000e157634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e0516112326200090860003960008181610153015281816103a1015281816104ee01526106450152600081816102ba0152610a700152600081816101e70152610a9401526000818161019d0152818161022c01528181610c530152610cdb01526112326000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063572b6c0511610097578063e486033911610066578063e4860339146102dc578063f23a6e61146102ff578063f2fde38b14610312578063fa9fdc6a1461032757600080fd5b8063572b6c051461021c5780638da5cb5b14610269578063bc197c8114610271578063cd421fbf146102b557600080fd5b80632099920e116100d35780632099920e146101885780632b4c9f161461019b578063491bde66146101e2578063556c448d1461020957600080fd5b806301ffc9a714610105578063039af9eb1461012d578063043063bc1461014e57806304585ac714610175575b600080fd5b610118610113366004610d57565b610352565b60405190151581526020015b60405180910390f35b61014061013b366004610da0565b61036c565b604051908152602001610124565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b610140610183366004610da0565b61038d565b610140610196366004610de2565b6104da565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b610140610217366004610da0565b6105b2565b61011861022a366004610e0e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101bd6105c2565b61028461027f366004610eb7565b6105ee565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610124565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101186102ea366004610e0e565b60046020526000908152604090205460ff1681565b61028461030d366004610f72565b610912565b610325610320366004610e0e565b610946565b005b610140610335366004610de2565b600360209081526000928352604080842090915290825290205481565b600061036682610360610964565b90610992565b92915050565b6000818154811061037c57600080fd5b600091825260209091200154905081565b6000610397610a6c565b8211806103c357507f000000000000000000000000000000000000000000000000000000000000000082115b15610402576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6000821561042d5760026000610419600186611019565b815260200190815260200160002054610430565b60005b905060015b60005481116104a557600081815481106104515761045161102c565b906000526020600020015482101561049357600161046f8183611019565b8154811061047f5761047f61102c565b906000526020600020015492505050919050565b8061049d8161105b565b915050610435565b506000546001906104b7908290611019565b815481106104c7576104c761102c565b9060005260206000200154915050919050565b60006104e4610a6c565b83118061051057507f000000000000000000000000000000000000000000000000000000000000000083115b1561054a576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018490526024016103f9565b60006105558461038d565b600085815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684528252808320548884526002909252909120549192509061059f8383611093565b6105a991906110aa565b95945050505050565b6001818154811061037c57600080fd5b60006105e96105cf610ac3565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3360009081526004602052604081205460ff16610637576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610641610a6c565b90507f00000000000000000000000000000000000000000000000000000000000000008111156106a0576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018290526024016103f9565b6000805b8881101561079357336000908152600560205260408120818c8c858181106106ce576106ce61102c565b9050602002013581526020019081526020016000205490508060000361075a57338b8b848181106107015761070161102c565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909416600485015260200291909101356024830152506044016103f9565b8089898481811061076d5761076d61102c565b9050602002013561077e9190611093565b61078890846110e5565b9250506001016106a4565b50600082815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e168452909152812080548392906107d39084906110e5565b9091555050600082815260026020526040812080548392906107f69084906110e5565b90915550506040517f80534934000000000000000000000000000000000000000000000000000000008152339063805349349061083f908d908d908d908d908d90600401611143565b600060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fdbbe1cdf876fa73ee022a259cac764db805dcc10f143a583201b8c5e97c2573d84428d8d8d8d896040516108da9796959493929190611192565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b60006040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610961610951610af1565b8261095a610ac3565b9190610afb565b50565b60008061036660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611019565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109e257506000610366565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a3357506001610366565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60007f0000000000000000000000000000000000000000000000000000000000000000610ab97f000000000000000000000000000000000000000000000000000000000000000042611019565b6105e991906110aa565b60008061036660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611019565b60006105e9610c10565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610b68576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016103f9565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c0a5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610c205750601836105b15610c2a57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610d4657506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906111da565b15610d5057919050565b3391505090565b600060208284031215610d6957600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d9957600080fd5b9392505050565b600060208284031215610db257600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ddd57600080fd5b919050565b60008060408385031215610df557600080fd5b82359150610e0560208401610db9565b90509250929050565b600060208284031215610e2057600080fd5b610d9982610db9565b60008083601f840112610e3b57600080fd5b50813567ffffffffffffffff811115610e5357600080fd5b6020830191508360208260051b8501011115610e6e57600080fd5b9250929050565b60008083601f840112610e8757600080fd5b50813567ffffffffffffffff811115610e9f57600080fd5b602083019150836020828501011115610e6e57600080fd5b60008060008060008060008060a0898b031215610ed357600080fd5b610edc89610db9565b9750610eea60208a01610db9565b9650604089013567ffffffffffffffff80821115610f0757600080fd5b610f138c838d01610e29565b909850965060608b0135915080821115610f2c57600080fd5b610f388c838d01610e29565b909650945060808b0135915080821115610f5157600080fd5b50610f5e8b828c01610e75565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610f8b57600080fd5b610f9487610db9565b9550610fa260208801610db9565b94506040870135935060608701359250608087013567ffffffffffffffff811115610fcc57600080fd5b610fd889828a01610e75565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561036657610366610fea565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361108c5761108c610fea565b5060010190565b808202811582820484141761036657610366610fea565b6000826110e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561036657610366610fea565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561112a57600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006111736060830186886110f8565b82810360408401526111868185876110f8565b98975050505050505050565b87815286602082015260a0604082015260006111b260a0830187896110f8565b82810360608401526111c58186886110f8565b91505082608083015298975050505050505050565b6000602082840312156111ec57600080fd5b81518015158114610d9957600080fdfea264697066735822122075ed54939fbffadc480c130304c2304188bf0782edd7c7076c5ff31f3ecc445f64736f6c63430008160033","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B3A CODESIZE SUB DUP1 PUSH3 0x1B3A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x74B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x63 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x5B PUSH3 0xB1 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0xE7 JUMP JUMPDEST PUSH3 0x79 DUP2 PUSH3 0x72 PUSH3 0x144 JUMP JUMPDEST SWAP1 PUSH3 0x174 JUMP JUMPDEST POP PUSH1 0xA0 DUP10 SWAP1 MSTORE PUSH1 0xC0 DUP9 SWAP1 MSTORE PUSH1 0xE0 DUP8 SWAP1 MSTORE PUSH3 0x96 DUP7 DUP7 DUP7 PUSH3 0x1E7 JUMP JUMPDEST PUSH3 0xA2 DUP4 DUP4 PUSH3 0x3E6 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP PUSH3 0x896 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xE1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x85E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x116 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xE1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x85E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x1CB JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x1E3 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x5B PUSH3 0xB1 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ ISZERO DUP1 PUSH3 0x1FB JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ ISZERO JUMPDEST ISZERO PUSH3 0x21A JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E83AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH3 0x3E0 JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x242 JUMPI PUSH3 0x242 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0x296 JUMPI PUSH3 0x296 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x2B4 JUMPI PUSH3 0x2B4 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD EQ PUSH3 0x2DC JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E83AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x2F4 JUMPI PUSH3 0x2F4 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x3D6 JUMPI DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x31A JUMPI PUSH3 0x31A PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH3 0x336 JUMPI PUSH3 0x336 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x5 PUSH1 0x0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH3 0x357 JUMPI PUSH3 0x357 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH3 0x396 JUMPI PUSH3 0x396 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x3B2 JUMPI PUSH3 0x3B2 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 ADD PUSH3 0x2DF JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0x21D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH3 0x409 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E83AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH3 0x42C JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DE9DDF5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x4A8 JUMPI DUP3 PUSH3 0x447 PUSH1 0x1 DUP4 PUSH3 0x85E JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 0x45A JUMPI PUSH3 0x45A PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x477 JUMPI PUSH3 0x477 PUSH3 0x880 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH3 0x49F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DE9DDF5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH3 0x42F JUMP JUMPDEST POP DUP2 MLOAD PUSH3 0x4BE SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x4D9 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x4D4 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x4D9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x517 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x517 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x4FA JUMP JUMPDEST POP PUSH3 0x525 SWAP3 SWAP2 POP PUSH3 0x529 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x525 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x52A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x581 JUMPI PUSH3 0x581 PUSH3 0x540 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH3 0x5A5 JUMPI PUSH3 0x5A5 PUSH3 0x540 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH3 0x5F3 PUSH3 0x5ED DUP4 PUSH3 0x589 JUMP JUMPDEST PUSH3 0x556 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH3 0x616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x63F JUMPI DUP1 MLOAD PUSH3 0x631 DUP2 PUSH3 0x5AF JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH3 0x61B JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH3 0x66F PUSH3 0x5ED DUP4 PUSH3 0x589 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH3 0x692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x63F JUMPI DUP1 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH3 0x697 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH3 0x6D5 PUSH3 0x5ED DUP4 PUSH3 0x589 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH3 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x63F JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x71A JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH3 0x72A DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH3 0x64A JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH3 0x6F9 JUMP JUMPDEST DUP1 MLOAD PUSH3 0x746 DUP2 PUSH3 0x5AF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH3 0x76B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 MLOAD PUSH1 0x20 DUP12 ADD MLOAD PUSH1 0x40 DUP13 ADD MLOAD PUSH1 0x60 DUP14 ADD MLOAD SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x79A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7A8 DUP14 DUP4 DUP15 ADD PUSH3 0x5C8 JUMP JUMPDEST SWAP8 POP PUSH1 0x80 DUP13 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7CD DUP14 DUP4 DUP15 ADD PUSH3 0x6B0 JUMP JUMPDEST SWAP7 POP PUSH1 0xA0 DUP13 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x7E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7F2 DUP14 DUP4 DUP15 ADD PUSH3 0x6B0 JUMP JUMPDEST SWAP6 POP PUSH1 0xC0 DUP13 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x809 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x817 DUP14 DUP4 DUP15 ADD PUSH3 0x64A JUMP JUMPDEST SWAP5 POP PUSH1 0xE0 DUP13 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x82E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x83D DUP13 DUP3 DUP14 ADD PUSH3 0x64A JUMP JUMPDEST SWAP3 POP POP PUSH3 0x84F PUSH2 0x100 DUP12 ADD PUSH3 0x739 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xE1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x1232 PUSH3 0x908 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x153 ADD MSTORE DUP2 DUP2 PUSH2 0x3A1 ADD MSTORE DUP2 DUP2 PUSH2 0x4EE ADD MSTORE PUSH2 0x645 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2BA ADD MSTORE PUSH2 0xA70 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1E7 ADD MSTORE PUSH2 0xA94 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x19D ADD MSTORE DUP2 DUP2 PUSH2 0x22C ADD MSTORE DUP2 DUP2 PUSH2 0xC53 ADD MSTORE PUSH2 0xCDB ADD MSTORE PUSH2 0x1232 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xE4860339 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0xFA9FDC6A EQ PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2099920E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2099920E EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x556C448D EQ PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x39AF9EB EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x4585AC7 EQ PUSH2 0x175 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x36C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x183 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x38D JUMP JUMPDEST PUSH2 0x140 PUSH2 0x196 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE2 JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1BD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x284 PUSH2 0x27F CALLDATASIZE PUSH1 0x4 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x2EA CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x284 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0xF72 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH2 0x325 PUSH2 0x320 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x140 PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x366 DUP3 PUSH2 0x360 PUSH2 0x964 JUMP JUMPDEST SWAP1 PUSH2 0x992 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397 PUSH2 0xA6C JUMP JUMPDEST DUP3 GT DUP1 PUSH2 0x3C3 JUMPI POP PUSH32 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x402 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x42D JUMPI PUSH1 0x2 PUSH1 0x0 PUSH2 0x419 PUSH1 0x1 DUP7 PUSH2 0x1019 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x430 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x0 SLOAD DUP2 GT PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x451 JUMPI PUSH2 0x451 PUSH2 0x102C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 LT ISZERO PUSH2 0x493 JUMPI PUSH1 0x1 PUSH2 0x46F DUP2 DUP4 PUSH2 0x1019 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x47F JUMPI PUSH2 0x47F PUSH2 0x102C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x49D DUP2 PUSH2 0x105B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x435 JUMP JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x4B7 SWAP1 DUP3 SWAP1 PUSH2 0x1019 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x4C7 JUMPI PUSH2 0x4C7 PUSH2 0x102C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E4 PUSH2 0xA6C JUMP JUMPDEST DUP4 GT DUP1 PUSH2 0x510 JUMPI POP PUSH32 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x54A JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x555 DUP5 PUSH2 0x38D JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP9 DUP5 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x59F DUP4 DUP4 PUSH2 0x1093 JUMP JUMPDEST PUSH2 0x5A9 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5E9 PUSH2 0x5CF PUSH2 0xAC3 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x641 PUSH2 0xA6C JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x6A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x793 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0x6CE JUMPI PUSH2 0x6CE PUSH2 0x102C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x75A JUMPI CALLER DUP12 DUP12 DUP5 DUP2 DUP2 LT PUSH2 0x701 JUMPI PUSH2 0x701 PUSH2 0x102C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP1 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x76D JUMPI PUSH2 0x76D PUSH2 0x102C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x77E SWAP2 SWAP1 PUSH2 0x1093 JUMP JUMPDEST PUSH2 0x788 SWAP1 DUP5 PUSH2 0x10E5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x7D3 SWAP1 DUP5 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x7F6 SWAP1 DUP5 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x83F SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x1143 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x86D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDBBE1CDF876FA73EE022A259CAC764DB805DCC10F143A583201B8C5E97C2573D DUP5 TIMESTAMP DUP14 DUP14 DUP14 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH2 0x8DA SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1192 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xD623472500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x961 PUSH2 0x951 PUSH2 0xAF1 JUMP JUMPDEST DUP3 PUSH2 0x95A PUSH2 0xAC3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xAFB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x366 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9E2 JUMPI POP PUSH1 0x0 PUSH2 0x366 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA33 JUMPI POP PUSH1 0x1 PUSH2 0x366 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0xAB9 PUSH32 0x0 TIMESTAMP PUSH2 0x1019 JUMP JUMPDEST PUSH2 0x5E9 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x366 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E9 PUSH2 0xC10 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC0A JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xC20 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xC2A JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xD46 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD46 SWAP2 SWAP1 PUSH2 0x11DA JUMP JUMPDEST ISZERO PUSH2 0xD50 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xDDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xE05 PUSH1 0x20 DUP5 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD99 DUP3 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xE3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xE6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xE87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xE6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEDC DUP10 PUSH2 0xDB9 JUMP JUMPDEST SWAP8 POP PUSH2 0xEEA PUSH1 0x20 DUP11 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF13 DUP13 DUP4 DUP14 ADD PUSH2 0xE29 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xF2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF38 DUP13 DUP4 DUP14 ADD PUSH2 0xE29 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xF51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5E DUP12 DUP3 DUP13 ADD PUSH2 0xE75 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF94 DUP8 PUSH2 0xDB9 JUMP JUMPDEST SWAP6 POP PUSH2 0xFA2 PUSH1 0x20 DUP9 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFD8 DUP10 DUP3 DUP11 ADD PUSH2 0xE75 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0xFEA JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x108C JUMPI PUSH2 0x108C PUSH2 0xFEA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x10E0 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0xFEA JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x112A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1173 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x10F8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1186 DUP2 DUP6 DUP8 PUSH2 0x10F8 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP8 DUP2 MSTORE DUP7 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x11B2 PUSH1 0xA0 DUP4 ADD DUP8 DUP10 PUSH2 0x10F8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11C5 DUP2 DUP7 DUP9 PUSH2 0x10F8 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD99 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xED54939FBFFADC480C130304C2304188BF0782EDD7C7 SMOD PUSH13 0x5FF31F3ECC445F64736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1292:9641:27:-:0;;;3683:623;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;4083:10:27;780:103:18;-1:-1:-1;;;878:4:18;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;1008:63:0;1058:12;1008:33;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;4105:26:27::2;::::0;;;4141:30:::2;::::0;;;4181:20:::2;::::0;;;4212:46:::2;4231:7:::0;4240:8;4250:7;4212:18:::2;:46::i;:::-;4268:31;4278:6:::0;4286:12;4268:9:::2;:31::i;:::-;3683:623:::0;;;;;;;;;1292:9641;;1705:174:10;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:10:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:89::-;1567:341;;:::o;4564:701:27:-;4725:8;:15;4707:7;:14;:33;;:69;;;;4762:7;:14;4744:7;:14;:32;;4707:69;4703:127;;;4799:20;;-1:-1:-1;;;4799:20:27;;;;;;;;;;;4703:127;4880:9;4875:384;4899:7;:14;4895:1;:18;4875:384;;;4964:4;4934:6;:27;4949:7;4957:1;4949:10;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;4934:27:27;-1:-1:-1;;;;;4934:27:27;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;5009:7;5017:1;5009:10;;;;;;;;:::i;:::-;;;;;;;:17;4987:8;4996:1;4987:11;;;;;;;;:::i;:::-;;;;;;;:18;:39;4983:105;;5053:20;;-1:-1:-1;;;5053:20:27;;;;;;;;;;;4983:105;5107:9;5102:147;5126:8;5135:1;5126:11;;;;;;;;:::i;:::-;;;;;;;:18;5122:1;:22;5102:147;;;5221:7;5229:1;5221:10;;;;;;;;:::i;:::-;;;;;;;5232:1;5221:13;;;;;;;;:::i;:::-;;;;;;;5169:12;:33;5190:7;5198:1;5190:10;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;5169:33:27;-1:-1:-1;;;;;5169:33:27;;;;;;;;;;;;:49;5203:8;5212:1;5203:11;;;;;;;;:::i;:::-;;;;;;;5215:1;5203:14;;;;;;;;:::i;:::-;;;;;;;;;;;;5169:49;;;;;;;;;;-1:-1:-1;5169:49:27;:65;5146:3;;5102:147;;;-1:-1:-1;4915:3:27;;4875:384;;;;4564:701;;;:::o;5431:551::-;5546:12;:19;5529:6;:13;:36;5525:94;;5588:20;;-1:-1:-1;;;5588:20:27;;;;;;;;;;;5525:94;5633:6;:13;5650:1;5633:18;5629:72;;5674:16;;-1:-1:-1;;;5674:16:27;;;;;;;;;;;5629:72;5778:1;5761:155;5785:6;:13;5781:1;:17;5761:155;;;5835:6;5842:5;5846:1;5842;:5;:::i;:::-;5835:13;;;;;;;;:::i;:::-;;;;;;;5823:6;5830:1;5823:9;;;;;;;;:::i;:::-;;;;;;;:25;5819:87;;;5875:16;;-1:-1:-1;;;5875:16:27;;;;;;;;;;;5819:87;5800:3;;5761:155;;;-1:-1:-1;5925:14:27;;;;:5;;:14;;;;;:::i;:::-;-1:-1:-1;5949:26:27;;;;:11;;:26;;;;;:::i;:::-;;5431:551;;:::o;1292:9641::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1292:9641:27;;;-1:-1:-1;1292:9641:27;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:32;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:275;217:2;211:9;282:2;263:13;;-1:-1:-1;;259:27:32;247:40;;-1:-1:-1;;;;;302:34:32;;338:22;;;299:62;296:88;;;364:18;;:::i;:::-;400:2;393:22;146:275;;-1:-1:-1;146:275:32:o;426:201::-;504:4;-1:-1:-1;;;;;526:30:32;;523:56;;;559:18;;:::i;:::-;-1:-1:-1;604:1:32;600:14;616:4;596:25;;426:201::o;632:149::-;-1:-1:-1;;;;;725:31:32;;715:42;;705:70;;771:1;768;761:12;705:70;632:149;:::o;786:794::-;869:5;922:3;915:4;907:6;903:17;899:27;889:55;;940:1;937;930:12;889:55;969:6;963:13;995:4;1019:78;1035:61;1093:2;1035:61;:::i;:::-;1019:78;:::i;:::-;1119:3;1143:2;1138:3;1131:15;1171:4;1166:3;1162:14;1155:21;;1228:4;1222:2;1219:1;1215:10;1207:6;1203:23;1199:34;1185:48;;1256:3;1248:6;1245:15;1242:35;;;1273:1;1270;1263:12;1242:35;1309:4;1301:6;1297:17;1323:228;1339:6;1334:3;1331:15;1323:228;;;1412:3;1406:10;1429:49;1472:5;1429:49;:::i;:::-;1491:18;;1529:12;;;;1356;;1323:228;;;-1:-1:-1;1569:5:32;786:794;-1:-1:-1;;;;;;786:794:32:o;1585:683::-;1650:5;1703:3;1696:4;1688:6;1684:17;1680:27;1670:55;;1721:1;1718;1711:12;1670:55;1750:6;1744:13;1776:4;1800:78;1816:61;1874:2;1816:61;:::i;1800:78::-;1900:3;1924:2;1919:3;1912:15;1952:4;1947:3;1943:14;1936:21;;2009:4;2003:2;2000:1;1996:10;1988:6;1984:23;1980:34;1966:48;;2037:3;2029:6;2026:15;2023:35;;;2054:1;2051;2044:12;2023:35;2090:4;2082:6;2078:17;2104:135;2120:6;2115:3;2112:15;2104:135;;;2186:10;;2174:23;;2217:12;;;;2137;;2104:135;;2273:936;2348:5;2401:3;2394:4;2386:6;2382:17;2378:27;2368:55;;2419:1;2416;2409:12;2368:55;2448:6;2442:13;2474:4;2498:78;2514:61;2572:2;2514:61;:::i;2498:78::-;2610:15;;;2696:1;2692:10;;;;2680:23;;2676:32;;;2641:12;;;;2720:15;;;2717:35;;;2748:1;2745;2738:12;2717:35;2784:2;2776:6;2772:15;2796:384;2812:6;2807:3;2804:15;2796:384;;;2885:10;;-1:-1:-1;;;;;2911:35:32;;2908:125;;;2987:1;3016:2;3012;3005:14;2908:125;3058:79;3133:3;3128:2;3114:11;3106:6;3102:24;3098:33;3058:79;:::i;:::-;3046:92;;-1:-1:-1;3158:12:32;;;;2829;;2796:384;;3214:176;3313:13;;3335:49;3313:13;3335:49;:::i;:::-;3214:176;;;:::o;3395:1736::-;3762:6;3770;3778;3786;3794;3802;3810;3818;3826;3879:3;3867:9;3858:7;3854:23;3850:33;3847:53;;;3896:1;3893;3886:12;3847:53;3919:16;;3975:2;3960:18;;3954:25;4019:2;4004:18;;3998:25;4067:2;4052:18;;4046:25;3919:16;;-1:-1:-1;3954:25:32;;-1:-1:-1;3998:25:32;-1:-1:-1;;;;;;4120:14:32;;;4117:34;;;4147:1;4144;4137:12;4117:34;4170:90;4252:7;4243:6;4232:9;4228:22;4170:90;:::i;:::-;4160:100;;4306:3;4295:9;4291:19;4285:26;4269:42;;4336:2;4326:8;4323:16;4320:36;;;4352:1;4349;4342:12;4320:36;4375:84;4451:7;4440:8;4429:9;4425:24;4375:84;:::i;:::-;4365:94;;4505:3;4494:9;4490:19;4484:26;4468:42;;4535:2;4525:8;4522:16;4519:36;;;4551:1;4548;4541:12;4519:36;4574:84;4650:7;4639:8;4628:9;4624:24;4574:84;:::i;:::-;4564:94;;4704:3;4693:9;4689:19;4683:26;4667:42;;4734:2;4724:8;4721:16;4718:36;;;4750:1;4747;4740:12;4718:36;4773:74;4839:7;4828:8;4817:9;4813:24;4773:74;:::i;:::-;4763:84;;4893:3;4882:9;4878:19;4872:26;4856:42;;4923:2;4913:8;4910:16;4907:36;;;4939:1;4936;4929:12;4907:36;;4962:74;5028:7;5017:8;5006:9;5002:24;4962:74;:::i;:::-;4952:84;;;5055:70;5120:3;5109:9;5105:19;5055:70;:::i;:::-;5045:80;;3395:1736;;;;;;;;;;;:::o;5136:225::-;5203:9;;;5224:11;;;5221:134;;;5277:10;5272:3;5268:20;5265:1;5258:31;5312:4;5309:1;5302:15;5340:4;5337:1;5330:15;5366:127;5427:10;5422:3;5418:20;5415:1;5408:31;5458:4;5455:1;5448:15;5482:4;5479:1;5472:15;5366:127;1292:9641:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CYCLE_DURATION_1965":{"entryPoint":null,"id":1965,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_1963":{"entryPoint":null,"id":1963,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_1967":{"entryPoint":null,"id":1967,"parameterSlots":0,"returnSlots":0},"@_currentCycle_2322":{"entryPoint":2668,"id":2322,"parameterSlots":0,"returnSlots":1},"@_msgSender_2294":{"entryPoint":2801,"id":2294,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":3088,"id":652,"parameterSlots":0,"returnSlots":1},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@getCycleReward_2390":{"entryPoint":909,"id":2390,"parameterSlots":1,"returnSlots":1},"@getUserReward_2437":{"entryPoint":1242,"id":2437,"parameterSlots":2,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":2755,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2404,"id":531,"parameterSlots":0,"returnSlots":1},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_2590":{"entryPoint":1518,"id":2590,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_2457":{"entryPoint":2322,"id":2457,"parameterSlots":6,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1474,"id":62,"parameterSlots":0,"returnSlots":1},"@supportsInterface_413":{"entryPoint":850,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2450,"id":519,"parameterSlots":2,"returnSlots":1},"@tierRewards_1973":{"entryPoint":1458,"id":1973,"parameterSlots":0,"returnSlots":0},"@tiers_1970":{"entryPoint":876,"id":1970,"parameterSlots":0,"returnSlots":0},"@tokens_1988":{"entryPoint":null,"id":1988,"parameterSlots":0,"returnSlots":0},"@transferOwnership_291":{"entryPoint":2811,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2374,"id":79,"parameterSlots":1,"returnSlots":0},"@userAshByCycle_1983":{"entryPoint":null,"id":1983,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":3513,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":3625,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":3701,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":3598,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":3767,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":3954,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4570,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":3415,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3488,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":3554,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":4344,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4419,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":4498,"id":null,"parameterSlots":8,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4325,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":4266,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":4243,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4121,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":4187,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4074,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4140,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8894:32","nodeType":"YulBlock","src":"0:8894:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"83:263:32","nodeType":"YulBlock","src":"83:263:32","statements":[{"body":{"nativeSrc":"129:16:32","nodeType":"YulBlock","src":"129:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:32","nodeType":"YulLiteral","src":"138:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:32","nodeType":"YulLiteral","src":"141:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:32","nodeType":"YulIdentifier","src":"131:6:32"},"nativeSrc":"131:12:32","nodeType":"YulFunctionCall","src":"131:12:32"},"nativeSrc":"131:12:32","nodeType":"YulExpressionStatement","src":"131:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:32","nodeType":"YulIdentifier","src":"104:7:32"},{"name":"headStart","nativeSrc":"113:9:32","nodeType":"YulIdentifier","src":"113:9:32"}],"functionName":{"name":"sub","nativeSrc":"100:3:32","nodeType":"YulIdentifier","src":"100:3:32"},"nativeSrc":"100:23:32","nodeType":"YulFunctionCall","src":"100:23:32"},{"kind":"number","nativeSrc":"125:2:32","nodeType":"YulLiteral","src":"125:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:32","nodeType":"YulIdentifier","src":"96:3:32"},"nativeSrc":"96:32:32","nodeType":"YulFunctionCall","src":"96:32:32"},"nativeSrc":"93:52:32","nodeType":"YulIf","src":"93:52:32"},{"nativeSrc":"154:36:32","nodeType":"YulVariableDeclaration","src":"154:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:32","nodeType":"YulIdentifier","src":"180:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:32","nodeType":"YulIdentifier","src":"167:12:32"},"nativeSrc":"167:23:32","nodeType":"YulFunctionCall","src":"167:23:32"},"variables":[{"name":"value","nativeSrc":"158:5:32","nodeType":"YulTypedName","src":"158:5:32","type":""}]},{"body":{"nativeSrc":"300:16:32","nodeType":"YulBlock","src":"300:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:32","nodeType":"YulLiteral","src":"309:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:32","nodeType":"YulLiteral","src":"312:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:32","nodeType":"YulIdentifier","src":"302:6:32"},"nativeSrc":"302:12:32","nodeType":"YulFunctionCall","src":"302:12:32"},"nativeSrc":"302:12:32","nodeType":"YulExpressionStatement","src":"302:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:32","nodeType":"YulIdentifier","src":"212:5:32"},{"arguments":[{"name":"value","nativeSrc":"223:5:32","nodeType":"YulIdentifier","src":"223:5:32"},{"kind":"number","nativeSrc":"230:66:32","nodeType":"YulLiteral","src":"230:66:32","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:32","nodeType":"YulIdentifier","src":"219:3:32"},"nativeSrc":"219:78:32","nodeType":"YulFunctionCall","src":"219:78:32"}],"functionName":{"name":"eq","nativeSrc":"209:2:32","nodeType":"YulIdentifier","src":"209:2:32"},"nativeSrc":"209:89:32","nodeType":"YulFunctionCall","src":"209:89:32"}],"functionName":{"name":"iszero","nativeSrc":"202:6:32","nodeType":"YulIdentifier","src":"202:6:32"},"nativeSrc":"202:97:32","nodeType":"YulFunctionCall","src":"202:97:32"},"nativeSrc":"199:117:32","nodeType":"YulIf","src":"199:117:32"},{"nativeSrc":"325:15:32","nodeType":"YulAssignment","src":"325:15:32","value":{"name":"value","nativeSrc":"335:5:32","nodeType":"YulIdentifier","src":"335:5:32"},"variableNames":[{"name":"value0","nativeSrc":"325:6:32","nodeType":"YulIdentifier","src":"325:6:32"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:32","nodeType":"YulTypedName","src":"49:9:32","type":""},{"name":"dataEnd","nativeSrc":"60:7:32","nodeType":"YulTypedName","src":"60:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:32","nodeType":"YulTypedName","src":"72:6:32","type":""}],"src":"14:332:32"},{"body":{"nativeSrc":"446:92:32","nodeType":"YulBlock","src":"446:92:32","statements":[{"nativeSrc":"456:26:32","nodeType":"YulAssignment","src":"456:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:32","nodeType":"YulIdentifier","src":"468:9:32"},{"kind":"number","nativeSrc":"479:2:32","nodeType":"YulLiteral","src":"479:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:32","nodeType":"YulIdentifier","src":"464:3:32"},"nativeSrc":"464:18:32","nodeType":"YulFunctionCall","src":"464:18:32"},"variableNames":[{"name":"tail","nativeSrc":"456:4:32","nodeType":"YulIdentifier","src":"456:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:32","nodeType":"YulIdentifier","src":"498:9:32"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:32","nodeType":"YulIdentifier","src":"523:6:32"}],"functionName":{"name":"iszero","nativeSrc":"516:6:32","nodeType":"YulIdentifier","src":"516:6:32"},"nativeSrc":"516:14:32","nodeType":"YulFunctionCall","src":"516:14:32"}],"functionName":{"name":"iszero","nativeSrc":"509:6:32","nodeType":"YulIdentifier","src":"509:6:32"},"nativeSrc":"509:22:32","nodeType":"YulFunctionCall","src":"509:22:32"}],"functionName":{"name":"mstore","nativeSrc":"491:6:32","nodeType":"YulIdentifier","src":"491:6:32"},"nativeSrc":"491:41:32","nodeType":"YulFunctionCall","src":"491:41:32"},"nativeSrc":"491:41:32","nodeType":"YulExpressionStatement","src":"491:41:32"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:32","nodeType":"YulTypedName","src":"415:9:32","type":""},{"name":"value0","nativeSrc":"426:6:32","nodeType":"YulTypedName","src":"426:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:32","nodeType":"YulTypedName","src":"437:4:32","type":""}],"src":"351:187:32"},{"body":{"nativeSrc":"613:110:32","nodeType":"YulBlock","src":"613:110:32","statements":[{"body":{"nativeSrc":"659:16:32","nodeType":"YulBlock","src":"659:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"668:1:32","nodeType":"YulLiteral","src":"668:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"671:1:32","nodeType":"YulLiteral","src":"671:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"661:6:32","nodeType":"YulIdentifier","src":"661:6:32"},"nativeSrc":"661:12:32","nodeType":"YulFunctionCall","src":"661:12:32"},"nativeSrc":"661:12:32","nodeType":"YulExpressionStatement","src":"661:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"634:7:32","nodeType":"YulIdentifier","src":"634:7:32"},{"name":"headStart","nativeSrc":"643:9:32","nodeType":"YulIdentifier","src":"643:9:32"}],"functionName":{"name":"sub","nativeSrc":"630:3:32","nodeType":"YulIdentifier","src":"630:3:32"},"nativeSrc":"630:23:32","nodeType":"YulFunctionCall","src":"630:23:32"},{"kind":"number","nativeSrc":"655:2:32","nodeType":"YulLiteral","src":"655:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"626:3:32","nodeType":"YulIdentifier","src":"626:3:32"},"nativeSrc":"626:32:32","nodeType":"YulFunctionCall","src":"626:32:32"},"nativeSrc":"623:52:32","nodeType":"YulIf","src":"623:52:32"},{"nativeSrc":"684:33:32","nodeType":"YulAssignment","src":"684:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"707:9:32","nodeType":"YulIdentifier","src":"707:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"694:12:32","nodeType":"YulIdentifier","src":"694:12:32"},"nativeSrc":"694:23:32","nodeType":"YulFunctionCall","src":"694:23:32"},"variableNames":[{"name":"value0","nativeSrc":"684:6:32","nodeType":"YulIdentifier","src":"684:6:32"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"543:180:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"579:9:32","nodeType":"YulTypedName","src":"579:9:32","type":""},{"name":"dataEnd","nativeSrc":"590:7:32","nodeType":"YulTypedName","src":"590:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"602:6:32","nodeType":"YulTypedName","src":"602:6:32","type":""}],"src":"543:180:32"},{"body":{"nativeSrc":"829:76:32","nodeType":"YulBlock","src":"829:76:32","statements":[{"nativeSrc":"839:26:32","nodeType":"YulAssignment","src":"839:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"851:9:32","nodeType":"YulIdentifier","src":"851:9:32"},{"kind":"number","nativeSrc":"862:2:32","nodeType":"YulLiteral","src":"862:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"847:3:32","nodeType":"YulIdentifier","src":"847:3:32"},"nativeSrc":"847:18:32","nodeType":"YulFunctionCall","src":"847:18:32"},"variableNames":[{"name":"tail","nativeSrc":"839:4:32","nodeType":"YulIdentifier","src":"839:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"881:9:32","nodeType":"YulIdentifier","src":"881:9:32"},{"name":"value0","nativeSrc":"892:6:32","nodeType":"YulIdentifier","src":"892:6:32"}],"functionName":{"name":"mstore","nativeSrc":"874:6:32","nodeType":"YulIdentifier","src":"874:6:32"},"nativeSrc":"874:25:32","nodeType":"YulFunctionCall","src":"874:25:32"},"nativeSrc":"874:25:32","nodeType":"YulExpressionStatement","src":"874:25:32"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"728:177:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"798:9:32","nodeType":"YulTypedName","src":"798:9:32","type":""},{"name":"value0","nativeSrc":"809:6:32","nodeType":"YulTypedName","src":"809:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"820:4:32","nodeType":"YulTypedName","src":"820:4:32","type":""}],"src":"728:177:32"},{"body":{"nativeSrc":"959:147:32","nodeType":"YulBlock","src":"959:147:32","statements":[{"nativeSrc":"969:29:32","nodeType":"YulAssignment","src":"969:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"991:6:32","nodeType":"YulIdentifier","src":"991:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"978:12:32","nodeType":"YulIdentifier","src":"978:12:32"},"nativeSrc":"978:20:32","nodeType":"YulFunctionCall","src":"978:20:32"},"variableNames":[{"name":"value","nativeSrc":"969:5:32","nodeType":"YulIdentifier","src":"969:5:32"}]},{"body":{"nativeSrc":"1084:16:32","nodeType":"YulBlock","src":"1084:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1093:1:32","nodeType":"YulLiteral","src":"1093:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1096:1:32","nodeType":"YulLiteral","src":"1096:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1086:6:32","nodeType":"YulIdentifier","src":"1086:6:32"},"nativeSrc":"1086:12:32","nodeType":"YulFunctionCall","src":"1086:12:32"},"nativeSrc":"1086:12:32","nodeType":"YulExpressionStatement","src":"1086:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1020:5:32","nodeType":"YulIdentifier","src":"1020:5:32"},{"arguments":[{"name":"value","nativeSrc":"1031:5:32","nodeType":"YulIdentifier","src":"1031:5:32"},{"kind":"number","nativeSrc":"1038:42:32","nodeType":"YulLiteral","src":"1038:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1027:3:32","nodeType":"YulIdentifier","src":"1027:3:32"},"nativeSrc":"1027:54:32","nodeType":"YulFunctionCall","src":"1027:54:32"}],"functionName":{"name":"eq","nativeSrc":"1017:2:32","nodeType":"YulIdentifier","src":"1017:2:32"},"nativeSrc":"1017:65:32","nodeType":"YulFunctionCall","src":"1017:65:32"}],"functionName":{"name":"iszero","nativeSrc":"1010:6:32","nodeType":"YulIdentifier","src":"1010:6:32"},"nativeSrc":"1010:73:32","nodeType":"YulFunctionCall","src":"1010:73:32"},"nativeSrc":"1007:93:32","nodeType":"YulIf","src":"1007:93:32"}]},"name":"abi_decode_address","nativeSrc":"910:196:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"938:6:32","nodeType":"YulTypedName","src":"938:6:32","type":""}],"returnVariables":[{"name":"value","nativeSrc":"949:5:32","nodeType":"YulTypedName","src":"949:5:32","type":""}],"src":"910:196:32"},{"body":{"nativeSrc":"1198:167:32","nodeType":"YulBlock","src":"1198:167:32","statements":[{"body":{"nativeSrc":"1244:16:32","nodeType":"YulBlock","src":"1244:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1253:1:32","nodeType":"YulLiteral","src":"1253:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1256:1:32","nodeType":"YulLiteral","src":"1256:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1246:6:32","nodeType":"YulIdentifier","src":"1246:6:32"},"nativeSrc":"1246:12:32","nodeType":"YulFunctionCall","src":"1246:12:32"},"nativeSrc":"1246:12:32","nodeType":"YulExpressionStatement","src":"1246:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1219:7:32","nodeType":"YulIdentifier","src":"1219:7:32"},{"name":"headStart","nativeSrc":"1228:9:32","nodeType":"YulIdentifier","src":"1228:9:32"}],"functionName":{"name":"sub","nativeSrc":"1215:3:32","nodeType":"YulIdentifier","src":"1215:3:32"},"nativeSrc":"1215:23:32","nodeType":"YulFunctionCall","src":"1215:23:32"},{"kind":"number","nativeSrc":"1240:2:32","nodeType":"YulLiteral","src":"1240:2:32","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1211:3:32","nodeType":"YulIdentifier","src":"1211:3:32"},"nativeSrc":"1211:32:32","nodeType":"YulFunctionCall","src":"1211:32:32"},"nativeSrc":"1208:52:32","nodeType":"YulIf","src":"1208:52:32"},{"nativeSrc":"1269:33:32","nodeType":"YulAssignment","src":"1269:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1292:9:32","nodeType":"YulIdentifier","src":"1292:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"1279:12:32","nodeType":"YulIdentifier","src":"1279:12:32"},"nativeSrc":"1279:23:32","nodeType":"YulFunctionCall","src":"1279:23:32"},"variableNames":[{"name":"value0","nativeSrc":"1269:6:32","nodeType":"YulIdentifier","src":"1269:6:32"}]},{"nativeSrc":"1311:48:32","nodeType":"YulAssignment","src":"1311:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1344:9:32","nodeType":"YulIdentifier","src":"1344:9:32"},{"kind":"number","nativeSrc":"1355:2:32","nodeType":"YulLiteral","src":"1355:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1340:3:32","nodeType":"YulIdentifier","src":"1340:3:32"},"nativeSrc":"1340:18:32","nodeType":"YulFunctionCall","src":"1340:18:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1321:18:32","nodeType":"YulIdentifier","src":"1321:18:32"},"nativeSrc":"1321:38:32","nodeType":"YulFunctionCall","src":"1321:38:32"},"variableNames":[{"name":"value1","nativeSrc":"1311:6:32","nodeType":"YulIdentifier","src":"1311:6:32"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"1111:254:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1156:9:32","nodeType":"YulTypedName","src":"1156:9:32","type":""},{"name":"dataEnd","nativeSrc":"1167:7:32","nodeType":"YulTypedName","src":"1167:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1179:6:32","nodeType":"YulTypedName","src":"1179:6:32","type":""},{"name":"value1","nativeSrc":"1187:6:32","nodeType":"YulTypedName","src":"1187:6:32","type":""}],"src":"1111:254:32"},{"body":{"nativeSrc":"1497:125:32","nodeType":"YulBlock","src":"1497:125:32","statements":[{"nativeSrc":"1507:26:32","nodeType":"YulAssignment","src":"1507:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1519:9:32","nodeType":"YulIdentifier","src":"1519:9:32"},{"kind":"number","nativeSrc":"1530:2:32","nodeType":"YulLiteral","src":"1530:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1515:3:32","nodeType":"YulIdentifier","src":"1515:3:32"},"nativeSrc":"1515:18:32","nodeType":"YulFunctionCall","src":"1515:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1507:4:32","nodeType":"YulIdentifier","src":"1507:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1549:9:32","nodeType":"YulIdentifier","src":"1549:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1564:6:32","nodeType":"YulIdentifier","src":"1564:6:32"},{"kind":"number","nativeSrc":"1572:42:32","nodeType":"YulLiteral","src":"1572:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1560:3:32","nodeType":"YulIdentifier","src":"1560:3:32"},"nativeSrc":"1560:55:32","nodeType":"YulFunctionCall","src":"1560:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1542:6:32","nodeType":"YulIdentifier","src":"1542:6:32"},"nativeSrc":"1542:74:32","nodeType":"YulFunctionCall","src":"1542:74:32"},"nativeSrc":"1542:74:32","nodeType":"YulExpressionStatement","src":"1542:74:32"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"1370:252:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1466:9:32","nodeType":"YulTypedName","src":"1466:9:32","type":""},{"name":"value0","nativeSrc":"1477:6:32","nodeType":"YulTypedName","src":"1477:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1488:4:32","nodeType":"YulTypedName","src":"1488:4:32","type":""}],"src":"1370:252:32"},{"body":{"nativeSrc":"1697:116:32","nodeType":"YulBlock","src":"1697:116:32","statements":[{"body":{"nativeSrc":"1743:16:32","nodeType":"YulBlock","src":"1743:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1752:1:32","nodeType":"YulLiteral","src":"1752:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1755:1:32","nodeType":"YulLiteral","src":"1755:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1745:6:32","nodeType":"YulIdentifier","src":"1745:6:32"},"nativeSrc":"1745:12:32","nodeType":"YulFunctionCall","src":"1745:12:32"},"nativeSrc":"1745:12:32","nodeType":"YulExpressionStatement","src":"1745:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1718:7:32","nodeType":"YulIdentifier","src":"1718:7:32"},{"name":"headStart","nativeSrc":"1727:9:32","nodeType":"YulIdentifier","src":"1727:9:32"}],"functionName":{"name":"sub","nativeSrc":"1714:3:32","nodeType":"YulIdentifier","src":"1714:3:32"},"nativeSrc":"1714:23:32","nodeType":"YulFunctionCall","src":"1714:23:32"},{"kind":"number","nativeSrc":"1739:2:32","nodeType":"YulLiteral","src":"1739:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1710:3:32","nodeType":"YulIdentifier","src":"1710:3:32"},"nativeSrc":"1710:32:32","nodeType":"YulFunctionCall","src":"1710:32:32"},"nativeSrc":"1707:52:32","nodeType":"YulIf","src":"1707:52:32"},{"nativeSrc":"1768:39:32","nodeType":"YulAssignment","src":"1768:39:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1797:9:32","nodeType":"YulIdentifier","src":"1797:9:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1778:18:32","nodeType":"YulIdentifier","src":"1778:18:32"},"nativeSrc":"1778:29:32","nodeType":"YulFunctionCall","src":"1778:29:32"},"variableNames":[{"name":"value0","nativeSrc":"1768:6:32","nodeType":"YulIdentifier","src":"1768:6:32"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1627:186:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1663:9:32","nodeType":"YulTypedName","src":"1663:9:32","type":""},{"name":"dataEnd","nativeSrc":"1674:7:32","nodeType":"YulTypedName","src":"1674:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1686:6:32","nodeType":"YulTypedName","src":"1686:6:32","type":""}],"src":"1627:186:32"},{"body":{"nativeSrc":"1919:125:32","nodeType":"YulBlock","src":"1919:125:32","statements":[{"nativeSrc":"1929:26:32","nodeType":"YulAssignment","src":"1929:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1941:9:32","nodeType":"YulIdentifier","src":"1941:9:32"},{"kind":"number","nativeSrc":"1952:2:32","nodeType":"YulLiteral","src":"1952:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1937:3:32","nodeType":"YulIdentifier","src":"1937:3:32"},"nativeSrc":"1937:18:32","nodeType":"YulFunctionCall","src":"1937:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1929:4:32","nodeType":"YulIdentifier","src":"1929:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1971:9:32","nodeType":"YulIdentifier","src":"1971:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1986:6:32","nodeType":"YulIdentifier","src":"1986:6:32"},{"kind":"number","nativeSrc":"1994:42:32","nodeType":"YulLiteral","src":"1994:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1982:3:32","nodeType":"YulIdentifier","src":"1982:3:32"},"nativeSrc":"1982:55:32","nodeType":"YulFunctionCall","src":"1982:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1964:6:32","nodeType":"YulIdentifier","src":"1964:6:32"},"nativeSrc":"1964:74:32","nodeType":"YulFunctionCall","src":"1964:74:32"},"nativeSrc":"1964:74:32","nodeType":"YulExpressionStatement","src":"1964:74:32"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1818:226:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1888:9:32","nodeType":"YulTypedName","src":"1888:9:32","type":""},{"name":"value0","nativeSrc":"1899:6:32","nodeType":"YulTypedName","src":"1899:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1910:4:32","nodeType":"YulTypedName","src":"1910:4:32","type":""}],"src":"1818:226:32"},{"body":{"nativeSrc":"2133:283:32","nodeType":"YulBlock","src":"2133:283:32","statements":[{"body":{"nativeSrc":"2182:16:32","nodeType":"YulBlock","src":"2182:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2191:1:32","nodeType":"YulLiteral","src":"2191:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2194:1:32","nodeType":"YulLiteral","src":"2194:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2184:6:32","nodeType":"YulIdentifier","src":"2184:6:32"},"nativeSrc":"2184:12:32","nodeType":"YulFunctionCall","src":"2184:12:32"},"nativeSrc":"2184:12:32","nodeType":"YulExpressionStatement","src":"2184:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2161:6:32","nodeType":"YulIdentifier","src":"2161:6:32"},{"kind":"number","nativeSrc":"2169:4:32","nodeType":"YulLiteral","src":"2169:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2157:3:32","nodeType":"YulIdentifier","src":"2157:3:32"},"nativeSrc":"2157:17:32","nodeType":"YulFunctionCall","src":"2157:17:32"},{"name":"end","nativeSrc":"2176:3:32","nodeType":"YulIdentifier","src":"2176:3:32"}],"functionName":{"name":"slt","nativeSrc":"2153:3:32","nodeType":"YulIdentifier","src":"2153:3:32"},"nativeSrc":"2153:27:32","nodeType":"YulFunctionCall","src":"2153:27:32"}],"functionName":{"name":"iszero","nativeSrc":"2146:6:32","nodeType":"YulIdentifier","src":"2146:6:32"},"nativeSrc":"2146:35:32","nodeType":"YulFunctionCall","src":"2146:35:32"},"nativeSrc":"2143:55:32","nodeType":"YulIf","src":"2143:55:32"},{"nativeSrc":"2207:30:32","nodeType":"YulAssignment","src":"2207:30:32","value":{"arguments":[{"name":"offset","nativeSrc":"2230:6:32","nodeType":"YulIdentifier","src":"2230:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"2217:12:32","nodeType":"YulIdentifier","src":"2217:12:32"},"nativeSrc":"2217:20:32","nodeType":"YulFunctionCall","src":"2217:20:32"},"variableNames":[{"name":"length","nativeSrc":"2207:6:32","nodeType":"YulIdentifier","src":"2207:6:32"}]},{"body":{"nativeSrc":"2280:16:32","nodeType":"YulBlock","src":"2280:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2289:1:32","nodeType":"YulLiteral","src":"2289:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2292:1:32","nodeType":"YulLiteral","src":"2292:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2282:6:32","nodeType":"YulIdentifier","src":"2282:6:32"},"nativeSrc":"2282:12:32","nodeType":"YulFunctionCall","src":"2282:12:32"},"nativeSrc":"2282:12:32","nodeType":"YulExpressionStatement","src":"2282:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2252:6:32","nodeType":"YulIdentifier","src":"2252:6:32"},{"kind":"number","nativeSrc":"2260:18:32","nodeType":"YulLiteral","src":"2260:18:32","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2249:2:32","nodeType":"YulIdentifier","src":"2249:2:32"},"nativeSrc":"2249:30:32","nodeType":"YulFunctionCall","src":"2249:30:32"},"nativeSrc":"2246:50:32","nodeType":"YulIf","src":"2246:50:32"},{"nativeSrc":"2305:29:32","nodeType":"YulAssignment","src":"2305:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"2321:6:32","nodeType":"YulIdentifier","src":"2321:6:32"},{"kind":"number","nativeSrc":"2329:4:32","nodeType":"YulLiteral","src":"2329:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2317:3:32","nodeType":"YulIdentifier","src":"2317:3:32"},"nativeSrc":"2317:17:32","nodeType":"YulFunctionCall","src":"2317:17:32"},"variableNames":[{"name":"arrayPos","nativeSrc":"2305:8:32","nodeType":"YulIdentifier","src":"2305:8:32"}]},{"body":{"nativeSrc":"2394:16:32","nodeType":"YulBlock","src":"2394:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2403:1:32","nodeType":"YulLiteral","src":"2403:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2406:1:32","nodeType":"YulLiteral","src":"2406:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2396:6:32","nodeType":"YulIdentifier","src":"2396:6:32"},"nativeSrc":"2396:12:32","nodeType":"YulFunctionCall","src":"2396:12:32"},"nativeSrc":"2396:12:32","nodeType":"YulExpressionStatement","src":"2396:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2357:6:32","nodeType":"YulIdentifier","src":"2357:6:32"},{"arguments":[{"kind":"number","nativeSrc":"2369:1:32","nodeType":"YulLiteral","src":"2369:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"2372:6:32","nodeType":"YulIdentifier","src":"2372:6:32"}],"functionName":{"name":"shl","nativeSrc":"2365:3:32","nodeType":"YulIdentifier","src":"2365:3:32"},"nativeSrc":"2365:14:32","nodeType":"YulFunctionCall","src":"2365:14:32"}],"functionName":{"name":"add","nativeSrc":"2353:3:32","nodeType":"YulIdentifier","src":"2353:3:32"},"nativeSrc":"2353:27:32","nodeType":"YulFunctionCall","src":"2353:27:32"},{"kind":"number","nativeSrc":"2382:4:32","nodeType":"YulLiteral","src":"2382:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2349:3:32","nodeType":"YulIdentifier","src":"2349:3:32"},"nativeSrc":"2349:38:32","nodeType":"YulFunctionCall","src":"2349:38:32"},{"name":"end","nativeSrc":"2389:3:32","nodeType":"YulIdentifier","src":"2389:3:32"}],"functionName":{"name":"gt","nativeSrc":"2346:2:32","nodeType":"YulIdentifier","src":"2346:2:32"},"nativeSrc":"2346:47:32","nodeType":"YulFunctionCall","src":"2346:47:32"},"nativeSrc":"2343:67:32","nodeType":"YulIf","src":"2343:67:32"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2049:367:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2096:6:32","nodeType":"YulTypedName","src":"2096:6:32","type":""},{"name":"end","nativeSrc":"2104:3:32","nodeType":"YulTypedName","src":"2104:3:32","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2112:8:32","nodeType":"YulTypedName","src":"2112:8:32","type":""},{"name":"length","nativeSrc":"2122:6:32","nodeType":"YulTypedName","src":"2122:6:32","type":""}],"src":"2049:367:32"},{"body":{"nativeSrc":"2493:275:32","nodeType":"YulBlock","src":"2493:275:32","statements":[{"body":{"nativeSrc":"2542:16:32","nodeType":"YulBlock","src":"2542:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2551:1:32","nodeType":"YulLiteral","src":"2551:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2554:1:32","nodeType":"YulLiteral","src":"2554:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2544:6:32","nodeType":"YulIdentifier","src":"2544:6:32"},"nativeSrc":"2544:12:32","nodeType":"YulFunctionCall","src":"2544:12:32"},"nativeSrc":"2544:12:32","nodeType":"YulExpressionStatement","src":"2544:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2521:6:32","nodeType":"YulIdentifier","src":"2521:6:32"},{"kind":"number","nativeSrc":"2529:4:32","nodeType":"YulLiteral","src":"2529:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2517:3:32","nodeType":"YulIdentifier","src":"2517:3:32"},"nativeSrc":"2517:17:32","nodeType":"YulFunctionCall","src":"2517:17:32"},{"name":"end","nativeSrc":"2536:3:32","nodeType":"YulIdentifier","src":"2536:3:32"}],"functionName":{"name":"slt","nativeSrc":"2513:3:32","nodeType":"YulIdentifier","src":"2513:3:32"},"nativeSrc":"2513:27:32","nodeType":"YulFunctionCall","src":"2513:27:32"}],"functionName":{"name":"iszero","nativeSrc":"2506:6:32","nodeType":"YulIdentifier","src":"2506:6:32"},"nativeSrc":"2506:35:32","nodeType":"YulFunctionCall","src":"2506:35:32"},"nativeSrc":"2503:55:32","nodeType":"YulIf","src":"2503:55:32"},{"nativeSrc":"2567:30:32","nodeType":"YulAssignment","src":"2567:30:32","value":{"arguments":[{"name":"offset","nativeSrc":"2590:6:32","nodeType":"YulIdentifier","src":"2590:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"2577:12:32","nodeType":"YulIdentifier","src":"2577:12:32"},"nativeSrc":"2577:20:32","nodeType":"YulFunctionCall","src":"2577:20:32"},"variableNames":[{"name":"length","nativeSrc":"2567:6:32","nodeType":"YulIdentifier","src":"2567:6:32"}]},{"body":{"nativeSrc":"2640:16:32","nodeType":"YulBlock","src":"2640:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2649:1:32","nodeType":"YulLiteral","src":"2649:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2652:1:32","nodeType":"YulLiteral","src":"2652:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2642:6:32","nodeType":"YulIdentifier","src":"2642:6:32"},"nativeSrc":"2642:12:32","nodeType":"YulFunctionCall","src":"2642:12:32"},"nativeSrc":"2642:12:32","nodeType":"YulExpressionStatement","src":"2642:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2612:6:32","nodeType":"YulIdentifier","src":"2612:6:32"},{"kind":"number","nativeSrc":"2620:18:32","nodeType":"YulLiteral","src":"2620:18:32","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2609:2:32","nodeType":"YulIdentifier","src":"2609:2:32"},"nativeSrc":"2609:30:32","nodeType":"YulFunctionCall","src":"2609:30:32"},"nativeSrc":"2606:50:32","nodeType":"YulIf","src":"2606:50:32"},{"nativeSrc":"2665:29:32","nodeType":"YulAssignment","src":"2665:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"2681:6:32","nodeType":"YulIdentifier","src":"2681:6:32"},{"kind":"number","nativeSrc":"2689:4:32","nodeType":"YulLiteral","src":"2689:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2677:3:32","nodeType":"YulIdentifier","src":"2677:3:32"},"nativeSrc":"2677:17:32","nodeType":"YulFunctionCall","src":"2677:17:32"},"variableNames":[{"name":"arrayPos","nativeSrc":"2665:8:32","nodeType":"YulIdentifier","src":"2665:8:32"}]},{"body":{"nativeSrc":"2746:16:32","nodeType":"YulBlock","src":"2746:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2755:1:32","nodeType":"YulLiteral","src":"2755:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2758:1:32","nodeType":"YulLiteral","src":"2758:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2748:6:32","nodeType":"YulIdentifier","src":"2748:6:32"},"nativeSrc":"2748:12:32","nodeType":"YulFunctionCall","src":"2748:12:32"},"nativeSrc":"2748:12:32","nodeType":"YulExpressionStatement","src":"2748:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2717:6:32","nodeType":"YulIdentifier","src":"2717:6:32"},{"name":"length","nativeSrc":"2725:6:32","nodeType":"YulIdentifier","src":"2725:6:32"}],"functionName":{"name":"add","nativeSrc":"2713:3:32","nodeType":"YulIdentifier","src":"2713:3:32"},"nativeSrc":"2713:19:32","nodeType":"YulFunctionCall","src":"2713:19:32"},{"kind":"number","nativeSrc":"2734:4:32","nodeType":"YulLiteral","src":"2734:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2709:3:32","nodeType":"YulIdentifier","src":"2709:3:32"},"nativeSrc":"2709:30:32","nodeType":"YulFunctionCall","src":"2709:30:32"},{"name":"end","nativeSrc":"2741:3:32","nodeType":"YulIdentifier","src":"2741:3:32"}],"functionName":{"name":"gt","nativeSrc":"2706:2:32","nodeType":"YulIdentifier","src":"2706:2:32"},"nativeSrc":"2706:39:32","nodeType":"YulFunctionCall","src":"2706:39:32"},"nativeSrc":"2703:59:32","nodeType":"YulIf","src":"2703:59:32"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"2421:347:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2456:6:32","nodeType":"YulTypedName","src":"2456:6:32","type":""},{"name":"end","nativeSrc":"2464:3:32","nodeType":"YulTypedName","src":"2464:3:32","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2472:8:32","nodeType":"YulTypedName","src":"2472:8:32","type":""},{"name":"length","nativeSrc":"2482:6:32","nodeType":"YulTypedName","src":"2482:6:32","type":""}],"src":"2421:347:32"},{"body":{"nativeSrc":"3000:983:32","nodeType":"YulBlock","src":"3000:983:32","statements":[{"body":{"nativeSrc":"3047:16:32","nodeType":"YulBlock","src":"3047:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3056:1:32","nodeType":"YulLiteral","src":"3056:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3059:1:32","nodeType":"YulLiteral","src":"3059:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3049:6:32","nodeType":"YulIdentifier","src":"3049:6:32"},"nativeSrc":"3049:12:32","nodeType":"YulFunctionCall","src":"3049:12:32"},"nativeSrc":"3049:12:32","nodeType":"YulExpressionStatement","src":"3049:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3021:7:32","nodeType":"YulIdentifier","src":"3021:7:32"},{"name":"headStart","nativeSrc":"3030:9:32","nodeType":"YulIdentifier","src":"3030:9:32"}],"functionName":{"name":"sub","nativeSrc":"3017:3:32","nodeType":"YulIdentifier","src":"3017:3:32"},"nativeSrc":"3017:23:32","nodeType":"YulFunctionCall","src":"3017:23:32"},{"kind":"number","nativeSrc":"3042:3:32","nodeType":"YulLiteral","src":"3042:3:32","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"3013:3:32","nodeType":"YulIdentifier","src":"3013:3:32"},"nativeSrc":"3013:33:32","nodeType":"YulFunctionCall","src":"3013:33:32"},"nativeSrc":"3010:53:32","nodeType":"YulIf","src":"3010:53:32"},{"nativeSrc":"3072:39:32","nodeType":"YulAssignment","src":"3072:39:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3101:9:32","nodeType":"YulIdentifier","src":"3101:9:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3082:18:32","nodeType":"YulIdentifier","src":"3082:18:32"},"nativeSrc":"3082:29:32","nodeType":"YulFunctionCall","src":"3082:29:32"},"variableNames":[{"name":"value0","nativeSrc":"3072:6:32","nodeType":"YulIdentifier","src":"3072:6:32"}]},{"nativeSrc":"3120:48:32","nodeType":"YulAssignment","src":"3120:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3153:9:32","nodeType":"YulIdentifier","src":"3153:9:32"},{"kind":"number","nativeSrc":"3164:2:32","nodeType":"YulLiteral","src":"3164:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3149:3:32","nodeType":"YulIdentifier","src":"3149:3:32"},"nativeSrc":"3149:18:32","nodeType":"YulFunctionCall","src":"3149:18:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3130:18:32","nodeType":"YulIdentifier","src":"3130:18:32"},"nativeSrc":"3130:38:32","nodeType":"YulFunctionCall","src":"3130:38:32"},"variableNames":[{"name":"value1","nativeSrc":"3120:6:32","nodeType":"YulIdentifier","src":"3120:6:32"}]},{"nativeSrc":"3177:46:32","nodeType":"YulVariableDeclaration","src":"3177:46:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3208:9:32","nodeType":"YulIdentifier","src":"3208:9:32"},{"kind":"number","nativeSrc":"3219:2:32","nodeType":"YulLiteral","src":"3219:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3204:3:32","nodeType":"YulIdentifier","src":"3204:3:32"},"nativeSrc":"3204:18:32","nodeType":"YulFunctionCall","src":"3204:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"3191:12:32","nodeType":"YulIdentifier","src":"3191:12:32"},"nativeSrc":"3191:32:32","nodeType":"YulFunctionCall","src":"3191:32:32"},"variables":[{"name":"offset","nativeSrc":"3181:6:32","nodeType":"YulTypedName","src":"3181:6:32","type":""}]},{"nativeSrc":"3232:28:32","nodeType":"YulVariableDeclaration","src":"3232:28:32","value":{"kind":"number","nativeSrc":"3242:18:32","nodeType":"YulLiteral","src":"3242:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3236:2:32","nodeType":"YulTypedName","src":"3236:2:32","type":""}]},{"body":{"nativeSrc":"3287:16:32","nodeType":"YulBlock","src":"3287:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3296:1:32","nodeType":"YulLiteral","src":"3296:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3299:1:32","nodeType":"YulLiteral","src":"3299:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3289:6:32","nodeType":"YulIdentifier","src":"3289:6:32"},"nativeSrc":"3289:12:32","nodeType":"YulFunctionCall","src":"3289:12:32"},"nativeSrc":"3289:12:32","nodeType":"YulExpressionStatement","src":"3289:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3275:6:32","nodeType":"YulIdentifier","src":"3275:6:32"},{"name":"_1","nativeSrc":"3283:2:32","nodeType":"YulIdentifier","src":"3283:2:32"}],"functionName":{"name":"gt","nativeSrc":"3272:2:32","nodeType":"YulIdentifier","src":"3272:2:32"},"nativeSrc":"3272:14:32","nodeType":"YulFunctionCall","src":"3272:14:32"},"nativeSrc":"3269:34:32","nodeType":"YulIf","src":"3269:34:32"},{"nativeSrc":"3312:96:32","nodeType":"YulVariableDeclaration","src":"3312:96:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3380:9:32","nodeType":"YulIdentifier","src":"3380:9:32"},{"name":"offset","nativeSrc":"3391:6:32","nodeType":"YulIdentifier","src":"3391:6:32"}],"functionName":{"name":"add","nativeSrc":"3376:3:32","nodeType":"YulIdentifier","src":"3376:3:32"},"nativeSrc":"3376:22:32","nodeType":"YulFunctionCall","src":"3376:22:32"},{"name":"dataEnd","nativeSrc":"3400:7:32","nodeType":"YulIdentifier","src":"3400:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3338:37:32","nodeType":"YulIdentifier","src":"3338:37:32"},"nativeSrc":"3338:70:32","nodeType":"YulFunctionCall","src":"3338:70:32"},"variables":[{"name":"value2_1","nativeSrc":"3316:8:32","nodeType":"YulTypedName","src":"3316:8:32","type":""},{"name":"value3_1","nativeSrc":"3326:8:32","nodeType":"YulTypedName","src":"3326:8:32","type":""}]},{"nativeSrc":"3417:18:32","nodeType":"YulAssignment","src":"3417:18:32","value":{"name":"value2_1","nativeSrc":"3427:8:32","nodeType":"YulIdentifier","src":"3427:8:32"},"variableNames":[{"name":"value2","nativeSrc":"3417:6:32","nodeType":"YulIdentifier","src":"3417:6:32"}]},{"nativeSrc":"3444:18:32","nodeType":"YulAssignment","src":"3444:18:32","value":{"name":"value3_1","nativeSrc":"3454:8:32","nodeType":"YulIdentifier","src":"3454:8:32"},"variableNames":[{"name":"value3","nativeSrc":"3444:6:32","nodeType":"YulIdentifier","src":"3444:6:32"}]},{"nativeSrc":"3471:48:32","nodeType":"YulVariableDeclaration","src":"3471:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3504:9:32","nodeType":"YulIdentifier","src":"3504:9:32"},{"kind":"number","nativeSrc":"3515:2:32","nodeType":"YulLiteral","src":"3515:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3500:3:32","nodeType":"YulIdentifier","src":"3500:3:32"},"nativeSrc":"3500:18:32","nodeType":"YulFunctionCall","src":"3500:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"3487:12:32","nodeType":"YulIdentifier","src":"3487:12:32"},"nativeSrc":"3487:32:32","nodeType":"YulFunctionCall","src":"3487:32:32"},"variables":[{"name":"offset_1","nativeSrc":"3475:8:32","nodeType":"YulTypedName","src":"3475:8:32","type":""}]},{"body":{"nativeSrc":"3548:16:32","nodeType":"YulBlock","src":"3548:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3557:1:32","nodeType":"YulLiteral","src":"3557:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3560:1:32","nodeType":"YulLiteral","src":"3560:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3550:6:32","nodeType":"YulIdentifier","src":"3550:6:32"},"nativeSrc":"3550:12:32","nodeType":"YulFunctionCall","src":"3550:12:32"},"nativeSrc":"3550:12:32","nodeType":"YulExpressionStatement","src":"3550:12:32"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3534:8:32","nodeType":"YulIdentifier","src":"3534:8:32"},{"name":"_1","nativeSrc":"3544:2:32","nodeType":"YulIdentifier","src":"3544:2:32"}],"functionName":{"name":"gt","nativeSrc":"3531:2:32","nodeType":"YulIdentifier","src":"3531:2:32"},"nativeSrc":"3531:16:32","nodeType":"YulFunctionCall","src":"3531:16:32"},"nativeSrc":"3528:36:32","nodeType":"YulIf","src":"3528:36:32"},{"nativeSrc":"3573:98:32","nodeType":"YulVariableDeclaration","src":"3573:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3641:9:32","nodeType":"YulIdentifier","src":"3641:9:32"},{"name":"offset_1","nativeSrc":"3652:8:32","nodeType":"YulIdentifier","src":"3652:8:32"}],"functionName":{"name":"add","nativeSrc":"3637:3:32","nodeType":"YulIdentifier","src":"3637:3:32"},"nativeSrc":"3637:24:32","nodeType":"YulFunctionCall","src":"3637:24:32"},{"name":"dataEnd","nativeSrc":"3663:7:32","nodeType":"YulIdentifier","src":"3663:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3599:37:32","nodeType":"YulIdentifier","src":"3599:37:32"},"nativeSrc":"3599:72:32","nodeType":"YulFunctionCall","src":"3599:72:32"},"variables":[{"name":"value4_1","nativeSrc":"3577:8:32","nodeType":"YulTypedName","src":"3577:8:32","type":""},{"name":"value5_1","nativeSrc":"3587:8:32","nodeType":"YulTypedName","src":"3587:8:32","type":""}]},{"nativeSrc":"3680:18:32","nodeType":"YulAssignment","src":"3680:18:32","value":{"name":"value4_1","nativeSrc":"3690:8:32","nodeType":"YulIdentifier","src":"3690:8:32"},"variableNames":[{"name":"value4","nativeSrc":"3680:6:32","nodeType":"YulIdentifier","src":"3680:6:32"}]},{"nativeSrc":"3707:18:32","nodeType":"YulAssignment","src":"3707:18:32","value":{"name":"value5_1","nativeSrc":"3717:8:32","nodeType":"YulIdentifier","src":"3717:8:32"},"variableNames":[{"name":"value5","nativeSrc":"3707:6:32","nodeType":"YulIdentifier","src":"3707:6:32"}]},{"nativeSrc":"3734:49:32","nodeType":"YulVariableDeclaration","src":"3734:49:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3767:9:32","nodeType":"YulIdentifier","src":"3767:9:32"},{"kind":"number","nativeSrc":"3778:3:32","nodeType":"YulLiteral","src":"3778:3:32","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3763:3:32","nodeType":"YulIdentifier","src":"3763:3:32"},"nativeSrc":"3763:19:32","nodeType":"YulFunctionCall","src":"3763:19:32"}],"functionName":{"name":"calldataload","nativeSrc":"3750:12:32","nodeType":"YulIdentifier","src":"3750:12:32"},"nativeSrc":"3750:33:32","nodeType":"YulFunctionCall","src":"3750:33:32"},"variables":[{"name":"offset_2","nativeSrc":"3738:8:32","nodeType":"YulTypedName","src":"3738:8:32","type":""}]},{"body":{"nativeSrc":"3812:16:32","nodeType":"YulBlock","src":"3812:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3821:1:32","nodeType":"YulLiteral","src":"3821:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3824:1:32","nodeType":"YulLiteral","src":"3824:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3814:6:32","nodeType":"YulIdentifier","src":"3814:6:32"},"nativeSrc":"3814:12:32","nodeType":"YulFunctionCall","src":"3814:12:32"},"nativeSrc":"3814:12:32","nodeType":"YulExpressionStatement","src":"3814:12:32"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"3798:8:32","nodeType":"YulIdentifier","src":"3798:8:32"},{"name":"_1","nativeSrc":"3808:2:32","nodeType":"YulIdentifier","src":"3808:2:32"}],"functionName":{"name":"gt","nativeSrc":"3795:2:32","nodeType":"YulIdentifier","src":"3795:2:32"},"nativeSrc":"3795:16:32","nodeType":"YulFunctionCall","src":"3795:16:32"},"nativeSrc":"3792:36:32","nodeType":"YulIf","src":"3792:36:32"},{"nativeSrc":"3837:86:32","nodeType":"YulVariableDeclaration","src":"3837:86:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3893:9:32","nodeType":"YulIdentifier","src":"3893:9:32"},{"name":"offset_2","nativeSrc":"3904:8:32","nodeType":"YulIdentifier","src":"3904:8:32"}],"functionName":{"name":"add","nativeSrc":"3889:3:32","nodeType":"YulIdentifier","src":"3889:3:32"},"nativeSrc":"3889:24:32","nodeType":"YulFunctionCall","src":"3889:24:32"},{"name":"dataEnd","nativeSrc":"3915:7:32","nodeType":"YulIdentifier","src":"3915:7:32"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3863:25:32","nodeType":"YulIdentifier","src":"3863:25:32"},"nativeSrc":"3863:60:32","nodeType":"YulFunctionCall","src":"3863:60:32"},"variables":[{"name":"value6_1","nativeSrc":"3841:8:32","nodeType":"YulTypedName","src":"3841:8:32","type":""},{"name":"value7_1","nativeSrc":"3851:8:32","nodeType":"YulTypedName","src":"3851:8:32","type":""}]},{"nativeSrc":"3932:18:32","nodeType":"YulAssignment","src":"3932:18:32","value":{"name":"value6_1","nativeSrc":"3942:8:32","nodeType":"YulIdentifier","src":"3942:8:32"},"variableNames":[{"name":"value6","nativeSrc":"3932:6:32","nodeType":"YulIdentifier","src":"3932:6:32"}]},{"nativeSrc":"3959:18:32","nodeType":"YulAssignment","src":"3959:18:32","value":{"name":"value7_1","nativeSrc":"3969:8:32","nodeType":"YulIdentifier","src":"3969:8:32"},"variableNames":[{"name":"value7","nativeSrc":"3959:6:32","nodeType":"YulIdentifier","src":"3959:6:32"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"2773:1210:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2910:9:32","nodeType":"YulTypedName","src":"2910:9:32","type":""},{"name":"dataEnd","nativeSrc":"2921:7:32","nodeType":"YulTypedName","src":"2921:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2933:6:32","nodeType":"YulTypedName","src":"2933:6:32","type":""},{"name":"value1","nativeSrc":"2941:6:32","nodeType":"YulTypedName","src":"2941:6:32","type":""},{"name":"value2","nativeSrc":"2949:6:32","nodeType":"YulTypedName","src":"2949:6:32","type":""},{"name":"value3","nativeSrc":"2957:6:32","nodeType":"YulTypedName","src":"2957:6:32","type":""},{"name":"value4","nativeSrc":"2965:6:32","nodeType":"YulTypedName","src":"2965:6:32","type":""},{"name":"value5","nativeSrc":"2973:6:32","nodeType":"YulTypedName","src":"2973:6:32","type":""},{"name":"value6","nativeSrc":"2981:6:32","nodeType":"YulTypedName","src":"2981:6:32","type":""},{"name":"value7","nativeSrc":"2989:6:32","nodeType":"YulTypedName","src":"2989:6:32","type":""}],"src":"2773:1210:32"},{"body":{"nativeSrc":"4087:149:32","nodeType":"YulBlock","src":"4087:149:32","statements":[{"nativeSrc":"4097:26:32","nodeType":"YulAssignment","src":"4097:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4109:9:32","nodeType":"YulIdentifier","src":"4109:9:32"},{"kind":"number","nativeSrc":"4120:2:32","nodeType":"YulLiteral","src":"4120:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4105:3:32","nodeType":"YulIdentifier","src":"4105:3:32"},"nativeSrc":"4105:18:32","nodeType":"YulFunctionCall","src":"4105:18:32"},"variableNames":[{"name":"tail","nativeSrc":"4097:4:32","nodeType":"YulIdentifier","src":"4097:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4139:9:32","nodeType":"YulIdentifier","src":"4139:9:32"},{"arguments":[{"name":"value0","nativeSrc":"4154:6:32","nodeType":"YulIdentifier","src":"4154:6:32"},{"kind":"number","nativeSrc":"4162:66:32","nodeType":"YulLiteral","src":"4162:66:32","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4150:3:32","nodeType":"YulIdentifier","src":"4150:3:32"},"nativeSrc":"4150:79:32","nodeType":"YulFunctionCall","src":"4150:79:32"}],"functionName":{"name":"mstore","nativeSrc":"4132:6:32","nodeType":"YulIdentifier","src":"4132:6:32"},"nativeSrc":"4132:98:32","nodeType":"YulFunctionCall","src":"4132:98:32"},"nativeSrc":"4132:98:32","nodeType":"YulExpressionStatement","src":"4132:98:32"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"3988:248:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4056:9:32","nodeType":"YulTypedName","src":"4056:9:32","type":""},{"name":"value0","nativeSrc":"4067:6:32","nodeType":"YulTypedName","src":"4067:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4078:4:32","nodeType":"YulTypedName","src":"4078:4:32","type":""}],"src":"3988:248:32"},{"body":{"nativeSrc":"4398:538:32","nodeType":"YulBlock","src":"4398:538:32","statements":[{"body":{"nativeSrc":"4445:16:32","nodeType":"YulBlock","src":"4445:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4454:1:32","nodeType":"YulLiteral","src":"4454:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4457:1:32","nodeType":"YulLiteral","src":"4457:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4447:6:32","nodeType":"YulIdentifier","src":"4447:6:32"},"nativeSrc":"4447:12:32","nodeType":"YulFunctionCall","src":"4447:12:32"},"nativeSrc":"4447:12:32","nodeType":"YulExpressionStatement","src":"4447:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4419:7:32","nodeType":"YulIdentifier","src":"4419:7:32"},{"name":"headStart","nativeSrc":"4428:9:32","nodeType":"YulIdentifier","src":"4428:9:32"}],"functionName":{"name":"sub","nativeSrc":"4415:3:32","nodeType":"YulIdentifier","src":"4415:3:32"},"nativeSrc":"4415:23:32","nodeType":"YulFunctionCall","src":"4415:23:32"},{"kind":"number","nativeSrc":"4440:3:32","nodeType":"YulLiteral","src":"4440:3:32","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"4411:3:32","nodeType":"YulIdentifier","src":"4411:3:32"},"nativeSrc":"4411:33:32","nodeType":"YulFunctionCall","src":"4411:33:32"},"nativeSrc":"4408:53:32","nodeType":"YulIf","src":"4408:53:32"},{"nativeSrc":"4470:39:32","nodeType":"YulAssignment","src":"4470:39:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4499:9:32","nodeType":"YulIdentifier","src":"4499:9:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4480:18:32","nodeType":"YulIdentifier","src":"4480:18:32"},"nativeSrc":"4480:29:32","nodeType":"YulFunctionCall","src":"4480:29:32"},"variableNames":[{"name":"value0","nativeSrc":"4470:6:32","nodeType":"YulIdentifier","src":"4470:6:32"}]},{"nativeSrc":"4518:48:32","nodeType":"YulAssignment","src":"4518:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4551:9:32","nodeType":"YulIdentifier","src":"4551:9:32"},{"kind":"number","nativeSrc":"4562:2:32","nodeType":"YulLiteral","src":"4562:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4547:3:32","nodeType":"YulIdentifier","src":"4547:3:32"},"nativeSrc":"4547:18:32","nodeType":"YulFunctionCall","src":"4547:18:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4528:18:32","nodeType":"YulIdentifier","src":"4528:18:32"},"nativeSrc":"4528:38:32","nodeType":"YulFunctionCall","src":"4528:38:32"},"variableNames":[{"name":"value1","nativeSrc":"4518:6:32","nodeType":"YulIdentifier","src":"4518:6:32"}]},{"nativeSrc":"4575:42:32","nodeType":"YulAssignment","src":"4575:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4602:9:32","nodeType":"YulIdentifier","src":"4602:9:32"},{"kind":"number","nativeSrc":"4613:2:32","nodeType":"YulLiteral","src":"4613:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4598:3:32","nodeType":"YulIdentifier","src":"4598:3:32"},"nativeSrc":"4598:18:32","nodeType":"YulFunctionCall","src":"4598:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"4585:12:32","nodeType":"YulIdentifier","src":"4585:12:32"},"nativeSrc":"4585:32:32","nodeType":"YulFunctionCall","src":"4585:32:32"},"variableNames":[{"name":"value2","nativeSrc":"4575:6:32","nodeType":"YulIdentifier","src":"4575:6:32"}]},{"nativeSrc":"4626:42:32","nodeType":"YulAssignment","src":"4626:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4653:9:32","nodeType":"YulIdentifier","src":"4653:9:32"},{"kind":"number","nativeSrc":"4664:2:32","nodeType":"YulLiteral","src":"4664:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4649:3:32","nodeType":"YulIdentifier","src":"4649:3:32"},"nativeSrc":"4649:18:32","nodeType":"YulFunctionCall","src":"4649:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"4636:12:32","nodeType":"YulIdentifier","src":"4636:12:32"},"nativeSrc":"4636:32:32","nodeType":"YulFunctionCall","src":"4636:32:32"},"variableNames":[{"name":"value3","nativeSrc":"4626:6:32","nodeType":"YulIdentifier","src":"4626:6:32"}]},{"nativeSrc":"4677:47:32","nodeType":"YulVariableDeclaration","src":"4677:47:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4708:9:32","nodeType":"YulIdentifier","src":"4708:9:32"},{"kind":"number","nativeSrc":"4719:3:32","nodeType":"YulLiteral","src":"4719:3:32","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4704:3:32","nodeType":"YulIdentifier","src":"4704:3:32"},"nativeSrc":"4704:19:32","nodeType":"YulFunctionCall","src":"4704:19:32"}],"functionName":{"name":"calldataload","nativeSrc":"4691:12:32","nodeType":"YulIdentifier","src":"4691:12:32"},"nativeSrc":"4691:33:32","nodeType":"YulFunctionCall","src":"4691:33:32"},"variables":[{"name":"offset","nativeSrc":"4681:6:32","nodeType":"YulTypedName","src":"4681:6:32","type":""}]},{"body":{"nativeSrc":"4767:16:32","nodeType":"YulBlock","src":"4767:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4776:1:32","nodeType":"YulLiteral","src":"4776:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4779:1:32","nodeType":"YulLiteral","src":"4779:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4769:6:32","nodeType":"YulIdentifier","src":"4769:6:32"},"nativeSrc":"4769:12:32","nodeType":"YulFunctionCall","src":"4769:12:32"},"nativeSrc":"4769:12:32","nodeType":"YulExpressionStatement","src":"4769:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4739:6:32","nodeType":"YulIdentifier","src":"4739:6:32"},{"kind":"number","nativeSrc":"4747:18:32","nodeType":"YulLiteral","src":"4747:18:32","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4736:2:32","nodeType":"YulIdentifier","src":"4736:2:32"},"nativeSrc":"4736:30:32","nodeType":"YulFunctionCall","src":"4736:30:32"},"nativeSrc":"4733:50:32","nodeType":"YulIf","src":"4733:50:32"},{"nativeSrc":"4792:84:32","nodeType":"YulVariableDeclaration","src":"4792:84:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4848:9:32","nodeType":"YulIdentifier","src":"4848:9:32"},{"name":"offset","nativeSrc":"4859:6:32","nodeType":"YulIdentifier","src":"4859:6:32"}],"functionName":{"name":"add","nativeSrc":"4844:3:32","nodeType":"YulIdentifier","src":"4844:3:32"},"nativeSrc":"4844:22:32","nodeType":"YulFunctionCall","src":"4844:22:32"},{"name":"dataEnd","nativeSrc":"4868:7:32","nodeType":"YulIdentifier","src":"4868:7:32"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4818:25:32","nodeType":"YulIdentifier","src":"4818:25:32"},"nativeSrc":"4818:58:32","nodeType":"YulFunctionCall","src":"4818:58:32"},"variables":[{"name":"value4_1","nativeSrc":"4796:8:32","nodeType":"YulTypedName","src":"4796:8:32","type":""},{"name":"value5_1","nativeSrc":"4806:8:32","nodeType":"YulTypedName","src":"4806:8:32","type":""}]},{"nativeSrc":"4885:18:32","nodeType":"YulAssignment","src":"4885:18:32","value":{"name":"value4_1","nativeSrc":"4895:8:32","nodeType":"YulIdentifier","src":"4895:8:32"},"variableNames":[{"name":"value4","nativeSrc":"4885:6:32","nodeType":"YulIdentifier","src":"4885:6:32"}]},{"nativeSrc":"4912:18:32","nodeType":"YulAssignment","src":"4912:18:32","value":{"name":"value5_1","nativeSrc":"4922:8:32","nodeType":"YulIdentifier","src":"4922:8:32"},"variableNames":[{"name":"value5","nativeSrc":"4912:6:32","nodeType":"YulIdentifier","src":"4912:6:32"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"4241:695:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4324:9:32","nodeType":"YulTypedName","src":"4324:9:32","type":""},{"name":"dataEnd","nativeSrc":"4335:7:32","nodeType":"YulTypedName","src":"4335:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4347:6:32","nodeType":"YulTypedName","src":"4347:6:32","type":""},{"name":"value1","nativeSrc":"4355:6:32","nodeType":"YulTypedName","src":"4355:6:32","type":""},{"name":"value2","nativeSrc":"4363:6:32","nodeType":"YulTypedName","src":"4363:6:32","type":""},{"name":"value3","nativeSrc":"4371:6:32","nodeType":"YulTypedName","src":"4371:6:32","type":""},{"name":"value4","nativeSrc":"4379:6:32","nodeType":"YulTypedName","src":"4379:6:32","type":""},{"name":"value5","nativeSrc":"4387:6:32","nodeType":"YulTypedName","src":"4387:6:32","type":""}],"src":"4241:695:32"},{"body":{"nativeSrc":"4973:152:32","nodeType":"YulBlock","src":"4973:152:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4990:1:32","nodeType":"YulLiteral","src":"4990:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4993:77:32","nodeType":"YulLiteral","src":"4993:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4983:6:32","nodeType":"YulIdentifier","src":"4983:6:32"},"nativeSrc":"4983:88:32","nodeType":"YulFunctionCall","src":"4983:88:32"},"nativeSrc":"4983:88:32","nodeType":"YulExpressionStatement","src":"4983:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5087:1:32","nodeType":"YulLiteral","src":"5087:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"5090:4:32","nodeType":"YulLiteral","src":"5090:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5080:6:32","nodeType":"YulIdentifier","src":"5080:6:32"},"nativeSrc":"5080:15:32","nodeType":"YulFunctionCall","src":"5080:15:32"},"nativeSrc":"5080:15:32","nodeType":"YulExpressionStatement","src":"5080:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5111:1:32","nodeType":"YulLiteral","src":"5111:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5114:4:32","nodeType":"YulLiteral","src":"5114:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5104:6:32","nodeType":"YulIdentifier","src":"5104:6:32"},"nativeSrc":"5104:15:32","nodeType":"YulFunctionCall","src":"5104:15:32"},"nativeSrc":"5104:15:32","nodeType":"YulExpressionStatement","src":"5104:15:32"}]},"name":"panic_error_0x11","nativeSrc":"4941:184:32","nodeType":"YulFunctionDefinition","src":"4941:184:32"},{"body":{"nativeSrc":"5179:79:32","nodeType":"YulBlock","src":"5179:79:32","statements":[{"nativeSrc":"5189:17:32","nodeType":"YulAssignment","src":"5189:17:32","value":{"arguments":[{"name":"x","nativeSrc":"5201:1:32","nodeType":"YulIdentifier","src":"5201:1:32"},{"name":"y","nativeSrc":"5204:1:32","nodeType":"YulIdentifier","src":"5204:1:32"}],"functionName":{"name":"sub","nativeSrc":"5197:3:32","nodeType":"YulIdentifier","src":"5197:3:32"},"nativeSrc":"5197:9:32","nodeType":"YulFunctionCall","src":"5197:9:32"},"variableNames":[{"name":"diff","nativeSrc":"5189:4:32","nodeType":"YulIdentifier","src":"5189:4:32"}]},{"body":{"nativeSrc":"5230:22:32","nodeType":"YulBlock","src":"5230:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5232:16:32","nodeType":"YulIdentifier","src":"5232:16:32"},"nativeSrc":"5232:18:32","nodeType":"YulFunctionCall","src":"5232:18:32"},"nativeSrc":"5232:18:32","nodeType":"YulExpressionStatement","src":"5232:18:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5221:4:32","nodeType":"YulIdentifier","src":"5221:4:32"},{"name":"x","nativeSrc":"5227:1:32","nodeType":"YulIdentifier","src":"5227:1:32"}],"functionName":{"name":"gt","nativeSrc":"5218:2:32","nodeType":"YulIdentifier","src":"5218:2:32"},"nativeSrc":"5218:11:32","nodeType":"YulFunctionCall","src":"5218:11:32"},"nativeSrc":"5215:37:32","nodeType":"YulIf","src":"5215:37:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"5130:128:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5161:1:32","nodeType":"YulTypedName","src":"5161:1:32","type":""},{"name":"y","nativeSrc":"5164:1:32","nodeType":"YulTypedName","src":"5164:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5170:4:32","nodeType":"YulTypedName","src":"5170:4:32","type":""}],"src":"5130:128:32"},{"body":{"nativeSrc":"5295:152:32","nodeType":"YulBlock","src":"5295:152:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5312:1:32","nodeType":"YulLiteral","src":"5312:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5315:77:32","nodeType":"YulLiteral","src":"5315:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5305:6:32","nodeType":"YulIdentifier","src":"5305:6:32"},"nativeSrc":"5305:88:32","nodeType":"YulFunctionCall","src":"5305:88:32"},"nativeSrc":"5305:88:32","nodeType":"YulExpressionStatement","src":"5305:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5409:1:32","nodeType":"YulLiteral","src":"5409:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"5412:4:32","nodeType":"YulLiteral","src":"5412:4:32","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5402:6:32","nodeType":"YulIdentifier","src":"5402:6:32"},"nativeSrc":"5402:15:32","nodeType":"YulFunctionCall","src":"5402:15:32"},"nativeSrc":"5402:15:32","nodeType":"YulExpressionStatement","src":"5402:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5433:1:32","nodeType":"YulLiteral","src":"5433:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5436:4:32","nodeType":"YulLiteral","src":"5436:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5426:6:32","nodeType":"YulIdentifier","src":"5426:6:32"},"nativeSrc":"5426:15:32","nodeType":"YulFunctionCall","src":"5426:15:32"},"nativeSrc":"5426:15:32","nodeType":"YulExpressionStatement","src":"5426:15:32"}]},"name":"panic_error_0x32","nativeSrc":"5263:184:32","nodeType":"YulFunctionDefinition","src":"5263:184:32"},{"body":{"nativeSrc":"5499:148:32","nodeType":"YulBlock","src":"5499:148:32","statements":[{"body":{"nativeSrc":"5590:22:32","nodeType":"YulBlock","src":"5590:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5592:16:32","nodeType":"YulIdentifier","src":"5592:16:32"},"nativeSrc":"5592:18:32","nodeType":"YulFunctionCall","src":"5592:18:32"},"nativeSrc":"5592:18:32","nodeType":"YulExpressionStatement","src":"5592:18:32"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"5515:5:32","nodeType":"YulIdentifier","src":"5515:5:32"},{"kind":"number","nativeSrc":"5522:66:32","nodeType":"YulLiteral","src":"5522:66:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"5512:2:32","nodeType":"YulIdentifier","src":"5512:2:32"},"nativeSrc":"5512:77:32","nodeType":"YulFunctionCall","src":"5512:77:32"},"nativeSrc":"5509:103:32","nodeType":"YulIf","src":"5509:103:32"},{"nativeSrc":"5621:20:32","nodeType":"YulAssignment","src":"5621:20:32","value":{"arguments":[{"name":"value","nativeSrc":"5632:5:32","nodeType":"YulIdentifier","src":"5632:5:32"},{"kind":"number","nativeSrc":"5639:1:32","nodeType":"YulLiteral","src":"5639:1:32","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5628:3:32","nodeType":"YulIdentifier","src":"5628:3:32"},"nativeSrc":"5628:13:32","nodeType":"YulFunctionCall","src":"5628:13:32"},"variableNames":[{"name":"ret","nativeSrc":"5621:3:32","nodeType":"YulIdentifier","src":"5621:3:32"}]}]},"name":"increment_t_uint256","nativeSrc":"5452:195:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5481:5:32","nodeType":"YulTypedName","src":"5481:5:32","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5491:3:32","nodeType":"YulTypedName","src":"5491:3:32","type":""}],"src":"5452:195:32"},{"body":{"nativeSrc":"5704:116:32","nodeType":"YulBlock","src":"5704:116:32","statements":[{"nativeSrc":"5714:20:32","nodeType":"YulAssignment","src":"5714:20:32","value":{"arguments":[{"name":"x","nativeSrc":"5729:1:32","nodeType":"YulIdentifier","src":"5729:1:32"},{"name":"y","nativeSrc":"5732:1:32","nodeType":"YulIdentifier","src":"5732:1:32"}],"functionName":{"name":"mul","nativeSrc":"5725:3:32","nodeType":"YulIdentifier","src":"5725:3:32"},"nativeSrc":"5725:9:32","nodeType":"YulFunctionCall","src":"5725:9:32"},"variableNames":[{"name":"product","nativeSrc":"5714:7:32","nodeType":"YulIdentifier","src":"5714:7:32"}]},{"body":{"nativeSrc":"5792:22:32","nodeType":"YulBlock","src":"5792:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5794:16:32","nodeType":"YulIdentifier","src":"5794:16:32"},"nativeSrc":"5794:18:32","nodeType":"YulFunctionCall","src":"5794:18:32"},"nativeSrc":"5794:18:32","nodeType":"YulExpressionStatement","src":"5794:18:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"5763:1:32","nodeType":"YulIdentifier","src":"5763:1:32"}],"functionName":{"name":"iszero","nativeSrc":"5756:6:32","nodeType":"YulIdentifier","src":"5756:6:32"},"nativeSrc":"5756:9:32","nodeType":"YulFunctionCall","src":"5756:9:32"},{"arguments":[{"name":"y","nativeSrc":"5770:1:32","nodeType":"YulIdentifier","src":"5770:1:32"},{"arguments":[{"name":"product","nativeSrc":"5777:7:32","nodeType":"YulIdentifier","src":"5777:7:32"},{"name":"x","nativeSrc":"5786:1:32","nodeType":"YulIdentifier","src":"5786:1:32"}],"functionName":{"name":"div","nativeSrc":"5773:3:32","nodeType":"YulIdentifier","src":"5773:3:32"},"nativeSrc":"5773:15:32","nodeType":"YulFunctionCall","src":"5773:15:32"}],"functionName":{"name":"eq","nativeSrc":"5767:2:32","nodeType":"YulIdentifier","src":"5767:2:32"},"nativeSrc":"5767:22:32","nodeType":"YulFunctionCall","src":"5767:22:32"}],"functionName":{"name":"or","nativeSrc":"5753:2:32","nodeType":"YulIdentifier","src":"5753:2:32"},"nativeSrc":"5753:37:32","nodeType":"YulFunctionCall","src":"5753:37:32"}],"functionName":{"name":"iszero","nativeSrc":"5746:6:32","nodeType":"YulIdentifier","src":"5746:6:32"},"nativeSrc":"5746:45:32","nodeType":"YulFunctionCall","src":"5746:45:32"},"nativeSrc":"5743:71:32","nodeType":"YulIf","src":"5743:71:32"}]},"name":"checked_mul_t_uint256","nativeSrc":"5652:168:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5683:1:32","nodeType":"YulTypedName","src":"5683:1:32","type":""},{"name":"y","nativeSrc":"5686:1:32","nodeType":"YulTypedName","src":"5686:1:32","type":""}],"returnVariables":[{"name":"product","nativeSrc":"5692:7:32","nodeType":"YulTypedName","src":"5692:7:32","type":""}],"src":"5652:168:32"},{"body":{"nativeSrc":"5871:228:32","nodeType":"YulBlock","src":"5871:228:32","statements":[{"body":{"nativeSrc":"5902:168:32","nodeType":"YulBlock","src":"5902:168:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5923:1:32","nodeType":"YulLiteral","src":"5923:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5926:77:32","nodeType":"YulLiteral","src":"5926:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5916:6:32","nodeType":"YulIdentifier","src":"5916:6:32"},"nativeSrc":"5916:88:32","nodeType":"YulFunctionCall","src":"5916:88:32"},"nativeSrc":"5916:88:32","nodeType":"YulExpressionStatement","src":"5916:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6024:1:32","nodeType":"YulLiteral","src":"6024:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"6027:4:32","nodeType":"YulLiteral","src":"6027:4:32","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"6017:6:32","nodeType":"YulIdentifier","src":"6017:6:32"},"nativeSrc":"6017:15:32","nodeType":"YulFunctionCall","src":"6017:15:32"},"nativeSrc":"6017:15:32","nodeType":"YulExpressionStatement","src":"6017:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6052:1:32","nodeType":"YulLiteral","src":"6052:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6055:4:32","nodeType":"YulLiteral","src":"6055:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6045:6:32","nodeType":"YulIdentifier","src":"6045:6:32"},"nativeSrc":"6045:15:32","nodeType":"YulFunctionCall","src":"6045:15:32"},"nativeSrc":"6045:15:32","nodeType":"YulExpressionStatement","src":"6045:15:32"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5891:1:32","nodeType":"YulIdentifier","src":"5891:1:32"}],"functionName":{"name":"iszero","nativeSrc":"5884:6:32","nodeType":"YulIdentifier","src":"5884:6:32"},"nativeSrc":"5884:9:32","nodeType":"YulFunctionCall","src":"5884:9:32"},"nativeSrc":"5881:189:32","nodeType":"YulIf","src":"5881:189:32"},{"nativeSrc":"6079:14:32","nodeType":"YulAssignment","src":"6079:14:32","value":{"arguments":[{"name":"x","nativeSrc":"6088:1:32","nodeType":"YulIdentifier","src":"6088:1:32"},{"name":"y","nativeSrc":"6091:1:32","nodeType":"YulIdentifier","src":"6091:1:32"}],"functionName":{"name":"div","nativeSrc":"6084:3:32","nodeType":"YulIdentifier","src":"6084:3:32"},"nativeSrc":"6084:9:32","nodeType":"YulFunctionCall","src":"6084:9:32"},"variableNames":[{"name":"r","nativeSrc":"6079:1:32","nodeType":"YulIdentifier","src":"6079:1:32"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5825:274:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5856:1:32","nodeType":"YulTypedName","src":"5856:1:32","type":""},{"name":"y","nativeSrc":"5859:1:32","nodeType":"YulTypedName","src":"5859:1:32","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5865:1:32","nodeType":"YulTypedName","src":"5865:1:32","type":""}],"src":"5825:274:32"},{"body":{"nativeSrc":"6233:168:32","nodeType":"YulBlock","src":"6233:168:32","statements":[{"nativeSrc":"6243:26:32","nodeType":"YulAssignment","src":"6243:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"6255:9:32","nodeType":"YulIdentifier","src":"6255:9:32"},{"kind":"number","nativeSrc":"6266:2:32","nodeType":"YulLiteral","src":"6266:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6251:3:32","nodeType":"YulIdentifier","src":"6251:3:32"},"nativeSrc":"6251:18:32","nodeType":"YulFunctionCall","src":"6251:18:32"},"variableNames":[{"name":"tail","nativeSrc":"6243:4:32","nodeType":"YulIdentifier","src":"6243:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6285:9:32","nodeType":"YulIdentifier","src":"6285:9:32"},{"arguments":[{"name":"value0","nativeSrc":"6300:6:32","nodeType":"YulIdentifier","src":"6300:6:32"},{"kind":"number","nativeSrc":"6308:42:32","nodeType":"YulLiteral","src":"6308:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6296:3:32","nodeType":"YulIdentifier","src":"6296:3:32"},"nativeSrc":"6296:55:32","nodeType":"YulFunctionCall","src":"6296:55:32"}],"functionName":{"name":"mstore","nativeSrc":"6278:6:32","nodeType":"YulIdentifier","src":"6278:6:32"},"nativeSrc":"6278:74:32","nodeType":"YulFunctionCall","src":"6278:74:32"},"nativeSrc":"6278:74:32","nodeType":"YulExpressionStatement","src":"6278:74:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6372:9:32","nodeType":"YulIdentifier","src":"6372:9:32"},{"kind":"number","nativeSrc":"6383:2:32","nodeType":"YulLiteral","src":"6383:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6368:3:32","nodeType":"YulIdentifier","src":"6368:3:32"},"nativeSrc":"6368:18:32","nodeType":"YulFunctionCall","src":"6368:18:32"},{"name":"value1","nativeSrc":"6388:6:32","nodeType":"YulIdentifier","src":"6388:6:32"}],"functionName":{"name":"mstore","nativeSrc":"6361:6:32","nodeType":"YulIdentifier","src":"6361:6:32"},"nativeSrc":"6361:34:32","nodeType":"YulFunctionCall","src":"6361:34:32"},"nativeSrc":"6361:34:32","nodeType":"YulExpressionStatement","src":"6361:34:32"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"6104:297:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6194:9:32","nodeType":"YulTypedName","src":"6194:9:32","type":""},{"name":"value1","nativeSrc":"6205:6:32","nodeType":"YulTypedName","src":"6205:6:32","type":""},{"name":"value0","nativeSrc":"6213:6:32","nodeType":"YulTypedName","src":"6213:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6224:4:32","nodeType":"YulTypedName","src":"6224:4:32","type":""}],"src":"6104:297:32"},{"body":{"nativeSrc":"6454:77:32","nodeType":"YulBlock","src":"6454:77:32","statements":[{"nativeSrc":"6464:16:32","nodeType":"YulAssignment","src":"6464:16:32","value":{"arguments":[{"name":"x","nativeSrc":"6475:1:32","nodeType":"YulIdentifier","src":"6475:1:32"},{"name":"y","nativeSrc":"6478:1:32","nodeType":"YulIdentifier","src":"6478:1:32"}],"functionName":{"name":"add","nativeSrc":"6471:3:32","nodeType":"YulIdentifier","src":"6471:3:32"},"nativeSrc":"6471:9:32","nodeType":"YulFunctionCall","src":"6471:9:32"},"variableNames":[{"name":"sum","nativeSrc":"6464:3:32","nodeType":"YulIdentifier","src":"6464:3:32"}]},{"body":{"nativeSrc":"6503:22:32","nodeType":"YulBlock","src":"6503:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6505:16:32","nodeType":"YulIdentifier","src":"6505:16:32"},"nativeSrc":"6505:18:32","nodeType":"YulFunctionCall","src":"6505:18:32"},"nativeSrc":"6505:18:32","nodeType":"YulExpressionStatement","src":"6505:18:32"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"6495:1:32","nodeType":"YulIdentifier","src":"6495:1:32"},{"name":"sum","nativeSrc":"6498:3:32","nodeType":"YulIdentifier","src":"6498:3:32"}],"functionName":{"name":"gt","nativeSrc":"6492:2:32","nodeType":"YulIdentifier","src":"6492:2:32"},"nativeSrc":"6492:10:32","nodeType":"YulFunctionCall","src":"6492:10:32"},"nativeSrc":"6489:36:32","nodeType":"YulIf","src":"6489:36:32"}]},"name":"checked_add_t_uint256","nativeSrc":"6406:125:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6437:1:32","nodeType":"YulTypedName","src":"6437:1:32","type":""},{"name":"y","nativeSrc":"6440:1:32","nodeType":"YulTypedName","src":"6440:1:32","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"6446:3:32","nodeType":"YulTypedName","src":"6446:3:32","type":""}],"src":"6406:125:32"},{"body":{"nativeSrc":"6614:280:32","nodeType":"YulBlock","src":"6614:280:32","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6631:3:32","nodeType":"YulIdentifier","src":"6631:3:32"},{"name":"length","nativeSrc":"6636:6:32","nodeType":"YulIdentifier","src":"6636:6:32"}],"functionName":{"name":"mstore","nativeSrc":"6624:6:32","nodeType":"YulIdentifier","src":"6624:6:32"},"nativeSrc":"6624:19:32","nodeType":"YulFunctionCall","src":"6624:19:32"},"nativeSrc":"6624:19:32","nodeType":"YulExpressionStatement","src":"6624:19:32"},{"body":{"nativeSrc":"6734:16:32","nodeType":"YulBlock","src":"6734:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6743:1:32","nodeType":"YulLiteral","src":"6743:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6746:1:32","nodeType":"YulLiteral","src":"6746:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6736:6:32","nodeType":"YulIdentifier","src":"6736:6:32"},"nativeSrc":"6736:12:32","nodeType":"YulFunctionCall","src":"6736:12:32"},"nativeSrc":"6736:12:32","nodeType":"YulExpressionStatement","src":"6736:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6658:6:32","nodeType":"YulIdentifier","src":"6658:6:32"},{"kind":"number","nativeSrc":"6666:66:32","nodeType":"YulLiteral","src":"6666:66:32","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6655:2:32","nodeType":"YulIdentifier","src":"6655:2:32"},"nativeSrc":"6655:78:32","nodeType":"YulFunctionCall","src":"6655:78:32"},"nativeSrc":"6652:98:32","nodeType":"YulIf","src":"6652:98:32"},{"nativeSrc":"6759:30:32","nodeType":"YulVariableDeclaration","src":"6759:30:32","value":{"arguments":[{"kind":"number","nativeSrc":"6779:1:32","nodeType":"YulLiteral","src":"6779:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"6782:6:32","nodeType":"YulIdentifier","src":"6782:6:32"}],"functionName":{"name":"shl","nativeSrc":"6775:3:32","nodeType":"YulIdentifier","src":"6775:3:32"},"nativeSrc":"6775:14:32","nodeType":"YulFunctionCall","src":"6775:14:32"},"variables":[{"name":"length_1","nativeSrc":"6763:8:32","nodeType":"YulTypedName","src":"6763:8:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6815:3:32","nodeType":"YulIdentifier","src":"6815:3:32"},{"kind":"number","nativeSrc":"6820:4:32","nodeType":"YulLiteral","src":"6820:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6811:3:32","nodeType":"YulIdentifier","src":"6811:3:32"},"nativeSrc":"6811:14:32","nodeType":"YulFunctionCall","src":"6811:14:32"},{"name":"start","nativeSrc":"6827:5:32","nodeType":"YulIdentifier","src":"6827:5:32"},{"name":"length_1","nativeSrc":"6834:8:32","nodeType":"YulIdentifier","src":"6834:8:32"}],"functionName":{"name":"calldatacopy","nativeSrc":"6798:12:32","nodeType":"YulIdentifier","src":"6798:12:32"},"nativeSrc":"6798:45:32","nodeType":"YulFunctionCall","src":"6798:45:32"},"nativeSrc":"6798:45:32","nodeType":"YulExpressionStatement","src":"6798:45:32"},{"nativeSrc":"6852:36:32","nodeType":"YulAssignment","src":"6852:36:32","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6867:3:32","nodeType":"YulIdentifier","src":"6867:3:32"},{"name":"length_1","nativeSrc":"6872:8:32","nodeType":"YulIdentifier","src":"6872:8:32"}],"functionName":{"name":"add","nativeSrc":"6863:3:32","nodeType":"YulIdentifier","src":"6863:3:32"},"nativeSrc":"6863:18:32","nodeType":"YulFunctionCall","src":"6863:18:32"},{"kind":"number","nativeSrc":"6883:4:32","nodeType":"YulLiteral","src":"6883:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6859:3:32","nodeType":"YulIdentifier","src":"6859:3:32"},"nativeSrc":"6859:29:32","nodeType":"YulFunctionCall","src":"6859:29:32"},"variableNames":[{"name":"end","nativeSrc":"6852:3:32","nodeType":"YulIdentifier","src":"6852:3:32"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6536:358:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6583:5:32","nodeType":"YulTypedName","src":"6583:5:32","type":""},{"name":"length","nativeSrc":"6590:6:32","nodeType":"YulTypedName","src":"6590:6:32","type":""},{"name":"pos","nativeSrc":"6598:3:32","nodeType":"YulTypedName","src":"6598:3:32","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6606:3:32","nodeType":"YulTypedName","src":"6606:3:32","type":""}],"src":"6536:358:32"},{"body":{"nativeSrc":"7176:362:32","nodeType":"YulBlock","src":"7176:362:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7193:9:32","nodeType":"YulIdentifier","src":"7193:9:32"},{"arguments":[{"name":"value0","nativeSrc":"7208:6:32","nodeType":"YulIdentifier","src":"7208:6:32"},{"kind":"number","nativeSrc":"7216:42:32","nodeType":"YulLiteral","src":"7216:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7204:3:32","nodeType":"YulIdentifier","src":"7204:3:32"},"nativeSrc":"7204:55:32","nodeType":"YulFunctionCall","src":"7204:55:32"}],"functionName":{"name":"mstore","nativeSrc":"7186:6:32","nodeType":"YulIdentifier","src":"7186:6:32"},"nativeSrc":"7186:74:32","nodeType":"YulFunctionCall","src":"7186:74:32"},"nativeSrc":"7186:74:32","nodeType":"YulExpressionStatement","src":"7186:74:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7280:9:32","nodeType":"YulIdentifier","src":"7280:9:32"},{"kind":"number","nativeSrc":"7291:2:32","nodeType":"YulLiteral","src":"7291:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7276:3:32","nodeType":"YulIdentifier","src":"7276:3:32"},"nativeSrc":"7276:18:32","nodeType":"YulFunctionCall","src":"7276:18:32"},{"kind":"number","nativeSrc":"7296:2:32","nodeType":"YulLiteral","src":"7296:2:32","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"7269:6:32","nodeType":"YulIdentifier","src":"7269:6:32"},"nativeSrc":"7269:30:32","nodeType":"YulFunctionCall","src":"7269:30:32"},"nativeSrc":"7269:30:32","nodeType":"YulExpressionStatement","src":"7269:30:32"},{"nativeSrc":"7308:87:32","nodeType":"YulVariableDeclaration","src":"7308:87:32","value":{"arguments":[{"name":"value1","nativeSrc":"7360:6:32","nodeType":"YulIdentifier","src":"7360:6:32"},{"name":"value2","nativeSrc":"7368:6:32","nodeType":"YulIdentifier","src":"7368:6:32"},{"arguments":[{"name":"headStart","nativeSrc":"7380:9:32","nodeType":"YulIdentifier","src":"7380:9:32"},{"kind":"number","nativeSrc":"7391:2:32","nodeType":"YulLiteral","src":"7391:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7376:3:32","nodeType":"YulIdentifier","src":"7376:3:32"},"nativeSrc":"7376:18:32","nodeType":"YulFunctionCall","src":"7376:18:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7322:37:32","nodeType":"YulIdentifier","src":"7322:37:32"},"nativeSrc":"7322:73:32","nodeType":"YulFunctionCall","src":"7322:73:32"},"variables":[{"name":"tail_1","nativeSrc":"7312:6:32","nodeType":"YulTypedName","src":"7312:6:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7415:9:32","nodeType":"YulIdentifier","src":"7415:9:32"},{"kind":"number","nativeSrc":"7426:2:32","nodeType":"YulLiteral","src":"7426:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7411:3:32","nodeType":"YulIdentifier","src":"7411:3:32"},"nativeSrc":"7411:18:32","nodeType":"YulFunctionCall","src":"7411:18:32"},{"arguments":[{"name":"tail_1","nativeSrc":"7435:6:32","nodeType":"YulIdentifier","src":"7435:6:32"},{"name":"headStart","nativeSrc":"7443:9:32","nodeType":"YulIdentifier","src":"7443:9:32"}],"functionName":{"name":"sub","nativeSrc":"7431:3:32","nodeType":"YulIdentifier","src":"7431:3:32"},"nativeSrc":"7431:22:32","nodeType":"YulFunctionCall","src":"7431:22:32"}],"functionName":{"name":"mstore","nativeSrc":"7404:6:32","nodeType":"YulIdentifier","src":"7404:6:32"},"nativeSrc":"7404:50:32","nodeType":"YulFunctionCall","src":"7404:50:32"},"nativeSrc":"7404:50:32","nodeType":"YulExpressionStatement","src":"7404:50:32"},{"nativeSrc":"7463:69:32","nodeType":"YulAssignment","src":"7463:69:32","value":{"arguments":[{"name":"value3","nativeSrc":"7509:6:32","nodeType":"YulIdentifier","src":"7509:6:32"},{"name":"value4","nativeSrc":"7517:6:32","nodeType":"YulIdentifier","src":"7517:6:32"},{"name":"tail_1","nativeSrc":"7525:6:32","nodeType":"YulIdentifier","src":"7525:6:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7471:37:32","nodeType":"YulIdentifier","src":"7471:37:32"},"nativeSrc":"7471:61:32","nodeType":"YulFunctionCall","src":"7471:61:32"},"variableNames":[{"name":"tail","nativeSrc":"7463:4:32","nodeType":"YulIdentifier","src":"7463:4:32"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6899:639:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7113:9:32","nodeType":"YulTypedName","src":"7113:9:32","type":""},{"name":"value4","nativeSrc":"7124:6:32","nodeType":"YulTypedName","src":"7124:6:32","type":""},{"name":"value3","nativeSrc":"7132:6:32","nodeType":"YulTypedName","src":"7132:6:32","type":""},{"name":"value2","nativeSrc":"7140:6:32","nodeType":"YulTypedName","src":"7140:6:32","type":""},{"name":"value1","nativeSrc":"7148:6:32","nodeType":"YulTypedName","src":"7148:6:32","type":""},{"name":"value0","nativeSrc":"7156:6:32","nodeType":"YulTypedName","src":"7156:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7167:4:32","nodeType":"YulTypedName","src":"7167:4:32","type":""}],"src":"6899:639:32"},{"body":{"nativeSrc":"7876:402:32","nodeType":"YulBlock","src":"7876:402:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7893:9:32","nodeType":"YulIdentifier","src":"7893:9:32"},{"name":"value0","nativeSrc":"7904:6:32","nodeType":"YulIdentifier","src":"7904:6:32"}],"functionName":{"name":"mstore","nativeSrc":"7886:6:32","nodeType":"YulIdentifier","src":"7886:6:32"},"nativeSrc":"7886:25:32","nodeType":"YulFunctionCall","src":"7886:25:32"},"nativeSrc":"7886:25:32","nodeType":"YulExpressionStatement","src":"7886:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7931:9:32","nodeType":"YulIdentifier","src":"7931:9:32"},{"kind":"number","nativeSrc":"7942:2:32","nodeType":"YulLiteral","src":"7942:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7927:3:32","nodeType":"YulIdentifier","src":"7927:3:32"},"nativeSrc":"7927:18:32","nodeType":"YulFunctionCall","src":"7927:18:32"},{"name":"value1","nativeSrc":"7947:6:32","nodeType":"YulIdentifier","src":"7947:6:32"}],"functionName":{"name":"mstore","nativeSrc":"7920:6:32","nodeType":"YulIdentifier","src":"7920:6:32"},"nativeSrc":"7920:34:32","nodeType":"YulFunctionCall","src":"7920:34:32"},"nativeSrc":"7920:34:32","nodeType":"YulExpressionStatement","src":"7920:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7974:9:32","nodeType":"YulIdentifier","src":"7974:9:32"},{"kind":"number","nativeSrc":"7985:2:32","nodeType":"YulLiteral","src":"7985:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7970:3:32","nodeType":"YulIdentifier","src":"7970:3:32"},"nativeSrc":"7970:18:32","nodeType":"YulFunctionCall","src":"7970:18:32"},{"kind":"number","nativeSrc":"7990:3:32","nodeType":"YulLiteral","src":"7990:3:32","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"7963:6:32","nodeType":"YulIdentifier","src":"7963:6:32"},"nativeSrc":"7963:31:32","nodeType":"YulFunctionCall","src":"7963:31:32"},"nativeSrc":"7963:31:32","nodeType":"YulExpressionStatement","src":"7963:31:32"},{"nativeSrc":"8003:88:32","nodeType":"YulVariableDeclaration","src":"8003:88:32","value":{"arguments":[{"name":"value2","nativeSrc":"8055:6:32","nodeType":"YulIdentifier","src":"8055:6:32"},{"name":"value3","nativeSrc":"8063:6:32","nodeType":"YulIdentifier","src":"8063:6:32"},{"arguments":[{"name":"headStart","nativeSrc":"8075:9:32","nodeType":"YulIdentifier","src":"8075:9:32"},{"kind":"number","nativeSrc":"8086:3:32","nodeType":"YulLiteral","src":"8086:3:32","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"8071:3:32","nodeType":"YulIdentifier","src":"8071:3:32"},"nativeSrc":"8071:19:32","nodeType":"YulFunctionCall","src":"8071:19:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"8017:37:32","nodeType":"YulIdentifier","src":"8017:37:32"},"nativeSrc":"8017:74:32","nodeType":"YulFunctionCall","src":"8017:74:32"},"variables":[{"name":"tail_1","nativeSrc":"8007:6:32","nodeType":"YulTypedName","src":"8007:6:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8111:9:32","nodeType":"YulIdentifier","src":"8111:9:32"},{"kind":"number","nativeSrc":"8122:2:32","nodeType":"YulLiteral","src":"8122:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8107:3:32","nodeType":"YulIdentifier","src":"8107:3:32"},"nativeSrc":"8107:18:32","nodeType":"YulFunctionCall","src":"8107:18:32"},{"arguments":[{"name":"tail_1","nativeSrc":"8131:6:32","nodeType":"YulIdentifier","src":"8131:6:32"},{"name":"headStart","nativeSrc":"8139:9:32","nodeType":"YulIdentifier","src":"8139:9:32"}],"functionName":{"name":"sub","nativeSrc":"8127:3:32","nodeType":"YulIdentifier","src":"8127:3:32"},"nativeSrc":"8127:22:32","nodeType":"YulFunctionCall","src":"8127:22:32"}],"functionName":{"name":"mstore","nativeSrc":"8100:6:32","nodeType":"YulIdentifier","src":"8100:6:32"},"nativeSrc":"8100:50:32","nodeType":"YulFunctionCall","src":"8100:50:32"},"nativeSrc":"8100:50:32","nodeType":"YulExpressionStatement","src":"8100:50:32"},{"nativeSrc":"8159:69:32","nodeType":"YulAssignment","src":"8159:69:32","value":{"arguments":[{"name":"value4","nativeSrc":"8205:6:32","nodeType":"YulIdentifier","src":"8205:6:32"},{"name":"value5","nativeSrc":"8213:6:32","nodeType":"YulIdentifier","src":"8213:6:32"},{"name":"tail_1","nativeSrc":"8221:6:32","nodeType":"YulIdentifier","src":"8221:6:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"8167:37:32","nodeType":"YulIdentifier","src":"8167:37:32"},"nativeSrc":"8167:61:32","nodeType":"YulFunctionCall","src":"8167:61:32"},"variableNames":[{"name":"tail","nativeSrc":"8159:4:32","nodeType":"YulIdentifier","src":"8159:4:32"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8248:9:32","nodeType":"YulIdentifier","src":"8248:9:32"},{"kind":"number","nativeSrc":"8259:3:32","nodeType":"YulLiteral","src":"8259:3:32","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8244:3:32","nodeType":"YulIdentifier","src":"8244:3:32"},"nativeSrc":"8244:19:32","nodeType":"YulFunctionCall","src":"8244:19:32"},{"name":"value6","nativeSrc":"8265:6:32","nodeType":"YulIdentifier","src":"8265:6:32"}],"functionName":{"name":"mstore","nativeSrc":"8237:6:32","nodeType":"YulIdentifier","src":"8237:6:32"},"nativeSrc":"8237:35:32","nodeType":"YulFunctionCall","src":"8237:35:32"},"nativeSrc":"8237:35:32","nodeType":"YulExpressionStatement","src":"8237:35:32"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed","nativeSrc":"7543:735:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7797:9:32","nodeType":"YulTypedName","src":"7797:9:32","type":""},{"name":"value6","nativeSrc":"7808:6:32","nodeType":"YulTypedName","src":"7808:6:32","type":""},{"name":"value5","nativeSrc":"7816:6:32","nodeType":"YulTypedName","src":"7816:6:32","type":""},{"name":"value4","nativeSrc":"7824:6:32","nodeType":"YulTypedName","src":"7824:6:32","type":""},{"name":"value3","nativeSrc":"7832:6:32","nodeType":"YulTypedName","src":"7832:6:32","type":""},{"name":"value2","nativeSrc":"7840:6:32","nodeType":"YulTypedName","src":"7840:6:32","type":""},{"name":"value1","nativeSrc":"7848:6:32","nodeType":"YulTypedName","src":"7848:6:32","type":""},{"name":"value0","nativeSrc":"7856:6:32","nodeType":"YulTypedName","src":"7856:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7867:4:32","nodeType":"YulTypedName","src":"7867:4:32","type":""}],"src":"7543:735:32"},{"body":{"nativeSrc":"8412:198:32","nodeType":"YulBlock","src":"8412:198:32","statements":[{"nativeSrc":"8422:26:32","nodeType":"YulAssignment","src":"8422:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"8434:9:32","nodeType":"YulIdentifier","src":"8434:9:32"},{"kind":"number","nativeSrc":"8445:2:32","nodeType":"YulLiteral","src":"8445:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8430:3:32","nodeType":"YulIdentifier","src":"8430:3:32"},"nativeSrc":"8430:18:32","nodeType":"YulFunctionCall","src":"8430:18:32"},"variableNames":[{"name":"tail","nativeSrc":"8422:4:32","nodeType":"YulIdentifier","src":"8422:4:32"}]},{"nativeSrc":"8457:52:32","nodeType":"YulVariableDeclaration","src":"8457:52:32","value":{"kind":"number","nativeSrc":"8467:42:32","nodeType":"YulLiteral","src":"8467:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8461:2:32","nodeType":"YulTypedName","src":"8461:2:32","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8525:9:32","nodeType":"YulIdentifier","src":"8525:9:32"},{"arguments":[{"name":"value0","nativeSrc":"8540:6:32","nodeType":"YulIdentifier","src":"8540:6:32"},{"name":"_1","nativeSrc":"8548:2:32","nodeType":"YulIdentifier","src":"8548:2:32"}],"functionName":{"name":"and","nativeSrc":"8536:3:32","nodeType":"YulIdentifier","src":"8536:3:32"},"nativeSrc":"8536:15:32","nodeType":"YulFunctionCall","src":"8536:15:32"}],"functionName":{"name":"mstore","nativeSrc":"8518:6:32","nodeType":"YulIdentifier","src":"8518:6:32"},"nativeSrc":"8518:34:32","nodeType":"YulFunctionCall","src":"8518:34:32"},"nativeSrc":"8518:34:32","nodeType":"YulExpressionStatement","src":"8518:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8572:9:32","nodeType":"YulIdentifier","src":"8572:9:32"},{"kind":"number","nativeSrc":"8583:2:32","nodeType":"YulLiteral","src":"8583:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8568:3:32","nodeType":"YulIdentifier","src":"8568:3:32"},"nativeSrc":"8568:18:32","nodeType":"YulFunctionCall","src":"8568:18:32"},{"arguments":[{"name":"value1","nativeSrc":"8592:6:32","nodeType":"YulIdentifier","src":"8592:6:32"},{"name":"_1","nativeSrc":"8600:2:32","nodeType":"YulIdentifier","src":"8600:2:32"}],"functionName":{"name":"and","nativeSrc":"8588:3:32","nodeType":"YulIdentifier","src":"8588:3:32"},"nativeSrc":"8588:15:32","nodeType":"YulFunctionCall","src":"8588:15:32"}],"functionName":{"name":"mstore","nativeSrc":"8561:6:32","nodeType":"YulIdentifier","src":"8561:6:32"},"nativeSrc":"8561:43:32","nodeType":"YulFunctionCall","src":"8561:43:32"},"nativeSrc":"8561:43:32","nodeType":"YulExpressionStatement","src":"8561:43:32"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"8283:327:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8373:9:32","nodeType":"YulTypedName","src":"8373:9:32","type":""},{"name":"value1","nativeSrc":"8384:6:32","nodeType":"YulTypedName","src":"8384:6:32","type":""},{"name":"value0","nativeSrc":"8392:6:32","nodeType":"YulTypedName","src":"8392:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8403:4:32","nodeType":"YulTypedName","src":"8403:4:32","type":""}],"src":"8283:327:32"},{"body":{"nativeSrc":"8693:199:32","nodeType":"YulBlock","src":"8693:199:32","statements":[{"body":{"nativeSrc":"8739:16:32","nodeType":"YulBlock","src":"8739:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8748:1:32","nodeType":"YulLiteral","src":"8748:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"8751:1:32","nodeType":"YulLiteral","src":"8751:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8741:6:32","nodeType":"YulIdentifier","src":"8741:6:32"},"nativeSrc":"8741:12:32","nodeType":"YulFunctionCall","src":"8741:12:32"},"nativeSrc":"8741:12:32","nodeType":"YulExpressionStatement","src":"8741:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8714:7:32","nodeType":"YulIdentifier","src":"8714:7:32"},{"name":"headStart","nativeSrc":"8723:9:32","nodeType":"YulIdentifier","src":"8723:9:32"}],"functionName":{"name":"sub","nativeSrc":"8710:3:32","nodeType":"YulIdentifier","src":"8710:3:32"},"nativeSrc":"8710:23:32","nodeType":"YulFunctionCall","src":"8710:23:32"},{"kind":"number","nativeSrc":"8735:2:32","nodeType":"YulLiteral","src":"8735:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8706:3:32","nodeType":"YulIdentifier","src":"8706:3:32"},"nativeSrc":"8706:32:32","nodeType":"YulFunctionCall","src":"8706:32:32"},"nativeSrc":"8703:52:32","nodeType":"YulIf","src":"8703:52:32"},{"nativeSrc":"8764:29:32","nodeType":"YulVariableDeclaration","src":"8764:29:32","value":{"arguments":[{"name":"headStart","nativeSrc":"8783:9:32","nodeType":"YulIdentifier","src":"8783:9:32"}],"functionName":{"name":"mload","nativeSrc":"8777:5:32","nodeType":"YulIdentifier","src":"8777:5:32"},"nativeSrc":"8777:16:32","nodeType":"YulFunctionCall","src":"8777:16:32"},"variables":[{"name":"value","nativeSrc":"8768:5:32","nodeType":"YulTypedName","src":"8768:5:32","type":""}]},{"body":{"nativeSrc":"8846:16:32","nodeType":"YulBlock","src":"8846:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8855:1:32","nodeType":"YulLiteral","src":"8855:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"8858:1:32","nodeType":"YulLiteral","src":"8858:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8848:6:32","nodeType":"YulIdentifier","src":"8848:6:32"},"nativeSrc":"8848:12:32","nodeType":"YulFunctionCall","src":"8848:12:32"},"nativeSrc":"8848:12:32","nodeType":"YulExpressionStatement","src":"8848:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8815:5:32","nodeType":"YulIdentifier","src":"8815:5:32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8836:5:32","nodeType":"YulIdentifier","src":"8836:5:32"}],"functionName":{"name":"iszero","nativeSrc":"8829:6:32","nodeType":"YulIdentifier","src":"8829:6:32"},"nativeSrc":"8829:13:32","nodeType":"YulFunctionCall","src":"8829:13:32"}],"functionName":{"name":"iszero","nativeSrc":"8822:6:32","nodeType":"YulIdentifier","src":"8822:6:32"},"nativeSrc":"8822:21:32","nodeType":"YulFunctionCall","src":"8822:21:32"}],"functionName":{"name":"eq","nativeSrc":"8812:2:32","nodeType":"YulIdentifier","src":"8812:2:32"},"nativeSrc":"8812:32:32","nodeType":"YulFunctionCall","src":"8812:32:32"}],"functionName":{"name":"iszero","nativeSrc":"8805:6:32","nodeType":"YulIdentifier","src":"8805:6:32"},"nativeSrc":"8805:40:32","nodeType":"YulFunctionCall","src":"8805:40:32"},"nativeSrc":"8802:60:32","nodeType":"YulIf","src":"8802:60:32"},{"nativeSrc":"8871:15:32","nodeType":"YulAssignment","src":"8871:15:32","value":{"name":"value","nativeSrc":"8881:5:32","nodeType":"YulIdentifier","src":"8881:5:32"},"variableNames":[{"name":"value0","nativeSrc":"8871:6:32","nodeType":"YulIdentifier","src":"8871:6:32"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"8615:277:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8659:9:32","nodeType":"YulTypedName","src":"8659:9:32","type":""},{"name":"dataEnd","nativeSrc":"8670:7:32","nodeType":"YulTypedName","src":"8670:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8682:6:32","nodeType":"YulTypedName","src":"8682:6:32","type":""}],"src":"8615:277:32"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256__to_t_uint256_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value2, value3, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value4, value5, tail_1)\n        mstore(add(headStart, 128), value6)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":413},{"length":32,"start":556},{"length":32,"start":3155},{"length":32,"start":3291}],"1963":[{"length":32,"start":487},{"length":32,"start":2708}],"1965":[{"length":32,"start":698},{"length":32,"start":2672}],"1967":[{"length":32,"start":339},{"length":32,"start":929},{"length":32,"start":1262},{"length":32,"start":1605}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101005760003560e01c8063572b6c0511610097578063e486033911610066578063e4860339146102dc578063f23a6e61146102ff578063f2fde38b14610312578063fa9fdc6a1461032757600080fd5b8063572b6c051461021c5780638da5cb5b14610269578063bc197c8114610271578063cd421fbf146102b557600080fd5b80632099920e116100d35780632099920e146101885780632b4c9f161461019b578063491bde66146101e2578063556c448d1461020957600080fd5b806301ffc9a714610105578063039af9eb1461012d578063043063bc1461014e57806304585ac714610175575b600080fd5b610118610113366004610d57565b610352565b60405190151581526020015b60405180910390f35b61014061013b366004610da0565b61036c565b604051908152602001610124565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b610140610183366004610da0565b61038d565b610140610196366004610de2565b6104da565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b610140610217366004610da0565b6105b2565b61011861022a366004610e0e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101bd6105c2565b61028461027f366004610eb7565b6105ee565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610124565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101186102ea366004610e0e565b60046020526000908152604090205460ff1681565b61028461030d366004610f72565b610912565b610325610320366004610e0e565b610946565b005b610140610335366004610de2565b600360209081526000928352604080842090915290825290205481565b600061036682610360610964565b90610992565b92915050565b6000818154811061037c57600080fd5b600091825260209091200154905081565b6000610397610a6c565b8211806103c357507f000000000000000000000000000000000000000000000000000000000000000082115b15610402576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6000821561042d5760026000610419600186611019565b815260200190815260200160002054610430565b60005b905060015b60005481116104a557600081815481106104515761045161102c565b906000526020600020015482101561049357600161046f8183611019565b8154811061047f5761047f61102c565b906000526020600020015492505050919050565b8061049d8161105b565b915050610435565b506000546001906104b7908290611019565b815481106104c7576104c761102c565b9060005260206000200154915050919050565b60006104e4610a6c565b83118061051057507f000000000000000000000000000000000000000000000000000000000000000083115b1561054a576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018490526024016103f9565b60006105558461038d565b600085815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684528252808320548884526002909252909120549192509061059f8383611093565b6105a991906110aa565b95945050505050565b6001818154811061037c57600080fd5b60006105e96105cf610ac3565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3360009081526004602052604081205460ff16610637576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610641610a6c565b90507f00000000000000000000000000000000000000000000000000000000000000008111156106a0576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018290526024016103f9565b6000805b8881101561079357336000908152600560205260408120818c8c858181106106ce576106ce61102c565b9050602002013581526020019081526020016000205490508060000361075a57338b8b848181106107015761070161102c565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909416600485015260200291909101356024830152506044016103f9565b8089898481811061076d5761076d61102c565b9050602002013561077e9190611093565b61078890846110e5565b9250506001016106a4565b50600082815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e168452909152812080548392906107d39084906110e5565b9091555050600082815260026020526040812080548392906107f69084906110e5565b90915550506040517f80534934000000000000000000000000000000000000000000000000000000008152339063805349349061083f908d908d908d908d908d90600401611143565b600060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fdbbe1cdf876fa73ee022a259cac764db805dcc10f143a583201b8c5e97c2573d84428d8d8d8d896040516108da9796959493929190611192565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b60006040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610961610951610af1565b8261095a610ac3565b9190610afb565b50565b60008061036660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611019565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109e257506000610366565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a3357506001610366565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60007f0000000000000000000000000000000000000000000000000000000000000000610ab97f000000000000000000000000000000000000000000000000000000000000000042611019565b6105e991906110aa565b60008061036660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611019565b60006105e9610c10565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610b68576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016103f9565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c0a5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610c205750601836105b15610c2a57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610d4657506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906111da565b15610d5057919050565b3391505090565b600060208284031215610d6957600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d9957600080fd5b9392505050565b600060208284031215610db257600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ddd57600080fd5b919050565b60008060408385031215610df557600080fd5b82359150610e0560208401610db9565b90509250929050565b600060208284031215610e2057600080fd5b610d9982610db9565b60008083601f840112610e3b57600080fd5b50813567ffffffffffffffff811115610e5357600080fd5b6020830191508360208260051b8501011115610e6e57600080fd5b9250929050565b60008083601f840112610e8757600080fd5b50813567ffffffffffffffff811115610e9f57600080fd5b602083019150836020828501011115610e6e57600080fd5b60008060008060008060008060a0898b031215610ed357600080fd5b610edc89610db9565b9750610eea60208a01610db9565b9650604089013567ffffffffffffffff80821115610f0757600080fd5b610f138c838d01610e29565b909850965060608b0135915080821115610f2c57600080fd5b610f388c838d01610e29565b909650945060808b0135915080821115610f5157600080fd5b50610f5e8b828c01610e75565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610f8b57600080fd5b610f9487610db9565b9550610fa260208801610db9565b94506040870135935060608701359250608087013567ffffffffffffffff811115610fcc57600080fd5b610fd889828a01610e75565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561036657610366610fea565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361108c5761108c610fea565b5060010190565b808202811582820484141761036657610366610fea565b6000826110e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561036657610366610fea565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561112a57600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006111736060830186886110f8565b82810360408401526111868185876110f8565b98975050505050505050565b87815286602082015260a0604082015260006111b260a0830187896110f8565b82810360608401526111c58186886110f8565b91505082608083015298975050505050505050565b6000602082840312156111ec57600080fd5b81518015158114610d9957600080fdfea264697066735822122075ed54939fbffadc480c130304c2304188bf0782edd7c7076c5ff31f3ecc445f64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xE4860339 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE4860339 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0xFA9FDC6A EQ PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2099920E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2099920E EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x556C448D EQ PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x39AF9EB EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x4585AC7 EQ PUSH2 0x175 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x36C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x183 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x38D JUMP JUMPDEST PUSH2 0x140 PUSH2 0x196 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE2 JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1BD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x284 PUSH2 0x27F CALLDATASIZE PUSH1 0x4 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x2EA CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x284 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0xF72 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH2 0x325 PUSH2 0x320 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x140 PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x366 DUP3 PUSH2 0x360 PUSH2 0x964 JUMP JUMPDEST SWAP1 PUSH2 0x992 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397 PUSH2 0xA6C JUMP JUMPDEST DUP3 GT DUP1 PUSH2 0x3C3 JUMPI POP PUSH32 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x402 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x42D JUMPI PUSH1 0x2 PUSH1 0x0 PUSH2 0x419 PUSH1 0x1 DUP7 PUSH2 0x1019 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x430 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x0 SLOAD DUP2 GT PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x451 JUMPI PUSH2 0x451 PUSH2 0x102C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 LT ISZERO PUSH2 0x493 JUMPI PUSH1 0x1 PUSH2 0x46F DUP2 DUP4 PUSH2 0x1019 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x47F JUMPI PUSH2 0x47F PUSH2 0x102C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x49D DUP2 PUSH2 0x105B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x435 JUMP JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x4B7 SWAP1 DUP3 SWAP1 PUSH2 0x1019 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x4C7 JUMPI PUSH2 0x4C7 PUSH2 0x102C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E4 PUSH2 0xA6C JUMP JUMPDEST DUP4 GT DUP1 PUSH2 0x510 JUMPI POP PUSH32 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x54A JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x555 DUP5 PUSH2 0x38D JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP9 DUP5 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x59F DUP4 DUP4 PUSH2 0x1093 JUMP JUMPDEST PUSH2 0x5A9 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5E9 PUSH2 0x5CF PUSH2 0xAC3 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x641 PUSH2 0xA6C JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x6A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x793 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0x6CE JUMPI PUSH2 0x6CE PUSH2 0x102C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x75A JUMPI CALLER DUP12 DUP12 DUP5 DUP2 DUP2 LT PUSH2 0x701 JUMPI PUSH2 0x701 PUSH2 0x102C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP1 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x76D JUMPI PUSH2 0x76D PUSH2 0x102C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x77E SWAP2 SWAP1 PUSH2 0x1093 JUMP JUMPDEST PUSH2 0x788 SWAP1 DUP5 PUSH2 0x10E5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x6A4 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x7D3 SWAP1 DUP5 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x7F6 SWAP1 DUP5 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x83F SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x1143 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x86D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDBBE1CDF876FA73EE022A259CAC764DB805DCC10F143A583201B8C5E97C2573D DUP5 TIMESTAMP DUP14 DUP14 DUP14 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH2 0x8DA SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1192 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xD623472500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x961 PUSH2 0x951 PUSH2 0xAF1 JUMP JUMPDEST DUP3 PUSH2 0x95A PUSH2 0xAC3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xAFB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x366 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9E2 JUMPI POP PUSH1 0x0 PUSH2 0x366 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA33 JUMPI POP PUSH1 0x1 PUSH2 0x366 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0xAB9 PUSH32 0x0 TIMESTAMP PUSH2 0x1019 JUMP JUMPDEST PUSH2 0x5E9 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x366 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E9 PUSH2 0xC10 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC0A JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xC20 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xC2A JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xD46 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD46 SWAP2 SWAP1 PUSH2 0x11DA JUMP JUMPDEST ISZERO PUSH2 0xD50 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xDDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xE05 PUSH1 0x20 DUP5 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD99 DUP3 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xE3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xE6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xE87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xE6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEDC DUP10 PUSH2 0xDB9 JUMP JUMPDEST SWAP8 POP PUSH2 0xEEA PUSH1 0x20 DUP11 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF13 DUP13 DUP4 DUP14 ADD PUSH2 0xE29 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xF2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF38 DUP13 DUP4 DUP14 ADD PUSH2 0xE29 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xF51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5E DUP12 DUP3 DUP13 ADD PUSH2 0xE75 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF94 DUP8 PUSH2 0xDB9 JUMP JUMPDEST SWAP6 POP PUSH2 0xFA2 PUSH1 0x20 DUP9 ADD PUSH2 0xDB9 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFD8 DUP10 DUP3 DUP11 ADD PUSH2 0xE75 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0xFEA JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x108C JUMPI PUSH2 0x108C PUSH2 0xFEA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x10E0 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0xFEA JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x112A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1173 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x10F8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1186 DUP2 DUP6 DUP8 PUSH2 0x10F8 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP8 DUP2 MSTORE DUP7 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x11B2 PUSH1 0xA0 DUP4 ADD DUP8 DUP10 PUSH2 0x10F8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11C5 DUP2 DUP7 DUP9 PUSH2 0x10F8 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD99 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xED54939FBFFADC480C130304C2304188BF0782EDD7C7 SMOD PUSH13 0x5FF31F3ECC445F64736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1292:9641:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:32;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;1621:22:27;;;;;;:::i;:::-;;:::i;:::-;;;874:25:32;;;862:2;847:18;1621:22:27;728:177:32;1580:34:27;;;;;6588:474;;;;;;:::i;:::-;;:::i;7068:378::-;;;;;;:::i;:::-;;:::i;728:115:11:-;817:19;728:115;;;1572:42:32;1560:55;;;1542:74;;1530:2;1515:18;728:115:11;1370:252:32;1470:37:27;;;;;1668:28;;;;;;:::i;:::-;;:::i;878:149:11:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;710:120:1;;;:::i;7617:1176:27:-;;;;;;:::i;:::-;;:::i;:::-;;;4162:66:32;4150:79;;;4132:98;;4120:2;4105:18;7617:1176:27;3988:248:32;1513:39:27;;;;;1963:38;;;;;;:::i;:::-;;;;;;;;;;;;;;;;7452:159;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;:::-;;1752:69:27;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;1621:22:27:-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1621:22:27;:::o;6588:474::-;6648:7;6679:15;:13;:15::i;:::-;6671:5;:23;:44;;;;6706:9;6698:5;:17;6671:44;6667:101;;;6738:19;;;;;;;;874:25:32;;;847:18;;6738:19:27;;;;;;;;6667:101;6778:20;6801:10;;:43;;6818:15;:26;6834:9;6842:1;6834:5;:9;:::i;:::-;6818:26;;;;;;;;;;;;6801:43;;;6814:1;6801:43;6778:66;-1:-1:-1;6872:1:27;6855:155;6880:5;:12;6875:17;;6855:155;;6932:5;6938:1;6932:8;;;;;;;;:::i;:::-;;;;;;;;;6917:12;:23;6913:87;;;6967:11;6979:5;6967:11;6979:1;:5;:::i;:::-;6967:18;;;;;;;;:::i;:::-;;;;;;;;;6960:25;;;;6588:474;;;:::o;6913:87::-;6894:3;;;;:::i;:::-;;;;6855:155;;;-1:-1:-1;7038:5:27;:12;7026:11;;7038:16;;7026:11;;7038:16;:::i;:::-;7026:29;;;;;;;;:::i;:::-;;;;;;;;;7019:36;;;6588:474;;;:::o;7068:378::-;7145:7;7176:15;:13;:15::i;:::-;7168:5;:23;:44;;;;7203:9;7195:5;:17;7168:44;7164:101;;;7235:19;;;;;;;;874:25:32;;;847:18;;7235:19:27;728:177:32;7164:101:27;7274:19;7296:21;7311:5;7296:14;:21::i;:::-;7327:15;7345:21;;;:14;:21;;;;;;;;:29;;;;;;;;;;;7417:22;;;:15;:22;;;;;;;7274:43;;-1:-1:-1;7345:29:27;7392:21;7274:43;7345:29;7392:21;:::i;:::-;7391:48;;;;:::i;:::-;7384:55;7068:378;-1:-1:-1;;;;;7068:378:27:o;1668:28::-;;;;;;;;;;;;710:120:1;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;7617:1176:27:-;7842:10;7812:6;7835:18;;;:6;:18;;;;;;;;7830:71;;7876:14;;;;;;;;;;;;;;7830:71;7911:20;7934:15;:13;:15::i;:::-;7911:38;;7978:9;7963:12;:24;7959:88;;;8010:26;;;;;;;;874:25:32;;;847:18;;8010:26:27;728:177:32;7959:88:27;8057:16;8127:9;8122:265;8142:14;;;8122:265;;;8207:10;8177:14;8194:24;;;:12;:24;;;;;8177:14;8219:3;;8223:1;8219:6;;;;;;;:::i;:::-;;;;;;;8194:32;;;;;;;;;;;;8177:49;;8244:6;8254:1;8244:11;8240:91;;8297:10;8309:3;;8313:1;8309:6;;;;;;;:::i;:::-;8282:34;;;;;6308:42:32;6296:55;;;8282:34:27;;;6278:74:32;8309:6:27;;;;;;;6368:18:32;;;6361:34;-1:-1:-1;6251:18:32;;8282:34:27;6104:297:32;8240:91:27;8369:6;8357;;8364:1;8357:9;;;;;;;:::i;:::-;;;;;;;:18;;;;:::i;:::-;8344:32;;;;:::i;:::-;;-1:-1:-1;;8158:3:27;;8122:265;;;-1:-1:-1;8431:28:27;;;;:14;:28;;;;;;;;:34;;;;;;;;;;:46;;8469:8;;8431:28;:46;;8469:8;;8431:46;:::i;:::-;;;;-1:-1:-1;;8521:29:27;;;;:15;:29;;;;;:41;;8554:8;;8521:29;:41;;8554:8;;8521:41;:::i;:::-;;;;-1:-1:-1;;8573:61:27;;;;;8590:10;;8573:42;;:61;;8616:4;;8622:3;;;;8627:6;;;;8573:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8667:10;8649:83;;8661:4;8649:83;;;8679:12;8693:15;8710:3;;8715:6;;8723:8;8649:83;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;8750:36:27;;7617:1176;-1:-1:-1;;;;;;;;;;7617:1176:27:o;7452:159::-;7563:6;7588:16;;;;;;;;;;;;;;864:152:1;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;6451:130:27:-;6499:7;6560:14;6526:30;6544:12;6526:15;:30;:::i;:::-;6525:49;;;;:::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;6037:175:27:-;6138:7;6164:41;:39;:41::i;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1572:42:32;1560:55;;3243:24:6;;;1542:74:32;1515:18;;3243:24:6;1370:252:32;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;8536:15:32;;;1396:59:12;;;8518:34:32;1444:10:12;8568:18:32;;;8561:43;1396:19:12;:39;;;;8430:18:32;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;14:332:32:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:32:o;543:180::-;602:6;655:2;643:9;634:7;630:23;626:32;623:52;;;671:1;668;661:12;623:52;-1:-1:-1;694:23:32;;543:180;-1:-1:-1;543:180:32:o;910:196::-;978:20;;1038:42;1027:54;;1017:65;;1007:93;;1096:1;1093;1086:12;1007:93;910:196;;;:::o;1111:254::-;1179:6;1187;1240:2;1228:9;1219:7;1215:23;1211:32;1208:52;;;1256:1;1253;1246:12;1208:52;1292:9;1279:23;1269:33;;1321:38;1355:2;1344:9;1340:18;1321:38;:::i;:::-;1311:48;;1111:254;;;;;:::o;1627:186::-;1686:6;1739:2;1727:9;1718:7;1714:23;1710:32;1707:52;;;1755:1;1752;1745:12;1707:52;1778:29;1797:9;1778:29;:::i;2049:367::-;2112:8;2122:6;2176:3;2169:4;2161:6;2157:17;2153:27;2143:55;;2194:1;2191;2184:12;2143:55;-1:-1:-1;2217:20:32;;2260:18;2249:30;;2246:50;;;2292:1;2289;2282:12;2246:50;2329:4;2321:6;2317:17;2305:29;;2389:3;2382:4;2372:6;2369:1;2365:14;2357:6;2353:27;2349:38;2346:47;2343:67;;;2406:1;2403;2396:12;2343:67;2049:367;;;;;:::o;2421:347::-;2472:8;2482:6;2536:3;2529:4;2521:6;2517:17;2513:27;2503:55;;2554:1;2551;2544:12;2503:55;-1:-1:-1;2577:20:32;;2620:18;2609:30;;2606:50;;;2652:1;2649;2642:12;2606:50;2689:4;2681:6;2677:17;2665:29;;2741:3;2734:4;2725:6;2717;2713:19;2709:30;2706:39;2703:59;;;2758:1;2755;2748:12;2773:1210;2933:6;2941;2949;2957;2965;2973;2981;2989;3042:3;3030:9;3021:7;3017:23;3013:33;3010:53;;;3059:1;3056;3049:12;3010:53;3082:29;3101:9;3082:29;:::i;:::-;3072:39;;3130:38;3164:2;3153:9;3149:18;3130:38;:::i;:::-;3120:48;;3219:2;3208:9;3204:18;3191:32;3242:18;3283:2;3275:6;3272:14;3269:34;;;3299:1;3296;3289:12;3269:34;3338:70;3400:7;3391:6;3380:9;3376:22;3338:70;:::i;:::-;3427:8;;-1:-1:-1;3312:96:32;-1:-1:-1;3515:2:32;3500:18;;3487:32;;-1:-1:-1;3531:16:32;;;3528:36;;;3560:1;3557;3550:12;3528:36;3599:72;3663:7;3652:8;3641:9;3637:24;3599:72;:::i;:::-;3690:8;;-1:-1:-1;3573:98:32;-1:-1:-1;3778:3:32;3763:19;;3750:33;;-1:-1:-1;3795:16:32;;;3792:36;;;3824:1;3821;3814:12;3792:36;;3863:60;3915:7;3904:8;3893:9;3889:24;3863:60;:::i;:::-;2773:1210;;;;-1:-1:-1;2773:1210:32;;-1:-1:-1;2773:1210:32;;;;;;3942:8;-1:-1:-1;;;2773:1210:32:o;4241:695::-;4347:6;4355;4363;4371;4379;4387;4440:3;4428:9;4419:7;4415:23;4411:33;4408:53;;;4457:1;4454;4447:12;4408:53;4480:29;4499:9;4480:29;:::i;:::-;4470:39;;4528:38;4562:2;4551:9;4547:18;4528:38;:::i;:::-;4518:48;;4613:2;4602:9;4598:18;4585:32;4575:42;;4664:2;4653:9;4649:18;4636:32;4626:42;;4719:3;4708:9;4704:19;4691:33;4747:18;4739:6;4736:30;4733:50;;;4779:1;4776;4769:12;4733:50;4818:58;4868:7;4859:6;4848:9;4844:22;4818:58;:::i;:::-;4241:695;;;;-1:-1:-1;4241:695:32;;-1:-1:-1;4241:695:32;;4895:8;;4241:695;-1:-1:-1;;;4241:695:32:o;4941:184::-;4993:77;4990:1;4983:88;5090:4;5087:1;5080:15;5114:4;5111:1;5104:15;5130:128;5197:9;;;5218:11;;;5215:37;;;5232:18;;:::i;5263:184::-;5315:77;5312:1;5305:88;5412:4;5409:1;5402:15;5436:4;5433:1;5426:15;5452:195;5491:3;5522:66;5515:5;5512:77;5509:103;;5592:18;;:::i;:::-;-1:-1:-1;5639:1:32;5628:13;;5452:195::o;5652:168::-;5725:9;;;5756;;5773:15;;;5767:22;;5753:37;5743:71;;5794:18;;:::i;5825:274::-;5865:1;5891;5881:189;;5926:77;5923:1;5916:88;6027:4;6024:1;6017:15;6055:4;6052:1;6045:15;5881:189;-1:-1:-1;6084:9:32;;5825:274::o;6406:125::-;6471:9;;;6492:10;;;6489:36;;;6505:18;;:::i;6536:358::-;6636:6;6631:3;6624:19;6606:3;6666:66;6658:6;6655:78;6652:98;;;6746:1;6743;6736:12;6652:98;6782:6;6779:1;6775:14;6834:8;6827:5;6820:4;6815:3;6811:14;6798:45;6863:18;;;;6883:4;6859:29;;6536:358;-1:-1:-1;;;6536:358:32:o;6899:639::-;7216:42;7208:6;7204:55;7193:9;7186:74;7296:2;7291;7280:9;7276:18;7269:30;7167:4;7322:73;7391:2;7380:9;7376:18;7368:6;7360;7322:73;:::i;:::-;7443:9;7435:6;7431:22;7426:2;7415:9;7411:18;7404:50;7471:61;7525:6;7517;7509;7471:61;:::i;:::-;7463:69;6899:639;-1:-1:-1;;;;;;;;6899:639:32:o;7543:735::-;7904:6;7893:9;7886:25;7947:6;7942:2;7931:9;7927:18;7920:34;7990:3;7985:2;7974:9;7970:18;7963:31;7867:4;8017:74;8086:3;8075:9;8071:19;8063:6;8055;8017:74;:::i;:::-;8139:9;8131:6;8127:22;8122:2;8111:9;8107:18;8100:50;8167:61;8221:6;8213;8205;8167:61;:::i;:::-;8159:69;;;8265:6;8259:3;8248:9;8244:19;8237:35;7543:735;;;;;;;;;;:::o;8615:277::-;8682:6;8735:2;8723:9;8714:7;8710:23;8706:32;8703:52;;;8751:1;8748;8741:12;8703:52;8783:9;8777:16;8836:5;8829:13;8822:21;8815:5;8812:32;8802:60;;8858:1;8855;8848:12"},"gasEstimates":{"creation":{"codeDepositCost":"931600","executionCost":"infinite","totalCost":"infinite"},"external":{"CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","forwarderRegistry()":"infinite","getCycleReward(uint256)":"infinite","getUserReward(uint256,address)":"infinite","isTrustedForwarder(address)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","owner()":"infinite","supportsInterface(bytes4)":"infinite","tierRewards(uint256)":"4664","tiers(uint256)":"4621","tokens(address)":"2530","transferOwnership(address)":"infinite","userAshByCycle(uint256,address)":"2693"},"internal":{"_currentCycle()":"infinite","_msgData()":"infinite","_msgSender()":"infinite","_setApprovedTokens(contract IERC1155Burnable[] memory,uint256[] memory[] memory,uint256[] memory[] memory)":"infinite","_setTiers(uint256[] memory,uint256[] memory)":"infinite"}},"methodIdentifiers":{"CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","forwarderRegistry()":"2b4c9f16","getCycleReward(uint256)":"04585ac7","getUserReward(uint256,address)":"2099920e","isTrustedForwarder(address)":"572b6c05","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","tierRewards(uint256)":"556c448d","tiers(uint256)":"039af9eb","tokens(address)":"e4860339","transferOwnership(address)":"f2fde38b","userAshByCycle(uint256,address)":"fa9fdc6a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Burnable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"weights\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierRewards\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectTiers\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"}],\"name\":\"TokensBurnt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"getCycleReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshByCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_tierRewards\":\"The list of rewards for each tier.\",\"_tiers\":\"The list of tiers.\",\"_tokens\":\"The list of IERC1155Burnable tokens to be approved.\",\"cycleDuration\":\"The duration of each cycle.\",\"forwarderRegistry\":\"The forwarder registry contract.\",\"initialTime\":\"The initial time of the contract.\",\"maxCycle\":\"The maximum cycle.\",\"tokenIds\":\"The list of token IDs for each token.\",\"weights\":\"The list of weights for each token ID.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Anichess ERC1155 Merkle Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrays()\":[{\"notice\":\"Error thrown when the array lengths are inconsistent.\"}],\"IncorrectTiers()\":[{\"notice\":\"Error thrown when the tiers are incorrect.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidToken()\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotImplemented()\":[{\"notice\":\"Error throw when the function is not implemented.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"TokensBurnt(address,address,uint256,uint256,uint256[],uint256[],uint256)\":{\"notice\":\"Event emitted when tokens are burnt.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor for the ERC1155TokenBurn contract.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"tokens(address)\":{\"notice\":\"The IERC1155Burnable erc1155 contracts.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol\":\"AnichessOrbsBurnPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xc73c79ec8b1acdaccb4bbdab1f460043ddb27f3b5300389f6ec672bf0f1c7ae6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess ERC1155 Merkle Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract AnichessOrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    uint256 public immutable INITIAL_TIME;\\n    uint256 public immutable CYCLE_DURATION; // time of each cycle\\n    uint256 public immutable MAX_CYCLE;\\n\\n    uint256[] public tiers; // ascending order\\n    uint256[] public tierRewards;\\n\\n    mapping(uint256 => uint256) totalAshByCycle;\\n    mapping(uint256 => mapping(address => uint256)) public userAshByCycle;\\n    // mapping(uint256 => mapping(address => bool)) public claimStatusByCycle;\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts.\\n    mapping(address => bool) public tokens;\\n    /// @notice The token weights.\\n    mapping(address => mapping(uint256 => uint256)) tokenWeights;\\n\\n    /// @notice Event emitted when tokens are burnt.\\n    event TokensBurnt(\\n        address indexed burner,\\n        address indexed token,\\n        uint256 cycle,\\n        uint256 timestamp,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 totalAsh\\n    );\\n\\n    event Claimed(address indexed claimer, uint256 indexed cycle, uint256 amount);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the array lengths are inconsistent.\\n    error InconsistentArrays();\\n\\n    /// @notice Error thrown when the tiers are incorrect.\\n    error IncorrectTiers();\\n\\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidToken();\\n\\n    /// @notice Error throw when the function is not implemented.\\n    error NotImplemented();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    // error AlreadyClaimed();\\n\\n    /**\\n     * @notice Constructor for the ERC1155TokenBurn contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param _tokens The list of IERC1155Burnable tokens to be approved.\\n     * @param tokenIds The list of token IDs for each token.\\n     * @param weights The list of weights for each token ID.\\n     * @param _tiers The list of tiers.\\n     * @param _tierRewards The list of rewards for each tier.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        IERC1155Burnable[] memory _tokens,\\n        uint256[][] memory tokenIds,\\n        uint256[][] memory weights,\\n        uint256[] memory _tiers,\\n        uint256[] memory _tierRewards,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        INITIAL_TIME = initialTime;\\n        CYCLE_DURATION = cycleDuration;\\n        MAX_CYCLE = maxCycle;\\n\\n        _setApprovedTokens(_tokens, tokenIds, weights);\\n        _setTiers(_tiers, _tierRewards);\\n    }\\n\\n    /**\\n     * @notice Set the approved tokens.\\n     * @param _tokens The list of IERC1155Burnable tokens to be approved.\\n     * @param tokenIds The list of token IDs for each token.\\n     * @param weights The list of weights for each token ID.\\n     */\\n    function _setApprovedTokens(IERC1155Burnable[] memory _tokens, uint256[][] memory tokenIds, uint256[][] memory weights) internal {\\n        if (_tokens.length != tokenIds.length || _tokens.length != weights.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        // set the approved tokens\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokens[address(_tokens[i])] = true;\\n\\n            if (tokenIds[i].length != weights[i].length) {\\n                revert InconsistentArrays();\\n            }\\n\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                tokenWeights[address(_tokens[i])][tokenIds[i][j]] = weights[i][j];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the tiers and rewards.\\n     * @param _tiers The list of tiers.\\n     * @param _tierRewards The list of rewards for each tier.\\n     */\\n    function _setTiers(uint256[] memory _tiers, uint256[] memory _tierRewards) internal {\\n        if (_tiers.length != _tierRewards.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        if (_tiers.length == 0) {\\n            revert IncorrectTiers();\\n        }\\n\\n        // check if tiers are in increasing order\\n        for (uint256 i = 1; i < _tiers.length; i++) {\\n            if (_tiers[i] < _tiers[i - 1]) {\\n                revert IncorrectTiers();\\n            }\\n        }\\n        tiers = _tiers;\\n        tierRewards = _tierRewards;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    function _currentCycle() internal view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n\\n    function getCycleReward(uint256 cycle) public view returns (uint256) {\\n        if (cycle > _currentCycle() || cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 prevTotalAsh = cycle == 0 ? 0 : totalAshByCycle[cycle - 1];\\n\\n        for (uint256 i = 1; i <= tiers.length; i++) {\\n            if (prevTotalAsh < tiers[i]) {\\n                return tierRewards[i - 1];\\n            }\\n        }\\n        return tierRewards[tiers.length - 1];\\n    }\\n\\n    function getUserReward(uint256 cycle, address wallet) external view returns (uint256) {\\n        if (cycle > _currentCycle() || cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n        uint256 cycleReward = getCycleReward(cycle);\\n        uint256 userAsh = userAshByCycle[cycle][wallet];\\n        return (userAsh * cycleReward) / totalAshByCycle[cycle];\\n    }\\n\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\\n        revert NotImplemented();\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        if (!tokens[msg.sender]) {\\n            revert InvalidToken();\\n        }\\n\\n        uint256 currentCycle = _currentCycle();\\n        if (currentCycle > MAX_CYCLE) {\\n            revert InvalidCycle(currentCycle);\\n        }\\n\\n        uint256 totalAsh = 0;\\n\\n        // calculate total burned\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 weight = tokenWeights[msg.sender][ids[i]];\\n            if (weight == 0) {\\n                revert InvalidTokenId(msg.sender, ids[i]);\\n            }\\n            totalAsh += (values[i] * weight);\\n        }\\n\\n        // update the user status\\n        userAshByCycle[currentCycle][from] += totalAsh;\\n        // update the pool status\\n        totalAshByCycle[currentCycle] += totalAsh;\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(from, ids, values);\\n        emit TokensBurnt(from, msg.sender, currentCycle, block.timestamp, ids, values, totalAsh);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    // function setApprovedTokens(IERC1155Burnable[] calldata tokens, bool[] calldata enabled) external {\\n    //     ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n    //     if (tokens.length != enabled.length) {\\n    //         revert InconsistentArrays();\\n    //     }\\n    //     for (uint256 i = 0; i < tokens.length; i++) {\\n    //         tokens[address(tokens[i])] = enabled[i];\\n    //     }\\n    // }\\n\\n    // function setTokensWeight(address[] calldata tokens, uint256[][] calldata tokenIds, uint256[][] calldata weights) external {\\n    //     ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n    //     if (tokens.length != tokenIds.length || tokens.length != weights.length) {\\n    //         revert InconsistentArrays();\\n    //     }\\n\\n    //     for (uint256 i = 0; i < tokens.length; i++) {\\n    //         if (!tokens[tokens[i]]) {\\n    //             revert InvalidToken();\\n    //         }\\n    //         if (tokenIds[i].length != weights[i].length) {\\n    //             revert InconsistentArrays();\\n    //         }\\n\\n    //         for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n    //             tokenWeights[tokens[i]][tokenIds[i][j]] = weights[i][j];\\n    //         }\\n    //     }\\n    // }\\n\\n    // function claim(uint256 cycle) external {\\n    //     uint256 currentCycle = _currentCycle();\\n    //     if (cycle >= currentCycle) {\\n    //         revert InvalidCycle(cycle);\\n    //     }\\n    //     if (claimStatusByCycle[cycle][_msgSender()]) {\\n    //         revert AlreadyClaimed();\\n    //     }\\n\\n    //     // calcualte the claim amount\\n    //     PoolStatus memory poolStatus = poolStatusByCycle[cycle];\\n    //     uint256 cycleReward = getCycleReward(cycle);\\n    //     uint256 walletBurned = userAshByCycle[cycle][_msgSender()];\\n    //     uint256 claimAmount = (walletBurned * cycleReward) / poolStatus.totalAsh;\\n\\n    //     // update the status\\n    //     claimStatusByCycle[cycle][_msgSender()] = true;\\n    //     poolStatusByCycle[cycle].totalClaimed = poolStatus.totalClaimed + claimAmount;\\n\\n    //     emit Claimed(_msgSender(), cycle, claimAmount);\\n    // }\\n}\\n\",\"keccak256\":\"0xbd5e832777d8e84958e7bc8c7d4a70678090f30df9237a6ee936373d5efafe21\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1970,"contract":"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol:AnichessOrbsBurnPool","label":"tiers","offset":0,"slot":"0","type":"t_array(t_uint256)dyn_storage"},{"astId":1973,"contract":"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol:AnichessOrbsBurnPool","label":"tierRewards","offset":0,"slot":"1","type":"t_array(t_uint256)dyn_storage"},{"astId":1977,"contract":"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol:AnichessOrbsBurnPool","label":"totalAshByCycle","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1983,"contract":"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol:AnichessOrbsBurnPool","label":"userAshByCycle","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":1988,"contract":"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol:AnichessOrbsBurnPool","label":"tokens","offset":0,"slot":"4","type":"t_mapping(t_address,t_bool)"},{"astId":1995,"contract":"contracts/burn/AnichessOrbsBurnPoolOnchainClaim.sol:AnichessOrbsBurnPool","label":"tokenWeights","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrays()":[{"notice":"Error thrown when the array lengths are inconsistent."}],"IncorrectTiers()":[{"notice":"Error thrown when the tiers are incorrect."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidToken()":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotImplemented()":[{"notice":"Error throw when the function is not implemented."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"TokensBurnt(address,address,uint256,uint256,uint256[],uint256[],uint256)":{"notice":"Event emitted when tokens are burnt."}},"kind":"user","methods":{"constructor":{"notice":"Constructor for the ERC1155TokenBurn contract."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"tokens(address)":{"notice":"The IERC1155Burnable erc1155 contracts."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol":{"ERC1155TokenBurn":{"abi":[{"inputs":[{"internalType":"contract IERC1155Burnable[]","name":"tokens","type":"address[]"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrays","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"TokenNotApproved","type":"error"},{"inputs":[],"name":"WalletNotApproved","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TokensBurnt","type":"event"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[][]","name":"ids","type":"uint256[][]"},{"internalType":"uint256[][]","name":"values","type":"uint256[][]"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[][]","name":"ids","type":"uint256[][]"},{"internalType":"uint256[][]","name":"values","type":"uint256[][]"}],"name":"burnFor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isApprovedTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC1155Burnable[]","name":"tokens","type":"address[]"},{"internalType":"bool[]","name":"enabled","type":"bool[]"}],"name":"setApprovedTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"burn(address[],uint256[][],uint256[][])":{"params":{"ids":"The token ids to burn.","values":"The amount of tokens to burn."}},"burnFor(address[],address[],uint256[][],uint256[][])":{"params":{"from":"The wallet to burn the tokens from.","ids":"The token ids to burn.","values":"The amount of tokens to burn."}},"constructor":{"params":{"forwarderRegistry":"The forwarder registry contract.","tokens":"The IERC1155Burnable erc1155 contract."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Anichess ERC1155 Merkle Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2712":{"entryPoint":null,"id":2712,"parameterSlots":2,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":251,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":197,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":374,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":422,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_contract_IERC1155Burnable_fromMemory":{"entryPoint":537,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptrt_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":566,"id":null,"parameterSlots":2,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":818,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":796,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":515,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:2012:32","nodeType":"YulBlock","src":"0:2012:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"46:95:32","nodeType":"YulBlock","src":"46:95:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:32","nodeType":"YulLiteral","src":"63:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:32","nodeType":"YulLiteral","src":"70:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:32","nodeType":"YulLiteral","src":"75:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:32","nodeType":"YulIdentifier","src":"66:3:32"},"nativeSrc":"66:20:32","nodeType":"YulFunctionCall","src":"66:20:32"}],"functionName":{"name":"mstore","nativeSrc":"56:6:32","nodeType":"YulIdentifier","src":"56:6:32"},"nativeSrc":"56:31:32","nodeType":"YulFunctionCall","src":"56:31:32"},"nativeSrc":"56:31:32","nodeType":"YulExpressionStatement","src":"56:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:32","nodeType":"YulLiteral","src":"103:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:32","nodeType":"YulLiteral","src":"106:4:32","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:32","nodeType":"YulIdentifier","src":"96:6:32"},"nativeSrc":"96:15:32","nodeType":"YulFunctionCall","src":"96:15:32"},"nativeSrc":"96:15:32","nodeType":"YulExpressionStatement","src":"96:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:32","nodeType":"YulLiteral","src":"127:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:32","nodeType":"YulLiteral","src":"130:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:32","nodeType":"YulIdentifier","src":"120:6:32"},"nativeSrc":"120:15:32","nodeType":"YulFunctionCall","src":"120:15:32"},"nativeSrc":"120:15:32","nodeType":"YulExpressionStatement","src":"120:15:32"}]},"name":"panic_error_0x41","nativeSrc":"14:127:32","nodeType":"YulFunctionDefinition","src":"14:127:32"},{"body":{"nativeSrc":"224:117:32","nodeType":"YulBlock","src":"224:117:32","statements":[{"nativeSrc":"234:22:32","nodeType":"YulAssignment","src":"234:22:32","value":{"arguments":[{"name":"offset","nativeSrc":"249:6:32","nodeType":"YulIdentifier","src":"249:6:32"}],"functionName":{"name":"mload","nativeSrc":"243:5:32","nodeType":"YulIdentifier","src":"243:5:32"},"nativeSrc":"243:13:32","nodeType":"YulFunctionCall","src":"243:13:32"},"variableNames":[{"name":"value","nativeSrc":"234:5:32","nodeType":"YulIdentifier","src":"234:5:32"}]},{"body":{"nativeSrc":"319:16:32","nodeType":"YulBlock","src":"319:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"328:1:32","nodeType":"YulLiteral","src":"328:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"331:1:32","nodeType":"YulLiteral","src":"331:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"321:6:32","nodeType":"YulIdentifier","src":"321:6:32"},"nativeSrc":"321:12:32","nodeType":"YulFunctionCall","src":"321:12:32"},"nativeSrc":"321:12:32","nodeType":"YulExpressionStatement","src":"321:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"278:5:32","nodeType":"YulIdentifier","src":"278:5:32"},{"arguments":[{"name":"value","nativeSrc":"289:5:32","nodeType":"YulIdentifier","src":"289:5:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"304:3:32","nodeType":"YulLiteral","src":"304:3:32","type":"","value":"160"},{"kind":"number","nativeSrc":"309:1:32","nodeType":"YulLiteral","src":"309:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"300:3:32","nodeType":"YulIdentifier","src":"300:3:32"},"nativeSrc":"300:11:32","nodeType":"YulFunctionCall","src":"300:11:32"},{"kind":"number","nativeSrc":"313:1:32","nodeType":"YulLiteral","src":"313:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"296:3:32","nodeType":"YulIdentifier","src":"296:3:32"},"nativeSrc":"296:19:32","nodeType":"YulFunctionCall","src":"296:19:32"}],"functionName":{"name":"and","nativeSrc":"285:3:32","nodeType":"YulIdentifier","src":"285:3:32"},"nativeSrc":"285:31:32","nodeType":"YulFunctionCall","src":"285:31:32"}],"functionName":{"name":"eq","nativeSrc":"275:2:32","nodeType":"YulIdentifier","src":"275:2:32"},"nativeSrc":"275:42:32","nodeType":"YulFunctionCall","src":"275:42:32"}],"functionName":{"name":"iszero","nativeSrc":"268:6:32","nodeType":"YulIdentifier","src":"268:6:32"},"nativeSrc":"268:50:32","nodeType":"YulFunctionCall","src":"268:50:32"},"nativeSrc":"265:70:32","nodeType":"YulIf","src":"265:70:32"}]},"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"146:195:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"203:6:32","nodeType":"YulTypedName","src":"203:6:32","type":""}],"returnVariables":[{"name":"value","nativeSrc":"214:5:32","nodeType":"YulTypedName","src":"214:5:32","type":""}],"src":"146:195:32"},{"body":{"nativeSrc":"519:1129:32","nodeType":"YulBlock","src":"519:1129:32","statements":[{"body":{"nativeSrc":"565:16:32","nodeType":"YulBlock","src":"565:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"574:1:32","nodeType":"YulLiteral","src":"574:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"577:1:32","nodeType":"YulLiteral","src":"577:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"567:6:32","nodeType":"YulIdentifier","src":"567:6:32"},"nativeSrc":"567:12:32","nodeType":"YulFunctionCall","src":"567:12:32"},"nativeSrc":"567:12:32","nodeType":"YulExpressionStatement","src":"567:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"540:7:32","nodeType":"YulIdentifier","src":"540:7:32"},{"name":"headStart","nativeSrc":"549:9:32","nodeType":"YulIdentifier","src":"549:9:32"}],"functionName":{"name":"sub","nativeSrc":"536:3:32","nodeType":"YulIdentifier","src":"536:3:32"},"nativeSrc":"536:23:32","nodeType":"YulFunctionCall","src":"536:23:32"},{"kind":"number","nativeSrc":"561:2:32","nodeType":"YulLiteral","src":"561:2:32","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"532:3:32","nodeType":"YulIdentifier","src":"532:3:32"},"nativeSrc":"532:32:32","nodeType":"YulFunctionCall","src":"532:32:32"},"nativeSrc":"529:52:32","nodeType":"YulIf","src":"529:52:32"},{"nativeSrc":"590:30:32","nodeType":"YulVariableDeclaration","src":"590:30:32","value":{"arguments":[{"name":"headStart","nativeSrc":"610:9:32","nodeType":"YulIdentifier","src":"610:9:32"}],"functionName":{"name":"mload","nativeSrc":"604:5:32","nodeType":"YulIdentifier","src":"604:5:32"},"nativeSrc":"604:16:32","nodeType":"YulFunctionCall","src":"604:16:32"},"variables":[{"name":"offset","nativeSrc":"594:6:32","nodeType":"YulTypedName","src":"594:6:32","type":""}]},{"nativeSrc":"629:28:32","nodeType":"YulVariableDeclaration","src":"629:28:32","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"647:2:32","nodeType":"YulLiteral","src":"647:2:32","type":"","value":"64"},{"kind":"number","nativeSrc":"651:1:32","nodeType":"YulLiteral","src":"651:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"643:3:32","nodeType":"YulIdentifier","src":"643:3:32"},"nativeSrc":"643:10:32","nodeType":"YulFunctionCall","src":"643:10:32"},{"kind":"number","nativeSrc":"655:1:32","nodeType":"YulLiteral","src":"655:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"639:3:32","nodeType":"YulIdentifier","src":"639:3:32"},"nativeSrc":"639:18:32","nodeType":"YulFunctionCall","src":"639:18:32"},"variables":[{"name":"_1","nativeSrc":"633:2:32","nodeType":"YulTypedName","src":"633:2:32","type":""}]},{"body":{"nativeSrc":"684:16:32","nodeType":"YulBlock","src":"684:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"693:1:32","nodeType":"YulLiteral","src":"693:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"696:1:32","nodeType":"YulLiteral","src":"696:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"686:6:32","nodeType":"YulIdentifier","src":"686:6:32"},"nativeSrc":"686:12:32","nodeType":"YulFunctionCall","src":"686:12:32"},"nativeSrc":"686:12:32","nodeType":"YulExpressionStatement","src":"686:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"672:6:32","nodeType":"YulIdentifier","src":"672:6:32"},{"name":"_1","nativeSrc":"680:2:32","nodeType":"YulIdentifier","src":"680:2:32"}],"functionName":{"name":"gt","nativeSrc":"669:2:32","nodeType":"YulIdentifier","src":"669:2:32"},"nativeSrc":"669:14:32","nodeType":"YulFunctionCall","src":"669:14:32"},"nativeSrc":"666:34:32","nodeType":"YulIf","src":"666:34:32"},{"nativeSrc":"709:32:32","nodeType":"YulVariableDeclaration","src":"709:32:32","value":{"arguments":[{"name":"headStart","nativeSrc":"723:9:32","nodeType":"YulIdentifier","src":"723:9:32"},{"name":"offset","nativeSrc":"734:6:32","nodeType":"YulIdentifier","src":"734:6:32"}],"functionName":{"name":"add","nativeSrc":"719:3:32","nodeType":"YulIdentifier","src":"719:3:32"},"nativeSrc":"719:22:32","nodeType":"YulFunctionCall","src":"719:22:32"},"variables":[{"name":"_2","nativeSrc":"713:2:32","nodeType":"YulTypedName","src":"713:2:32","type":""}]},{"body":{"nativeSrc":"789:16:32","nodeType":"YulBlock","src":"789:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"798:1:32","nodeType":"YulLiteral","src":"798:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"801:1:32","nodeType":"YulLiteral","src":"801:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"791:6:32","nodeType":"YulIdentifier","src":"791:6:32"},"nativeSrc":"791:12:32","nodeType":"YulFunctionCall","src":"791:12:32"},"nativeSrc":"791:12:32","nodeType":"YulExpressionStatement","src":"791:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"768:2:32","nodeType":"YulIdentifier","src":"768:2:32"},{"kind":"number","nativeSrc":"772:4:32","nodeType":"YulLiteral","src":"772:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"764:3:32","nodeType":"YulIdentifier","src":"764:3:32"},"nativeSrc":"764:13:32","nodeType":"YulFunctionCall","src":"764:13:32"},{"name":"dataEnd","nativeSrc":"779:7:32","nodeType":"YulIdentifier","src":"779:7:32"}],"functionName":{"name":"slt","nativeSrc":"760:3:32","nodeType":"YulIdentifier","src":"760:3:32"},"nativeSrc":"760:27:32","nodeType":"YulFunctionCall","src":"760:27:32"}],"functionName":{"name":"iszero","nativeSrc":"753:6:32","nodeType":"YulIdentifier","src":"753:6:32"},"nativeSrc":"753:35:32","nodeType":"YulFunctionCall","src":"753:35:32"},"nativeSrc":"750:55:32","nodeType":"YulIf","src":"750:55:32"},{"nativeSrc":"814:19:32","nodeType":"YulVariableDeclaration","src":"814:19:32","value":{"arguments":[{"name":"_2","nativeSrc":"830:2:32","nodeType":"YulIdentifier","src":"830:2:32"}],"functionName":{"name":"mload","nativeSrc":"824:5:32","nodeType":"YulIdentifier","src":"824:5:32"},"nativeSrc":"824:9:32","nodeType":"YulFunctionCall","src":"824:9:32"},"variables":[{"name":"_3","nativeSrc":"818:2:32","nodeType":"YulTypedName","src":"818:2:32","type":""}]},{"nativeSrc":"842:14:32","nodeType":"YulVariableDeclaration","src":"842:14:32","value":{"kind":"number","nativeSrc":"852:4:32","nodeType":"YulLiteral","src":"852:4:32","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"846:2:32","nodeType":"YulTypedName","src":"846:2:32","type":""}]},{"body":{"nativeSrc":"879:22:32","nodeType":"YulBlock","src":"879:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"881:16:32","nodeType":"YulIdentifier","src":"881:16:32"},"nativeSrc":"881:18:32","nodeType":"YulFunctionCall","src":"881:18:32"},"nativeSrc":"881:18:32","nodeType":"YulExpressionStatement","src":"881:18:32"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"871:2:32","nodeType":"YulIdentifier","src":"871:2:32"},{"name":"_1","nativeSrc":"875:2:32","nodeType":"YulIdentifier","src":"875:2:32"}],"functionName":{"name":"gt","nativeSrc":"868:2:32","nodeType":"YulIdentifier","src":"868:2:32"},"nativeSrc":"868:10:32","nodeType":"YulFunctionCall","src":"868:10:32"},"nativeSrc":"865:36:32","nodeType":"YulIf","src":"865:36:32"},{"nativeSrc":"910:20:32","nodeType":"YulVariableDeclaration","src":"910:20:32","value":{"arguments":[{"kind":"number","nativeSrc":"924:1:32","nodeType":"YulLiteral","src":"924:1:32","type":"","value":"5"},{"name":"_3","nativeSrc":"927:2:32","nodeType":"YulIdentifier","src":"927:2:32"}],"functionName":{"name":"shl","nativeSrc":"920:3:32","nodeType":"YulIdentifier","src":"920:3:32"},"nativeSrc":"920:10:32","nodeType":"YulFunctionCall","src":"920:10:32"},"variables":[{"name":"_5","nativeSrc":"914:2:32","nodeType":"YulTypedName","src":"914:2:32","type":""}]},{"nativeSrc":"939:23:32","nodeType":"YulVariableDeclaration","src":"939:23:32","value":{"arguments":[{"kind":"number","nativeSrc":"959:2:32","nodeType":"YulLiteral","src":"959:2:32","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"953:5:32","nodeType":"YulIdentifier","src":"953:5:32"},"nativeSrc":"953:9:32","nodeType":"YulFunctionCall","src":"953:9:32"},"variables":[{"name":"memPtr","nativeSrc":"943:6:32","nodeType":"YulTypedName","src":"943:6:32","type":""}]},{"nativeSrc":"971:56:32","nodeType":"YulVariableDeclaration","src":"971:56:32","value":{"arguments":[{"name":"memPtr","nativeSrc":"993:6:32","nodeType":"YulIdentifier","src":"993:6:32"},{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"1009:2:32","nodeType":"YulIdentifier","src":"1009:2:32"},{"kind":"number","nativeSrc":"1013:2:32","nodeType":"YulLiteral","src":"1013:2:32","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"1005:3:32","nodeType":"YulIdentifier","src":"1005:3:32"},"nativeSrc":"1005:11:32","nodeType":"YulFunctionCall","src":"1005:11:32"},{"arguments":[{"kind":"number","nativeSrc":"1022:2:32","nodeType":"YulLiteral","src":"1022:2:32","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1018:3:32","nodeType":"YulIdentifier","src":"1018:3:32"},"nativeSrc":"1018:7:32","nodeType":"YulFunctionCall","src":"1018:7:32"}],"functionName":{"name":"and","nativeSrc":"1001:3:32","nodeType":"YulIdentifier","src":"1001:3:32"},"nativeSrc":"1001:25:32","nodeType":"YulFunctionCall","src":"1001:25:32"}],"functionName":{"name":"add","nativeSrc":"989:3:32","nodeType":"YulIdentifier","src":"989:3:32"},"nativeSrc":"989:38:32","nodeType":"YulFunctionCall","src":"989:38:32"},"variables":[{"name":"newFreePtr","nativeSrc":"975:10:32","nodeType":"YulTypedName","src":"975:10:32","type":""}]},{"body":{"nativeSrc":"1086:22:32","nodeType":"YulBlock","src":"1086:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1088:16:32","nodeType":"YulIdentifier","src":"1088:16:32"},"nativeSrc":"1088:18:32","nodeType":"YulFunctionCall","src":"1088:18:32"},"nativeSrc":"1088:18:32","nodeType":"YulExpressionStatement","src":"1088:18:32"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1045:10:32","nodeType":"YulIdentifier","src":"1045:10:32"},{"name":"_1","nativeSrc":"1057:2:32","nodeType":"YulIdentifier","src":"1057:2:32"}],"functionName":{"name":"gt","nativeSrc":"1042:2:32","nodeType":"YulIdentifier","src":"1042:2:32"},"nativeSrc":"1042:18:32","nodeType":"YulFunctionCall","src":"1042:18:32"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1065:10:32","nodeType":"YulIdentifier","src":"1065:10:32"},{"name":"memPtr","nativeSrc":"1077:6:32","nodeType":"YulIdentifier","src":"1077:6:32"}],"functionName":{"name":"lt","nativeSrc":"1062:2:32","nodeType":"YulIdentifier","src":"1062:2:32"},"nativeSrc":"1062:22:32","nodeType":"YulFunctionCall","src":"1062:22:32"}],"functionName":{"name":"or","nativeSrc":"1039:2:32","nodeType":"YulIdentifier","src":"1039:2:32"},"nativeSrc":"1039:46:32","nodeType":"YulFunctionCall","src":"1039:46:32"},"nativeSrc":"1036:72:32","nodeType":"YulIf","src":"1036:72:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1124:2:32","nodeType":"YulLiteral","src":"1124:2:32","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1128:10:32","nodeType":"YulIdentifier","src":"1128:10:32"}],"functionName":{"name":"mstore","nativeSrc":"1117:6:32","nodeType":"YulIdentifier","src":"1117:6:32"},"nativeSrc":"1117:22:32","nodeType":"YulFunctionCall","src":"1117:22:32"},"nativeSrc":"1117:22:32","nodeType":"YulExpressionStatement","src":"1117:22:32"},{"nativeSrc":"1148:17:32","nodeType":"YulVariableDeclaration","src":"1148:17:32","value":{"name":"memPtr","nativeSrc":"1159:6:32","nodeType":"YulIdentifier","src":"1159:6:32"},"variables":[{"name":"dst","nativeSrc":"1152:3:32","nodeType":"YulTypedName","src":"1152:3:32","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1181:6:32","nodeType":"YulIdentifier","src":"1181:6:32"},{"name":"_3","nativeSrc":"1189:2:32","nodeType":"YulIdentifier","src":"1189:2:32"}],"functionName":{"name":"mstore","nativeSrc":"1174:6:32","nodeType":"YulIdentifier","src":"1174:6:32"},"nativeSrc":"1174:18:32","nodeType":"YulFunctionCall","src":"1174:18:32"},"nativeSrc":"1174:18:32","nodeType":"YulExpressionStatement","src":"1174:18:32"},{"nativeSrc":"1201:22:32","nodeType":"YulAssignment","src":"1201:22:32","value":{"arguments":[{"name":"memPtr","nativeSrc":"1212:6:32","nodeType":"YulIdentifier","src":"1212:6:32"},{"name":"_4","nativeSrc":"1220:2:32","nodeType":"YulIdentifier","src":"1220:2:32"}],"functionName":{"name":"add","nativeSrc":"1208:3:32","nodeType":"YulIdentifier","src":"1208:3:32"},"nativeSrc":"1208:15:32","nodeType":"YulFunctionCall","src":"1208:15:32"},"variableNames":[{"name":"dst","nativeSrc":"1201:3:32","nodeType":"YulIdentifier","src":"1201:3:32"}]},{"nativeSrc":"1232:34:32","nodeType":"YulVariableDeclaration","src":"1232:34:32","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"1254:2:32","nodeType":"YulIdentifier","src":"1254:2:32"},{"name":"_5","nativeSrc":"1258:2:32","nodeType":"YulIdentifier","src":"1258:2:32"}],"functionName":{"name":"add","nativeSrc":"1250:3:32","nodeType":"YulIdentifier","src":"1250:3:32"},"nativeSrc":"1250:11:32","nodeType":"YulFunctionCall","src":"1250:11:32"},{"name":"_4","nativeSrc":"1263:2:32","nodeType":"YulIdentifier","src":"1263:2:32"}],"functionName":{"name":"add","nativeSrc":"1246:3:32","nodeType":"YulIdentifier","src":"1246:3:32"},"nativeSrc":"1246:20:32","nodeType":"YulFunctionCall","src":"1246:20:32"},"variables":[{"name":"srcEnd","nativeSrc":"1236:6:32","nodeType":"YulTypedName","src":"1236:6:32","type":""}]},{"body":{"nativeSrc":"1298:16:32","nodeType":"YulBlock","src":"1298:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1307:1:32","nodeType":"YulLiteral","src":"1307:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1310:1:32","nodeType":"YulLiteral","src":"1310:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1300:6:32","nodeType":"YulIdentifier","src":"1300:6:32"},"nativeSrc":"1300:12:32","nodeType":"YulFunctionCall","src":"1300:12:32"},"nativeSrc":"1300:12:32","nodeType":"YulExpressionStatement","src":"1300:12:32"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"1281:6:32","nodeType":"YulIdentifier","src":"1281:6:32"},{"name":"dataEnd","nativeSrc":"1289:7:32","nodeType":"YulIdentifier","src":"1289:7:32"}],"functionName":{"name":"gt","nativeSrc":"1278:2:32","nodeType":"YulIdentifier","src":"1278:2:32"},"nativeSrc":"1278:19:32","nodeType":"YulFunctionCall","src":"1278:19:32"},"nativeSrc":"1275:39:32","nodeType":"YulIf","src":"1275:39:32"},{"nativeSrc":"1323:22:32","nodeType":"YulVariableDeclaration","src":"1323:22:32","value":{"arguments":[{"name":"_2","nativeSrc":"1338:2:32","nodeType":"YulIdentifier","src":"1338:2:32"},{"name":"_4","nativeSrc":"1342:2:32","nodeType":"YulIdentifier","src":"1342:2:32"}],"functionName":{"name":"add","nativeSrc":"1334:3:32","nodeType":"YulIdentifier","src":"1334:3:32"},"nativeSrc":"1334:11:32","nodeType":"YulFunctionCall","src":"1334:11:32"},"variables":[{"name":"src","nativeSrc":"1327:3:32","nodeType":"YulTypedName","src":"1327:3:32","type":""}]},{"body":{"nativeSrc":"1410:121:32","nodeType":"YulBlock","src":"1410:121:32","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"1431:3:32","nodeType":"YulIdentifier","src":"1431:3:32"},{"arguments":[{"name":"src","nativeSrc":"1484:3:32","nodeType":"YulIdentifier","src":"1484:3:32"}],"functionName":{"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"1436:47:32","nodeType":"YulIdentifier","src":"1436:47:32"},"nativeSrc":"1436:52:32","nodeType":"YulFunctionCall","src":"1436:52:32"}],"functionName":{"name":"mstore","nativeSrc":"1424:6:32","nodeType":"YulIdentifier","src":"1424:6:32"},"nativeSrc":"1424:65:32","nodeType":"YulFunctionCall","src":"1424:65:32"},"nativeSrc":"1424:65:32","nodeType":"YulExpressionStatement","src":"1424:65:32"},{"nativeSrc":"1502:19:32","nodeType":"YulAssignment","src":"1502:19:32","value":{"arguments":[{"name":"dst","nativeSrc":"1513:3:32","nodeType":"YulIdentifier","src":"1513:3:32"},{"name":"_4","nativeSrc":"1518:2:32","nodeType":"YulIdentifier","src":"1518:2:32"}],"functionName":{"name":"add","nativeSrc":"1509:3:32","nodeType":"YulIdentifier","src":"1509:3:32"},"nativeSrc":"1509:12:32","nodeType":"YulFunctionCall","src":"1509:12:32"},"variableNames":[{"name":"dst","nativeSrc":"1502:3:32","nodeType":"YulIdentifier","src":"1502:3:32"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"1365:3:32","nodeType":"YulIdentifier","src":"1365:3:32"},{"name":"srcEnd","nativeSrc":"1370:6:32","nodeType":"YulIdentifier","src":"1370:6:32"}],"functionName":{"name":"lt","nativeSrc":"1362:2:32","nodeType":"YulIdentifier","src":"1362:2:32"},"nativeSrc":"1362:15:32","nodeType":"YulFunctionCall","src":"1362:15:32"},"nativeSrc":"1354:177:32","nodeType":"YulForLoop","post":{"nativeSrc":"1378:23:32","nodeType":"YulBlock","src":"1378:23:32","statements":[{"nativeSrc":"1380:19:32","nodeType":"YulAssignment","src":"1380:19:32","value":{"arguments":[{"name":"src","nativeSrc":"1391:3:32","nodeType":"YulIdentifier","src":"1391:3:32"},{"name":"_4","nativeSrc":"1396:2:32","nodeType":"YulIdentifier","src":"1396:2:32"}],"functionName":{"name":"add","nativeSrc":"1387:3:32","nodeType":"YulIdentifier","src":"1387:3:32"},"nativeSrc":"1387:12:32","nodeType":"YulFunctionCall","src":"1387:12:32"},"variableNames":[{"name":"src","nativeSrc":"1380:3:32","nodeType":"YulIdentifier","src":"1380:3:32"}]}]},"pre":{"nativeSrc":"1358:3:32","nodeType":"YulBlock","src":"1358:3:32","statements":[]},"src":"1354:177:32"},{"nativeSrc":"1540:16:32","nodeType":"YulAssignment","src":"1540:16:32","value":{"name":"memPtr","nativeSrc":"1550:6:32","nodeType":"YulIdentifier","src":"1550:6:32"},"variableNames":[{"name":"value0","nativeSrc":"1540:6:32","nodeType":"YulIdentifier","src":"1540:6:32"}]},{"nativeSrc":"1565:77:32","nodeType":"YulAssignment","src":"1565:77:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1627:9:32","nodeType":"YulIdentifier","src":"1627:9:32"},{"name":"_4","nativeSrc":"1638:2:32","nodeType":"YulIdentifier","src":"1638:2:32"}],"functionName":{"name":"add","nativeSrc":"1623:3:32","nodeType":"YulIdentifier","src":"1623:3:32"},"nativeSrc":"1623:18:32","nodeType":"YulFunctionCall","src":"1623:18:32"}],"functionName":{"name":"abi_decode_contract_IERC1155Burnable_fromMemory","nativeSrc":"1575:47:32","nodeType":"YulIdentifier","src":"1575:47:32"},"nativeSrc":"1575:67:32","nodeType":"YulFunctionCall","src":"1575:67:32"},"variableNames":[{"name":"value1","nativeSrc":"1565:6:32","nodeType":"YulIdentifier","src":"1565:6:32"}]}]},"name":"abi_decode_tuple_t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptrt_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"346:1302:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"477:9:32","nodeType":"YulTypedName","src":"477:9:32","type":""},{"name":"dataEnd","nativeSrc":"488:7:32","nodeType":"YulTypedName","src":"488:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"500:6:32","nodeType":"YulTypedName","src":"500:6:32","type":""},{"name":"value1","nativeSrc":"508:6:32","nodeType":"YulTypedName","src":"508:6:32","type":""}],"src":"346:1302:32"},{"body":{"nativeSrc":"1685:95:32","nodeType":"YulBlock","src":"1685:95:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1702:1:32","nodeType":"YulLiteral","src":"1702:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1709:3:32","nodeType":"YulLiteral","src":"1709:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"1714:10:32","nodeType":"YulLiteral","src":"1714:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1705:3:32","nodeType":"YulIdentifier","src":"1705:3:32"},"nativeSrc":"1705:20:32","nodeType":"YulFunctionCall","src":"1705:20:32"}],"functionName":{"name":"mstore","nativeSrc":"1695:6:32","nodeType":"YulIdentifier","src":"1695:6:32"},"nativeSrc":"1695:31:32","nodeType":"YulFunctionCall","src":"1695:31:32"},"nativeSrc":"1695:31:32","nodeType":"YulExpressionStatement","src":"1695:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1742:1:32","nodeType":"YulLiteral","src":"1742:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"1745:4:32","nodeType":"YulLiteral","src":"1745:4:32","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"1735:6:32","nodeType":"YulIdentifier","src":"1735:6:32"},"nativeSrc":"1735:15:32","nodeType":"YulFunctionCall","src":"1735:15:32"},"nativeSrc":"1735:15:32","nodeType":"YulExpressionStatement","src":"1735:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1766:1:32","nodeType":"YulLiteral","src":"1766:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1769:4:32","nodeType":"YulLiteral","src":"1769:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1759:6:32","nodeType":"YulIdentifier","src":"1759:6:32"},"nativeSrc":"1759:15:32","nodeType":"YulFunctionCall","src":"1759:15:32"},"nativeSrc":"1759:15:32","nodeType":"YulExpressionStatement","src":"1759:15:32"}]},"name":"panic_error_0x32","nativeSrc":"1653:127:32","nodeType":"YulFunctionDefinition","src":"1653:127:32"},{"body":{"nativeSrc":"1834:176:32","nodeType":"YulBlock","src":"1834:176:32","statements":[{"nativeSrc":"1844:17:32","nodeType":"YulAssignment","src":"1844:17:32","value":{"arguments":[{"name":"x","nativeSrc":"1856:1:32","nodeType":"YulIdentifier","src":"1856:1:32"},{"name":"y","nativeSrc":"1859:1:32","nodeType":"YulIdentifier","src":"1859:1:32"}],"functionName":{"name":"sub","nativeSrc":"1852:3:32","nodeType":"YulIdentifier","src":"1852:3:32"},"nativeSrc":"1852:9:32","nodeType":"YulFunctionCall","src":"1852:9:32"},"variableNames":[{"name":"diff","nativeSrc":"1844:4:32","nodeType":"YulIdentifier","src":"1844:4:32"}]},{"body":{"nativeSrc":"1893:111:32","nodeType":"YulBlock","src":"1893:111:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1914:1:32","nodeType":"YulLiteral","src":"1914:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1921:3:32","nodeType":"YulLiteral","src":"1921:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"1926:10:32","nodeType":"YulLiteral","src":"1926:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1917:3:32","nodeType":"YulIdentifier","src":"1917:3:32"},"nativeSrc":"1917:20:32","nodeType":"YulFunctionCall","src":"1917:20:32"}],"functionName":{"name":"mstore","nativeSrc":"1907:6:32","nodeType":"YulIdentifier","src":"1907:6:32"},"nativeSrc":"1907:31:32","nodeType":"YulFunctionCall","src":"1907:31:32"},"nativeSrc":"1907:31:32","nodeType":"YulExpressionStatement","src":"1907:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1958:1:32","nodeType":"YulLiteral","src":"1958:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"1961:4:32","nodeType":"YulLiteral","src":"1961:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1951:6:32","nodeType":"YulIdentifier","src":"1951:6:32"},"nativeSrc":"1951:15:32","nodeType":"YulFunctionCall","src":"1951:15:32"},"nativeSrc":"1951:15:32","nodeType":"YulExpressionStatement","src":"1951:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1986:1:32","nodeType":"YulLiteral","src":"1986:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1989:4:32","nodeType":"YulLiteral","src":"1989:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1979:6:32","nodeType":"YulIdentifier","src":"1979:6:32"},"nativeSrc":"1979:15:32","nodeType":"YulFunctionCall","src":"1979:15:32"},"nativeSrc":"1979:15:32","nodeType":"YulExpressionStatement","src":"1979:15:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1876:4:32","nodeType":"YulIdentifier","src":"1876:4:32"},{"name":"x","nativeSrc":"1882:1:32","nodeType":"YulIdentifier","src":"1882:1:32"}],"functionName":{"name":"gt","nativeSrc":"1873:2:32","nodeType":"YulIdentifier","src":"1873:2:32"},"nativeSrc":"1873:11:32","nodeType":"YulFunctionCall","src":"1873:11:32"},"nativeSrc":"1870:134:32","nodeType":"YulIf","src":"1870:134:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"1785:225:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1816:1:32","nodeType":"YulTypedName","src":"1816:1:32","type":""},{"name":"y","nativeSrc":"1819:1:32","nodeType":"YulTypedName","src":"1819:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1825:4:32","nodeType":"YulTypedName","src":"1825:4:32","type":""}],"src":"1785:225:32"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_contract_IERC1155Burnable_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_contract$_IERC1155Burnable_$948_$dyn_memory_ptrt_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_contract_IERC1155Burnable_fromMemory(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := abi_decode_contract_IERC1155Burnable_fromMemory(add(headStart, _4))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b506040516200178838038062001788833981016040819052620000349162000236565b6001600160a01b03811660805233620000588162000051620000c5565b90620000fb565b5060005b8251811015620000bc576001600460008584815181106200008157620000816200031c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016200005c565b50505062000354565b600080620000f560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000332565b92915050565b6001600160a01b03811615620001525781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001726307f5828d60e41b60016200016a62000176565b9190620001a6565b5050565b600080620000f560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000332565b600160e01b6001600160e01b0319831601620001d5576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023157600080fd5b919050565b600080604083850312156200024a57600080fd5b82516001600160401b03808211156200026257600080fd5b818501915085601f8301126200027757600080fd5b81516020828211156200028e576200028e62000203565b8160051b604051601f19603f83011681018181108682111715620002b657620002b662000203565b604052928352818301935084810182019289841115620002d557600080fd5b948201945b83861015620002fe57620002ee8662000219565b85529482019493820193620002da565b96506200030f905087820162000219565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b81810381811115620000f557634e487b7160e01b600052601160045260246000fd5b608051611403620003856000396000818161010a0152818161015f01528181610e460152610ece01526114036000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063572b6c051161007657806392463bed1161005b57806392463bed146101a4578063f0a71104146101b7578063f2fde38b146101ca57600080fd5b8063572b6c051461014f5780638da5cb5b1461019c57600080fd5b806301ffc9a7146100a85780630458935e146100d05780630a0a3325146100e55780632b4c9f1614610108575b600080fd5b6100bb6100b6366004610f4a565b6101dd565b60405190151581526020015b60405180910390f35b6100e36100de366004610fdf565b6101f7565b005b6100bb6100f336600461109b565b60046020526000908152604090205460ff1681565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b6100bb61015d36600461109b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61012a610528565b6100e36101b23660046110b8565b610554565b6100e36101c5366004611124565b610665565b6100e36101d836600461109b565b610b1c565b60006101f1826101eb610b3a565b90610b68565b92915050565b84831415806102065750848114155b1561023d576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8581101561051f576004600088888481811061025e5761025e6111e8565b9050602002016020810190610273919061109b565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff166102d3576040517f32da96a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282828181106102e5576102e56111e8565b90506020028101906102f79190611217565b905085858381811061030b5761030b6111e8565b905060200281019061031d9190611217565b905014610356576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868682818110610368576103686111e8565b905060200201602081019061037d919061109b565b73ffffffffffffffffffffffffffffffffffffffff1663805349346103a0610c42565b8787858181106103b2576103b26111e8565b90506020028101906103c49190611217565b8787878181106103d6576103d66111e8565b90506020028101906103e89190611217565b6040518663ffffffff1660e01b81526004016104089594939291906112ca565b600060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b5050505086868281811061044c5761044c6111e8565b9050602002016020810190610461919061109b565b73ffffffffffffffffffffffffffffffffffffffff1642610480610c42565b73ffffffffffffffffffffffffffffffffffffffff167f695b30a33e54e34d55c7836e092fa38db4283a5b243d2a8cfd4180ee227b2c0d8888868181106104c9576104c96111e8565b90506020028101906104db9190611217565b8888888181106104ed576104ed6111e8565b90506020028101906104ff9190611217565b60405161050f9493929190611319565b60405180910390a4600101610240565b50505050505050565b600061054f610535610c4c565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61056d61055f610c42565b610567610c4c565b90610c7a565b8281146105a6576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8381101561065e578282828181106105c3576105c36111e8565b90506020020160208101906105d89190611359565b600460008787858181106105ee576105ee6111e8565b9050602002016020810190610603919061109b565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556001016105a9565b5050505050565b86851415806106745750868314155b8061067f5750868114155b156106b6576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b87811015610b1157600460008888848181106106d7576106d76111e8565b90506020020160208101906106ec919061109b565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff1661074c576040517f32da96a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82828281811061075e5761075e6111e8565b90506020028101906107709190611217565b9050858583818110610784576107846111e8565b90506020028101906107969190611217565b9050146107cf576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8686828181106107e1576107e16111e8565b90506020020160208101906107f6919061109b565b73ffffffffffffffffffffffffffffffffffffffff1663e985e9c58a8a84818110610823576108236111e8565b9050602002016020810190610838919061109b565b610840610c42565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604401602060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190611376565b61090a576040517f729d852800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86868281811061091c5761091c6111e8565b9050602002016020810190610931919061109b565b73ffffffffffffffffffffffffffffffffffffffff1663805349348a8a8481811061095e5761095e6111e8565b9050602002016020810190610973919061109b565b878785818110610985576109856111e8565b90506020028101906109979190611217565b8787878181106109a9576109a96111e8565b90506020028101906109bb9190611217565b6040518663ffffffff1660e01b81526004016109db9594939291906112ca565b600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b50505050868682818110610a1f57610a1f6111e8565b9050602002016020810190610a34919061109b565b73ffffffffffffffffffffffffffffffffffffffff16428a8a84818110610a5d57610a5d6111e8565b9050602002016020810190610a72919061109b565b73ffffffffffffffffffffffffffffffffffffffff167f695b30a33e54e34d55c7836e092fa38db4283a5b243d2a8cfd4180ee227b2c0d888886818110610abb57610abb6111e8565b9050602002810190610acd9190611217565b888888818110610adf57610adf6111e8565b9050602002810190610af19190611217565b604051610b019493929190611319565b60405180910390a46001016106b9565b505050505050505050565b610b37610b27610c42565b82610b30610c4c565b9190610cee565b50565b6000806101f160017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611393565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610bb8575060006101f1565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610c09575060016101f1565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600061054f610e03565b6000806101f160017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611393565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610cea576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610d5b576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610ce1565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dfd5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610e135750601836105b15610e1d57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610f3957506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190611376565b15610f4357919050565b3391505090565b600060208284031215610f5c57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610f8c57600080fd5b9392505050565b60008083601f840112610fa557600080fd5b50813567ffffffffffffffff811115610fbd57600080fd5b6020830191508360208260051b8501011115610fd857600080fd5b9250929050565b60008060008060008060608789031215610ff857600080fd5b863567ffffffffffffffff8082111561101057600080fd5b61101c8a838b01610f93565b9098509650602089013591508082111561103557600080fd5b6110418a838b01610f93565b9096509450604089013591508082111561105a57600080fd5b5061106789828a01610f93565b979a9699509497509295939492505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b3757600080fd5b6000602082840312156110ad57600080fd5b8135610f8c81611079565b600080600080604085870312156110ce57600080fd5b843567ffffffffffffffff808211156110e657600080fd5b6110f288838901610f93565b9096509450602087013591508082111561110b57600080fd5b5061111887828801610f93565b95989497509550505050565b6000806000806000806000806080898b03121561114057600080fd5b883567ffffffffffffffff8082111561115857600080fd5b6111648c838d01610f93565b909a50985060208b013591508082111561117d57600080fd5b6111898c838d01610f93565b909850965060408b01359150808211156111a257600080fd5b6111ae8c838d01610f93565b909650945060608b01359150808211156111c757600080fd5b506111d48b828c01610f93565b999c989b5096995094979396929594505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261124c57600080fd5b83018035915067ffffffffffffffff82111561126757600080fd5b6020019150600581901b3603821315610fd857600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156112b157600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006112fa60608301868861127f565b828103604084015261130d81858761127f565b98975050505050505050565b60408152600061132d60408301868861127f565b828103602084015261134081858761127f565b979650505050505050565b8015158114610b3757600080fd5b60006020828403121561136b57600080fd5b8135610f8c8161134b565b60006020828403121561138857600080fd5b8151610f8c8161134b565b818103818111156101f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212201244fdf5c11cbfe6f3bd980bf3836301997e86ac4050a7ae584dba5b49b25bd164736f6c63430008160033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1788 CODESIZE SUB DUP1 PUSH3 0x1788 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x236 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x58 DUP2 PUSH3 0x51 PUSH3 0xC5 JUMP JUMPDEST SWAP1 PUSH3 0xFB JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0xBC JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH3 0x81 JUMPI PUSH3 0x81 PUSH3 0x31C JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH3 0x5C JUMP JUMPDEST POP POP POP PUSH3 0x354 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xF5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x332 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x152 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x172 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x16A PUSH3 0x176 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1A6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xF5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x332 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1D5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH3 0x28E JUMPI PUSH3 0x28E PUSH3 0x203 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH3 0x2B6 JUMPI PUSH3 0x2B6 PUSH3 0x203 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH3 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH3 0x2FE JUMPI PUSH3 0x2EE DUP7 PUSH3 0x219 JUMP JUMPDEST DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH3 0x2DA JUMP JUMPDEST SWAP7 POP PUSH3 0x30F SWAP1 POP DUP8 DUP3 ADD PUSH3 0x219 JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xF5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1403 PUSH3 0x385 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x10A ADD MSTORE DUP2 DUP2 PUSH2 0x15F ADD MSTORE DUP2 DUP2 PUSH2 0xE46 ADD MSTORE PUSH2 0xECE ADD MSTORE PUSH2 0x1403 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x92463BED GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x92463BED EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xF0A71104 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x458935E EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0xA0A3325 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x108 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4A JUMP JUMPDEST PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0xFDF JUMP JUMPDEST PUSH2 0x1F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBB PUSH2 0xF3 CALLDATASIZE PUSH1 0x4 PUSH2 0x109B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x15D CALLDATASIZE PUSH1 0x4 PUSH2 0x109B JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x528 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x10B8 JUMP JUMPDEST PUSH2 0x554 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1124 JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x1D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x109B JUMP JUMPDEST PUSH2 0xB1C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F1 DUP3 PUSH2 0x1EB PUSH2 0xB3A JUMP JUMPDEST SWAP1 PUSH2 0xB68 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP4 EQ ISZERO DUP1 PUSH2 0x206 JUMPI POP DUP5 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x51F JUMPI PUSH1 0x4 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x25E JUMPI PUSH2 0x25E PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x32DA96A300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x2E5 JUMPI PUSH2 0x2E5 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x30B JUMPI PUSH2 0x30B PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP EQ PUSH2 0x356 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x368 JUMPI PUSH2 0x368 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 PUSH2 0x3A0 PUSH2 0xC42 JUMP JUMPDEST DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x3B2 JUMPI PUSH2 0x3B2 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3C4 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP2 DUP2 LT PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3E8 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x408 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x436 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x44C JUMPI PUSH2 0x44C PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x461 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP PUSH2 0x480 PUSH2 0xC42 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x695B30A33E54E34D55C7836E092FA38DB4283A5B243D2A8CFD4180EE227B2C0D DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0x4C9 JUMPI PUSH2 0x4C9 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4DB SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP9 DUP9 DUP9 DUP2 DUP2 LT PUSH2 0x4ED JUMPI PUSH2 0x4ED PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4FF SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 ADD PUSH2 0x240 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0x535 PUSH2 0xC4C JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x56D PUSH2 0x55F PUSH2 0xC42 JUMP JUMPDEST PUSH2 0x567 PUSH2 0xC4C JUMP JUMPDEST SWAP1 PUSH2 0xC7A JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x65E JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x5C3 JUMPI PUSH2 0x5C3 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5D8 SWAP2 SWAP1 PUSH2 0x1359 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x5EE JUMPI PUSH2 0x5EE PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x603 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x5A9 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP7 DUP6 EQ ISZERO DUP1 PUSH2 0x674 JUMPI POP DUP7 DUP4 EQ ISZERO JUMPDEST DUP1 PUSH2 0x67F JUMPI POP DUP7 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0xB11 JUMPI PUSH1 0x4 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x6D7 JUMPI PUSH2 0x6D7 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH32 0x32DA96A300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x75E JUMPI PUSH2 0x75E PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x770 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x784 JUMPI PUSH2 0x784 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x796 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP EQ PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x7E1 JUMPI PUSH2 0x7E1 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7F6 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE985E9C5 DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0x823 JUMPI PUSH2 0x823 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x838 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH2 0x840 PUSH2 0xC42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8D4 SWAP2 SWAP1 PUSH2 0x1376 JUMP JUMPDEST PUSH2 0x90A JUMPI PUSH1 0x40 MLOAD PUSH32 0x729D852800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x91C JUMPI PUSH2 0x91C PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x931 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0x95E JUMPI PUSH2 0x95E PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x973 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x985 JUMPI PUSH2 0x985 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x997 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP2 DUP2 LT PUSH2 0x9A9 JUMPI PUSH2 0x9A9 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x9BB SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DB SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0xA1F JUMPI PUSH2 0xA1F PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA34 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0xA5D JUMPI PUSH2 0xA5D PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA72 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x695B30A33E54E34D55C7836E092FA38DB4283A5B243D2A8CFD4180EE227B2C0D DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0xABB JUMPI PUSH2 0xABB PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xACD SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP9 DUP9 DUP9 DUP2 DUP2 LT PUSH2 0xADF JUMPI PUSH2 0xADF PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xAF1 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB01 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 ADD PUSH2 0x6B9 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB37 PUSH2 0xB27 PUSH2 0xC42 JUMP JUMPDEST DUP3 PUSH2 0xB30 PUSH2 0xC4C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xCEE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1393 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xBB8 JUMPI POP PUSH1 0x0 PUSH2 0x1F1 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC09 JUMPI POP PUSH1 0x1 PUSH2 0x1F1 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1393 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xCEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xD5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDFD JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE13 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE1D JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xF39 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF39 SWAP2 SWAP1 PUSH2 0x1376 JUMP JUMPDEST ISZERO PUSH2 0xF43 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xF8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xFA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xFF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x101C DUP11 DUP4 DUP12 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1041 DUP11 DUP4 DUP12 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1067 DUP10 DUP3 DUP11 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF8C DUP2 PUSH2 0x1079 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10F2 DUP9 DUP4 DUP10 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x110B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1118 DUP8 DUP3 DUP9 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1164 DUP13 DUP4 DUP14 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x117D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1189 DUP13 DUP4 DUP14 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x11A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11AE DUP13 DUP4 DUP14 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x11C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D4 DUP12 DUP3 DUP13 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x124C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x12B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x12FA PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x127F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x130D DUP2 DUP6 DUP8 PUSH2 0x127F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x132D PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0x127F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1340 DUP2 DUP6 DUP8 PUSH2 0x127F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x136B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF8C DUP2 PUSH2 0x134B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xF8C DUP2 PUSH2 0x134B JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1F1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PREVRANDAO REVERT CREATE2 0xC1 SHR 0xBF 0xE6 RETURN 0xBD SWAP9 SIGNEXTEND RETURN DUP4 PUSH4 0x1997E86 0xAC BLOCKHASH POP 0xA7 0xAE PC 0x4D 0xBA JUMPDEST 0x49 0xB2 JUMPDEST 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1177:4392:28:-:0;;;2413:308;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;2581:10:28;1008:63:0;2581:10:28;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;964:114;2608:9:28::2;2603:112;2627:6;:13;2623:1;:17;2603:112;;;2700:4;2661:16;:36;2686:6;2693:1;2686:9;;;;;;;;:::i;:::-;;::::0;;::::2;::::0;;;;;;;-1:-1:-1;;;;;2661:36:28::2;::::0;;;::::2;::::0;;;;;;-1:-1:-1;2661:36:28;:43;;-1:-1:-1;;2661:43:28::2;::::0;::::2;;::::0;;;::::2;::::0;;-1:-1:-1;2642:3:28::2;2603:112;;;;2413:308:::0;;1177:4392;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:127:32:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:195;243:13;;-1:-1:-1;;;;;285:31:32;;275:42;;265:70;;331:1;328;321:12;265:70;146:195;;;:::o;346:1302::-;500:6;508;561:2;549:9;540:7;536:23;532:32;529:52;;;577:1;574;567:12;529:52;604:16;;-1:-1:-1;;;;;669:14:32;;;666:34;;;696:1;693;686:12;666:34;734:6;723:9;719:22;709:32;;779:7;772:4;768:2;764:13;760:27;750:55;;801:1;798;791:12;750:55;830:2;824:9;852:4;875:2;871;868:10;865:36;;;881:18;;:::i;:::-;927:2;924:1;920:10;959:2;953:9;1022:2;1018:7;1013:2;1009;1005:11;1001:25;993:6;989:38;1077:6;1065:10;1062:22;1057:2;1045:10;1042:18;1039:46;1036:72;;;1088:18;;:::i;:::-;1124:2;1117:22;1174:18;;;1208:15;;;;-1:-1:-1;1250:11:32;;;1246:20;;;1278:19;;;1275:39;;;1310:1;1307;1300:12;1275:39;1334:11;;;;1354:177;1370:6;1365:3;1362:15;1354:177;;;1436:52;1484:3;1436:52;:::i;:::-;1424:65;;1387:12;;;;1509;;;;1354:177;;;1550:6;-1:-1:-1;1575:67:32;;-1:-1:-1;1623:18:32;;;1575:67;:::i;:::-;1565:77;;;;;;346:1302;;;;;:::o;1653:127::-;1714:10;1709:3;1705:20;1702:1;1695:31;1745:4;1742:1;1735:15;1769:4;1766:1;1759:15;1785:225;1852:9;;;1873:11;;;1870:134;;;1926:10;1921:3;1917:20;1914:1;1907:31;1961:4;1958:1;1951:15;1989:4;1986:1;1979:15;1785:225;1177:4392:28;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_2726":{"entryPoint":3138,"id":2726,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":3587,"id":652,"parameterSlots":0,"returnSlots":1},"@burnFor_3032":{"entryPoint":1637,"id":3032,"parameterSlots":8,"returnSlots":0},"@burn_2898":{"entryPoint":503,"id":2898,"parameterSlots":6,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":3194,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isApprovedTokens_2643":{"entryPoint":null,"id":2643,"parameterSlots":0,"returnSlots":0},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":3148,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2874,"id":531,"parameterSlots":0,"returnSlots":1},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1320,"id":62,"parameterSlots":0,"returnSlots":1},"@setApprovedTokens_2796":{"entryPoint":1364,"id":2796,"parameterSlots":4,"returnSlots":0},"@supportsInterface_413":{"entryPoint":477,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2920,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":3310,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2844,"id":79,"parameterSlots":1,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":3987,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4251,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":4388,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":4063,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_contract$_IERC1155Burnable_$948_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr":{"entryPoint":4280,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool":{"entryPoint":4953,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4982,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":3914,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC1155Burnable_$948":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":4735,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4810,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4889,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4631,"id":null,"parameterSlots":2,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":5011,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":4584,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":4217,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":4939,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:9063:32","nodeType":"YulBlock","src":"0:9063:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"83:263:32","nodeType":"YulBlock","src":"83:263:32","statements":[{"body":{"nativeSrc":"129:16:32","nodeType":"YulBlock","src":"129:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:32","nodeType":"YulLiteral","src":"138:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:32","nodeType":"YulLiteral","src":"141:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:32","nodeType":"YulIdentifier","src":"131:6:32"},"nativeSrc":"131:12:32","nodeType":"YulFunctionCall","src":"131:12:32"},"nativeSrc":"131:12:32","nodeType":"YulExpressionStatement","src":"131:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:32","nodeType":"YulIdentifier","src":"104:7:32"},{"name":"headStart","nativeSrc":"113:9:32","nodeType":"YulIdentifier","src":"113:9:32"}],"functionName":{"name":"sub","nativeSrc":"100:3:32","nodeType":"YulIdentifier","src":"100:3:32"},"nativeSrc":"100:23:32","nodeType":"YulFunctionCall","src":"100:23:32"},{"kind":"number","nativeSrc":"125:2:32","nodeType":"YulLiteral","src":"125:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:32","nodeType":"YulIdentifier","src":"96:3:32"},"nativeSrc":"96:32:32","nodeType":"YulFunctionCall","src":"96:32:32"},"nativeSrc":"93:52:32","nodeType":"YulIf","src":"93:52:32"},{"nativeSrc":"154:36:32","nodeType":"YulVariableDeclaration","src":"154:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:32","nodeType":"YulIdentifier","src":"180:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:32","nodeType":"YulIdentifier","src":"167:12:32"},"nativeSrc":"167:23:32","nodeType":"YulFunctionCall","src":"167:23:32"},"variables":[{"name":"value","nativeSrc":"158:5:32","nodeType":"YulTypedName","src":"158:5:32","type":""}]},{"body":{"nativeSrc":"300:16:32","nodeType":"YulBlock","src":"300:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:32","nodeType":"YulLiteral","src":"309:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:32","nodeType":"YulLiteral","src":"312:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:32","nodeType":"YulIdentifier","src":"302:6:32"},"nativeSrc":"302:12:32","nodeType":"YulFunctionCall","src":"302:12:32"},"nativeSrc":"302:12:32","nodeType":"YulExpressionStatement","src":"302:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:32","nodeType":"YulIdentifier","src":"212:5:32"},{"arguments":[{"name":"value","nativeSrc":"223:5:32","nodeType":"YulIdentifier","src":"223:5:32"},{"kind":"number","nativeSrc":"230:66:32","nodeType":"YulLiteral","src":"230:66:32","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:32","nodeType":"YulIdentifier","src":"219:3:32"},"nativeSrc":"219:78:32","nodeType":"YulFunctionCall","src":"219:78:32"}],"functionName":{"name":"eq","nativeSrc":"209:2:32","nodeType":"YulIdentifier","src":"209:2:32"},"nativeSrc":"209:89:32","nodeType":"YulFunctionCall","src":"209:89:32"}],"functionName":{"name":"iszero","nativeSrc":"202:6:32","nodeType":"YulIdentifier","src":"202:6:32"},"nativeSrc":"202:97:32","nodeType":"YulFunctionCall","src":"202:97:32"},"nativeSrc":"199:117:32","nodeType":"YulIf","src":"199:117:32"},{"nativeSrc":"325:15:32","nodeType":"YulAssignment","src":"325:15:32","value":{"name":"value","nativeSrc":"335:5:32","nodeType":"YulIdentifier","src":"335:5:32"},"variableNames":[{"name":"value0","nativeSrc":"325:6:32","nodeType":"YulIdentifier","src":"325:6:32"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:32","nodeType":"YulTypedName","src":"49:9:32","type":""},{"name":"dataEnd","nativeSrc":"60:7:32","nodeType":"YulTypedName","src":"60:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:32","nodeType":"YulTypedName","src":"72:6:32","type":""}],"src":"14:332:32"},{"body":{"nativeSrc":"446:92:32","nodeType":"YulBlock","src":"446:92:32","statements":[{"nativeSrc":"456:26:32","nodeType":"YulAssignment","src":"456:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:32","nodeType":"YulIdentifier","src":"468:9:32"},{"kind":"number","nativeSrc":"479:2:32","nodeType":"YulLiteral","src":"479:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:32","nodeType":"YulIdentifier","src":"464:3:32"},"nativeSrc":"464:18:32","nodeType":"YulFunctionCall","src":"464:18:32"},"variableNames":[{"name":"tail","nativeSrc":"456:4:32","nodeType":"YulIdentifier","src":"456:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:32","nodeType":"YulIdentifier","src":"498:9:32"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:32","nodeType":"YulIdentifier","src":"523:6:32"}],"functionName":{"name":"iszero","nativeSrc":"516:6:32","nodeType":"YulIdentifier","src":"516:6:32"},"nativeSrc":"516:14:32","nodeType":"YulFunctionCall","src":"516:14:32"}],"functionName":{"name":"iszero","nativeSrc":"509:6:32","nodeType":"YulIdentifier","src":"509:6:32"},"nativeSrc":"509:22:32","nodeType":"YulFunctionCall","src":"509:22:32"}],"functionName":{"name":"mstore","nativeSrc":"491:6:32","nodeType":"YulIdentifier","src":"491:6:32"},"nativeSrc":"491:41:32","nodeType":"YulFunctionCall","src":"491:41:32"},"nativeSrc":"491:41:32","nodeType":"YulExpressionStatement","src":"491:41:32"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:32","nodeType":"YulTypedName","src":"415:9:32","type":""},{"name":"value0","nativeSrc":"426:6:32","nodeType":"YulTypedName","src":"426:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:32","nodeType":"YulTypedName","src":"437:4:32","type":""}],"src":"351:187:32"},{"body":{"nativeSrc":"627:283:32","nodeType":"YulBlock","src":"627:283:32","statements":[{"body":{"nativeSrc":"676:16:32","nodeType":"YulBlock","src":"676:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"685:1:32","nodeType":"YulLiteral","src":"685:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"688:1:32","nodeType":"YulLiteral","src":"688:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"678:6:32","nodeType":"YulIdentifier","src":"678:6:32"},"nativeSrc":"678:12:32","nodeType":"YulFunctionCall","src":"678:12:32"},"nativeSrc":"678:12:32","nodeType":"YulExpressionStatement","src":"678:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"655:6:32","nodeType":"YulIdentifier","src":"655:6:32"},{"kind":"number","nativeSrc":"663:4:32","nodeType":"YulLiteral","src":"663:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"651:3:32","nodeType":"YulIdentifier","src":"651:3:32"},"nativeSrc":"651:17:32","nodeType":"YulFunctionCall","src":"651:17:32"},{"name":"end","nativeSrc":"670:3:32","nodeType":"YulIdentifier","src":"670:3:32"}],"functionName":{"name":"slt","nativeSrc":"647:3:32","nodeType":"YulIdentifier","src":"647:3:32"},"nativeSrc":"647:27:32","nodeType":"YulFunctionCall","src":"647:27:32"}],"functionName":{"name":"iszero","nativeSrc":"640:6:32","nodeType":"YulIdentifier","src":"640:6:32"},"nativeSrc":"640:35:32","nodeType":"YulFunctionCall","src":"640:35:32"},"nativeSrc":"637:55:32","nodeType":"YulIf","src":"637:55:32"},{"nativeSrc":"701:30:32","nodeType":"YulAssignment","src":"701:30:32","value":{"arguments":[{"name":"offset","nativeSrc":"724:6:32","nodeType":"YulIdentifier","src":"724:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"711:12:32","nodeType":"YulIdentifier","src":"711:12:32"},"nativeSrc":"711:20:32","nodeType":"YulFunctionCall","src":"711:20:32"},"variableNames":[{"name":"length","nativeSrc":"701:6:32","nodeType":"YulIdentifier","src":"701:6:32"}]},{"body":{"nativeSrc":"774:16:32","nodeType":"YulBlock","src":"774:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"783:1:32","nodeType":"YulLiteral","src":"783:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"786:1:32","nodeType":"YulLiteral","src":"786:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"776:6:32","nodeType":"YulIdentifier","src":"776:6:32"},"nativeSrc":"776:12:32","nodeType":"YulFunctionCall","src":"776:12:32"},"nativeSrc":"776:12:32","nodeType":"YulExpressionStatement","src":"776:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"746:6:32","nodeType":"YulIdentifier","src":"746:6:32"},{"kind":"number","nativeSrc":"754:18:32","nodeType":"YulLiteral","src":"754:18:32","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"743:2:32","nodeType":"YulIdentifier","src":"743:2:32"},"nativeSrc":"743:30:32","nodeType":"YulFunctionCall","src":"743:30:32"},"nativeSrc":"740:50:32","nodeType":"YulIf","src":"740:50:32"},{"nativeSrc":"799:29:32","nodeType":"YulAssignment","src":"799:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"815:6:32","nodeType":"YulIdentifier","src":"815:6:32"},{"kind":"number","nativeSrc":"823:4:32","nodeType":"YulLiteral","src":"823:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"811:3:32","nodeType":"YulIdentifier","src":"811:3:32"},"nativeSrc":"811:17:32","nodeType":"YulFunctionCall","src":"811:17:32"},"variableNames":[{"name":"arrayPos","nativeSrc":"799:8:32","nodeType":"YulIdentifier","src":"799:8:32"}]},{"body":{"nativeSrc":"888:16:32","nodeType":"YulBlock","src":"888:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"897:1:32","nodeType":"YulLiteral","src":"897:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"900:1:32","nodeType":"YulLiteral","src":"900:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"890:6:32","nodeType":"YulIdentifier","src":"890:6:32"},"nativeSrc":"890:12:32","nodeType":"YulFunctionCall","src":"890:12:32"},"nativeSrc":"890:12:32","nodeType":"YulExpressionStatement","src":"890:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"851:6:32","nodeType":"YulIdentifier","src":"851:6:32"},{"arguments":[{"kind":"number","nativeSrc":"863:1:32","nodeType":"YulLiteral","src":"863:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"866:6:32","nodeType":"YulIdentifier","src":"866:6:32"}],"functionName":{"name":"shl","nativeSrc":"859:3:32","nodeType":"YulIdentifier","src":"859:3:32"},"nativeSrc":"859:14:32","nodeType":"YulFunctionCall","src":"859:14:32"}],"functionName":{"name":"add","nativeSrc":"847:3:32","nodeType":"YulIdentifier","src":"847:3:32"},"nativeSrc":"847:27:32","nodeType":"YulFunctionCall","src":"847:27:32"},{"kind":"number","nativeSrc":"876:4:32","nodeType":"YulLiteral","src":"876:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"843:3:32","nodeType":"YulIdentifier","src":"843:3:32"},"nativeSrc":"843:38:32","nodeType":"YulFunctionCall","src":"843:38:32"},{"name":"end","nativeSrc":"883:3:32","nodeType":"YulIdentifier","src":"883:3:32"}],"functionName":{"name":"gt","nativeSrc":"840:2:32","nodeType":"YulIdentifier","src":"840:2:32"},"nativeSrc":"840:47:32","nodeType":"YulFunctionCall","src":"840:47:32"},"nativeSrc":"837:67:32","nodeType":"YulIf","src":"837:67:32"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"543:367:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"590:6:32","nodeType":"YulTypedName","src":"590:6:32","type":""},{"name":"end","nativeSrc":"598:3:32","nodeType":"YulTypedName","src":"598:3:32","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"606:8:32","nodeType":"YulTypedName","src":"606:8:32","type":""},{"name":"length","nativeSrc":"616:6:32","nodeType":"YulTypedName","src":"616:6:32","type":""}],"src":"543:367:32"},{"body":{"nativeSrc":"1178:879:32","nodeType":"YulBlock","src":"1178:879:32","statements":[{"body":{"nativeSrc":"1224:16:32","nodeType":"YulBlock","src":"1224:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1233:1:32","nodeType":"YulLiteral","src":"1233:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1236:1:32","nodeType":"YulLiteral","src":"1236:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1226:6:32","nodeType":"YulIdentifier","src":"1226:6:32"},"nativeSrc":"1226:12:32","nodeType":"YulFunctionCall","src":"1226:12:32"},"nativeSrc":"1226:12:32","nodeType":"YulExpressionStatement","src":"1226:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1199:7:32","nodeType":"YulIdentifier","src":"1199:7:32"},{"name":"headStart","nativeSrc":"1208:9:32","nodeType":"YulIdentifier","src":"1208:9:32"}],"functionName":{"name":"sub","nativeSrc":"1195:3:32","nodeType":"YulIdentifier","src":"1195:3:32"},"nativeSrc":"1195:23:32","nodeType":"YulFunctionCall","src":"1195:23:32"},{"kind":"number","nativeSrc":"1220:2:32","nodeType":"YulLiteral","src":"1220:2:32","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"1191:3:32","nodeType":"YulIdentifier","src":"1191:3:32"},"nativeSrc":"1191:32:32","nodeType":"YulFunctionCall","src":"1191:32:32"},"nativeSrc":"1188:52:32","nodeType":"YulIf","src":"1188:52:32"},{"nativeSrc":"1249:37:32","nodeType":"YulVariableDeclaration","src":"1249:37:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1276:9:32","nodeType":"YulIdentifier","src":"1276:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"1263:12:32","nodeType":"YulIdentifier","src":"1263:12:32"},"nativeSrc":"1263:23:32","nodeType":"YulFunctionCall","src":"1263:23:32"},"variables":[{"name":"offset","nativeSrc":"1253:6:32","nodeType":"YulTypedName","src":"1253:6:32","type":""}]},{"nativeSrc":"1295:28:32","nodeType":"YulVariableDeclaration","src":"1295:28:32","value":{"kind":"number","nativeSrc":"1305:18:32","nodeType":"YulLiteral","src":"1305:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1299:2:32","nodeType":"YulTypedName","src":"1299:2:32","type":""}]},{"body":{"nativeSrc":"1350:16:32","nodeType":"YulBlock","src":"1350:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1359:1:32","nodeType":"YulLiteral","src":"1359:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1362:1:32","nodeType":"YulLiteral","src":"1362:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1352:6:32","nodeType":"YulIdentifier","src":"1352:6:32"},"nativeSrc":"1352:12:32","nodeType":"YulFunctionCall","src":"1352:12:32"},"nativeSrc":"1352:12:32","nodeType":"YulExpressionStatement","src":"1352:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1338:6:32","nodeType":"YulIdentifier","src":"1338:6:32"},{"name":"_1","nativeSrc":"1346:2:32","nodeType":"YulIdentifier","src":"1346:2:32"}],"functionName":{"name":"gt","nativeSrc":"1335:2:32","nodeType":"YulIdentifier","src":"1335:2:32"},"nativeSrc":"1335:14:32","nodeType":"YulFunctionCall","src":"1335:14:32"},"nativeSrc":"1332:34:32","nodeType":"YulIf","src":"1332:34:32"},{"nativeSrc":"1375:96:32","nodeType":"YulVariableDeclaration","src":"1375:96:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1443:9:32","nodeType":"YulIdentifier","src":"1443:9:32"},{"name":"offset","nativeSrc":"1454:6:32","nodeType":"YulIdentifier","src":"1454:6:32"}],"functionName":{"name":"add","nativeSrc":"1439:3:32","nodeType":"YulIdentifier","src":"1439:3:32"},"nativeSrc":"1439:22:32","nodeType":"YulFunctionCall","src":"1439:22:32"},{"name":"dataEnd","nativeSrc":"1463:7:32","nodeType":"YulIdentifier","src":"1463:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1401:37:32","nodeType":"YulIdentifier","src":"1401:37:32"},"nativeSrc":"1401:70:32","nodeType":"YulFunctionCall","src":"1401:70:32"},"variables":[{"name":"value0_1","nativeSrc":"1379:8:32","nodeType":"YulTypedName","src":"1379:8:32","type":""},{"name":"value1_1","nativeSrc":"1389:8:32","nodeType":"YulTypedName","src":"1389:8:32","type":""}]},{"nativeSrc":"1480:18:32","nodeType":"YulAssignment","src":"1480:18:32","value":{"name":"value0_1","nativeSrc":"1490:8:32","nodeType":"YulIdentifier","src":"1490:8:32"},"variableNames":[{"name":"value0","nativeSrc":"1480:6:32","nodeType":"YulIdentifier","src":"1480:6:32"}]},{"nativeSrc":"1507:18:32","nodeType":"YulAssignment","src":"1507:18:32","value":{"name":"value1_1","nativeSrc":"1517:8:32","nodeType":"YulIdentifier","src":"1517:8:32"},"variableNames":[{"name":"value1","nativeSrc":"1507:6:32","nodeType":"YulIdentifier","src":"1507:6:32"}]},{"nativeSrc":"1534:48:32","nodeType":"YulVariableDeclaration","src":"1534:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1567:9:32","nodeType":"YulIdentifier","src":"1567:9:32"},{"kind":"number","nativeSrc":"1578:2:32","nodeType":"YulLiteral","src":"1578:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1563:3:32","nodeType":"YulIdentifier","src":"1563:3:32"},"nativeSrc":"1563:18:32","nodeType":"YulFunctionCall","src":"1563:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"1550:12:32","nodeType":"YulIdentifier","src":"1550:12:32"},"nativeSrc":"1550:32:32","nodeType":"YulFunctionCall","src":"1550:32:32"},"variables":[{"name":"offset_1","nativeSrc":"1538:8:32","nodeType":"YulTypedName","src":"1538:8:32","type":""}]},{"body":{"nativeSrc":"1611:16:32","nodeType":"YulBlock","src":"1611:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1620:1:32","nodeType":"YulLiteral","src":"1620:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1623:1:32","nodeType":"YulLiteral","src":"1623:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1613:6:32","nodeType":"YulIdentifier","src":"1613:6:32"},"nativeSrc":"1613:12:32","nodeType":"YulFunctionCall","src":"1613:12:32"},"nativeSrc":"1613:12:32","nodeType":"YulExpressionStatement","src":"1613:12:32"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1597:8:32","nodeType":"YulIdentifier","src":"1597:8:32"},{"name":"_1","nativeSrc":"1607:2:32","nodeType":"YulIdentifier","src":"1607:2:32"}],"functionName":{"name":"gt","nativeSrc":"1594:2:32","nodeType":"YulIdentifier","src":"1594:2:32"},"nativeSrc":"1594:16:32","nodeType":"YulFunctionCall","src":"1594:16:32"},"nativeSrc":"1591:36:32","nodeType":"YulIf","src":"1591:36:32"},{"nativeSrc":"1636:98:32","nodeType":"YulVariableDeclaration","src":"1636:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1704:9:32","nodeType":"YulIdentifier","src":"1704:9:32"},{"name":"offset_1","nativeSrc":"1715:8:32","nodeType":"YulIdentifier","src":"1715:8:32"}],"functionName":{"name":"add","nativeSrc":"1700:3:32","nodeType":"YulIdentifier","src":"1700:3:32"},"nativeSrc":"1700:24:32","nodeType":"YulFunctionCall","src":"1700:24:32"},{"name":"dataEnd","nativeSrc":"1726:7:32","nodeType":"YulIdentifier","src":"1726:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1662:37:32","nodeType":"YulIdentifier","src":"1662:37:32"},"nativeSrc":"1662:72:32","nodeType":"YulFunctionCall","src":"1662:72:32"},"variables":[{"name":"value2_1","nativeSrc":"1640:8:32","nodeType":"YulTypedName","src":"1640:8:32","type":""},{"name":"value3_1","nativeSrc":"1650:8:32","nodeType":"YulTypedName","src":"1650:8:32","type":""}]},{"nativeSrc":"1743:18:32","nodeType":"YulAssignment","src":"1743:18:32","value":{"name":"value2_1","nativeSrc":"1753:8:32","nodeType":"YulIdentifier","src":"1753:8:32"},"variableNames":[{"name":"value2","nativeSrc":"1743:6:32","nodeType":"YulIdentifier","src":"1743:6:32"}]},{"nativeSrc":"1770:18:32","nodeType":"YulAssignment","src":"1770:18:32","value":{"name":"value3_1","nativeSrc":"1780:8:32","nodeType":"YulIdentifier","src":"1780:8:32"},"variableNames":[{"name":"value3","nativeSrc":"1770:6:32","nodeType":"YulIdentifier","src":"1770:6:32"}]},{"nativeSrc":"1797:48:32","nodeType":"YulVariableDeclaration","src":"1797:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1830:9:32","nodeType":"YulIdentifier","src":"1830:9:32"},{"kind":"number","nativeSrc":"1841:2:32","nodeType":"YulLiteral","src":"1841:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1826:3:32","nodeType":"YulIdentifier","src":"1826:3:32"},"nativeSrc":"1826:18:32","nodeType":"YulFunctionCall","src":"1826:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"1813:12:32","nodeType":"YulIdentifier","src":"1813:12:32"},"nativeSrc":"1813:32:32","nodeType":"YulFunctionCall","src":"1813:32:32"},"variables":[{"name":"offset_2","nativeSrc":"1801:8:32","nodeType":"YulTypedName","src":"1801:8:32","type":""}]},{"body":{"nativeSrc":"1874:16:32","nodeType":"YulBlock","src":"1874:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1883:1:32","nodeType":"YulLiteral","src":"1883:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1886:1:32","nodeType":"YulLiteral","src":"1886:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1876:6:32","nodeType":"YulIdentifier","src":"1876:6:32"},"nativeSrc":"1876:12:32","nodeType":"YulFunctionCall","src":"1876:12:32"},"nativeSrc":"1876:12:32","nodeType":"YulExpressionStatement","src":"1876:12:32"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"1860:8:32","nodeType":"YulIdentifier","src":"1860:8:32"},{"name":"_1","nativeSrc":"1870:2:32","nodeType":"YulIdentifier","src":"1870:2:32"}],"functionName":{"name":"gt","nativeSrc":"1857:2:32","nodeType":"YulIdentifier","src":"1857:2:32"},"nativeSrc":"1857:16:32","nodeType":"YulFunctionCall","src":"1857:16:32"},"nativeSrc":"1854:36:32","nodeType":"YulIf","src":"1854:36:32"},{"nativeSrc":"1899:98:32","nodeType":"YulVariableDeclaration","src":"1899:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1967:9:32","nodeType":"YulIdentifier","src":"1967:9:32"},{"name":"offset_2","nativeSrc":"1978:8:32","nodeType":"YulIdentifier","src":"1978:8:32"}],"functionName":{"name":"add","nativeSrc":"1963:3:32","nodeType":"YulIdentifier","src":"1963:3:32"},"nativeSrc":"1963:24:32","nodeType":"YulFunctionCall","src":"1963:24:32"},{"name":"dataEnd","nativeSrc":"1989:7:32","nodeType":"YulIdentifier","src":"1989:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1925:37:32","nodeType":"YulIdentifier","src":"1925:37:32"},"nativeSrc":"1925:72:32","nodeType":"YulFunctionCall","src":"1925:72:32"},"variables":[{"name":"value4_1","nativeSrc":"1903:8:32","nodeType":"YulTypedName","src":"1903:8:32","type":""},{"name":"value5_1","nativeSrc":"1913:8:32","nodeType":"YulTypedName","src":"1913:8:32","type":""}]},{"nativeSrc":"2006:18:32","nodeType":"YulAssignment","src":"2006:18:32","value":{"name":"value4_1","nativeSrc":"2016:8:32","nodeType":"YulIdentifier","src":"2016:8:32"},"variableNames":[{"name":"value4","nativeSrc":"2006:6:32","nodeType":"YulIdentifier","src":"2006:6:32"}]},{"nativeSrc":"2033:18:32","nodeType":"YulAssignment","src":"2033:18:32","value":{"name":"value5_1","nativeSrc":"2043:8:32","nodeType":"YulIdentifier","src":"2043:8:32"},"variableNames":[{"name":"value5","nativeSrc":"2033:6:32","nodeType":"YulIdentifier","src":"2033:6:32"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","nativeSrc":"915:1142:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1104:9:32","nodeType":"YulTypedName","src":"1104:9:32","type":""},{"name":"dataEnd","nativeSrc":"1115:7:32","nodeType":"YulTypedName","src":"1115:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1127:6:32","nodeType":"YulTypedName","src":"1127:6:32","type":""},{"name":"value1","nativeSrc":"1135:6:32","nodeType":"YulTypedName","src":"1135:6:32","type":""},{"name":"value2","nativeSrc":"1143:6:32","nodeType":"YulTypedName","src":"1143:6:32","type":""},{"name":"value3","nativeSrc":"1151:6:32","nodeType":"YulTypedName","src":"1151:6:32","type":""},{"name":"value4","nativeSrc":"1159:6:32","nodeType":"YulTypedName","src":"1159:6:32","type":""},{"name":"value5","nativeSrc":"1167:6:32","nodeType":"YulTypedName","src":"1167:6:32","type":""}],"src":"915:1142:32"},{"body":{"nativeSrc":"2107:109:32","nodeType":"YulBlock","src":"2107:109:32","statements":[{"body":{"nativeSrc":"2194:16:32","nodeType":"YulBlock","src":"2194:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2203:1:32","nodeType":"YulLiteral","src":"2203:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2206:1:32","nodeType":"YulLiteral","src":"2206:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2196:6:32","nodeType":"YulIdentifier","src":"2196:6:32"},"nativeSrc":"2196:12:32","nodeType":"YulFunctionCall","src":"2196:12:32"},"nativeSrc":"2196:12:32","nodeType":"YulExpressionStatement","src":"2196:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2130:5:32","nodeType":"YulIdentifier","src":"2130:5:32"},{"arguments":[{"name":"value","nativeSrc":"2141:5:32","nodeType":"YulIdentifier","src":"2141:5:32"},{"kind":"number","nativeSrc":"2148:42:32","nodeType":"YulLiteral","src":"2148:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2137:3:32","nodeType":"YulIdentifier","src":"2137:3:32"},"nativeSrc":"2137:54:32","nodeType":"YulFunctionCall","src":"2137:54:32"}],"functionName":{"name":"eq","nativeSrc":"2127:2:32","nodeType":"YulIdentifier","src":"2127:2:32"},"nativeSrc":"2127:65:32","nodeType":"YulFunctionCall","src":"2127:65:32"}],"functionName":{"name":"iszero","nativeSrc":"2120:6:32","nodeType":"YulIdentifier","src":"2120:6:32"},"nativeSrc":"2120:73:32","nodeType":"YulFunctionCall","src":"2120:73:32"},"nativeSrc":"2117:93:32","nodeType":"YulIf","src":"2117:93:32"}]},"name":"validator_revert_address","nativeSrc":"2062:154:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2096:5:32","nodeType":"YulTypedName","src":"2096:5:32","type":""}],"src":"2062:154:32"},{"body":{"nativeSrc":"2291:177:32","nodeType":"YulBlock","src":"2291:177:32","statements":[{"body":{"nativeSrc":"2337:16:32","nodeType":"YulBlock","src":"2337:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2346:1:32","nodeType":"YulLiteral","src":"2346:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2349:1:32","nodeType":"YulLiteral","src":"2349:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2339:6:32","nodeType":"YulIdentifier","src":"2339:6:32"},"nativeSrc":"2339:12:32","nodeType":"YulFunctionCall","src":"2339:12:32"},"nativeSrc":"2339:12:32","nodeType":"YulExpressionStatement","src":"2339:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2312:7:32","nodeType":"YulIdentifier","src":"2312:7:32"},{"name":"headStart","nativeSrc":"2321:9:32","nodeType":"YulIdentifier","src":"2321:9:32"}],"functionName":{"name":"sub","nativeSrc":"2308:3:32","nodeType":"YulIdentifier","src":"2308:3:32"},"nativeSrc":"2308:23:32","nodeType":"YulFunctionCall","src":"2308:23:32"},{"kind":"number","nativeSrc":"2333:2:32","nodeType":"YulLiteral","src":"2333:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2304:3:32","nodeType":"YulIdentifier","src":"2304:3:32"},"nativeSrc":"2304:32:32","nodeType":"YulFunctionCall","src":"2304:32:32"},"nativeSrc":"2301:52:32","nodeType":"YulIf","src":"2301:52:32"},{"nativeSrc":"2362:36:32","nodeType":"YulVariableDeclaration","src":"2362:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2388:9:32","nodeType":"YulIdentifier","src":"2388:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"2375:12:32","nodeType":"YulIdentifier","src":"2375:12:32"},"nativeSrc":"2375:23:32","nodeType":"YulFunctionCall","src":"2375:23:32"},"variables":[{"name":"value","nativeSrc":"2366:5:32","nodeType":"YulTypedName","src":"2366:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2432:5:32","nodeType":"YulIdentifier","src":"2432:5:32"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2407:24:32","nodeType":"YulIdentifier","src":"2407:24:32"},"nativeSrc":"2407:31:32","nodeType":"YulFunctionCall","src":"2407:31:32"},"nativeSrc":"2407:31:32","nodeType":"YulExpressionStatement","src":"2407:31:32"},{"nativeSrc":"2447:15:32","nodeType":"YulAssignment","src":"2447:15:32","value":{"name":"value","nativeSrc":"2457:5:32","nodeType":"YulIdentifier","src":"2457:5:32"},"variableNames":[{"name":"value0","nativeSrc":"2447:6:32","nodeType":"YulIdentifier","src":"2447:6:32"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2221:247:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2257:9:32","nodeType":"YulTypedName","src":"2257:9:32","type":""},{"name":"dataEnd","nativeSrc":"2268:7:32","nodeType":"YulTypedName","src":"2268:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2280:6:32","nodeType":"YulTypedName","src":"2280:6:32","type":""}],"src":"2221:247:32"},{"body":{"nativeSrc":"2600:125:32","nodeType":"YulBlock","src":"2600:125:32","statements":[{"nativeSrc":"2610:26:32","nodeType":"YulAssignment","src":"2610:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2622:9:32","nodeType":"YulIdentifier","src":"2622:9:32"},{"kind":"number","nativeSrc":"2633:2:32","nodeType":"YulLiteral","src":"2633:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2618:3:32","nodeType":"YulIdentifier","src":"2618:3:32"},"nativeSrc":"2618:18:32","nodeType":"YulFunctionCall","src":"2618:18:32"},"variableNames":[{"name":"tail","nativeSrc":"2610:4:32","nodeType":"YulIdentifier","src":"2610:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2652:9:32","nodeType":"YulIdentifier","src":"2652:9:32"},{"arguments":[{"name":"value0","nativeSrc":"2667:6:32","nodeType":"YulIdentifier","src":"2667:6:32"},{"kind":"number","nativeSrc":"2675:42:32","nodeType":"YulLiteral","src":"2675:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2663:3:32","nodeType":"YulIdentifier","src":"2663:3:32"},"nativeSrc":"2663:55:32","nodeType":"YulFunctionCall","src":"2663:55:32"}],"functionName":{"name":"mstore","nativeSrc":"2645:6:32","nodeType":"YulIdentifier","src":"2645:6:32"},"nativeSrc":"2645:74:32","nodeType":"YulFunctionCall","src":"2645:74:32"},"nativeSrc":"2645:74:32","nodeType":"YulExpressionStatement","src":"2645:74:32"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"2473:252:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2569:9:32","nodeType":"YulTypedName","src":"2569:9:32","type":""},{"name":"value0","nativeSrc":"2580:6:32","nodeType":"YulTypedName","src":"2580:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2591:4:32","nodeType":"YulTypedName","src":"2591:4:32","type":""}],"src":"2473:252:32"},{"body":{"nativeSrc":"2831:125:32","nodeType":"YulBlock","src":"2831:125:32","statements":[{"nativeSrc":"2841:26:32","nodeType":"YulAssignment","src":"2841:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2853:9:32","nodeType":"YulIdentifier","src":"2853:9:32"},{"kind":"number","nativeSrc":"2864:2:32","nodeType":"YulLiteral","src":"2864:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2849:3:32","nodeType":"YulIdentifier","src":"2849:3:32"},"nativeSrc":"2849:18:32","nodeType":"YulFunctionCall","src":"2849:18:32"},"variableNames":[{"name":"tail","nativeSrc":"2841:4:32","nodeType":"YulIdentifier","src":"2841:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2883:9:32","nodeType":"YulIdentifier","src":"2883:9:32"},{"arguments":[{"name":"value0","nativeSrc":"2898:6:32","nodeType":"YulIdentifier","src":"2898:6:32"},{"kind":"number","nativeSrc":"2906:42:32","nodeType":"YulLiteral","src":"2906:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2894:3:32","nodeType":"YulIdentifier","src":"2894:3:32"},"nativeSrc":"2894:55:32","nodeType":"YulFunctionCall","src":"2894:55:32"}],"functionName":{"name":"mstore","nativeSrc":"2876:6:32","nodeType":"YulIdentifier","src":"2876:6:32"},"nativeSrc":"2876:74:32","nodeType":"YulFunctionCall","src":"2876:74:32"},"nativeSrc":"2876:74:32","nodeType":"YulExpressionStatement","src":"2876:74:32"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2730:226:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2800:9:32","nodeType":"YulTypedName","src":"2800:9:32","type":""},{"name":"value0","nativeSrc":"2811:6:32","nodeType":"YulTypedName","src":"2811:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2822:4:32","nodeType":"YulTypedName","src":"2822:4:32","type":""}],"src":"2730:226:32"},{"body":{"nativeSrc":"3139:616:32","nodeType":"YulBlock","src":"3139:616:32","statements":[{"body":{"nativeSrc":"3185:16:32","nodeType":"YulBlock","src":"3185:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3194:1:32","nodeType":"YulLiteral","src":"3194:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3197:1:32","nodeType":"YulLiteral","src":"3197:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3187:6:32","nodeType":"YulIdentifier","src":"3187:6:32"},"nativeSrc":"3187:12:32","nodeType":"YulFunctionCall","src":"3187:12:32"},"nativeSrc":"3187:12:32","nodeType":"YulExpressionStatement","src":"3187:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3160:7:32","nodeType":"YulIdentifier","src":"3160:7:32"},{"name":"headStart","nativeSrc":"3169:9:32","nodeType":"YulIdentifier","src":"3169:9:32"}],"functionName":{"name":"sub","nativeSrc":"3156:3:32","nodeType":"YulIdentifier","src":"3156:3:32"},"nativeSrc":"3156:23:32","nodeType":"YulFunctionCall","src":"3156:23:32"},{"kind":"number","nativeSrc":"3181:2:32","nodeType":"YulLiteral","src":"3181:2:32","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3152:3:32","nodeType":"YulIdentifier","src":"3152:3:32"},"nativeSrc":"3152:32:32","nodeType":"YulFunctionCall","src":"3152:32:32"},"nativeSrc":"3149:52:32","nodeType":"YulIf","src":"3149:52:32"},{"nativeSrc":"3210:37:32","nodeType":"YulVariableDeclaration","src":"3210:37:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3237:9:32","nodeType":"YulIdentifier","src":"3237:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"3224:12:32","nodeType":"YulIdentifier","src":"3224:12:32"},"nativeSrc":"3224:23:32","nodeType":"YulFunctionCall","src":"3224:23:32"},"variables":[{"name":"offset","nativeSrc":"3214:6:32","nodeType":"YulTypedName","src":"3214:6:32","type":""}]},{"nativeSrc":"3256:28:32","nodeType":"YulVariableDeclaration","src":"3256:28:32","value":{"kind":"number","nativeSrc":"3266:18:32","nodeType":"YulLiteral","src":"3266:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3260:2:32","nodeType":"YulTypedName","src":"3260:2:32","type":""}]},{"body":{"nativeSrc":"3311:16:32","nodeType":"YulBlock","src":"3311:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3320:1:32","nodeType":"YulLiteral","src":"3320:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3323:1:32","nodeType":"YulLiteral","src":"3323:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3313:6:32","nodeType":"YulIdentifier","src":"3313:6:32"},"nativeSrc":"3313:12:32","nodeType":"YulFunctionCall","src":"3313:12:32"},"nativeSrc":"3313:12:32","nodeType":"YulExpressionStatement","src":"3313:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3299:6:32","nodeType":"YulIdentifier","src":"3299:6:32"},{"name":"_1","nativeSrc":"3307:2:32","nodeType":"YulIdentifier","src":"3307:2:32"}],"functionName":{"name":"gt","nativeSrc":"3296:2:32","nodeType":"YulIdentifier","src":"3296:2:32"},"nativeSrc":"3296:14:32","nodeType":"YulFunctionCall","src":"3296:14:32"},"nativeSrc":"3293:34:32","nodeType":"YulIf","src":"3293:34:32"},{"nativeSrc":"3336:96:32","nodeType":"YulVariableDeclaration","src":"3336:96:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3404:9:32","nodeType":"YulIdentifier","src":"3404:9:32"},{"name":"offset","nativeSrc":"3415:6:32","nodeType":"YulIdentifier","src":"3415:6:32"}],"functionName":{"name":"add","nativeSrc":"3400:3:32","nodeType":"YulIdentifier","src":"3400:3:32"},"nativeSrc":"3400:22:32","nodeType":"YulFunctionCall","src":"3400:22:32"},{"name":"dataEnd","nativeSrc":"3424:7:32","nodeType":"YulIdentifier","src":"3424:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3362:37:32","nodeType":"YulIdentifier","src":"3362:37:32"},"nativeSrc":"3362:70:32","nodeType":"YulFunctionCall","src":"3362:70:32"},"variables":[{"name":"value0_1","nativeSrc":"3340:8:32","nodeType":"YulTypedName","src":"3340:8:32","type":""},{"name":"value1_1","nativeSrc":"3350:8:32","nodeType":"YulTypedName","src":"3350:8:32","type":""}]},{"nativeSrc":"3441:18:32","nodeType":"YulAssignment","src":"3441:18:32","value":{"name":"value0_1","nativeSrc":"3451:8:32","nodeType":"YulIdentifier","src":"3451:8:32"},"variableNames":[{"name":"value0","nativeSrc":"3441:6:32","nodeType":"YulIdentifier","src":"3441:6:32"}]},{"nativeSrc":"3468:18:32","nodeType":"YulAssignment","src":"3468:18:32","value":{"name":"value1_1","nativeSrc":"3478:8:32","nodeType":"YulIdentifier","src":"3478:8:32"},"variableNames":[{"name":"value1","nativeSrc":"3468:6:32","nodeType":"YulIdentifier","src":"3468:6:32"}]},{"nativeSrc":"3495:48:32","nodeType":"YulVariableDeclaration","src":"3495:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3528:9:32","nodeType":"YulIdentifier","src":"3528:9:32"},{"kind":"number","nativeSrc":"3539:2:32","nodeType":"YulLiteral","src":"3539:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3524:3:32","nodeType":"YulIdentifier","src":"3524:3:32"},"nativeSrc":"3524:18:32","nodeType":"YulFunctionCall","src":"3524:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"3511:12:32","nodeType":"YulIdentifier","src":"3511:12:32"},"nativeSrc":"3511:32:32","nodeType":"YulFunctionCall","src":"3511:32:32"},"variables":[{"name":"offset_1","nativeSrc":"3499:8:32","nodeType":"YulTypedName","src":"3499:8:32","type":""}]},{"body":{"nativeSrc":"3572:16:32","nodeType":"YulBlock","src":"3572:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3581:1:32","nodeType":"YulLiteral","src":"3581:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3584:1:32","nodeType":"YulLiteral","src":"3584:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3574:6:32","nodeType":"YulIdentifier","src":"3574:6:32"},"nativeSrc":"3574:12:32","nodeType":"YulFunctionCall","src":"3574:12:32"},"nativeSrc":"3574:12:32","nodeType":"YulExpressionStatement","src":"3574:12:32"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3558:8:32","nodeType":"YulIdentifier","src":"3558:8:32"},{"name":"_1","nativeSrc":"3568:2:32","nodeType":"YulIdentifier","src":"3568:2:32"}],"functionName":{"name":"gt","nativeSrc":"3555:2:32","nodeType":"YulIdentifier","src":"3555:2:32"},"nativeSrc":"3555:16:32","nodeType":"YulFunctionCall","src":"3555:16:32"},"nativeSrc":"3552:36:32","nodeType":"YulIf","src":"3552:36:32"},{"nativeSrc":"3597:98:32","nodeType":"YulVariableDeclaration","src":"3597:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3665:9:32","nodeType":"YulIdentifier","src":"3665:9:32"},{"name":"offset_1","nativeSrc":"3676:8:32","nodeType":"YulIdentifier","src":"3676:8:32"}],"functionName":{"name":"add","nativeSrc":"3661:3:32","nodeType":"YulIdentifier","src":"3661:3:32"},"nativeSrc":"3661:24:32","nodeType":"YulFunctionCall","src":"3661:24:32"},{"name":"dataEnd","nativeSrc":"3687:7:32","nodeType":"YulIdentifier","src":"3687:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3623:37:32","nodeType":"YulIdentifier","src":"3623:37:32"},"nativeSrc":"3623:72:32","nodeType":"YulFunctionCall","src":"3623:72:32"},"variables":[{"name":"value2_1","nativeSrc":"3601:8:32","nodeType":"YulTypedName","src":"3601:8:32","type":""},{"name":"value3_1","nativeSrc":"3611:8:32","nodeType":"YulTypedName","src":"3611:8:32","type":""}]},{"nativeSrc":"3704:18:32","nodeType":"YulAssignment","src":"3704:18:32","value":{"name":"value2_1","nativeSrc":"3714:8:32","nodeType":"YulIdentifier","src":"3714:8:32"},"variableNames":[{"name":"value2","nativeSrc":"3704:6:32","nodeType":"YulIdentifier","src":"3704:6:32"}]},{"nativeSrc":"3731:18:32","nodeType":"YulAssignment","src":"3731:18:32","value":{"name":"value3_1","nativeSrc":"3741:8:32","nodeType":"YulIdentifier","src":"3741:8:32"},"variableNames":[{"name":"value3","nativeSrc":"3731:6:32","nodeType":"YulIdentifier","src":"3731:6:32"}]}]},"name":"abi_decode_tuple_t_array$_t_contract$_IERC1155Burnable_$948_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr","nativeSrc":"2961:794:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3081:9:32","nodeType":"YulTypedName","src":"3081:9:32","type":""},{"name":"dataEnd","nativeSrc":"3092:7:32","nodeType":"YulTypedName","src":"3092:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3104:6:32","nodeType":"YulTypedName","src":"3104:6:32","type":""},{"name":"value1","nativeSrc":"3112:6:32","nodeType":"YulTypedName","src":"3112:6:32","type":""},{"name":"value2","nativeSrc":"3120:6:32","nodeType":"YulTypedName","src":"3120:6:32","type":""},{"name":"value3","nativeSrc":"3128:6:32","nodeType":"YulTypedName","src":"3128:6:32","type":""}],"src":"2961:794:32"},{"body":{"nativeSrc":"4075:1143:32","nodeType":"YulBlock","src":"4075:1143:32","statements":[{"body":{"nativeSrc":"4122:16:32","nodeType":"YulBlock","src":"4122:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4131:1:32","nodeType":"YulLiteral","src":"4131:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4134:1:32","nodeType":"YulLiteral","src":"4134:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4124:6:32","nodeType":"YulIdentifier","src":"4124:6:32"},"nativeSrc":"4124:12:32","nodeType":"YulFunctionCall","src":"4124:12:32"},"nativeSrc":"4124:12:32","nodeType":"YulExpressionStatement","src":"4124:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4096:7:32","nodeType":"YulIdentifier","src":"4096:7:32"},{"name":"headStart","nativeSrc":"4105:9:32","nodeType":"YulIdentifier","src":"4105:9:32"}],"functionName":{"name":"sub","nativeSrc":"4092:3:32","nodeType":"YulIdentifier","src":"4092:3:32"},"nativeSrc":"4092:23:32","nodeType":"YulFunctionCall","src":"4092:23:32"},{"kind":"number","nativeSrc":"4117:3:32","nodeType":"YulLiteral","src":"4117:3:32","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"4088:3:32","nodeType":"YulIdentifier","src":"4088:3:32"},"nativeSrc":"4088:33:32","nodeType":"YulFunctionCall","src":"4088:33:32"},"nativeSrc":"4085:53:32","nodeType":"YulIf","src":"4085:53:32"},{"nativeSrc":"4147:37:32","nodeType":"YulVariableDeclaration","src":"4147:37:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4174:9:32","nodeType":"YulIdentifier","src":"4174:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"4161:12:32","nodeType":"YulIdentifier","src":"4161:12:32"},"nativeSrc":"4161:23:32","nodeType":"YulFunctionCall","src":"4161:23:32"},"variables":[{"name":"offset","nativeSrc":"4151:6:32","nodeType":"YulTypedName","src":"4151:6:32","type":""}]},{"nativeSrc":"4193:28:32","nodeType":"YulVariableDeclaration","src":"4193:28:32","value":{"kind":"number","nativeSrc":"4203:18:32","nodeType":"YulLiteral","src":"4203:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4197:2:32","nodeType":"YulTypedName","src":"4197:2:32","type":""}]},{"body":{"nativeSrc":"4248:16:32","nodeType":"YulBlock","src":"4248:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4257:1:32","nodeType":"YulLiteral","src":"4257:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4260:1:32","nodeType":"YulLiteral","src":"4260:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4250:6:32","nodeType":"YulIdentifier","src":"4250:6:32"},"nativeSrc":"4250:12:32","nodeType":"YulFunctionCall","src":"4250:12:32"},"nativeSrc":"4250:12:32","nodeType":"YulExpressionStatement","src":"4250:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4236:6:32","nodeType":"YulIdentifier","src":"4236:6:32"},{"name":"_1","nativeSrc":"4244:2:32","nodeType":"YulIdentifier","src":"4244:2:32"}],"functionName":{"name":"gt","nativeSrc":"4233:2:32","nodeType":"YulIdentifier","src":"4233:2:32"},"nativeSrc":"4233:14:32","nodeType":"YulFunctionCall","src":"4233:14:32"},"nativeSrc":"4230:34:32","nodeType":"YulIf","src":"4230:34:32"},{"nativeSrc":"4273:96:32","nodeType":"YulVariableDeclaration","src":"4273:96:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4341:9:32","nodeType":"YulIdentifier","src":"4341:9:32"},{"name":"offset","nativeSrc":"4352:6:32","nodeType":"YulIdentifier","src":"4352:6:32"}],"functionName":{"name":"add","nativeSrc":"4337:3:32","nodeType":"YulIdentifier","src":"4337:3:32"},"nativeSrc":"4337:22:32","nodeType":"YulFunctionCall","src":"4337:22:32"},{"name":"dataEnd","nativeSrc":"4361:7:32","nodeType":"YulIdentifier","src":"4361:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4299:37:32","nodeType":"YulIdentifier","src":"4299:37:32"},"nativeSrc":"4299:70:32","nodeType":"YulFunctionCall","src":"4299:70:32"},"variables":[{"name":"value0_1","nativeSrc":"4277:8:32","nodeType":"YulTypedName","src":"4277:8:32","type":""},{"name":"value1_1","nativeSrc":"4287:8:32","nodeType":"YulTypedName","src":"4287:8:32","type":""}]},{"nativeSrc":"4378:18:32","nodeType":"YulAssignment","src":"4378:18:32","value":{"name":"value0_1","nativeSrc":"4388:8:32","nodeType":"YulIdentifier","src":"4388:8:32"},"variableNames":[{"name":"value0","nativeSrc":"4378:6:32","nodeType":"YulIdentifier","src":"4378:6:32"}]},{"nativeSrc":"4405:18:32","nodeType":"YulAssignment","src":"4405:18:32","value":{"name":"value1_1","nativeSrc":"4415:8:32","nodeType":"YulIdentifier","src":"4415:8:32"},"variableNames":[{"name":"value1","nativeSrc":"4405:6:32","nodeType":"YulIdentifier","src":"4405:6:32"}]},{"nativeSrc":"4432:48:32","nodeType":"YulVariableDeclaration","src":"4432:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4465:9:32","nodeType":"YulIdentifier","src":"4465:9:32"},{"kind":"number","nativeSrc":"4476:2:32","nodeType":"YulLiteral","src":"4476:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4461:3:32","nodeType":"YulIdentifier","src":"4461:3:32"},"nativeSrc":"4461:18:32","nodeType":"YulFunctionCall","src":"4461:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"4448:12:32","nodeType":"YulIdentifier","src":"4448:12:32"},"nativeSrc":"4448:32:32","nodeType":"YulFunctionCall","src":"4448:32:32"},"variables":[{"name":"offset_1","nativeSrc":"4436:8:32","nodeType":"YulTypedName","src":"4436:8:32","type":""}]},{"body":{"nativeSrc":"4509:16:32","nodeType":"YulBlock","src":"4509:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4518:1:32","nodeType":"YulLiteral","src":"4518:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4521:1:32","nodeType":"YulLiteral","src":"4521:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4511:6:32","nodeType":"YulIdentifier","src":"4511:6:32"},"nativeSrc":"4511:12:32","nodeType":"YulFunctionCall","src":"4511:12:32"},"nativeSrc":"4511:12:32","nodeType":"YulExpressionStatement","src":"4511:12:32"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4495:8:32","nodeType":"YulIdentifier","src":"4495:8:32"},{"name":"_1","nativeSrc":"4505:2:32","nodeType":"YulIdentifier","src":"4505:2:32"}],"functionName":{"name":"gt","nativeSrc":"4492:2:32","nodeType":"YulIdentifier","src":"4492:2:32"},"nativeSrc":"4492:16:32","nodeType":"YulFunctionCall","src":"4492:16:32"},"nativeSrc":"4489:36:32","nodeType":"YulIf","src":"4489:36:32"},{"nativeSrc":"4534:98:32","nodeType":"YulVariableDeclaration","src":"4534:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4602:9:32","nodeType":"YulIdentifier","src":"4602:9:32"},{"name":"offset_1","nativeSrc":"4613:8:32","nodeType":"YulIdentifier","src":"4613:8:32"}],"functionName":{"name":"add","nativeSrc":"4598:3:32","nodeType":"YulIdentifier","src":"4598:3:32"},"nativeSrc":"4598:24:32","nodeType":"YulFunctionCall","src":"4598:24:32"},{"name":"dataEnd","nativeSrc":"4624:7:32","nodeType":"YulIdentifier","src":"4624:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4560:37:32","nodeType":"YulIdentifier","src":"4560:37:32"},"nativeSrc":"4560:72:32","nodeType":"YulFunctionCall","src":"4560:72:32"},"variables":[{"name":"value2_1","nativeSrc":"4538:8:32","nodeType":"YulTypedName","src":"4538:8:32","type":""},{"name":"value3_1","nativeSrc":"4548:8:32","nodeType":"YulTypedName","src":"4548:8:32","type":""}]},{"nativeSrc":"4641:18:32","nodeType":"YulAssignment","src":"4641:18:32","value":{"name":"value2_1","nativeSrc":"4651:8:32","nodeType":"YulIdentifier","src":"4651:8:32"},"variableNames":[{"name":"value2","nativeSrc":"4641:6:32","nodeType":"YulIdentifier","src":"4641:6:32"}]},{"nativeSrc":"4668:18:32","nodeType":"YulAssignment","src":"4668:18:32","value":{"name":"value3_1","nativeSrc":"4678:8:32","nodeType":"YulIdentifier","src":"4678:8:32"},"variableNames":[{"name":"value3","nativeSrc":"4668:6:32","nodeType":"YulIdentifier","src":"4668:6:32"}]},{"nativeSrc":"4695:48:32","nodeType":"YulVariableDeclaration","src":"4695:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4728:9:32","nodeType":"YulIdentifier","src":"4728:9:32"},{"kind":"number","nativeSrc":"4739:2:32","nodeType":"YulLiteral","src":"4739:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4724:3:32","nodeType":"YulIdentifier","src":"4724:3:32"},"nativeSrc":"4724:18:32","nodeType":"YulFunctionCall","src":"4724:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"4711:12:32","nodeType":"YulIdentifier","src":"4711:12:32"},"nativeSrc":"4711:32:32","nodeType":"YulFunctionCall","src":"4711:32:32"},"variables":[{"name":"offset_2","nativeSrc":"4699:8:32","nodeType":"YulTypedName","src":"4699:8:32","type":""}]},{"body":{"nativeSrc":"4772:16:32","nodeType":"YulBlock","src":"4772:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4781:1:32","nodeType":"YulLiteral","src":"4781:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4784:1:32","nodeType":"YulLiteral","src":"4784:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4774:6:32","nodeType":"YulIdentifier","src":"4774:6:32"},"nativeSrc":"4774:12:32","nodeType":"YulFunctionCall","src":"4774:12:32"},"nativeSrc":"4774:12:32","nodeType":"YulExpressionStatement","src":"4774:12:32"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4758:8:32","nodeType":"YulIdentifier","src":"4758:8:32"},{"name":"_1","nativeSrc":"4768:2:32","nodeType":"YulIdentifier","src":"4768:2:32"}],"functionName":{"name":"gt","nativeSrc":"4755:2:32","nodeType":"YulIdentifier","src":"4755:2:32"},"nativeSrc":"4755:16:32","nodeType":"YulFunctionCall","src":"4755:16:32"},"nativeSrc":"4752:36:32","nodeType":"YulIf","src":"4752:36:32"},{"nativeSrc":"4797:98:32","nodeType":"YulVariableDeclaration","src":"4797:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4865:9:32","nodeType":"YulIdentifier","src":"4865:9:32"},{"name":"offset_2","nativeSrc":"4876:8:32","nodeType":"YulIdentifier","src":"4876:8:32"}],"functionName":{"name":"add","nativeSrc":"4861:3:32","nodeType":"YulIdentifier","src":"4861:3:32"},"nativeSrc":"4861:24:32","nodeType":"YulFunctionCall","src":"4861:24:32"},{"name":"dataEnd","nativeSrc":"4887:7:32","nodeType":"YulIdentifier","src":"4887:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4823:37:32","nodeType":"YulIdentifier","src":"4823:37:32"},"nativeSrc":"4823:72:32","nodeType":"YulFunctionCall","src":"4823:72:32"},"variables":[{"name":"value4_1","nativeSrc":"4801:8:32","nodeType":"YulTypedName","src":"4801:8:32","type":""},{"name":"value5_1","nativeSrc":"4811:8:32","nodeType":"YulTypedName","src":"4811:8:32","type":""}]},{"nativeSrc":"4904:18:32","nodeType":"YulAssignment","src":"4904:18:32","value":{"name":"value4_1","nativeSrc":"4914:8:32","nodeType":"YulIdentifier","src":"4914:8:32"},"variableNames":[{"name":"value4","nativeSrc":"4904:6:32","nodeType":"YulIdentifier","src":"4904:6:32"}]},{"nativeSrc":"4931:18:32","nodeType":"YulAssignment","src":"4931:18:32","value":{"name":"value5_1","nativeSrc":"4941:8:32","nodeType":"YulIdentifier","src":"4941:8:32"},"variableNames":[{"name":"value5","nativeSrc":"4931:6:32","nodeType":"YulIdentifier","src":"4931:6:32"}]},{"nativeSrc":"4958:48:32","nodeType":"YulVariableDeclaration","src":"4958:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4991:9:32","nodeType":"YulIdentifier","src":"4991:9:32"},{"kind":"number","nativeSrc":"5002:2:32","nodeType":"YulLiteral","src":"5002:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4987:3:32","nodeType":"YulIdentifier","src":"4987:3:32"},"nativeSrc":"4987:18:32","nodeType":"YulFunctionCall","src":"4987:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"4974:12:32","nodeType":"YulIdentifier","src":"4974:12:32"},"nativeSrc":"4974:32:32","nodeType":"YulFunctionCall","src":"4974:32:32"},"variables":[{"name":"offset_3","nativeSrc":"4962:8:32","nodeType":"YulTypedName","src":"4962:8:32","type":""}]},{"body":{"nativeSrc":"5035:16:32","nodeType":"YulBlock","src":"5035:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5044:1:32","nodeType":"YulLiteral","src":"5044:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5047:1:32","nodeType":"YulLiteral","src":"5047:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5037:6:32","nodeType":"YulIdentifier","src":"5037:6:32"},"nativeSrc":"5037:12:32","nodeType":"YulFunctionCall","src":"5037:12:32"},"nativeSrc":"5037:12:32","nodeType":"YulExpressionStatement","src":"5037:12:32"}]},"condition":{"arguments":[{"name":"offset_3","nativeSrc":"5021:8:32","nodeType":"YulIdentifier","src":"5021:8:32"},{"name":"_1","nativeSrc":"5031:2:32","nodeType":"YulIdentifier","src":"5031:2:32"}],"functionName":{"name":"gt","nativeSrc":"5018:2:32","nodeType":"YulIdentifier","src":"5018:2:32"},"nativeSrc":"5018:16:32","nodeType":"YulFunctionCall","src":"5018:16:32"},"nativeSrc":"5015:36:32","nodeType":"YulIf","src":"5015:36:32"},{"nativeSrc":"5060:98:32","nodeType":"YulVariableDeclaration","src":"5060:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5128:9:32","nodeType":"YulIdentifier","src":"5128:9:32"},{"name":"offset_3","nativeSrc":"5139:8:32","nodeType":"YulIdentifier","src":"5139:8:32"}],"functionName":{"name":"add","nativeSrc":"5124:3:32","nodeType":"YulIdentifier","src":"5124:3:32"},"nativeSrc":"5124:24:32","nodeType":"YulFunctionCall","src":"5124:24:32"},{"name":"dataEnd","nativeSrc":"5150:7:32","nodeType":"YulIdentifier","src":"5150:7:32"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5086:37:32","nodeType":"YulIdentifier","src":"5086:37:32"},"nativeSrc":"5086:72:32","nodeType":"YulFunctionCall","src":"5086:72:32"},"variables":[{"name":"value6_1","nativeSrc":"5064:8:32","nodeType":"YulTypedName","src":"5064:8:32","type":""},{"name":"value7_1","nativeSrc":"5074:8:32","nodeType":"YulTypedName","src":"5074:8:32","type":""}]},{"nativeSrc":"5167:18:32","nodeType":"YulAssignment","src":"5167:18:32","value":{"name":"value6_1","nativeSrc":"5177:8:32","nodeType":"YulIdentifier","src":"5177:8:32"},"variableNames":[{"name":"value6","nativeSrc":"5167:6:32","nodeType":"YulIdentifier","src":"5167:6:32"}]},{"nativeSrc":"5194:18:32","nodeType":"YulAssignment","src":"5194:18:32","value":{"name":"value7_1","nativeSrc":"5204:8:32","nodeType":"YulIdentifier","src":"5204:8:32"},"variableNames":[{"name":"value7","nativeSrc":"5194:6:32","nodeType":"YulIdentifier","src":"5194:6:32"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","nativeSrc":"3760:1458:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3985:9:32","nodeType":"YulTypedName","src":"3985:9:32","type":""},{"name":"dataEnd","nativeSrc":"3996:7:32","nodeType":"YulTypedName","src":"3996:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4008:6:32","nodeType":"YulTypedName","src":"4008:6:32","type":""},{"name":"value1","nativeSrc":"4016:6:32","nodeType":"YulTypedName","src":"4016:6:32","type":""},{"name":"value2","nativeSrc":"4024:6:32","nodeType":"YulTypedName","src":"4024:6:32","type":""},{"name":"value3","nativeSrc":"4032:6:32","nodeType":"YulTypedName","src":"4032:6:32","type":""},{"name":"value4","nativeSrc":"4040:6:32","nodeType":"YulTypedName","src":"4040:6:32","type":""},{"name":"value5","nativeSrc":"4048:6:32","nodeType":"YulTypedName","src":"4048:6:32","type":""},{"name":"value6","nativeSrc":"4056:6:32","nodeType":"YulTypedName","src":"4056:6:32","type":""},{"name":"value7","nativeSrc":"4064:6:32","nodeType":"YulTypedName","src":"4064:6:32","type":""}],"src":"3760:1458:32"},{"body":{"nativeSrc":"5255:152:32","nodeType":"YulBlock","src":"5255:152:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5272:1:32","nodeType":"YulLiteral","src":"5272:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5275:77:32","nodeType":"YulLiteral","src":"5275:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5265:6:32","nodeType":"YulIdentifier","src":"5265:6:32"},"nativeSrc":"5265:88:32","nodeType":"YulFunctionCall","src":"5265:88:32"},"nativeSrc":"5265:88:32","nodeType":"YulExpressionStatement","src":"5265:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5369:1:32","nodeType":"YulLiteral","src":"5369:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"5372:4:32","nodeType":"YulLiteral","src":"5372:4:32","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5362:6:32","nodeType":"YulIdentifier","src":"5362:6:32"},"nativeSrc":"5362:15:32","nodeType":"YulFunctionCall","src":"5362:15:32"},"nativeSrc":"5362:15:32","nodeType":"YulExpressionStatement","src":"5362:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5393:1:32","nodeType":"YulLiteral","src":"5393:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5396:4:32","nodeType":"YulLiteral","src":"5396:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5386:6:32","nodeType":"YulIdentifier","src":"5386:6:32"},"nativeSrc":"5386:15:32","nodeType":"YulFunctionCall","src":"5386:15:32"},"nativeSrc":"5386:15:32","nodeType":"YulExpressionStatement","src":"5386:15:32"}]},"name":"panic_error_0x32","nativeSrc":"5223:184:32","nodeType":"YulFunctionDefinition","src":"5223:184:32"},{"body":{"nativeSrc":"5522:494:32","nodeType":"YulBlock","src":"5522:494:32","statements":[{"nativeSrc":"5532:51:32","nodeType":"YulVariableDeclaration","src":"5532:51:32","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"5571:11:32","nodeType":"YulIdentifier","src":"5571:11:32"}],"functionName":{"name":"calldataload","nativeSrc":"5558:12:32","nodeType":"YulIdentifier","src":"5558:12:32"},"nativeSrc":"5558:25:32","nodeType":"YulFunctionCall","src":"5558:25:32"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"5536:18:32","nodeType":"YulTypedName","src":"5536:18:32","type":""}]},{"body":{"nativeSrc":"5731:16:32","nodeType":"YulBlock","src":"5731:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5740:1:32","nodeType":"YulLiteral","src":"5740:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5743:1:32","nodeType":"YulLiteral","src":"5743:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5733:6:32","nodeType":"YulIdentifier","src":"5733:6:32"},"nativeSrc":"5733:12:32","nodeType":"YulFunctionCall","src":"5733:12:32"},"nativeSrc":"5733:12:32","nodeType":"YulExpressionStatement","src":"5733:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"5606:18:32","nodeType":"YulIdentifier","src":"5606:18:32"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"5634:12:32","nodeType":"YulIdentifier","src":"5634:12:32"},"nativeSrc":"5634:14:32","nodeType":"YulFunctionCall","src":"5634:14:32"},{"name":"base_ref","nativeSrc":"5650:8:32","nodeType":"YulIdentifier","src":"5650:8:32"}],"functionName":{"name":"sub","nativeSrc":"5630:3:32","nodeType":"YulIdentifier","src":"5630:3:32"},"nativeSrc":"5630:29:32","nodeType":"YulFunctionCall","src":"5630:29:32"},{"kind":"number","nativeSrc":"5661:66:32","nodeType":"YulLiteral","src":"5661:66:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"5626:3:32","nodeType":"YulIdentifier","src":"5626:3:32"},"nativeSrc":"5626:102:32","nodeType":"YulFunctionCall","src":"5626:102:32"}],"functionName":{"name":"slt","nativeSrc":"5602:3:32","nodeType":"YulIdentifier","src":"5602:3:32"},"nativeSrc":"5602:127:32","nodeType":"YulFunctionCall","src":"5602:127:32"}],"functionName":{"name":"iszero","nativeSrc":"5595:6:32","nodeType":"YulIdentifier","src":"5595:6:32"},"nativeSrc":"5595:135:32","nodeType":"YulFunctionCall","src":"5595:135:32"},"nativeSrc":"5592:155:32","nodeType":"YulIf","src":"5592:155:32"},{"nativeSrc":"5756:47:32","nodeType":"YulVariableDeclaration","src":"5756:47:32","value":{"arguments":[{"name":"base_ref","nativeSrc":"5774:8:32","nodeType":"YulIdentifier","src":"5774:8:32"},{"name":"rel_offset_of_tail","nativeSrc":"5784:18:32","nodeType":"YulIdentifier","src":"5784:18:32"}],"functionName":{"name":"add","nativeSrc":"5770:3:32","nodeType":"YulIdentifier","src":"5770:3:32"},"nativeSrc":"5770:33:32","nodeType":"YulFunctionCall","src":"5770:33:32"},"variables":[{"name":"addr_1","nativeSrc":"5760:6:32","nodeType":"YulTypedName","src":"5760:6:32","type":""}]},{"nativeSrc":"5812:30:32","nodeType":"YulAssignment","src":"5812:30:32","value":{"arguments":[{"name":"addr_1","nativeSrc":"5835:6:32","nodeType":"YulIdentifier","src":"5835:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"5822:12:32","nodeType":"YulIdentifier","src":"5822:12:32"},"nativeSrc":"5822:20:32","nodeType":"YulFunctionCall","src":"5822:20:32"},"variableNames":[{"name":"length","nativeSrc":"5812:6:32","nodeType":"YulIdentifier","src":"5812:6:32"}]},{"body":{"nativeSrc":"5885:16:32","nodeType":"YulBlock","src":"5885:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5894:1:32","nodeType":"YulLiteral","src":"5894:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5897:1:32","nodeType":"YulLiteral","src":"5897:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5887:6:32","nodeType":"YulIdentifier","src":"5887:6:32"},"nativeSrc":"5887:12:32","nodeType":"YulFunctionCall","src":"5887:12:32"},"nativeSrc":"5887:12:32","nodeType":"YulExpressionStatement","src":"5887:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"5857:6:32","nodeType":"YulIdentifier","src":"5857:6:32"},{"kind":"number","nativeSrc":"5865:18:32","nodeType":"YulLiteral","src":"5865:18:32","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5854:2:32","nodeType":"YulIdentifier","src":"5854:2:32"},"nativeSrc":"5854:30:32","nodeType":"YulFunctionCall","src":"5854:30:32"},"nativeSrc":"5851:50:32","nodeType":"YulIf","src":"5851:50:32"},{"nativeSrc":"5910:25:32","nodeType":"YulAssignment","src":"5910:25:32","value":{"arguments":[{"name":"addr_1","nativeSrc":"5922:6:32","nodeType":"YulIdentifier","src":"5922:6:32"},{"kind":"number","nativeSrc":"5930:4:32","nodeType":"YulLiteral","src":"5930:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5918:3:32","nodeType":"YulIdentifier","src":"5918:3:32"},"nativeSrc":"5918:17:32","nodeType":"YulFunctionCall","src":"5918:17:32"},"variableNames":[{"name":"addr","nativeSrc":"5910:4:32","nodeType":"YulIdentifier","src":"5910:4:32"}]},{"body":{"nativeSrc":"5994:16:32","nodeType":"YulBlock","src":"5994:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6003:1:32","nodeType":"YulLiteral","src":"6003:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6006:1:32","nodeType":"YulLiteral","src":"6006:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5996:6:32","nodeType":"YulIdentifier","src":"5996:6:32"},"nativeSrc":"5996:12:32","nodeType":"YulFunctionCall","src":"5996:12:32"},"nativeSrc":"5996:12:32","nodeType":"YulExpressionStatement","src":"5996:12:32"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"5951:4:32","nodeType":"YulIdentifier","src":"5951:4:32"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"5961:12:32","nodeType":"YulIdentifier","src":"5961:12:32"},"nativeSrc":"5961:14:32","nodeType":"YulFunctionCall","src":"5961:14:32"},{"arguments":[{"kind":"number","nativeSrc":"5981:1:32","nodeType":"YulLiteral","src":"5981:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"5984:6:32","nodeType":"YulIdentifier","src":"5984:6:32"}],"functionName":{"name":"shl","nativeSrc":"5977:3:32","nodeType":"YulIdentifier","src":"5977:3:32"},"nativeSrc":"5977:14:32","nodeType":"YulFunctionCall","src":"5977:14:32"}],"functionName":{"name":"sub","nativeSrc":"5957:3:32","nodeType":"YulIdentifier","src":"5957:3:32"},"nativeSrc":"5957:35:32","nodeType":"YulFunctionCall","src":"5957:35:32"}],"functionName":{"name":"sgt","nativeSrc":"5947:3:32","nodeType":"YulIdentifier","src":"5947:3:32"},"nativeSrc":"5947:46:32","nodeType":"YulFunctionCall","src":"5947:46:32"},"nativeSrc":"5944:66:32","nodeType":"YulIf","src":"5944:66:32"}]},"name":"access_calldata_tail_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"5412:604:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"5479:8:32","nodeType":"YulTypedName","src":"5479:8:32","type":""},{"name":"ptr_to_tail","nativeSrc":"5489:11:32","nodeType":"YulTypedName","src":"5489:11:32","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"5505:4:32","nodeType":"YulTypedName","src":"5505:4:32","type":""},{"name":"length","nativeSrc":"5511:6:32","nodeType":"YulTypedName","src":"5511:6:32","type":""}],"src":"5412:604:32"},{"body":{"nativeSrc":"6099:280:32","nodeType":"YulBlock","src":"6099:280:32","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6116:3:32","nodeType":"YulIdentifier","src":"6116:3:32"},{"name":"length","nativeSrc":"6121:6:32","nodeType":"YulIdentifier","src":"6121:6:32"}],"functionName":{"name":"mstore","nativeSrc":"6109:6:32","nodeType":"YulIdentifier","src":"6109:6:32"},"nativeSrc":"6109:19:32","nodeType":"YulFunctionCall","src":"6109:19:32"},"nativeSrc":"6109:19:32","nodeType":"YulExpressionStatement","src":"6109:19:32"},{"body":{"nativeSrc":"6219:16:32","nodeType":"YulBlock","src":"6219:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6228:1:32","nodeType":"YulLiteral","src":"6228:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6231:1:32","nodeType":"YulLiteral","src":"6231:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6221:6:32","nodeType":"YulIdentifier","src":"6221:6:32"},"nativeSrc":"6221:12:32","nodeType":"YulFunctionCall","src":"6221:12:32"},"nativeSrc":"6221:12:32","nodeType":"YulExpressionStatement","src":"6221:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6143:6:32","nodeType":"YulIdentifier","src":"6143:6:32"},{"kind":"number","nativeSrc":"6151:66:32","nodeType":"YulLiteral","src":"6151:66:32","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6140:2:32","nodeType":"YulIdentifier","src":"6140:2:32"},"nativeSrc":"6140:78:32","nodeType":"YulFunctionCall","src":"6140:78:32"},"nativeSrc":"6137:98:32","nodeType":"YulIf","src":"6137:98:32"},{"nativeSrc":"6244:30:32","nodeType":"YulVariableDeclaration","src":"6244:30:32","value":{"arguments":[{"kind":"number","nativeSrc":"6264:1:32","nodeType":"YulLiteral","src":"6264:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"6267:6:32","nodeType":"YulIdentifier","src":"6267:6:32"}],"functionName":{"name":"shl","nativeSrc":"6260:3:32","nodeType":"YulIdentifier","src":"6260:3:32"},"nativeSrc":"6260:14:32","nodeType":"YulFunctionCall","src":"6260:14:32"},"variables":[{"name":"length_1","nativeSrc":"6248:8:32","nodeType":"YulTypedName","src":"6248:8:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6300:3:32","nodeType":"YulIdentifier","src":"6300:3:32"},{"kind":"number","nativeSrc":"6305:4:32","nodeType":"YulLiteral","src":"6305:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6296:3:32","nodeType":"YulIdentifier","src":"6296:3:32"},"nativeSrc":"6296:14:32","nodeType":"YulFunctionCall","src":"6296:14:32"},{"name":"start","nativeSrc":"6312:5:32","nodeType":"YulIdentifier","src":"6312:5:32"},{"name":"length_1","nativeSrc":"6319:8:32","nodeType":"YulIdentifier","src":"6319:8:32"}],"functionName":{"name":"calldatacopy","nativeSrc":"6283:12:32","nodeType":"YulIdentifier","src":"6283:12:32"},"nativeSrc":"6283:45:32","nodeType":"YulFunctionCall","src":"6283:45:32"},"nativeSrc":"6283:45:32","nodeType":"YulExpressionStatement","src":"6283:45:32"},{"nativeSrc":"6337:36:32","nodeType":"YulAssignment","src":"6337:36:32","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6352:3:32","nodeType":"YulIdentifier","src":"6352:3:32"},{"name":"length_1","nativeSrc":"6357:8:32","nodeType":"YulIdentifier","src":"6357:8:32"}],"functionName":{"name":"add","nativeSrc":"6348:3:32","nodeType":"YulIdentifier","src":"6348:3:32"},"nativeSrc":"6348:18:32","nodeType":"YulFunctionCall","src":"6348:18:32"},{"kind":"number","nativeSrc":"6368:4:32","nodeType":"YulLiteral","src":"6368:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6344:3:32","nodeType":"YulIdentifier","src":"6344:3:32"},"nativeSrc":"6344:29:32","nodeType":"YulFunctionCall","src":"6344:29:32"},"variableNames":[{"name":"end","nativeSrc":"6337:3:32","nodeType":"YulIdentifier","src":"6337:3:32"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6021:358:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6068:5:32","nodeType":"YulTypedName","src":"6068:5:32","type":""},{"name":"length","nativeSrc":"6075:6:32","nodeType":"YulTypedName","src":"6075:6:32","type":""},{"name":"pos","nativeSrc":"6083:3:32","nodeType":"YulTypedName","src":"6083:3:32","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6091:3:32","nodeType":"YulTypedName","src":"6091:3:32","type":""}],"src":"6021:358:32"},{"body":{"nativeSrc":"6661:362:32","nodeType":"YulBlock","src":"6661:362:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6678:9:32","nodeType":"YulIdentifier","src":"6678:9:32"},{"arguments":[{"name":"value0","nativeSrc":"6693:6:32","nodeType":"YulIdentifier","src":"6693:6:32"},{"kind":"number","nativeSrc":"6701:42:32","nodeType":"YulLiteral","src":"6701:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6689:3:32","nodeType":"YulIdentifier","src":"6689:3:32"},"nativeSrc":"6689:55:32","nodeType":"YulFunctionCall","src":"6689:55:32"}],"functionName":{"name":"mstore","nativeSrc":"6671:6:32","nodeType":"YulIdentifier","src":"6671:6:32"},"nativeSrc":"6671:74:32","nodeType":"YulFunctionCall","src":"6671:74:32"},"nativeSrc":"6671:74:32","nodeType":"YulExpressionStatement","src":"6671:74:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6765:9:32","nodeType":"YulIdentifier","src":"6765:9:32"},{"kind":"number","nativeSrc":"6776:2:32","nodeType":"YulLiteral","src":"6776:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6761:3:32","nodeType":"YulIdentifier","src":"6761:3:32"},"nativeSrc":"6761:18:32","nodeType":"YulFunctionCall","src":"6761:18:32"},{"kind":"number","nativeSrc":"6781:2:32","nodeType":"YulLiteral","src":"6781:2:32","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"6754:6:32","nodeType":"YulIdentifier","src":"6754:6:32"},"nativeSrc":"6754:30:32","nodeType":"YulFunctionCall","src":"6754:30:32"},"nativeSrc":"6754:30:32","nodeType":"YulExpressionStatement","src":"6754:30:32"},{"nativeSrc":"6793:87:32","nodeType":"YulVariableDeclaration","src":"6793:87:32","value":{"arguments":[{"name":"value1","nativeSrc":"6845:6:32","nodeType":"YulIdentifier","src":"6845:6:32"},{"name":"value2","nativeSrc":"6853:6:32","nodeType":"YulIdentifier","src":"6853:6:32"},{"arguments":[{"name":"headStart","nativeSrc":"6865:9:32","nodeType":"YulIdentifier","src":"6865:9:32"},{"kind":"number","nativeSrc":"6876:2:32","nodeType":"YulLiteral","src":"6876:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6861:3:32","nodeType":"YulIdentifier","src":"6861:3:32"},"nativeSrc":"6861:18:32","nodeType":"YulFunctionCall","src":"6861:18:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6807:37:32","nodeType":"YulIdentifier","src":"6807:37:32"},"nativeSrc":"6807:73:32","nodeType":"YulFunctionCall","src":"6807:73:32"},"variables":[{"name":"tail_1","nativeSrc":"6797:6:32","nodeType":"YulTypedName","src":"6797:6:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6900:9:32","nodeType":"YulIdentifier","src":"6900:9:32"},{"kind":"number","nativeSrc":"6911:2:32","nodeType":"YulLiteral","src":"6911:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6896:3:32","nodeType":"YulIdentifier","src":"6896:3:32"},"nativeSrc":"6896:18:32","nodeType":"YulFunctionCall","src":"6896:18:32"},{"arguments":[{"name":"tail_1","nativeSrc":"6920:6:32","nodeType":"YulIdentifier","src":"6920:6:32"},{"name":"headStart","nativeSrc":"6928:9:32","nodeType":"YulIdentifier","src":"6928:9:32"}],"functionName":{"name":"sub","nativeSrc":"6916:3:32","nodeType":"YulIdentifier","src":"6916:3:32"},"nativeSrc":"6916:22:32","nodeType":"YulFunctionCall","src":"6916:22:32"}],"functionName":{"name":"mstore","nativeSrc":"6889:6:32","nodeType":"YulIdentifier","src":"6889:6:32"},"nativeSrc":"6889:50:32","nodeType":"YulFunctionCall","src":"6889:50:32"},"nativeSrc":"6889:50:32","nodeType":"YulExpressionStatement","src":"6889:50:32"},{"nativeSrc":"6948:69:32","nodeType":"YulAssignment","src":"6948:69:32","value":{"arguments":[{"name":"value3","nativeSrc":"6994:6:32","nodeType":"YulIdentifier","src":"6994:6:32"},{"name":"value4","nativeSrc":"7002:6:32","nodeType":"YulIdentifier","src":"7002:6:32"},{"name":"tail_1","nativeSrc":"7010:6:32","nodeType":"YulIdentifier","src":"7010:6:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6956:37:32","nodeType":"YulIdentifier","src":"6956:37:32"},"nativeSrc":"6956:61:32","nodeType":"YulFunctionCall","src":"6956:61:32"},"variableNames":[{"name":"tail","nativeSrc":"6948:4:32","nodeType":"YulIdentifier","src":"6948:4:32"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6384:639:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6598:9:32","nodeType":"YulTypedName","src":"6598:9:32","type":""},{"name":"value4","nativeSrc":"6609:6:32","nodeType":"YulTypedName","src":"6609:6:32","type":""},{"name":"value3","nativeSrc":"6617:6:32","nodeType":"YulTypedName","src":"6617:6:32","type":""},{"name":"value2","nativeSrc":"6625:6:32","nodeType":"YulTypedName","src":"6625:6:32","type":""},{"name":"value1","nativeSrc":"6633:6:32","nodeType":"YulTypedName","src":"6633:6:32","type":""},{"name":"value0","nativeSrc":"6641:6:32","nodeType":"YulTypedName","src":"6641:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6652:4:32","nodeType":"YulTypedName","src":"6652:4:32","type":""}],"src":"6384:639:32"},{"body":{"nativeSrc":"7277:270:32","nodeType":"YulBlock","src":"7277:270:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7294:9:32","nodeType":"YulIdentifier","src":"7294:9:32"},{"kind":"number","nativeSrc":"7305:2:32","nodeType":"YulLiteral","src":"7305:2:32","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"7287:6:32","nodeType":"YulIdentifier","src":"7287:6:32"},"nativeSrc":"7287:21:32","nodeType":"YulFunctionCall","src":"7287:21:32"},"nativeSrc":"7287:21:32","nodeType":"YulExpressionStatement","src":"7287:21:32"},{"nativeSrc":"7317:87:32","nodeType":"YulVariableDeclaration","src":"7317:87:32","value":{"arguments":[{"name":"value0","nativeSrc":"7369:6:32","nodeType":"YulIdentifier","src":"7369:6:32"},{"name":"value1","nativeSrc":"7377:6:32","nodeType":"YulIdentifier","src":"7377:6:32"},{"arguments":[{"name":"headStart","nativeSrc":"7389:9:32","nodeType":"YulIdentifier","src":"7389:9:32"},{"kind":"number","nativeSrc":"7400:2:32","nodeType":"YulLiteral","src":"7400:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7385:3:32","nodeType":"YulIdentifier","src":"7385:3:32"},"nativeSrc":"7385:18:32","nodeType":"YulFunctionCall","src":"7385:18:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7331:37:32","nodeType":"YulIdentifier","src":"7331:37:32"},"nativeSrc":"7331:73:32","nodeType":"YulFunctionCall","src":"7331:73:32"},"variables":[{"name":"tail_1","nativeSrc":"7321:6:32","nodeType":"YulTypedName","src":"7321:6:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7424:9:32","nodeType":"YulIdentifier","src":"7424:9:32"},{"kind":"number","nativeSrc":"7435:2:32","nodeType":"YulLiteral","src":"7435:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7420:3:32","nodeType":"YulIdentifier","src":"7420:3:32"},"nativeSrc":"7420:18:32","nodeType":"YulFunctionCall","src":"7420:18:32"},{"arguments":[{"name":"tail_1","nativeSrc":"7444:6:32","nodeType":"YulIdentifier","src":"7444:6:32"},{"name":"headStart","nativeSrc":"7452:9:32","nodeType":"YulIdentifier","src":"7452:9:32"}],"functionName":{"name":"sub","nativeSrc":"7440:3:32","nodeType":"YulIdentifier","src":"7440:3:32"},"nativeSrc":"7440:22:32","nodeType":"YulFunctionCall","src":"7440:22:32"}],"functionName":{"name":"mstore","nativeSrc":"7413:6:32","nodeType":"YulIdentifier","src":"7413:6:32"},"nativeSrc":"7413:50:32","nodeType":"YulFunctionCall","src":"7413:50:32"},"nativeSrc":"7413:50:32","nodeType":"YulExpressionStatement","src":"7413:50:32"},{"nativeSrc":"7472:69:32","nodeType":"YulAssignment","src":"7472:69:32","value":{"arguments":[{"name":"value2","nativeSrc":"7518:6:32","nodeType":"YulIdentifier","src":"7518:6:32"},{"name":"value3","nativeSrc":"7526:6:32","nodeType":"YulIdentifier","src":"7526:6:32"},{"name":"tail_1","nativeSrc":"7534:6:32","nodeType":"YulIdentifier","src":"7534:6:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7480:37:32","nodeType":"YulIdentifier","src":"7480:37:32"},"nativeSrc":"7480:61:32","nodeType":"YulFunctionCall","src":"7480:61:32"},"variableNames":[{"name":"tail","nativeSrc":"7472:4:32","nodeType":"YulIdentifier","src":"7472:4:32"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"7028:519:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7222:9:32","nodeType":"YulTypedName","src":"7222:9:32","type":""},{"name":"value3","nativeSrc":"7233:6:32","nodeType":"YulTypedName","src":"7233:6:32","type":""},{"name":"value2","nativeSrc":"7241:6:32","nodeType":"YulTypedName","src":"7241:6:32","type":""},{"name":"value1","nativeSrc":"7249:6:32","nodeType":"YulTypedName","src":"7249:6:32","type":""},{"name":"value0","nativeSrc":"7257:6:32","nodeType":"YulTypedName","src":"7257:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7268:4:32","nodeType":"YulTypedName","src":"7268:4:32","type":""}],"src":"7028:519:32"},{"body":{"nativeSrc":"7594:76:32","nodeType":"YulBlock","src":"7594:76:32","statements":[{"body":{"nativeSrc":"7648:16:32","nodeType":"YulBlock","src":"7648:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7657:1:32","nodeType":"YulLiteral","src":"7657:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7660:1:32","nodeType":"YulLiteral","src":"7660:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7650:6:32","nodeType":"YulIdentifier","src":"7650:6:32"},"nativeSrc":"7650:12:32","nodeType":"YulFunctionCall","src":"7650:12:32"},"nativeSrc":"7650:12:32","nodeType":"YulExpressionStatement","src":"7650:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7617:5:32","nodeType":"YulIdentifier","src":"7617:5:32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7638:5:32","nodeType":"YulIdentifier","src":"7638:5:32"}],"functionName":{"name":"iszero","nativeSrc":"7631:6:32","nodeType":"YulIdentifier","src":"7631:6:32"},"nativeSrc":"7631:13:32","nodeType":"YulFunctionCall","src":"7631:13:32"}],"functionName":{"name":"iszero","nativeSrc":"7624:6:32","nodeType":"YulIdentifier","src":"7624:6:32"},"nativeSrc":"7624:21:32","nodeType":"YulFunctionCall","src":"7624:21:32"}],"functionName":{"name":"eq","nativeSrc":"7614:2:32","nodeType":"YulIdentifier","src":"7614:2:32"},"nativeSrc":"7614:32:32","nodeType":"YulFunctionCall","src":"7614:32:32"}],"functionName":{"name":"iszero","nativeSrc":"7607:6:32","nodeType":"YulIdentifier","src":"7607:6:32"},"nativeSrc":"7607:40:32","nodeType":"YulFunctionCall","src":"7607:40:32"},"nativeSrc":"7604:60:32","nodeType":"YulIf","src":"7604:60:32"}]},"name":"validator_revert_bool","nativeSrc":"7552:118:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7583:5:32","nodeType":"YulTypedName","src":"7583:5:32","type":""}],"src":"7552:118:32"},{"body":{"nativeSrc":"7742:174:32","nodeType":"YulBlock","src":"7742:174:32","statements":[{"body":{"nativeSrc":"7788:16:32","nodeType":"YulBlock","src":"7788:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7797:1:32","nodeType":"YulLiteral","src":"7797:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7800:1:32","nodeType":"YulLiteral","src":"7800:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7790:6:32","nodeType":"YulIdentifier","src":"7790:6:32"},"nativeSrc":"7790:12:32","nodeType":"YulFunctionCall","src":"7790:12:32"},"nativeSrc":"7790:12:32","nodeType":"YulExpressionStatement","src":"7790:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7763:7:32","nodeType":"YulIdentifier","src":"7763:7:32"},{"name":"headStart","nativeSrc":"7772:9:32","nodeType":"YulIdentifier","src":"7772:9:32"}],"functionName":{"name":"sub","nativeSrc":"7759:3:32","nodeType":"YulIdentifier","src":"7759:3:32"},"nativeSrc":"7759:23:32","nodeType":"YulFunctionCall","src":"7759:23:32"},{"kind":"number","nativeSrc":"7784:2:32","nodeType":"YulLiteral","src":"7784:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7755:3:32","nodeType":"YulIdentifier","src":"7755:3:32"},"nativeSrc":"7755:32:32","nodeType":"YulFunctionCall","src":"7755:32:32"},"nativeSrc":"7752:52:32","nodeType":"YulIf","src":"7752:52:32"},{"nativeSrc":"7813:36:32","nodeType":"YulVariableDeclaration","src":"7813:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"7839:9:32","nodeType":"YulIdentifier","src":"7839:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"7826:12:32","nodeType":"YulIdentifier","src":"7826:12:32"},"nativeSrc":"7826:23:32","nodeType":"YulFunctionCall","src":"7826:23:32"},"variables":[{"name":"value","nativeSrc":"7817:5:32","nodeType":"YulTypedName","src":"7817:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7880:5:32","nodeType":"YulIdentifier","src":"7880:5:32"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"7858:21:32","nodeType":"YulIdentifier","src":"7858:21:32"},"nativeSrc":"7858:28:32","nodeType":"YulFunctionCall","src":"7858:28:32"},"nativeSrc":"7858:28:32","nodeType":"YulExpressionStatement","src":"7858:28:32"},{"nativeSrc":"7895:15:32","nodeType":"YulAssignment","src":"7895:15:32","value":{"name":"value","nativeSrc":"7905:5:32","nodeType":"YulIdentifier","src":"7905:5:32"},"variableNames":[{"name":"value0","nativeSrc":"7895:6:32","nodeType":"YulIdentifier","src":"7895:6:32"}]}]},"name":"abi_decode_tuple_t_bool","nativeSrc":"7675:241:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7708:9:32","nodeType":"YulTypedName","src":"7708:9:32","type":""},{"name":"dataEnd","nativeSrc":"7719:7:32","nodeType":"YulTypedName","src":"7719:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7731:6:32","nodeType":"YulTypedName","src":"7731:6:32","type":""}],"src":"7675:241:32"},{"body":{"nativeSrc":"8015:177:32","nodeType":"YulBlock","src":"8015:177:32","statements":[{"body":{"nativeSrc":"8061:16:32","nodeType":"YulBlock","src":"8061:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8070:1:32","nodeType":"YulLiteral","src":"8070:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"8073:1:32","nodeType":"YulLiteral","src":"8073:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8063:6:32","nodeType":"YulIdentifier","src":"8063:6:32"},"nativeSrc":"8063:12:32","nodeType":"YulFunctionCall","src":"8063:12:32"},"nativeSrc":"8063:12:32","nodeType":"YulExpressionStatement","src":"8063:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8036:7:32","nodeType":"YulIdentifier","src":"8036:7:32"},{"name":"headStart","nativeSrc":"8045:9:32","nodeType":"YulIdentifier","src":"8045:9:32"}],"functionName":{"name":"sub","nativeSrc":"8032:3:32","nodeType":"YulIdentifier","src":"8032:3:32"},"nativeSrc":"8032:23:32","nodeType":"YulFunctionCall","src":"8032:23:32"},{"kind":"number","nativeSrc":"8057:2:32","nodeType":"YulLiteral","src":"8057:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8028:3:32","nodeType":"YulIdentifier","src":"8028:3:32"},"nativeSrc":"8028:32:32","nodeType":"YulFunctionCall","src":"8028:32:32"},"nativeSrc":"8025:52:32","nodeType":"YulIf","src":"8025:52:32"},{"nativeSrc":"8086:36:32","nodeType":"YulVariableDeclaration","src":"8086:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"8112:9:32","nodeType":"YulIdentifier","src":"8112:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"8099:12:32","nodeType":"YulIdentifier","src":"8099:12:32"},"nativeSrc":"8099:23:32","nodeType":"YulFunctionCall","src":"8099:23:32"},"variables":[{"name":"value","nativeSrc":"8090:5:32","nodeType":"YulTypedName","src":"8090:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8156:5:32","nodeType":"YulIdentifier","src":"8156:5:32"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8131:24:32","nodeType":"YulIdentifier","src":"8131:24:32"},"nativeSrc":"8131:31:32","nodeType":"YulFunctionCall","src":"8131:31:32"},"nativeSrc":"8131:31:32","nodeType":"YulExpressionStatement","src":"8131:31:32"},{"nativeSrc":"8171:15:32","nodeType":"YulAssignment","src":"8171:15:32","value":{"name":"value","nativeSrc":"8181:5:32","nodeType":"YulIdentifier","src":"8181:5:32"},"variableNames":[{"name":"value0","nativeSrc":"8171:6:32","nodeType":"YulIdentifier","src":"8171:6:32"}]}]},"name":"abi_decode_tuple_t_contract$_IERC1155Burnable_$948","nativeSrc":"7921:271:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7981:9:32","nodeType":"YulTypedName","src":"7981:9:32","type":""},{"name":"dataEnd","nativeSrc":"7992:7:32","nodeType":"YulTypedName","src":"7992:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8004:6:32","nodeType":"YulTypedName","src":"8004:6:32","type":""}],"src":"7921:271:32"},{"body":{"nativeSrc":"8326:198:32","nodeType":"YulBlock","src":"8326:198:32","statements":[{"nativeSrc":"8336:26:32","nodeType":"YulAssignment","src":"8336:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"8348:9:32","nodeType":"YulIdentifier","src":"8348:9:32"},{"kind":"number","nativeSrc":"8359:2:32","nodeType":"YulLiteral","src":"8359:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8344:3:32","nodeType":"YulIdentifier","src":"8344:3:32"},"nativeSrc":"8344:18:32","nodeType":"YulFunctionCall","src":"8344:18:32"},"variableNames":[{"name":"tail","nativeSrc":"8336:4:32","nodeType":"YulIdentifier","src":"8336:4:32"}]},{"nativeSrc":"8371:52:32","nodeType":"YulVariableDeclaration","src":"8371:52:32","value":{"kind":"number","nativeSrc":"8381:42:32","nodeType":"YulLiteral","src":"8381:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8375:2:32","nodeType":"YulTypedName","src":"8375:2:32","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8439:9:32","nodeType":"YulIdentifier","src":"8439:9:32"},{"arguments":[{"name":"value0","nativeSrc":"8454:6:32","nodeType":"YulIdentifier","src":"8454:6:32"},{"name":"_1","nativeSrc":"8462:2:32","nodeType":"YulIdentifier","src":"8462:2:32"}],"functionName":{"name":"and","nativeSrc":"8450:3:32","nodeType":"YulIdentifier","src":"8450:3:32"},"nativeSrc":"8450:15:32","nodeType":"YulFunctionCall","src":"8450:15:32"}],"functionName":{"name":"mstore","nativeSrc":"8432:6:32","nodeType":"YulIdentifier","src":"8432:6:32"},"nativeSrc":"8432:34:32","nodeType":"YulFunctionCall","src":"8432:34:32"},"nativeSrc":"8432:34:32","nodeType":"YulExpressionStatement","src":"8432:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8486:9:32","nodeType":"YulIdentifier","src":"8486:9:32"},{"kind":"number","nativeSrc":"8497:2:32","nodeType":"YulLiteral","src":"8497:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8482:3:32","nodeType":"YulIdentifier","src":"8482:3:32"},"nativeSrc":"8482:18:32","nodeType":"YulFunctionCall","src":"8482:18:32"},{"arguments":[{"name":"value1","nativeSrc":"8506:6:32","nodeType":"YulIdentifier","src":"8506:6:32"},{"name":"_1","nativeSrc":"8514:2:32","nodeType":"YulIdentifier","src":"8514:2:32"}],"functionName":{"name":"and","nativeSrc":"8502:3:32","nodeType":"YulIdentifier","src":"8502:3:32"},"nativeSrc":"8502:15:32","nodeType":"YulFunctionCall","src":"8502:15:32"}],"functionName":{"name":"mstore","nativeSrc":"8475:6:32","nodeType":"YulIdentifier","src":"8475:6:32"},"nativeSrc":"8475:43:32","nodeType":"YulFunctionCall","src":"8475:43:32"},"nativeSrc":"8475:43:32","nodeType":"YulExpressionStatement","src":"8475:43:32"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"8197:327:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8287:9:32","nodeType":"YulTypedName","src":"8287:9:32","type":""},{"name":"value1","nativeSrc":"8298:6:32","nodeType":"YulTypedName","src":"8298:6:32","type":""},{"name":"value0","nativeSrc":"8306:6:32","nodeType":"YulTypedName","src":"8306:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8317:4:32","nodeType":"YulTypedName","src":"8317:4:32","type":""}],"src":"8197:327:32"},{"body":{"nativeSrc":"8607:167:32","nodeType":"YulBlock","src":"8607:167:32","statements":[{"body":{"nativeSrc":"8653:16:32","nodeType":"YulBlock","src":"8653:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8662:1:32","nodeType":"YulLiteral","src":"8662:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"8665:1:32","nodeType":"YulLiteral","src":"8665:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8655:6:32","nodeType":"YulIdentifier","src":"8655:6:32"},"nativeSrc":"8655:12:32","nodeType":"YulFunctionCall","src":"8655:12:32"},"nativeSrc":"8655:12:32","nodeType":"YulExpressionStatement","src":"8655:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8628:7:32","nodeType":"YulIdentifier","src":"8628:7:32"},{"name":"headStart","nativeSrc":"8637:9:32","nodeType":"YulIdentifier","src":"8637:9:32"}],"functionName":{"name":"sub","nativeSrc":"8624:3:32","nodeType":"YulIdentifier","src":"8624:3:32"},"nativeSrc":"8624:23:32","nodeType":"YulFunctionCall","src":"8624:23:32"},{"kind":"number","nativeSrc":"8649:2:32","nodeType":"YulLiteral","src":"8649:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8620:3:32","nodeType":"YulIdentifier","src":"8620:3:32"},"nativeSrc":"8620:32:32","nodeType":"YulFunctionCall","src":"8620:32:32"},"nativeSrc":"8617:52:32","nodeType":"YulIf","src":"8617:52:32"},{"nativeSrc":"8678:29:32","nodeType":"YulVariableDeclaration","src":"8678:29:32","value":{"arguments":[{"name":"headStart","nativeSrc":"8697:9:32","nodeType":"YulIdentifier","src":"8697:9:32"}],"functionName":{"name":"mload","nativeSrc":"8691:5:32","nodeType":"YulIdentifier","src":"8691:5:32"},"nativeSrc":"8691:16:32","nodeType":"YulFunctionCall","src":"8691:16:32"},"variables":[{"name":"value","nativeSrc":"8682:5:32","nodeType":"YulTypedName","src":"8682:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8738:5:32","nodeType":"YulIdentifier","src":"8738:5:32"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"8716:21:32","nodeType":"YulIdentifier","src":"8716:21:32"},"nativeSrc":"8716:28:32","nodeType":"YulFunctionCall","src":"8716:28:32"},"nativeSrc":"8716:28:32","nodeType":"YulExpressionStatement","src":"8716:28:32"},{"nativeSrc":"8753:15:32","nodeType":"YulAssignment","src":"8753:15:32","value":{"name":"value","nativeSrc":"8763:5:32","nodeType":"YulIdentifier","src":"8763:5:32"},"variableNames":[{"name":"value0","nativeSrc":"8753:6:32","nodeType":"YulIdentifier","src":"8753:6:32"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"8529:245:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8573:9:32","nodeType":"YulTypedName","src":"8573:9:32","type":""},{"name":"dataEnd","nativeSrc":"8584:7:32","nodeType":"YulTypedName","src":"8584:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8596:6:32","nodeType":"YulTypedName","src":"8596:6:32","type":""}],"src":"8529:245:32"},{"body":{"nativeSrc":"8828:233:32","nodeType":"YulBlock","src":"8828:233:32","statements":[{"nativeSrc":"8838:17:32","nodeType":"YulAssignment","src":"8838:17:32","value":{"arguments":[{"name":"x","nativeSrc":"8850:1:32","nodeType":"YulIdentifier","src":"8850:1:32"},{"name":"y","nativeSrc":"8853:1:32","nodeType":"YulIdentifier","src":"8853:1:32"}],"functionName":{"name":"sub","nativeSrc":"8846:3:32","nodeType":"YulIdentifier","src":"8846:3:32"},"nativeSrc":"8846:9:32","nodeType":"YulFunctionCall","src":"8846:9:32"},"variableNames":[{"name":"diff","nativeSrc":"8838:4:32","nodeType":"YulIdentifier","src":"8838:4:32"}]},{"body":{"nativeSrc":"8887:168:32","nodeType":"YulBlock","src":"8887:168:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8908:1:32","nodeType":"YulLiteral","src":"8908:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"8911:77:32","nodeType":"YulLiteral","src":"8911:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8901:6:32","nodeType":"YulIdentifier","src":"8901:6:32"},"nativeSrc":"8901:88:32","nodeType":"YulFunctionCall","src":"8901:88:32"},"nativeSrc":"8901:88:32","nodeType":"YulExpressionStatement","src":"8901:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9009:1:32","nodeType":"YulLiteral","src":"9009:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"9012:4:32","nodeType":"YulLiteral","src":"9012:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"9002:6:32","nodeType":"YulIdentifier","src":"9002:6:32"},"nativeSrc":"9002:15:32","nodeType":"YulFunctionCall","src":"9002:15:32"},"nativeSrc":"9002:15:32","nodeType":"YulExpressionStatement","src":"9002:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9037:1:32","nodeType":"YulLiteral","src":"9037:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"9040:4:32","nodeType":"YulLiteral","src":"9040:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9030:6:32","nodeType":"YulIdentifier","src":"9030:6:32"},"nativeSrc":"9030:15:32","nodeType":"YulFunctionCall","src":"9030:15:32"},"nativeSrc":"9030:15:32","nodeType":"YulExpressionStatement","src":"9030:15:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8870:4:32","nodeType":"YulIdentifier","src":"8870:4:32"},{"name":"x","nativeSrc":"8876:1:32","nodeType":"YulIdentifier","src":"8876:1:32"}],"functionName":{"name":"gt","nativeSrc":"8867:2:32","nodeType":"YulIdentifier","src":"8867:2:32"},"nativeSrc":"8867:11:32","nodeType":"YulFunctionCall","src":"8867:11:32"},"nativeSrc":"8864:191:32","nodeType":"YulIf","src":"8864:191:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"8779:282:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8810:1:32","nodeType":"YulTypedName","src":"8810:1:32","type":""},{"name":"y","nativeSrc":"8813:1:32","nodeType":"YulTypedName","src":"8813:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8819:4:32","nodeType":"YulTypedName","src":"8819:4:32","type":""}],"src":"8779:282:32"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_contract$_IERC1155Burnable_$948_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_3), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_array$_t_uint256_$dyn_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC1155Burnable_$948(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":266},{"length":32,"start":351},{"length":32,"start":3654},{"length":32,"start":3790}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x572B6C05 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x92463BED GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x92463BED EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xF0A71104 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x458935E EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0xA0A3325 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x108 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4A JUMP JUMPDEST PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0xFDF JUMP JUMPDEST PUSH2 0x1F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBB PUSH2 0xF3 CALLDATASIZE PUSH1 0x4 PUSH2 0x109B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x15D CALLDATASIZE PUSH1 0x4 PUSH2 0x109B JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x528 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x10B8 JUMP JUMPDEST PUSH2 0x554 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1124 JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x1D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x109B JUMP JUMPDEST PUSH2 0xB1C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F1 DUP3 PUSH2 0x1EB PUSH2 0xB3A JUMP JUMPDEST SWAP1 PUSH2 0xB68 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP4 EQ ISZERO DUP1 PUSH2 0x206 JUMPI POP DUP5 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x51F JUMPI PUSH1 0x4 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x25E JUMPI PUSH2 0x25E PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x32DA96A300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x2E5 JUMPI PUSH2 0x2E5 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x30B JUMPI PUSH2 0x30B PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP EQ PUSH2 0x356 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x368 JUMPI PUSH2 0x368 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 PUSH2 0x3A0 PUSH2 0xC42 JUMP JUMPDEST DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x3B2 JUMPI PUSH2 0x3B2 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3C4 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP2 DUP2 LT PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3E8 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x408 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x436 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x44C JUMPI PUSH2 0x44C PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x461 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP PUSH2 0x480 PUSH2 0xC42 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x695B30A33E54E34D55C7836E092FA38DB4283A5B243D2A8CFD4180EE227B2C0D DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0x4C9 JUMPI PUSH2 0x4C9 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4DB SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP9 DUP9 DUP9 DUP2 DUP2 LT PUSH2 0x4ED JUMPI PUSH2 0x4ED PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4FF SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 ADD PUSH2 0x240 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0x535 PUSH2 0xC4C JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x56D PUSH2 0x55F PUSH2 0xC42 JUMP JUMPDEST PUSH2 0x567 PUSH2 0xC4C JUMP JUMPDEST SWAP1 PUSH2 0xC7A JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x65E JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x5C3 JUMPI PUSH2 0x5C3 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5D8 SWAP2 SWAP1 PUSH2 0x1359 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x5EE JUMPI PUSH2 0x5EE PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x603 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x5A9 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP7 DUP6 EQ ISZERO DUP1 PUSH2 0x674 JUMPI POP DUP7 DUP4 EQ ISZERO JUMPDEST DUP1 PUSH2 0x67F JUMPI POP DUP7 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0xB11 JUMPI PUSH1 0x4 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x6D7 JUMPI PUSH2 0x6D7 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH32 0x32DA96A300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x75E JUMPI PUSH2 0x75E PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x770 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x784 JUMPI PUSH2 0x784 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x796 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST SWAP1 POP EQ PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x7E1 JUMPI PUSH2 0x7E1 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7F6 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE985E9C5 DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0x823 JUMPI PUSH2 0x823 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x838 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH2 0x840 PUSH2 0xC42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8D4 SWAP2 SWAP1 PUSH2 0x1376 JUMP JUMPDEST PUSH2 0x90A JUMPI PUSH1 0x40 MLOAD PUSH32 0x729D852800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x91C JUMPI PUSH2 0x91C PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x931 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0x95E JUMPI PUSH2 0x95E PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x973 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x985 JUMPI PUSH2 0x985 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x997 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP2 DUP2 LT PUSH2 0x9A9 JUMPI PUSH2 0x9A9 PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x9BB SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DB SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0xA1F JUMPI PUSH2 0xA1F PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA34 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0xA5D JUMPI PUSH2 0xA5D PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA72 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x695B30A33E54E34D55C7836E092FA38DB4283A5B243D2A8CFD4180EE227B2C0D DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0xABB JUMPI PUSH2 0xABB PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xACD SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST DUP9 DUP9 DUP9 DUP2 DUP2 LT PUSH2 0xADF JUMPI PUSH2 0xADF PUSH2 0x11E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xAF1 SWAP2 SWAP1 PUSH2 0x1217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB01 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 ADD PUSH2 0x6B9 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB37 PUSH2 0xB27 PUSH2 0xC42 JUMP JUMPDEST DUP3 PUSH2 0xB30 PUSH2 0xC4C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xCEE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1393 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xBB8 JUMPI POP PUSH1 0x0 PUSH2 0x1F1 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC09 JUMPI POP PUSH1 0x1 PUSH2 0x1F1 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1393 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xCEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xD5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xCE1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDFD JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE13 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE1D JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xF39 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF39 SWAP2 SWAP1 PUSH2 0x1376 JUMP JUMPDEST ISZERO PUSH2 0xF43 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xF8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xFA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xFF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x101C DUP11 DUP4 DUP12 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1041 DUP11 DUP4 DUP12 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1067 DUP10 DUP3 DUP11 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF8C DUP2 PUSH2 0x1079 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10F2 DUP9 DUP4 DUP10 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x110B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1118 DUP8 DUP3 DUP9 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1164 DUP13 DUP4 DUP14 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x117D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1189 DUP13 DUP4 DUP14 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x11A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11AE DUP13 DUP4 DUP14 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x11C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D4 DUP12 DUP3 DUP13 ADD PUSH2 0xF93 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x124C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x12B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x12FA PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x127F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x130D DUP2 DUP6 DUP8 PUSH2 0x127F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x132D PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0x127F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1340 DUP2 DUP6 DUP8 PUSH2 0x127F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x136B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF8C DUP2 PUSH2 0x134B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xF8C DUP2 PUSH2 0x134B JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1F1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PREVRANDAO REVERT CREATE2 0xC1 SHR 0xBF 0xE6 RETURN 0xBD SWAP9 SIGNEXTEND RETURN DUP4 PUSH4 0x1997E86 0xAC BLOCKHASH POP 0xA7 0xAE PC 0x4D 0xBA JUMPDEST 0x49 0xB2 JUMPDEST 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1177:4392:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:32;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;3756:702:28;;;;;;:::i;:::-;;:::i;:::-;;1766:48;;;;;;:::i;:::-;;;;;;;;;;;;;;;;728:115:11;817:19;728:115;;;2675:42:32;2663:55;;;2645:74;;2633:2;2618:18;728:115:11;2473:252:32;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;710:120:1;;;:::i;3190:409:28:-;;;;;;:::i;:::-;;:::i;4673:894::-;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;3756:702:28:-;3875:27;;;;;:61;;-1:-1:-1;3906:30:28;;;;3875:61;3871:119;;;3959:20;;;;;;;;;;;;;;3871:119;4005:9;4000:452;4020:17;;;4000:452;;;4063:16;:27;4080:6;;4087:1;4080:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4063:27;;;;;;;;;;;;;-1:-1:-1;4063:27:28;;;;4058:92;;4117:18;;;;;;;;;;;;;;4058:92;4184:6;;4191:1;4184:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;;4167:3;;4171:1;4167:6;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:13;;:33;4163:99;;4227:20;;;;;;;;;;;;;;4163:99;4293:6;;4300:1;4293:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4276:41;;;4318:12;:10;:12::i;:::-;4332:3;;4336:1;4332:6;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;4340;;4347:1;4340:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;4276:74;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4412:6;;4419:1;4412:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4369:72;;4395:15;4381:12;:10;:12::i;:::-;4369:72;;;4423:3;;4427:1;4423:6;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;4431;;4438:1;4431:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;4369:72;;;;;;;;;:::i;:::-;;;;;;;;4039:3;;4000:452;;;;3756:702;;;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;3190:409:28:-;3297:70;3354:12;:10;:12::i;:::-;3297:33;:31;:33::i;:::-;:56;;:70::i;:::-;3381:31;;;3377:89;;3435:20;;;;;;;;;;;;;;3377:89;3480:9;3475:118;3495:17;;;3475:118;;;3572:7;;3580:1;3572:10;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3533:16;:36;3558:6;;3565:1;3558:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3533:36;;;;;;;;;;;;;-1:-1:-1;3533:36:28;:49;;;;;;;;;;;;;-1:-1:-1;3514:3:28;3475:118;;;;3190:409;;;;:::o;4673:894::-;4820:28;;;;;:57;;-1:-1:-1;4852:25:28;;;;4820:57;:89;;;-1:-1:-1;4881:28:28;;;;4820:89;4816:147;;;4932:20;;;;;;;;;;;;;;4816:147;4978:9;4973:588;4993:15;;;4973:588;;;5034:16;:27;5051:6;;5058:1;5051:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5034:27;;;;;;;;;;;;;-1:-1:-1;5034:27:28;;;;5029:92;;5088:18;;;;;;;;;;;;;;5029:92;5155:6;;5162:1;5155:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;;5138:3;;5142:1;5138:6;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:13;;:33;5134:99;;5198:20;;;;;;;;;;;;;;5134:99;5269:6;;5276:1;5269:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5252:45;;;5298:4;;5303:1;5298:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5307:12;:10;:12::i;:::-;5252:68;;;;;;;;;;8381:42:32;8450:15;;;5252:68:28;;;8432:34:32;8502:15;;8482:18;;;8475:43;8344:18;;5252:68:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5247:134;;5347:19;;;;;;;;;;;;;;5247:134;5412:6;;5419:1;5412:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5395:41;;;5437:4;;5442:1;5437:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5446:3;;5450:1;5446:6;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;5454;;5461:1;5454:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;5395:69;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5521:6;;5528:1;5521:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5483:67;;5504:15;5495:4;;5500:1;5495:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5483:67;;;5532:3;;5536:1;5532:6;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;5540;;5547:1;5540:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;5483:67;;;;;;;;;:::i;:::-;;;;;;;;5010:3;;4973:588;;;;4673:894;;;;;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;2776:175:28:-;2877:7;2903:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;2675:42:32;2663:55;;4543:25:6;;;2645:74:32;2618:18;;4543:25:6;;;;;;;;4504:64;4413:162;;:::o;3060:369::-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;2675:42:32;2663:55;;3243:24:6;;;2645:74:32;2618:18;;3243:24:6;2473:252:32;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;8450:15:32;;;1396:59:12;;;8432:34:32;1444:10:12;8482:18:32;;;8475:43;1396:19:12;:39;;;;8344:18:32;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;14:332:32:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:32:o;543:367::-;606:8;616:6;670:3;663:4;655:6;651:17;647:27;637:55;;688:1;685;678:12;637:55;-1:-1:-1;711:20:32;;754:18;743:30;;740:50;;;786:1;783;776:12;740:50;823:4;815:6;811:17;799:29;;883:3;876:4;866:6;863:1;859:14;851:6;847:27;843:38;840:47;837:67;;;900:1;897;890:12;837:67;543:367;;;;;:::o;915:1142::-;1127:6;1135;1143;1151;1159;1167;1220:2;1208:9;1199:7;1195:23;1191:32;1188:52;;;1236:1;1233;1226:12;1188:52;1276:9;1263:23;1305:18;1346:2;1338:6;1335:14;1332:34;;;1362:1;1359;1352:12;1332:34;1401:70;1463:7;1454:6;1443:9;1439:22;1401:70;:::i;:::-;1490:8;;-1:-1:-1;1375:96:32;-1:-1:-1;1578:2:32;1563:18;;1550:32;;-1:-1:-1;1594:16:32;;;1591:36;;;1623:1;1620;1613:12;1591:36;1662:72;1726:7;1715:8;1704:9;1700:24;1662:72;:::i;:::-;1753:8;;-1:-1:-1;1636:98:32;-1:-1:-1;1841:2:32;1826:18;;1813:32;;-1:-1:-1;1857:16:32;;;1854:36;;;1886:1;1883;1876:12;1854:36;;1925:72;1989:7;1978:8;1967:9;1963:24;1925:72;:::i;:::-;915:1142;;;;-1:-1:-1;915:1142:32;;-1:-1:-1;915:1142:32;;2016:8;;915:1142;-1:-1:-1;;;915:1142:32:o;2062:154::-;2148:42;2141:5;2137:54;2130:5;2127:65;2117:93;;2206:1;2203;2196:12;2221:247;2280:6;2333:2;2321:9;2312:7;2308:23;2304:32;2301:52;;;2349:1;2346;2339:12;2301:52;2388:9;2375:23;2407:31;2432:5;2407:31;:::i;2961:794::-;3104:6;3112;3120;3128;3181:2;3169:9;3160:7;3156:23;3152:32;3149:52;;;3197:1;3194;3187:12;3149:52;3237:9;3224:23;3266:18;3307:2;3299:6;3296:14;3293:34;;;3323:1;3320;3313:12;3293:34;3362:70;3424:7;3415:6;3404:9;3400:22;3362:70;:::i;:::-;3451:8;;-1:-1:-1;3336:96:32;-1:-1:-1;3539:2:32;3524:18;;3511:32;;-1:-1:-1;3555:16:32;;;3552:36;;;3584:1;3581;3574:12;3552:36;;3623:72;3687:7;3676:8;3665:9;3661:24;3623:72;:::i;:::-;2961:794;;;;-1:-1:-1;3714:8:32;-1:-1:-1;;;;2961:794:32:o;3760:1458::-;4008:6;4016;4024;4032;4040;4048;4056;4064;4117:3;4105:9;4096:7;4092:23;4088:33;4085:53;;;4134:1;4131;4124:12;4085:53;4174:9;4161:23;4203:18;4244:2;4236:6;4233:14;4230:34;;;4260:1;4257;4250:12;4230:34;4299:70;4361:7;4352:6;4341:9;4337:22;4299:70;:::i;:::-;4388:8;;-1:-1:-1;4273:96:32;-1:-1:-1;4476:2:32;4461:18;;4448:32;;-1:-1:-1;4492:16:32;;;4489:36;;;4521:1;4518;4511:12;4489:36;4560:72;4624:7;4613:8;4602:9;4598:24;4560:72;:::i;:::-;4651:8;;-1:-1:-1;4534:98:32;-1:-1:-1;4739:2:32;4724:18;;4711:32;;-1:-1:-1;4755:16:32;;;4752:36;;;4784:1;4781;4774:12;4752:36;4823:72;4887:7;4876:8;4865:9;4861:24;4823:72;:::i;:::-;4914:8;;-1:-1:-1;4797:98:32;-1:-1:-1;5002:2:32;4987:18;;4974:32;;-1:-1:-1;5018:16:32;;;5015:36;;;5047:1;5044;5037:12;5015:36;;5086:72;5150:7;5139:8;5128:9;5124:24;5086:72;:::i;:::-;3760:1458;;;;-1:-1:-1;3760:1458:32;;-1:-1:-1;3760:1458:32;;;;;;5177:8;-1:-1:-1;;;3760:1458:32:o;5223:184::-;5275:77;5272:1;5265:88;5372:4;5369:1;5362:15;5396:4;5393:1;5386:15;5412:604;5505:4;5511:6;5571:11;5558:25;5661:66;5650:8;5634:14;5630:29;5626:102;5606:18;5602:127;5592:155;;5743:1;5740;5733:12;5592:155;5770:33;;5822:20;;;-1:-1:-1;5865:18:32;5854:30;;5851:50;;;5897:1;5894;5887:12;5851:50;5930:4;5918:17;;-1:-1:-1;5981:1:32;5977:14;;;5961;5957:35;5947:46;;5944:66;;;6006:1;6003;5996:12;6021:358;6121:6;6116:3;6109:19;6091:3;6151:66;6143:6;6140:78;6137:98;;;6231:1;6228;6221:12;6137:98;6267:6;6264:1;6260:14;6319:8;6312:5;6305:4;6300:3;6296:14;6283:45;6348:18;;;;6368:4;6344:29;;6021:358;-1:-1:-1;;;6021:358:32:o;6384:639::-;6701:42;6693:6;6689:55;6678:9;6671:74;6781:2;6776;6765:9;6761:18;6754:30;6652:4;6807:73;6876:2;6865:9;6861:18;6853:6;6845;6807:73;:::i;:::-;6928:9;6920:6;6916:22;6911:2;6900:9;6896:18;6889:50;6956:61;7010:6;7002;6994;6956:61;:::i;:::-;6948:69;6384:639;-1:-1:-1;;;;;;;;6384:639:32:o;7028:519::-;7305:2;7294:9;7287:21;7268:4;7331:73;7400:2;7389:9;7385:18;7377:6;7369;7331:73;:::i;:::-;7452:9;7444:6;7440:22;7435:2;7424:9;7420:18;7413:50;7480:61;7534:6;7526;7518;7480:61;:::i;:::-;7472:69;7028:519;-1:-1:-1;;;;;;;7028:519:32:o;7552:118::-;7638:5;7631:13;7624:21;7617:5;7614:32;7604:60;;7660:1;7657;7650:12;7675:241;7731:6;7784:2;7772:9;7763:7;7759:23;7755:32;7752:52;;;7800:1;7797;7790:12;7752:52;7839:9;7826:23;7858:28;7880:5;7858:28;:::i;8529:245::-;8596:6;8649:2;8637:9;8628:7;8624:23;8620:32;8617:52;;;8665:1;8662;8655:12;8617:52;8697:9;8691:16;8716:28;8738:5;8716:28;:::i;8779:282::-;8846:9;;;8867:11;;;8864:191;;;8911:77;8908:1;8901:88;9012:4;9009:1;9002:15;9040:4;9037:1;9030:15"},"gasEstimates":{"creation":{"codeDepositCost":"1024600","executionCost":"infinite","totalCost":"infinite"},"external":{"burn(address[],uint256[][],uint256[][])":"infinite","burnFor(address[],address[],uint256[][],uint256[][])":"infinite","forwarderRegistry()":"infinite","isApprovedTokens(address)":"2547","isTrustedForwarder(address)":"infinite","owner()":"infinite","setApprovedTokens(address[],bool[])":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"burn(address[],uint256[][],uint256[][])":"0458935e","burnFor(address[],address[],uint256[][],uint256[][])":"f0a71104","forwarderRegistry()":"2b4c9f16","isApprovedTokens(address)":"0a0a3325","isTrustedForwarder(address)":"572b6c05","owner()":"8da5cb5b","setApprovedTokens(address[],bool[])":"92463bed","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC1155Burnable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletNotApproved\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TokensBurnt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"ids\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"values\",\"type\":\"uint256[][]\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"ids\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"values\",\"type\":\"uint256[][]\"}],\"name\":\"burnFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155Burnable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\"}],\"name\":\"setApprovedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"burn(address[],uint256[][],uint256[][])\":{\"params\":{\"ids\":\"The token ids to burn.\",\"values\":\"The amount of tokens to burn.\"}},\"burnFor(address[],address[],uint256[][],uint256[][])\":{\"params\":{\"from\":\"The wallet to burn the tokens from.\",\"ids\":\"The token ids to burn.\",\"values\":\"The amount of tokens to burn.\"}},\"constructor\":{\"params\":{\"forwarderRegistry\":\"The forwarder registry contract.\",\"tokens\":\"The IERC1155Burnable erc1155 contract.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Anichess ERC1155 Merkle Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"TokensBurnt(address,uint256,address,uint256[],uint256[])\":{\"notice\":\"Event emitted when tokens are burnt.\"}},\"kind\":\"user\",\"methods\":{\"burn(address[],uint256[][],uint256[][])\":{\"notice\":\"Burns the token from sender\"},\"burnFor(address[],address[],uint256[][],uint256[][])\":{\"notice\":\"Burns the token from a wallet.\"},\"constructor\":{\"notice\":\"Constructor for the ERC1155TokenBurn contract.\"},\"isApprovedTokens(address)\":{\"notice\":\"The IERC1155Burnable erc1155 contract.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol\":\"ERC1155TokenBurn\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xc73c79ec8b1acdaccb4bbdab1f460043ddb27f3b5300389f6ec672bf0f1c7ae6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess ERC1155 Merkle Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract ERC1155TokenBurn is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    uint256 initial_time;\\n    uint256 interval_length; // time of each cycle\\n\\n    // function\\n    // current_interval = block.timestamp - initial_time / interval_length;\\n\\n    struct PoolStatus {\\n        uint256 totalBurned;\\n        uint256 totalClaimed;\\n    }\\n\\n    mapping(address => mapping(uint256 => uint256)) tokenWeight;\\n    mapping(uint256 => PoolStatus) intervalPoolStatus;\\n\\n    /// @notice The IERC1155Burnable erc1155 contract.\\n    mapping(address => bool) public isApprovedTokens;\\n\\n    /// @notice Event emitted when tokens are burnt.\\n    event TokensBurnt(address indexed burner, uint256 indexed timestamp, address indexed token, uint256[] ids, uint256[] values);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    error InconsistentArrays();\\n\\n    error TokenNotApproved();\\n\\n    error WalletNotApproved();\\n\\n    /**\\n     * @notice Constructor for the ERC1155TokenBurn contract.\\n     * @param tokens The IERC1155Burnable erc1155 contract.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        IERC1155Burnable[] memory tokens,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            isApprovedTokens[address(tokens[i])] = true;\\n        }\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    function setApprovedTokens(IERC1155Burnable[] calldata tokens, bool[] calldata enabled) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (tokens.length != enabled.length) {\\n            revert InconsistentArrays();\\n        }\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            isApprovedTokens[address(tokens[i])] = enabled[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Burns the token from sender\\n     * @param ids The token ids to burn.\\n     * @param values The amount of tokens to burn.\\n     */\\n    function burn(address[] calldata tokens, uint256[][] calldata ids, uint256[][] calldata values) external {\\n        if (tokens.length != ids.length || tokens.length != values.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (!isApprovedTokens[tokens[i]]) {\\n                revert TokenNotApproved();\\n            }\\n            if (ids[i].length != values[i].length) {\\n                revert InconsistentArrays();\\n            }\\n\\n            IERC1155Burnable(tokens[i]).batchBurnFrom(_msgSender(), ids[i], values[i]);\\n            emit TokensBurnt(_msgSender(), block.timestamp, tokens[i], ids[i], values[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Burns the token from a wallet.\\n     * @param from The wallet to burn the tokens from.\\n     * @param ids The token ids to burn.\\n     * @param values The amount of tokens to burn.\\n     */\\n    function burnFor(address[] calldata from, address[] calldata tokens, uint256[][] calldata ids, uint256[][] calldata values) external {\\n        if (from.length != tokens.length || from.length != ids.length || from.length != values.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        for (uint256 i = 0; i < from.length; i++) {\\n            if (!isApprovedTokens[tokens[i]]) {\\n                revert TokenNotApproved();\\n            }\\n            if (ids[i].length != values[i].length) {\\n                revert InconsistentArrays();\\n            }\\n\\n            if (!IERC1155(address(tokens[i])).isApprovedForAll(from[i], _msgSender())) {\\n                revert WalletNotApproved();\\n            }\\n\\n            IERC1155Burnable(tokens[i]).batchBurnFrom(from[i], ids[i], values[i]);\\n            emit TokensBurnt(from[i], block.timestamp, tokens[i], ids[i], values[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x24af846179f7b27f60ea16f79a615a1f8243e8376e878719c9287be96e30e786\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2620,"contract":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol:ERC1155TokenBurn","label":"initial_time","offset":0,"slot":"0","type":"t_uint256"},{"astId":2622,"contract":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol:ERC1155TokenBurn","label":"interval_length","offset":0,"slot":"1","type":"t_uint256"},{"astId":2633,"contract":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol:ERC1155TokenBurn","label":"tokenWeight","offset":0,"slot":"2","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":2638,"contract":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol:ERC1155TokenBurn","label":"intervalPoolStatus","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_struct(PoolStatus)2627_storage)"},{"astId":2643,"contract":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol:ERC1155TokenBurn","label":"isApprovedTokens","offset":0,"slot":"4","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_struct(PoolStatus)2627_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC1155TokenBurn.PoolStatus)","numberOfBytes":"32","value":"t_struct(PoolStatus)2627_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(PoolStatus)2627_storage":{"encoding":"inplace","label":"struct ERC1155TokenBurn.PoolStatus","members":[{"astId":2624,"contract":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol:ERC1155TokenBurn","label":"totalBurned","offset":0,"slot":"0","type":"t_uint256"},{"astId":2626,"contract":"contracts/burn/AnichessOrbsBurnPoolSimpleMultiple.sol:ERC1155TokenBurn","label":"totalClaimed","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"TokensBurnt(address,uint256,address,uint256[],uint256[])":{"notice":"Event emitted when tokens are burnt."}},"kind":"user","methods":{"burn(address[],uint256[][],uint256[][])":{"notice":"Burns the token from sender"},"burnFor(address[],address[],uint256[][],uint256[][])":{"notice":"Burns the token from a wallet."},"constructor":{"notice":"Constructor for the ERC1155TokenBurn contract."},"isApprovedTokens(address)":{"notice":"The IERC1155Burnable erc1155 contract."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/burn/AnichessOrbsBurnPoolSimpleSingle.sol":{"ERC1155TokenBurn":{"abi":[{"inputs":[{"internalType":"contract IERC1155Burnable","name":"token","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrays","type":"error"},{"inputs":[],"name":"NotApproved","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TokensBurnt","type":"event"},{"inputs":[],"name":"TOKEN","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnFor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"burn(uint256[],uint256[])":{"params":{"ids":"The token ids to burn.","values":"The amount of tokens to burn."}},"burnFor(address,uint256[],uint256[])":{"params":{"from":"The wallet to burn the tokens from.","ids":"The token ids to burn.","values":"The amount of tokens to burn."}},"constructor":{"params":{"forwarderRegistry":"The forwarder registry contract.","token":"The IERC1155Burnable erc1155 contract."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Anichess ERC1155 Merkle Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_3108":{"entryPoint":null,"id":3108,"parameterSlots":2,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":162,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":108,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":285,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":333,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC1155Burnable_$948t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":451,"id":null,"parameterSlots":2,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":514,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Burnable":{"entryPoint":426,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:871:32","nodeType":"YulBlock","src":"0:871:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"77:86:32","nodeType":"YulBlock","src":"77:86:32","statements":[{"body":{"nativeSrc":"141:16:32","nodeType":"YulBlock","src":"141:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:32","nodeType":"YulLiteral","src":"150:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:32","nodeType":"YulLiteral","src":"153:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:32","nodeType":"YulIdentifier","src":"143:6:32"},"nativeSrc":"143:12:32","nodeType":"YulFunctionCall","src":"143:12:32"},"nativeSrc":"143:12:32","nodeType":"YulExpressionStatement","src":"143:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:32","nodeType":"YulIdentifier","src":"100:5:32"},{"arguments":[{"name":"value","nativeSrc":"111:5:32","nodeType":"YulIdentifier","src":"111:5:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:32","nodeType":"YulLiteral","src":"126:3:32","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:32","nodeType":"YulLiteral","src":"131:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:32","nodeType":"YulIdentifier","src":"122:3:32"},"nativeSrc":"122:11:32","nodeType":"YulFunctionCall","src":"122:11:32"},{"kind":"number","nativeSrc":"135:1:32","nodeType":"YulLiteral","src":"135:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:32","nodeType":"YulIdentifier","src":"118:3:32"},"nativeSrc":"118:19:32","nodeType":"YulFunctionCall","src":"118:19:32"}],"functionName":{"name":"and","nativeSrc":"107:3:32","nodeType":"YulIdentifier","src":"107:3:32"},"nativeSrc":"107:31:32","nodeType":"YulFunctionCall","src":"107:31:32"}],"functionName":{"name":"eq","nativeSrc":"97:2:32","nodeType":"YulIdentifier","src":"97:2:32"},"nativeSrc":"97:42:32","nodeType":"YulFunctionCall","src":"97:42:32"}],"functionName":{"name":"iszero","nativeSrc":"90:6:32","nodeType":"YulIdentifier","src":"90:6:32"},"nativeSrc":"90:50:32","nodeType":"YulFunctionCall","src":"90:50:32"},"nativeSrc":"87:70:32","nodeType":"YulIf","src":"87:70:32"}]},"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"14:149:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:32","nodeType":"YulTypedName","src":"66:5:32","type":""}],"src":"14:149:32"},{"body":{"nativeSrc":"316:323:32","nodeType":"YulBlock","src":"316:323:32","statements":[{"body":{"nativeSrc":"362:16:32","nodeType":"YulBlock","src":"362:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"371:1:32","nodeType":"YulLiteral","src":"371:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"374:1:32","nodeType":"YulLiteral","src":"374:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"364:6:32","nodeType":"YulIdentifier","src":"364:6:32"},"nativeSrc":"364:12:32","nodeType":"YulFunctionCall","src":"364:12:32"},"nativeSrc":"364:12:32","nodeType":"YulExpressionStatement","src":"364:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"337:7:32","nodeType":"YulIdentifier","src":"337:7:32"},{"name":"headStart","nativeSrc":"346:9:32","nodeType":"YulIdentifier","src":"346:9:32"}],"functionName":{"name":"sub","nativeSrc":"333:3:32","nodeType":"YulIdentifier","src":"333:3:32"},"nativeSrc":"333:23:32","nodeType":"YulFunctionCall","src":"333:23:32"},{"kind":"number","nativeSrc":"358:2:32","nodeType":"YulLiteral","src":"358:2:32","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"329:3:32","nodeType":"YulIdentifier","src":"329:3:32"},"nativeSrc":"329:32:32","nodeType":"YulFunctionCall","src":"329:32:32"},"nativeSrc":"326:52:32","nodeType":"YulIf","src":"326:52:32"},{"nativeSrc":"387:29:32","nodeType":"YulVariableDeclaration","src":"387:29:32","value":{"arguments":[{"name":"headStart","nativeSrc":"406:9:32","nodeType":"YulIdentifier","src":"406:9:32"}],"functionName":{"name":"mload","nativeSrc":"400:5:32","nodeType":"YulIdentifier","src":"400:5:32"},"nativeSrc":"400:16:32","nodeType":"YulFunctionCall","src":"400:16:32"},"variables":[{"name":"value","nativeSrc":"391:5:32","nodeType":"YulTypedName","src":"391:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"468:5:32","nodeType":"YulIdentifier","src":"468:5:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"425:42:32","nodeType":"YulIdentifier","src":"425:42:32"},"nativeSrc":"425:49:32","nodeType":"YulFunctionCall","src":"425:49:32"},"nativeSrc":"425:49:32","nodeType":"YulExpressionStatement","src":"425:49:32"},{"nativeSrc":"483:15:32","nodeType":"YulAssignment","src":"483:15:32","value":{"name":"value","nativeSrc":"493:5:32","nodeType":"YulIdentifier","src":"493:5:32"},"variableNames":[{"name":"value0","nativeSrc":"483:6:32","nodeType":"YulIdentifier","src":"483:6:32"}]},{"nativeSrc":"507:40:32","nodeType":"YulVariableDeclaration","src":"507:40:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"532:9:32","nodeType":"YulIdentifier","src":"532:9:32"},{"kind":"number","nativeSrc":"543:2:32","nodeType":"YulLiteral","src":"543:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"528:3:32","nodeType":"YulIdentifier","src":"528:3:32"},"nativeSrc":"528:18:32","nodeType":"YulFunctionCall","src":"528:18:32"}],"functionName":{"name":"mload","nativeSrc":"522:5:32","nodeType":"YulIdentifier","src":"522:5:32"},"nativeSrc":"522:25:32","nodeType":"YulFunctionCall","src":"522:25:32"},"variables":[{"name":"value_1","nativeSrc":"511:7:32","nodeType":"YulTypedName","src":"511:7:32","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"599:7:32","nodeType":"YulIdentifier","src":"599:7:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"556:42:32","nodeType":"YulIdentifier","src":"556:42:32"},"nativeSrc":"556:51:32","nodeType":"YulFunctionCall","src":"556:51:32"},"nativeSrc":"556:51:32","nodeType":"YulExpressionStatement","src":"556:51:32"},{"nativeSrc":"616:17:32","nodeType":"YulAssignment","src":"616:17:32","value":{"name":"value_1","nativeSrc":"626:7:32","nodeType":"YulIdentifier","src":"626:7:32"},"variableNames":[{"name":"value1","nativeSrc":"616:6:32","nodeType":"YulIdentifier","src":"616:6:32"}]}]},"name":"abi_decode_tuple_t_contract$_IERC1155Burnable_$948t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:471:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"274:9:32","nodeType":"YulTypedName","src":"274:9:32","type":""},{"name":"dataEnd","nativeSrc":"285:7:32","nodeType":"YulTypedName","src":"285:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"297:6:32","nodeType":"YulTypedName","src":"297:6:32","type":""},{"name":"value1","nativeSrc":"305:6:32","nodeType":"YulTypedName","src":"305:6:32","type":""}],"src":"168:471:32"},{"body":{"nativeSrc":"693:176:32","nodeType":"YulBlock","src":"693:176:32","statements":[{"nativeSrc":"703:17:32","nodeType":"YulAssignment","src":"703:17:32","value":{"arguments":[{"name":"x","nativeSrc":"715:1:32","nodeType":"YulIdentifier","src":"715:1:32"},{"name":"y","nativeSrc":"718:1:32","nodeType":"YulIdentifier","src":"718:1:32"}],"functionName":{"name":"sub","nativeSrc":"711:3:32","nodeType":"YulIdentifier","src":"711:3:32"},"nativeSrc":"711:9:32","nodeType":"YulFunctionCall","src":"711:9:32"},"variableNames":[{"name":"diff","nativeSrc":"703:4:32","nodeType":"YulIdentifier","src":"703:4:32"}]},{"body":{"nativeSrc":"752:111:32","nodeType":"YulBlock","src":"752:111:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"773:1:32","nodeType":"YulLiteral","src":"773:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"780:3:32","nodeType":"YulLiteral","src":"780:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"785:10:32","nodeType":"YulLiteral","src":"785:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"776:3:32","nodeType":"YulIdentifier","src":"776:3:32"},"nativeSrc":"776:20:32","nodeType":"YulFunctionCall","src":"776:20:32"}],"functionName":{"name":"mstore","nativeSrc":"766:6:32","nodeType":"YulIdentifier","src":"766:6:32"},"nativeSrc":"766:31:32","nodeType":"YulFunctionCall","src":"766:31:32"},"nativeSrc":"766:31:32","nodeType":"YulExpressionStatement","src":"766:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"817:1:32","nodeType":"YulLiteral","src":"817:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"820:4:32","nodeType":"YulLiteral","src":"820:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"810:6:32","nodeType":"YulIdentifier","src":"810:6:32"},"nativeSrc":"810:15:32","nodeType":"YulFunctionCall","src":"810:15:32"},"nativeSrc":"810:15:32","nodeType":"YulExpressionStatement","src":"810:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"845:1:32","nodeType":"YulLiteral","src":"845:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"848:4:32","nodeType":"YulLiteral","src":"848:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"838:6:32","nodeType":"YulIdentifier","src":"838:6:32"},"nativeSrc":"838:15:32","nodeType":"YulFunctionCall","src":"838:15:32"},"nativeSrc":"838:15:32","nodeType":"YulExpressionStatement","src":"838:15:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"735:4:32","nodeType":"YulIdentifier","src":"735:4:32"},{"name":"x","nativeSrc":"741:1:32","nodeType":"YulIdentifier","src":"741:1:32"}],"functionName":{"name":"gt","nativeSrc":"732:2:32","nodeType":"YulIdentifier","src":"732:2:32"},"nativeSrc":"732:11:32","nodeType":"YulFunctionCall","src":"732:11:32"},"nativeSrc":"729:134:32","nodeType":"YulIf","src":"729:134:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"644:225:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"675:1:32","nodeType":"YulTypedName","src":"675:1:32","type":""},{"name":"y","nativeSrc":"678:1:32","nodeType":"YulTypedName","src":"678:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"684:4:32","nodeType":"YulTypedName","src":"684:4:32","type":""}],"src":"644:225:32"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Burnable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC1155Burnable_$948t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC1155Burnable(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC1155Burnable(value_1)\n        value1 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b5060405162000f2938038062000f298339810160408190526200003491620001c3565b6001600160a01b038116608052336200005881620000516200006c565b90620000a2565b50506001600160a01b031660a05262000224565b6000806200009c60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000202565b92915050565b6001600160a01b03811615620000f95781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001196307f5828d60e41b6001620001116200011d565b91906200014d565b5050565b6000806200009c60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000202565b600160e01b6001600160e01b03198316016200017c576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001c057600080fd5b50565b60008060408385031215620001d757600080fd5b8251620001e481620001aa565b6020840151909250620001f781620001aa565b809150509250929050565b818103818111156200009c57634e487b7160e01b600052601160045260246000fd5b60805160a051610cb6620002736000396000818161014e01528181610234015281816103d801526104de01526000818160b70152818161010c0152818161088e01526109160152610cb66000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146101705780639d33fe5714610178578063e4cbb46e1461018d578063f2fde38b146101a057600080fd5b806301ffc9a71461008d5780632b4c9f16146100b5578063572b6c05146100fc57806382bfefc814610149575b600080fd5b6100a061009b366004610992565b6101b3565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6100a061010a366004610a04565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6100d77f000000000000000000000000000000000000000000000000000000000000000081565b6100d76101cd565b61018b610186366004610a6b565b6101f9565b005b61018b61019b366004610aec565b6104a3565b61018b6101ae366004610a04565b6105d8565b60006101c7826101c16105f6565b90610624565b92915050565b60006101f46101da6106fe565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b828114610232576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e985e9c58661027761072c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190610b58565b61039b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f455243313135353a206275726e2063616c6c6572206973206e6f74206170707260448201527f6f7665640000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517f8053493400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906380534934906104159088908890889088908890600401610bc5565b600060405180830381600087803b15801561042f57600080fd5b505af1158015610443573d6000803e3d6000fd5b50505050428573ffffffffffffffffffffffffffffffffffffffff167f674e56473ddb0f588fb74339bd1423aa4224362e7323ddca32ab17328eb8003f868686866040516104949493929190610c14565b60405180910390a35050505050565b8281146104dc576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638053493461052061072c565b868686866040518663ffffffff1660e01b8152600401610544959493929190610bc5565b600060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050504261057f61072c565b73ffffffffffffffffffffffffffffffffffffffff167f674e56473ddb0f588fb74339bd1423aa4224362e7323ddca32ab17328eb8003f868686866040516105ca9493929190610c14565b60405180910390a350505050565b6105f36105e361072c565b826105ec6106fe565b9190610736565b50565b6000806101c760017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610c46565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610674575060006101c7565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016106c5575060016101c7565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806101c760017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610c46565b60006101f461084b565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146107a3576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610392565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108455783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b60003332148061085b5750601836105b1561086557503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061098157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190610b58565b1561098b57919050565b3391505090565b6000602082840312156109a457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109d457600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109ff57600080fd5b919050565b600060208284031215610a1657600080fd5b6109d4826109db565b60008083601f840112610a3157600080fd5b50813567ffffffffffffffff811115610a4957600080fd5b6020830191508360208260051b8501011115610a6457600080fd5b9250929050565b600080600080600060608688031215610a8357600080fd5b610a8c866109db565b9450602086013567ffffffffffffffff80821115610aa957600080fd5b610ab589838a01610a1f565b90965094506040880135915080821115610ace57600080fd5b50610adb88828901610a1f565b969995985093965092949392505050565b60008060008060408587031215610b0257600080fd5b843567ffffffffffffffff80821115610b1a57600080fd5b610b2688838901610a1f565b90965094506020870135915080821115610b3f57600080fd5b50610b4c87828801610a1f565b95989497509550505050565b600060208284031215610b6a57600080fd5b815180151581146109d457600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610bac57600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff86168152606060208201526000610bf5606083018688610b7a565b8281036040840152610c08818587610b7a565b98975050505050505050565b604081526000610c28604083018688610b7a565b8281036020840152610c3b818587610b7a565b979650505050505050565b818103818111156101c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220974a73ae5e1cf1aa33e1e1ee62cbd50b98f50920c7b39a5ad80dd9a0a7b2acd864736f6c63430008160033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xF29 CODESIZE SUB DUP1 PUSH3 0xF29 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x58 DUP2 PUSH3 0x51 PUSH3 0x6C JUMP JUMPDEST SWAP1 PUSH3 0xA2 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE PUSH3 0x224 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x9C PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x202 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0xF9 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x119 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x111 PUSH3 0x11D JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x14D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x9C PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x202 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x17C JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x1E4 DUP2 PUSH3 0x1AA JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x1F7 DUP2 PUSH3 0x1AA JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x9C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0xCB6 PUSH3 0x273 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x14E ADD MSTORE DUP2 DUP2 PUSH2 0x234 ADD MSTORE DUP2 DUP2 PUSH2 0x3D8 ADD MSTORE PUSH2 0x4DE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0xB7 ADD MSTORE DUP2 DUP2 PUSH2 0x10C ADD MSTORE DUP2 DUP2 PUSH2 0x88E ADD MSTORE PUSH2 0x916 ADD MSTORE PUSH2 0xCB6 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x9D33FE57 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xE4CBB46E EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x82BFEFC8 EQ PUSH2 0x149 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x992 JUMP JUMPDEST PUSH2 0x1B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0xA04 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0xD7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xD7 PUSH2 0x1CD JUMP JUMPDEST PUSH2 0x18B PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6B JUMP JUMPDEST PUSH2 0x1F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18B PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x1AE CALLDATASIZE PUSH1 0x4 PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x5D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C7 DUP3 PUSH2 0x1C1 PUSH2 0x5F6 JUMP JUMPDEST SWAP1 PUSH2 0x624 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F4 PUSH2 0x1DA PUSH2 0x6FE JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x232 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE985E9C5 DUP7 PUSH2 0x277 PUSH2 0x72C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x39B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E2063616C6C6572206973206E6F742061707072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F76656400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x415 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x443 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP TIMESTAMP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x674E56473DDB0F588FB74339BD1423AA4224362E7323DDCA32AB17328EB8003F DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x494 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 PUSH2 0x520 PUSH2 0x72C JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x544 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP TIMESTAMP PUSH2 0x57F PUSH2 0x72C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x674E56473DDB0F588FB74339BD1423AA4224362E7323DDCA32AB17328EB8003F DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x5CA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x5F3 PUSH2 0x5E3 PUSH2 0x72C JUMP JUMPDEST DUP3 PUSH2 0x5EC PUSH2 0x6FE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x736 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C7 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x674 JUMPI POP PUSH1 0x0 PUSH2 0x1C7 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x6C5 JUMPI POP PUSH1 0x1 PUSH2 0x1C7 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C7 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F4 PUSH2 0x84B JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x7A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x392 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x845 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x85B JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x865 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x981 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x95D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x981 SWAP2 SWAP1 PUSH2 0xB58 JUMP JUMPDEST ISZERO PUSH2 0x98B JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9D4 DUP3 PUSH2 0x9DB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xA64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8C DUP7 PUSH2 0x9DB JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB5 DUP10 DUP4 DUP11 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xADB DUP9 DUP3 DUP10 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB26 DUP9 DUP4 DUP10 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB4C DUP8 DUP3 DUP9 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0xBAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xBF5 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0xB7A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xC08 DUP2 DUP6 DUP8 PUSH2 0xB7A JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC28 PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0xB7A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC3B DUP2 DUP6 DUP8 PUSH2 0xB7A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1C7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 0x4A PUSH20 0xAE5E1CF1AA33E1E1EE62CBD50B98F50920C7B39A GAS 0xD8 0xD 0xD9 LOG0 0xA7 0xB2 0xAC 0xD8 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1177:2575:29:-:0;;;1961:200;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;2119:10:29;1008:63:0;2119:10:29;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;;2141:13:29::2;;::::0;1177:2575;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:149:32:-;-1:-1:-1;;;;;107:31:32;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:471::-;297:6;305;358:2;346:9;337:7;333:23;329:32;326:52;;;374:1;371;364:12;326:52;406:9;400:16;425:49;468:5;425:49;:::i;:::-;543:2;528:18;;522:25;493:5;;-1:-1:-1;556:51:32;522:25;556:51;:::i;:::-;626:7;616:17;;;168:471;;;;;:::o;644:225::-;711:9;;;732:11;;;729:134;;;785:10;780:3;776:20;773:1;766:31;820:4;817:1;810:15;848:4;845:1;838:15;644:225;1177:2575:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@TOKEN_3064":{"entryPoint":null,"id":3064,"parameterSlots":0,"returnSlots":0},"@_msgSender_3122":{"entryPoint":1836,"id":3122,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":2123,"id":652,"parameterSlots":0,"returnSlots":1},"@burnFor_3232":{"entryPoint":505,"id":3232,"parameterSlots":5,"returnSlots":0},"@burn_3175":{"entryPoint":1187,"id":3175,"parameterSlots":4,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":1790,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":1526,"id":531,"parameterSlots":0,"returnSlots":1},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":461,"id":62,"parameterSlots":0,"returnSlots":1},"@supportsInterface_413":{"entryPoint":435,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":1572,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":1846,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":1496,"id":79,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":2523,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":2591,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":2564,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":2667,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":2796,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":2904,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":2450,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":2938,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3013,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3092,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$948__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12669bb8fa5986d3fd494c47774708cf75572e0072244adbabca7fc66547bec5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3142,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:6514:32","nodeType":"YulBlock","src":"0:6514:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"83:263:32","nodeType":"YulBlock","src":"83:263:32","statements":[{"body":{"nativeSrc":"129:16:32","nodeType":"YulBlock","src":"129:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:32","nodeType":"YulLiteral","src":"138:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:32","nodeType":"YulLiteral","src":"141:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:32","nodeType":"YulIdentifier","src":"131:6:32"},"nativeSrc":"131:12:32","nodeType":"YulFunctionCall","src":"131:12:32"},"nativeSrc":"131:12:32","nodeType":"YulExpressionStatement","src":"131:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:32","nodeType":"YulIdentifier","src":"104:7:32"},{"name":"headStart","nativeSrc":"113:9:32","nodeType":"YulIdentifier","src":"113:9:32"}],"functionName":{"name":"sub","nativeSrc":"100:3:32","nodeType":"YulIdentifier","src":"100:3:32"},"nativeSrc":"100:23:32","nodeType":"YulFunctionCall","src":"100:23:32"},{"kind":"number","nativeSrc":"125:2:32","nodeType":"YulLiteral","src":"125:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:32","nodeType":"YulIdentifier","src":"96:3:32"},"nativeSrc":"96:32:32","nodeType":"YulFunctionCall","src":"96:32:32"},"nativeSrc":"93:52:32","nodeType":"YulIf","src":"93:52:32"},{"nativeSrc":"154:36:32","nodeType":"YulVariableDeclaration","src":"154:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:32","nodeType":"YulIdentifier","src":"180:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:32","nodeType":"YulIdentifier","src":"167:12:32"},"nativeSrc":"167:23:32","nodeType":"YulFunctionCall","src":"167:23:32"},"variables":[{"name":"value","nativeSrc":"158:5:32","nodeType":"YulTypedName","src":"158:5:32","type":""}]},{"body":{"nativeSrc":"300:16:32","nodeType":"YulBlock","src":"300:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:32","nodeType":"YulLiteral","src":"309:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:32","nodeType":"YulLiteral","src":"312:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:32","nodeType":"YulIdentifier","src":"302:6:32"},"nativeSrc":"302:12:32","nodeType":"YulFunctionCall","src":"302:12:32"},"nativeSrc":"302:12:32","nodeType":"YulExpressionStatement","src":"302:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:32","nodeType":"YulIdentifier","src":"212:5:32"},{"arguments":[{"name":"value","nativeSrc":"223:5:32","nodeType":"YulIdentifier","src":"223:5:32"},{"kind":"number","nativeSrc":"230:66:32","nodeType":"YulLiteral","src":"230:66:32","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:32","nodeType":"YulIdentifier","src":"219:3:32"},"nativeSrc":"219:78:32","nodeType":"YulFunctionCall","src":"219:78:32"}],"functionName":{"name":"eq","nativeSrc":"209:2:32","nodeType":"YulIdentifier","src":"209:2:32"},"nativeSrc":"209:89:32","nodeType":"YulFunctionCall","src":"209:89:32"}],"functionName":{"name":"iszero","nativeSrc":"202:6:32","nodeType":"YulIdentifier","src":"202:6:32"},"nativeSrc":"202:97:32","nodeType":"YulFunctionCall","src":"202:97:32"},"nativeSrc":"199:117:32","nodeType":"YulIf","src":"199:117:32"},{"nativeSrc":"325:15:32","nodeType":"YulAssignment","src":"325:15:32","value":{"name":"value","nativeSrc":"335:5:32","nodeType":"YulIdentifier","src":"335:5:32"},"variableNames":[{"name":"value0","nativeSrc":"325:6:32","nodeType":"YulIdentifier","src":"325:6:32"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:32","nodeType":"YulTypedName","src":"49:9:32","type":""},{"name":"dataEnd","nativeSrc":"60:7:32","nodeType":"YulTypedName","src":"60:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:32","nodeType":"YulTypedName","src":"72:6:32","type":""}],"src":"14:332:32"},{"body":{"nativeSrc":"446:92:32","nodeType":"YulBlock","src":"446:92:32","statements":[{"nativeSrc":"456:26:32","nodeType":"YulAssignment","src":"456:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:32","nodeType":"YulIdentifier","src":"468:9:32"},{"kind":"number","nativeSrc":"479:2:32","nodeType":"YulLiteral","src":"479:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:32","nodeType":"YulIdentifier","src":"464:3:32"},"nativeSrc":"464:18:32","nodeType":"YulFunctionCall","src":"464:18:32"},"variableNames":[{"name":"tail","nativeSrc":"456:4:32","nodeType":"YulIdentifier","src":"456:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:32","nodeType":"YulIdentifier","src":"498:9:32"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:32","nodeType":"YulIdentifier","src":"523:6:32"}],"functionName":{"name":"iszero","nativeSrc":"516:6:32","nodeType":"YulIdentifier","src":"516:6:32"},"nativeSrc":"516:14:32","nodeType":"YulFunctionCall","src":"516:14:32"}],"functionName":{"name":"iszero","nativeSrc":"509:6:32","nodeType":"YulIdentifier","src":"509:6:32"},"nativeSrc":"509:22:32","nodeType":"YulFunctionCall","src":"509:22:32"}],"functionName":{"name":"mstore","nativeSrc":"491:6:32","nodeType":"YulIdentifier","src":"491:6:32"},"nativeSrc":"491:41:32","nodeType":"YulFunctionCall","src":"491:41:32"},"nativeSrc":"491:41:32","nodeType":"YulExpressionStatement","src":"491:41:32"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:32","nodeType":"YulTypedName","src":"415:9:32","type":""},{"name":"value0","nativeSrc":"426:6:32","nodeType":"YulTypedName","src":"426:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:32","nodeType":"YulTypedName","src":"437:4:32","type":""}],"src":"351:187:32"},{"body":{"nativeSrc":"670:125:32","nodeType":"YulBlock","src":"670:125:32","statements":[{"nativeSrc":"680:26:32","nodeType":"YulAssignment","src":"680:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"692:9:32","nodeType":"YulIdentifier","src":"692:9:32"},{"kind":"number","nativeSrc":"703:2:32","nodeType":"YulLiteral","src":"703:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"688:3:32","nodeType":"YulIdentifier","src":"688:3:32"},"nativeSrc":"688:18:32","nodeType":"YulFunctionCall","src":"688:18:32"},"variableNames":[{"name":"tail","nativeSrc":"680:4:32","nodeType":"YulIdentifier","src":"680:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"722:9:32","nodeType":"YulIdentifier","src":"722:9:32"},{"arguments":[{"name":"value0","nativeSrc":"737:6:32","nodeType":"YulIdentifier","src":"737:6:32"},{"kind":"number","nativeSrc":"745:42:32","nodeType":"YulLiteral","src":"745:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"733:3:32","nodeType":"YulIdentifier","src":"733:3:32"},"nativeSrc":"733:55:32","nodeType":"YulFunctionCall","src":"733:55:32"}],"functionName":{"name":"mstore","nativeSrc":"715:6:32","nodeType":"YulIdentifier","src":"715:6:32"},"nativeSrc":"715:74:32","nodeType":"YulFunctionCall","src":"715:74:32"},"nativeSrc":"715:74:32","nodeType":"YulExpressionStatement","src":"715:74:32"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"543:252:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"639:9:32","nodeType":"YulTypedName","src":"639:9:32","type":""},{"name":"value0","nativeSrc":"650:6:32","nodeType":"YulTypedName","src":"650:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"661:4:32","nodeType":"YulTypedName","src":"661:4:32","type":""}],"src":"543:252:32"},{"body":{"nativeSrc":"849:147:32","nodeType":"YulBlock","src":"849:147:32","statements":[{"nativeSrc":"859:29:32","nodeType":"YulAssignment","src":"859:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"881:6:32","nodeType":"YulIdentifier","src":"881:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"868:12:32","nodeType":"YulIdentifier","src":"868:12:32"},"nativeSrc":"868:20:32","nodeType":"YulFunctionCall","src":"868:20:32"},"variableNames":[{"name":"value","nativeSrc":"859:5:32","nodeType":"YulIdentifier","src":"859:5:32"}]},{"body":{"nativeSrc":"974:16:32","nodeType":"YulBlock","src":"974:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"983:1:32","nodeType":"YulLiteral","src":"983:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"986:1:32","nodeType":"YulLiteral","src":"986:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"976:6:32","nodeType":"YulIdentifier","src":"976:6:32"},"nativeSrc":"976:12:32","nodeType":"YulFunctionCall","src":"976:12:32"},"nativeSrc":"976:12:32","nodeType":"YulExpressionStatement","src":"976:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"910:5:32","nodeType":"YulIdentifier","src":"910:5:32"},{"arguments":[{"name":"value","nativeSrc":"921:5:32","nodeType":"YulIdentifier","src":"921:5:32"},{"kind":"number","nativeSrc":"928:42:32","nodeType":"YulLiteral","src":"928:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"917:3:32","nodeType":"YulIdentifier","src":"917:3:32"},"nativeSrc":"917:54:32","nodeType":"YulFunctionCall","src":"917:54:32"}],"functionName":{"name":"eq","nativeSrc":"907:2:32","nodeType":"YulIdentifier","src":"907:2:32"},"nativeSrc":"907:65:32","nodeType":"YulFunctionCall","src":"907:65:32"}],"functionName":{"name":"iszero","nativeSrc":"900:6:32","nodeType":"YulIdentifier","src":"900:6:32"},"nativeSrc":"900:73:32","nodeType":"YulFunctionCall","src":"900:73:32"},"nativeSrc":"897:93:32","nodeType":"YulIf","src":"897:93:32"}]},"name":"abi_decode_address","nativeSrc":"800:196:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"828:6:32","nodeType":"YulTypedName","src":"828:6:32","type":""}],"returnVariables":[{"name":"value","nativeSrc":"839:5:32","nodeType":"YulTypedName","src":"839:5:32","type":""}],"src":"800:196:32"},{"body":{"nativeSrc":"1071:116:32","nodeType":"YulBlock","src":"1071:116:32","statements":[{"body":{"nativeSrc":"1117:16:32","nodeType":"YulBlock","src":"1117:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1126:1:32","nodeType":"YulLiteral","src":"1126:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1129:1:32","nodeType":"YulLiteral","src":"1129:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1119:6:32","nodeType":"YulIdentifier","src":"1119:6:32"},"nativeSrc":"1119:12:32","nodeType":"YulFunctionCall","src":"1119:12:32"},"nativeSrc":"1119:12:32","nodeType":"YulExpressionStatement","src":"1119:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1092:7:32","nodeType":"YulIdentifier","src":"1092:7:32"},{"name":"headStart","nativeSrc":"1101:9:32","nodeType":"YulIdentifier","src":"1101:9:32"}],"functionName":{"name":"sub","nativeSrc":"1088:3:32","nodeType":"YulIdentifier","src":"1088:3:32"},"nativeSrc":"1088:23:32","nodeType":"YulFunctionCall","src":"1088:23:32"},{"kind":"number","nativeSrc":"1113:2:32","nodeType":"YulLiteral","src":"1113:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1084:3:32","nodeType":"YulIdentifier","src":"1084:3:32"},"nativeSrc":"1084:32:32","nodeType":"YulFunctionCall","src":"1084:32:32"},"nativeSrc":"1081:52:32","nodeType":"YulIf","src":"1081:52:32"},{"nativeSrc":"1142:39:32","nodeType":"YulAssignment","src":"1142:39:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1171:9:32","nodeType":"YulIdentifier","src":"1171:9:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1152:18:32","nodeType":"YulIdentifier","src":"1152:18:32"},"nativeSrc":"1152:29:32","nodeType":"YulFunctionCall","src":"1152:29:32"},"variableNames":[{"name":"value0","nativeSrc":"1142:6:32","nodeType":"YulIdentifier","src":"1142:6:32"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1001:186:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1037:9:32","nodeType":"YulTypedName","src":"1037:9:32","type":""},{"name":"dataEnd","nativeSrc":"1048:7:32","nodeType":"YulTypedName","src":"1048:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1060:6:32","nodeType":"YulTypedName","src":"1060:6:32","type":""}],"src":"1001:186:32"},{"body":{"nativeSrc":"1317:125:32","nodeType":"YulBlock","src":"1317:125:32","statements":[{"nativeSrc":"1327:26:32","nodeType":"YulAssignment","src":"1327:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1339:9:32","nodeType":"YulIdentifier","src":"1339:9:32"},{"kind":"number","nativeSrc":"1350:2:32","nodeType":"YulLiteral","src":"1350:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1335:3:32","nodeType":"YulIdentifier","src":"1335:3:32"},"nativeSrc":"1335:18:32","nodeType":"YulFunctionCall","src":"1335:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1327:4:32","nodeType":"YulIdentifier","src":"1327:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1369:9:32","nodeType":"YulIdentifier","src":"1369:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1384:6:32","nodeType":"YulIdentifier","src":"1384:6:32"},{"kind":"number","nativeSrc":"1392:42:32","nodeType":"YulLiteral","src":"1392:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1380:3:32","nodeType":"YulIdentifier","src":"1380:3:32"},"nativeSrc":"1380:55:32","nodeType":"YulFunctionCall","src":"1380:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1362:6:32","nodeType":"YulIdentifier","src":"1362:6:32"},"nativeSrc":"1362:74:32","nodeType":"YulFunctionCall","src":"1362:74:32"},"nativeSrc":"1362:74:32","nodeType":"YulExpressionStatement","src":"1362:74:32"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$948__to_t_address__fromStack_reversed","nativeSrc":"1192:250:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1286:9:32","nodeType":"YulTypedName","src":"1286:9:32","type":""},{"name":"value0","nativeSrc":"1297:6:32","nodeType":"YulTypedName","src":"1297:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1308:4:32","nodeType":"YulTypedName","src":"1308:4:32","type":""}],"src":"1192:250:32"},{"body":{"nativeSrc":"1548:125:32","nodeType":"YulBlock","src":"1548:125:32","statements":[{"nativeSrc":"1558:26:32","nodeType":"YulAssignment","src":"1558:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1570:9:32","nodeType":"YulIdentifier","src":"1570:9:32"},{"kind":"number","nativeSrc":"1581:2:32","nodeType":"YulLiteral","src":"1581:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1566:3:32","nodeType":"YulIdentifier","src":"1566:3:32"},"nativeSrc":"1566:18:32","nodeType":"YulFunctionCall","src":"1566:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1558:4:32","nodeType":"YulIdentifier","src":"1558:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1600:9:32","nodeType":"YulIdentifier","src":"1600:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1615:6:32","nodeType":"YulIdentifier","src":"1615:6:32"},{"kind":"number","nativeSrc":"1623:42:32","nodeType":"YulLiteral","src":"1623:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1611:3:32","nodeType":"YulIdentifier","src":"1611:3:32"},"nativeSrc":"1611:55:32","nodeType":"YulFunctionCall","src":"1611:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1593:6:32","nodeType":"YulIdentifier","src":"1593:6:32"},"nativeSrc":"1593:74:32","nodeType":"YulFunctionCall","src":"1593:74:32"},"nativeSrc":"1593:74:32","nodeType":"YulExpressionStatement","src":"1593:74:32"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1447:226:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1517:9:32","nodeType":"YulTypedName","src":"1517:9:32","type":""},{"name":"value0","nativeSrc":"1528:6:32","nodeType":"YulTypedName","src":"1528:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1539:4:32","nodeType":"YulTypedName","src":"1539:4:32","type":""}],"src":"1447:226:32"},{"body":{"nativeSrc":"1762:283:32","nodeType":"YulBlock","src":"1762:283:32","statements":[{"body":{"nativeSrc":"1811:16:32","nodeType":"YulBlock","src":"1811:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1820:1:32","nodeType":"YulLiteral","src":"1820:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1823:1:32","nodeType":"YulLiteral","src":"1823:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1813:6:32","nodeType":"YulIdentifier","src":"1813:6:32"},"nativeSrc":"1813:12:32","nodeType":"YulFunctionCall","src":"1813:12:32"},"nativeSrc":"1813:12:32","nodeType":"YulExpressionStatement","src":"1813:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1790:6:32","nodeType":"YulIdentifier","src":"1790:6:32"},{"kind":"number","nativeSrc":"1798:4:32","nodeType":"YulLiteral","src":"1798:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1786:3:32","nodeType":"YulIdentifier","src":"1786:3:32"},"nativeSrc":"1786:17:32","nodeType":"YulFunctionCall","src":"1786:17:32"},{"name":"end","nativeSrc":"1805:3:32","nodeType":"YulIdentifier","src":"1805:3:32"}],"functionName":{"name":"slt","nativeSrc":"1782:3:32","nodeType":"YulIdentifier","src":"1782:3:32"},"nativeSrc":"1782:27:32","nodeType":"YulFunctionCall","src":"1782:27:32"}],"functionName":{"name":"iszero","nativeSrc":"1775:6:32","nodeType":"YulIdentifier","src":"1775:6:32"},"nativeSrc":"1775:35:32","nodeType":"YulFunctionCall","src":"1775:35:32"},"nativeSrc":"1772:55:32","nodeType":"YulIf","src":"1772:55:32"},{"nativeSrc":"1836:30:32","nodeType":"YulAssignment","src":"1836:30:32","value":{"arguments":[{"name":"offset","nativeSrc":"1859:6:32","nodeType":"YulIdentifier","src":"1859:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"1846:12:32","nodeType":"YulIdentifier","src":"1846:12:32"},"nativeSrc":"1846:20:32","nodeType":"YulFunctionCall","src":"1846:20:32"},"variableNames":[{"name":"length","nativeSrc":"1836:6:32","nodeType":"YulIdentifier","src":"1836:6:32"}]},{"body":{"nativeSrc":"1909:16:32","nodeType":"YulBlock","src":"1909:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1918:1:32","nodeType":"YulLiteral","src":"1918:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1921:1:32","nodeType":"YulLiteral","src":"1921:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1911:6:32","nodeType":"YulIdentifier","src":"1911:6:32"},"nativeSrc":"1911:12:32","nodeType":"YulFunctionCall","src":"1911:12:32"},"nativeSrc":"1911:12:32","nodeType":"YulExpressionStatement","src":"1911:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1881:6:32","nodeType":"YulIdentifier","src":"1881:6:32"},{"kind":"number","nativeSrc":"1889:18:32","nodeType":"YulLiteral","src":"1889:18:32","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1878:2:32","nodeType":"YulIdentifier","src":"1878:2:32"},"nativeSrc":"1878:30:32","nodeType":"YulFunctionCall","src":"1878:30:32"},"nativeSrc":"1875:50:32","nodeType":"YulIf","src":"1875:50:32"},{"nativeSrc":"1934:29:32","nodeType":"YulAssignment","src":"1934:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"1950:6:32","nodeType":"YulIdentifier","src":"1950:6:32"},{"kind":"number","nativeSrc":"1958:4:32","nodeType":"YulLiteral","src":"1958:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1946:3:32","nodeType":"YulIdentifier","src":"1946:3:32"},"nativeSrc":"1946:17:32","nodeType":"YulFunctionCall","src":"1946:17:32"},"variableNames":[{"name":"arrayPos","nativeSrc":"1934:8:32","nodeType":"YulIdentifier","src":"1934:8:32"}]},{"body":{"nativeSrc":"2023:16:32","nodeType":"YulBlock","src":"2023:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2032:1:32","nodeType":"YulLiteral","src":"2032:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2035:1:32","nodeType":"YulLiteral","src":"2035:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2025:6:32","nodeType":"YulIdentifier","src":"2025:6:32"},"nativeSrc":"2025:12:32","nodeType":"YulFunctionCall","src":"2025:12:32"},"nativeSrc":"2025:12:32","nodeType":"YulExpressionStatement","src":"2025:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1986:6:32","nodeType":"YulIdentifier","src":"1986:6:32"},{"arguments":[{"kind":"number","nativeSrc":"1998:1:32","nodeType":"YulLiteral","src":"1998:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"2001:6:32","nodeType":"YulIdentifier","src":"2001:6:32"}],"functionName":{"name":"shl","nativeSrc":"1994:3:32","nodeType":"YulIdentifier","src":"1994:3:32"},"nativeSrc":"1994:14:32","nodeType":"YulFunctionCall","src":"1994:14:32"}],"functionName":{"name":"add","nativeSrc":"1982:3:32","nodeType":"YulIdentifier","src":"1982:3:32"},"nativeSrc":"1982:27:32","nodeType":"YulFunctionCall","src":"1982:27:32"},{"kind":"number","nativeSrc":"2011:4:32","nodeType":"YulLiteral","src":"2011:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1978:3:32","nodeType":"YulIdentifier","src":"1978:3:32"},"nativeSrc":"1978:38:32","nodeType":"YulFunctionCall","src":"1978:38:32"},{"name":"end","nativeSrc":"2018:3:32","nodeType":"YulIdentifier","src":"2018:3:32"}],"functionName":{"name":"gt","nativeSrc":"1975:2:32","nodeType":"YulIdentifier","src":"1975:2:32"},"nativeSrc":"1975:47:32","nodeType":"YulFunctionCall","src":"1975:47:32"},"nativeSrc":"1972:67:32","nodeType":"YulIf","src":"1972:67:32"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"1678:367:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1725:6:32","nodeType":"YulTypedName","src":"1725:6:32","type":""},{"name":"end","nativeSrc":"1733:3:32","nodeType":"YulTypedName","src":"1733:3:32","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1741:8:32","nodeType":"YulTypedName","src":"1741:8:32","type":""},{"name":"length","nativeSrc":"1751:6:32","nodeType":"YulTypedName","src":"1751:6:32","type":""}],"src":"1678:367:32"},{"body":{"nativeSrc":"2224:673:32","nodeType":"YulBlock","src":"2224:673:32","statements":[{"body":{"nativeSrc":"2270:16:32","nodeType":"YulBlock","src":"2270:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2279:1:32","nodeType":"YulLiteral","src":"2279:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2282:1:32","nodeType":"YulLiteral","src":"2282:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2272:6:32","nodeType":"YulIdentifier","src":"2272:6:32"},"nativeSrc":"2272:12:32","nodeType":"YulFunctionCall","src":"2272:12:32"},"nativeSrc":"2272:12:32","nodeType":"YulExpressionStatement","src":"2272:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2245:7:32","nodeType":"YulIdentifier","src":"2245:7:32"},{"name":"headStart","nativeSrc":"2254:9:32","nodeType":"YulIdentifier","src":"2254:9:32"}],"functionName":{"name":"sub","nativeSrc":"2241:3:32","nodeType":"YulIdentifier","src":"2241:3:32"},"nativeSrc":"2241:23:32","nodeType":"YulFunctionCall","src":"2241:23:32"},{"kind":"number","nativeSrc":"2266:2:32","nodeType":"YulLiteral","src":"2266:2:32","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2237:3:32","nodeType":"YulIdentifier","src":"2237:3:32"},"nativeSrc":"2237:32:32","nodeType":"YulFunctionCall","src":"2237:32:32"},"nativeSrc":"2234:52:32","nodeType":"YulIf","src":"2234:52:32"},{"nativeSrc":"2295:39:32","nodeType":"YulAssignment","src":"2295:39:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2324:9:32","nodeType":"YulIdentifier","src":"2324:9:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2305:18:32","nodeType":"YulIdentifier","src":"2305:18:32"},"nativeSrc":"2305:29:32","nodeType":"YulFunctionCall","src":"2305:29:32"},"variableNames":[{"name":"value0","nativeSrc":"2295:6:32","nodeType":"YulIdentifier","src":"2295:6:32"}]},{"nativeSrc":"2343:46:32","nodeType":"YulVariableDeclaration","src":"2343:46:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2374:9:32","nodeType":"YulIdentifier","src":"2374:9:32"},{"kind":"number","nativeSrc":"2385:2:32","nodeType":"YulLiteral","src":"2385:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2370:3:32","nodeType":"YulIdentifier","src":"2370:3:32"},"nativeSrc":"2370:18:32","nodeType":"YulFunctionCall","src":"2370:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"2357:12:32","nodeType":"YulIdentifier","src":"2357:12:32"},"nativeSrc":"2357:32:32","nodeType":"YulFunctionCall","src":"2357:32:32"},"variables":[{"name":"offset","nativeSrc":"2347:6:32","nodeType":"YulTypedName","src":"2347:6:32","type":""}]},{"nativeSrc":"2398:28:32","nodeType":"YulVariableDeclaration","src":"2398:28:32","value":{"kind":"number","nativeSrc":"2408:18:32","nodeType":"YulLiteral","src":"2408:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2402:2:32","nodeType":"YulTypedName","src":"2402:2:32","type":""}]},{"body":{"nativeSrc":"2453:16:32","nodeType":"YulBlock","src":"2453:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2462:1:32","nodeType":"YulLiteral","src":"2462:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2465:1:32","nodeType":"YulLiteral","src":"2465:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2455:6:32","nodeType":"YulIdentifier","src":"2455:6:32"},"nativeSrc":"2455:12:32","nodeType":"YulFunctionCall","src":"2455:12:32"},"nativeSrc":"2455:12:32","nodeType":"YulExpressionStatement","src":"2455:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2441:6:32","nodeType":"YulIdentifier","src":"2441:6:32"},{"name":"_1","nativeSrc":"2449:2:32","nodeType":"YulIdentifier","src":"2449:2:32"}],"functionName":{"name":"gt","nativeSrc":"2438:2:32","nodeType":"YulIdentifier","src":"2438:2:32"},"nativeSrc":"2438:14:32","nodeType":"YulFunctionCall","src":"2438:14:32"},"nativeSrc":"2435:34:32","nodeType":"YulIf","src":"2435:34:32"},{"nativeSrc":"2478:96:32","nodeType":"YulVariableDeclaration","src":"2478:96:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2546:9:32","nodeType":"YulIdentifier","src":"2546:9:32"},{"name":"offset","nativeSrc":"2557:6:32","nodeType":"YulIdentifier","src":"2557:6:32"}],"functionName":{"name":"add","nativeSrc":"2542:3:32","nodeType":"YulIdentifier","src":"2542:3:32"},"nativeSrc":"2542:22:32","nodeType":"YulFunctionCall","src":"2542:22:32"},{"name":"dataEnd","nativeSrc":"2566:7:32","nodeType":"YulIdentifier","src":"2566:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2504:37:32","nodeType":"YulIdentifier","src":"2504:37:32"},"nativeSrc":"2504:70:32","nodeType":"YulFunctionCall","src":"2504:70:32"},"variables":[{"name":"value1_1","nativeSrc":"2482:8:32","nodeType":"YulTypedName","src":"2482:8:32","type":""},{"name":"value2_1","nativeSrc":"2492:8:32","nodeType":"YulTypedName","src":"2492:8:32","type":""}]},{"nativeSrc":"2583:18:32","nodeType":"YulAssignment","src":"2583:18:32","value":{"name":"value1_1","nativeSrc":"2593:8:32","nodeType":"YulIdentifier","src":"2593:8:32"},"variableNames":[{"name":"value1","nativeSrc":"2583:6:32","nodeType":"YulIdentifier","src":"2583:6:32"}]},{"nativeSrc":"2610:18:32","nodeType":"YulAssignment","src":"2610:18:32","value":{"name":"value2_1","nativeSrc":"2620:8:32","nodeType":"YulIdentifier","src":"2620:8:32"},"variableNames":[{"name":"value2","nativeSrc":"2610:6:32","nodeType":"YulIdentifier","src":"2610:6:32"}]},{"nativeSrc":"2637:48:32","nodeType":"YulVariableDeclaration","src":"2637:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2670:9:32","nodeType":"YulIdentifier","src":"2670:9:32"},{"kind":"number","nativeSrc":"2681:2:32","nodeType":"YulLiteral","src":"2681:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2666:3:32","nodeType":"YulIdentifier","src":"2666:3:32"},"nativeSrc":"2666:18:32","nodeType":"YulFunctionCall","src":"2666:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"2653:12:32","nodeType":"YulIdentifier","src":"2653:12:32"},"nativeSrc":"2653:32:32","nodeType":"YulFunctionCall","src":"2653:32:32"},"variables":[{"name":"offset_1","nativeSrc":"2641:8:32","nodeType":"YulTypedName","src":"2641:8:32","type":""}]},{"body":{"nativeSrc":"2714:16:32","nodeType":"YulBlock","src":"2714:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2723:1:32","nodeType":"YulLiteral","src":"2723:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2726:1:32","nodeType":"YulLiteral","src":"2726:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2716:6:32","nodeType":"YulIdentifier","src":"2716:6:32"},"nativeSrc":"2716:12:32","nodeType":"YulFunctionCall","src":"2716:12:32"},"nativeSrc":"2716:12:32","nodeType":"YulExpressionStatement","src":"2716:12:32"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2700:8:32","nodeType":"YulIdentifier","src":"2700:8:32"},{"name":"_1","nativeSrc":"2710:2:32","nodeType":"YulIdentifier","src":"2710:2:32"}],"functionName":{"name":"gt","nativeSrc":"2697:2:32","nodeType":"YulIdentifier","src":"2697:2:32"},"nativeSrc":"2697:16:32","nodeType":"YulFunctionCall","src":"2697:16:32"},"nativeSrc":"2694:36:32","nodeType":"YulIf","src":"2694:36:32"},{"nativeSrc":"2739:98:32","nodeType":"YulVariableDeclaration","src":"2739:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2807:9:32","nodeType":"YulIdentifier","src":"2807:9:32"},{"name":"offset_1","nativeSrc":"2818:8:32","nodeType":"YulIdentifier","src":"2818:8:32"}],"functionName":{"name":"add","nativeSrc":"2803:3:32","nodeType":"YulIdentifier","src":"2803:3:32"},"nativeSrc":"2803:24:32","nodeType":"YulFunctionCall","src":"2803:24:32"},{"name":"dataEnd","nativeSrc":"2829:7:32","nodeType":"YulIdentifier","src":"2829:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2765:37:32","nodeType":"YulIdentifier","src":"2765:37:32"},"nativeSrc":"2765:72:32","nodeType":"YulFunctionCall","src":"2765:72:32"},"variables":[{"name":"value3_1","nativeSrc":"2743:8:32","nodeType":"YulTypedName","src":"2743:8:32","type":""},{"name":"value4_1","nativeSrc":"2753:8:32","nodeType":"YulTypedName","src":"2753:8:32","type":""}]},{"nativeSrc":"2846:18:32","nodeType":"YulAssignment","src":"2846:18:32","value":{"name":"value3_1","nativeSrc":"2856:8:32","nodeType":"YulIdentifier","src":"2856:8:32"},"variableNames":[{"name":"value3","nativeSrc":"2846:6:32","nodeType":"YulIdentifier","src":"2846:6:32"}]},{"nativeSrc":"2873:18:32","nodeType":"YulAssignment","src":"2873:18:32","value":{"name":"value4_1","nativeSrc":"2883:8:32","nodeType":"YulIdentifier","src":"2883:8:32"},"variableNames":[{"name":"value4","nativeSrc":"2873:6:32","nodeType":"YulIdentifier","src":"2873:6:32"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"2050:847:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2158:9:32","nodeType":"YulTypedName","src":"2158:9:32","type":""},{"name":"dataEnd","nativeSrc":"2169:7:32","nodeType":"YulTypedName","src":"2169:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2181:6:32","nodeType":"YulTypedName","src":"2181:6:32","type":""},{"name":"value1","nativeSrc":"2189:6:32","nodeType":"YulTypedName","src":"2189:6:32","type":""},{"name":"value2","nativeSrc":"2197:6:32","nodeType":"YulTypedName","src":"2197:6:32","type":""},{"name":"value3","nativeSrc":"2205:6:32","nodeType":"YulTypedName","src":"2205:6:32","type":""},{"name":"value4","nativeSrc":"2213:6:32","nodeType":"YulTypedName","src":"2213:6:32","type":""}],"src":"2050:847:32"},{"body":{"nativeSrc":"3059:616:32","nodeType":"YulBlock","src":"3059:616:32","statements":[{"body":{"nativeSrc":"3105:16:32","nodeType":"YulBlock","src":"3105:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3114:1:32","nodeType":"YulLiteral","src":"3114:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3117:1:32","nodeType":"YulLiteral","src":"3117:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3107:6:32","nodeType":"YulIdentifier","src":"3107:6:32"},"nativeSrc":"3107:12:32","nodeType":"YulFunctionCall","src":"3107:12:32"},"nativeSrc":"3107:12:32","nodeType":"YulExpressionStatement","src":"3107:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3080:7:32","nodeType":"YulIdentifier","src":"3080:7:32"},{"name":"headStart","nativeSrc":"3089:9:32","nodeType":"YulIdentifier","src":"3089:9:32"}],"functionName":{"name":"sub","nativeSrc":"3076:3:32","nodeType":"YulIdentifier","src":"3076:3:32"},"nativeSrc":"3076:23:32","nodeType":"YulFunctionCall","src":"3076:23:32"},{"kind":"number","nativeSrc":"3101:2:32","nodeType":"YulLiteral","src":"3101:2:32","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3072:3:32","nodeType":"YulIdentifier","src":"3072:3:32"},"nativeSrc":"3072:32:32","nodeType":"YulFunctionCall","src":"3072:32:32"},"nativeSrc":"3069:52:32","nodeType":"YulIf","src":"3069:52:32"},{"nativeSrc":"3130:37:32","nodeType":"YulVariableDeclaration","src":"3130:37:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3157:9:32","nodeType":"YulIdentifier","src":"3157:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"3144:12:32","nodeType":"YulIdentifier","src":"3144:12:32"},"nativeSrc":"3144:23:32","nodeType":"YulFunctionCall","src":"3144:23:32"},"variables":[{"name":"offset","nativeSrc":"3134:6:32","nodeType":"YulTypedName","src":"3134:6:32","type":""}]},{"nativeSrc":"3176:28:32","nodeType":"YulVariableDeclaration","src":"3176:28:32","value":{"kind":"number","nativeSrc":"3186:18:32","nodeType":"YulLiteral","src":"3186:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3180:2:32","nodeType":"YulTypedName","src":"3180:2:32","type":""}]},{"body":{"nativeSrc":"3231:16:32","nodeType":"YulBlock","src":"3231:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3240:1:32","nodeType":"YulLiteral","src":"3240:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3243:1:32","nodeType":"YulLiteral","src":"3243:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3233:6:32","nodeType":"YulIdentifier","src":"3233:6:32"},"nativeSrc":"3233:12:32","nodeType":"YulFunctionCall","src":"3233:12:32"},"nativeSrc":"3233:12:32","nodeType":"YulExpressionStatement","src":"3233:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3219:6:32","nodeType":"YulIdentifier","src":"3219:6:32"},{"name":"_1","nativeSrc":"3227:2:32","nodeType":"YulIdentifier","src":"3227:2:32"}],"functionName":{"name":"gt","nativeSrc":"3216:2:32","nodeType":"YulIdentifier","src":"3216:2:32"},"nativeSrc":"3216:14:32","nodeType":"YulFunctionCall","src":"3216:14:32"},"nativeSrc":"3213:34:32","nodeType":"YulIf","src":"3213:34:32"},{"nativeSrc":"3256:96:32","nodeType":"YulVariableDeclaration","src":"3256:96:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3324:9:32","nodeType":"YulIdentifier","src":"3324:9:32"},{"name":"offset","nativeSrc":"3335:6:32","nodeType":"YulIdentifier","src":"3335:6:32"}],"functionName":{"name":"add","nativeSrc":"3320:3:32","nodeType":"YulIdentifier","src":"3320:3:32"},"nativeSrc":"3320:22:32","nodeType":"YulFunctionCall","src":"3320:22:32"},{"name":"dataEnd","nativeSrc":"3344:7:32","nodeType":"YulIdentifier","src":"3344:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3282:37:32","nodeType":"YulIdentifier","src":"3282:37:32"},"nativeSrc":"3282:70:32","nodeType":"YulFunctionCall","src":"3282:70:32"},"variables":[{"name":"value0_1","nativeSrc":"3260:8:32","nodeType":"YulTypedName","src":"3260:8:32","type":""},{"name":"value1_1","nativeSrc":"3270:8:32","nodeType":"YulTypedName","src":"3270:8:32","type":""}]},{"nativeSrc":"3361:18:32","nodeType":"YulAssignment","src":"3361:18:32","value":{"name":"value0_1","nativeSrc":"3371:8:32","nodeType":"YulIdentifier","src":"3371:8:32"},"variableNames":[{"name":"value0","nativeSrc":"3361:6:32","nodeType":"YulIdentifier","src":"3361:6:32"}]},{"nativeSrc":"3388:18:32","nodeType":"YulAssignment","src":"3388:18:32","value":{"name":"value1_1","nativeSrc":"3398:8:32","nodeType":"YulIdentifier","src":"3398:8:32"},"variableNames":[{"name":"value1","nativeSrc":"3388:6:32","nodeType":"YulIdentifier","src":"3388:6:32"}]},{"nativeSrc":"3415:48:32","nodeType":"YulVariableDeclaration","src":"3415:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3448:9:32","nodeType":"YulIdentifier","src":"3448:9:32"},{"kind":"number","nativeSrc":"3459:2:32","nodeType":"YulLiteral","src":"3459:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3444:3:32","nodeType":"YulIdentifier","src":"3444:3:32"},"nativeSrc":"3444:18:32","nodeType":"YulFunctionCall","src":"3444:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"3431:12:32","nodeType":"YulIdentifier","src":"3431:12:32"},"nativeSrc":"3431:32:32","nodeType":"YulFunctionCall","src":"3431:32:32"},"variables":[{"name":"offset_1","nativeSrc":"3419:8:32","nodeType":"YulTypedName","src":"3419:8:32","type":""}]},{"body":{"nativeSrc":"3492:16:32","nodeType":"YulBlock","src":"3492:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3501:1:32","nodeType":"YulLiteral","src":"3501:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3504:1:32","nodeType":"YulLiteral","src":"3504:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3494:6:32","nodeType":"YulIdentifier","src":"3494:6:32"},"nativeSrc":"3494:12:32","nodeType":"YulFunctionCall","src":"3494:12:32"},"nativeSrc":"3494:12:32","nodeType":"YulExpressionStatement","src":"3494:12:32"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3478:8:32","nodeType":"YulIdentifier","src":"3478:8:32"},{"name":"_1","nativeSrc":"3488:2:32","nodeType":"YulIdentifier","src":"3488:2:32"}],"functionName":{"name":"gt","nativeSrc":"3475:2:32","nodeType":"YulIdentifier","src":"3475:2:32"},"nativeSrc":"3475:16:32","nodeType":"YulFunctionCall","src":"3475:16:32"},"nativeSrc":"3472:36:32","nodeType":"YulIf","src":"3472:36:32"},{"nativeSrc":"3517:98:32","nodeType":"YulVariableDeclaration","src":"3517:98:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3585:9:32","nodeType":"YulIdentifier","src":"3585:9:32"},{"name":"offset_1","nativeSrc":"3596:8:32","nodeType":"YulIdentifier","src":"3596:8:32"}],"functionName":{"name":"add","nativeSrc":"3581:3:32","nodeType":"YulIdentifier","src":"3581:3:32"},"nativeSrc":"3581:24:32","nodeType":"YulFunctionCall","src":"3581:24:32"},{"name":"dataEnd","nativeSrc":"3607:7:32","nodeType":"YulIdentifier","src":"3607:7:32"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3543:37:32","nodeType":"YulIdentifier","src":"3543:37:32"},"nativeSrc":"3543:72:32","nodeType":"YulFunctionCall","src":"3543:72:32"},"variables":[{"name":"value2_1","nativeSrc":"3521:8:32","nodeType":"YulTypedName","src":"3521:8:32","type":""},{"name":"value3_1","nativeSrc":"3531:8:32","nodeType":"YulTypedName","src":"3531:8:32","type":""}]},{"nativeSrc":"3624:18:32","nodeType":"YulAssignment","src":"3624:18:32","value":{"name":"value2_1","nativeSrc":"3634:8:32","nodeType":"YulIdentifier","src":"3634:8:32"},"variableNames":[{"name":"value2","nativeSrc":"3624:6:32","nodeType":"YulIdentifier","src":"3624:6:32"}]},{"nativeSrc":"3651:18:32","nodeType":"YulAssignment","src":"3651:18:32","value":{"name":"value3_1","nativeSrc":"3661:8:32","nodeType":"YulIdentifier","src":"3661:8:32"},"variableNames":[{"name":"value3","nativeSrc":"3651:6:32","nodeType":"YulIdentifier","src":"3651:6:32"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"2902:773:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3001:9:32","nodeType":"YulTypedName","src":"3001:9:32","type":""},{"name":"dataEnd","nativeSrc":"3012:7:32","nodeType":"YulTypedName","src":"3012:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3024:6:32","nodeType":"YulTypedName","src":"3024:6:32","type":""},{"name":"value1","nativeSrc":"3032:6:32","nodeType":"YulTypedName","src":"3032:6:32","type":""},{"name":"value2","nativeSrc":"3040:6:32","nodeType":"YulTypedName","src":"3040:6:32","type":""},{"name":"value3","nativeSrc":"3048:6:32","nodeType":"YulTypedName","src":"3048:6:32","type":""}],"src":"2902:773:32"},{"body":{"nativeSrc":"3809:198:32","nodeType":"YulBlock","src":"3809:198:32","statements":[{"nativeSrc":"3819:26:32","nodeType":"YulAssignment","src":"3819:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3831:9:32","nodeType":"YulIdentifier","src":"3831:9:32"},{"kind":"number","nativeSrc":"3842:2:32","nodeType":"YulLiteral","src":"3842:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3827:3:32","nodeType":"YulIdentifier","src":"3827:3:32"},"nativeSrc":"3827:18:32","nodeType":"YulFunctionCall","src":"3827:18:32"},"variableNames":[{"name":"tail","nativeSrc":"3819:4:32","nodeType":"YulIdentifier","src":"3819:4:32"}]},{"nativeSrc":"3854:52:32","nodeType":"YulVariableDeclaration","src":"3854:52:32","value":{"kind":"number","nativeSrc":"3864:42:32","nodeType":"YulLiteral","src":"3864:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3858:2:32","nodeType":"YulTypedName","src":"3858:2:32","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3922:9:32","nodeType":"YulIdentifier","src":"3922:9:32"},{"arguments":[{"name":"value0","nativeSrc":"3937:6:32","nodeType":"YulIdentifier","src":"3937:6:32"},{"name":"_1","nativeSrc":"3945:2:32","nodeType":"YulIdentifier","src":"3945:2:32"}],"functionName":{"name":"and","nativeSrc":"3933:3:32","nodeType":"YulIdentifier","src":"3933:3:32"},"nativeSrc":"3933:15:32","nodeType":"YulFunctionCall","src":"3933:15:32"}],"functionName":{"name":"mstore","nativeSrc":"3915:6:32","nodeType":"YulIdentifier","src":"3915:6:32"},"nativeSrc":"3915:34:32","nodeType":"YulFunctionCall","src":"3915:34:32"},"nativeSrc":"3915:34:32","nodeType":"YulExpressionStatement","src":"3915:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3969:9:32","nodeType":"YulIdentifier","src":"3969:9:32"},{"kind":"number","nativeSrc":"3980:2:32","nodeType":"YulLiteral","src":"3980:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3965:3:32","nodeType":"YulIdentifier","src":"3965:3:32"},"nativeSrc":"3965:18:32","nodeType":"YulFunctionCall","src":"3965:18:32"},{"arguments":[{"name":"value1","nativeSrc":"3989:6:32","nodeType":"YulIdentifier","src":"3989:6:32"},{"name":"_1","nativeSrc":"3997:2:32","nodeType":"YulIdentifier","src":"3997:2:32"}],"functionName":{"name":"and","nativeSrc":"3985:3:32","nodeType":"YulIdentifier","src":"3985:3:32"},"nativeSrc":"3985:15:32","nodeType":"YulFunctionCall","src":"3985:15:32"}],"functionName":{"name":"mstore","nativeSrc":"3958:6:32","nodeType":"YulIdentifier","src":"3958:6:32"},"nativeSrc":"3958:43:32","nodeType":"YulFunctionCall","src":"3958:43:32"},"nativeSrc":"3958:43:32","nodeType":"YulExpressionStatement","src":"3958:43:32"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"3680:327:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3770:9:32","nodeType":"YulTypedName","src":"3770:9:32","type":""},{"name":"value1","nativeSrc":"3781:6:32","nodeType":"YulTypedName","src":"3781:6:32","type":""},{"name":"value0","nativeSrc":"3789:6:32","nodeType":"YulTypedName","src":"3789:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3800:4:32","nodeType":"YulTypedName","src":"3800:4:32","type":""}],"src":"3680:327:32"},{"body":{"nativeSrc":"4090:199:32","nodeType":"YulBlock","src":"4090:199:32","statements":[{"body":{"nativeSrc":"4136:16:32","nodeType":"YulBlock","src":"4136:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4145:1:32","nodeType":"YulLiteral","src":"4145:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4148:1:32","nodeType":"YulLiteral","src":"4148:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4138:6:32","nodeType":"YulIdentifier","src":"4138:6:32"},"nativeSrc":"4138:12:32","nodeType":"YulFunctionCall","src":"4138:12:32"},"nativeSrc":"4138:12:32","nodeType":"YulExpressionStatement","src":"4138:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4111:7:32","nodeType":"YulIdentifier","src":"4111:7:32"},{"name":"headStart","nativeSrc":"4120:9:32","nodeType":"YulIdentifier","src":"4120:9:32"}],"functionName":{"name":"sub","nativeSrc":"4107:3:32","nodeType":"YulIdentifier","src":"4107:3:32"},"nativeSrc":"4107:23:32","nodeType":"YulFunctionCall","src":"4107:23:32"},{"kind":"number","nativeSrc":"4132:2:32","nodeType":"YulLiteral","src":"4132:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4103:3:32","nodeType":"YulIdentifier","src":"4103:3:32"},"nativeSrc":"4103:32:32","nodeType":"YulFunctionCall","src":"4103:32:32"},"nativeSrc":"4100:52:32","nodeType":"YulIf","src":"4100:52:32"},{"nativeSrc":"4161:29:32","nodeType":"YulVariableDeclaration","src":"4161:29:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4180:9:32","nodeType":"YulIdentifier","src":"4180:9:32"}],"functionName":{"name":"mload","nativeSrc":"4174:5:32","nodeType":"YulIdentifier","src":"4174:5:32"},"nativeSrc":"4174:16:32","nodeType":"YulFunctionCall","src":"4174:16:32"},"variables":[{"name":"value","nativeSrc":"4165:5:32","nodeType":"YulTypedName","src":"4165:5:32","type":""}]},{"body":{"nativeSrc":"4243:16:32","nodeType":"YulBlock","src":"4243:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4252:1:32","nodeType":"YulLiteral","src":"4252:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4255:1:32","nodeType":"YulLiteral","src":"4255:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4245:6:32","nodeType":"YulIdentifier","src":"4245:6:32"},"nativeSrc":"4245:12:32","nodeType":"YulFunctionCall","src":"4245:12:32"},"nativeSrc":"4245:12:32","nodeType":"YulExpressionStatement","src":"4245:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4212:5:32","nodeType":"YulIdentifier","src":"4212:5:32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4233:5:32","nodeType":"YulIdentifier","src":"4233:5:32"}],"functionName":{"name":"iszero","nativeSrc":"4226:6:32","nodeType":"YulIdentifier","src":"4226:6:32"},"nativeSrc":"4226:13:32","nodeType":"YulFunctionCall","src":"4226:13:32"}],"functionName":{"name":"iszero","nativeSrc":"4219:6:32","nodeType":"YulIdentifier","src":"4219:6:32"},"nativeSrc":"4219:21:32","nodeType":"YulFunctionCall","src":"4219:21:32"}],"functionName":{"name":"eq","nativeSrc":"4209:2:32","nodeType":"YulIdentifier","src":"4209:2:32"},"nativeSrc":"4209:32:32","nodeType":"YulFunctionCall","src":"4209:32:32"}],"functionName":{"name":"iszero","nativeSrc":"4202:6:32","nodeType":"YulIdentifier","src":"4202:6:32"},"nativeSrc":"4202:40:32","nodeType":"YulFunctionCall","src":"4202:40:32"},"nativeSrc":"4199:60:32","nodeType":"YulIf","src":"4199:60:32"},{"nativeSrc":"4268:15:32","nodeType":"YulAssignment","src":"4268:15:32","value":{"name":"value","nativeSrc":"4278:5:32","nodeType":"YulIdentifier","src":"4278:5:32"},"variableNames":[{"name":"value0","nativeSrc":"4268:6:32","nodeType":"YulIdentifier","src":"4268:6:32"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"4012:277:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4056:9:32","nodeType":"YulTypedName","src":"4056:9:32","type":""},{"name":"dataEnd","nativeSrc":"4067:7:32","nodeType":"YulTypedName","src":"4067:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4079:6:32","nodeType":"YulTypedName","src":"4079:6:32","type":""}],"src":"4012:277:32"},{"body":{"nativeSrc":"4468:226:32","nodeType":"YulBlock","src":"4468:226:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4485:9:32","nodeType":"YulIdentifier","src":"4485:9:32"},{"kind":"number","nativeSrc":"4496:2:32","nodeType":"YulLiteral","src":"4496:2:32","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4478:6:32","nodeType":"YulIdentifier","src":"4478:6:32"},"nativeSrc":"4478:21:32","nodeType":"YulFunctionCall","src":"4478:21:32"},"nativeSrc":"4478:21:32","nodeType":"YulExpressionStatement","src":"4478:21:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4519:9:32","nodeType":"YulIdentifier","src":"4519:9:32"},{"kind":"number","nativeSrc":"4530:2:32","nodeType":"YulLiteral","src":"4530:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4515:3:32","nodeType":"YulIdentifier","src":"4515:3:32"},"nativeSrc":"4515:18:32","nodeType":"YulFunctionCall","src":"4515:18:32"},{"kind":"number","nativeSrc":"4535:2:32","nodeType":"YulLiteral","src":"4535:2:32","type":"","value":"36"}],"functionName":{"name":"mstore","nativeSrc":"4508:6:32","nodeType":"YulIdentifier","src":"4508:6:32"},"nativeSrc":"4508:30:32","nodeType":"YulFunctionCall","src":"4508:30:32"},"nativeSrc":"4508:30:32","nodeType":"YulExpressionStatement","src":"4508:30:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4558:9:32","nodeType":"YulIdentifier","src":"4558:9:32"},{"kind":"number","nativeSrc":"4569:2:32","nodeType":"YulLiteral","src":"4569:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4554:3:32","nodeType":"YulIdentifier","src":"4554:3:32"},"nativeSrc":"4554:18:32","nodeType":"YulFunctionCall","src":"4554:18:32"},{"hexValue":"455243313135353a206275726e2063616c6c6572206973206e6f742061707072","kind":"string","nativeSrc":"4574:34:32","nodeType":"YulLiteral","src":"4574:34:32","type":"","value":"ERC1155: burn caller is not appr"}],"functionName":{"name":"mstore","nativeSrc":"4547:6:32","nodeType":"YulIdentifier","src":"4547:6:32"},"nativeSrc":"4547:62:32","nodeType":"YulFunctionCall","src":"4547:62:32"},"nativeSrc":"4547:62:32","nodeType":"YulExpressionStatement","src":"4547:62:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4629:9:32","nodeType":"YulIdentifier","src":"4629:9:32"},{"kind":"number","nativeSrc":"4640:2:32","nodeType":"YulLiteral","src":"4640:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4625:3:32","nodeType":"YulIdentifier","src":"4625:3:32"},"nativeSrc":"4625:18:32","nodeType":"YulFunctionCall","src":"4625:18:32"},{"hexValue":"6f766564","kind":"string","nativeSrc":"4645:6:32","nodeType":"YulLiteral","src":"4645:6:32","type":"","value":"oved"}],"functionName":{"name":"mstore","nativeSrc":"4618:6:32","nodeType":"YulIdentifier","src":"4618:6:32"},"nativeSrc":"4618:34:32","nodeType":"YulFunctionCall","src":"4618:34:32"},"nativeSrc":"4618:34:32","nodeType":"YulExpressionStatement","src":"4618:34:32"},{"nativeSrc":"4661:27:32","nodeType":"YulAssignment","src":"4661:27:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4673:9:32","nodeType":"YulIdentifier","src":"4673:9:32"},{"kind":"number","nativeSrc":"4684:3:32","nodeType":"YulLiteral","src":"4684:3:32","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4669:3:32","nodeType":"YulIdentifier","src":"4669:3:32"},"nativeSrc":"4669:19:32","nodeType":"YulFunctionCall","src":"4669:19:32"},"variableNames":[{"name":"tail","nativeSrc":"4661:4:32","nodeType":"YulIdentifier","src":"4661:4:32"}]}]},"name":"abi_encode_tuple_t_stringliteral_12669bb8fa5986d3fd494c47774708cf75572e0072244adbabca7fc66547bec5__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4294:400:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4445:9:32","nodeType":"YulTypedName","src":"4445:9:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4459:4:32","nodeType":"YulTypedName","src":"4459:4:32","type":""}],"src":"4294:400:32"},{"body":{"nativeSrc":"4777:280:32","nodeType":"YulBlock","src":"4777:280:32","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4794:3:32","nodeType":"YulIdentifier","src":"4794:3:32"},{"name":"length","nativeSrc":"4799:6:32","nodeType":"YulIdentifier","src":"4799:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4787:6:32","nodeType":"YulIdentifier","src":"4787:6:32"},"nativeSrc":"4787:19:32","nodeType":"YulFunctionCall","src":"4787:19:32"},"nativeSrc":"4787:19:32","nodeType":"YulExpressionStatement","src":"4787:19:32"},{"body":{"nativeSrc":"4897:16:32","nodeType":"YulBlock","src":"4897:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4906:1:32","nodeType":"YulLiteral","src":"4906:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4909:1:32","nodeType":"YulLiteral","src":"4909:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4899:6:32","nodeType":"YulIdentifier","src":"4899:6:32"},"nativeSrc":"4899:12:32","nodeType":"YulFunctionCall","src":"4899:12:32"},"nativeSrc":"4899:12:32","nodeType":"YulExpressionStatement","src":"4899:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4821:6:32","nodeType":"YulIdentifier","src":"4821:6:32"},{"kind":"number","nativeSrc":"4829:66:32","nodeType":"YulLiteral","src":"4829:66:32","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4818:2:32","nodeType":"YulIdentifier","src":"4818:2:32"},"nativeSrc":"4818:78:32","nodeType":"YulFunctionCall","src":"4818:78:32"},"nativeSrc":"4815:98:32","nodeType":"YulIf","src":"4815:98:32"},{"nativeSrc":"4922:30:32","nodeType":"YulVariableDeclaration","src":"4922:30:32","value":{"arguments":[{"kind":"number","nativeSrc":"4942:1:32","nodeType":"YulLiteral","src":"4942:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"4945:6:32","nodeType":"YulIdentifier","src":"4945:6:32"}],"functionName":{"name":"shl","nativeSrc":"4938:3:32","nodeType":"YulIdentifier","src":"4938:3:32"},"nativeSrc":"4938:14:32","nodeType":"YulFunctionCall","src":"4938:14:32"},"variables":[{"name":"length_1","nativeSrc":"4926:8:32","nodeType":"YulTypedName","src":"4926:8:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4978:3:32","nodeType":"YulIdentifier","src":"4978:3:32"},{"kind":"number","nativeSrc":"4983:4:32","nodeType":"YulLiteral","src":"4983:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4974:3:32","nodeType":"YulIdentifier","src":"4974:3:32"},"nativeSrc":"4974:14:32","nodeType":"YulFunctionCall","src":"4974:14:32"},{"name":"start","nativeSrc":"4990:5:32","nodeType":"YulIdentifier","src":"4990:5:32"},{"name":"length_1","nativeSrc":"4997:8:32","nodeType":"YulIdentifier","src":"4997:8:32"}],"functionName":{"name":"calldatacopy","nativeSrc":"4961:12:32","nodeType":"YulIdentifier","src":"4961:12:32"},"nativeSrc":"4961:45:32","nodeType":"YulFunctionCall","src":"4961:45:32"},"nativeSrc":"4961:45:32","nodeType":"YulExpressionStatement","src":"4961:45:32"},{"nativeSrc":"5015:36:32","nodeType":"YulAssignment","src":"5015:36:32","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5030:3:32","nodeType":"YulIdentifier","src":"5030:3:32"},{"name":"length_1","nativeSrc":"5035:8:32","nodeType":"YulIdentifier","src":"5035:8:32"}],"functionName":{"name":"add","nativeSrc":"5026:3:32","nodeType":"YulIdentifier","src":"5026:3:32"},"nativeSrc":"5026:18:32","nodeType":"YulFunctionCall","src":"5026:18:32"},{"kind":"number","nativeSrc":"5046:4:32","nodeType":"YulLiteral","src":"5046:4:32","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5022:3:32","nodeType":"YulIdentifier","src":"5022:3:32"},"nativeSrc":"5022:29:32","nodeType":"YulFunctionCall","src":"5022:29:32"},"variableNames":[{"name":"end","nativeSrc":"5015:3:32","nodeType":"YulIdentifier","src":"5015:3:32"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"4699:358:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"4746:5:32","nodeType":"YulTypedName","src":"4746:5:32","type":""},{"name":"length","nativeSrc":"4753:6:32","nodeType":"YulTypedName","src":"4753:6:32","type":""},{"name":"pos","nativeSrc":"4761:3:32","nodeType":"YulTypedName","src":"4761:3:32","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4769:3:32","nodeType":"YulTypedName","src":"4769:3:32","type":""}],"src":"4699:358:32"},{"body":{"nativeSrc":"5339:362:32","nodeType":"YulBlock","src":"5339:362:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5356:9:32","nodeType":"YulIdentifier","src":"5356:9:32"},{"arguments":[{"name":"value0","nativeSrc":"5371:6:32","nodeType":"YulIdentifier","src":"5371:6:32"},{"kind":"number","nativeSrc":"5379:42:32","nodeType":"YulLiteral","src":"5379:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5367:3:32","nodeType":"YulIdentifier","src":"5367:3:32"},"nativeSrc":"5367:55:32","nodeType":"YulFunctionCall","src":"5367:55:32"}],"functionName":{"name":"mstore","nativeSrc":"5349:6:32","nodeType":"YulIdentifier","src":"5349:6:32"},"nativeSrc":"5349:74:32","nodeType":"YulFunctionCall","src":"5349:74:32"},"nativeSrc":"5349:74:32","nodeType":"YulExpressionStatement","src":"5349:74:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5443:9:32","nodeType":"YulIdentifier","src":"5443:9:32"},{"kind":"number","nativeSrc":"5454:2:32","nodeType":"YulLiteral","src":"5454:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5439:3:32","nodeType":"YulIdentifier","src":"5439:3:32"},"nativeSrc":"5439:18:32","nodeType":"YulFunctionCall","src":"5439:18:32"},{"kind":"number","nativeSrc":"5459:2:32","nodeType":"YulLiteral","src":"5459:2:32","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"5432:6:32","nodeType":"YulIdentifier","src":"5432:6:32"},"nativeSrc":"5432:30:32","nodeType":"YulFunctionCall","src":"5432:30:32"},"nativeSrc":"5432:30:32","nodeType":"YulExpressionStatement","src":"5432:30:32"},{"nativeSrc":"5471:87:32","nodeType":"YulVariableDeclaration","src":"5471:87:32","value":{"arguments":[{"name":"value1","nativeSrc":"5523:6:32","nodeType":"YulIdentifier","src":"5523:6:32"},{"name":"value2","nativeSrc":"5531:6:32","nodeType":"YulIdentifier","src":"5531:6:32"},{"arguments":[{"name":"headStart","nativeSrc":"5543:9:32","nodeType":"YulIdentifier","src":"5543:9:32"},{"kind":"number","nativeSrc":"5554:2:32","nodeType":"YulLiteral","src":"5554:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5539:3:32","nodeType":"YulIdentifier","src":"5539:3:32"},"nativeSrc":"5539:18:32","nodeType":"YulFunctionCall","src":"5539:18:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"5485:37:32","nodeType":"YulIdentifier","src":"5485:37:32"},"nativeSrc":"5485:73:32","nodeType":"YulFunctionCall","src":"5485:73:32"},"variables":[{"name":"tail_1","nativeSrc":"5475:6:32","nodeType":"YulTypedName","src":"5475:6:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5578:9:32","nodeType":"YulIdentifier","src":"5578:9:32"},{"kind":"number","nativeSrc":"5589:2:32","nodeType":"YulLiteral","src":"5589:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5574:3:32","nodeType":"YulIdentifier","src":"5574:3:32"},"nativeSrc":"5574:18:32","nodeType":"YulFunctionCall","src":"5574:18:32"},{"arguments":[{"name":"tail_1","nativeSrc":"5598:6:32","nodeType":"YulIdentifier","src":"5598:6:32"},{"name":"headStart","nativeSrc":"5606:9:32","nodeType":"YulIdentifier","src":"5606:9:32"}],"functionName":{"name":"sub","nativeSrc":"5594:3:32","nodeType":"YulIdentifier","src":"5594:3:32"},"nativeSrc":"5594:22:32","nodeType":"YulFunctionCall","src":"5594:22:32"}],"functionName":{"name":"mstore","nativeSrc":"5567:6:32","nodeType":"YulIdentifier","src":"5567:6:32"},"nativeSrc":"5567:50:32","nodeType":"YulFunctionCall","src":"5567:50:32"},"nativeSrc":"5567:50:32","nodeType":"YulExpressionStatement","src":"5567:50:32"},{"nativeSrc":"5626:69:32","nodeType":"YulAssignment","src":"5626:69:32","value":{"arguments":[{"name":"value3","nativeSrc":"5672:6:32","nodeType":"YulIdentifier","src":"5672:6:32"},{"name":"value4","nativeSrc":"5680:6:32","nodeType":"YulIdentifier","src":"5680:6:32"},{"name":"tail_1","nativeSrc":"5688:6:32","nodeType":"YulIdentifier","src":"5688:6:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"5634:37:32","nodeType":"YulIdentifier","src":"5634:37:32"},"nativeSrc":"5634:61:32","nodeType":"YulFunctionCall","src":"5634:61:32"},"variableNames":[{"name":"tail","nativeSrc":"5626:4:32","nodeType":"YulIdentifier","src":"5626:4:32"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"5062:639:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5276:9:32","nodeType":"YulTypedName","src":"5276:9:32","type":""},{"name":"value4","nativeSrc":"5287:6:32","nodeType":"YulTypedName","src":"5287:6:32","type":""},{"name":"value3","nativeSrc":"5295:6:32","nodeType":"YulTypedName","src":"5295:6:32","type":""},{"name":"value2","nativeSrc":"5303:6:32","nodeType":"YulTypedName","src":"5303:6:32","type":""},{"name":"value1","nativeSrc":"5311:6:32","nodeType":"YulTypedName","src":"5311:6:32","type":""},{"name":"value0","nativeSrc":"5319:6:32","nodeType":"YulTypedName","src":"5319:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5330:4:32","nodeType":"YulTypedName","src":"5330:4:32","type":""}],"src":"5062:639:32"},{"body":{"nativeSrc":"5955:270:32","nodeType":"YulBlock","src":"5955:270:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5972:9:32","nodeType":"YulIdentifier","src":"5972:9:32"},{"kind":"number","nativeSrc":"5983:2:32","nodeType":"YulLiteral","src":"5983:2:32","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"5965:6:32","nodeType":"YulIdentifier","src":"5965:6:32"},"nativeSrc":"5965:21:32","nodeType":"YulFunctionCall","src":"5965:21:32"},"nativeSrc":"5965:21:32","nodeType":"YulExpressionStatement","src":"5965:21:32"},{"nativeSrc":"5995:87:32","nodeType":"YulVariableDeclaration","src":"5995:87:32","value":{"arguments":[{"name":"value0","nativeSrc":"6047:6:32","nodeType":"YulIdentifier","src":"6047:6:32"},{"name":"value1","nativeSrc":"6055:6:32","nodeType":"YulIdentifier","src":"6055:6:32"},{"arguments":[{"name":"headStart","nativeSrc":"6067:9:32","nodeType":"YulIdentifier","src":"6067:9:32"},{"kind":"number","nativeSrc":"6078:2:32","nodeType":"YulLiteral","src":"6078:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6063:3:32","nodeType":"YulIdentifier","src":"6063:3:32"},"nativeSrc":"6063:18:32","nodeType":"YulFunctionCall","src":"6063:18:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6009:37:32","nodeType":"YulIdentifier","src":"6009:37:32"},"nativeSrc":"6009:73:32","nodeType":"YulFunctionCall","src":"6009:73:32"},"variables":[{"name":"tail_1","nativeSrc":"5999:6:32","nodeType":"YulTypedName","src":"5999:6:32","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6102:9:32","nodeType":"YulIdentifier","src":"6102:9:32"},{"kind":"number","nativeSrc":"6113:2:32","nodeType":"YulLiteral","src":"6113:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6098:3:32","nodeType":"YulIdentifier","src":"6098:3:32"},"nativeSrc":"6098:18:32","nodeType":"YulFunctionCall","src":"6098:18:32"},{"arguments":[{"name":"tail_1","nativeSrc":"6122:6:32","nodeType":"YulIdentifier","src":"6122:6:32"},{"name":"headStart","nativeSrc":"6130:9:32","nodeType":"YulIdentifier","src":"6130:9:32"}],"functionName":{"name":"sub","nativeSrc":"6118:3:32","nodeType":"YulIdentifier","src":"6118:3:32"},"nativeSrc":"6118:22:32","nodeType":"YulFunctionCall","src":"6118:22:32"}],"functionName":{"name":"mstore","nativeSrc":"6091:6:32","nodeType":"YulIdentifier","src":"6091:6:32"},"nativeSrc":"6091:50:32","nodeType":"YulFunctionCall","src":"6091:50:32"},"nativeSrc":"6091:50:32","nodeType":"YulExpressionStatement","src":"6091:50:32"},{"nativeSrc":"6150:69:32","nodeType":"YulAssignment","src":"6150:69:32","value":{"arguments":[{"name":"value2","nativeSrc":"6196:6:32","nodeType":"YulIdentifier","src":"6196:6:32"},{"name":"value3","nativeSrc":"6204:6:32","nodeType":"YulIdentifier","src":"6204:6:32"},{"name":"tail_1","nativeSrc":"6212:6:32","nodeType":"YulIdentifier","src":"6212:6:32"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6158:37:32","nodeType":"YulIdentifier","src":"6158:37:32"},"nativeSrc":"6158:61:32","nodeType":"YulFunctionCall","src":"6158:61:32"},"variableNames":[{"name":"tail","nativeSrc":"6150:4:32","nodeType":"YulIdentifier","src":"6150:4:32"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"5706:519:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5900:9:32","nodeType":"YulTypedName","src":"5900:9:32","type":""},{"name":"value3","nativeSrc":"5911:6:32","nodeType":"YulTypedName","src":"5911:6:32","type":""},{"name":"value2","nativeSrc":"5919:6:32","nodeType":"YulTypedName","src":"5919:6:32","type":""},{"name":"value1","nativeSrc":"5927:6:32","nodeType":"YulTypedName","src":"5927:6:32","type":""},{"name":"value0","nativeSrc":"5935:6:32","nodeType":"YulTypedName","src":"5935:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5946:4:32","nodeType":"YulTypedName","src":"5946:4:32","type":""}],"src":"5706:519:32"},{"body":{"nativeSrc":"6279:233:32","nodeType":"YulBlock","src":"6279:233:32","statements":[{"nativeSrc":"6289:17:32","nodeType":"YulAssignment","src":"6289:17:32","value":{"arguments":[{"name":"x","nativeSrc":"6301:1:32","nodeType":"YulIdentifier","src":"6301:1:32"},{"name":"y","nativeSrc":"6304:1:32","nodeType":"YulIdentifier","src":"6304:1:32"}],"functionName":{"name":"sub","nativeSrc":"6297:3:32","nodeType":"YulIdentifier","src":"6297:3:32"},"nativeSrc":"6297:9:32","nodeType":"YulFunctionCall","src":"6297:9:32"},"variableNames":[{"name":"diff","nativeSrc":"6289:4:32","nodeType":"YulIdentifier","src":"6289:4:32"}]},{"body":{"nativeSrc":"6338:168:32","nodeType":"YulBlock","src":"6338:168:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6359:1:32","nodeType":"YulLiteral","src":"6359:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6362:77:32","nodeType":"YulLiteral","src":"6362:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6352:6:32","nodeType":"YulIdentifier","src":"6352:6:32"},"nativeSrc":"6352:88:32","nodeType":"YulFunctionCall","src":"6352:88:32"},"nativeSrc":"6352:88:32","nodeType":"YulExpressionStatement","src":"6352:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6460:1:32","nodeType":"YulLiteral","src":"6460:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"6463:4:32","nodeType":"YulLiteral","src":"6463:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"6453:6:32","nodeType":"YulIdentifier","src":"6453:6:32"},"nativeSrc":"6453:15:32","nodeType":"YulFunctionCall","src":"6453:15:32"},"nativeSrc":"6453:15:32","nodeType":"YulExpressionStatement","src":"6453:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6488:1:32","nodeType":"YulLiteral","src":"6488:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6491:4:32","nodeType":"YulLiteral","src":"6491:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6481:6:32","nodeType":"YulIdentifier","src":"6481:6:32"},"nativeSrc":"6481:15:32","nodeType":"YulFunctionCall","src":"6481:15:32"},"nativeSrc":"6481:15:32","nodeType":"YulExpressionStatement","src":"6481:15:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6321:4:32","nodeType":"YulIdentifier","src":"6321:4:32"},{"name":"x","nativeSrc":"6327:1:32","nodeType":"YulIdentifier","src":"6327:1:32"}],"functionName":{"name":"gt","nativeSrc":"6318:2:32","nodeType":"YulIdentifier","src":"6318:2:32"},"nativeSrc":"6318:11:32","nodeType":"YulFunctionCall","src":"6318:11:32"},"nativeSrc":"6315:191:32","nodeType":"YulIf","src":"6315:191:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"6230:282:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6261:1:32","nodeType":"YulTypedName","src":"6261:1:32","type":""},{"name":"y","nativeSrc":"6264:1:32","nodeType":"YulTypedName","src":"6264:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6270:4:32","nodeType":"YulTypedName","src":"6270:4:32","type":""}],"src":"6230:282:32"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$948__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_12669bb8fa5986d3fd494c47774708cf75572e0072244adbabca7fc66547bec5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC1155: burn caller is not appr\")\n        mstore(add(headStart, 96), \"oved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":183},{"length":32,"start":268},{"length":32,"start":2190},{"length":32,"start":2326}],"3064":[{"length":32,"start":334},{"length":32,"start":564},{"length":32,"start":984},{"length":32,"start":1246}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146101705780639d33fe5714610178578063e4cbb46e1461018d578063f2fde38b146101a057600080fd5b806301ffc9a71461008d5780632b4c9f16146100b5578063572b6c05146100fc57806382bfefc814610149575b600080fd5b6100a061009b366004610992565b6101b3565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6100a061010a366004610a04565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6100d77f000000000000000000000000000000000000000000000000000000000000000081565b6100d76101cd565b61018b610186366004610a6b565b6101f9565b005b61018b61019b366004610aec565b6104a3565b61018b6101ae366004610a04565b6105d8565b60006101c7826101c16105f6565b90610624565b92915050565b60006101f46101da6106fe565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b828114610232576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e985e9c58661027761072c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190610b58565b61039b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f455243313135353a206275726e2063616c6c6572206973206e6f74206170707260448201527f6f7665640000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517f8053493400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906380534934906104159088908890889088908890600401610bc5565b600060405180830381600087803b15801561042f57600080fd5b505af1158015610443573d6000803e3d6000fd5b50505050428573ffffffffffffffffffffffffffffffffffffffff167f674e56473ddb0f588fb74339bd1423aa4224362e7323ddca32ab17328eb8003f868686866040516104949493929190610c14565b60405180910390a35050505050565b8281146104dc576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638053493461052061072c565b868686866040518663ffffffff1660e01b8152600401610544959493929190610bc5565b600060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050504261057f61072c565b73ffffffffffffffffffffffffffffffffffffffff167f674e56473ddb0f588fb74339bd1423aa4224362e7323ddca32ab17328eb8003f868686866040516105ca9493929190610c14565b60405180910390a350505050565b6105f36105e361072c565b826105ec6106fe565b9190610736565b50565b6000806101c760017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610c46565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610674575060006101c7565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016106c5575060016101c7565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806101c760017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610c46565b60006101f461084b565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146107a3576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610392565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108455783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b60003332148061085b5750601836105b1561086557503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061098157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190610b58565b1561098b57919050565b3391505090565b6000602082840312156109a457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109d457600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109ff57600080fd5b919050565b600060208284031215610a1657600080fd5b6109d4826109db565b60008083601f840112610a3157600080fd5b50813567ffffffffffffffff811115610a4957600080fd5b6020830191508360208260051b8501011115610a6457600080fd5b9250929050565b600080600080600060608688031215610a8357600080fd5b610a8c866109db565b9450602086013567ffffffffffffffff80821115610aa957600080fd5b610ab589838a01610a1f565b90965094506040880135915080821115610ace57600080fd5b50610adb88828901610a1f565b969995985093965092949392505050565b60008060008060408587031215610b0257600080fd5b843567ffffffffffffffff80821115610b1a57600080fd5b610b2688838901610a1f565b90965094506020870135915080821115610b3f57600080fd5b50610b4c87828801610a1f565b95989497509550505050565b600060208284031215610b6a57600080fd5b815180151581146109d457600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610bac57600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff86168152606060208201526000610bf5606083018688610b7a565b8281036040840152610c08818587610b7a565b98975050505050505050565b604081526000610c28604083018688610b7a565b8281036020840152610c3b818587610b7a565b979650505050505050565b818103818111156101c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220974a73ae5e1cf1aa33e1e1ee62cbd50b98f50920c7b39a5ad80dd9a0a7b2acd864736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x9D33FE57 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xE4CBB46E EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x82BFEFC8 EQ PUSH2 0x149 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x992 JUMP JUMPDEST PUSH2 0x1B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0xA04 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0xD7 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xD7 PUSH2 0x1CD JUMP JUMPDEST PUSH2 0x18B PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6B JUMP JUMPDEST PUSH2 0x1F9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18B PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x1AE CALLDATASIZE PUSH1 0x4 PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x5D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C7 DUP3 PUSH2 0x1C1 PUSH2 0x5F6 JUMP JUMPDEST SWAP1 PUSH2 0x624 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F4 PUSH2 0x1DA PUSH2 0x6FE JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x232 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE985E9C5 DUP7 PUSH2 0x277 PUSH2 0x72C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x39B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E2063616C6C6572206973206E6F742061707072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F76656400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x415 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x443 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP TIMESTAMP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x674E56473DDB0F588FB74339BD1423AA4224362E7323DDCA32AB17328EB8003F DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x494 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 PUSH2 0x520 PUSH2 0x72C JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x544 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP TIMESTAMP PUSH2 0x57F PUSH2 0x72C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x674E56473DDB0F588FB74339BD1423AA4224362E7323DDCA32AB17328EB8003F DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x5CA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x5F3 PUSH2 0x5E3 PUSH2 0x72C JUMP JUMPDEST DUP3 PUSH2 0x5EC PUSH2 0x6FE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x736 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C7 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x674 JUMPI POP PUSH1 0x0 PUSH2 0x1C7 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x6C5 JUMPI POP PUSH1 0x1 PUSH2 0x1C7 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C7 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F4 PUSH2 0x84B JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x7A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x392 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x845 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x85B JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x865 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x981 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x95D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x981 SWAP2 SWAP1 PUSH2 0xB58 JUMP JUMPDEST ISZERO PUSH2 0x98B JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9D4 DUP3 PUSH2 0x9DB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xA64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8C DUP7 PUSH2 0x9DB JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB5 DUP10 DUP4 DUP11 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xADB DUP9 DUP3 DUP10 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB26 DUP9 DUP4 DUP10 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB4C DUP8 DUP3 DUP9 ADD PUSH2 0xA1F JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0xBAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xBF5 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0xB7A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xC08 DUP2 DUP6 DUP8 PUSH2 0xB7A JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC28 PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0xB7A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC3B DUP2 DUP6 DUP8 PUSH2 0xB7A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1C7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 0x4A PUSH20 0xAE5E1CF1AA33E1E1EE62CBD50B98F50920C7B39A GAS 0xD8 0xD 0xD9 LOG0 0xA7 0xB2 0xAC 0xD8 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1177:2575:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:32;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;728:115:11;817:19;728:115;;;745:42:32;733:55;;;715:74;;703:2;688:18;728:115:11;543:252:32;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1384:39:29;;;;;710:120:1;;;:::i;3298:452:29:-;;;;;;:::i;:::-;;:::i;:::-;;2781:302;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;3298:452:29:-;3403:27;;;3399:85;;3453:20;;;;;;;;;;;;;;3399:85;3516:5;3499:41;;;3541:4;3547:12;:10;:12::i;:::-;3499:61;;;;;;;;;;3864:42:32;3933:15;;;3499:61:29;;;3915:34:32;3985:15;;3965:18;;;3958:43;3827:18;;3499:61:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3494:139;;3576:46;;;;;4496:2:32;3576:46:29;;;4478:21:32;4535:2;4515:18;;;4508:30;4574:34;4554:18;;;4547:62;4645:6;4625:18;;;4618:34;4669:19;;3576:46:29;;;;;;;;3494:139;3643:38;;;;;:19;:5;:19;;;;:38;;3663:4;;3669:3;;;;3674:6;;;;3643:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3714:15;3708:4;3696:47;;;3731:3;;3736:6;;3696:47;;;;;;;;;:::i;:::-;;;;;;;;3298:452;;;;;:::o;2781:302::-;2869:27;;;2865:85;;2919:20;;;;;;;;;;;;;;2865:85;2960:5;:19;;;2980:12;:10;:12::i;:::-;2994:3;;2999:6;;2960:46;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:15;3033:12;:10;:12::i;:::-;3021:55;;;3064:3;;3069:6;;3021:55;;;;;;;;;:::i;:::-;;;;;;;;2781:302;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;2216:175:29:-;2317:7;2343:41;:39;:41::i;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;745:42:32;733:55;;3243:24:6;;;715:74:32;688:18;;3243:24:6;543:252:32;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;3933:15:32;;;1396:59:12;;;3915:34:32;1444:10:12;3965:18:32;;;3958:43;1396:19:12;:39;;;;3827:18:32;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;14:332:32:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:32:o;800:196::-;868:20;;928:42;917:54;;907:65;;897:93;;986:1;983;976:12;897:93;800:196;;;:::o;1001:186::-;1060:6;1113:2;1101:9;1092:7;1088:23;1084:32;1081:52;;;1129:1;1126;1119:12;1081:52;1152:29;1171:9;1152:29;:::i;1678:367::-;1741:8;1751:6;1805:3;1798:4;1790:6;1786:17;1782:27;1772:55;;1823:1;1820;1813:12;1772:55;-1:-1:-1;1846:20:32;;1889:18;1878:30;;1875:50;;;1921:1;1918;1911:12;1875:50;1958:4;1950:6;1946:17;1934:29;;2018:3;2011:4;2001:6;1998:1;1994:14;1986:6;1982:27;1978:38;1975:47;1972:67;;;2035:1;2032;2025:12;1972:67;1678:367;;;;;:::o;2050:847::-;2181:6;2189;2197;2205;2213;2266:2;2254:9;2245:7;2241:23;2237:32;2234:52;;;2282:1;2279;2272:12;2234:52;2305:29;2324:9;2305:29;:::i;:::-;2295:39;;2385:2;2374:9;2370:18;2357:32;2408:18;2449:2;2441:6;2438:14;2435:34;;;2465:1;2462;2455:12;2435:34;2504:70;2566:7;2557:6;2546:9;2542:22;2504:70;:::i;:::-;2593:8;;-1:-1:-1;2478:96:32;-1:-1:-1;2681:2:32;2666:18;;2653:32;;-1:-1:-1;2697:16:32;;;2694:36;;;2726:1;2723;2716:12;2694:36;;2765:72;2829:7;2818:8;2807:9;2803:24;2765:72;:::i;:::-;2050:847;;;;-1:-1:-1;2050:847:32;;-1:-1:-1;2856:8:32;;2739:98;2050:847;-1:-1:-1;;;2050:847:32:o;2902:773::-;3024:6;3032;3040;3048;3101:2;3089:9;3080:7;3076:23;3072:32;3069:52;;;3117:1;3114;3107:12;3069:52;3157:9;3144:23;3186:18;3227:2;3219:6;3216:14;3213:34;;;3243:1;3240;3233:12;3213:34;3282:70;3344:7;3335:6;3324:9;3320:22;3282:70;:::i;:::-;3371:8;;-1:-1:-1;3256:96:32;-1:-1:-1;3459:2:32;3444:18;;3431:32;;-1:-1:-1;3475:16:32;;;3472:36;;;3504:1;3501;3494:12;3472:36;;3543:72;3607:7;3596:8;3585:9;3581:24;3543:72;:::i;:::-;2902:773;;;;-1:-1:-1;3634:8:32;-1:-1:-1;;;;2902:773:32:o;4012:277::-;4079:6;4132:2;4120:9;4111:7;4107:23;4103:32;4100:52;;;4148:1;4145;4138:12;4100:52;4180:9;4174:16;4233:5;4226:13;4219:21;4212:5;4209:32;4199:60;;4255:1;4252;4245:12;4699:358;4799:6;4794:3;4787:19;4769:3;4829:66;4821:6;4818:78;4815:98;;;4909:1;4906;4899:12;4815:98;4945:6;4942:1;4938:14;4997:8;4990:5;4983:4;4978:3;4974:14;4961:45;5026:18;;;;5046:4;5022:29;;4699:358;-1:-1:-1;;;4699:358:32:o;5062:639::-;5379:42;5371:6;5367:55;5356:9;5349:74;5459:2;5454;5443:9;5439:18;5432:30;5330:4;5485:73;5554:2;5543:9;5539:18;5531:6;5523;5485:73;:::i;:::-;5606:9;5598:6;5594:22;5589:2;5578:9;5574:18;5567:50;5634:61;5688:6;5680;5672;5634:61;:::i;:::-;5626:69;5062:639;-1:-1:-1;;;;;;;;5062:639:32:o;5706:519::-;5983:2;5972:9;5965:21;5946:4;6009:73;6078:2;6067:9;6063:18;6055:6;6047;6009:73;:::i;:::-;6130:9;6122:6;6118:22;6113:2;6102:9;6098:18;6091:50;6158:61;6212:6;6204;6196;6158:61;:::i;:::-;6150:69;5706:519;-1:-1:-1;;;;;;;5706:519:32:o;6230:282::-;6297:9;;;6318:11;;;6315:191;;;6362:77;6359:1;6352:88;6463:4;6460:1;6453:15;6491:4;6488:1;6481:15"},"gasEstimates":{"creation":{"codeDepositCost":"650800","executionCost":"infinite","totalCost":"infinite"},"external":{"TOKEN()":"infinite","burn(uint256[],uint256[])":"infinite","burnFor(address,uint256[],uint256[])":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","owner()":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"TOKEN()":"82bfefc8","burn(uint256[],uint256[])":"e4cbb46e","burnFor(address,uint256[],uint256[])":"9d33fe57","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TokensBurnt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"burn(uint256[],uint256[])\":{\"params\":{\"ids\":\"The token ids to burn.\",\"values\":\"The amount of tokens to burn.\"}},\"burnFor(address,uint256[],uint256[])\":{\"params\":{\"from\":\"The wallet to burn the tokens from.\",\"ids\":\"The token ids to burn.\",\"values\":\"The amount of tokens to burn.\"}},\"constructor\":{\"params\":{\"forwarderRegistry\":\"The forwarder registry contract.\",\"token\":\"The IERC1155Burnable erc1155 contract.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Anichess ERC1155 Merkle Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"TokensBurnt(address,uint256,uint256[],uint256[])\":{\"notice\":\"Event emitted when tokens are burnt.\"}},\"kind\":\"user\",\"methods\":{\"TOKEN()\":{\"notice\":\"The IERC1155Burnable erc1155 contract.\"},\"burn(uint256[],uint256[])\":{\"notice\":\"Burns the token from sender\"},\"burnFor(address,uint256[],uint256[])\":{\"notice\":\"Burns the token from a wallet.\"},\"constructor\":{\"notice\":\"Constructor for the ERC1155TokenBurn contract.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/AnichessOrbsBurnPoolSimpleSingle.sol\":\"ERC1155TokenBurn\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xc73c79ec8b1acdaccb4bbdab1f460043ddb27f3b5300389f6ec672bf0f1c7ae6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/burn/AnichessOrbsBurnPoolSimpleSingle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess ERC1155 Merkle Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract ERC1155TokenBurn is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice The IERC1155Burnable erc1155 contract.\\n    IERC1155Burnable public immutable TOKEN;\\n\\n    /// @notice Event emitted when tokens are burnt.\\n    event TokensBurnt(address indexed burner, uint256 indexed timestamp, uint256[] ids, uint256[] values);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    error InconsistentArrays();\\n\\n    error NotApproved();\\n\\n    /**\\n     * @notice Constructor for the ERC1155TokenBurn contract.\\n     * @param token The IERC1155Burnable erc1155 contract.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        IERC1155Burnable token,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        TOKEN = token;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Burns the token from sender\\n     * @param ids The token ids to burn.\\n     * @param values The amount of tokens to burn.\\n     */\\n    function burn(uint256[] calldata ids, uint256[] calldata values) external {\\n        if (ids.length != values.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        TOKEN.batchBurnFrom(_msgSender(), ids, values);\\n        emit TokensBurnt(_msgSender(), block.timestamp, ids, values);\\n    }\\n\\n    /**\\n     * @notice Burns the token from a wallet.\\n     * @param from The wallet to burn the tokens from.\\n     * @param ids The token ids to burn.\\n     * @param values The amount of tokens to burn.\\n     */\\n    function burnFor(address from, uint256[] calldata ids, uint256[] calldata values) external {\\n        if (ids.length != values.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        if (!IERC1155(address(TOKEN)).isApprovedForAll(from, _msgSender())) {\\n            revert(\\\"ERC1155: burn caller is not approved\\\");\\n        }\\n\\n        TOKEN.batchBurnFrom(from, ids, values);\\n        emit TokensBurnt(from, block.timestamp, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x50cfd2e5b19a6791b6c1a35234d796a590455f18dcfe60a2164153dfcda496ed\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"TokensBurnt(address,uint256,uint256[],uint256[])":{"notice":"Event emitted when tokens are burnt."}},"kind":"user","methods":{"TOKEN()":{"notice":"The IERC1155Burnable erc1155 contract."},"burn(uint256[],uint256[])":{"notice":"Burns the token from sender"},"burnFor(address,uint256[],uint256[])":{"notice":"Burns the token from a wallet."},"constructor":{"notice":"Constructor for the ERC1155TokenBurn contract."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"AnichessERC1155MerkleClaim":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"mintSupply","type":"uint256"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"ExceededMintSupply","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"SetEpochMerkleRoot","type":"event"},{"inputs":[],"name":"MINT_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"noOfTokensClaimed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"claim(bytes32,bytes32[],address)":{"details":"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.","params":{"epochId":"The epoch ID for the claim.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout."}},"constructor":{"params":{"forwarderRegistry":"The forwarder registry contract.","mintSupply":"The total number of tokens that can be minted in this contract.","rewardContract":"The ERC1155Mintable reward contract interface.","tokenId":"The token id to be claimed."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.","params":{"endTime":"The end time of the claim window.","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Anichess ERC1155 Merkle Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_3386":{"entryPoint":null,"id":3386,"parameterSlots":4,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":172,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":118,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":295,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":343,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$978t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":461,"id":null,"parameterSlots":2,"returnSlots":4},"checked_sub_t_uint256":{"entryPoint":541,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Mintable":{"entryPoint":436,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:994:32","nodeType":"YulBlock","src":"0:994:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"77:86:32","nodeType":"YulBlock","src":"77:86:32","statements":[{"body":{"nativeSrc":"141:16:32","nodeType":"YulBlock","src":"141:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:32","nodeType":"YulLiteral","src":"150:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:32","nodeType":"YulLiteral","src":"153:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:32","nodeType":"YulIdentifier","src":"143:6:32"},"nativeSrc":"143:12:32","nodeType":"YulFunctionCall","src":"143:12:32"},"nativeSrc":"143:12:32","nodeType":"YulExpressionStatement","src":"143:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:32","nodeType":"YulIdentifier","src":"100:5:32"},{"arguments":[{"name":"value","nativeSrc":"111:5:32","nodeType":"YulIdentifier","src":"111:5:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:32","nodeType":"YulLiteral","src":"126:3:32","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:32","nodeType":"YulLiteral","src":"131:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:32","nodeType":"YulIdentifier","src":"122:3:32"},"nativeSrc":"122:11:32","nodeType":"YulFunctionCall","src":"122:11:32"},{"kind":"number","nativeSrc":"135:1:32","nodeType":"YulLiteral","src":"135:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:32","nodeType":"YulIdentifier","src":"118:3:32"},"nativeSrc":"118:19:32","nodeType":"YulFunctionCall","src":"118:19:32"}],"functionName":{"name":"and","nativeSrc":"107:3:32","nodeType":"YulIdentifier","src":"107:3:32"},"nativeSrc":"107:31:32","nodeType":"YulFunctionCall","src":"107:31:32"}],"functionName":{"name":"eq","nativeSrc":"97:2:32","nodeType":"YulIdentifier","src":"97:2:32"},"nativeSrc":"97:42:32","nodeType":"YulFunctionCall","src":"97:42:32"}],"functionName":{"name":"iszero","nativeSrc":"90:6:32","nodeType":"YulIdentifier","src":"90:6:32"},"nativeSrc":"90:50:32","nodeType":"YulFunctionCall","src":"90:50:32"},"nativeSrc":"87:70:32","nodeType":"YulIf","src":"87:70:32"}]},"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"14:149:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:32","nodeType":"YulTypedName","src":"66:5:32","type":""}],"src":"14:149:32"},{"body":{"nativeSrc":"350:412:32","nodeType":"YulBlock","src":"350:412:32","statements":[{"body":{"nativeSrc":"397:16:32","nodeType":"YulBlock","src":"397:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"406:1:32","nodeType":"YulLiteral","src":"406:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"409:1:32","nodeType":"YulLiteral","src":"409:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"399:6:32","nodeType":"YulIdentifier","src":"399:6:32"},"nativeSrc":"399:12:32","nodeType":"YulFunctionCall","src":"399:12:32"},"nativeSrc":"399:12:32","nodeType":"YulExpressionStatement","src":"399:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"371:7:32","nodeType":"YulIdentifier","src":"371:7:32"},{"name":"headStart","nativeSrc":"380:9:32","nodeType":"YulIdentifier","src":"380:9:32"}],"functionName":{"name":"sub","nativeSrc":"367:3:32","nodeType":"YulIdentifier","src":"367:3:32"},"nativeSrc":"367:23:32","nodeType":"YulFunctionCall","src":"367:23:32"},{"kind":"number","nativeSrc":"392:3:32","nodeType":"YulLiteral","src":"392:3:32","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"363:3:32","nodeType":"YulIdentifier","src":"363:3:32"},"nativeSrc":"363:33:32","nodeType":"YulFunctionCall","src":"363:33:32"},"nativeSrc":"360:53:32","nodeType":"YulIf","src":"360:53:32"},{"nativeSrc":"422:26:32","nodeType":"YulAssignment","src":"422:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"438:9:32","nodeType":"YulIdentifier","src":"438:9:32"}],"functionName":{"name":"mload","nativeSrc":"432:5:32","nodeType":"YulIdentifier","src":"432:5:32"},"nativeSrc":"432:16:32","nodeType":"YulFunctionCall","src":"432:16:32"},"variableNames":[{"name":"value0","nativeSrc":"422:6:32","nodeType":"YulIdentifier","src":"422:6:32"}]},{"nativeSrc":"457:35:32","nodeType":"YulAssignment","src":"457:35:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"477:9:32","nodeType":"YulIdentifier","src":"477:9:32"},{"kind":"number","nativeSrc":"488:2:32","nodeType":"YulLiteral","src":"488:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"473:3:32","nodeType":"YulIdentifier","src":"473:3:32"},"nativeSrc":"473:18:32","nodeType":"YulFunctionCall","src":"473:18:32"}],"functionName":{"name":"mload","nativeSrc":"467:5:32","nodeType":"YulIdentifier","src":"467:5:32"},"nativeSrc":"467:25:32","nodeType":"YulFunctionCall","src":"467:25:32"},"variableNames":[{"name":"value1","nativeSrc":"457:6:32","nodeType":"YulIdentifier","src":"457:6:32"}]},{"nativeSrc":"501:38:32","nodeType":"YulVariableDeclaration","src":"501:38:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"524:9:32","nodeType":"YulIdentifier","src":"524:9:32"},{"kind":"number","nativeSrc":"535:2:32","nodeType":"YulLiteral","src":"535:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"520:3:32","nodeType":"YulIdentifier","src":"520:3:32"},"nativeSrc":"520:18:32","nodeType":"YulFunctionCall","src":"520:18:32"}],"functionName":{"name":"mload","nativeSrc":"514:5:32","nodeType":"YulIdentifier","src":"514:5:32"},"nativeSrc":"514:25:32","nodeType":"YulFunctionCall","src":"514:25:32"},"variables":[{"name":"value","nativeSrc":"505:5:32","nodeType":"YulTypedName","src":"505:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"591:5:32","nodeType":"YulIdentifier","src":"591:5:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"548:42:32","nodeType":"YulIdentifier","src":"548:42:32"},"nativeSrc":"548:49:32","nodeType":"YulFunctionCall","src":"548:49:32"},"nativeSrc":"548:49:32","nodeType":"YulExpressionStatement","src":"548:49:32"},{"nativeSrc":"606:15:32","nodeType":"YulAssignment","src":"606:15:32","value":{"name":"value","nativeSrc":"616:5:32","nodeType":"YulIdentifier","src":"616:5:32"},"variableNames":[{"name":"value2","nativeSrc":"606:6:32","nodeType":"YulIdentifier","src":"606:6:32"}]},{"nativeSrc":"630:40:32","nodeType":"YulVariableDeclaration","src":"630:40:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"655:9:32","nodeType":"YulIdentifier","src":"655:9:32"},{"kind":"number","nativeSrc":"666:2:32","nodeType":"YulLiteral","src":"666:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"651:3:32","nodeType":"YulIdentifier","src":"651:3:32"},"nativeSrc":"651:18:32","nodeType":"YulFunctionCall","src":"651:18:32"}],"functionName":{"name":"mload","nativeSrc":"645:5:32","nodeType":"YulIdentifier","src":"645:5:32"},"nativeSrc":"645:25:32","nodeType":"YulFunctionCall","src":"645:25:32"},"variables":[{"name":"value_1","nativeSrc":"634:7:32","nodeType":"YulTypedName","src":"634:7:32","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"722:7:32","nodeType":"YulIdentifier","src":"722:7:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"679:42:32","nodeType":"YulIdentifier","src":"679:42:32"},"nativeSrc":"679:51:32","nodeType":"YulFunctionCall","src":"679:51:32"},"nativeSrc":"679:51:32","nodeType":"YulExpressionStatement","src":"679:51:32"},{"nativeSrc":"739:17:32","nodeType":"YulAssignment","src":"739:17:32","value":{"name":"value_1","nativeSrc":"749:7:32","nodeType":"YulIdentifier","src":"749:7:32"},"variableNames":[{"name":"value3","nativeSrc":"739:6:32","nodeType":"YulIdentifier","src":"739:6:32"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$978t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:594:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"292:9:32","nodeType":"YulTypedName","src":"292:9:32","type":""},{"name":"dataEnd","nativeSrc":"303:7:32","nodeType":"YulTypedName","src":"303:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"315:6:32","nodeType":"YulTypedName","src":"315:6:32","type":""},{"name":"value1","nativeSrc":"323:6:32","nodeType":"YulTypedName","src":"323:6:32","type":""},{"name":"value2","nativeSrc":"331:6:32","nodeType":"YulTypedName","src":"331:6:32","type":""},{"name":"value3","nativeSrc":"339:6:32","nodeType":"YulTypedName","src":"339:6:32","type":""}],"src":"168:594:32"},{"body":{"nativeSrc":"816:176:32","nodeType":"YulBlock","src":"816:176:32","statements":[{"nativeSrc":"826:17:32","nodeType":"YulAssignment","src":"826:17:32","value":{"arguments":[{"name":"x","nativeSrc":"838:1:32","nodeType":"YulIdentifier","src":"838:1:32"},{"name":"y","nativeSrc":"841:1:32","nodeType":"YulIdentifier","src":"841:1:32"}],"functionName":{"name":"sub","nativeSrc":"834:3:32","nodeType":"YulIdentifier","src":"834:3:32"},"nativeSrc":"834:9:32","nodeType":"YulFunctionCall","src":"834:9:32"},"variableNames":[{"name":"diff","nativeSrc":"826:4:32","nodeType":"YulIdentifier","src":"826:4:32"}]},{"body":{"nativeSrc":"875:111:32","nodeType":"YulBlock","src":"875:111:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"896:1:32","nodeType":"YulLiteral","src":"896:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"903:3:32","nodeType":"YulLiteral","src":"903:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"908:10:32","nodeType":"YulLiteral","src":"908:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"899:3:32","nodeType":"YulIdentifier","src":"899:3:32"},"nativeSrc":"899:20:32","nodeType":"YulFunctionCall","src":"899:20:32"}],"functionName":{"name":"mstore","nativeSrc":"889:6:32","nodeType":"YulIdentifier","src":"889:6:32"},"nativeSrc":"889:31:32","nodeType":"YulFunctionCall","src":"889:31:32"},"nativeSrc":"889:31:32","nodeType":"YulExpressionStatement","src":"889:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"940:1:32","nodeType":"YulLiteral","src":"940:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"943:4:32","nodeType":"YulLiteral","src":"943:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"933:6:32","nodeType":"YulIdentifier","src":"933:6:32"},"nativeSrc":"933:15:32","nodeType":"YulFunctionCall","src":"933:15:32"},"nativeSrc":"933:15:32","nodeType":"YulExpressionStatement","src":"933:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"968:1:32","nodeType":"YulLiteral","src":"968:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"971:4:32","nodeType":"YulLiteral","src":"971:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"961:6:32","nodeType":"YulIdentifier","src":"961:6:32"},"nativeSrc":"961:15:32","nodeType":"YulFunctionCall","src":"961:15:32"},"nativeSrc":"961:15:32","nodeType":"YulExpressionStatement","src":"961:15:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"858:4:32","nodeType":"YulIdentifier","src":"858:4:32"},{"name":"x","nativeSrc":"864:1:32","nodeType":"YulIdentifier","src":"864:1:32"}],"functionName":{"name":"gt","nativeSrc":"855:2:32","nodeType":"YulIdentifier","src":"855:2:32"},"nativeSrc":"855:11:32","nodeType":"YulFunctionCall","src":"855:11:32"},"nativeSrc":"852:134:32","nodeType":"YulIf","src":"852:134:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"767:225:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"798:1:32","nodeType":"YulTypedName","src":"798:1:32","type":""},{"name":"y","nativeSrc":"801:1:32","nodeType":"YulTypedName","src":"801:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"807:4:32","nodeType":"YulTypedName","src":"807:4:32","type":""}],"src":"767:225:32"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$978t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value)\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value3 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101006040523480156200001257600080fd5b50604051620011a1380380620011a18339810160408190526200003591620001cd565b6001600160a01b0381166080523362000059816200005262000076565b90620000ac565b505060c09290925260e0526001600160a01b031660a0526200023f565b600080620000a660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6200021d565b92915050565b6001600160a01b03811615620001035781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001236307f5828d60e41b60016200011b62000127565b919062000157565b5050565b600080620000a660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6200021d565b600160e01b6001600160e01b031983160162000186576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001ca57600080fd5b50565b60008060008060808587031215620001e457600080fd5b84519350602085015192506040850151620001ff81620001b4565b60608601519092506200021281620001b4565b939692955090935050565b81810381811115620000a657634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051610ef7620002aa6000396000818161021e01526106170152600081816101e1015281816106f1015261078e01526000818161016d015261072e0152600081816101230152818161019f01528181610b410152610bc90152610ef76000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063dc45def611610066578063dc45def614610249578063e3a0ce0914610292578063eb02625c146102b5578063f2fde38b146102c857600080fd5b80638da5cb5b146102115780639dfbcde814610219578063ba65912e1461024057600080fd5b80633a5af339116100bd5780633a5af33914610168578063572b6c051461018f57806389a89002146101dc57600080fd5b806301ffc9a7146100e45780630328a8fc1461010c5780632b4c9f1614610121575b600080fd5b6100f76100f2366004610cba565b6102db565b60405190151581526020015b60405180910390f35b61011f61011a366004610cfc565b6102f5565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b6100f761019d366004610d57565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610103565b6101436103dc565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b61020360005481565b610277610257366004610d72565b600160208190526000918252604090912080549181015460029091015483565b60408051938452602084019290925290820152606001610103565b6100f76102a0366004610d72565b60026020526000908152604090205460ff1681565b61011f6102c3366004610d8b565b610408565b61011f6102d6366004610d57565b610806565b60006102ef826102e9610824565b90610852565b92915050565b61030e61030061092c565b610308610936565b90610964565b6000848152600160205260409020541561035c576040517fed10979d000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b604080516060810182528481526020808201858152828401858152600089815260018085529086902094518555915191840191909155516002909201919091558151848152908101839052849186917f91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da910160405180910390a350505050565b60006104036103e9610936565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60008481526001602052604090208054610451576040517f84f229dc00000000000000000000000000000000000000000000000000000000815260048101869052602401610353565b80600101544210806104665750806002015442115b156104a6576040517fdbeb4f4d00000000000000000000000000000000000000000000000000000000815260048101869052426024820152604401610353565b600085836040516020016104e992919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b6040516020818303038152906040528051906020012090506105478260000154828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509294939250506109d39050565b61059c576040517fa04a37c00000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff84166024820152604401610353565b60008181526002602052604090205460ff1615610604576040517fa8ca238e0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff84166024820152604401610353565b60008054610613906001610e4a565b90507f000000000000000000000000000000000000000000000000000000000000000081111561066f576040517f192d175500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181558281526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590517f5cfa929700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301527f0000000000000000000000000000000000000000000000000000000000000000602483015260448201929092526080606482015260848101929092527f00000000000000000000000000000000000000000000000000000000000000001690635cfa92979060a401600060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b5050604080517f000000000000000000000000000000000000000000000000000000000000000081526001602082015273ffffffffffffffffffffffffffffffffffffffff881693508a92507fa68c079189004e3175c636199e3e4d2aae420ce461ed29f670552b3eba9d2a03910160405180910390a350505050505050565b61082161081161092c565b8261081a610936565b91906109e9565b50565b6000806102ef60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610e5d565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108a2575060006102ef565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108f3575060016102ef565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610403610afe565b6000806102ef60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610e5d565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146109cf576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610353565b5050565b6000826109e08584610c45565b14949350505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610a56576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610353565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af85783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610b0e5750601836105b15610b1857503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610c3457506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190610e70565b15610c3e57919050565b3391505090565b600081815b8451811015610c8057610c7682868381518110610c6957610c69610e92565b6020026020010151610c88565b9150600101610c4a565b509392505050565b6000818310610ca4576000828152602084905260409020610cb3565b60008381526020839052604090205b9392505050565b600060208284031215610ccc57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cb357600080fd5b60008060008060808587031215610d1257600080fd5b5050823594602084013594506040840135936060013592509050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d5257600080fd5b919050565b600060208284031215610d6957600080fd5b610cb382610d2e565b600060208284031215610d8457600080fd5b5035919050565b60008060008060608587031215610da157600080fd5b84359350602085013567ffffffffffffffff80821115610dc057600080fd5b818701915087601f830112610dd457600080fd5b813581811115610de357600080fd5b8860208260051b8501011115610df857600080fd5b602083019550809450505050610e1060408601610d2e565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156102ef576102ef610e1b565b818103818111156102ef576102ef610e1b565b600060208284031215610e8257600080fd5b81518015158114610cb357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212208b11e33f917c9ecb51cb47072530af3f2baf0a6d42340627fae5333c9c5abe6464736f6c63430008160033","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x11A1 CODESIZE SUB DUP1 PUSH3 0x11A1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x59 DUP2 PUSH3 0x52 PUSH3 0x76 JUMP JUMPDEST SWAP1 PUSH3 0xAC JUMP JUMPDEST POP POP PUSH1 0xC0 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xE0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE PUSH3 0x23F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x21D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x103 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x123 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x11B PUSH3 0x127 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x157 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x21D JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x186 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD PUSH3 0x1FF DUP2 PUSH3 0x1B4 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x212 DUP2 PUSH3 0x1B4 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xA6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0xEF7 PUSH3 0x2AA PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x21E ADD MSTORE PUSH2 0x617 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1E1 ADD MSTORE DUP2 DUP2 PUSH2 0x6F1 ADD MSTORE PUSH2 0x78E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x16D ADD MSTORE PUSH2 0x72E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x123 ADD MSTORE DUP2 DUP2 PUSH2 0x19F ADD MSTORE DUP2 DUP2 PUSH2 0xB41 ADD MSTORE PUSH2 0xBC9 ADD MSTORE PUSH2 0xEF7 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A5AF339 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCBA JUMP JUMPDEST PUSH2 0x2DB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x2F5 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0xD57 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x203 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0x408 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x806 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP3 PUSH2 0x2E9 PUSH2 0x824 JUMP JUMPDEST SWAP1 PUSH2 0x852 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x30E PUSH2 0x300 PUSH2 0x92C JUMP JUMPDEST PUSH2 0x308 PUSH2 0x936 JUMP JUMPDEST SWAP1 PUSH2 0x964 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x35C JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x403 PUSH2 0x3E9 PUSH2 0x936 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x451 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x353 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x466 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x353 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E9 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x547 DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0x9D3 SWAP1 POP JUMP JUMPDEST PUSH2 0x59C JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x353 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x604 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x353 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x613 SWAP1 PUSH1 0x1 PUSH2 0xE4A JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x786 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP4 POP DUP11 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x821 PUSH2 0x811 PUSH2 0x92C JUMP JUMPDEST DUP3 PUSH2 0x81A PUSH2 0x936 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x9E9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xE5D JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8A2 JUMPI POP PUSH1 0x0 PUSH2 0x2EF JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8F3 JUMPI POP PUSH1 0x1 PUSH2 0x2EF JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x403 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xE5D JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x9CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x353 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9E0 DUP6 DUP5 PUSH2 0xC45 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xA56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x353 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAF8 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xB0E JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB18 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC34 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC10 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC34 SWAP2 SWAP1 PUSH2 0xE70 JUMP JUMPDEST ISZERO PUSH2 0xC3E JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC76 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC69 JUMPI PUSH2 0xC69 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xC88 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xC4A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xCA4 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB3 DUP3 PUSH2 0xD2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xDE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0xE10 PUSH1 0x40 DUP7 ADD PUSH2 0xD2E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE1B JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 GT 0xE3 EXTCODEHASH SWAP2 PUSH29 0x9ECB51CB47072530AF3F2BAF0A6D42340627FAE5333C9C5ABE6464736F PUSH13 0x63430008160033000000000000 ","sourceMap":"1163:5877:30:-:0;;;3642:343;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;3862:10:30;1008:63:0;3862:10:30;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;3884:18:30::2;::::0;;;;3912:24:::2;::::0;-1:-1:-1;;;;;3946:32:30::2;;::::0;1163:5877;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:149:32:-;-1:-1:-1;;;;;107:31:32;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:594::-;315:6;323;331;339;392:3;380:9;371:7;367:23;363:33;360:53;;;409:1;406;399:12;360:53;438:9;432:16;422:26;;488:2;477:9;473:18;467:25;457:35;;535:2;524:9;520:18;514:25;548:49;591:5;548:49;:::i;:::-;666:2;651:18;;645:25;616:5;;-1:-1:-1;679:51:32;645:25;679:51;:::i;:::-;168:594;;;;-1:-1:-1;168:594:32;;-1:-1:-1;;168:594:32:o;767:225::-;834:9;;;855:11;;;852:134;;;908:10;903:3;899:20;896:1;889:31;943:4;940:1;933:15;971:4;968:1;961:15;767:225;1163:5877:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINT_SUPPLY_3282":{"entryPoint":null,"id":3282,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_3276":{"entryPoint":null,"id":3276,"parameterSlots":0,"returnSlots":0},"@TOKEN_ID_3279":{"entryPoint":null,"id":3279,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1929":{"entryPoint":null,"id":1929,"parameterSlots":2,"returnSlots":1},"@_hashPair_1918":{"entryPoint":3208,"id":1918,"parameterSlots":2,"returnSlots":1},"@_msgSender_3400":{"entryPoint":2348,"id":3400,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":2814,"id":652,"parameterSlots":0,"returnSlots":1},"@claimStatus_3296":{"entryPoint":null,"id":3296,"parameterSlots":0,"returnSlots":0},"@claimWindows_3291":{"entryPoint":null,"id":3291,"parameterSlots":0,"returnSlots":0},"@claim_3591":{"entryPoint":1032,"id":3591,"parameterSlots":4,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":2404,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":2358,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2084,"id":531,"parameterSlots":0,"returnSlots":1},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@noOfTokensClaimed_3285":{"entryPoint":null,"id":3285,"parameterSlots":0,"returnSlots":0},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":988,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1513":{"entryPoint":3141,"id":1513,"parameterSlots":2,"returnSlots":1},"@setEpochMerkleRoot_3468":{"entryPoint":757,"id":3468,"parameterSlots":4,"returnSlots":0},"@supportsInterface_413":{"entryPoint":731,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2130,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":2537,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2054,"id":79,"parameterSlots":1,"returnSlots":0},"@verify_1452":{"entryPoint":2515,"id":1452,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":3374,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3415,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3696,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3442,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address":{"entryPoint":3467,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":3324,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":3258,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$978__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3658,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3677,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":3611,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3730,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:6919:32","nodeType":"YulBlock","src":"0:6919:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"83:263:32","nodeType":"YulBlock","src":"83:263:32","statements":[{"body":{"nativeSrc":"129:16:32","nodeType":"YulBlock","src":"129:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:32","nodeType":"YulLiteral","src":"138:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:32","nodeType":"YulLiteral","src":"141:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:32","nodeType":"YulIdentifier","src":"131:6:32"},"nativeSrc":"131:12:32","nodeType":"YulFunctionCall","src":"131:12:32"},"nativeSrc":"131:12:32","nodeType":"YulExpressionStatement","src":"131:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:32","nodeType":"YulIdentifier","src":"104:7:32"},{"name":"headStart","nativeSrc":"113:9:32","nodeType":"YulIdentifier","src":"113:9:32"}],"functionName":{"name":"sub","nativeSrc":"100:3:32","nodeType":"YulIdentifier","src":"100:3:32"},"nativeSrc":"100:23:32","nodeType":"YulFunctionCall","src":"100:23:32"},{"kind":"number","nativeSrc":"125:2:32","nodeType":"YulLiteral","src":"125:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:32","nodeType":"YulIdentifier","src":"96:3:32"},"nativeSrc":"96:32:32","nodeType":"YulFunctionCall","src":"96:32:32"},"nativeSrc":"93:52:32","nodeType":"YulIf","src":"93:52:32"},{"nativeSrc":"154:36:32","nodeType":"YulVariableDeclaration","src":"154:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:32","nodeType":"YulIdentifier","src":"180:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:32","nodeType":"YulIdentifier","src":"167:12:32"},"nativeSrc":"167:23:32","nodeType":"YulFunctionCall","src":"167:23:32"},"variables":[{"name":"value","nativeSrc":"158:5:32","nodeType":"YulTypedName","src":"158:5:32","type":""}]},{"body":{"nativeSrc":"300:16:32","nodeType":"YulBlock","src":"300:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:32","nodeType":"YulLiteral","src":"309:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:32","nodeType":"YulLiteral","src":"312:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:32","nodeType":"YulIdentifier","src":"302:6:32"},"nativeSrc":"302:12:32","nodeType":"YulFunctionCall","src":"302:12:32"},"nativeSrc":"302:12:32","nodeType":"YulExpressionStatement","src":"302:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:32","nodeType":"YulIdentifier","src":"212:5:32"},{"arguments":[{"name":"value","nativeSrc":"223:5:32","nodeType":"YulIdentifier","src":"223:5:32"},{"kind":"number","nativeSrc":"230:66:32","nodeType":"YulLiteral","src":"230:66:32","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:32","nodeType":"YulIdentifier","src":"219:3:32"},"nativeSrc":"219:78:32","nodeType":"YulFunctionCall","src":"219:78:32"}],"functionName":{"name":"eq","nativeSrc":"209:2:32","nodeType":"YulIdentifier","src":"209:2:32"},"nativeSrc":"209:89:32","nodeType":"YulFunctionCall","src":"209:89:32"}],"functionName":{"name":"iszero","nativeSrc":"202:6:32","nodeType":"YulIdentifier","src":"202:6:32"},"nativeSrc":"202:97:32","nodeType":"YulFunctionCall","src":"202:97:32"},"nativeSrc":"199:117:32","nodeType":"YulIf","src":"199:117:32"},{"nativeSrc":"325:15:32","nodeType":"YulAssignment","src":"325:15:32","value":{"name":"value","nativeSrc":"335:5:32","nodeType":"YulIdentifier","src":"335:5:32"},"variableNames":[{"name":"value0","nativeSrc":"325:6:32","nodeType":"YulIdentifier","src":"325:6:32"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:32","nodeType":"YulTypedName","src":"49:9:32","type":""},{"name":"dataEnd","nativeSrc":"60:7:32","nodeType":"YulTypedName","src":"60:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:32","nodeType":"YulTypedName","src":"72:6:32","type":""}],"src":"14:332:32"},{"body":{"nativeSrc":"446:92:32","nodeType":"YulBlock","src":"446:92:32","statements":[{"nativeSrc":"456:26:32","nodeType":"YulAssignment","src":"456:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:32","nodeType":"YulIdentifier","src":"468:9:32"},{"kind":"number","nativeSrc":"479:2:32","nodeType":"YulLiteral","src":"479:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:32","nodeType":"YulIdentifier","src":"464:3:32"},"nativeSrc":"464:18:32","nodeType":"YulFunctionCall","src":"464:18:32"},"variableNames":[{"name":"tail","nativeSrc":"456:4:32","nodeType":"YulIdentifier","src":"456:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:32","nodeType":"YulIdentifier","src":"498:9:32"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:32","nodeType":"YulIdentifier","src":"523:6:32"}],"functionName":{"name":"iszero","nativeSrc":"516:6:32","nodeType":"YulIdentifier","src":"516:6:32"},"nativeSrc":"516:14:32","nodeType":"YulFunctionCall","src":"516:14:32"}],"functionName":{"name":"iszero","nativeSrc":"509:6:32","nodeType":"YulIdentifier","src":"509:6:32"},"nativeSrc":"509:22:32","nodeType":"YulFunctionCall","src":"509:22:32"}],"functionName":{"name":"mstore","nativeSrc":"491:6:32","nodeType":"YulIdentifier","src":"491:6:32"},"nativeSrc":"491:41:32","nodeType":"YulFunctionCall","src":"491:41:32"},"nativeSrc":"491:41:32","nodeType":"YulExpressionStatement","src":"491:41:32"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:32","nodeType":"YulTypedName","src":"415:9:32","type":""},{"name":"value0","nativeSrc":"426:6:32","nodeType":"YulTypedName","src":"426:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:32","nodeType":"YulTypedName","src":"437:4:32","type":""}],"src":"351:187:32"},{"body":{"nativeSrc":"664:264:32","nodeType":"YulBlock","src":"664:264:32","statements":[{"body":{"nativeSrc":"711:16:32","nodeType":"YulBlock","src":"711:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"720:1:32","nodeType":"YulLiteral","src":"720:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"723:1:32","nodeType":"YulLiteral","src":"723:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"713:6:32","nodeType":"YulIdentifier","src":"713:6:32"},"nativeSrc":"713:12:32","nodeType":"YulFunctionCall","src":"713:12:32"},"nativeSrc":"713:12:32","nodeType":"YulExpressionStatement","src":"713:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"685:7:32","nodeType":"YulIdentifier","src":"685:7:32"},{"name":"headStart","nativeSrc":"694:9:32","nodeType":"YulIdentifier","src":"694:9:32"}],"functionName":{"name":"sub","nativeSrc":"681:3:32","nodeType":"YulIdentifier","src":"681:3:32"},"nativeSrc":"681:23:32","nodeType":"YulFunctionCall","src":"681:23:32"},{"kind":"number","nativeSrc":"706:3:32","nodeType":"YulLiteral","src":"706:3:32","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"677:3:32","nodeType":"YulIdentifier","src":"677:3:32"},"nativeSrc":"677:33:32","nodeType":"YulFunctionCall","src":"677:33:32"},"nativeSrc":"674:53:32","nodeType":"YulIf","src":"674:53:32"},{"nativeSrc":"736:33:32","nodeType":"YulAssignment","src":"736:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"759:9:32","nodeType":"YulIdentifier","src":"759:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"746:12:32","nodeType":"YulIdentifier","src":"746:12:32"},"nativeSrc":"746:23:32","nodeType":"YulFunctionCall","src":"746:23:32"},"variableNames":[{"name":"value0","nativeSrc":"736:6:32","nodeType":"YulIdentifier","src":"736:6:32"}]},{"nativeSrc":"778:42:32","nodeType":"YulAssignment","src":"778:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"805:9:32","nodeType":"YulIdentifier","src":"805:9:32"},{"kind":"number","nativeSrc":"816:2:32","nodeType":"YulLiteral","src":"816:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"801:3:32","nodeType":"YulIdentifier","src":"801:3:32"},"nativeSrc":"801:18:32","nodeType":"YulFunctionCall","src":"801:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"788:12:32","nodeType":"YulIdentifier","src":"788:12:32"},"nativeSrc":"788:32:32","nodeType":"YulFunctionCall","src":"788:32:32"},"variableNames":[{"name":"value1","nativeSrc":"778:6:32","nodeType":"YulIdentifier","src":"778:6:32"}]},{"nativeSrc":"829:42:32","nodeType":"YulAssignment","src":"829:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"856:9:32","nodeType":"YulIdentifier","src":"856:9:32"},{"kind":"number","nativeSrc":"867:2:32","nodeType":"YulLiteral","src":"867:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"852:3:32","nodeType":"YulIdentifier","src":"852:3:32"},"nativeSrc":"852:18:32","nodeType":"YulFunctionCall","src":"852:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"839:12:32","nodeType":"YulIdentifier","src":"839:12:32"},"nativeSrc":"839:32:32","nodeType":"YulFunctionCall","src":"839:32:32"},"variableNames":[{"name":"value2","nativeSrc":"829:6:32","nodeType":"YulIdentifier","src":"829:6:32"}]},{"nativeSrc":"880:42:32","nodeType":"YulAssignment","src":"880:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"907:9:32","nodeType":"YulIdentifier","src":"907:9:32"},{"kind":"number","nativeSrc":"918:2:32","nodeType":"YulLiteral","src":"918:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"903:3:32","nodeType":"YulIdentifier","src":"903:3:32"},"nativeSrc":"903:18:32","nodeType":"YulFunctionCall","src":"903:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"890:12:32","nodeType":"YulIdentifier","src":"890:12:32"},"nativeSrc":"890:32:32","nodeType":"YulFunctionCall","src":"890:32:32"},"variableNames":[{"name":"value3","nativeSrc":"880:6:32","nodeType":"YulIdentifier","src":"880:6:32"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nativeSrc":"543:385:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"606:9:32","nodeType":"YulTypedName","src":"606:9:32","type":""},{"name":"dataEnd","nativeSrc":"617:7:32","nodeType":"YulTypedName","src":"617:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"629:6:32","nodeType":"YulTypedName","src":"629:6:32","type":""},{"name":"value1","nativeSrc":"637:6:32","nodeType":"YulTypedName","src":"637:6:32","type":""},{"name":"value2","nativeSrc":"645:6:32","nodeType":"YulTypedName","src":"645:6:32","type":""},{"name":"value3","nativeSrc":"653:6:32","nodeType":"YulTypedName","src":"653:6:32","type":""}],"src":"543:385:32"},{"body":{"nativeSrc":"1060:125:32","nodeType":"YulBlock","src":"1060:125:32","statements":[{"nativeSrc":"1070:26:32","nodeType":"YulAssignment","src":"1070:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1082:9:32","nodeType":"YulIdentifier","src":"1082:9:32"},{"kind":"number","nativeSrc":"1093:2:32","nodeType":"YulLiteral","src":"1093:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1078:3:32","nodeType":"YulIdentifier","src":"1078:3:32"},"nativeSrc":"1078:18:32","nodeType":"YulFunctionCall","src":"1078:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1070:4:32","nodeType":"YulIdentifier","src":"1070:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1112:9:32","nodeType":"YulIdentifier","src":"1112:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1127:6:32","nodeType":"YulIdentifier","src":"1127:6:32"},{"kind":"number","nativeSrc":"1135:42:32","nodeType":"YulLiteral","src":"1135:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1123:3:32","nodeType":"YulIdentifier","src":"1123:3:32"},"nativeSrc":"1123:55:32","nodeType":"YulFunctionCall","src":"1123:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1105:6:32","nodeType":"YulIdentifier","src":"1105:6:32"},"nativeSrc":"1105:74:32","nodeType":"YulFunctionCall","src":"1105:74:32"},"nativeSrc":"1105:74:32","nodeType":"YulExpressionStatement","src":"1105:74:32"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"933:252:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1029:9:32","nodeType":"YulTypedName","src":"1029:9:32","type":""},{"name":"value0","nativeSrc":"1040:6:32","nodeType":"YulTypedName","src":"1040:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1051:4:32","nodeType":"YulTypedName","src":"1051:4:32","type":""}],"src":"933:252:32"},{"body":{"nativeSrc":"1315:125:32","nodeType":"YulBlock","src":"1315:125:32","statements":[{"nativeSrc":"1325:26:32","nodeType":"YulAssignment","src":"1325:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1337:9:32","nodeType":"YulIdentifier","src":"1337:9:32"},{"kind":"number","nativeSrc":"1348:2:32","nodeType":"YulLiteral","src":"1348:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1333:3:32","nodeType":"YulIdentifier","src":"1333:3:32"},"nativeSrc":"1333:18:32","nodeType":"YulFunctionCall","src":"1333:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1325:4:32","nodeType":"YulIdentifier","src":"1325:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1367:9:32","nodeType":"YulIdentifier","src":"1367:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1382:6:32","nodeType":"YulIdentifier","src":"1382:6:32"},{"kind":"number","nativeSrc":"1390:42:32","nodeType":"YulLiteral","src":"1390:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1378:3:32","nodeType":"YulIdentifier","src":"1378:3:32"},"nativeSrc":"1378:55:32","nodeType":"YulFunctionCall","src":"1378:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1360:6:32","nodeType":"YulIdentifier","src":"1360:6:32"},"nativeSrc":"1360:74:32","nodeType":"YulFunctionCall","src":"1360:74:32"},"nativeSrc":"1360:74:32","nodeType":"YulExpressionStatement","src":"1360:74:32"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$978__to_t_address__fromStack_reversed","nativeSrc":"1190:250:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1284:9:32","nodeType":"YulTypedName","src":"1284:9:32","type":""},{"name":"value0","nativeSrc":"1295:6:32","nodeType":"YulTypedName","src":"1295:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1306:4:32","nodeType":"YulTypedName","src":"1306:4:32","type":""}],"src":"1190:250:32"},{"body":{"nativeSrc":"1494:147:32","nodeType":"YulBlock","src":"1494:147:32","statements":[{"nativeSrc":"1504:29:32","nodeType":"YulAssignment","src":"1504:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"1526:6:32","nodeType":"YulIdentifier","src":"1526:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"1513:12:32","nodeType":"YulIdentifier","src":"1513:12:32"},"nativeSrc":"1513:20:32","nodeType":"YulFunctionCall","src":"1513:20:32"},"variableNames":[{"name":"value","nativeSrc":"1504:5:32","nodeType":"YulIdentifier","src":"1504:5:32"}]},{"body":{"nativeSrc":"1619:16:32","nodeType":"YulBlock","src":"1619:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1628:1:32","nodeType":"YulLiteral","src":"1628:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1631:1:32","nodeType":"YulLiteral","src":"1631:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1621:6:32","nodeType":"YulIdentifier","src":"1621:6:32"},"nativeSrc":"1621:12:32","nodeType":"YulFunctionCall","src":"1621:12:32"},"nativeSrc":"1621:12:32","nodeType":"YulExpressionStatement","src":"1621:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1555:5:32","nodeType":"YulIdentifier","src":"1555:5:32"},{"arguments":[{"name":"value","nativeSrc":"1566:5:32","nodeType":"YulIdentifier","src":"1566:5:32"},{"kind":"number","nativeSrc":"1573:42:32","nodeType":"YulLiteral","src":"1573:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1562:3:32","nodeType":"YulIdentifier","src":"1562:3:32"},"nativeSrc":"1562:54:32","nodeType":"YulFunctionCall","src":"1562:54:32"}],"functionName":{"name":"eq","nativeSrc":"1552:2:32","nodeType":"YulIdentifier","src":"1552:2:32"},"nativeSrc":"1552:65:32","nodeType":"YulFunctionCall","src":"1552:65:32"}],"functionName":{"name":"iszero","nativeSrc":"1545:6:32","nodeType":"YulIdentifier","src":"1545:6:32"},"nativeSrc":"1545:73:32","nodeType":"YulFunctionCall","src":"1545:73:32"},"nativeSrc":"1542:93:32","nodeType":"YulIf","src":"1542:93:32"}]},"name":"abi_decode_address","nativeSrc":"1445:196:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1473:6:32","nodeType":"YulTypedName","src":"1473:6:32","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1484:5:32","nodeType":"YulTypedName","src":"1484:5:32","type":""}],"src":"1445:196:32"},{"body":{"nativeSrc":"1716:116:32","nodeType":"YulBlock","src":"1716:116:32","statements":[{"body":{"nativeSrc":"1762:16:32","nodeType":"YulBlock","src":"1762:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1771:1:32","nodeType":"YulLiteral","src":"1771:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"1774:1:32","nodeType":"YulLiteral","src":"1774:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1764:6:32","nodeType":"YulIdentifier","src":"1764:6:32"},"nativeSrc":"1764:12:32","nodeType":"YulFunctionCall","src":"1764:12:32"},"nativeSrc":"1764:12:32","nodeType":"YulExpressionStatement","src":"1764:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1737:7:32","nodeType":"YulIdentifier","src":"1737:7:32"},{"name":"headStart","nativeSrc":"1746:9:32","nodeType":"YulIdentifier","src":"1746:9:32"}],"functionName":{"name":"sub","nativeSrc":"1733:3:32","nodeType":"YulIdentifier","src":"1733:3:32"},"nativeSrc":"1733:23:32","nodeType":"YulFunctionCall","src":"1733:23:32"},{"kind":"number","nativeSrc":"1758:2:32","nodeType":"YulLiteral","src":"1758:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1729:3:32","nodeType":"YulIdentifier","src":"1729:3:32"},"nativeSrc":"1729:32:32","nodeType":"YulFunctionCall","src":"1729:32:32"},"nativeSrc":"1726:52:32","nodeType":"YulIf","src":"1726:52:32"},{"nativeSrc":"1787:39:32","nodeType":"YulAssignment","src":"1787:39:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1816:9:32","nodeType":"YulIdentifier","src":"1816:9:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1797:18:32","nodeType":"YulIdentifier","src":"1797:18:32"},"nativeSrc":"1797:29:32","nodeType":"YulFunctionCall","src":"1797:29:32"},"variableNames":[{"name":"value0","nativeSrc":"1787:6:32","nodeType":"YulIdentifier","src":"1787:6:32"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1646:186:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1682:9:32","nodeType":"YulTypedName","src":"1682:9:32","type":""},{"name":"dataEnd","nativeSrc":"1693:7:32","nodeType":"YulTypedName","src":"1693:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1705:6:32","nodeType":"YulTypedName","src":"1705:6:32","type":""}],"src":"1646:186:32"},{"body":{"nativeSrc":"1938:76:32","nodeType":"YulBlock","src":"1938:76:32","statements":[{"nativeSrc":"1948:26:32","nodeType":"YulAssignment","src":"1948:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1960:9:32","nodeType":"YulIdentifier","src":"1960:9:32"},{"kind":"number","nativeSrc":"1971:2:32","nodeType":"YulLiteral","src":"1971:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1956:3:32","nodeType":"YulIdentifier","src":"1956:3:32"},"nativeSrc":"1956:18:32","nodeType":"YulFunctionCall","src":"1956:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1948:4:32","nodeType":"YulIdentifier","src":"1948:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1990:9:32","nodeType":"YulIdentifier","src":"1990:9:32"},{"name":"value0","nativeSrc":"2001:6:32","nodeType":"YulIdentifier","src":"2001:6:32"}],"functionName":{"name":"mstore","nativeSrc":"1983:6:32","nodeType":"YulIdentifier","src":"1983:6:32"},"nativeSrc":"1983:25:32","nodeType":"YulFunctionCall","src":"1983:25:32"},"nativeSrc":"1983:25:32","nodeType":"YulExpressionStatement","src":"1983:25:32"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"1837:177:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1907:9:32","nodeType":"YulTypedName","src":"1907:9:32","type":""},{"name":"value0","nativeSrc":"1918:6:32","nodeType":"YulTypedName","src":"1918:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1929:4:32","nodeType":"YulTypedName","src":"1929:4:32","type":""}],"src":"1837:177:32"},{"body":{"nativeSrc":"2120:125:32","nodeType":"YulBlock","src":"2120:125:32","statements":[{"nativeSrc":"2130:26:32","nodeType":"YulAssignment","src":"2130:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2142:9:32","nodeType":"YulIdentifier","src":"2142:9:32"},{"kind":"number","nativeSrc":"2153:2:32","nodeType":"YulLiteral","src":"2153:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2138:3:32","nodeType":"YulIdentifier","src":"2138:3:32"},"nativeSrc":"2138:18:32","nodeType":"YulFunctionCall","src":"2138:18:32"},"variableNames":[{"name":"tail","nativeSrc":"2130:4:32","nodeType":"YulIdentifier","src":"2130:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2172:9:32","nodeType":"YulIdentifier","src":"2172:9:32"},{"arguments":[{"name":"value0","nativeSrc":"2187:6:32","nodeType":"YulIdentifier","src":"2187:6:32"},{"kind":"number","nativeSrc":"2195:42:32","nodeType":"YulLiteral","src":"2195:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2183:3:32","nodeType":"YulIdentifier","src":"2183:3:32"},"nativeSrc":"2183:55:32","nodeType":"YulFunctionCall","src":"2183:55:32"}],"functionName":{"name":"mstore","nativeSrc":"2165:6:32","nodeType":"YulIdentifier","src":"2165:6:32"},"nativeSrc":"2165:74:32","nodeType":"YulFunctionCall","src":"2165:74:32"},"nativeSrc":"2165:74:32","nodeType":"YulExpressionStatement","src":"2165:74:32"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2019:226:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2089:9:32","nodeType":"YulTypedName","src":"2089:9:32","type":""},{"name":"value0","nativeSrc":"2100:6:32","nodeType":"YulTypedName","src":"2100:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2111:4:32","nodeType":"YulTypedName","src":"2111:4:32","type":""}],"src":"2019:226:32"},{"body":{"nativeSrc":"2320:110:32","nodeType":"YulBlock","src":"2320:110:32","statements":[{"body":{"nativeSrc":"2366:16:32","nodeType":"YulBlock","src":"2366:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2375:1:32","nodeType":"YulLiteral","src":"2375:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2378:1:32","nodeType":"YulLiteral","src":"2378:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2368:6:32","nodeType":"YulIdentifier","src":"2368:6:32"},"nativeSrc":"2368:12:32","nodeType":"YulFunctionCall","src":"2368:12:32"},"nativeSrc":"2368:12:32","nodeType":"YulExpressionStatement","src":"2368:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2341:7:32","nodeType":"YulIdentifier","src":"2341:7:32"},{"name":"headStart","nativeSrc":"2350:9:32","nodeType":"YulIdentifier","src":"2350:9:32"}],"functionName":{"name":"sub","nativeSrc":"2337:3:32","nodeType":"YulIdentifier","src":"2337:3:32"},"nativeSrc":"2337:23:32","nodeType":"YulFunctionCall","src":"2337:23:32"},{"kind":"number","nativeSrc":"2362:2:32","nodeType":"YulLiteral","src":"2362:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2333:3:32","nodeType":"YulIdentifier","src":"2333:3:32"},"nativeSrc":"2333:32:32","nodeType":"YulFunctionCall","src":"2333:32:32"},"nativeSrc":"2330:52:32","nodeType":"YulIf","src":"2330:52:32"},{"nativeSrc":"2391:33:32","nodeType":"YulAssignment","src":"2391:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2414:9:32","nodeType":"YulIdentifier","src":"2414:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"2401:12:32","nodeType":"YulIdentifier","src":"2401:12:32"},"nativeSrc":"2401:23:32","nodeType":"YulFunctionCall","src":"2401:23:32"},"variableNames":[{"name":"value0","nativeSrc":"2391:6:32","nodeType":"YulIdentifier","src":"2391:6:32"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2250:180:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2286:9:32","nodeType":"YulTypedName","src":"2286:9:32","type":""},{"name":"dataEnd","nativeSrc":"2297:7:32","nodeType":"YulTypedName","src":"2297:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2309:6:32","nodeType":"YulTypedName","src":"2309:6:32","type":""}],"src":"2250:180:32"},{"body":{"nativeSrc":"2592:162:32","nodeType":"YulBlock","src":"2592:162:32","statements":[{"nativeSrc":"2602:26:32","nodeType":"YulAssignment","src":"2602:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2614:9:32","nodeType":"YulIdentifier","src":"2614:9:32"},{"kind":"number","nativeSrc":"2625:2:32","nodeType":"YulLiteral","src":"2625:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2610:3:32","nodeType":"YulIdentifier","src":"2610:3:32"},"nativeSrc":"2610:18:32","nodeType":"YulFunctionCall","src":"2610:18:32"},"variableNames":[{"name":"tail","nativeSrc":"2602:4:32","nodeType":"YulIdentifier","src":"2602:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2644:9:32","nodeType":"YulIdentifier","src":"2644:9:32"},{"name":"value0","nativeSrc":"2655:6:32","nodeType":"YulIdentifier","src":"2655:6:32"}],"functionName":{"name":"mstore","nativeSrc":"2637:6:32","nodeType":"YulIdentifier","src":"2637:6:32"},"nativeSrc":"2637:25:32","nodeType":"YulFunctionCall","src":"2637:25:32"},"nativeSrc":"2637:25:32","nodeType":"YulExpressionStatement","src":"2637:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2682:9:32","nodeType":"YulIdentifier","src":"2682:9:32"},{"kind":"number","nativeSrc":"2693:2:32","nodeType":"YulLiteral","src":"2693:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2678:3:32","nodeType":"YulIdentifier","src":"2678:3:32"},"nativeSrc":"2678:18:32","nodeType":"YulFunctionCall","src":"2678:18:32"},{"name":"value1","nativeSrc":"2698:6:32","nodeType":"YulIdentifier","src":"2698:6:32"}],"functionName":{"name":"mstore","nativeSrc":"2671:6:32","nodeType":"YulIdentifier","src":"2671:6:32"},"nativeSrc":"2671:34:32","nodeType":"YulFunctionCall","src":"2671:34:32"},"nativeSrc":"2671:34:32","nodeType":"YulExpressionStatement","src":"2671:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2725:9:32","nodeType":"YulIdentifier","src":"2725:9:32"},{"kind":"number","nativeSrc":"2736:2:32","nodeType":"YulLiteral","src":"2736:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2721:3:32","nodeType":"YulIdentifier","src":"2721:3:32"},"nativeSrc":"2721:18:32","nodeType":"YulFunctionCall","src":"2721:18:32"},{"name":"value2","nativeSrc":"2741:6:32","nodeType":"YulIdentifier","src":"2741:6:32"}],"functionName":{"name":"mstore","nativeSrc":"2714:6:32","nodeType":"YulIdentifier","src":"2714:6:32"},"nativeSrc":"2714:34:32","nodeType":"YulFunctionCall","src":"2714:34:32"},"nativeSrc":"2714:34:32","nodeType":"YulExpressionStatement","src":"2714:34:32"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"2435:319:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2545:9:32","nodeType":"YulTypedName","src":"2545:9:32","type":""},{"name":"value2","nativeSrc":"2556:6:32","nodeType":"YulTypedName","src":"2556:6:32","type":""},{"name":"value1","nativeSrc":"2564:6:32","nodeType":"YulTypedName","src":"2564:6:32","type":""},{"name":"value0","nativeSrc":"2572:6:32","nodeType":"YulTypedName","src":"2572:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2583:4:32","nodeType":"YulTypedName","src":"2583:4:32","type":""}],"src":"2435:319:32"},{"body":{"nativeSrc":"2898:618:32","nodeType":"YulBlock","src":"2898:618:32","statements":[{"body":{"nativeSrc":"2944:16:32","nodeType":"YulBlock","src":"2944:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2953:1:32","nodeType":"YulLiteral","src":"2953:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2956:1:32","nodeType":"YulLiteral","src":"2956:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2946:6:32","nodeType":"YulIdentifier","src":"2946:6:32"},"nativeSrc":"2946:12:32","nodeType":"YulFunctionCall","src":"2946:12:32"},"nativeSrc":"2946:12:32","nodeType":"YulExpressionStatement","src":"2946:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2919:7:32","nodeType":"YulIdentifier","src":"2919:7:32"},{"name":"headStart","nativeSrc":"2928:9:32","nodeType":"YulIdentifier","src":"2928:9:32"}],"functionName":{"name":"sub","nativeSrc":"2915:3:32","nodeType":"YulIdentifier","src":"2915:3:32"},"nativeSrc":"2915:23:32","nodeType":"YulFunctionCall","src":"2915:23:32"},{"kind":"number","nativeSrc":"2940:2:32","nodeType":"YulLiteral","src":"2940:2:32","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2911:3:32","nodeType":"YulIdentifier","src":"2911:3:32"},"nativeSrc":"2911:32:32","nodeType":"YulFunctionCall","src":"2911:32:32"},"nativeSrc":"2908:52:32","nodeType":"YulIf","src":"2908:52:32"},{"nativeSrc":"2969:33:32","nodeType":"YulAssignment","src":"2969:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2992:9:32","nodeType":"YulIdentifier","src":"2992:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"2979:12:32","nodeType":"YulIdentifier","src":"2979:12:32"},"nativeSrc":"2979:23:32","nodeType":"YulFunctionCall","src":"2979:23:32"},"variableNames":[{"name":"value0","nativeSrc":"2969:6:32","nodeType":"YulIdentifier","src":"2969:6:32"}]},{"nativeSrc":"3011:46:32","nodeType":"YulVariableDeclaration","src":"3011:46:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3042:9:32","nodeType":"YulIdentifier","src":"3042:9:32"},{"kind":"number","nativeSrc":"3053:2:32","nodeType":"YulLiteral","src":"3053:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3038:3:32","nodeType":"YulIdentifier","src":"3038:3:32"},"nativeSrc":"3038:18:32","nodeType":"YulFunctionCall","src":"3038:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"3025:12:32","nodeType":"YulIdentifier","src":"3025:12:32"},"nativeSrc":"3025:32:32","nodeType":"YulFunctionCall","src":"3025:32:32"},"variables":[{"name":"offset","nativeSrc":"3015:6:32","nodeType":"YulTypedName","src":"3015:6:32","type":""}]},{"nativeSrc":"3066:28:32","nodeType":"YulVariableDeclaration","src":"3066:28:32","value":{"kind":"number","nativeSrc":"3076:18:32","nodeType":"YulLiteral","src":"3076:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3070:2:32","nodeType":"YulTypedName","src":"3070:2:32","type":""}]},{"body":{"nativeSrc":"3121:16:32","nodeType":"YulBlock","src":"3121:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3130:1:32","nodeType":"YulLiteral","src":"3130:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3133:1:32","nodeType":"YulLiteral","src":"3133:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3123:6:32","nodeType":"YulIdentifier","src":"3123:6:32"},"nativeSrc":"3123:12:32","nodeType":"YulFunctionCall","src":"3123:12:32"},"nativeSrc":"3123:12:32","nodeType":"YulExpressionStatement","src":"3123:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3109:6:32","nodeType":"YulIdentifier","src":"3109:6:32"},{"name":"_1","nativeSrc":"3117:2:32","nodeType":"YulIdentifier","src":"3117:2:32"}],"functionName":{"name":"gt","nativeSrc":"3106:2:32","nodeType":"YulIdentifier","src":"3106:2:32"},"nativeSrc":"3106:14:32","nodeType":"YulFunctionCall","src":"3106:14:32"},"nativeSrc":"3103:34:32","nodeType":"YulIf","src":"3103:34:32"},{"nativeSrc":"3146:32:32","nodeType":"YulVariableDeclaration","src":"3146:32:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3160:9:32","nodeType":"YulIdentifier","src":"3160:9:32"},{"name":"offset","nativeSrc":"3171:6:32","nodeType":"YulIdentifier","src":"3171:6:32"}],"functionName":{"name":"add","nativeSrc":"3156:3:32","nodeType":"YulIdentifier","src":"3156:3:32"},"nativeSrc":"3156:22:32","nodeType":"YulFunctionCall","src":"3156:22:32"},"variables":[{"name":"_2","nativeSrc":"3150:2:32","nodeType":"YulTypedName","src":"3150:2:32","type":""}]},{"body":{"nativeSrc":"3226:16:32","nodeType":"YulBlock","src":"3226:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3235:1:32","nodeType":"YulLiteral","src":"3235:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3238:1:32","nodeType":"YulLiteral","src":"3238:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3228:6:32","nodeType":"YulIdentifier","src":"3228:6:32"},"nativeSrc":"3228:12:32","nodeType":"YulFunctionCall","src":"3228:12:32"},"nativeSrc":"3228:12:32","nodeType":"YulExpressionStatement","src":"3228:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3205:2:32","nodeType":"YulIdentifier","src":"3205:2:32"},{"kind":"number","nativeSrc":"3209:4:32","nodeType":"YulLiteral","src":"3209:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3201:3:32","nodeType":"YulIdentifier","src":"3201:3:32"},"nativeSrc":"3201:13:32","nodeType":"YulFunctionCall","src":"3201:13:32"},{"name":"dataEnd","nativeSrc":"3216:7:32","nodeType":"YulIdentifier","src":"3216:7:32"}],"functionName":{"name":"slt","nativeSrc":"3197:3:32","nodeType":"YulIdentifier","src":"3197:3:32"},"nativeSrc":"3197:27:32","nodeType":"YulFunctionCall","src":"3197:27:32"}],"functionName":{"name":"iszero","nativeSrc":"3190:6:32","nodeType":"YulIdentifier","src":"3190:6:32"},"nativeSrc":"3190:35:32","nodeType":"YulFunctionCall","src":"3190:35:32"},"nativeSrc":"3187:55:32","nodeType":"YulIf","src":"3187:55:32"},{"nativeSrc":"3251:30:32","nodeType":"YulVariableDeclaration","src":"3251:30:32","value":{"arguments":[{"name":"_2","nativeSrc":"3278:2:32","nodeType":"YulIdentifier","src":"3278:2:32"}],"functionName":{"name":"calldataload","nativeSrc":"3265:12:32","nodeType":"YulIdentifier","src":"3265:12:32"},"nativeSrc":"3265:16:32","nodeType":"YulFunctionCall","src":"3265:16:32"},"variables":[{"name":"length","nativeSrc":"3255:6:32","nodeType":"YulTypedName","src":"3255:6:32","type":""}]},{"body":{"nativeSrc":"3308:16:32","nodeType":"YulBlock","src":"3308:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3317:1:32","nodeType":"YulLiteral","src":"3317:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3320:1:32","nodeType":"YulLiteral","src":"3320:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3310:6:32","nodeType":"YulIdentifier","src":"3310:6:32"},"nativeSrc":"3310:12:32","nodeType":"YulFunctionCall","src":"3310:12:32"},"nativeSrc":"3310:12:32","nodeType":"YulExpressionStatement","src":"3310:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3296:6:32","nodeType":"YulIdentifier","src":"3296:6:32"},{"name":"_1","nativeSrc":"3304:2:32","nodeType":"YulIdentifier","src":"3304:2:32"}],"functionName":{"name":"gt","nativeSrc":"3293:2:32","nodeType":"YulIdentifier","src":"3293:2:32"},"nativeSrc":"3293:14:32","nodeType":"YulFunctionCall","src":"3293:14:32"},"nativeSrc":"3290:34:32","nodeType":"YulIf","src":"3290:34:32"},{"body":{"nativeSrc":"3382:16:32","nodeType":"YulBlock","src":"3382:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3391:1:32","nodeType":"YulLiteral","src":"3391:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3394:1:32","nodeType":"YulLiteral","src":"3394:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3384:6:32","nodeType":"YulIdentifier","src":"3384:6:32"},"nativeSrc":"3384:12:32","nodeType":"YulFunctionCall","src":"3384:12:32"},"nativeSrc":"3384:12:32","nodeType":"YulExpressionStatement","src":"3384:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3347:2:32","nodeType":"YulIdentifier","src":"3347:2:32"},{"arguments":[{"kind":"number","nativeSrc":"3355:1:32","nodeType":"YulLiteral","src":"3355:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"3358:6:32","nodeType":"YulIdentifier","src":"3358:6:32"}],"functionName":{"name":"shl","nativeSrc":"3351:3:32","nodeType":"YulIdentifier","src":"3351:3:32"},"nativeSrc":"3351:14:32","nodeType":"YulFunctionCall","src":"3351:14:32"}],"functionName":{"name":"add","nativeSrc":"3343:3:32","nodeType":"YulIdentifier","src":"3343:3:32"},"nativeSrc":"3343:23:32","nodeType":"YulFunctionCall","src":"3343:23:32"},{"kind":"number","nativeSrc":"3368:2:32","nodeType":"YulLiteral","src":"3368:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3339:3:32","nodeType":"YulIdentifier","src":"3339:3:32"},"nativeSrc":"3339:32:32","nodeType":"YulFunctionCall","src":"3339:32:32"},{"name":"dataEnd","nativeSrc":"3373:7:32","nodeType":"YulIdentifier","src":"3373:7:32"}],"functionName":{"name":"gt","nativeSrc":"3336:2:32","nodeType":"YulIdentifier","src":"3336:2:32"},"nativeSrc":"3336:45:32","nodeType":"YulFunctionCall","src":"3336:45:32"},"nativeSrc":"3333:65:32","nodeType":"YulIf","src":"3333:65:32"},{"nativeSrc":"3407:21:32","nodeType":"YulAssignment","src":"3407:21:32","value":{"arguments":[{"name":"_2","nativeSrc":"3421:2:32","nodeType":"YulIdentifier","src":"3421:2:32"},{"kind":"number","nativeSrc":"3425:2:32","nodeType":"YulLiteral","src":"3425:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3417:3:32","nodeType":"YulIdentifier","src":"3417:3:32"},"nativeSrc":"3417:11:32","nodeType":"YulFunctionCall","src":"3417:11:32"},"variableNames":[{"name":"value1","nativeSrc":"3407:6:32","nodeType":"YulIdentifier","src":"3407:6:32"}]},{"nativeSrc":"3437:16:32","nodeType":"YulAssignment","src":"3437:16:32","value":{"name":"length","nativeSrc":"3447:6:32","nodeType":"YulIdentifier","src":"3447:6:32"},"variableNames":[{"name":"value2","nativeSrc":"3437:6:32","nodeType":"YulIdentifier","src":"3437:6:32"}]},{"nativeSrc":"3462:48:32","nodeType":"YulAssignment","src":"3462:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3495:9:32","nodeType":"YulIdentifier","src":"3495:9:32"},{"kind":"number","nativeSrc":"3506:2:32","nodeType":"YulLiteral","src":"3506:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3491:3:32","nodeType":"YulIdentifier","src":"3491:3:32"},"nativeSrc":"3491:18:32","nodeType":"YulFunctionCall","src":"3491:18:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3472:18:32","nodeType":"YulIdentifier","src":"3472:18:32"},"nativeSrc":"3472:38:32","nodeType":"YulFunctionCall","src":"3472:38:32"},"variableNames":[{"name":"value3","nativeSrc":"3462:6:32","nodeType":"YulIdentifier","src":"3462:6:32"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address","nativeSrc":"2759:757:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2840:9:32","nodeType":"YulTypedName","src":"2840:9:32","type":""},{"name":"dataEnd","nativeSrc":"2851:7:32","nodeType":"YulTypedName","src":"2851:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2863:6:32","nodeType":"YulTypedName","src":"2863:6:32","type":""},{"name":"value1","nativeSrc":"2871:6:32","nodeType":"YulTypedName","src":"2871:6:32","type":""},{"name":"value2","nativeSrc":"2879:6:32","nodeType":"YulTypedName","src":"2879:6:32","type":""},{"name":"value3","nativeSrc":"2887:6:32","nodeType":"YulTypedName","src":"2887:6:32","type":""}],"src":"2759:757:32"},{"body":{"nativeSrc":"3622:76:32","nodeType":"YulBlock","src":"3622:76:32","statements":[{"nativeSrc":"3632:26:32","nodeType":"YulAssignment","src":"3632:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3644:9:32","nodeType":"YulIdentifier","src":"3644:9:32"},{"kind":"number","nativeSrc":"3655:2:32","nodeType":"YulLiteral","src":"3655:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3640:3:32","nodeType":"YulIdentifier","src":"3640:3:32"},"nativeSrc":"3640:18:32","nodeType":"YulFunctionCall","src":"3640:18:32"},"variableNames":[{"name":"tail","nativeSrc":"3632:4:32","nodeType":"YulIdentifier","src":"3632:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3674:9:32","nodeType":"YulIdentifier","src":"3674:9:32"},{"name":"value0","nativeSrc":"3685:6:32","nodeType":"YulIdentifier","src":"3685:6:32"}],"functionName":{"name":"mstore","nativeSrc":"3667:6:32","nodeType":"YulIdentifier","src":"3667:6:32"},"nativeSrc":"3667:25:32","nodeType":"YulFunctionCall","src":"3667:25:32"},"nativeSrc":"3667:25:32","nodeType":"YulExpressionStatement","src":"3667:25:32"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3521:177:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3591:9:32","nodeType":"YulTypedName","src":"3591:9:32","type":""},{"name":"value0","nativeSrc":"3602:6:32","nodeType":"YulTypedName","src":"3602:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3613:4:32","nodeType":"YulTypedName","src":"3613:4:32","type":""}],"src":"3521:177:32"},{"body":{"nativeSrc":"3832:119:32","nodeType":"YulBlock","src":"3832:119:32","statements":[{"nativeSrc":"3842:26:32","nodeType":"YulAssignment","src":"3842:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3854:9:32","nodeType":"YulIdentifier","src":"3854:9:32"},{"kind":"number","nativeSrc":"3865:2:32","nodeType":"YulLiteral","src":"3865:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3850:3:32","nodeType":"YulIdentifier","src":"3850:3:32"},"nativeSrc":"3850:18:32","nodeType":"YulFunctionCall","src":"3850:18:32"},"variableNames":[{"name":"tail","nativeSrc":"3842:4:32","nodeType":"YulIdentifier","src":"3842:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3884:9:32","nodeType":"YulIdentifier","src":"3884:9:32"},{"name":"value0","nativeSrc":"3895:6:32","nodeType":"YulIdentifier","src":"3895:6:32"}],"functionName":{"name":"mstore","nativeSrc":"3877:6:32","nodeType":"YulIdentifier","src":"3877:6:32"},"nativeSrc":"3877:25:32","nodeType":"YulFunctionCall","src":"3877:25:32"},"nativeSrc":"3877:25:32","nodeType":"YulExpressionStatement","src":"3877:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3922:9:32","nodeType":"YulIdentifier","src":"3922:9:32"},{"kind":"number","nativeSrc":"3933:2:32","nodeType":"YulLiteral","src":"3933:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3918:3:32","nodeType":"YulIdentifier","src":"3918:3:32"},"nativeSrc":"3918:18:32","nodeType":"YulFunctionCall","src":"3918:18:32"},{"name":"value1","nativeSrc":"3938:6:32","nodeType":"YulIdentifier","src":"3938:6:32"}],"functionName":{"name":"mstore","nativeSrc":"3911:6:32","nodeType":"YulIdentifier","src":"3911:6:32"},"nativeSrc":"3911:34:32","nodeType":"YulFunctionCall","src":"3911:34:32"},"nativeSrc":"3911:34:32","nodeType":"YulExpressionStatement","src":"3911:34:32"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"3703:248:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3793:9:32","nodeType":"YulTypedName","src":"3793:9:32","type":""},{"name":"value1","nativeSrc":"3804:6:32","nodeType":"YulTypedName","src":"3804:6:32","type":""},{"name":"value0","nativeSrc":"3812:6:32","nodeType":"YulTypedName","src":"3812:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3823:4:32","nodeType":"YulTypedName","src":"3823:4:32","type":""}],"src":"3703:248:32"},{"body":{"nativeSrc":"4085:119:32","nodeType":"YulBlock","src":"4085:119:32","statements":[{"nativeSrc":"4095:26:32","nodeType":"YulAssignment","src":"4095:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4107:9:32","nodeType":"YulIdentifier","src":"4107:9:32"},{"kind":"number","nativeSrc":"4118:2:32","nodeType":"YulLiteral","src":"4118:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4103:3:32","nodeType":"YulIdentifier","src":"4103:3:32"},"nativeSrc":"4103:18:32","nodeType":"YulFunctionCall","src":"4103:18:32"},"variableNames":[{"name":"tail","nativeSrc":"4095:4:32","nodeType":"YulIdentifier","src":"4095:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4137:9:32","nodeType":"YulIdentifier","src":"4137:9:32"},{"name":"value0","nativeSrc":"4148:6:32","nodeType":"YulIdentifier","src":"4148:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4130:6:32","nodeType":"YulIdentifier","src":"4130:6:32"},"nativeSrc":"4130:25:32","nodeType":"YulFunctionCall","src":"4130:25:32"},"nativeSrc":"4130:25:32","nodeType":"YulExpressionStatement","src":"4130:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4175:9:32","nodeType":"YulIdentifier","src":"4175:9:32"},{"kind":"number","nativeSrc":"4186:2:32","nodeType":"YulLiteral","src":"4186:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4171:3:32","nodeType":"YulIdentifier","src":"4171:3:32"},"nativeSrc":"4171:18:32","nodeType":"YulFunctionCall","src":"4171:18:32"},{"name":"value1","nativeSrc":"4191:6:32","nodeType":"YulIdentifier","src":"4191:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4164:6:32","nodeType":"YulIdentifier","src":"4164:6:32"},"nativeSrc":"4164:34:32","nodeType":"YulFunctionCall","src":"4164:34:32"},"nativeSrc":"4164:34:32","nodeType":"YulExpressionStatement","src":"4164:34:32"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"3956:248:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4046:9:32","nodeType":"YulTypedName","src":"4046:9:32","type":""},{"name":"value1","nativeSrc":"4057:6:32","nodeType":"YulTypedName","src":"4057:6:32","type":""},{"name":"value0","nativeSrc":"4065:6:32","nodeType":"YulTypedName","src":"4065:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4076:4:32","nodeType":"YulTypedName","src":"4076:4:32","type":""}],"src":"3956:248:32"},{"body":{"nativeSrc":"4356:182:32","nodeType":"YulBlock","src":"4356:182:32","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4373:3:32","nodeType":"YulIdentifier","src":"4373:3:32"},{"name":"value0","nativeSrc":"4378:6:32","nodeType":"YulIdentifier","src":"4378:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4366:6:32","nodeType":"YulIdentifier","src":"4366:6:32"},"nativeSrc":"4366:19:32","nodeType":"YulFunctionCall","src":"4366:19:32"},"nativeSrc":"4366:19:32","nodeType":"YulExpressionStatement","src":"4366:19:32"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4405:3:32","nodeType":"YulIdentifier","src":"4405:3:32"},{"kind":"number","nativeSrc":"4410:2:32","nodeType":"YulLiteral","src":"4410:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4401:3:32","nodeType":"YulIdentifier","src":"4401:3:32"},"nativeSrc":"4401:12:32","nodeType":"YulFunctionCall","src":"4401:12:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4423:2:32","nodeType":"YulLiteral","src":"4423:2:32","type":"","value":"96"},{"name":"value1","nativeSrc":"4427:6:32","nodeType":"YulIdentifier","src":"4427:6:32"}],"functionName":{"name":"shl","nativeSrc":"4419:3:32","nodeType":"YulIdentifier","src":"4419:3:32"},"nativeSrc":"4419:15:32","nodeType":"YulFunctionCall","src":"4419:15:32"},{"kind":"number","nativeSrc":"4436:66:32","nodeType":"YulLiteral","src":"4436:66:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4415:3:32","nodeType":"YulIdentifier","src":"4415:3:32"},"nativeSrc":"4415:88:32","nodeType":"YulFunctionCall","src":"4415:88:32"}],"functionName":{"name":"mstore","nativeSrc":"4394:6:32","nodeType":"YulIdentifier","src":"4394:6:32"},"nativeSrc":"4394:110:32","nodeType":"YulFunctionCall","src":"4394:110:32"},"nativeSrc":"4394:110:32","nodeType":"YulExpressionStatement","src":"4394:110:32"},{"nativeSrc":"4513:19:32","nodeType":"YulAssignment","src":"4513:19:32","value":{"arguments":[{"name":"pos","nativeSrc":"4524:3:32","nodeType":"YulIdentifier","src":"4524:3:32"},{"kind":"number","nativeSrc":"4529:2:32","nodeType":"YulLiteral","src":"4529:2:32","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"4520:3:32","nodeType":"YulIdentifier","src":"4520:3:32"},"nativeSrc":"4520:12:32","nodeType":"YulFunctionCall","src":"4520:12:32"},"variableNames":[{"name":"end","nativeSrc":"4513:3:32","nodeType":"YulIdentifier","src":"4513:3:32"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed","nativeSrc":"4209:329:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"4324:3:32","nodeType":"YulTypedName","src":"4324:3:32","type":""},{"name":"value1","nativeSrc":"4329:6:32","nodeType":"YulTypedName","src":"4329:6:32","type":""},{"name":"value0","nativeSrc":"4337:6:32","nodeType":"YulTypedName","src":"4337:6:32","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4348:3:32","nodeType":"YulTypedName","src":"4348:3:32","type":""}],"src":"4209:329:32"},{"body":{"nativeSrc":"4672:168:32","nodeType":"YulBlock","src":"4672:168:32","statements":[{"nativeSrc":"4682:26:32","nodeType":"YulAssignment","src":"4682:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4694:9:32","nodeType":"YulIdentifier","src":"4694:9:32"},{"kind":"number","nativeSrc":"4705:2:32","nodeType":"YulLiteral","src":"4705:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4690:3:32","nodeType":"YulIdentifier","src":"4690:3:32"},"nativeSrc":"4690:18:32","nodeType":"YulFunctionCall","src":"4690:18:32"},"variableNames":[{"name":"tail","nativeSrc":"4682:4:32","nodeType":"YulIdentifier","src":"4682:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4724:9:32","nodeType":"YulIdentifier","src":"4724:9:32"},{"name":"value0","nativeSrc":"4735:6:32","nodeType":"YulIdentifier","src":"4735:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4717:6:32","nodeType":"YulIdentifier","src":"4717:6:32"},"nativeSrc":"4717:25:32","nodeType":"YulFunctionCall","src":"4717:25:32"},"nativeSrc":"4717:25:32","nodeType":"YulExpressionStatement","src":"4717:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4762:9:32","nodeType":"YulIdentifier","src":"4762:9:32"},{"kind":"number","nativeSrc":"4773:2:32","nodeType":"YulLiteral","src":"4773:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4758:3:32","nodeType":"YulIdentifier","src":"4758:3:32"},"nativeSrc":"4758:18:32","nodeType":"YulFunctionCall","src":"4758:18:32"},{"arguments":[{"name":"value1","nativeSrc":"4782:6:32","nodeType":"YulIdentifier","src":"4782:6:32"},{"kind":"number","nativeSrc":"4790:42:32","nodeType":"YulLiteral","src":"4790:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4778:3:32","nodeType":"YulIdentifier","src":"4778:3:32"},"nativeSrc":"4778:55:32","nodeType":"YulFunctionCall","src":"4778:55:32"}],"functionName":{"name":"mstore","nativeSrc":"4751:6:32","nodeType":"YulIdentifier","src":"4751:6:32"},"nativeSrc":"4751:83:32","nodeType":"YulFunctionCall","src":"4751:83:32"},"nativeSrc":"4751:83:32","nodeType":"YulExpressionStatement","src":"4751:83:32"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"4543:297:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4633:9:32","nodeType":"YulTypedName","src":"4633:9:32","type":""},{"name":"value1","nativeSrc":"4644:6:32","nodeType":"YulTypedName","src":"4644:6:32","type":""},{"name":"value0","nativeSrc":"4652:6:32","nodeType":"YulTypedName","src":"4652:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4663:4:32","nodeType":"YulTypedName","src":"4663:4:32","type":""}],"src":"4543:297:32"},{"body":{"nativeSrc":"4877:152:32","nodeType":"YulBlock","src":"4877:152:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4894:1:32","nodeType":"YulLiteral","src":"4894:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"4897:77:32","nodeType":"YulLiteral","src":"4897:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4887:6:32","nodeType":"YulIdentifier","src":"4887:6:32"},"nativeSrc":"4887:88:32","nodeType":"YulFunctionCall","src":"4887:88:32"},"nativeSrc":"4887:88:32","nodeType":"YulExpressionStatement","src":"4887:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4991:1:32","nodeType":"YulLiteral","src":"4991:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"4994:4:32","nodeType":"YulLiteral","src":"4994:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"4984:6:32","nodeType":"YulIdentifier","src":"4984:6:32"},"nativeSrc":"4984:15:32","nodeType":"YulFunctionCall","src":"4984:15:32"},"nativeSrc":"4984:15:32","nodeType":"YulExpressionStatement","src":"4984:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5015:1:32","nodeType":"YulLiteral","src":"5015:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5018:4:32","nodeType":"YulLiteral","src":"5018:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5008:6:32","nodeType":"YulIdentifier","src":"5008:6:32"},"nativeSrc":"5008:15:32","nodeType":"YulFunctionCall","src":"5008:15:32"},"nativeSrc":"5008:15:32","nodeType":"YulExpressionStatement","src":"5008:15:32"}]},"name":"panic_error_0x11","nativeSrc":"4845:184:32","nodeType":"YulFunctionDefinition","src":"4845:184:32"},{"body":{"nativeSrc":"5082:77:32","nodeType":"YulBlock","src":"5082:77:32","statements":[{"nativeSrc":"5092:16:32","nodeType":"YulAssignment","src":"5092:16:32","value":{"arguments":[{"name":"x","nativeSrc":"5103:1:32","nodeType":"YulIdentifier","src":"5103:1:32"},{"name":"y","nativeSrc":"5106:1:32","nodeType":"YulIdentifier","src":"5106:1:32"}],"functionName":{"name":"add","nativeSrc":"5099:3:32","nodeType":"YulIdentifier","src":"5099:3:32"},"nativeSrc":"5099:9:32","nodeType":"YulFunctionCall","src":"5099:9:32"},"variableNames":[{"name":"sum","nativeSrc":"5092:3:32","nodeType":"YulIdentifier","src":"5092:3:32"}]},{"body":{"nativeSrc":"5131:22:32","nodeType":"YulBlock","src":"5131:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5133:16:32","nodeType":"YulIdentifier","src":"5133:16:32"},"nativeSrc":"5133:18:32","nodeType":"YulFunctionCall","src":"5133:18:32"},"nativeSrc":"5133:18:32","nodeType":"YulExpressionStatement","src":"5133:18:32"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"5123:1:32","nodeType":"YulIdentifier","src":"5123:1:32"},{"name":"sum","nativeSrc":"5126:3:32","nodeType":"YulIdentifier","src":"5126:3:32"}],"functionName":{"name":"gt","nativeSrc":"5120:2:32","nodeType":"YulIdentifier","src":"5120:2:32"},"nativeSrc":"5120:10:32","nodeType":"YulFunctionCall","src":"5120:10:32"},"nativeSrc":"5117:36:32","nodeType":"YulIf","src":"5117:36:32"}]},"name":"checked_add_t_uint256","nativeSrc":"5034:125:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5065:1:32","nodeType":"YulTypedName","src":"5065:1:32","type":""},{"name":"y","nativeSrc":"5068:1:32","nodeType":"YulTypedName","src":"5068:1:32","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"5074:3:32","nodeType":"YulTypedName","src":"5074:3:32","type":""}],"src":"5034:125:32"},{"body":{"nativeSrc":"5429:291:32","nodeType":"YulBlock","src":"5429:291:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5446:9:32","nodeType":"YulIdentifier","src":"5446:9:32"},{"arguments":[{"name":"value0","nativeSrc":"5461:6:32","nodeType":"YulIdentifier","src":"5461:6:32"},{"kind":"number","nativeSrc":"5469:42:32","nodeType":"YulLiteral","src":"5469:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5457:3:32","nodeType":"YulIdentifier","src":"5457:3:32"},"nativeSrc":"5457:55:32","nodeType":"YulFunctionCall","src":"5457:55:32"}],"functionName":{"name":"mstore","nativeSrc":"5439:6:32","nodeType":"YulIdentifier","src":"5439:6:32"},"nativeSrc":"5439:74:32","nodeType":"YulFunctionCall","src":"5439:74:32"},"nativeSrc":"5439:74:32","nodeType":"YulExpressionStatement","src":"5439:74:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5533:9:32","nodeType":"YulIdentifier","src":"5533:9:32"},{"kind":"number","nativeSrc":"5544:2:32","nodeType":"YulLiteral","src":"5544:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5529:3:32","nodeType":"YulIdentifier","src":"5529:3:32"},"nativeSrc":"5529:18:32","nodeType":"YulFunctionCall","src":"5529:18:32"},{"name":"value1","nativeSrc":"5549:6:32","nodeType":"YulIdentifier","src":"5549:6:32"}],"functionName":{"name":"mstore","nativeSrc":"5522:6:32","nodeType":"YulIdentifier","src":"5522:6:32"},"nativeSrc":"5522:34:32","nodeType":"YulFunctionCall","src":"5522:34:32"},"nativeSrc":"5522:34:32","nodeType":"YulExpressionStatement","src":"5522:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5576:9:32","nodeType":"YulIdentifier","src":"5576:9:32"},{"kind":"number","nativeSrc":"5587:2:32","nodeType":"YulLiteral","src":"5587:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5572:3:32","nodeType":"YulIdentifier","src":"5572:3:32"},"nativeSrc":"5572:18:32","nodeType":"YulFunctionCall","src":"5572:18:32"},{"name":"value2","nativeSrc":"5592:6:32","nodeType":"YulIdentifier","src":"5592:6:32"}],"functionName":{"name":"mstore","nativeSrc":"5565:6:32","nodeType":"YulIdentifier","src":"5565:6:32"},"nativeSrc":"5565:34:32","nodeType":"YulFunctionCall","src":"5565:34:32"},"nativeSrc":"5565:34:32","nodeType":"YulExpressionStatement","src":"5565:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5619:9:32","nodeType":"YulIdentifier","src":"5619:9:32"},{"kind":"number","nativeSrc":"5630:2:32","nodeType":"YulLiteral","src":"5630:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5615:3:32","nodeType":"YulIdentifier","src":"5615:3:32"},"nativeSrc":"5615:18:32","nodeType":"YulFunctionCall","src":"5615:18:32"},{"kind":"number","nativeSrc":"5635:3:32","nodeType":"YulLiteral","src":"5635:3:32","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"5608:6:32","nodeType":"YulIdentifier","src":"5608:6:32"},"nativeSrc":"5608:31:32","nodeType":"YulFunctionCall","src":"5608:31:32"},"nativeSrc":"5608:31:32","nodeType":"YulExpressionStatement","src":"5608:31:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5659:9:32","nodeType":"YulIdentifier","src":"5659:9:32"},{"kind":"number","nativeSrc":"5670:3:32","nodeType":"YulLiteral","src":"5670:3:32","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5655:3:32","nodeType":"YulIdentifier","src":"5655:3:32"},"nativeSrc":"5655:19:32","nodeType":"YulFunctionCall","src":"5655:19:32"},{"kind":"number","nativeSrc":"5676:1:32","nodeType":"YulLiteral","src":"5676:1:32","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5648:6:32","nodeType":"YulIdentifier","src":"5648:6:32"},"nativeSrc":"5648:30:32","nodeType":"YulFunctionCall","src":"5648:30:32"},"nativeSrc":"5648:30:32","nodeType":"YulExpressionStatement","src":"5648:30:32"},{"nativeSrc":"5687:27:32","nodeType":"YulAssignment","src":"5687:27:32","value":{"arguments":[{"name":"headStart","nativeSrc":"5699:9:32","nodeType":"YulIdentifier","src":"5699:9:32"},{"kind":"number","nativeSrc":"5710:3:32","nodeType":"YulLiteral","src":"5710:3:32","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"5695:3:32","nodeType":"YulIdentifier","src":"5695:3:32"},"nativeSrc":"5695:19:32","nodeType":"YulFunctionCall","src":"5695:19:32"},"variableNames":[{"name":"tail","nativeSrc":"5687:4:32","nodeType":"YulIdentifier","src":"5687:4:32"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"5164:556:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5382:9:32","nodeType":"YulTypedName","src":"5382:9:32","type":""},{"name":"value2","nativeSrc":"5393:6:32","nodeType":"YulTypedName","src":"5393:6:32","type":""},{"name":"value1","nativeSrc":"5401:6:32","nodeType":"YulTypedName","src":"5401:6:32","type":""},{"name":"value0","nativeSrc":"5409:6:32","nodeType":"YulTypedName","src":"5409:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5420:4:32","nodeType":"YulTypedName","src":"5420:4:32","type":""}],"src":"5164:556:32"},{"body":{"nativeSrc":"5862:119:32","nodeType":"YulBlock","src":"5862:119:32","statements":[{"nativeSrc":"5872:26:32","nodeType":"YulAssignment","src":"5872:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"5884:9:32","nodeType":"YulIdentifier","src":"5884:9:32"},{"kind":"number","nativeSrc":"5895:2:32","nodeType":"YulLiteral","src":"5895:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5880:3:32","nodeType":"YulIdentifier","src":"5880:3:32"},"nativeSrc":"5880:18:32","nodeType":"YulFunctionCall","src":"5880:18:32"},"variableNames":[{"name":"tail","nativeSrc":"5872:4:32","nodeType":"YulIdentifier","src":"5872:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5914:9:32","nodeType":"YulIdentifier","src":"5914:9:32"},{"name":"value0","nativeSrc":"5925:6:32","nodeType":"YulIdentifier","src":"5925:6:32"}],"functionName":{"name":"mstore","nativeSrc":"5907:6:32","nodeType":"YulIdentifier","src":"5907:6:32"},"nativeSrc":"5907:25:32","nodeType":"YulFunctionCall","src":"5907:25:32"},"nativeSrc":"5907:25:32","nodeType":"YulExpressionStatement","src":"5907:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5952:9:32","nodeType":"YulIdentifier","src":"5952:9:32"},{"kind":"number","nativeSrc":"5963:2:32","nodeType":"YulLiteral","src":"5963:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5948:3:32","nodeType":"YulIdentifier","src":"5948:3:32"},"nativeSrc":"5948:18:32","nodeType":"YulFunctionCall","src":"5948:18:32"},{"name":"value1","nativeSrc":"5968:6:32","nodeType":"YulIdentifier","src":"5968:6:32"}],"functionName":{"name":"mstore","nativeSrc":"5941:6:32","nodeType":"YulIdentifier","src":"5941:6:32"},"nativeSrc":"5941:34:32","nodeType":"YulFunctionCall","src":"5941:34:32"},"nativeSrc":"5941:34:32","nodeType":"YulExpressionStatement","src":"5941:34:32"}]},"name":"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"5725:256:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5823:9:32","nodeType":"YulTypedName","src":"5823:9:32","type":""},{"name":"value1","nativeSrc":"5834:6:32","nodeType":"YulTypedName","src":"5834:6:32","type":""},{"name":"value0","nativeSrc":"5842:6:32","nodeType":"YulTypedName","src":"5842:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5853:4:32","nodeType":"YulTypedName","src":"5853:4:32","type":""}],"src":"5725:256:32"},{"body":{"nativeSrc":"6035:79:32","nodeType":"YulBlock","src":"6035:79:32","statements":[{"nativeSrc":"6045:17:32","nodeType":"YulAssignment","src":"6045:17:32","value":{"arguments":[{"name":"x","nativeSrc":"6057:1:32","nodeType":"YulIdentifier","src":"6057:1:32"},{"name":"y","nativeSrc":"6060:1:32","nodeType":"YulIdentifier","src":"6060:1:32"}],"functionName":{"name":"sub","nativeSrc":"6053:3:32","nodeType":"YulIdentifier","src":"6053:3:32"},"nativeSrc":"6053:9:32","nodeType":"YulFunctionCall","src":"6053:9:32"},"variableNames":[{"name":"diff","nativeSrc":"6045:4:32","nodeType":"YulIdentifier","src":"6045:4:32"}]},{"body":{"nativeSrc":"6086:22:32","nodeType":"YulBlock","src":"6086:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6088:16:32","nodeType":"YulIdentifier","src":"6088:16:32"},"nativeSrc":"6088:18:32","nodeType":"YulFunctionCall","src":"6088:18:32"},"nativeSrc":"6088:18:32","nodeType":"YulExpressionStatement","src":"6088:18:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6077:4:32","nodeType":"YulIdentifier","src":"6077:4:32"},{"name":"x","nativeSrc":"6083:1:32","nodeType":"YulIdentifier","src":"6083:1:32"}],"functionName":{"name":"gt","nativeSrc":"6074:2:32","nodeType":"YulIdentifier","src":"6074:2:32"},"nativeSrc":"6074:11:32","nodeType":"YulFunctionCall","src":"6074:11:32"},"nativeSrc":"6071:37:32","nodeType":"YulIf","src":"6071:37:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"5986:128:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6017:1:32","nodeType":"YulTypedName","src":"6017:1:32","type":""},{"name":"y","nativeSrc":"6020:1:32","nodeType":"YulTypedName","src":"6020:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6026:4:32","nodeType":"YulTypedName","src":"6026:4:32","type":""}],"src":"5986:128:32"},{"body":{"nativeSrc":"6248:198:32","nodeType":"YulBlock","src":"6248:198:32","statements":[{"nativeSrc":"6258:26:32","nodeType":"YulAssignment","src":"6258:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"6270:9:32","nodeType":"YulIdentifier","src":"6270:9:32"},{"kind":"number","nativeSrc":"6281:2:32","nodeType":"YulLiteral","src":"6281:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6266:3:32","nodeType":"YulIdentifier","src":"6266:3:32"},"nativeSrc":"6266:18:32","nodeType":"YulFunctionCall","src":"6266:18:32"},"variableNames":[{"name":"tail","nativeSrc":"6258:4:32","nodeType":"YulIdentifier","src":"6258:4:32"}]},{"nativeSrc":"6293:52:32","nodeType":"YulVariableDeclaration","src":"6293:52:32","value":{"kind":"number","nativeSrc":"6303:42:32","nodeType":"YulLiteral","src":"6303:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6297:2:32","nodeType":"YulTypedName","src":"6297:2:32","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6361:9:32","nodeType":"YulIdentifier","src":"6361:9:32"},{"arguments":[{"name":"value0","nativeSrc":"6376:6:32","nodeType":"YulIdentifier","src":"6376:6:32"},{"name":"_1","nativeSrc":"6384:2:32","nodeType":"YulIdentifier","src":"6384:2:32"}],"functionName":{"name":"and","nativeSrc":"6372:3:32","nodeType":"YulIdentifier","src":"6372:3:32"},"nativeSrc":"6372:15:32","nodeType":"YulFunctionCall","src":"6372:15:32"}],"functionName":{"name":"mstore","nativeSrc":"6354:6:32","nodeType":"YulIdentifier","src":"6354:6:32"},"nativeSrc":"6354:34:32","nodeType":"YulFunctionCall","src":"6354:34:32"},"nativeSrc":"6354:34:32","nodeType":"YulExpressionStatement","src":"6354:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6408:9:32","nodeType":"YulIdentifier","src":"6408:9:32"},{"kind":"number","nativeSrc":"6419:2:32","nodeType":"YulLiteral","src":"6419:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6404:3:32","nodeType":"YulIdentifier","src":"6404:3:32"},"nativeSrc":"6404:18:32","nodeType":"YulFunctionCall","src":"6404:18:32"},{"arguments":[{"name":"value1","nativeSrc":"6428:6:32","nodeType":"YulIdentifier","src":"6428:6:32"},{"name":"_1","nativeSrc":"6436:2:32","nodeType":"YulIdentifier","src":"6436:2:32"}],"functionName":{"name":"and","nativeSrc":"6424:3:32","nodeType":"YulIdentifier","src":"6424:3:32"},"nativeSrc":"6424:15:32","nodeType":"YulFunctionCall","src":"6424:15:32"}],"functionName":{"name":"mstore","nativeSrc":"6397:6:32","nodeType":"YulIdentifier","src":"6397:6:32"},"nativeSrc":"6397:43:32","nodeType":"YulFunctionCall","src":"6397:43:32"},"nativeSrc":"6397:43:32","nodeType":"YulExpressionStatement","src":"6397:43:32"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"6119:327:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6209:9:32","nodeType":"YulTypedName","src":"6209:9:32","type":""},{"name":"value1","nativeSrc":"6220:6:32","nodeType":"YulTypedName","src":"6220:6:32","type":""},{"name":"value0","nativeSrc":"6228:6:32","nodeType":"YulTypedName","src":"6228:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6239:4:32","nodeType":"YulTypedName","src":"6239:4:32","type":""}],"src":"6119:327:32"},{"body":{"nativeSrc":"6529:199:32","nodeType":"YulBlock","src":"6529:199:32","statements":[{"body":{"nativeSrc":"6575:16:32","nodeType":"YulBlock","src":"6575:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6584:1:32","nodeType":"YulLiteral","src":"6584:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6587:1:32","nodeType":"YulLiteral","src":"6587:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6577:6:32","nodeType":"YulIdentifier","src":"6577:6:32"},"nativeSrc":"6577:12:32","nodeType":"YulFunctionCall","src":"6577:12:32"},"nativeSrc":"6577:12:32","nodeType":"YulExpressionStatement","src":"6577:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6550:7:32","nodeType":"YulIdentifier","src":"6550:7:32"},{"name":"headStart","nativeSrc":"6559:9:32","nodeType":"YulIdentifier","src":"6559:9:32"}],"functionName":{"name":"sub","nativeSrc":"6546:3:32","nodeType":"YulIdentifier","src":"6546:3:32"},"nativeSrc":"6546:23:32","nodeType":"YulFunctionCall","src":"6546:23:32"},{"kind":"number","nativeSrc":"6571:2:32","nodeType":"YulLiteral","src":"6571:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6542:3:32","nodeType":"YulIdentifier","src":"6542:3:32"},"nativeSrc":"6542:32:32","nodeType":"YulFunctionCall","src":"6542:32:32"},"nativeSrc":"6539:52:32","nodeType":"YulIf","src":"6539:52:32"},{"nativeSrc":"6600:29:32","nodeType":"YulVariableDeclaration","src":"6600:29:32","value":{"arguments":[{"name":"headStart","nativeSrc":"6619:9:32","nodeType":"YulIdentifier","src":"6619:9:32"}],"functionName":{"name":"mload","nativeSrc":"6613:5:32","nodeType":"YulIdentifier","src":"6613:5:32"},"nativeSrc":"6613:16:32","nodeType":"YulFunctionCall","src":"6613:16:32"},"variables":[{"name":"value","nativeSrc":"6604:5:32","nodeType":"YulTypedName","src":"6604:5:32","type":""}]},{"body":{"nativeSrc":"6682:16:32","nodeType":"YulBlock","src":"6682:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6691:1:32","nodeType":"YulLiteral","src":"6691:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6694:1:32","nodeType":"YulLiteral","src":"6694:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6684:6:32","nodeType":"YulIdentifier","src":"6684:6:32"},"nativeSrc":"6684:12:32","nodeType":"YulFunctionCall","src":"6684:12:32"},"nativeSrc":"6684:12:32","nodeType":"YulExpressionStatement","src":"6684:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6651:5:32","nodeType":"YulIdentifier","src":"6651:5:32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6672:5:32","nodeType":"YulIdentifier","src":"6672:5:32"}],"functionName":{"name":"iszero","nativeSrc":"6665:6:32","nodeType":"YulIdentifier","src":"6665:6:32"},"nativeSrc":"6665:13:32","nodeType":"YulFunctionCall","src":"6665:13:32"}],"functionName":{"name":"iszero","nativeSrc":"6658:6:32","nodeType":"YulIdentifier","src":"6658:6:32"},"nativeSrc":"6658:21:32","nodeType":"YulFunctionCall","src":"6658:21:32"}],"functionName":{"name":"eq","nativeSrc":"6648:2:32","nodeType":"YulIdentifier","src":"6648:2:32"},"nativeSrc":"6648:32:32","nodeType":"YulFunctionCall","src":"6648:32:32"}],"functionName":{"name":"iszero","nativeSrc":"6641:6:32","nodeType":"YulIdentifier","src":"6641:6:32"},"nativeSrc":"6641:40:32","nodeType":"YulFunctionCall","src":"6641:40:32"},"nativeSrc":"6638:60:32","nodeType":"YulIf","src":"6638:60:32"},{"nativeSrc":"6707:15:32","nodeType":"YulAssignment","src":"6707:15:32","value":{"name":"value","nativeSrc":"6717:5:32","nodeType":"YulIdentifier","src":"6717:5:32"},"variableNames":[{"name":"value0","nativeSrc":"6707:6:32","nodeType":"YulIdentifier","src":"6707:6:32"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6451:277:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6495:9:32","nodeType":"YulTypedName","src":"6495:9:32","type":""},{"name":"dataEnd","nativeSrc":"6506:7:32","nodeType":"YulTypedName","src":"6506:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6518:6:32","nodeType":"YulTypedName","src":"6518:6:32","type":""}],"src":"6451:277:32"},{"body":{"nativeSrc":"6765:152:32","nodeType":"YulBlock","src":"6765:152:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6782:1:32","nodeType":"YulLiteral","src":"6782:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6785:77:32","nodeType":"YulLiteral","src":"6785:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6775:6:32","nodeType":"YulIdentifier","src":"6775:6:32"},"nativeSrc":"6775:88:32","nodeType":"YulFunctionCall","src":"6775:88:32"},"nativeSrc":"6775:88:32","nodeType":"YulExpressionStatement","src":"6775:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6879:1:32","nodeType":"YulLiteral","src":"6879:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"6882:4:32","nodeType":"YulLiteral","src":"6882:4:32","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6872:6:32","nodeType":"YulIdentifier","src":"6872:6:32"},"nativeSrc":"6872:15:32","nodeType":"YulFunctionCall","src":"6872:15:32"},"nativeSrc":"6872:15:32","nodeType":"YulExpressionStatement","src":"6872:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6903:1:32","nodeType":"YulLiteral","src":"6903:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"6906:4:32","nodeType":"YulLiteral","src":"6906:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6896:6:32","nodeType":"YulIdentifier","src":"6896:6:32"},"nativeSrc":"6896:15:32","nodeType":"YulFunctionCall","src":"6896:15:32"},"nativeSrc":"6896:15:32","nodeType":"YulExpressionStatement","src":"6896:15:32"}]},"name":"panic_error_0x32","nativeSrc":"6733:184:32","nodeType":"YulFunctionDefinition","src":"6733:184:32"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$978__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        value3 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":291},{"length":32,"start":415},{"length":32,"start":2881},{"length":32,"start":3017}],"3276":[{"length":32,"start":365},{"length":32,"start":1838}],"3279":[{"length":32,"start":481},{"length":32,"start":1777},{"length":32,"start":1934}],"3282":[{"length":32,"start":542},{"length":32,"start":1559}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063dc45def611610066578063dc45def614610249578063e3a0ce0914610292578063eb02625c146102b5578063f2fde38b146102c857600080fd5b80638da5cb5b146102115780639dfbcde814610219578063ba65912e1461024057600080fd5b80633a5af339116100bd5780633a5af33914610168578063572b6c051461018f57806389a89002146101dc57600080fd5b806301ffc9a7146100e45780630328a8fc1461010c5780632b4c9f1614610121575b600080fd5b6100f76100f2366004610cba565b6102db565b60405190151581526020015b60405180910390f35b61011f61011a366004610cfc565b6102f5565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b6100f761019d366004610d57565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610103565b6101436103dc565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b61020360005481565b610277610257366004610d72565b600160208190526000918252604090912080549181015460029091015483565b60408051938452602084019290925290820152606001610103565b6100f76102a0366004610d72565b60026020526000908152604090205460ff1681565b61011f6102c3366004610d8b565b610408565b61011f6102d6366004610d57565b610806565b60006102ef826102e9610824565b90610852565b92915050565b61030e61030061092c565b610308610936565b90610964565b6000848152600160205260409020541561035c576040517fed10979d000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b604080516060810182528481526020808201858152828401858152600089815260018085529086902094518555915191840191909155516002909201919091558151848152908101839052849186917f91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da910160405180910390a350505050565b60006104036103e9610936565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60008481526001602052604090208054610451576040517f84f229dc00000000000000000000000000000000000000000000000000000000815260048101869052602401610353565b80600101544210806104665750806002015442115b156104a6576040517fdbeb4f4d00000000000000000000000000000000000000000000000000000000815260048101869052426024820152604401610353565b600085836040516020016104e992919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b6040516020818303038152906040528051906020012090506105478260000154828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509294939250506109d39050565b61059c576040517fa04a37c00000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff84166024820152604401610353565b60008181526002602052604090205460ff1615610604576040517fa8ca238e0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff84166024820152604401610353565b60008054610613906001610e4a565b90507f000000000000000000000000000000000000000000000000000000000000000081111561066f576040517f192d175500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181558281526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590517f5cfa929700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301527f0000000000000000000000000000000000000000000000000000000000000000602483015260448201929092526080606482015260848101929092527f00000000000000000000000000000000000000000000000000000000000000001690635cfa92979060a401600060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b5050604080517f000000000000000000000000000000000000000000000000000000000000000081526001602082015273ffffffffffffffffffffffffffffffffffffffff881693508a92507fa68c079189004e3175c636199e3e4d2aae420ce461ed29f670552b3eba9d2a03910160405180910390a350505050505050565b61082161081161092c565b8261081a610936565b91906109e9565b50565b6000806102ef60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610e5d565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108a2575060006102ef565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108f3575060016102ef565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610403610afe565b6000806102ef60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610e5d565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146109cf576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610353565b5050565b6000826109e08584610c45565b14949350505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610a56576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610353565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af85783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610b0e5750601836105b15610b1857503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610c3457506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190610e70565b15610c3e57919050565b3391505090565b600081815b8451811015610c8057610c7682868381518110610c6957610c69610e92565b6020026020010151610c88565b9150600101610c4a565b509392505050565b6000818310610ca4576000828152602084905260409020610cb3565b60008381526020839052604090205b9392505050565b600060208284031215610ccc57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cb357600080fd5b60008060008060808587031215610d1257600080fd5b5050823594602084013594506040840135936060013592509050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d5257600080fd5b919050565b600060208284031215610d6957600080fd5b610cb382610d2e565b600060208284031215610d8457600080fd5b5035919050565b60008060008060608587031215610da157600080fd5b84359350602085013567ffffffffffffffff80821115610dc057600080fd5b818701915087601f830112610dd457600080fd5b813581811115610de357600080fd5b8860208260051b8501011115610df857600080fd5b602083019550809450505050610e1060408601610d2e565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156102ef576102ef610e1b565b818103818111156102ef576102ef610e1b565b600060208284031215610e8257600080fd5b81518015158114610cb357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212208b11e33f917c9ecb51cb47072530af3f2baf0a6d42340627fae5333c9c5abe6464736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A5AF339 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCBA JUMP JUMPDEST PUSH2 0x2DB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x2F5 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0xD57 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x203 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0x408 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x806 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP3 PUSH2 0x2E9 PUSH2 0x824 JUMP JUMPDEST SWAP1 PUSH2 0x852 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x30E PUSH2 0x300 PUSH2 0x92C JUMP JUMPDEST PUSH2 0x308 PUSH2 0x936 JUMP JUMPDEST SWAP1 PUSH2 0x964 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x35C JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x403 PUSH2 0x3E9 PUSH2 0x936 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x451 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x353 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x466 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x353 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E9 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x547 DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0x9D3 SWAP1 POP JUMP JUMPDEST PUSH2 0x59C JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x353 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x604 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x353 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x613 SWAP1 PUSH1 0x1 PUSH2 0xE4A JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x66F JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x786 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP4 POP DUP11 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x821 PUSH2 0x811 PUSH2 0x92C JUMP JUMPDEST DUP3 PUSH2 0x81A PUSH2 0x936 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x9E9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xE5D JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8A2 JUMPI POP PUSH1 0x0 PUSH2 0x2EF JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8F3 JUMPI POP PUSH1 0x1 PUSH2 0x2EF JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x403 PUSH2 0xAFE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xE5D JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x9CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x353 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9E0 DUP6 DUP5 PUSH2 0xC45 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xA56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x353 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAF8 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xB0E JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB18 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC34 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC10 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC34 SWAP2 SWAP1 PUSH2 0xE70 JUMP JUMPDEST ISZERO PUSH2 0xC3E JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC76 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC69 JUMPI PUSH2 0xC69 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xC88 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xC4A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xCA4 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB3 DUP3 PUSH2 0xD2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xDE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0xE10 PUSH1 0x40 DUP7 ADD PUSH2 0xD2E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE1B JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 GT 0xE3 EXTCODEHASH SWAP2 PUSH29 0x9ECB51CB47072530AF3F2BAF0A6D42340627FAE5333C9C5ABE6464736F PUSH13 0x63430008160033000000000000 ","sourceMap":"1163:5877:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:32;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;4935:473:30;;;;;;:::i;:::-;;:::i;:::-;;728:115:11;817:19;728:115;;;1135:42:32;1123:55;;;1105:74;;1093:2;1078:18;728:115:11;933:252:32;1568:49:30;;;;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1668:33:30;;;;;;;;1983:25:32;;;1971:2;1956:18;1668:33:30;1837:177:32;710:120:1;;;:::i;1788:36:30:-;;;;;1898:32;;;;;;2000:51;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2637:25:32;;;2693:2;2678:18;;2671:34;;;;2721:18;;;2714:34;2625:2;2610:18;2000:51:30;2435:319:32;2117:43:30;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5971:1067;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;4935:473:30:-;5055:70;5112:12;:10;:12::i;:::-;5055:33;:31;:33::i;:::-;:56;;:70::i;:::-;5184:1;5140:21;;;:12;:21;;;;;:32;:46;5136:113;;5209:29;;;;;;;;1983:25:32;;;1956:18;;5209:29:30;;;;;;;;5136:113;5283:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5259:21:30;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;5342:59;;3877:25:32;;;3918:18;;;3911:34;;;5283:43:30;;5259:21;;5342:59;;3850:18:32;5342:59:30;;;;;;;4935:473;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;5971:1067:30:-;6067:31;6101:21;;;:12;:21;;;;;6136:22;;6132:99;;6195:25;;;;;;;;1983::32;;;1956:18;;6195:25:30;1837:177:32;6132:99:30;6262:11;:21;;;6244:15;:39;:80;;;;6305:11;:19;;;6287:15;:37;6244:80;6240:160;;;6347:42;;;;;;;;3877:25:32;;;6373:15:30;3918:18:32;;;3911:34;3850:18;;6347:42:30;3703:248:32;6240:160:30;6410:12;6452:7;6461:9;6435:36;;;;;;;;4366:19:32;;;4423:2;4419:15;4436:66;4415:88;4410:2;4401:12;;4394:110;4529:2;4520:12;;4209:329;6435:36:30;;;;;;;;;;;;;6425:47;;;;;;6410:62;;6487:42;6500:11;:22;;;6524:4;6487:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6487:12:30;;:42;;-1:-1:-1;;6487:12:30;:42;-1:-1:-1;6487:42:30:i;:::-;6482:88;;6538:32;;;;;;;;4717:25:32;;;4790:42;4778:55;;4758:18;;;4751:83;4690:18;;6538:32:30;4543:297:32;6482:88:30;6585:17;;;;:11;:17;;;;;;;;6581:64;;;6611:34;;;;;;;;4717:25:32;;;4790:42;4778:55;;4758:18;;;4751:83;4690:18;;6611:34:30;4543:297:32;6581:64:30;6656:32;6691:17;;:21;;6711:1;6691:21;:::i;:::-;6656:56;;6753:11;6726:24;:38;6722:96;;;6787:20;;;;;;;;;;;;;;6722:96;6828:17;:44;;;6882:17;;;:11;:17;;;;;;:24;;;;6902:4;6882:24;;;;;;6917:52;;;;;:24;5457:55:32;;;6917:52:30;;;5439:74:32;6953:8:30;5529:18:32;;;5522:34;5572:18;;;5565:34;;;;5635:3;5615:18;;;5608:31;5655:19;;;5648:30;;;;6917:15:30;:24;;;;5695:19:32;;6917:52:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6985:46:30;;;7019:8;3877:25:32;;7029:1:30;3933:2:32;3918:18;;3911:34;6985:46:30;;;;-1:-1:-1;6999:7:30;;-1:-1:-1;6985:46:30;;3850:18:32;6985:46:30;;;;;;;6057:981;;;5971:1067;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;4040:175:30:-;4141:7;4167:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1135:42:32;1123:55;;4543:25:6;;;1105:74:32;1078:18;;4543:25:6;933:252:32;4504:64:6;4413:162;;:::o;1156:184:26:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:26:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1135:42:32;1123:55;;3243:24:6;;;1105:74:32;1078:18;;3243:24:6;933:252:32;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;6372:15:32;;;1396:59:12;;;6354:34:32;1444:10:12;6404:18:32;;;6397:43;1396:19:12;:39;;;;6266:18:32;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1994:290:26:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:26;;2133:116;;;-1:-1:-1;2265:12:26;1994:290;-1:-1:-1;;;1994:290:26:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:26:o;14:332:32:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:385;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;746:23:32;;;816:2;801:18;;788:32;;-1:-1:-1;867:2:32;852:18;;839:32;;918:2;903:18;890:32;;-1:-1:-1;543:385:32;-1:-1:-1;543:385:32:o;1445:196::-;1513:20;;1573:42;1562:54;;1552:65;;1542:93;;1631:1;1628;1621:12;1542:93;1445:196;;;:::o;1646:186::-;1705:6;1758:2;1746:9;1737:7;1733:23;1729:32;1726:52;;;1774:1;1771;1764:12;1726:52;1797:29;1816:9;1797:29;:::i;2250:180::-;2309:6;2362:2;2350:9;2341:7;2337:23;2333:32;2330:52;;;2378:1;2375;2368:12;2330:52;-1:-1:-1;2401:23:32;;2250:180;-1:-1:-1;2250:180:32:o;2759:757::-;2863:6;2871;2879;2887;2940:2;2928:9;2919:7;2915:23;2911:32;2908:52;;;2956:1;2953;2946:12;2908:52;2992:9;2979:23;2969:33;;3053:2;3042:9;3038:18;3025:32;3076:18;3117:2;3109:6;3106:14;3103:34;;;3133:1;3130;3123:12;3103:34;3171:6;3160:9;3156:22;3146:32;;3216:7;3209:4;3205:2;3201:13;3197:27;3187:55;;3238:1;3235;3228:12;3187:55;3278:2;3265:16;3304:2;3296:6;3293:14;3290:34;;;3320:1;3317;3310:12;3290:34;3373:7;3368:2;3358:6;3355:1;3351:14;3347:2;3343:23;3339:32;3336:45;3333:65;;;3394:1;3391;3384:12;3333:65;3425:2;3421;3417:11;3407:21;;3447:6;3437:16;;;;;3472:38;3506:2;3495:9;3491:18;3472:38;:::i;:::-;3462:48;;2759:757;;;;;;;:::o;4845:184::-;4897:77;4894:1;4887:88;4994:4;4991:1;4984:15;5018:4;5015:1;5008:15;5034:125;5099:9;;;5120:10;;;5117:36;;;5133:18;;:::i;5986:128::-;6053:9;;;6074:11;;;6071:37;;;6088:18;;:::i;6451:277::-;6518:6;6571:2;6559:9;6550:7;6546:23;6542:32;6539:52;;;6587:1;6584;6577:12;6539:52;6619:9;6613:16;6672:5;6665:13;6658:21;6651:5;6648:32;6638:60;;6694:1;6691;6684:12;6733:184;6785:77;6782:1;6775:88;6882:4;6879:1;6872:15;6906:4;6903:1;6896:15"},"gasEstimates":{"creation":{"codeDepositCost":"766200","executionCost":"infinite","totalCost":"infinite"},"external":{"MINT_SUPPLY()":"infinite","REWARD_CONTRACT()":"infinite","TOKEN_ID()":"infinite","claim(bytes32,bytes32[],address)":"infinite","claimStatus(bytes32)":"2483","claimWindows(bytes32)":"6735","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","noOfTokensClaimed()":"2362","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"MINT_SUPPLY()":"9dfbcde8","REWARD_CONTRACT()":"3a5af339","TOKEN_ID()":"89a89002","claim(bytes32,bytes32[],address)":"eb02625c","claimStatus(bytes32)":"e3a0ce09","claimWindows(bytes32)":"dc45def6","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","noOfTokensClaimed()":"ba65912e","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMintSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetEpochMerkleRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"claim(bytes32,bytes32[],address)\":{\"details\":\"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\"}},\"constructor\":{\"params\":{\"forwarderRegistry\":\"The forwarder registry contract.\",\"mintSupply\":\"The total number of tokens that can be minted in this contract.\",\"rewardContract\":\"The ERC1155Mintable reward contract interface.\",\"tokenId\":\"The token id to be claimed.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.\",\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Anichess ERC1155 Merkle Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,address)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID already exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"ExceededMintSupply()\":[{\"notice\":\"Error thrown when the number of tokens claimed exceeds the mint supply.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidProof(bytes32,address)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Error thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,address,uint256,uint256)\":{\"notice\":\"Event emitted when a payout is claimed.\"},\"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Event emitted when a claim window is set.\"}},\"kind\":\"user\",\"methods\":{\"MINT_SUPPLY()\":{\"notice\":\"The total number of tokens that can be minted in this contract.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract.\"},\"TOKEN_ID()\":{\"notice\":\"The token id to be claimed.\"},\"claim(bytes32,bytes32[],address)\":{\"notice\":\"Claims the payout for a specific epoch.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping from leafhash to the claim status.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"constructor\":{\"notice\":\"Constructor for the AnichessERC1155MerkleClaim contract.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"noOfTokensClaimed()\":{\"notice\":\"The total number of tokens that have been claimed.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":\"AnichessERC1155MerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess ERC1155 Merkle Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice The ERC1155Mintable reward contract.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice The token id to be claimed.\\n    uint256 public immutable TOKEN_ID;\\n\\n    /// @notice The total number of tokens that can be minted in this contract.\\n    uint256 public immutable MINT_SUPPLY;\\n\\n    /// @notice The total number of tokens that have been claimed.\\n    uint256 public noOfTokensClaimed;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 => ClaimWindow) public claimWindows;\\n\\n    /// @notice Mapping from leafhash to the claim status.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice Event emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256 id, uint256 value);\\n\\n    /// @notice Event emitted when a claim window is set.\\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Error thrown when the number of tokens claimed exceeds the mint supply.\\n    error ExceededMintSupply();\\n\\n    /// @notice Error thrown when the epoch ID already exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /**\\n     * @notice Constructor for the AnichessERC1155MerkleClaim contract.\\n     * @param tokenId The token id to be claimed.\\n     * @param mintSupply The total number of tokens that can be minted in this contract.\\n     * @param rewardContract The ERC1155Mintable reward contract interface.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 tokenId,\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        TOKEN_ID = tokenId;\\n        MINT_SUPPLY = mintSupply;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if the _msgSender() is not the owner.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a SetEpochMerkleRoot event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.\\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     * @dev Throws if the claim window has not been set.\\n     * @dev Throws if the claim window is closed or has not yet opened.\\n     * @dev Throws if the proof provided for the claim is invalid.\\n     * @dev Throws if the payout has already been claimed.\\n     * @dev Throws if the number of tokens claimed exceeds the mint supply.\\n     */\\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient) external {\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n        if (claimWindow.merkleRoot == bytes32(0)) {\\n            revert EpochIdNotExists(epochId);\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient));\\n        if (!proof.verify(claimWindow.merkleRoot, leaf)) revert InvalidProof(epochId, recipient);\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient);\\n\\n        uint256 updatedNoOfTokensClaimed = noOfTokensClaimed + 1;\\n        if (updatedNoOfTokensClaimed > MINT_SUPPLY) {\\n            revert ExceededMintSupply();\\n        }\\n\\n        noOfTokensClaimed = updatedNoOfTokensClaimed;\\n        claimStatus[leaf] = true;\\n\\n        REWARD_CONTRACT.safeMint(recipient, TOKEN_ID, 1, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, TOKEN_ID, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2c63426bcd9e7d72a47eb8cbc09bb2357218fdccf8ba7888b15efa7f0c9b1344\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3285,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"noOfTokensClaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":3291,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)3272_storage)"},{"astId":3296,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"claimStatus","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)3272_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)3272_storage"},"t_struct(ClaimWindow)3272_storage":{"encoding":"inplace","label":"struct AnichessERC1155MerkleClaim.ClaimWindow","members":[{"astId":3267,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3269,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":3271,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,address)":[{"notice":"Error thrown when the payout has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Error thrown when the epoch ID already exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"ExceededMintSupply()":[{"notice":"Error thrown when the number of tokens claimed exceeds the mint supply."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidProof(bytes32,address)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Error thrown when the claim window is closed or has not yet opened."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,address,uint256,uint256)":{"notice":"Event emitted when a payout is claimed."},"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Event emitted when a claim window is set."}},"kind":"user","methods":{"MINT_SUPPLY()":{"notice":"The total number of tokens that can be minted in this contract."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract."},"TOKEN_ID()":{"notice":"The token id to be claimed."},"claim(bytes32,bytes32[],address)":{"notice":"Claims the payout for a specific epoch."},"claimStatus(bytes32)":{"notice":"Mapping from leafhash to the claim status."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"constructor":{"notice":"Constructor for the AnichessERC1155MerkleClaim contract."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"noOfTokensClaimed()":{"notice":"The total number of tokens that have been claimed."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"AnichessERC1155MerkleClaimMock":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"mintSupply","type":"uint256"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"ExceededMintSupply","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"SetEpochMerkleRoot","type":"event"},{"inputs":[],"name":"MINT_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"noOfTokensClaimed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"claim(bytes32,bytes32[],address)":{"details":"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.","params":{"epochId":"The epoch ID for the claim.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.","params":{"endTime":"The end time of the claim window.","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_3386":{"entryPoint":null,"id":3386,"parameterSlots":4,"returnSlots":0},"@_3622":{"entryPoint":null,"id":3622,"parameterSlots":4,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":181,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":127,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":304,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":352,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$978t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":470,"id":null,"parameterSlots":2,"returnSlots":4},"checked_sub_t_uint256":{"entryPoint":550,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Mintable":{"entryPoint":445,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:994:32","nodeType":"YulBlock","src":"0:994:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"77:86:32","nodeType":"YulBlock","src":"77:86:32","statements":[{"body":{"nativeSrc":"141:16:32","nodeType":"YulBlock","src":"141:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:32","nodeType":"YulLiteral","src":"150:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:32","nodeType":"YulLiteral","src":"153:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:32","nodeType":"YulIdentifier","src":"143:6:32"},"nativeSrc":"143:12:32","nodeType":"YulFunctionCall","src":"143:12:32"},"nativeSrc":"143:12:32","nodeType":"YulExpressionStatement","src":"143:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:32","nodeType":"YulIdentifier","src":"100:5:32"},{"arguments":[{"name":"value","nativeSrc":"111:5:32","nodeType":"YulIdentifier","src":"111:5:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:32","nodeType":"YulLiteral","src":"126:3:32","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:32","nodeType":"YulLiteral","src":"131:1:32","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:32","nodeType":"YulIdentifier","src":"122:3:32"},"nativeSrc":"122:11:32","nodeType":"YulFunctionCall","src":"122:11:32"},{"kind":"number","nativeSrc":"135:1:32","nodeType":"YulLiteral","src":"135:1:32","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:32","nodeType":"YulIdentifier","src":"118:3:32"},"nativeSrc":"118:19:32","nodeType":"YulFunctionCall","src":"118:19:32"}],"functionName":{"name":"and","nativeSrc":"107:3:32","nodeType":"YulIdentifier","src":"107:3:32"},"nativeSrc":"107:31:32","nodeType":"YulFunctionCall","src":"107:31:32"}],"functionName":{"name":"eq","nativeSrc":"97:2:32","nodeType":"YulIdentifier","src":"97:2:32"},"nativeSrc":"97:42:32","nodeType":"YulFunctionCall","src":"97:42:32"}],"functionName":{"name":"iszero","nativeSrc":"90:6:32","nodeType":"YulIdentifier","src":"90:6:32"},"nativeSrc":"90:50:32","nodeType":"YulFunctionCall","src":"90:50:32"},"nativeSrc":"87:70:32","nodeType":"YulIf","src":"87:70:32"}]},"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"14:149:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:32","nodeType":"YulTypedName","src":"66:5:32","type":""}],"src":"14:149:32"},{"body":{"nativeSrc":"350:412:32","nodeType":"YulBlock","src":"350:412:32","statements":[{"body":{"nativeSrc":"397:16:32","nodeType":"YulBlock","src":"397:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"406:1:32","nodeType":"YulLiteral","src":"406:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"409:1:32","nodeType":"YulLiteral","src":"409:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"399:6:32","nodeType":"YulIdentifier","src":"399:6:32"},"nativeSrc":"399:12:32","nodeType":"YulFunctionCall","src":"399:12:32"},"nativeSrc":"399:12:32","nodeType":"YulExpressionStatement","src":"399:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"371:7:32","nodeType":"YulIdentifier","src":"371:7:32"},{"name":"headStart","nativeSrc":"380:9:32","nodeType":"YulIdentifier","src":"380:9:32"}],"functionName":{"name":"sub","nativeSrc":"367:3:32","nodeType":"YulIdentifier","src":"367:3:32"},"nativeSrc":"367:23:32","nodeType":"YulFunctionCall","src":"367:23:32"},{"kind":"number","nativeSrc":"392:3:32","nodeType":"YulLiteral","src":"392:3:32","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"363:3:32","nodeType":"YulIdentifier","src":"363:3:32"},"nativeSrc":"363:33:32","nodeType":"YulFunctionCall","src":"363:33:32"},"nativeSrc":"360:53:32","nodeType":"YulIf","src":"360:53:32"},{"nativeSrc":"422:26:32","nodeType":"YulAssignment","src":"422:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"438:9:32","nodeType":"YulIdentifier","src":"438:9:32"}],"functionName":{"name":"mload","nativeSrc":"432:5:32","nodeType":"YulIdentifier","src":"432:5:32"},"nativeSrc":"432:16:32","nodeType":"YulFunctionCall","src":"432:16:32"},"variableNames":[{"name":"value0","nativeSrc":"422:6:32","nodeType":"YulIdentifier","src":"422:6:32"}]},{"nativeSrc":"457:35:32","nodeType":"YulAssignment","src":"457:35:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"477:9:32","nodeType":"YulIdentifier","src":"477:9:32"},{"kind":"number","nativeSrc":"488:2:32","nodeType":"YulLiteral","src":"488:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"473:3:32","nodeType":"YulIdentifier","src":"473:3:32"},"nativeSrc":"473:18:32","nodeType":"YulFunctionCall","src":"473:18:32"}],"functionName":{"name":"mload","nativeSrc":"467:5:32","nodeType":"YulIdentifier","src":"467:5:32"},"nativeSrc":"467:25:32","nodeType":"YulFunctionCall","src":"467:25:32"},"variableNames":[{"name":"value1","nativeSrc":"457:6:32","nodeType":"YulIdentifier","src":"457:6:32"}]},{"nativeSrc":"501:38:32","nodeType":"YulVariableDeclaration","src":"501:38:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"524:9:32","nodeType":"YulIdentifier","src":"524:9:32"},{"kind":"number","nativeSrc":"535:2:32","nodeType":"YulLiteral","src":"535:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"520:3:32","nodeType":"YulIdentifier","src":"520:3:32"},"nativeSrc":"520:18:32","nodeType":"YulFunctionCall","src":"520:18:32"}],"functionName":{"name":"mload","nativeSrc":"514:5:32","nodeType":"YulIdentifier","src":"514:5:32"},"nativeSrc":"514:25:32","nodeType":"YulFunctionCall","src":"514:25:32"},"variables":[{"name":"value","nativeSrc":"505:5:32","nodeType":"YulTypedName","src":"505:5:32","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"591:5:32","nodeType":"YulIdentifier","src":"591:5:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"548:42:32","nodeType":"YulIdentifier","src":"548:42:32"},"nativeSrc":"548:49:32","nodeType":"YulFunctionCall","src":"548:49:32"},"nativeSrc":"548:49:32","nodeType":"YulExpressionStatement","src":"548:49:32"},{"nativeSrc":"606:15:32","nodeType":"YulAssignment","src":"606:15:32","value":{"name":"value","nativeSrc":"616:5:32","nodeType":"YulIdentifier","src":"616:5:32"},"variableNames":[{"name":"value2","nativeSrc":"606:6:32","nodeType":"YulIdentifier","src":"606:6:32"}]},{"nativeSrc":"630:40:32","nodeType":"YulVariableDeclaration","src":"630:40:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"655:9:32","nodeType":"YulIdentifier","src":"655:9:32"},{"kind":"number","nativeSrc":"666:2:32","nodeType":"YulLiteral","src":"666:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"651:3:32","nodeType":"YulIdentifier","src":"651:3:32"},"nativeSrc":"651:18:32","nodeType":"YulFunctionCall","src":"651:18:32"}],"functionName":{"name":"mload","nativeSrc":"645:5:32","nodeType":"YulIdentifier","src":"645:5:32"},"nativeSrc":"645:25:32","nodeType":"YulFunctionCall","src":"645:25:32"},"variables":[{"name":"value_1","nativeSrc":"634:7:32","nodeType":"YulTypedName","src":"634:7:32","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"722:7:32","nodeType":"YulIdentifier","src":"722:7:32"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"679:42:32","nodeType":"YulIdentifier","src":"679:42:32"},"nativeSrc":"679:51:32","nodeType":"YulFunctionCall","src":"679:51:32"},"nativeSrc":"679:51:32","nodeType":"YulExpressionStatement","src":"679:51:32"},{"nativeSrc":"739:17:32","nodeType":"YulAssignment","src":"739:17:32","value":{"name":"value_1","nativeSrc":"749:7:32","nodeType":"YulIdentifier","src":"749:7:32"},"variableNames":[{"name":"value3","nativeSrc":"739:6:32","nodeType":"YulIdentifier","src":"739:6:32"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$978t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:594:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"292:9:32","nodeType":"YulTypedName","src":"292:9:32","type":""},{"name":"dataEnd","nativeSrc":"303:7:32","nodeType":"YulTypedName","src":"303:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"315:6:32","nodeType":"YulTypedName","src":"315:6:32","type":""},{"name":"value1","nativeSrc":"323:6:32","nodeType":"YulTypedName","src":"323:6:32","type":""},{"name":"value2","nativeSrc":"331:6:32","nodeType":"YulTypedName","src":"331:6:32","type":""},{"name":"value3","nativeSrc":"339:6:32","nodeType":"YulTypedName","src":"339:6:32","type":""}],"src":"168:594:32"},{"body":{"nativeSrc":"816:176:32","nodeType":"YulBlock","src":"816:176:32","statements":[{"nativeSrc":"826:17:32","nodeType":"YulAssignment","src":"826:17:32","value":{"arguments":[{"name":"x","nativeSrc":"838:1:32","nodeType":"YulIdentifier","src":"838:1:32"},{"name":"y","nativeSrc":"841:1:32","nodeType":"YulIdentifier","src":"841:1:32"}],"functionName":{"name":"sub","nativeSrc":"834:3:32","nodeType":"YulIdentifier","src":"834:3:32"},"nativeSrc":"834:9:32","nodeType":"YulFunctionCall","src":"834:9:32"},"variableNames":[{"name":"diff","nativeSrc":"826:4:32","nodeType":"YulIdentifier","src":"826:4:32"}]},{"body":{"nativeSrc":"875:111:32","nodeType":"YulBlock","src":"875:111:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"896:1:32","nodeType":"YulLiteral","src":"896:1:32","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"903:3:32","nodeType":"YulLiteral","src":"903:3:32","type":"","value":"224"},{"kind":"number","nativeSrc":"908:10:32","nodeType":"YulLiteral","src":"908:10:32","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"899:3:32","nodeType":"YulIdentifier","src":"899:3:32"},"nativeSrc":"899:20:32","nodeType":"YulFunctionCall","src":"899:20:32"}],"functionName":{"name":"mstore","nativeSrc":"889:6:32","nodeType":"YulIdentifier","src":"889:6:32"},"nativeSrc":"889:31:32","nodeType":"YulFunctionCall","src":"889:31:32"},"nativeSrc":"889:31:32","nodeType":"YulExpressionStatement","src":"889:31:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"940:1:32","nodeType":"YulLiteral","src":"940:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"943:4:32","nodeType":"YulLiteral","src":"943:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"933:6:32","nodeType":"YulIdentifier","src":"933:6:32"},"nativeSrc":"933:15:32","nodeType":"YulFunctionCall","src":"933:15:32"},"nativeSrc":"933:15:32","nodeType":"YulExpressionStatement","src":"933:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"968:1:32","nodeType":"YulLiteral","src":"968:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"971:4:32","nodeType":"YulLiteral","src":"971:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"961:6:32","nodeType":"YulIdentifier","src":"961:6:32"},"nativeSrc":"961:15:32","nodeType":"YulFunctionCall","src":"961:15:32"},"nativeSrc":"961:15:32","nodeType":"YulExpressionStatement","src":"961:15:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"858:4:32","nodeType":"YulIdentifier","src":"858:4:32"},{"name":"x","nativeSrc":"864:1:32","nodeType":"YulIdentifier","src":"864:1:32"}],"functionName":{"name":"gt","nativeSrc":"855:2:32","nodeType":"YulIdentifier","src":"855:2:32"},"nativeSrc":"855:11:32","nodeType":"YulFunctionCall","src":"855:11:32"},"nativeSrc":"852:134:32","nodeType":"YulIf","src":"852:134:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"767:225:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"798:1:32","nodeType":"YulTypedName","src":"798:1:32","type":""},{"name":"y","nativeSrc":"801:1:32","nodeType":"YulTypedName","src":"801:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"807:4:32","nodeType":"YulTypedName","src":"807:4:32","type":""}],"src":"767:225:32"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$978t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value)\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value3 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1426 CODESIZE SUB DUP1 PUSH3 0x1426 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x1D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE DUP4 DUP4 DUP4 DUP4 CALLER PUSH3 0x5D DUP2 PUSH3 0x56 PUSH3 0x7F JUMP JUMPDEST SWAP1 PUSH3 0xB5 JUMP JUMPDEST POP POP PUSH1 0xC0 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xE0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE POP PUSH3 0x248 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x226 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x10C JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x12C PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x124 PUSH3 0x130 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x160 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x226 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x18F JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD PUSH3 0x208 DUP2 PUSH3 0x1BD JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x21B DUP2 PUSH3 0x1BD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xAF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x1165 PUSH3 0x2C1 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x24A ADD MSTORE PUSH2 0x668 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x20D ADD MSTORE DUP2 DUP2 PUSH2 0x742 ADD MSTORE PUSH2 0x7DF ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x199 ADD MSTORE PUSH2 0x77F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x139 ADD MSTORE DUP2 DUP2 PUSH2 0x1CB ADD MSTORE DUP2 DUP2 PUSH2 0xB9D ADD MSTORE DUP2 DUP2 PUSH2 0xC25 ADD MSTORE DUP2 DUP2 PUSH2 0xCD8 ADD MSTORE PUSH2 0xD16 ADD MSTORE PUSH2 0x1165 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xEB1 JUMP JUMPDEST PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0xEF3 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x186 PUSH2 0x410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP3 SWAP2 SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0x159 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x423 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x22F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x44F JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCF JUMP JUMPDEST PUSH2 0x459 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x323 DUP3 PUSH2 0x31D PUSH2 0x875 JUMP JUMPDEST SWAP1 PUSH2 0x8A3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x334 PUSH2 0x97D JUMP JUMPDEST PUSH2 0x33C PUSH2 0x987 JUMP JUMPDEST SWAP1 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x390 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x41B PUSH2 0xA24 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A PUSH2 0x430 PUSH2 0x987 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A PUSH2 0x97D JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x4A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x4B7 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53A SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x598 DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xA2F SWAP1 POP JUMP JUMPDEST PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x664 SWAP1 PUSH1 0x1 PUSH2 0x108E JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP4 POP DUP11 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x872 PUSH2 0x862 PUSH2 0x97D JUMP JUMPDEST DUP3 PUSH2 0x86B PUSH2 0x987 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA45 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8F3 JUMPI POP PUSH1 0x0 PUSH2 0x323 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x944 JUMPI POP PUSH1 0x1 PUSH2 0x323 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A PUSH2 0xB5A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x10A1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x387 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x41B PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA3C DUP6 DUP5 PUSH2 0xE0B JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xAB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x387 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB54 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xB6A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB74 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC90 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x10B4 JUMP JUMPDEST ISZERO PUSH2 0xC9A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCB2 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCC0 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xDF5 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF5 SWAP2 SWAP1 PUSH2 0x10B4 JUMP JUMPDEST ISZERO PUSH2 0xE02 JUMPI PUSH2 0x41B PUSH2 0xE4E JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE46 JUMPI PUSH2 0xE3C DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE2F JUMPI PUSH2 0xE2F PUSH2 0x10D6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE7F JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE10 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x41B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE9B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xEAA JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xF96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEAA DUP3 PUSH2 0xF72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1018 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x103C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0x1054 PUSH1 0x40 DUP7 ADD PUSH2 0xF72 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x105F JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x105F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0xD3 JUMPI PUSH14 0x115B76B7B0197D92A2CBFCA93E03 0xD5 XOR CODESIZE SWAP4 PUSH10 0xBCD56821EE398AC80664 PUSH20 0x6F6C634300081600330000000000000000000000 ","sourceMap":"384:628:31:-:0;;;460:243;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;645:7:31;654:10;666:14;682:17;3862:10:30;1008:63:0;3862:10:30;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;3884:18:30::2;::::0;;;;3912:24:::2;::::0;-1:-1:-1;;;;;3946:32:30::2;;::::0;-1:-1:-1;384:628:31;;-1:-1:-1;;;384:628:31;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:149:32:-;-1:-1:-1;;;;;107:31:32;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:594::-;315:6;323;331;339;392:3;380:9;371:7;367:23;363:33;360:53;;;409:1;406;399:12;360:53;438:9;432:16;422:26;;488:2;477:9;473:18;467:25;457:35;;535:2;524:9;520:18;514:25;548:49;591:5;548:49;:::i;:::-;666:2;651:18;;645:25;616:5;;-1:-1:-1;679:51:32;645:25;679:51;:::i;:::-;168:594;;;;-1:-1:-1;168:594:32;;-1:-1:-1;;168:594:32:o;767:225::-;834:9;;;855:11;;;852:134;;;908:10;903:3;899:20;896:1;889:31;943:4;940:1;933:15;971:4;968:1;961:15;767:225;384:628:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINT_SUPPLY_3282":{"entryPoint":null,"id":3282,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_3276":{"entryPoint":null,"id":3276,"parameterSlots":0,"returnSlots":0},"@TOKEN_ID_3279":{"entryPoint":null,"id":3279,"parameterSlots":0,"returnSlots":0},"@__msgData_3641":{"entryPoint":1040,"id":3641,"parameterSlots":0,"returnSlots":2},"@__msgSender_3631":{"entryPoint":1103,"id":3631,"parameterSlots":0,"returnSlots":1},"@_efficientHash_1929":{"entryPoint":null,"id":1929,"parameterSlots":2,"returnSlots":1},"@_hashPair_1918":{"entryPoint":3711,"id":1918,"parameterSlots":2,"returnSlots":1},"@_msgData_3414":{"entryPoint":2596,"id":3414,"parameterSlots":0,"returnSlots":2},"@_msgData_700":{"entryPoint":3233,"id":700,"parameterSlots":0,"returnSlots":2},"@_msgSender_3400":{"entryPoint":2429,"id":3400,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":2906,"id":652,"parameterSlots":0,"returnSlots":1},"@claimStatus_3296":{"entryPoint":null,"id":3296,"parameterSlots":0,"returnSlots":0},"@claimWindows_3291":{"entryPoint":null,"id":3291,"parameterSlots":0,"returnSlots":0},"@claim_3591":{"entryPoint":1113,"id":3591,"parameterSlots":4,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":2485,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":2439,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2165,"id":531,"parameterSlots":0,"returnSlots":1},"@msgData_755":{"entryPoint":3662,"id":755,"parameterSlots":0,"returnSlots":2},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@noOfTokensClaimed_3285":{"entryPoint":null,"id":3285,"parameterSlots":0,"returnSlots":0},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1059,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1513":{"entryPoint":3595,"id":1513,"parameterSlots":2,"returnSlots":1},"@setEpochMerkleRoot_3468":{"entryPoint":809,"id":3468,"parameterSlots":4,"returnSlots":0},"@supportsInterface_413":{"entryPoint":783,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2211,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":2629,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2135,"id":79,"parameterSlots":1,"returnSlots":0},"@verify_1452":{"entryPoint":2607,"id":1452,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":3954,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3995,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4276,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4022,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address":{"entryPoint":4047,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":3827,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":3761,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3877,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$978__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":4357,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":4238,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4257,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4191,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4310,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:7707:32","nodeType":"YulBlock","src":"0:7707:32","statements":[{"nativeSrc":"6:3:32","nodeType":"YulBlock","src":"6:3:32","statements":[]},{"body":{"nativeSrc":"83:263:32","nodeType":"YulBlock","src":"83:263:32","statements":[{"body":{"nativeSrc":"129:16:32","nodeType":"YulBlock","src":"129:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:32","nodeType":"YulLiteral","src":"138:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:32","nodeType":"YulLiteral","src":"141:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:32","nodeType":"YulIdentifier","src":"131:6:32"},"nativeSrc":"131:12:32","nodeType":"YulFunctionCall","src":"131:12:32"},"nativeSrc":"131:12:32","nodeType":"YulExpressionStatement","src":"131:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:32","nodeType":"YulIdentifier","src":"104:7:32"},{"name":"headStart","nativeSrc":"113:9:32","nodeType":"YulIdentifier","src":"113:9:32"}],"functionName":{"name":"sub","nativeSrc":"100:3:32","nodeType":"YulIdentifier","src":"100:3:32"},"nativeSrc":"100:23:32","nodeType":"YulFunctionCall","src":"100:23:32"},{"kind":"number","nativeSrc":"125:2:32","nodeType":"YulLiteral","src":"125:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:32","nodeType":"YulIdentifier","src":"96:3:32"},"nativeSrc":"96:32:32","nodeType":"YulFunctionCall","src":"96:32:32"},"nativeSrc":"93:52:32","nodeType":"YulIf","src":"93:52:32"},{"nativeSrc":"154:36:32","nodeType":"YulVariableDeclaration","src":"154:36:32","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:32","nodeType":"YulIdentifier","src":"180:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:32","nodeType":"YulIdentifier","src":"167:12:32"},"nativeSrc":"167:23:32","nodeType":"YulFunctionCall","src":"167:23:32"},"variables":[{"name":"value","nativeSrc":"158:5:32","nodeType":"YulTypedName","src":"158:5:32","type":""}]},{"body":{"nativeSrc":"300:16:32","nodeType":"YulBlock","src":"300:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:32","nodeType":"YulLiteral","src":"309:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:32","nodeType":"YulLiteral","src":"312:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:32","nodeType":"YulIdentifier","src":"302:6:32"},"nativeSrc":"302:12:32","nodeType":"YulFunctionCall","src":"302:12:32"},"nativeSrc":"302:12:32","nodeType":"YulExpressionStatement","src":"302:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:32","nodeType":"YulIdentifier","src":"212:5:32"},{"arguments":[{"name":"value","nativeSrc":"223:5:32","nodeType":"YulIdentifier","src":"223:5:32"},{"kind":"number","nativeSrc":"230:66:32","nodeType":"YulLiteral","src":"230:66:32","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:32","nodeType":"YulIdentifier","src":"219:3:32"},"nativeSrc":"219:78:32","nodeType":"YulFunctionCall","src":"219:78:32"}],"functionName":{"name":"eq","nativeSrc":"209:2:32","nodeType":"YulIdentifier","src":"209:2:32"},"nativeSrc":"209:89:32","nodeType":"YulFunctionCall","src":"209:89:32"}],"functionName":{"name":"iszero","nativeSrc":"202:6:32","nodeType":"YulIdentifier","src":"202:6:32"},"nativeSrc":"202:97:32","nodeType":"YulFunctionCall","src":"202:97:32"},"nativeSrc":"199:117:32","nodeType":"YulIf","src":"199:117:32"},{"nativeSrc":"325:15:32","nodeType":"YulAssignment","src":"325:15:32","value":{"name":"value","nativeSrc":"335:5:32","nodeType":"YulIdentifier","src":"335:5:32"},"variableNames":[{"name":"value0","nativeSrc":"325:6:32","nodeType":"YulIdentifier","src":"325:6:32"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:32","nodeType":"YulTypedName","src":"49:9:32","type":""},{"name":"dataEnd","nativeSrc":"60:7:32","nodeType":"YulTypedName","src":"60:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:32","nodeType":"YulTypedName","src":"72:6:32","type":""}],"src":"14:332:32"},{"body":{"nativeSrc":"446:92:32","nodeType":"YulBlock","src":"446:92:32","statements":[{"nativeSrc":"456:26:32","nodeType":"YulAssignment","src":"456:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:32","nodeType":"YulIdentifier","src":"468:9:32"},{"kind":"number","nativeSrc":"479:2:32","nodeType":"YulLiteral","src":"479:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:32","nodeType":"YulIdentifier","src":"464:3:32"},"nativeSrc":"464:18:32","nodeType":"YulFunctionCall","src":"464:18:32"},"variableNames":[{"name":"tail","nativeSrc":"456:4:32","nodeType":"YulIdentifier","src":"456:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:32","nodeType":"YulIdentifier","src":"498:9:32"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:32","nodeType":"YulIdentifier","src":"523:6:32"}],"functionName":{"name":"iszero","nativeSrc":"516:6:32","nodeType":"YulIdentifier","src":"516:6:32"},"nativeSrc":"516:14:32","nodeType":"YulFunctionCall","src":"516:14:32"}],"functionName":{"name":"iszero","nativeSrc":"509:6:32","nodeType":"YulIdentifier","src":"509:6:32"},"nativeSrc":"509:22:32","nodeType":"YulFunctionCall","src":"509:22:32"}],"functionName":{"name":"mstore","nativeSrc":"491:6:32","nodeType":"YulIdentifier","src":"491:6:32"},"nativeSrc":"491:41:32","nodeType":"YulFunctionCall","src":"491:41:32"},"nativeSrc":"491:41:32","nodeType":"YulExpressionStatement","src":"491:41:32"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:32","nodeType":"YulTypedName","src":"415:9:32","type":""},{"name":"value0","nativeSrc":"426:6:32","nodeType":"YulTypedName","src":"426:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:32","nodeType":"YulTypedName","src":"437:4:32","type":""}],"src":"351:187:32"},{"body":{"nativeSrc":"664:264:32","nodeType":"YulBlock","src":"664:264:32","statements":[{"body":{"nativeSrc":"711:16:32","nodeType":"YulBlock","src":"711:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"720:1:32","nodeType":"YulLiteral","src":"720:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"723:1:32","nodeType":"YulLiteral","src":"723:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"713:6:32","nodeType":"YulIdentifier","src":"713:6:32"},"nativeSrc":"713:12:32","nodeType":"YulFunctionCall","src":"713:12:32"},"nativeSrc":"713:12:32","nodeType":"YulExpressionStatement","src":"713:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"685:7:32","nodeType":"YulIdentifier","src":"685:7:32"},{"name":"headStart","nativeSrc":"694:9:32","nodeType":"YulIdentifier","src":"694:9:32"}],"functionName":{"name":"sub","nativeSrc":"681:3:32","nodeType":"YulIdentifier","src":"681:3:32"},"nativeSrc":"681:23:32","nodeType":"YulFunctionCall","src":"681:23:32"},{"kind":"number","nativeSrc":"706:3:32","nodeType":"YulLiteral","src":"706:3:32","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"677:3:32","nodeType":"YulIdentifier","src":"677:3:32"},"nativeSrc":"677:33:32","nodeType":"YulFunctionCall","src":"677:33:32"},"nativeSrc":"674:53:32","nodeType":"YulIf","src":"674:53:32"},{"nativeSrc":"736:33:32","nodeType":"YulAssignment","src":"736:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"759:9:32","nodeType":"YulIdentifier","src":"759:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"746:12:32","nodeType":"YulIdentifier","src":"746:12:32"},"nativeSrc":"746:23:32","nodeType":"YulFunctionCall","src":"746:23:32"},"variableNames":[{"name":"value0","nativeSrc":"736:6:32","nodeType":"YulIdentifier","src":"736:6:32"}]},{"nativeSrc":"778:42:32","nodeType":"YulAssignment","src":"778:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"805:9:32","nodeType":"YulIdentifier","src":"805:9:32"},{"kind":"number","nativeSrc":"816:2:32","nodeType":"YulLiteral","src":"816:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"801:3:32","nodeType":"YulIdentifier","src":"801:3:32"},"nativeSrc":"801:18:32","nodeType":"YulFunctionCall","src":"801:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"788:12:32","nodeType":"YulIdentifier","src":"788:12:32"},"nativeSrc":"788:32:32","nodeType":"YulFunctionCall","src":"788:32:32"},"variableNames":[{"name":"value1","nativeSrc":"778:6:32","nodeType":"YulIdentifier","src":"778:6:32"}]},{"nativeSrc":"829:42:32","nodeType":"YulAssignment","src":"829:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"856:9:32","nodeType":"YulIdentifier","src":"856:9:32"},{"kind":"number","nativeSrc":"867:2:32","nodeType":"YulLiteral","src":"867:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"852:3:32","nodeType":"YulIdentifier","src":"852:3:32"},"nativeSrc":"852:18:32","nodeType":"YulFunctionCall","src":"852:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"839:12:32","nodeType":"YulIdentifier","src":"839:12:32"},"nativeSrc":"839:32:32","nodeType":"YulFunctionCall","src":"839:32:32"},"variableNames":[{"name":"value2","nativeSrc":"829:6:32","nodeType":"YulIdentifier","src":"829:6:32"}]},{"nativeSrc":"880:42:32","nodeType":"YulAssignment","src":"880:42:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"907:9:32","nodeType":"YulIdentifier","src":"907:9:32"},{"kind":"number","nativeSrc":"918:2:32","nodeType":"YulLiteral","src":"918:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"903:3:32","nodeType":"YulIdentifier","src":"903:3:32"},"nativeSrc":"903:18:32","nodeType":"YulFunctionCall","src":"903:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"890:12:32","nodeType":"YulIdentifier","src":"890:12:32"},"nativeSrc":"890:32:32","nodeType":"YulFunctionCall","src":"890:32:32"},"variableNames":[{"name":"value3","nativeSrc":"880:6:32","nodeType":"YulIdentifier","src":"880:6:32"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nativeSrc":"543:385:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"606:9:32","nodeType":"YulTypedName","src":"606:9:32","type":""},{"name":"dataEnd","nativeSrc":"617:7:32","nodeType":"YulTypedName","src":"617:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"629:6:32","nodeType":"YulTypedName","src":"629:6:32","type":""},{"name":"value1","nativeSrc":"637:6:32","nodeType":"YulTypedName","src":"637:6:32","type":""},{"name":"value2","nativeSrc":"645:6:32","nodeType":"YulTypedName","src":"645:6:32","type":""},{"name":"value3","nativeSrc":"653:6:32","nodeType":"YulTypedName","src":"653:6:32","type":""}],"src":"543:385:32"},{"body":{"nativeSrc":"1060:125:32","nodeType":"YulBlock","src":"1060:125:32","statements":[{"nativeSrc":"1070:26:32","nodeType":"YulAssignment","src":"1070:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1082:9:32","nodeType":"YulIdentifier","src":"1082:9:32"},{"kind":"number","nativeSrc":"1093:2:32","nodeType":"YulLiteral","src":"1093:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1078:3:32","nodeType":"YulIdentifier","src":"1078:3:32"},"nativeSrc":"1078:18:32","nodeType":"YulFunctionCall","src":"1078:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1070:4:32","nodeType":"YulIdentifier","src":"1070:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1112:9:32","nodeType":"YulIdentifier","src":"1112:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1127:6:32","nodeType":"YulIdentifier","src":"1127:6:32"},{"kind":"number","nativeSrc":"1135:42:32","nodeType":"YulLiteral","src":"1135:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1123:3:32","nodeType":"YulIdentifier","src":"1123:3:32"},"nativeSrc":"1123:55:32","nodeType":"YulFunctionCall","src":"1123:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1105:6:32","nodeType":"YulIdentifier","src":"1105:6:32"},"nativeSrc":"1105:74:32","nodeType":"YulFunctionCall","src":"1105:74:32"},"nativeSrc":"1105:74:32","nodeType":"YulExpressionStatement","src":"1105:74:32"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"933:252:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1029:9:32","nodeType":"YulTypedName","src":"1029:9:32","type":""},{"name":"value0","nativeSrc":"1040:6:32","nodeType":"YulTypedName","src":"1040:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1051:4:32","nodeType":"YulTypedName","src":"1051:4:32","type":""}],"src":"933:252:32"},{"body":{"nativeSrc":"1319:318:32","nodeType":"YulBlock","src":"1319:318:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1336:9:32","nodeType":"YulIdentifier","src":"1336:9:32"},{"kind":"number","nativeSrc":"1347:2:32","nodeType":"YulLiteral","src":"1347:2:32","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1329:6:32","nodeType":"YulIdentifier","src":"1329:6:32"},"nativeSrc":"1329:21:32","nodeType":"YulFunctionCall","src":"1329:21:32"},"nativeSrc":"1329:21:32","nodeType":"YulExpressionStatement","src":"1329:21:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1370:9:32","nodeType":"YulIdentifier","src":"1370:9:32"},{"kind":"number","nativeSrc":"1381:2:32","nodeType":"YulLiteral","src":"1381:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1366:3:32","nodeType":"YulIdentifier","src":"1366:3:32"},"nativeSrc":"1366:18:32","nodeType":"YulFunctionCall","src":"1366:18:32"},{"name":"value1","nativeSrc":"1386:6:32","nodeType":"YulIdentifier","src":"1386:6:32"}],"functionName":{"name":"mstore","nativeSrc":"1359:6:32","nodeType":"YulIdentifier","src":"1359:6:32"},"nativeSrc":"1359:34:32","nodeType":"YulFunctionCall","src":"1359:34:32"},"nativeSrc":"1359:34:32","nodeType":"YulExpressionStatement","src":"1359:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1419:9:32","nodeType":"YulIdentifier","src":"1419:9:32"},{"kind":"number","nativeSrc":"1430:2:32","nodeType":"YulLiteral","src":"1430:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1415:3:32","nodeType":"YulIdentifier","src":"1415:3:32"},"nativeSrc":"1415:18:32","nodeType":"YulFunctionCall","src":"1415:18:32"},{"name":"value0","nativeSrc":"1435:6:32","nodeType":"YulIdentifier","src":"1435:6:32"},{"name":"value1","nativeSrc":"1443:6:32","nodeType":"YulIdentifier","src":"1443:6:32"}],"functionName":{"name":"calldatacopy","nativeSrc":"1402:12:32","nodeType":"YulIdentifier","src":"1402:12:32"},"nativeSrc":"1402:48:32","nodeType":"YulFunctionCall","src":"1402:48:32"},"nativeSrc":"1402:48:32","nodeType":"YulExpressionStatement","src":"1402:48:32"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1474:9:32","nodeType":"YulIdentifier","src":"1474:9:32"},{"name":"value1","nativeSrc":"1485:6:32","nodeType":"YulIdentifier","src":"1485:6:32"}],"functionName":{"name":"add","nativeSrc":"1470:3:32","nodeType":"YulIdentifier","src":"1470:3:32"},"nativeSrc":"1470:22:32","nodeType":"YulFunctionCall","src":"1470:22:32"},{"kind":"number","nativeSrc":"1494:2:32","nodeType":"YulLiteral","src":"1494:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1466:3:32","nodeType":"YulIdentifier","src":"1466:3:32"},"nativeSrc":"1466:31:32","nodeType":"YulFunctionCall","src":"1466:31:32"},{"kind":"number","nativeSrc":"1499:1:32","nodeType":"YulLiteral","src":"1499:1:32","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1459:6:32","nodeType":"YulIdentifier","src":"1459:6:32"},"nativeSrc":"1459:42:32","nodeType":"YulFunctionCall","src":"1459:42:32"},"nativeSrc":"1459:42:32","nodeType":"YulExpressionStatement","src":"1459:42:32"},{"nativeSrc":"1510:121:32","nodeType":"YulAssignment","src":"1510:121:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1526:9:32","nodeType":"YulIdentifier","src":"1526:9:32"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1545:6:32","nodeType":"YulIdentifier","src":"1545:6:32"},{"kind":"number","nativeSrc":"1553:2:32","nodeType":"YulLiteral","src":"1553:2:32","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1541:3:32","nodeType":"YulIdentifier","src":"1541:3:32"},"nativeSrc":"1541:15:32","nodeType":"YulFunctionCall","src":"1541:15:32"},{"kind":"number","nativeSrc":"1558:66:32","nodeType":"YulLiteral","src":"1558:66:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1537:3:32","nodeType":"YulIdentifier","src":"1537:3:32"},"nativeSrc":"1537:88:32","nodeType":"YulFunctionCall","src":"1537:88:32"}],"functionName":{"name":"add","nativeSrc":"1522:3:32","nodeType":"YulIdentifier","src":"1522:3:32"},"nativeSrc":"1522:104:32","nodeType":"YulFunctionCall","src":"1522:104:32"},{"kind":"number","nativeSrc":"1628:2:32","nodeType":"YulLiteral","src":"1628:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1518:3:32","nodeType":"YulIdentifier","src":"1518:3:32"},"nativeSrc":"1518:113:32","nodeType":"YulFunctionCall","src":"1518:113:32"},"variableNames":[{"name":"tail","nativeSrc":"1510:4:32","nodeType":"YulIdentifier","src":"1510:4:32"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1190:447:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1280:9:32","nodeType":"YulTypedName","src":"1280:9:32","type":""},{"name":"value1","nativeSrc":"1291:6:32","nodeType":"YulTypedName","src":"1291:6:32","type":""},{"name":"value0","nativeSrc":"1299:6:32","nodeType":"YulTypedName","src":"1299:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1310:4:32","nodeType":"YulTypedName","src":"1310:4:32","type":""}],"src":"1190:447:32"},{"body":{"nativeSrc":"1767:125:32","nodeType":"YulBlock","src":"1767:125:32","statements":[{"nativeSrc":"1777:26:32","nodeType":"YulAssignment","src":"1777:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"1789:9:32","nodeType":"YulIdentifier","src":"1789:9:32"},{"kind":"number","nativeSrc":"1800:2:32","nodeType":"YulLiteral","src":"1800:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1785:3:32","nodeType":"YulIdentifier","src":"1785:3:32"},"nativeSrc":"1785:18:32","nodeType":"YulFunctionCall","src":"1785:18:32"},"variableNames":[{"name":"tail","nativeSrc":"1777:4:32","nodeType":"YulIdentifier","src":"1777:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1819:9:32","nodeType":"YulIdentifier","src":"1819:9:32"},{"arguments":[{"name":"value0","nativeSrc":"1834:6:32","nodeType":"YulIdentifier","src":"1834:6:32"},{"kind":"number","nativeSrc":"1842:42:32","nodeType":"YulLiteral","src":"1842:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1830:3:32","nodeType":"YulIdentifier","src":"1830:3:32"},"nativeSrc":"1830:55:32","nodeType":"YulFunctionCall","src":"1830:55:32"}],"functionName":{"name":"mstore","nativeSrc":"1812:6:32","nodeType":"YulIdentifier","src":"1812:6:32"},"nativeSrc":"1812:74:32","nodeType":"YulFunctionCall","src":"1812:74:32"},"nativeSrc":"1812:74:32","nodeType":"YulExpressionStatement","src":"1812:74:32"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$978__to_t_address__fromStack_reversed","nativeSrc":"1642:250:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1736:9:32","nodeType":"YulTypedName","src":"1736:9:32","type":""},{"name":"value0","nativeSrc":"1747:6:32","nodeType":"YulTypedName","src":"1747:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1758:4:32","nodeType":"YulTypedName","src":"1758:4:32","type":""}],"src":"1642:250:32"},{"body":{"nativeSrc":"1946:147:32","nodeType":"YulBlock","src":"1946:147:32","statements":[{"nativeSrc":"1956:29:32","nodeType":"YulAssignment","src":"1956:29:32","value":{"arguments":[{"name":"offset","nativeSrc":"1978:6:32","nodeType":"YulIdentifier","src":"1978:6:32"}],"functionName":{"name":"calldataload","nativeSrc":"1965:12:32","nodeType":"YulIdentifier","src":"1965:12:32"},"nativeSrc":"1965:20:32","nodeType":"YulFunctionCall","src":"1965:20:32"},"variableNames":[{"name":"value","nativeSrc":"1956:5:32","nodeType":"YulIdentifier","src":"1956:5:32"}]},{"body":{"nativeSrc":"2071:16:32","nodeType":"YulBlock","src":"2071:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2080:1:32","nodeType":"YulLiteral","src":"2080:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2083:1:32","nodeType":"YulLiteral","src":"2083:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2073:6:32","nodeType":"YulIdentifier","src":"2073:6:32"},"nativeSrc":"2073:12:32","nodeType":"YulFunctionCall","src":"2073:12:32"},"nativeSrc":"2073:12:32","nodeType":"YulExpressionStatement","src":"2073:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2007:5:32","nodeType":"YulIdentifier","src":"2007:5:32"},{"arguments":[{"name":"value","nativeSrc":"2018:5:32","nodeType":"YulIdentifier","src":"2018:5:32"},{"kind":"number","nativeSrc":"2025:42:32","nodeType":"YulLiteral","src":"2025:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2014:3:32","nodeType":"YulIdentifier","src":"2014:3:32"},"nativeSrc":"2014:54:32","nodeType":"YulFunctionCall","src":"2014:54:32"}],"functionName":{"name":"eq","nativeSrc":"2004:2:32","nodeType":"YulIdentifier","src":"2004:2:32"},"nativeSrc":"2004:65:32","nodeType":"YulFunctionCall","src":"2004:65:32"}],"functionName":{"name":"iszero","nativeSrc":"1997:6:32","nodeType":"YulIdentifier","src":"1997:6:32"},"nativeSrc":"1997:73:32","nodeType":"YulFunctionCall","src":"1997:73:32"},"nativeSrc":"1994:93:32","nodeType":"YulIf","src":"1994:93:32"}]},"name":"abi_decode_address","nativeSrc":"1897:196:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1925:6:32","nodeType":"YulTypedName","src":"1925:6:32","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1936:5:32","nodeType":"YulTypedName","src":"1936:5:32","type":""}],"src":"1897:196:32"},{"body":{"nativeSrc":"2168:116:32","nodeType":"YulBlock","src":"2168:116:32","statements":[{"body":{"nativeSrc":"2214:16:32","nodeType":"YulBlock","src":"2214:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2223:1:32","nodeType":"YulLiteral","src":"2223:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2226:1:32","nodeType":"YulLiteral","src":"2226:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2216:6:32","nodeType":"YulIdentifier","src":"2216:6:32"},"nativeSrc":"2216:12:32","nodeType":"YulFunctionCall","src":"2216:12:32"},"nativeSrc":"2216:12:32","nodeType":"YulExpressionStatement","src":"2216:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2189:7:32","nodeType":"YulIdentifier","src":"2189:7:32"},{"name":"headStart","nativeSrc":"2198:9:32","nodeType":"YulIdentifier","src":"2198:9:32"}],"functionName":{"name":"sub","nativeSrc":"2185:3:32","nodeType":"YulIdentifier","src":"2185:3:32"},"nativeSrc":"2185:23:32","nodeType":"YulFunctionCall","src":"2185:23:32"},{"kind":"number","nativeSrc":"2210:2:32","nodeType":"YulLiteral","src":"2210:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2181:3:32","nodeType":"YulIdentifier","src":"2181:3:32"},"nativeSrc":"2181:32:32","nodeType":"YulFunctionCall","src":"2181:32:32"},"nativeSrc":"2178:52:32","nodeType":"YulIf","src":"2178:52:32"},{"nativeSrc":"2239:39:32","nodeType":"YulAssignment","src":"2239:39:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2268:9:32","nodeType":"YulIdentifier","src":"2268:9:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2249:18:32","nodeType":"YulIdentifier","src":"2249:18:32"},"nativeSrc":"2249:29:32","nodeType":"YulFunctionCall","src":"2249:29:32"},"variableNames":[{"name":"value0","nativeSrc":"2239:6:32","nodeType":"YulIdentifier","src":"2239:6:32"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2098:186:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2134:9:32","nodeType":"YulTypedName","src":"2134:9:32","type":""},{"name":"dataEnd","nativeSrc":"2145:7:32","nodeType":"YulTypedName","src":"2145:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2157:6:32","nodeType":"YulTypedName","src":"2157:6:32","type":""}],"src":"2098:186:32"},{"body":{"nativeSrc":"2390:76:32","nodeType":"YulBlock","src":"2390:76:32","statements":[{"nativeSrc":"2400:26:32","nodeType":"YulAssignment","src":"2400:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2412:9:32","nodeType":"YulIdentifier","src":"2412:9:32"},{"kind":"number","nativeSrc":"2423:2:32","nodeType":"YulLiteral","src":"2423:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2408:3:32","nodeType":"YulIdentifier","src":"2408:3:32"},"nativeSrc":"2408:18:32","nodeType":"YulFunctionCall","src":"2408:18:32"},"variableNames":[{"name":"tail","nativeSrc":"2400:4:32","nodeType":"YulIdentifier","src":"2400:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2442:9:32","nodeType":"YulIdentifier","src":"2442:9:32"},{"name":"value0","nativeSrc":"2453:6:32","nodeType":"YulIdentifier","src":"2453:6:32"}],"functionName":{"name":"mstore","nativeSrc":"2435:6:32","nodeType":"YulIdentifier","src":"2435:6:32"},"nativeSrc":"2435:25:32","nodeType":"YulFunctionCall","src":"2435:25:32"},"nativeSrc":"2435:25:32","nodeType":"YulExpressionStatement","src":"2435:25:32"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"2289:177:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2359:9:32","nodeType":"YulTypedName","src":"2359:9:32","type":""},{"name":"value0","nativeSrc":"2370:6:32","nodeType":"YulTypedName","src":"2370:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2381:4:32","nodeType":"YulTypedName","src":"2381:4:32","type":""}],"src":"2289:177:32"},{"body":{"nativeSrc":"2572:125:32","nodeType":"YulBlock","src":"2572:125:32","statements":[{"nativeSrc":"2582:26:32","nodeType":"YulAssignment","src":"2582:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2594:9:32","nodeType":"YulIdentifier","src":"2594:9:32"},{"kind":"number","nativeSrc":"2605:2:32","nodeType":"YulLiteral","src":"2605:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2590:3:32","nodeType":"YulIdentifier","src":"2590:3:32"},"nativeSrc":"2590:18:32","nodeType":"YulFunctionCall","src":"2590:18:32"},"variableNames":[{"name":"tail","nativeSrc":"2582:4:32","nodeType":"YulIdentifier","src":"2582:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2624:9:32","nodeType":"YulIdentifier","src":"2624:9:32"},{"arguments":[{"name":"value0","nativeSrc":"2639:6:32","nodeType":"YulIdentifier","src":"2639:6:32"},{"kind":"number","nativeSrc":"2647:42:32","nodeType":"YulLiteral","src":"2647:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2635:3:32","nodeType":"YulIdentifier","src":"2635:3:32"},"nativeSrc":"2635:55:32","nodeType":"YulFunctionCall","src":"2635:55:32"}],"functionName":{"name":"mstore","nativeSrc":"2617:6:32","nodeType":"YulIdentifier","src":"2617:6:32"},"nativeSrc":"2617:74:32","nodeType":"YulFunctionCall","src":"2617:74:32"},"nativeSrc":"2617:74:32","nodeType":"YulExpressionStatement","src":"2617:74:32"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2471:226:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2541:9:32","nodeType":"YulTypedName","src":"2541:9:32","type":""},{"name":"value0","nativeSrc":"2552:6:32","nodeType":"YulTypedName","src":"2552:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2563:4:32","nodeType":"YulTypedName","src":"2563:4:32","type":""}],"src":"2471:226:32"},{"body":{"nativeSrc":"2772:110:32","nodeType":"YulBlock","src":"2772:110:32","statements":[{"body":{"nativeSrc":"2818:16:32","nodeType":"YulBlock","src":"2818:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2827:1:32","nodeType":"YulLiteral","src":"2827:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"2830:1:32","nodeType":"YulLiteral","src":"2830:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2820:6:32","nodeType":"YulIdentifier","src":"2820:6:32"},"nativeSrc":"2820:12:32","nodeType":"YulFunctionCall","src":"2820:12:32"},"nativeSrc":"2820:12:32","nodeType":"YulExpressionStatement","src":"2820:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2793:7:32","nodeType":"YulIdentifier","src":"2793:7:32"},{"name":"headStart","nativeSrc":"2802:9:32","nodeType":"YulIdentifier","src":"2802:9:32"}],"functionName":{"name":"sub","nativeSrc":"2789:3:32","nodeType":"YulIdentifier","src":"2789:3:32"},"nativeSrc":"2789:23:32","nodeType":"YulFunctionCall","src":"2789:23:32"},{"kind":"number","nativeSrc":"2814:2:32","nodeType":"YulLiteral","src":"2814:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2785:3:32","nodeType":"YulIdentifier","src":"2785:3:32"},"nativeSrc":"2785:32:32","nodeType":"YulFunctionCall","src":"2785:32:32"},"nativeSrc":"2782:52:32","nodeType":"YulIf","src":"2782:52:32"},{"nativeSrc":"2843:33:32","nodeType":"YulAssignment","src":"2843:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"2866:9:32","nodeType":"YulIdentifier","src":"2866:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"2853:12:32","nodeType":"YulIdentifier","src":"2853:12:32"},"nativeSrc":"2853:23:32","nodeType":"YulFunctionCall","src":"2853:23:32"},"variableNames":[{"name":"value0","nativeSrc":"2843:6:32","nodeType":"YulIdentifier","src":"2843:6:32"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2702:180:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2738:9:32","nodeType":"YulTypedName","src":"2738:9:32","type":""},{"name":"dataEnd","nativeSrc":"2749:7:32","nodeType":"YulTypedName","src":"2749:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2761:6:32","nodeType":"YulTypedName","src":"2761:6:32","type":""}],"src":"2702:180:32"},{"body":{"nativeSrc":"3044:162:32","nodeType":"YulBlock","src":"3044:162:32","statements":[{"nativeSrc":"3054:26:32","nodeType":"YulAssignment","src":"3054:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3066:9:32","nodeType":"YulIdentifier","src":"3066:9:32"},{"kind":"number","nativeSrc":"3077:2:32","nodeType":"YulLiteral","src":"3077:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3062:3:32","nodeType":"YulIdentifier","src":"3062:3:32"},"nativeSrc":"3062:18:32","nodeType":"YulFunctionCall","src":"3062:18:32"},"variableNames":[{"name":"tail","nativeSrc":"3054:4:32","nodeType":"YulIdentifier","src":"3054:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3096:9:32","nodeType":"YulIdentifier","src":"3096:9:32"},{"name":"value0","nativeSrc":"3107:6:32","nodeType":"YulIdentifier","src":"3107:6:32"}],"functionName":{"name":"mstore","nativeSrc":"3089:6:32","nodeType":"YulIdentifier","src":"3089:6:32"},"nativeSrc":"3089:25:32","nodeType":"YulFunctionCall","src":"3089:25:32"},"nativeSrc":"3089:25:32","nodeType":"YulExpressionStatement","src":"3089:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3134:9:32","nodeType":"YulIdentifier","src":"3134:9:32"},{"kind":"number","nativeSrc":"3145:2:32","nodeType":"YulLiteral","src":"3145:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3130:3:32","nodeType":"YulIdentifier","src":"3130:3:32"},"nativeSrc":"3130:18:32","nodeType":"YulFunctionCall","src":"3130:18:32"},{"name":"value1","nativeSrc":"3150:6:32","nodeType":"YulIdentifier","src":"3150:6:32"}],"functionName":{"name":"mstore","nativeSrc":"3123:6:32","nodeType":"YulIdentifier","src":"3123:6:32"},"nativeSrc":"3123:34:32","nodeType":"YulFunctionCall","src":"3123:34:32"},"nativeSrc":"3123:34:32","nodeType":"YulExpressionStatement","src":"3123:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3177:9:32","nodeType":"YulIdentifier","src":"3177:9:32"},{"kind":"number","nativeSrc":"3188:2:32","nodeType":"YulLiteral","src":"3188:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3173:3:32","nodeType":"YulIdentifier","src":"3173:3:32"},"nativeSrc":"3173:18:32","nodeType":"YulFunctionCall","src":"3173:18:32"},{"name":"value2","nativeSrc":"3193:6:32","nodeType":"YulIdentifier","src":"3193:6:32"}],"functionName":{"name":"mstore","nativeSrc":"3166:6:32","nodeType":"YulIdentifier","src":"3166:6:32"},"nativeSrc":"3166:34:32","nodeType":"YulFunctionCall","src":"3166:34:32"},"nativeSrc":"3166:34:32","nodeType":"YulExpressionStatement","src":"3166:34:32"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"2887:319:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2997:9:32","nodeType":"YulTypedName","src":"2997:9:32","type":""},{"name":"value2","nativeSrc":"3008:6:32","nodeType":"YulTypedName","src":"3008:6:32","type":""},{"name":"value1","nativeSrc":"3016:6:32","nodeType":"YulTypedName","src":"3016:6:32","type":""},{"name":"value0","nativeSrc":"3024:6:32","nodeType":"YulTypedName","src":"3024:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3035:4:32","nodeType":"YulTypedName","src":"3035:4:32","type":""}],"src":"2887:319:32"},{"body":{"nativeSrc":"3350:618:32","nodeType":"YulBlock","src":"3350:618:32","statements":[{"body":{"nativeSrc":"3396:16:32","nodeType":"YulBlock","src":"3396:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3405:1:32","nodeType":"YulLiteral","src":"3405:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3408:1:32","nodeType":"YulLiteral","src":"3408:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3398:6:32","nodeType":"YulIdentifier","src":"3398:6:32"},"nativeSrc":"3398:12:32","nodeType":"YulFunctionCall","src":"3398:12:32"},"nativeSrc":"3398:12:32","nodeType":"YulExpressionStatement","src":"3398:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3371:7:32","nodeType":"YulIdentifier","src":"3371:7:32"},{"name":"headStart","nativeSrc":"3380:9:32","nodeType":"YulIdentifier","src":"3380:9:32"}],"functionName":{"name":"sub","nativeSrc":"3367:3:32","nodeType":"YulIdentifier","src":"3367:3:32"},"nativeSrc":"3367:23:32","nodeType":"YulFunctionCall","src":"3367:23:32"},{"kind":"number","nativeSrc":"3392:2:32","nodeType":"YulLiteral","src":"3392:2:32","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3363:3:32","nodeType":"YulIdentifier","src":"3363:3:32"},"nativeSrc":"3363:32:32","nodeType":"YulFunctionCall","src":"3363:32:32"},"nativeSrc":"3360:52:32","nodeType":"YulIf","src":"3360:52:32"},{"nativeSrc":"3421:33:32","nodeType":"YulAssignment","src":"3421:33:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3444:9:32","nodeType":"YulIdentifier","src":"3444:9:32"}],"functionName":{"name":"calldataload","nativeSrc":"3431:12:32","nodeType":"YulIdentifier","src":"3431:12:32"},"nativeSrc":"3431:23:32","nodeType":"YulFunctionCall","src":"3431:23:32"},"variableNames":[{"name":"value0","nativeSrc":"3421:6:32","nodeType":"YulIdentifier","src":"3421:6:32"}]},{"nativeSrc":"3463:46:32","nodeType":"YulVariableDeclaration","src":"3463:46:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3494:9:32","nodeType":"YulIdentifier","src":"3494:9:32"},{"kind":"number","nativeSrc":"3505:2:32","nodeType":"YulLiteral","src":"3505:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3490:3:32","nodeType":"YulIdentifier","src":"3490:3:32"},"nativeSrc":"3490:18:32","nodeType":"YulFunctionCall","src":"3490:18:32"}],"functionName":{"name":"calldataload","nativeSrc":"3477:12:32","nodeType":"YulIdentifier","src":"3477:12:32"},"nativeSrc":"3477:32:32","nodeType":"YulFunctionCall","src":"3477:32:32"},"variables":[{"name":"offset","nativeSrc":"3467:6:32","nodeType":"YulTypedName","src":"3467:6:32","type":""}]},{"nativeSrc":"3518:28:32","nodeType":"YulVariableDeclaration","src":"3518:28:32","value":{"kind":"number","nativeSrc":"3528:18:32","nodeType":"YulLiteral","src":"3528:18:32","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3522:2:32","nodeType":"YulTypedName","src":"3522:2:32","type":""}]},{"body":{"nativeSrc":"3573:16:32","nodeType":"YulBlock","src":"3573:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3582:1:32","nodeType":"YulLiteral","src":"3582:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3585:1:32","nodeType":"YulLiteral","src":"3585:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3575:6:32","nodeType":"YulIdentifier","src":"3575:6:32"},"nativeSrc":"3575:12:32","nodeType":"YulFunctionCall","src":"3575:12:32"},"nativeSrc":"3575:12:32","nodeType":"YulExpressionStatement","src":"3575:12:32"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3561:6:32","nodeType":"YulIdentifier","src":"3561:6:32"},{"name":"_1","nativeSrc":"3569:2:32","nodeType":"YulIdentifier","src":"3569:2:32"}],"functionName":{"name":"gt","nativeSrc":"3558:2:32","nodeType":"YulIdentifier","src":"3558:2:32"},"nativeSrc":"3558:14:32","nodeType":"YulFunctionCall","src":"3558:14:32"},"nativeSrc":"3555:34:32","nodeType":"YulIf","src":"3555:34:32"},{"nativeSrc":"3598:32:32","nodeType":"YulVariableDeclaration","src":"3598:32:32","value":{"arguments":[{"name":"headStart","nativeSrc":"3612:9:32","nodeType":"YulIdentifier","src":"3612:9:32"},{"name":"offset","nativeSrc":"3623:6:32","nodeType":"YulIdentifier","src":"3623:6:32"}],"functionName":{"name":"add","nativeSrc":"3608:3:32","nodeType":"YulIdentifier","src":"3608:3:32"},"nativeSrc":"3608:22:32","nodeType":"YulFunctionCall","src":"3608:22:32"},"variables":[{"name":"_2","nativeSrc":"3602:2:32","nodeType":"YulTypedName","src":"3602:2:32","type":""}]},{"body":{"nativeSrc":"3678:16:32","nodeType":"YulBlock","src":"3678:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3687:1:32","nodeType":"YulLiteral","src":"3687:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3690:1:32","nodeType":"YulLiteral","src":"3690:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3680:6:32","nodeType":"YulIdentifier","src":"3680:6:32"},"nativeSrc":"3680:12:32","nodeType":"YulFunctionCall","src":"3680:12:32"},"nativeSrc":"3680:12:32","nodeType":"YulExpressionStatement","src":"3680:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3657:2:32","nodeType":"YulIdentifier","src":"3657:2:32"},{"kind":"number","nativeSrc":"3661:4:32","nodeType":"YulLiteral","src":"3661:4:32","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3653:3:32","nodeType":"YulIdentifier","src":"3653:3:32"},"nativeSrc":"3653:13:32","nodeType":"YulFunctionCall","src":"3653:13:32"},{"name":"dataEnd","nativeSrc":"3668:7:32","nodeType":"YulIdentifier","src":"3668:7:32"}],"functionName":{"name":"slt","nativeSrc":"3649:3:32","nodeType":"YulIdentifier","src":"3649:3:32"},"nativeSrc":"3649:27:32","nodeType":"YulFunctionCall","src":"3649:27:32"}],"functionName":{"name":"iszero","nativeSrc":"3642:6:32","nodeType":"YulIdentifier","src":"3642:6:32"},"nativeSrc":"3642:35:32","nodeType":"YulFunctionCall","src":"3642:35:32"},"nativeSrc":"3639:55:32","nodeType":"YulIf","src":"3639:55:32"},{"nativeSrc":"3703:30:32","nodeType":"YulVariableDeclaration","src":"3703:30:32","value":{"arguments":[{"name":"_2","nativeSrc":"3730:2:32","nodeType":"YulIdentifier","src":"3730:2:32"}],"functionName":{"name":"calldataload","nativeSrc":"3717:12:32","nodeType":"YulIdentifier","src":"3717:12:32"},"nativeSrc":"3717:16:32","nodeType":"YulFunctionCall","src":"3717:16:32"},"variables":[{"name":"length","nativeSrc":"3707:6:32","nodeType":"YulTypedName","src":"3707:6:32","type":""}]},{"body":{"nativeSrc":"3760:16:32","nodeType":"YulBlock","src":"3760:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3769:1:32","nodeType":"YulLiteral","src":"3769:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3772:1:32","nodeType":"YulLiteral","src":"3772:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3762:6:32","nodeType":"YulIdentifier","src":"3762:6:32"},"nativeSrc":"3762:12:32","nodeType":"YulFunctionCall","src":"3762:12:32"},"nativeSrc":"3762:12:32","nodeType":"YulExpressionStatement","src":"3762:12:32"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3748:6:32","nodeType":"YulIdentifier","src":"3748:6:32"},{"name":"_1","nativeSrc":"3756:2:32","nodeType":"YulIdentifier","src":"3756:2:32"}],"functionName":{"name":"gt","nativeSrc":"3745:2:32","nodeType":"YulIdentifier","src":"3745:2:32"},"nativeSrc":"3745:14:32","nodeType":"YulFunctionCall","src":"3745:14:32"},"nativeSrc":"3742:34:32","nodeType":"YulIf","src":"3742:34:32"},{"body":{"nativeSrc":"3834:16:32","nodeType":"YulBlock","src":"3834:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3843:1:32","nodeType":"YulLiteral","src":"3843:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"3846:1:32","nodeType":"YulLiteral","src":"3846:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3836:6:32","nodeType":"YulIdentifier","src":"3836:6:32"},"nativeSrc":"3836:12:32","nodeType":"YulFunctionCall","src":"3836:12:32"},"nativeSrc":"3836:12:32","nodeType":"YulExpressionStatement","src":"3836:12:32"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3799:2:32","nodeType":"YulIdentifier","src":"3799:2:32"},{"arguments":[{"kind":"number","nativeSrc":"3807:1:32","nodeType":"YulLiteral","src":"3807:1:32","type":"","value":"5"},{"name":"length","nativeSrc":"3810:6:32","nodeType":"YulIdentifier","src":"3810:6:32"}],"functionName":{"name":"shl","nativeSrc":"3803:3:32","nodeType":"YulIdentifier","src":"3803:3:32"},"nativeSrc":"3803:14:32","nodeType":"YulFunctionCall","src":"3803:14:32"}],"functionName":{"name":"add","nativeSrc":"3795:3:32","nodeType":"YulIdentifier","src":"3795:3:32"},"nativeSrc":"3795:23:32","nodeType":"YulFunctionCall","src":"3795:23:32"},{"kind":"number","nativeSrc":"3820:2:32","nodeType":"YulLiteral","src":"3820:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3791:3:32","nodeType":"YulIdentifier","src":"3791:3:32"},"nativeSrc":"3791:32:32","nodeType":"YulFunctionCall","src":"3791:32:32"},{"name":"dataEnd","nativeSrc":"3825:7:32","nodeType":"YulIdentifier","src":"3825:7:32"}],"functionName":{"name":"gt","nativeSrc":"3788:2:32","nodeType":"YulIdentifier","src":"3788:2:32"},"nativeSrc":"3788:45:32","nodeType":"YulFunctionCall","src":"3788:45:32"},"nativeSrc":"3785:65:32","nodeType":"YulIf","src":"3785:65:32"},{"nativeSrc":"3859:21:32","nodeType":"YulAssignment","src":"3859:21:32","value":{"arguments":[{"name":"_2","nativeSrc":"3873:2:32","nodeType":"YulIdentifier","src":"3873:2:32"},{"kind":"number","nativeSrc":"3877:2:32","nodeType":"YulLiteral","src":"3877:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3869:3:32","nodeType":"YulIdentifier","src":"3869:3:32"},"nativeSrc":"3869:11:32","nodeType":"YulFunctionCall","src":"3869:11:32"},"variableNames":[{"name":"value1","nativeSrc":"3859:6:32","nodeType":"YulIdentifier","src":"3859:6:32"}]},{"nativeSrc":"3889:16:32","nodeType":"YulAssignment","src":"3889:16:32","value":{"name":"length","nativeSrc":"3899:6:32","nodeType":"YulIdentifier","src":"3899:6:32"},"variableNames":[{"name":"value2","nativeSrc":"3889:6:32","nodeType":"YulIdentifier","src":"3889:6:32"}]},{"nativeSrc":"3914:48:32","nodeType":"YulAssignment","src":"3914:48:32","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3947:9:32","nodeType":"YulIdentifier","src":"3947:9:32"},{"kind":"number","nativeSrc":"3958:2:32","nodeType":"YulLiteral","src":"3958:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3943:3:32","nodeType":"YulIdentifier","src":"3943:3:32"},"nativeSrc":"3943:18:32","nodeType":"YulFunctionCall","src":"3943:18:32"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3924:18:32","nodeType":"YulIdentifier","src":"3924:18:32"},"nativeSrc":"3924:38:32","nodeType":"YulFunctionCall","src":"3924:38:32"},"variableNames":[{"name":"value3","nativeSrc":"3914:6:32","nodeType":"YulIdentifier","src":"3914:6:32"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address","nativeSrc":"3211:757:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3292:9:32","nodeType":"YulTypedName","src":"3292:9:32","type":""},{"name":"dataEnd","nativeSrc":"3303:7:32","nodeType":"YulTypedName","src":"3303:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3315:6:32","nodeType":"YulTypedName","src":"3315:6:32","type":""},{"name":"value1","nativeSrc":"3323:6:32","nodeType":"YulTypedName","src":"3323:6:32","type":""},{"name":"value2","nativeSrc":"3331:6:32","nodeType":"YulTypedName","src":"3331:6:32","type":""},{"name":"value3","nativeSrc":"3339:6:32","nodeType":"YulTypedName","src":"3339:6:32","type":""}],"src":"3211:757:32"},{"body":{"nativeSrc":"4074:76:32","nodeType":"YulBlock","src":"4074:76:32","statements":[{"nativeSrc":"4084:26:32","nodeType":"YulAssignment","src":"4084:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4096:9:32","nodeType":"YulIdentifier","src":"4096:9:32"},{"kind":"number","nativeSrc":"4107:2:32","nodeType":"YulLiteral","src":"4107:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4092:3:32","nodeType":"YulIdentifier","src":"4092:3:32"},"nativeSrc":"4092:18:32","nodeType":"YulFunctionCall","src":"4092:18:32"},"variableNames":[{"name":"tail","nativeSrc":"4084:4:32","nodeType":"YulIdentifier","src":"4084:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4126:9:32","nodeType":"YulIdentifier","src":"4126:9:32"},{"name":"value0","nativeSrc":"4137:6:32","nodeType":"YulIdentifier","src":"4137:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4119:6:32","nodeType":"YulIdentifier","src":"4119:6:32"},"nativeSrc":"4119:25:32","nodeType":"YulFunctionCall","src":"4119:25:32"},"nativeSrc":"4119:25:32","nodeType":"YulExpressionStatement","src":"4119:25:32"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3973:177:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4043:9:32","nodeType":"YulTypedName","src":"4043:9:32","type":""},{"name":"value0","nativeSrc":"4054:6:32","nodeType":"YulTypedName","src":"4054:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4065:4:32","nodeType":"YulTypedName","src":"4065:4:32","type":""}],"src":"3973:177:32"},{"body":{"nativeSrc":"4284:119:32","nodeType":"YulBlock","src":"4284:119:32","statements":[{"nativeSrc":"4294:26:32","nodeType":"YulAssignment","src":"4294:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4306:9:32","nodeType":"YulIdentifier","src":"4306:9:32"},{"kind":"number","nativeSrc":"4317:2:32","nodeType":"YulLiteral","src":"4317:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4302:3:32","nodeType":"YulIdentifier","src":"4302:3:32"},"nativeSrc":"4302:18:32","nodeType":"YulFunctionCall","src":"4302:18:32"},"variableNames":[{"name":"tail","nativeSrc":"4294:4:32","nodeType":"YulIdentifier","src":"4294:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4336:9:32","nodeType":"YulIdentifier","src":"4336:9:32"},{"name":"value0","nativeSrc":"4347:6:32","nodeType":"YulIdentifier","src":"4347:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4329:6:32","nodeType":"YulIdentifier","src":"4329:6:32"},"nativeSrc":"4329:25:32","nodeType":"YulFunctionCall","src":"4329:25:32"},"nativeSrc":"4329:25:32","nodeType":"YulExpressionStatement","src":"4329:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4374:9:32","nodeType":"YulIdentifier","src":"4374:9:32"},{"kind":"number","nativeSrc":"4385:2:32","nodeType":"YulLiteral","src":"4385:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4370:3:32","nodeType":"YulIdentifier","src":"4370:3:32"},"nativeSrc":"4370:18:32","nodeType":"YulFunctionCall","src":"4370:18:32"},{"name":"value1","nativeSrc":"4390:6:32","nodeType":"YulIdentifier","src":"4390:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4363:6:32","nodeType":"YulIdentifier","src":"4363:6:32"},"nativeSrc":"4363:34:32","nodeType":"YulFunctionCall","src":"4363:34:32"},"nativeSrc":"4363:34:32","nodeType":"YulExpressionStatement","src":"4363:34:32"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"4155:248:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4245:9:32","nodeType":"YulTypedName","src":"4245:9:32","type":""},{"name":"value1","nativeSrc":"4256:6:32","nodeType":"YulTypedName","src":"4256:6:32","type":""},{"name":"value0","nativeSrc":"4264:6:32","nodeType":"YulTypedName","src":"4264:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4275:4:32","nodeType":"YulTypedName","src":"4275:4:32","type":""}],"src":"4155:248:32"},{"body":{"nativeSrc":"4537:119:32","nodeType":"YulBlock","src":"4537:119:32","statements":[{"nativeSrc":"4547:26:32","nodeType":"YulAssignment","src":"4547:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"4559:9:32","nodeType":"YulIdentifier","src":"4559:9:32"},{"kind":"number","nativeSrc":"4570:2:32","nodeType":"YulLiteral","src":"4570:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4555:3:32","nodeType":"YulIdentifier","src":"4555:3:32"},"nativeSrc":"4555:18:32","nodeType":"YulFunctionCall","src":"4555:18:32"},"variableNames":[{"name":"tail","nativeSrc":"4547:4:32","nodeType":"YulIdentifier","src":"4547:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4589:9:32","nodeType":"YulIdentifier","src":"4589:9:32"},{"name":"value0","nativeSrc":"4600:6:32","nodeType":"YulIdentifier","src":"4600:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4582:6:32","nodeType":"YulIdentifier","src":"4582:6:32"},"nativeSrc":"4582:25:32","nodeType":"YulFunctionCall","src":"4582:25:32"},"nativeSrc":"4582:25:32","nodeType":"YulExpressionStatement","src":"4582:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4627:9:32","nodeType":"YulIdentifier","src":"4627:9:32"},{"kind":"number","nativeSrc":"4638:2:32","nodeType":"YulLiteral","src":"4638:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4623:3:32","nodeType":"YulIdentifier","src":"4623:3:32"},"nativeSrc":"4623:18:32","nodeType":"YulFunctionCall","src":"4623:18:32"},{"name":"value1","nativeSrc":"4643:6:32","nodeType":"YulIdentifier","src":"4643:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4616:6:32","nodeType":"YulIdentifier","src":"4616:6:32"},"nativeSrc":"4616:34:32","nodeType":"YulFunctionCall","src":"4616:34:32"},"nativeSrc":"4616:34:32","nodeType":"YulExpressionStatement","src":"4616:34:32"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"4408:248:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4498:9:32","nodeType":"YulTypedName","src":"4498:9:32","type":""},{"name":"value1","nativeSrc":"4509:6:32","nodeType":"YulTypedName","src":"4509:6:32","type":""},{"name":"value0","nativeSrc":"4517:6:32","nodeType":"YulTypedName","src":"4517:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4528:4:32","nodeType":"YulTypedName","src":"4528:4:32","type":""}],"src":"4408:248:32"},{"body":{"nativeSrc":"4808:182:32","nodeType":"YulBlock","src":"4808:182:32","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4825:3:32","nodeType":"YulIdentifier","src":"4825:3:32"},{"name":"value0","nativeSrc":"4830:6:32","nodeType":"YulIdentifier","src":"4830:6:32"}],"functionName":{"name":"mstore","nativeSrc":"4818:6:32","nodeType":"YulIdentifier","src":"4818:6:32"},"nativeSrc":"4818:19:32","nodeType":"YulFunctionCall","src":"4818:19:32"},"nativeSrc":"4818:19:32","nodeType":"YulExpressionStatement","src":"4818:19:32"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4857:3:32","nodeType":"YulIdentifier","src":"4857:3:32"},{"kind":"number","nativeSrc":"4862:2:32","nodeType":"YulLiteral","src":"4862:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4853:3:32","nodeType":"YulIdentifier","src":"4853:3:32"},"nativeSrc":"4853:12:32","nodeType":"YulFunctionCall","src":"4853:12:32"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4875:2:32","nodeType":"YulLiteral","src":"4875:2:32","type":"","value":"96"},{"name":"value1","nativeSrc":"4879:6:32","nodeType":"YulIdentifier","src":"4879:6:32"}],"functionName":{"name":"shl","nativeSrc":"4871:3:32","nodeType":"YulIdentifier","src":"4871:3:32"},"nativeSrc":"4871:15:32","nodeType":"YulFunctionCall","src":"4871:15:32"},{"kind":"number","nativeSrc":"4888:66:32","nodeType":"YulLiteral","src":"4888:66:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4867:3:32","nodeType":"YulIdentifier","src":"4867:3:32"},"nativeSrc":"4867:88:32","nodeType":"YulFunctionCall","src":"4867:88:32"}],"functionName":{"name":"mstore","nativeSrc":"4846:6:32","nodeType":"YulIdentifier","src":"4846:6:32"},"nativeSrc":"4846:110:32","nodeType":"YulFunctionCall","src":"4846:110:32"},"nativeSrc":"4846:110:32","nodeType":"YulExpressionStatement","src":"4846:110:32"},{"nativeSrc":"4965:19:32","nodeType":"YulAssignment","src":"4965:19:32","value":{"arguments":[{"name":"pos","nativeSrc":"4976:3:32","nodeType":"YulIdentifier","src":"4976:3:32"},{"kind":"number","nativeSrc":"4981:2:32","nodeType":"YulLiteral","src":"4981:2:32","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"4972:3:32","nodeType":"YulIdentifier","src":"4972:3:32"},"nativeSrc":"4972:12:32","nodeType":"YulFunctionCall","src":"4972:12:32"},"variableNames":[{"name":"end","nativeSrc":"4965:3:32","nodeType":"YulIdentifier","src":"4965:3:32"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed","nativeSrc":"4661:329:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"4776:3:32","nodeType":"YulTypedName","src":"4776:3:32","type":""},{"name":"value1","nativeSrc":"4781:6:32","nodeType":"YulTypedName","src":"4781:6:32","type":""},{"name":"value0","nativeSrc":"4789:6:32","nodeType":"YulTypedName","src":"4789:6:32","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4800:3:32","nodeType":"YulTypedName","src":"4800:3:32","type":""}],"src":"4661:329:32"},{"body":{"nativeSrc":"5124:168:32","nodeType":"YulBlock","src":"5124:168:32","statements":[{"nativeSrc":"5134:26:32","nodeType":"YulAssignment","src":"5134:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"5146:9:32","nodeType":"YulIdentifier","src":"5146:9:32"},{"kind":"number","nativeSrc":"5157:2:32","nodeType":"YulLiteral","src":"5157:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5142:3:32","nodeType":"YulIdentifier","src":"5142:3:32"},"nativeSrc":"5142:18:32","nodeType":"YulFunctionCall","src":"5142:18:32"},"variableNames":[{"name":"tail","nativeSrc":"5134:4:32","nodeType":"YulIdentifier","src":"5134:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5176:9:32","nodeType":"YulIdentifier","src":"5176:9:32"},{"name":"value0","nativeSrc":"5187:6:32","nodeType":"YulIdentifier","src":"5187:6:32"}],"functionName":{"name":"mstore","nativeSrc":"5169:6:32","nodeType":"YulIdentifier","src":"5169:6:32"},"nativeSrc":"5169:25:32","nodeType":"YulFunctionCall","src":"5169:25:32"},"nativeSrc":"5169:25:32","nodeType":"YulExpressionStatement","src":"5169:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5214:9:32","nodeType":"YulIdentifier","src":"5214:9:32"},{"kind":"number","nativeSrc":"5225:2:32","nodeType":"YulLiteral","src":"5225:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5210:3:32","nodeType":"YulIdentifier","src":"5210:3:32"},"nativeSrc":"5210:18:32","nodeType":"YulFunctionCall","src":"5210:18:32"},{"arguments":[{"name":"value1","nativeSrc":"5234:6:32","nodeType":"YulIdentifier","src":"5234:6:32"},{"kind":"number","nativeSrc":"5242:42:32","nodeType":"YulLiteral","src":"5242:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5230:3:32","nodeType":"YulIdentifier","src":"5230:3:32"},"nativeSrc":"5230:55:32","nodeType":"YulFunctionCall","src":"5230:55:32"}],"functionName":{"name":"mstore","nativeSrc":"5203:6:32","nodeType":"YulIdentifier","src":"5203:6:32"},"nativeSrc":"5203:83:32","nodeType":"YulFunctionCall","src":"5203:83:32"},"nativeSrc":"5203:83:32","nodeType":"YulExpressionStatement","src":"5203:83:32"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"4995:297:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5085:9:32","nodeType":"YulTypedName","src":"5085:9:32","type":""},{"name":"value1","nativeSrc":"5096:6:32","nodeType":"YulTypedName","src":"5096:6:32","type":""},{"name":"value0","nativeSrc":"5104:6:32","nodeType":"YulTypedName","src":"5104:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5115:4:32","nodeType":"YulTypedName","src":"5115:4:32","type":""}],"src":"4995:297:32"},{"body":{"nativeSrc":"5329:152:32","nodeType":"YulBlock","src":"5329:152:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5346:1:32","nodeType":"YulLiteral","src":"5346:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5349:77:32","nodeType":"YulLiteral","src":"5349:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5339:6:32","nodeType":"YulIdentifier","src":"5339:6:32"},"nativeSrc":"5339:88:32","nodeType":"YulFunctionCall","src":"5339:88:32"},"nativeSrc":"5339:88:32","nodeType":"YulExpressionStatement","src":"5339:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5443:1:32","nodeType":"YulLiteral","src":"5443:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"5446:4:32","nodeType":"YulLiteral","src":"5446:4:32","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5436:6:32","nodeType":"YulIdentifier","src":"5436:6:32"},"nativeSrc":"5436:15:32","nodeType":"YulFunctionCall","src":"5436:15:32"},"nativeSrc":"5436:15:32","nodeType":"YulExpressionStatement","src":"5436:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5467:1:32","nodeType":"YulLiteral","src":"5467:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"5470:4:32","nodeType":"YulLiteral","src":"5470:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5460:6:32","nodeType":"YulIdentifier","src":"5460:6:32"},"nativeSrc":"5460:15:32","nodeType":"YulFunctionCall","src":"5460:15:32"},"nativeSrc":"5460:15:32","nodeType":"YulExpressionStatement","src":"5460:15:32"}]},"name":"panic_error_0x11","nativeSrc":"5297:184:32","nodeType":"YulFunctionDefinition","src":"5297:184:32"},{"body":{"nativeSrc":"5534:77:32","nodeType":"YulBlock","src":"5534:77:32","statements":[{"nativeSrc":"5544:16:32","nodeType":"YulAssignment","src":"5544:16:32","value":{"arguments":[{"name":"x","nativeSrc":"5555:1:32","nodeType":"YulIdentifier","src":"5555:1:32"},{"name":"y","nativeSrc":"5558:1:32","nodeType":"YulIdentifier","src":"5558:1:32"}],"functionName":{"name":"add","nativeSrc":"5551:3:32","nodeType":"YulIdentifier","src":"5551:3:32"},"nativeSrc":"5551:9:32","nodeType":"YulFunctionCall","src":"5551:9:32"},"variableNames":[{"name":"sum","nativeSrc":"5544:3:32","nodeType":"YulIdentifier","src":"5544:3:32"}]},{"body":{"nativeSrc":"5583:22:32","nodeType":"YulBlock","src":"5583:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5585:16:32","nodeType":"YulIdentifier","src":"5585:16:32"},"nativeSrc":"5585:18:32","nodeType":"YulFunctionCall","src":"5585:18:32"},"nativeSrc":"5585:18:32","nodeType":"YulExpressionStatement","src":"5585:18:32"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"5575:1:32","nodeType":"YulIdentifier","src":"5575:1:32"},{"name":"sum","nativeSrc":"5578:3:32","nodeType":"YulIdentifier","src":"5578:3:32"}],"functionName":{"name":"gt","nativeSrc":"5572:2:32","nodeType":"YulIdentifier","src":"5572:2:32"},"nativeSrc":"5572:10:32","nodeType":"YulFunctionCall","src":"5572:10:32"},"nativeSrc":"5569:36:32","nodeType":"YulIf","src":"5569:36:32"}]},"name":"checked_add_t_uint256","nativeSrc":"5486:125:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5517:1:32","nodeType":"YulTypedName","src":"5517:1:32","type":""},{"name":"y","nativeSrc":"5520:1:32","nodeType":"YulTypedName","src":"5520:1:32","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"5526:3:32","nodeType":"YulTypedName","src":"5526:3:32","type":""}],"src":"5486:125:32"},{"body":{"nativeSrc":"5881:291:32","nodeType":"YulBlock","src":"5881:291:32","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5898:9:32","nodeType":"YulIdentifier","src":"5898:9:32"},{"arguments":[{"name":"value0","nativeSrc":"5913:6:32","nodeType":"YulIdentifier","src":"5913:6:32"},{"kind":"number","nativeSrc":"5921:42:32","nodeType":"YulLiteral","src":"5921:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5909:3:32","nodeType":"YulIdentifier","src":"5909:3:32"},"nativeSrc":"5909:55:32","nodeType":"YulFunctionCall","src":"5909:55:32"}],"functionName":{"name":"mstore","nativeSrc":"5891:6:32","nodeType":"YulIdentifier","src":"5891:6:32"},"nativeSrc":"5891:74:32","nodeType":"YulFunctionCall","src":"5891:74:32"},"nativeSrc":"5891:74:32","nodeType":"YulExpressionStatement","src":"5891:74:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5985:9:32","nodeType":"YulIdentifier","src":"5985:9:32"},{"kind":"number","nativeSrc":"5996:2:32","nodeType":"YulLiteral","src":"5996:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5981:3:32","nodeType":"YulIdentifier","src":"5981:3:32"},"nativeSrc":"5981:18:32","nodeType":"YulFunctionCall","src":"5981:18:32"},{"name":"value1","nativeSrc":"6001:6:32","nodeType":"YulIdentifier","src":"6001:6:32"}],"functionName":{"name":"mstore","nativeSrc":"5974:6:32","nodeType":"YulIdentifier","src":"5974:6:32"},"nativeSrc":"5974:34:32","nodeType":"YulFunctionCall","src":"5974:34:32"},"nativeSrc":"5974:34:32","nodeType":"YulExpressionStatement","src":"5974:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6028:9:32","nodeType":"YulIdentifier","src":"6028:9:32"},{"kind":"number","nativeSrc":"6039:2:32","nodeType":"YulLiteral","src":"6039:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6024:3:32","nodeType":"YulIdentifier","src":"6024:3:32"},"nativeSrc":"6024:18:32","nodeType":"YulFunctionCall","src":"6024:18:32"},{"name":"value2","nativeSrc":"6044:6:32","nodeType":"YulIdentifier","src":"6044:6:32"}],"functionName":{"name":"mstore","nativeSrc":"6017:6:32","nodeType":"YulIdentifier","src":"6017:6:32"},"nativeSrc":"6017:34:32","nodeType":"YulFunctionCall","src":"6017:34:32"},"nativeSrc":"6017:34:32","nodeType":"YulExpressionStatement","src":"6017:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6071:9:32","nodeType":"YulIdentifier","src":"6071:9:32"},{"kind":"number","nativeSrc":"6082:2:32","nodeType":"YulLiteral","src":"6082:2:32","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6067:3:32","nodeType":"YulIdentifier","src":"6067:3:32"},"nativeSrc":"6067:18:32","nodeType":"YulFunctionCall","src":"6067:18:32"},{"kind":"number","nativeSrc":"6087:3:32","nodeType":"YulLiteral","src":"6087:3:32","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"6060:6:32","nodeType":"YulIdentifier","src":"6060:6:32"},"nativeSrc":"6060:31:32","nodeType":"YulFunctionCall","src":"6060:31:32"},"nativeSrc":"6060:31:32","nodeType":"YulExpressionStatement","src":"6060:31:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6111:9:32","nodeType":"YulIdentifier","src":"6111:9:32"},{"kind":"number","nativeSrc":"6122:3:32","nodeType":"YulLiteral","src":"6122:3:32","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6107:3:32","nodeType":"YulIdentifier","src":"6107:3:32"},"nativeSrc":"6107:19:32","nodeType":"YulFunctionCall","src":"6107:19:32"},{"kind":"number","nativeSrc":"6128:1:32","nodeType":"YulLiteral","src":"6128:1:32","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6100:6:32","nodeType":"YulIdentifier","src":"6100:6:32"},"nativeSrc":"6100:30:32","nodeType":"YulFunctionCall","src":"6100:30:32"},"nativeSrc":"6100:30:32","nodeType":"YulExpressionStatement","src":"6100:30:32"},{"nativeSrc":"6139:27:32","nodeType":"YulAssignment","src":"6139:27:32","value":{"arguments":[{"name":"headStart","nativeSrc":"6151:9:32","nodeType":"YulIdentifier","src":"6151:9:32"},{"kind":"number","nativeSrc":"6162:3:32","nodeType":"YulLiteral","src":"6162:3:32","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6147:3:32","nodeType":"YulIdentifier","src":"6147:3:32"},"nativeSrc":"6147:19:32","nodeType":"YulFunctionCall","src":"6147:19:32"},"variableNames":[{"name":"tail","nativeSrc":"6139:4:32","nodeType":"YulIdentifier","src":"6139:4:32"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"5616:556:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5834:9:32","nodeType":"YulTypedName","src":"5834:9:32","type":""},{"name":"value2","nativeSrc":"5845:6:32","nodeType":"YulTypedName","src":"5845:6:32","type":""},{"name":"value1","nativeSrc":"5853:6:32","nodeType":"YulTypedName","src":"5853:6:32","type":""},{"name":"value0","nativeSrc":"5861:6:32","nodeType":"YulTypedName","src":"5861:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5872:4:32","nodeType":"YulTypedName","src":"5872:4:32","type":""}],"src":"5616:556:32"},{"body":{"nativeSrc":"6314:119:32","nodeType":"YulBlock","src":"6314:119:32","statements":[{"nativeSrc":"6324:26:32","nodeType":"YulAssignment","src":"6324:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"6336:9:32","nodeType":"YulIdentifier","src":"6336:9:32"},{"kind":"number","nativeSrc":"6347:2:32","nodeType":"YulLiteral","src":"6347:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6332:3:32","nodeType":"YulIdentifier","src":"6332:3:32"},"nativeSrc":"6332:18:32","nodeType":"YulFunctionCall","src":"6332:18:32"},"variableNames":[{"name":"tail","nativeSrc":"6324:4:32","nodeType":"YulIdentifier","src":"6324:4:32"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6366:9:32","nodeType":"YulIdentifier","src":"6366:9:32"},{"name":"value0","nativeSrc":"6377:6:32","nodeType":"YulIdentifier","src":"6377:6:32"}],"functionName":{"name":"mstore","nativeSrc":"6359:6:32","nodeType":"YulIdentifier","src":"6359:6:32"},"nativeSrc":"6359:25:32","nodeType":"YulFunctionCall","src":"6359:25:32"},"nativeSrc":"6359:25:32","nodeType":"YulExpressionStatement","src":"6359:25:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6404:9:32","nodeType":"YulIdentifier","src":"6404:9:32"},{"kind":"number","nativeSrc":"6415:2:32","nodeType":"YulLiteral","src":"6415:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6400:3:32","nodeType":"YulIdentifier","src":"6400:3:32"},"nativeSrc":"6400:18:32","nodeType":"YulFunctionCall","src":"6400:18:32"},{"name":"value1","nativeSrc":"6420:6:32","nodeType":"YulIdentifier","src":"6420:6:32"}],"functionName":{"name":"mstore","nativeSrc":"6393:6:32","nodeType":"YulIdentifier","src":"6393:6:32"},"nativeSrc":"6393:34:32","nodeType":"YulFunctionCall","src":"6393:34:32"},"nativeSrc":"6393:34:32","nodeType":"YulExpressionStatement","src":"6393:34:32"}]},"name":"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"6177:256:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6275:9:32","nodeType":"YulTypedName","src":"6275:9:32","type":""},{"name":"value1","nativeSrc":"6286:6:32","nodeType":"YulTypedName","src":"6286:6:32","type":""},{"name":"value0","nativeSrc":"6294:6:32","nodeType":"YulTypedName","src":"6294:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6305:4:32","nodeType":"YulTypedName","src":"6305:4:32","type":""}],"src":"6177:256:32"},{"body":{"nativeSrc":"6487:79:32","nodeType":"YulBlock","src":"6487:79:32","statements":[{"nativeSrc":"6497:17:32","nodeType":"YulAssignment","src":"6497:17:32","value":{"arguments":[{"name":"x","nativeSrc":"6509:1:32","nodeType":"YulIdentifier","src":"6509:1:32"},{"name":"y","nativeSrc":"6512:1:32","nodeType":"YulIdentifier","src":"6512:1:32"}],"functionName":{"name":"sub","nativeSrc":"6505:3:32","nodeType":"YulIdentifier","src":"6505:3:32"},"nativeSrc":"6505:9:32","nodeType":"YulFunctionCall","src":"6505:9:32"},"variableNames":[{"name":"diff","nativeSrc":"6497:4:32","nodeType":"YulIdentifier","src":"6497:4:32"}]},{"body":{"nativeSrc":"6538:22:32","nodeType":"YulBlock","src":"6538:22:32","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6540:16:32","nodeType":"YulIdentifier","src":"6540:16:32"},"nativeSrc":"6540:18:32","nodeType":"YulFunctionCall","src":"6540:18:32"},"nativeSrc":"6540:18:32","nodeType":"YulExpressionStatement","src":"6540:18:32"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6529:4:32","nodeType":"YulIdentifier","src":"6529:4:32"},{"name":"x","nativeSrc":"6535:1:32","nodeType":"YulIdentifier","src":"6535:1:32"}],"functionName":{"name":"gt","nativeSrc":"6526:2:32","nodeType":"YulIdentifier","src":"6526:2:32"},"nativeSrc":"6526:11:32","nodeType":"YulFunctionCall","src":"6526:11:32"},"nativeSrc":"6523:37:32","nodeType":"YulIf","src":"6523:37:32"}]},"name":"checked_sub_t_uint256","nativeSrc":"6438:128:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6469:1:32","nodeType":"YulTypedName","src":"6469:1:32","type":""},{"name":"y","nativeSrc":"6472:1:32","nodeType":"YulTypedName","src":"6472:1:32","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6478:4:32","nodeType":"YulTypedName","src":"6478:4:32","type":""}],"src":"6438:128:32"},{"body":{"nativeSrc":"6700:198:32","nodeType":"YulBlock","src":"6700:198:32","statements":[{"nativeSrc":"6710:26:32","nodeType":"YulAssignment","src":"6710:26:32","value":{"arguments":[{"name":"headStart","nativeSrc":"6722:9:32","nodeType":"YulIdentifier","src":"6722:9:32"},{"kind":"number","nativeSrc":"6733:2:32","nodeType":"YulLiteral","src":"6733:2:32","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6718:3:32","nodeType":"YulIdentifier","src":"6718:3:32"},"nativeSrc":"6718:18:32","nodeType":"YulFunctionCall","src":"6718:18:32"},"variableNames":[{"name":"tail","nativeSrc":"6710:4:32","nodeType":"YulIdentifier","src":"6710:4:32"}]},{"nativeSrc":"6745:52:32","nodeType":"YulVariableDeclaration","src":"6745:52:32","value":{"kind":"number","nativeSrc":"6755:42:32","nodeType":"YulLiteral","src":"6755:42:32","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6749:2:32","nodeType":"YulTypedName","src":"6749:2:32","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6813:9:32","nodeType":"YulIdentifier","src":"6813:9:32"},{"arguments":[{"name":"value0","nativeSrc":"6828:6:32","nodeType":"YulIdentifier","src":"6828:6:32"},{"name":"_1","nativeSrc":"6836:2:32","nodeType":"YulIdentifier","src":"6836:2:32"}],"functionName":{"name":"and","nativeSrc":"6824:3:32","nodeType":"YulIdentifier","src":"6824:3:32"},"nativeSrc":"6824:15:32","nodeType":"YulFunctionCall","src":"6824:15:32"}],"functionName":{"name":"mstore","nativeSrc":"6806:6:32","nodeType":"YulIdentifier","src":"6806:6:32"},"nativeSrc":"6806:34:32","nodeType":"YulFunctionCall","src":"6806:34:32"},"nativeSrc":"6806:34:32","nodeType":"YulExpressionStatement","src":"6806:34:32"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6860:9:32","nodeType":"YulIdentifier","src":"6860:9:32"},{"kind":"number","nativeSrc":"6871:2:32","nodeType":"YulLiteral","src":"6871:2:32","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6856:3:32","nodeType":"YulIdentifier","src":"6856:3:32"},"nativeSrc":"6856:18:32","nodeType":"YulFunctionCall","src":"6856:18:32"},{"arguments":[{"name":"value1","nativeSrc":"6880:6:32","nodeType":"YulIdentifier","src":"6880:6:32"},{"name":"_1","nativeSrc":"6888:2:32","nodeType":"YulIdentifier","src":"6888:2:32"}],"functionName":{"name":"and","nativeSrc":"6876:3:32","nodeType":"YulIdentifier","src":"6876:3:32"},"nativeSrc":"6876:15:32","nodeType":"YulFunctionCall","src":"6876:15:32"}],"functionName":{"name":"mstore","nativeSrc":"6849:6:32","nodeType":"YulIdentifier","src":"6849:6:32"},"nativeSrc":"6849:43:32","nodeType":"YulFunctionCall","src":"6849:43:32"},"nativeSrc":"6849:43:32","nodeType":"YulExpressionStatement","src":"6849:43:32"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"6571:327:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6661:9:32","nodeType":"YulTypedName","src":"6661:9:32","type":""},{"name":"value1","nativeSrc":"6672:6:32","nodeType":"YulTypedName","src":"6672:6:32","type":""},{"name":"value0","nativeSrc":"6680:6:32","nodeType":"YulTypedName","src":"6680:6:32","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6691:4:32","nodeType":"YulTypedName","src":"6691:4:32","type":""}],"src":"6571:327:32"},{"body":{"nativeSrc":"6981:199:32","nodeType":"YulBlock","src":"6981:199:32","statements":[{"body":{"nativeSrc":"7027:16:32","nodeType":"YulBlock","src":"7027:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7036:1:32","nodeType":"YulLiteral","src":"7036:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7039:1:32","nodeType":"YulLiteral","src":"7039:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7029:6:32","nodeType":"YulIdentifier","src":"7029:6:32"},"nativeSrc":"7029:12:32","nodeType":"YulFunctionCall","src":"7029:12:32"},"nativeSrc":"7029:12:32","nodeType":"YulExpressionStatement","src":"7029:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7002:7:32","nodeType":"YulIdentifier","src":"7002:7:32"},{"name":"headStart","nativeSrc":"7011:9:32","nodeType":"YulIdentifier","src":"7011:9:32"}],"functionName":{"name":"sub","nativeSrc":"6998:3:32","nodeType":"YulIdentifier","src":"6998:3:32"},"nativeSrc":"6998:23:32","nodeType":"YulFunctionCall","src":"6998:23:32"},{"kind":"number","nativeSrc":"7023:2:32","nodeType":"YulLiteral","src":"7023:2:32","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6994:3:32","nodeType":"YulIdentifier","src":"6994:3:32"},"nativeSrc":"6994:32:32","nodeType":"YulFunctionCall","src":"6994:32:32"},"nativeSrc":"6991:52:32","nodeType":"YulIf","src":"6991:52:32"},{"nativeSrc":"7052:29:32","nodeType":"YulVariableDeclaration","src":"7052:29:32","value":{"arguments":[{"name":"headStart","nativeSrc":"7071:9:32","nodeType":"YulIdentifier","src":"7071:9:32"}],"functionName":{"name":"mload","nativeSrc":"7065:5:32","nodeType":"YulIdentifier","src":"7065:5:32"},"nativeSrc":"7065:16:32","nodeType":"YulFunctionCall","src":"7065:16:32"},"variables":[{"name":"value","nativeSrc":"7056:5:32","nodeType":"YulTypedName","src":"7056:5:32","type":""}]},{"body":{"nativeSrc":"7134:16:32","nodeType":"YulBlock","src":"7134:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7143:1:32","nodeType":"YulLiteral","src":"7143:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7146:1:32","nodeType":"YulLiteral","src":"7146:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7136:6:32","nodeType":"YulIdentifier","src":"7136:6:32"},"nativeSrc":"7136:12:32","nodeType":"YulFunctionCall","src":"7136:12:32"},"nativeSrc":"7136:12:32","nodeType":"YulExpressionStatement","src":"7136:12:32"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7103:5:32","nodeType":"YulIdentifier","src":"7103:5:32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7124:5:32","nodeType":"YulIdentifier","src":"7124:5:32"}],"functionName":{"name":"iszero","nativeSrc":"7117:6:32","nodeType":"YulIdentifier","src":"7117:6:32"},"nativeSrc":"7117:13:32","nodeType":"YulFunctionCall","src":"7117:13:32"}],"functionName":{"name":"iszero","nativeSrc":"7110:6:32","nodeType":"YulIdentifier","src":"7110:6:32"},"nativeSrc":"7110:21:32","nodeType":"YulFunctionCall","src":"7110:21:32"}],"functionName":{"name":"eq","nativeSrc":"7100:2:32","nodeType":"YulIdentifier","src":"7100:2:32"},"nativeSrc":"7100:32:32","nodeType":"YulFunctionCall","src":"7100:32:32"}],"functionName":{"name":"iszero","nativeSrc":"7093:6:32","nodeType":"YulIdentifier","src":"7093:6:32"},"nativeSrc":"7093:40:32","nodeType":"YulFunctionCall","src":"7093:40:32"},"nativeSrc":"7090:60:32","nodeType":"YulIf","src":"7090:60:32"},{"nativeSrc":"7159:15:32","nodeType":"YulAssignment","src":"7159:15:32","value":{"name":"value","nativeSrc":"7169:5:32","nodeType":"YulIdentifier","src":"7169:5:32"},"variableNames":[{"name":"value0","nativeSrc":"7159:6:32","nodeType":"YulIdentifier","src":"7159:6:32"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6903:277:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6947:9:32","nodeType":"YulTypedName","src":"6947:9:32","type":""},{"name":"dataEnd","nativeSrc":"6958:7:32","nodeType":"YulTypedName","src":"6958:7:32","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6970:6:32","nodeType":"YulTypedName","src":"6970:6:32","type":""}],"src":"6903:277:32"},{"body":{"nativeSrc":"7217:152:32","nodeType":"YulBlock","src":"7217:152:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7234:1:32","nodeType":"YulLiteral","src":"7234:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7237:77:32","nodeType":"YulLiteral","src":"7237:77:32","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7227:6:32","nodeType":"YulIdentifier","src":"7227:6:32"},"nativeSrc":"7227:88:32","nodeType":"YulFunctionCall","src":"7227:88:32"},"nativeSrc":"7227:88:32","nodeType":"YulExpressionStatement","src":"7227:88:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7331:1:32","nodeType":"YulLiteral","src":"7331:1:32","type":"","value":"4"},{"kind":"number","nativeSrc":"7334:4:32","nodeType":"YulLiteral","src":"7334:4:32","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7324:6:32","nodeType":"YulIdentifier","src":"7324:6:32"},"nativeSrc":"7324:15:32","nodeType":"YulFunctionCall","src":"7324:15:32"},"nativeSrc":"7324:15:32","nodeType":"YulExpressionStatement","src":"7324:15:32"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7355:1:32","nodeType":"YulLiteral","src":"7355:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7358:4:32","nodeType":"YulLiteral","src":"7358:4:32","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7348:6:32","nodeType":"YulIdentifier","src":"7348:6:32"},"nativeSrc":"7348:15:32","nodeType":"YulFunctionCall","src":"7348:15:32"},"nativeSrc":"7348:15:32","nodeType":"YulExpressionStatement","src":"7348:15:32"}]},"name":"panic_error_0x32","nativeSrc":"7185:184:32","nodeType":"YulFunctionDefinition","src":"7185:184:32"},{"body":{"nativeSrc":"7504:201:32","nodeType":"YulBlock","src":"7504:201:32","statements":[{"body":{"nativeSrc":"7542:16:32","nodeType":"YulBlock","src":"7542:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7551:1:32","nodeType":"YulLiteral","src":"7551:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7554:1:32","nodeType":"YulLiteral","src":"7554:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7544:6:32","nodeType":"YulIdentifier","src":"7544:6:32"},"nativeSrc":"7544:12:32","nodeType":"YulFunctionCall","src":"7544:12:32"},"nativeSrc":"7544:12:32","nodeType":"YulExpressionStatement","src":"7544:12:32"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"7520:10:32","nodeType":"YulIdentifier","src":"7520:10:32"},{"name":"endIndex","nativeSrc":"7532:8:32","nodeType":"YulIdentifier","src":"7532:8:32"}],"functionName":{"name":"gt","nativeSrc":"7517:2:32","nodeType":"YulIdentifier","src":"7517:2:32"},"nativeSrc":"7517:24:32","nodeType":"YulFunctionCall","src":"7517:24:32"},"nativeSrc":"7514:44:32","nodeType":"YulIf","src":"7514:44:32"},{"body":{"nativeSrc":"7591:16:32","nodeType":"YulBlock","src":"7591:16:32","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7600:1:32","nodeType":"YulLiteral","src":"7600:1:32","type":"","value":"0"},{"kind":"number","nativeSrc":"7603:1:32","nodeType":"YulLiteral","src":"7603:1:32","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7593:6:32","nodeType":"YulIdentifier","src":"7593:6:32"},"nativeSrc":"7593:12:32","nodeType":"YulFunctionCall","src":"7593:12:32"},"nativeSrc":"7593:12:32","nodeType":"YulExpressionStatement","src":"7593:12:32"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"7573:8:32","nodeType":"YulIdentifier","src":"7573:8:32"},{"name":"length","nativeSrc":"7583:6:32","nodeType":"YulIdentifier","src":"7583:6:32"}],"functionName":{"name":"gt","nativeSrc":"7570:2:32","nodeType":"YulIdentifier","src":"7570:2:32"},"nativeSrc":"7570:20:32","nodeType":"YulFunctionCall","src":"7570:20:32"},"nativeSrc":"7567:40:32","nodeType":"YulIf","src":"7567:40:32"},{"nativeSrc":"7616:36:32","nodeType":"YulAssignment","src":"7616:36:32","value":{"arguments":[{"name":"offset","nativeSrc":"7633:6:32","nodeType":"YulIdentifier","src":"7633:6:32"},{"name":"startIndex","nativeSrc":"7641:10:32","nodeType":"YulIdentifier","src":"7641:10:32"}],"functionName":{"name":"add","nativeSrc":"7629:3:32","nodeType":"YulIdentifier","src":"7629:3:32"},"nativeSrc":"7629:23:32","nodeType":"YulFunctionCall","src":"7629:23:32"},"variableNames":[{"name":"offsetOut","nativeSrc":"7616:9:32","nodeType":"YulIdentifier","src":"7616:9:32"}]},{"nativeSrc":"7661:38:32","nodeType":"YulAssignment","src":"7661:38:32","value":{"arguments":[{"name":"endIndex","nativeSrc":"7678:8:32","nodeType":"YulIdentifier","src":"7678:8:32"},{"name":"startIndex","nativeSrc":"7688:10:32","nodeType":"YulIdentifier","src":"7688:10:32"}],"functionName":{"name":"sub","nativeSrc":"7674:3:32","nodeType":"YulIdentifier","src":"7674:3:32"},"nativeSrc":"7674:25:32","nodeType":"YulFunctionCall","src":"7674:25:32"},"variableNames":[{"name":"lengthOut","nativeSrc":"7661:9:32","nodeType":"YulIdentifier","src":"7661:9:32"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"7374:331:32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7438:6:32","nodeType":"YulTypedName","src":"7438:6:32","type":""},{"name":"length","nativeSrc":"7446:6:32","nodeType":"YulTypedName","src":"7446:6:32","type":""},{"name":"startIndex","nativeSrc":"7454:10:32","nodeType":"YulTypedName","src":"7454:10:32","type":""},{"name":"endIndex","nativeSrc":"7466:8:32","nodeType":"YulTypedName","src":"7466:8:32","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"7479:9:32","nodeType":"YulTypedName","src":"7479:9:32","type":""},{"name":"lengthOut","nativeSrc":"7490:9:32","nodeType":"YulTypedName","src":"7490:9:32","type":""}],"src":"7374:331:32"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$978__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        value3 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":32,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":313},{"length":32,"start":459},{"length":32,"start":2973},{"length":32,"start":3109},{"length":32,"start":3288},{"length":32,"start":3350}],"3276":[{"length":32,"start":409},{"length":32,"start":1919}],"3279":[{"length":32,"start":525},{"length":32,"start":1858},{"length":32,"start":2015}],"3282":[{"length":32,"start":586},{"length":32,"start":1640}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xEB1 JUMP JUMPDEST PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0xEF3 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x186 PUSH2 0x410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP3 SWAP2 SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0x159 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x423 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x22F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x44F JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCF JUMP JUMPDEST PUSH2 0x459 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x323 DUP3 PUSH2 0x31D PUSH2 0x875 JUMP JUMPDEST SWAP1 PUSH2 0x8A3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x334 PUSH2 0x97D JUMP JUMPDEST PUSH2 0x33C PUSH2 0x987 JUMP JUMPDEST SWAP1 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x390 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x41B PUSH2 0xA24 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A PUSH2 0x430 PUSH2 0x987 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A PUSH2 0x97D JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x4A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x4B7 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53A SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x598 DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xA2F SWAP1 POP JUMP JUMPDEST PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x664 SWAP1 PUSH1 0x1 PUSH2 0x108E JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP4 POP DUP11 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x872 PUSH2 0x862 PUSH2 0x97D JUMP JUMPDEST DUP3 PUSH2 0x86B PUSH2 0x987 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA45 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8F3 JUMPI POP PUSH1 0x0 PUSH2 0x323 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x944 JUMPI POP PUSH1 0x1 PUSH2 0x323 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A PUSH2 0xB5A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x10A1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x387 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x41B PUSH2 0xCA1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA3C DUP6 DUP5 PUSH2 0xE0B JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xAB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x387 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB54 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xB6A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB74 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC90 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x10B4 JUMP JUMPDEST ISZERO PUSH2 0xC9A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCB2 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCC0 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xDF5 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF5 SWAP2 SWAP1 PUSH2 0x10B4 JUMP JUMPDEST ISZERO PUSH2 0xE02 JUMPI PUSH2 0x41B PUSH2 0xE4E JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE46 JUMPI PUSH2 0xE3C DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE2F JUMPI PUSH2 0xE2F PUSH2 0x10D6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE7F JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE10 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x41B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE9B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xEAA JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xF96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEAA DUP3 PUSH2 0xF72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1018 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x103C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0x1054 PUSH1 0x40 DUP7 ADD PUSH2 0xF72 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x105F JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x105F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0xD3 JUMPI PUSH14 0x115B76B7B0197D92A2CBFCA93E03 0xD5 XOR CODESIZE SWAP4 PUSH10 0xBCD56821EE398AC80664 PUSH20 0x6F6C634300081600330000000000000000000000 ","sourceMap":"384:628:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:32;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;4935:473:30;;;;;;:::i;:::-;;:::i;:::-;;728:115:11;817:19;728:115;;;1135:42:32;1123:55;;;1105:74;;1093:2;1078:18;728:115:11;933:252:32;916:94:31;;;:::i;:::-;;;;;;;;:::i;1568:49:30:-;;;;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1668:33:30;;;;;;;;2435:25:32;;;2423:2;2408:18;1668:33:30;2289:177:32;710:120:1;;;:::i;1788:36:30:-;;;;;1898:32;;;;;;709:91:31;;;:::i;2000:51:30:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3089:25:32;;;3145:2;3130:18;;3123:34;;;;3173:18;;;3166:34;3077:2;3062:18;2000:51:30;2887:319:32;2117:43:30;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5971:1067;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;4935:473:30:-;5055:70;5112:12;:10;:12::i;:::-;5055:33;:31;:33::i;:::-;:56;;:70::i;:::-;5184:1;5140:21;;;:12;:21;;;;;:32;:46;5136:113;;5209:29;;;;;;;;2435:25:32;;;2408:18;;5209:29:30;;;;;;;;5136:113;5283:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5259:21:30;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;5342:59;;4329:25:32;;;4370:18;;;4363:34;;;5283:43:30;;5259:21;;5342:59;;4302:18:32;5342:59:30;;;;;;;4935:473;;;;:::o;916:94:31:-;960:14;;993:10;:8;:10::i;:::-;986:17;;;;916:94;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;709:91:31:-;755:7;781:12;:10;:12::i;5971:1067:30:-;6067:31;6101:21;;;:12;:21;;;;;6136:22;;6132:99;;6195:25;;;;;;;;2435::32;;;2408:18;;6195:25:30;2289:177:32;6132:99:30;6262:11;:21;;;6244:15;:39;:80;;;;6305:11;:19;;;6287:15;:37;6244:80;6240:160;;;6347:42;;;;;;;;4329:25:32;;;6373:15:30;4370:18:32;;;4363:34;4302:18;;6347:42:30;4155:248:32;6240:160:30;6410:12;6452:7;6461:9;6435:36;;;;;;;;4818:19:32;;;4875:2;4871:15;4888:66;4867:88;4862:2;4853:12;;4846:110;4981:2;4972:12;;4661:329;6435:36:30;;;;;;;;;;;;;6425:47;;;;;;6410:62;;6487:42;6500:11;:22;;;6524:4;6487:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6487:12:30;;:42;;-1:-1:-1;;6487:12:30;:42;-1:-1:-1;6487:42:30:i;:::-;6482:88;;6538:32;;;;;;;;5169:25:32;;;5242:42;5230:55;;5210:18;;;5203:83;5142:18;;6538:32:30;4995:297:32;6482:88:30;6585:17;;;;:11;:17;;;;;;;;6581:64;;;6611:34;;;;;;;;5169:25:32;;;5242:42;5230:55;;5210:18;;;5203:83;5142:18;;6611:34:30;4995:297:32;6581:64:30;6656:32;6691:17;;:21;;6711:1;6691:21;:::i;:::-;6656:56;;6753:11;6726:24;:38;6722:96;;;6787:20;;;;;;;;;;;;;;6722:96;6828:17;:44;;;6882:17;;;:11;:17;;;;;;:24;;;;6902:4;6882:24;;;;;;6917:52;;;;;:24;5909:55:32;;;6917:52:30;;;5891:74:32;6953:8:30;5981:18:32;;;5974:34;6024:18;;;6017:34;;;;6087:3;6067:18;;;6060:31;6107:19;;;6100:30;;;;6917:15:30;:24;;;;6147:19:32;;6917:52:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6985:46:30;;;7019:8;4329:25:32;;7029:1:30;4385:2:32;4370:18;;4363:34;6985:46:30;;;;-1:-1:-1;6999:7:30;;-1:-1:-1;6985:46:30;;4302:18:32;6985:46:30;;;;;;;6057:981;;;5971:1067;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;4040:175:30:-;4141:7;4167:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1135:42:32;1123:55;;4543:25:6;;;1105:74:32;1078:18;;4543:25:6;933:252:32;4504:64:6;4413:162;;:::o;4270:178:30:-;4369:14;;4402:39;:37;:39::i;1156:184:26:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:26:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1135:42:32;1123:55;;3243:24:6;;;1105:74:32;1078:18;;3243:24:6;933:252:32;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;6824:15:32;;;1396:59:12;;;6806:34:32;1444:10:12;6856:18:32;;;6849:43;1396:19:12;:39;;;;6718:18:32;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1643:735::-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:12;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:12;;;;-1:-1:-1;1643:735:12:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:12;:19;:39;;466:14:15;462:23;;449:37;445:2;441:46;2207:80:12;;;;;;;;;;6755:42:32;6824:15;;;2207:80:12;;;6806:34:32;2276:10:12;6856:18:32;;;6849:43;6718:18;;2207:80:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:12;;;;-1:-1:-1;1643:735:12:o;1994:290:26:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:26;;2133:116;;;-1:-1:-1;2265:12:26;1994:290;-1:-1:-1;;;1994:290:26:o;616:152:15:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;8879:147:26:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:26:o;14:332:32:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:385;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;746:23:32;;;816:2;801:18;;788:32;;-1:-1:-1;867:2:32;852:18;;839:32;;918:2;903:18;890:32;;-1:-1:-1;543:385:32;-1:-1:-1;543:385:32:o;1190:447::-;1347:2;1336:9;1329:21;1386:6;1381:2;1370:9;1366:18;1359:34;1443:6;1435;1430:2;1419:9;1415:18;1402:48;1499:1;1470:22;;;1494:2;1466:31;;;1459:42;;;;1553:2;1541:15;;;1558:66;1537:88;1522:104;1518:113;;1190:447;-1:-1:-1;1190:447:32:o;1897:196::-;1965:20;;2025:42;2014:54;;2004:65;;1994:93;;2083:1;2080;2073:12;1994:93;1897:196;;;:::o;2098:186::-;2157:6;2210:2;2198:9;2189:7;2185:23;2181:32;2178:52;;;2226:1;2223;2216:12;2178:52;2249:29;2268:9;2249:29;:::i;2702:180::-;2761:6;2814:2;2802:9;2793:7;2789:23;2785:32;2782:52;;;2830:1;2827;2820:12;2782:52;-1:-1:-1;2853:23:32;;2702:180;-1:-1:-1;2702:180:32:o;3211:757::-;3315:6;3323;3331;3339;3392:2;3380:9;3371:7;3367:23;3363:32;3360:52;;;3408:1;3405;3398:12;3360:52;3444:9;3431:23;3421:33;;3505:2;3494:9;3490:18;3477:32;3528:18;3569:2;3561:6;3558:14;3555:34;;;3585:1;3582;3575:12;3555:34;3623:6;3612:9;3608:22;3598:32;;3668:7;3661:4;3657:2;3653:13;3649:27;3639:55;;3690:1;3687;3680:12;3639:55;3730:2;3717:16;3756:2;3748:6;3745:14;3742:34;;;3772:1;3769;3762:12;3742:34;3825:7;3820:2;3810:6;3807:1;3803:14;3799:2;3795:23;3791:32;3788:45;3785:65;;;3846:1;3843;3836:12;3785:65;3877:2;3873;3869:11;3859:21;;3899:6;3889:16;;;;;3924:38;3958:2;3947:9;3943:18;3924:38;:::i;:::-;3914:48;;3211:757;;;;;;;:::o;5297:184::-;5349:77;5346:1;5339:88;5446:4;5443:1;5436:15;5470:4;5467:1;5460:15;5486:125;5551:9;;;5572:10;;;5569:36;;;5585:18;;:::i;6438:128::-;6505:9;;;6526:11;;;6523:37;;;6540:18;;:::i;6903:277::-;6970:6;7023:2;7011:9;7002:7;6998:23;6994:32;6991:52;;;7039:1;7036;7029:12;6991:52;7071:9;7065:16;7124:5;7117:13;7110:21;7103:5;7100:32;7090:60;;7146:1;7143;7136:12;7185:184;7237:77;7234:1;7227:88;7334:4;7331:1;7324:15;7358:4;7355:1;7348:15;7374:331;7479:9;7490;7532:8;7520:10;7517:24;7514:44;;;7554:1;7551;7544:12;7514:44;7583:6;7573:8;7570:20;7567:40;;;7603:1;7600;7593:12;7567:40;-1:-1:-1;;7629:23:32;;;7674:25;;;;;-1:-1:-1;7374:331:32:o"},"gasEstimates":{"creation":{"codeDepositCost":"890600","executionCost":"infinite","totalCost":"infinite"},"external":{"MINT_SUPPLY()":"infinite","REWARD_CONTRACT()":"infinite","TOKEN_ID()":"infinite","__msgData()":"infinite","__msgSender()":"infinite","claim(bytes32,bytes32[],address)":"infinite","claimStatus(bytes32)":"2483","claimWindows(bytes32)":"6735","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","noOfTokensClaimed()":"2362","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"MINT_SUPPLY()":"9dfbcde8","REWARD_CONTRACT()":"3a5af339","TOKEN_ID()":"89a89002","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","claim(bytes32,bytes32[],address)":"eb02625c","claimStatus(bytes32)":"e3a0ce09","claimWindows(bytes32)":"dc45def6","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","noOfTokensClaimed()":"ba65912e","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMintSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetEpochMerkleRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"claim(bytes32,bytes32[],address)\":{\"details\":\"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.\",\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,address)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID already exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"ExceededMintSupply()\":[{\"notice\":\"Error thrown when the number of tokens claimed exceeds the mint supply.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidProof(bytes32,address)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Error thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,address,uint256,uint256)\":{\"notice\":\"Event emitted when a payout is claimed.\"},\"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Event emitted when a claim window is set.\"}},\"kind\":\"user\",\"methods\":{\"MINT_SUPPLY()\":{\"notice\":\"The total number of tokens that can be minted in this contract.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract.\"},\"TOKEN_ID()\":{\"notice\":\"The token id to be claimed.\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"claim(bytes32,bytes32[],address)\":{\"notice\":\"Claims the payout for a specific epoch.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping from leafhash to the claim status.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"noOfTokensClaimed()\":{\"notice\":\"The total number of tokens that have been claimed.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol\":\"AnichessERC1155MerkleClaimMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess ERC1155 Merkle Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice The ERC1155Mintable reward contract.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice The token id to be claimed.\\n    uint256 public immutable TOKEN_ID;\\n\\n    /// @notice The total number of tokens that can be minted in this contract.\\n    uint256 public immutable MINT_SUPPLY;\\n\\n    /// @notice The total number of tokens that have been claimed.\\n    uint256 public noOfTokensClaimed;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 => ClaimWindow) public claimWindows;\\n\\n    /// @notice Mapping from leafhash to the claim status.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice Event emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256 id, uint256 value);\\n\\n    /// @notice Event emitted when a claim window is set.\\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Error thrown when the number of tokens claimed exceeds the mint supply.\\n    error ExceededMintSupply();\\n\\n    /// @notice Error thrown when the epoch ID already exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /**\\n     * @notice Constructor for the AnichessERC1155MerkleClaim contract.\\n     * @param tokenId The token id to be claimed.\\n     * @param mintSupply The total number of tokens that can be minted in this contract.\\n     * @param rewardContract The ERC1155Mintable reward contract interface.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 tokenId,\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        TOKEN_ID = tokenId;\\n        MINT_SUPPLY = mintSupply;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if the _msgSender() is not the owner.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a SetEpochMerkleRoot event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.\\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     * @dev Throws if the claim window has not been set.\\n     * @dev Throws if the claim window is closed or has not yet opened.\\n     * @dev Throws if the proof provided for the claim is invalid.\\n     * @dev Throws if the payout has already been claimed.\\n     * @dev Throws if the number of tokens claimed exceeds the mint supply.\\n     */\\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient) external {\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n        if (claimWindow.merkleRoot == bytes32(0)) {\\n            revert EpochIdNotExists(epochId);\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient));\\n        if (!proof.verify(claimWindow.merkleRoot, leaf)) revert InvalidProof(epochId, recipient);\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient);\\n\\n        uint256 updatedNoOfTokensClaimed = noOfTokensClaimed + 1;\\n        if (updatedNoOfTokensClaimed > MINT_SUPPLY) {\\n            revert ExceededMintSupply();\\n        }\\n\\n        noOfTokensClaimed = updatedNoOfTokensClaimed;\\n        claimStatus[leaf] = true;\\n\\n        REWARD_CONTRACT.safeMint(recipient, TOKEN_ID, 1, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, TOKEN_ID, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2c63426bcd9e7d72a47eb8cbc09bb2357218fdccf8ba7888b15efa7f0c9b1344\",\"license\":\"MIT\"},\"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {AnichessERC1155MerkleClaim} from \\\"../../merkleClaim/AnichessERC1155MerkleClaim.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract AnichessERC1155MerkleClaimMock is AnichessERC1155MerkleClaim {\\n    constructor(\\n        uint256 tokenId,\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) AnichessERC1155MerkleClaim(tokenId, mintSupply, rewardContract, forwarderRegistry) {}\\n\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x58daa2677b001d5425da13e088f5a980d43bea6b065c1c8e40882792e50f03c1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3285,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"noOfTokensClaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":3291,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)3272_storage)"},{"astId":3296,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"claimStatus","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)3272_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)3272_storage"},"t_struct(ClaimWindow)3272_storage":{"encoding":"inplace","label":"struct AnichessERC1155MerkleClaim.ClaimWindow","members":[{"astId":3267,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3269,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":3271,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,address)":[{"notice":"Error thrown when the payout has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Error thrown when the epoch ID already exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"ExceededMintSupply()":[{"notice":"Error thrown when the number of tokens claimed exceeds the mint supply."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidProof(bytes32,address)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Error thrown when the claim window is closed or has not yet opened."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,address,uint256,uint256)":{"notice":"Event emitted when a payout is claimed."},"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Event emitted when a claim window is set."}},"kind":"user","methods":{"MINT_SUPPLY()":{"notice":"The total number of tokens that can be minted in this contract."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract."},"TOKEN_ID()":{"notice":"The token id to be claimed."},"__msgData()":{"notice":"Internal function to access the current msg.data."},"claim(bytes32,bytes32[],address)":{"notice":"Claims the payout for a specific epoch."},"claimStatus(bytes32)":{"notice":"Mapping from leafhash to the claim status."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"noOfTokensClaimed()":{"notice":"The total number of tokens that have been claimed."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}